// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "relu.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic relu::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic relu::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> relu::ap_ST_fsm_state1 = "1";
const sc_lv<5> relu::ap_ST_fsm_state2 = "10";
const sc_lv<5> relu::ap_ST_fsm_state3 = "100";
const sc_lv<5> relu::ap_ST_fsm_state4 = "1000";
const sc_lv<5> relu::ap_ST_fsm_state5 = "10000";
const sc_lv<32> relu::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> relu::ap_const_lv32_1 = "1";
const sc_lv<1> relu::ap_const_lv1_0 = "0";
const sc_lv<32> relu::ap_const_lv32_2 = "10";
const sc_lv<32> relu::ap_const_lv32_3 = "11";
const sc_lv<12> relu::ap_const_lv12_0 = "000000000000";
const sc_lv<32> relu::ap_const_lv32_4 = "100";
const sc_lv<12> relu::ap_const_lv12_A90 = "101010010000";
const sc_lv<12> relu::ap_const_lv12_1 = "1";
const sc_lv<14> relu::ap_const_lv14_0 = "00000000000000";
const sc_lv<13> relu::ap_const_lv13_0 = "0000000000000";
const sc_lv<1> relu::ap_const_lv1_1 = "1";
const bool relu::ap_const_boolean_1 = true;

relu::relu(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_57_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_57_p2 );

    SC_METHOD(thread_data_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_s_fu_69_p1 );

    SC_METHOD(thread_data_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_datareg_V_1_fu_83_p3);
    sensitive << ( tmp_17_reg_113 );
    sensitive << ( tmp_1_fu_78_p2 );

    SC_METHOD(thread_ii_1_fu_63_p2);
    sensitive << ( ii_reg_46 );

    SC_METHOD(thread_res_V_address0);
    sensitive << ( tmp_s_reg_98 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_res_V_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_res_V_d0);
    sensitive << ( datareg_V_1_reg_118 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_res_V_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_17_fu_74_p1);
    sensitive << ( data_V_q0 );

    SC_METHOD(thread_tmp_1_fu_78_p2);
    sensitive << ( datareg_V_reg_108 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_fu_57_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ii_reg_46 );

    SC_METHOD(thread_tmp_s_fu_69_p1);
    sensitive << ( ii_reg_46 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_57_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "relu_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_V_address0, "(port)data_V_address0");
    sc_trace(mVcdFile, data_V_ce0, "(port)data_V_ce0");
    sc_trace(mVcdFile, data_V_q0, "(port)data_V_q0");
    sc_trace(mVcdFile, res_V_address0, "(port)res_V_address0");
    sc_trace(mVcdFile, res_V_ce0, "(port)res_V_ce0");
    sc_trace(mVcdFile, res_V_we0, "(port)res_V_we0");
    sc_trace(mVcdFile, res_V_d0, "(port)res_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ii_1_fu_63_p2, "ii_1_fu_63_p2");
    sc_trace(mVcdFile, ii_1_reg_93, "ii_1_reg_93");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_s_fu_69_p1, "tmp_s_fu_69_p1");
    sc_trace(mVcdFile, tmp_s_reg_98, "tmp_s_reg_98");
    sc_trace(mVcdFile, tmp_fu_57_p2, "tmp_fu_57_p2");
    sc_trace(mVcdFile, datareg_V_reg_108, "datareg_V_reg_108");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_17_fu_74_p1, "tmp_17_fu_74_p1");
    sc_trace(mVcdFile, tmp_17_reg_113, "tmp_17_reg_113");
    sc_trace(mVcdFile, datareg_V_1_fu_83_p3, "datareg_V_1_fu_83_p3");
    sc_trace(mVcdFile, datareg_V_1_reg_118, "datareg_V_1_reg_118");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ii_reg_46, "ii_reg_46");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_1_fu_78_p2, "tmp_1_fu_78_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

relu::~relu() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void relu::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(tmp_fu_57_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ii_reg_46 = ii_1_reg_93.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ii_reg_46 = ap_const_lv12_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        datareg_V_1_reg_118 = datareg_V_1_fu_83_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        datareg_V_reg_108 = data_V_q0.read();
        tmp_17_reg_113 = tmp_17_fu_74_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ii_1_reg_93 = ii_1_fu_63_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_57_p2.read(), ap_const_lv1_0))) {
        tmp_s_reg_98 = tmp_s_fu_69_p1.read();
    }
}

void relu::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void relu::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void relu::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void relu::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void relu::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void relu::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void relu::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_57_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void relu::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void relu::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_57_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void relu::thread_data_V_address0() {
    data_V_address0 =  (sc_lv<12>) (tmp_s_fu_69_p1.read());
}

void relu::thread_data_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_V_ce0 = ap_const_logic_1;
    } else {
        data_V_ce0 = ap_const_logic_0;
    }
}

void relu::thread_datareg_V_1_fu_83_p3() {
    datareg_V_1_fu_83_p3 = (!tmp_1_fu_78_p2.read()[0].is_01())? sc_lv<13>(): ((tmp_1_fu_78_p2.read()[0].to_bool())? tmp_17_reg_113.read(): ap_const_lv13_0);
}

void relu::thread_ii_1_fu_63_p2() {
    ii_1_fu_63_p2 = (!ii_reg_46.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(ii_reg_46.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void relu::thread_res_V_address0() {
    res_V_address0 =  (sc_lv<12>) (tmp_s_reg_98.read());
}

void relu::thread_res_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        res_V_ce0 = ap_const_logic_1;
    } else {
        res_V_ce0 = ap_const_logic_0;
    }
}

void relu::thread_res_V_d0() {
    res_V_d0 = datareg_V_1_reg_118.read();
}

void relu::thread_res_V_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        res_V_we0 = ap_const_logic_1;
    } else {
        res_V_we0 = ap_const_logic_0;
    }
}

void relu::thread_tmp_17_fu_74_p1() {
    tmp_17_fu_74_p1 = data_V_q0.read().range(13-1, 0);
}

void relu::thread_tmp_1_fu_78_p2() {
    tmp_1_fu_78_p2 = (!datareg_V_reg_108.read().is_01() || !ap_const_lv14_0.is_01())? sc_lv<1>(): (sc_bigint<14>(datareg_V_reg_108.read()) > sc_bigint<14>(ap_const_lv14_0));
}

void relu::thread_tmp_fu_57_p2() {
    tmp_fu_57_p2 = (!ii_reg_46.read().is_01() || !ap_const_lv12_A90.is_01())? sc_lv<1>(): sc_lv<1>(ii_reg_46.read() == ap_const_lv12_A90);
}

void relu::thread_tmp_s_fu_69_p1() {
    tmp_s_fu_69_p1 = esl_zext<64,12>(ii_reg_46.read());
}

void relu::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_57_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

