// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "product.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic product::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic product::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> product::ap_ST_fsm_state1 = "1";
const sc_lv<5> product::ap_ST_fsm_state2 = "10";
const sc_lv<5> product::ap_ST_fsm_state3 = "100";
const sc_lv<5> product::ap_ST_fsm_state4 = "1000";
const sc_lv<5> product::ap_ST_fsm_state5 = "10000";
const sc_lv<32> product::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> product::ap_const_lv32_2 = "10";
const sc_lv<32> product::ap_const_lv32_3 = "11";
const sc_lv<32> product::ap_const_lv32_1B = "11011";
const sc_lv<32> product::ap_const_lv32_B = "1011";
const sc_lv<32> product::ap_const_lv32_C = "1100";
const sc_lv<32> product::ap_const_lv32_19 = "11001";
const sc_lv<32> product::ap_const_lv32_D = "1101";
const sc_lv<1> product::ap_const_lv1_1 = "1";
const sc_lv<32> product::ap_const_lv32_1A = "11010";
const sc_lv<2> product::ap_const_lv2_3 = "11";
const sc_lv<2> product::ap_const_lv2_0 = "00";
const sc_lv<32> product::ap_const_lv32_4 = "100";
const sc_lv<14> product::ap_const_lv14_1FFF = "1111111111111";
const sc_lv<14> product::ap_const_lv14_2000 = "10000000000000";
const bool product::ap_const_boolean_1 = true;

product::product(sc_module_name name) : sc_module(name), mVcdFile(0) {
    myproject_mul_mul_14s_14s_28_3_1_U7 = new myproject_mul_mul_14s_14s_28_3_1<1,3,14,14,28>("myproject_mul_mul_14s_14s_28_3_1_U7");
    myproject_mul_mul_14s_14s_28_3_1_U7->clk(ap_clk);
    myproject_mul_mul_14s_14s_28_3_1_U7->reset(ap_rst);
    myproject_mul_mul_14s_14s_28_3_1_U7->din0(a_V);
    myproject_mul_mul_14s_14s_28_3_1_U7->din1(w_V);
    myproject_mul_mul_14s_14s_28_3_1_U7->ce(ap_var_for_const0);
    myproject_mul_mul_14s_14s_28_3_1_U7->dout(grp_fu_270_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Range1_all_ones_fu_139_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_Result_s_31_fu_130_p4 );

    SC_METHOD(thread_Range1_all_zeros_fu_145_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_Result_s_31_fu_130_p4 );

    SC_METHOD(thread_Range2_all_ones_fu_123_p3);
    sensitive << ( r_V_2_reg_288 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( underflow_not_fu_243_p2 );
    sensitive << ( p_Val2_6_mux_fu_248_p3 );
    sensitive << ( p_Val2_6_fu_255_p3 );

    SC_METHOD(thread_brmerge114_demorgan_fu_184_p2);
    sensitive << ( p_Result_8_fu_115_p3 );
    sensitive << ( deleted_ones_fu_170_p3 );

    SC_METHOD(thread_brmerge5_fu_232_p2);
    sensitive << ( underflow_fu_227_p2 );
    sensitive << ( overflow_fu_211_p2 );

    SC_METHOD(thread_brmerge_fu_201_p2);
    sensitive << ( p_Result_8_reg_319 );
    sensitive << ( p_not_fu_195_p2 );

    SC_METHOD(thread_carry_2_fu_109_p2);
    sensitive << ( p_Result_7_fu_79_p3 );
    sensitive << ( rev_fu_103_p2 );

    SC_METHOD(thread_deleted_ones_fu_170_p3);
    sensitive << ( carry_2_fu_109_p2 );
    sensitive << ( Range1_all_ones_fu_139_p2 );
    sensitive << ( p_s_fu_164_p2 );

    SC_METHOD(thread_deleted_zeros_fu_190_p3);
    sensitive << ( carry_2_reg_314 );
    sensitive << ( Range1_all_ones_reg_324 );
    sensitive << ( Range1_all_zeros_reg_329 );

    SC_METHOD(thread_overflow_fu_211_p2);
    sensitive << ( brmerge_fu_201_p2 );
    sensitive << ( tmp_8_fu_206_p2 );

    SC_METHOD(thread_p_Result_7_fu_79_p3);
    sensitive << ( r_V_2_reg_288 );

    SC_METHOD(thread_p_Result_8_fu_115_p3);
    sensitive << ( p_Val2_4_fu_89_p2 );

    SC_METHOD(thread_p_Result_s_31_fu_130_p4);
    sensitive << ( r_V_2_reg_288 );

    SC_METHOD(thread_p_Val2_3_fu_70_p4);
    sensitive << ( r_V_2_reg_288 );

    SC_METHOD(thread_p_Val2_4_fu_89_p2);
    sensitive << ( tmp_23_cast_fu_86_p1 );
    sensitive << ( p_Val2_3_fu_70_p4 );

    SC_METHOD(thread_p_Val2_6_fu_255_p3);
    sensitive << ( p_Val2_4_reg_308 );
    sensitive << ( underflow_fu_227_p2 );

    SC_METHOD(thread_p_Val2_6_mux_fu_248_p3);
    sensitive << ( p_Val2_4_reg_308 );
    sensitive << ( brmerge5_fu_232_p2 );

    SC_METHOD(thread_p_not_fu_195_p2);
    sensitive << ( deleted_zeros_fu_190_p3 );

    SC_METHOD(thread_p_s_fu_164_p2);
    sensitive << ( Range2_all_ones_fu_123_p3 );
    sensitive << ( rev2_fu_158_p2 );

    SC_METHOD(thread_phitmp_demorgan_fu_178_p2);
    sensitive << ( carry_2_fu_109_p2 );
    sensitive << ( Range1_all_ones_fu_139_p2 );

    SC_METHOD(thread_rev2_fu_158_p2);
    sensitive << ( tmp_29_fu_151_p3 );

    SC_METHOD(thread_rev_fu_103_p2);
    sensitive << ( tmp_26_fu_95_p3 );

    SC_METHOD(thread_tmp1_demorgan_fu_217_p2);
    sensitive << ( phitmp_demorgan_reg_334 );
    sensitive << ( brmerge114_demorgan_reg_340 );

    SC_METHOD(thread_tmp1_fu_221_p2);
    sensitive << ( tmp1_demorgan_fu_217_p2 );

    SC_METHOD(thread_tmp2_fu_238_p2);
    sensitive << ( brmerge114_demorgan_reg_340 );
    sensitive << ( tmp_8_fu_206_p2 );

    SC_METHOD(thread_tmp_23_cast_fu_86_p1);
    sensitive << ( tmp_25_reg_303 );

    SC_METHOD(thread_tmp_26_fu_95_p3);
    sensitive << ( p_Val2_4_fu_89_p2 );

    SC_METHOD(thread_tmp_29_fu_151_p3);
    sensitive << ( r_V_2_reg_288 );

    SC_METHOD(thread_tmp_8_fu_206_p2);
    sensitive << ( p_Result_s_reg_297 );

    SC_METHOD(thread_underflow_fu_227_p2);
    sensitive << ( p_Result_s_reg_297 );
    sensitive << ( tmp1_fu_221_p2 );

    SC_METHOD(thread_underflow_not_fu_243_p2);
    sensitive << ( phitmp_demorgan_reg_334 );
    sensitive << ( tmp2_fu_238_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "product_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_V, "(port)a_V");
    sc_trace(mVcdFile, w_V, "(port)w_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_270_p2, "grp_fu_270_p2");
    sc_trace(mVcdFile, r_V_2_reg_288, "r_V_2_reg_288");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, p_Result_s_reg_297, "p_Result_s_reg_297");
    sc_trace(mVcdFile, tmp_25_reg_303, "tmp_25_reg_303");
    sc_trace(mVcdFile, p_Val2_4_fu_89_p2, "p_Val2_4_fu_89_p2");
    sc_trace(mVcdFile, p_Val2_4_reg_308, "p_Val2_4_reg_308");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, carry_2_fu_109_p2, "carry_2_fu_109_p2");
    sc_trace(mVcdFile, carry_2_reg_314, "carry_2_reg_314");
    sc_trace(mVcdFile, p_Result_8_fu_115_p3, "p_Result_8_fu_115_p3");
    sc_trace(mVcdFile, p_Result_8_reg_319, "p_Result_8_reg_319");
    sc_trace(mVcdFile, Range1_all_ones_fu_139_p2, "Range1_all_ones_fu_139_p2");
    sc_trace(mVcdFile, Range1_all_ones_reg_324, "Range1_all_ones_reg_324");
    sc_trace(mVcdFile, Range1_all_zeros_fu_145_p2, "Range1_all_zeros_fu_145_p2");
    sc_trace(mVcdFile, Range1_all_zeros_reg_329, "Range1_all_zeros_reg_329");
    sc_trace(mVcdFile, phitmp_demorgan_fu_178_p2, "phitmp_demorgan_fu_178_p2");
    sc_trace(mVcdFile, phitmp_demorgan_reg_334, "phitmp_demorgan_reg_334");
    sc_trace(mVcdFile, brmerge114_demorgan_fu_184_p2, "brmerge114_demorgan_fu_184_p2");
    sc_trace(mVcdFile, brmerge114_demorgan_reg_340, "brmerge114_demorgan_reg_340");
    sc_trace(mVcdFile, tmp_23_cast_fu_86_p1, "tmp_23_cast_fu_86_p1");
    sc_trace(mVcdFile, p_Val2_3_fu_70_p4, "p_Val2_3_fu_70_p4");
    sc_trace(mVcdFile, tmp_26_fu_95_p3, "tmp_26_fu_95_p3");
    sc_trace(mVcdFile, p_Result_7_fu_79_p3, "p_Result_7_fu_79_p3");
    sc_trace(mVcdFile, rev_fu_103_p2, "rev_fu_103_p2");
    sc_trace(mVcdFile, p_Result_s_31_fu_130_p4, "p_Result_s_31_fu_130_p4");
    sc_trace(mVcdFile, tmp_29_fu_151_p3, "tmp_29_fu_151_p3");
    sc_trace(mVcdFile, Range2_all_ones_fu_123_p3, "Range2_all_ones_fu_123_p3");
    sc_trace(mVcdFile, rev2_fu_158_p2, "rev2_fu_158_p2");
    sc_trace(mVcdFile, p_s_fu_164_p2, "p_s_fu_164_p2");
    sc_trace(mVcdFile, deleted_ones_fu_170_p3, "deleted_ones_fu_170_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, deleted_zeros_fu_190_p3, "deleted_zeros_fu_190_p3");
    sc_trace(mVcdFile, p_not_fu_195_p2, "p_not_fu_195_p2");
    sc_trace(mVcdFile, brmerge_fu_201_p2, "brmerge_fu_201_p2");
    sc_trace(mVcdFile, tmp_8_fu_206_p2, "tmp_8_fu_206_p2");
    sc_trace(mVcdFile, tmp1_demorgan_fu_217_p2, "tmp1_demorgan_fu_217_p2");
    sc_trace(mVcdFile, tmp1_fu_221_p2, "tmp1_fu_221_p2");
    sc_trace(mVcdFile, underflow_fu_227_p2, "underflow_fu_227_p2");
    sc_trace(mVcdFile, overflow_fu_211_p2, "overflow_fu_211_p2");
    sc_trace(mVcdFile, tmp2_fu_238_p2, "tmp2_fu_238_p2");
    sc_trace(mVcdFile, brmerge5_fu_232_p2, "brmerge5_fu_232_p2");
    sc_trace(mVcdFile, underflow_not_fu_243_p2, "underflow_not_fu_243_p2");
    sc_trace(mVcdFile, p_Val2_6_mux_fu_248_p3, "p_Val2_6_mux_fu_248_p3");
    sc_trace(mVcdFile, p_Val2_6_fu_255_p3, "p_Val2_6_fu_255_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

product::~product() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete myproject_mul_mul_14s_14s_28_3_1_U7;
}

void product::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void product::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Range1_all_ones_reg_324 = Range1_all_ones_fu_139_p2.read();
        Range1_all_zeros_reg_329 = Range1_all_zeros_fu_145_p2.read();
        brmerge114_demorgan_reg_340 = brmerge114_demorgan_fu_184_p2.read();
        carry_2_reg_314 = carry_2_fu_109_p2.read();
        p_Result_8_reg_319 = p_Val2_4_fu_89_p2.read().range(13, 13);
        p_Val2_4_reg_308 = p_Val2_4_fu_89_p2.read();
        phitmp_demorgan_reg_334 = phitmp_demorgan_fu_178_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_Result_s_reg_297 = grp_fu_270_p2.read().range(27, 27);
        r_V_2_reg_288 = grp_fu_270_p2.read();
        tmp_25_reg_303 = grp_fu_270_p2.read().range(11, 11);
    }
}

void product::thread_Range1_all_ones_fu_139_p2() {
    Range1_all_ones_fu_139_p2 = (!p_Result_s_31_fu_130_p4.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_s_31_fu_130_p4.read() == ap_const_lv2_3);
}

void product::thread_Range1_all_zeros_fu_145_p2() {
    Range1_all_zeros_fu_145_p2 = (!p_Result_s_31_fu_130_p4.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_s_31_fu_130_p4.read() == ap_const_lv2_0);
}

void product::thread_Range2_all_ones_fu_123_p3() {
    Range2_all_ones_fu_123_p3 = r_V_2_reg_288.read().range(27, 27);
}

void product::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void product::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void product::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void product::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void product::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void product::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void product::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void product::thread_ap_return() {
    ap_return = (!underflow_not_fu_243_p2.read()[0].is_01())? sc_lv<14>(): ((underflow_not_fu_243_p2.read()[0].to_bool())? p_Val2_6_mux_fu_248_p3.read(): p_Val2_6_fu_255_p3.read());
}

void product::thread_brmerge114_demorgan_fu_184_p2() {
    brmerge114_demorgan_fu_184_p2 = (p_Result_8_fu_115_p3.read() & deleted_ones_fu_170_p3.read());
}

void product::thread_brmerge5_fu_232_p2() {
    brmerge5_fu_232_p2 = (underflow_fu_227_p2.read() | overflow_fu_211_p2.read());
}

void product::thread_brmerge_fu_201_p2() {
    brmerge_fu_201_p2 = (p_Result_8_reg_319.read() | p_not_fu_195_p2.read());
}

void product::thread_carry_2_fu_109_p2() {
    carry_2_fu_109_p2 = (p_Result_7_fu_79_p3.read() & rev_fu_103_p2.read());
}

void product::thread_deleted_ones_fu_170_p3() {
    deleted_ones_fu_170_p3 = (!carry_2_fu_109_p2.read()[0].is_01())? sc_lv<1>(): ((carry_2_fu_109_p2.read()[0].to_bool())? p_s_fu_164_p2.read(): Range1_all_ones_fu_139_p2.read());
}

void product::thread_deleted_zeros_fu_190_p3() {
    deleted_zeros_fu_190_p3 = (!carry_2_reg_314.read()[0].is_01())? sc_lv<1>(): ((carry_2_reg_314.read()[0].to_bool())? Range1_all_ones_reg_324.read(): Range1_all_zeros_reg_329.read());
}

void product::thread_overflow_fu_211_p2() {
    overflow_fu_211_p2 = (brmerge_fu_201_p2.read() & tmp_8_fu_206_p2.read());
}

void product::thread_p_Result_7_fu_79_p3() {
    p_Result_7_fu_79_p3 = r_V_2_reg_288.read().range(25, 25);
}

void product::thread_p_Result_8_fu_115_p3() {
    p_Result_8_fu_115_p3 = p_Val2_4_fu_89_p2.read().range(13, 13);
}

void product::thread_p_Result_s_31_fu_130_p4() {
    p_Result_s_31_fu_130_p4 = r_V_2_reg_288.read().range(27, 26);
}

void product::thread_p_Val2_3_fu_70_p4() {
    p_Val2_3_fu_70_p4 = r_V_2_reg_288.read().range(25, 12);
}

void product::thread_p_Val2_4_fu_89_p2() {
    p_Val2_4_fu_89_p2 = (!tmp_23_cast_fu_86_p1.read().is_01() || !p_Val2_3_fu_70_p4.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_23_cast_fu_86_p1.read()) + sc_biguint<14>(p_Val2_3_fu_70_p4.read()));
}

void product::thread_p_Val2_6_fu_255_p3() {
    p_Val2_6_fu_255_p3 = (!underflow_fu_227_p2.read()[0].is_01())? sc_lv<14>(): ((underflow_fu_227_p2.read()[0].to_bool())? ap_const_lv14_2000: p_Val2_4_reg_308.read());
}

void product::thread_p_Val2_6_mux_fu_248_p3() {
    p_Val2_6_mux_fu_248_p3 = (!brmerge5_fu_232_p2.read()[0].is_01())? sc_lv<14>(): ((brmerge5_fu_232_p2.read()[0].to_bool())? ap_const_lv14_1FFF: p_Val2_4_reg_308.read());
}

void product::thread_p_not_fu_195_p2() {
    p_not_fu_195_p2 = (deleted_zeros_fu_190_p3.read() ^ ap_const_lv1_1);
}

void product::thread_p_s_fu_164_p2() {
    p_s_fu_164_p2 = (Range2_all_ones_fu_123_p3.read() & rev2_fu_158_p2.read());
}

void product::thread_phitmp_demorgan_fu_178_p2() {
    phitmp_demorgan_fu_178_p2 = (carry_2_fu_109_p2.read() & Range1_all_ones_fu_139_p2.read());
}

void product::thread_rev2_fu_158_p2() {
    rev2_fu_158_p2 = (tmp_29_fu_151_p3.read() ^ ap_const_lv1_1);
}

void product::thread_rev_fu_103_p2() {
    rev_fu_103_p2 = (tmp_26_fu_95_p3.read() ^ ap_const_lv1_1);
}

void product::thread_tmp1_demorgan_fu_217_p2() {
    tmp1_demorgan_fu_217_p2 = (phitmp_demorgan_reg_334.read() | brmerge114_demorgan_reg_340.read());
}

void product::thread_tmp1_fu_221_p2() {
    tmp1_fu_221_p2 = (tmp1_demorgan_fu_217_p2.read() ^ ap_const_lv1_1);
}

void product::thread_tmp2_fu_238_p2() {
    tmp2_fu_238_p2 = (brmerge114_demorgan_reg_340.read() | tmp_8_fu_206_p2.read());
}

void product::thread_tmp_23_cast_fu_86_p1() {
    tmp_23_cast_fu_86_p1 = esl_zext<14,1>(tmp_25_reg_303.read());
}

void product::thread_tmp_26_fu_95_p3() {
    tmp_26_fu_95_p3 = p_Val2_4_fu_89_p2.read().range(13, 13);
}

void product::thread_tmp_29_fu_151_p3() {
    tmp_29_fu_151_p3 = r_V_2_reg_288.read().range(26, 26);
}

void product::thread_tmp_8_fu_206_p2() {
    tmp_8_fu_206_p2 = (p_Result_s_reg_297.read() ^ ap_const_lv1_1);
}

void product::thread_underflow_fu_227_p2() {
    underflow_fu_227_p2 = (p_Result_s_reg_297.read() & tmp1_fu_221_p2.read());
}

void product::thread_underflow_not_fu_243_p2() {
    underflow_not_fu_243_p2 = (tmp2_fu_238_p2.read() | phitmp_demorgan_reg_334.read());
}

void product::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

