-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity product is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (13 downto 0);
    w_V : IN STD_LOGIC_VECTOR (13 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of product is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv14_1FFF : STD_LOGIC_VECTOR (13 downto 0) := "01111111111111";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_2_reg_288 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Result_s_reg_297 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_303 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_fu_89_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_4_reg_308 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal carry_2_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_2_reg_314 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_115_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_reg_319 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_reg_329 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_demorgan_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_demorgan_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge114_demorgan_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge114_demorgan_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_cast_fu_86_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_3_fu_70_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_26_fu_95_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_79_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_31_fu_130_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_29_fu_151_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_123_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_170_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal deleted_zeros_fu_190_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_demorgan_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge5_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_mux_fu_248_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_6_fu_255_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component myproject_mul_mul_14s_14s_28_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    myproject_mul_mul_14s_14s_28_3_1_U7 : component myproject_mul_mul_14s_14s_28_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_V,
        din1 => w_V,
        ce => ap_const_logic_1,
        dout => grp_fu_270_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                Range1_all_ones_reg_324 <= Range1_all_ones_fu_139_p2;
                Range1_all_zeros_reg_329 <= Range1_all_zeros_fu_145_p2;
                brmerge114_demorgan_reg_340 <= brmerge114_demorgan_fu_184_p2;
                carry_2_reg_314 <= carry_2_fu_109_p2;
                p_Result_8_reg_319 <= p_Val2_4_fu_89_p2(13 downto 13);
                p_Val2_4_reg_308 <= p_Val2_4_fu_89_p2;
                phitmp_demorgan_reg_334 <= phitmp_demorgan_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Result_s_reg_297 <= grp_fu_270_p2(27 downto 27);
                r_V_2_reg_288 <= grp_fu_270_p2;
                tmp_25_reg_303 <= grp_fu_270_p2(11 downto 11);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    Range1_all_ones_fu_139_p2 <= "1" when (p_Result_s_31_fu_130_p4 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_145_p2 <= "1" when (p_Result_s_31_fu_130_p4 = ap_const_lv2_0) else "0";
    Range2_all_ones_fu_123_p3 <= r_V_2_reg_288(27 downto 27);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        p_Val2_6_mux_fu_248_p3 when (underflow_not_fu_243_p2(0) = '1') else 
        p_Val2_6_fu_255_p3;
    brmerge114_demorgan_fu_184_p2 <= (p_Result_8_fu_115_p3 and deleted_ones_fu_170_p3);
    brmerge5_fu_232_p2 <= (underflow_fu_227_p2 or overflow_fu_211_p2);
    brmerge_fu_201_p2 <= (p_not_fu_195_p2 or p_Result_8_reg_319);
    carry_2_fu_109_p2 <= (rev_fu_103_p2 and p_Result_7_fu_79_p3);
    deleted_ones_fu_170_p3 <= 
        p_s_fu_164_p2 when (carry_2_fu_109_p2(0) = '1') else 
        Range1_all_ones_fu_139_p2;
    deleted_zeros_fu_190_p3 <= 
        Range1_all_ones_reg_324 when (carry_2_reg_314(0) = '1') else 
        Range1_all_zeros_reg_329;
    overflow_fu_211_p2 <= (tmp_8_fu_206_p2 and brmerge_fu_201_p2);
    p_Result_7_fu_79_p3 <= r_V_2_reg_288(25 downto 25);
    p_Result_8_fu_115_p3 <= p_Val2_4_fu_89_p2(13 downto 13);
    p_Result_s_31_fu_130_p4 <= r_V_2_reg_288(27 downto 26);
    p_Val2_3_fu_70_p4 <= r_V_2_reg_288(25 downto 12);
    p_Val2_4_fu_89_p2 <= std_logic_vector(unsigned(tmp_23_cast_fu_86_p1) + unsigned(p_Val2_3_fu_70_p4));
    p_Val2_6_fu_255_p3 <= 
        ap_const_lv14_2000 when (underflow_fu_227_p2(0) = '1') else 
        p_Val2_4_reg_308;
    p_Val2_6_mux_fu_248_p3 <= 
        ap_const_lv14_1FFF when (brmerge5_fu_232_p2(0) = '1') else 
        p_Val2_4_reg_308;
    p_not_fu_195_p2 <= (deleted_zeros_fu_190_p3 xor ap_const_lv1_1);
    p_s_fu_164_p2 <= (rev2_fu_158_p2 and Range2_all_ones_fu_123_p3);
    phitmp_demorgan_fu_178_p2 <= (carry_2_fu_109_p2 and Range1_all_ones_fu_139_p2);
    rev2_fu_158_p2 <= (tmp_29_fu_151_p3 xor ap_const_lv1_1);
    rev_fu_103_p2 <= (tmp_26_fu_95_p3 xor ap_const_lv1_1);
    tmp1_demorgan_fu_217_p2 <= (phitmp_demorgan_reg_334 or brmerge114_demorgan_reg_340);
    tmp1_fu_221_p2 <= (tmp1_demorgan_fu_217_p2 xor ap_const_lv1_1);
    tmp2_fu_238_p2 <= (tmp_8_fu_206_p2 or brmerge114_demorgan_reg_340);
    tmp_23_cast_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_reg_303),14));
    tmp_26_fu_95_p3 <= p_Val2_4_fu_89_p2(13 downto 13);
    tmp_29_fu_151_p3 <= r_V_2_reg_288(26 downto 26);
    tmp_8_fu_206_p2 <= (p_Result_s_reg_297 xor ap_const_lv1_1);
    underflow_fu_227_p2 <= (tmp1_fu_221_p2 and p_Result_s_reg_297);
    underflow_not_fu_243_p2 <= (tmp2_fu_238_p2 or phitmp_demorgan_reg_334);
end behav;
