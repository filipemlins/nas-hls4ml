-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_large_rf_gt_ni_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    res_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_V_ce0 : OUT STD_LOGIC;
    res_V_we0 : OUT STD_LOGIC;
    res_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of dense_large_rf_gt_ni_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_1FFF : STD_LOGIC_VECTOR (13 downto 0) := "01111111111111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_1A4 : STD_LOGIC_VECTOR (8 downto 0) := "110100100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_1A4 : STD_LOGIC_VECTOR (10 downto 0) := "00110100100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv11_347 : STD_LOGIC_VECTOR (10 downto 0) := "01101000111";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv24_9C1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100111000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal outidx_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal outidx_ce0 : STD_LOGIC;
    signal outidx_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal w17_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal w17_V_ce0 : STD_LOGIC;
    signal w17_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal acc_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal reg_265 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_product_fu_259_ap_ready : STD_LOGIC;
    signal grp_product_fu_259_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal iacc_3_fu_276_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal w_index_cast_fu_287_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal w_index_cast_reg_543 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ir_fu_297_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ir_reg_551 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_index_reg_561 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_index_cast_fu_313_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal extLd_fu_316_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal extLd_reg_576 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_59_fu_320_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_reg_581 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal im_3_fu_328_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal im_3_reg_585 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_334_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_reg_595 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_528_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_reg_600 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_60_reg_610 : STD_LOGIC_VECTOR (0 downto 0);
    signal w17_V_load_reg_615 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_67_fu_383_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_67_reg_620 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_73_fu_401_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_73_reg_625 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal acc_V_addr_6_reg_630 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_product_fu_259_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_17_reg_635 : STD_LOGIC_VECTOR (13 downto 0);
    signal overflow_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_reg_641 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal underflow_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge8_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge8_reg_649 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index_3_fu_475_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal out_index_3_fu_487_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_70_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_index_3_fu_493_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_index_3_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_504_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ires_3_fu_517_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ires_3_reg_680 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_63_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_reg_685 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_V_ce0 : STD_LOGIC;
    signal acc_V_we0 : STD_LOGIC;
    signal acc_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_product_fu_259_ap_start : STD_LOGIC;
    signal grp_product_fu_259_ap_idle : STD_LOGIC;
    signal iacc_reg_183 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond6_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index_reg_194 : STD_LOGIC_VECTOR (8 downto 0);
    signal in_index_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal im_reg_217 : STD_LOGIC_VECTOR (1 downto 0);
    signal out_index5_reg_228 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_index5_reg_238 : STD_LOGIC_VECTOR (10 downto 0);
    signal ires_reg_248 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_product_fu_259_ap_start_reg : STD_LOGIC := '0';
    signal tmp_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_19_fu_431_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_334_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_355_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl8_fu_364_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_65_fu_372_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_66_fu_379_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal w17_V_load_cast_fu_389_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_68_fu_392_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_72_fu_395_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal lhs_V_fu_410_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal rhs_V_fu_414_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_fu_417_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_s_fu_423_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_437_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_528_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_528_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_334_ap_start : STD_LOGIC;
    signal grp_fu_334_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_528_p00 : STD_LOGIC_VECTOR (23 downto 0);

    component product IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (13 downto 0);
        w_V : IN STD_LOGIC_VECTOR (13 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component myproject_urem_11ns_10ns_11_15_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component myproject_mul_mul_11ns_13ns_24_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component dense_large_rf_gt_ni_2_outidx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component dense_large_rf_gt_ni_2_w17_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component dense_large_rf_gt_ni_2_acc_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    outidx_U : component dense_large_rf_gt_ni_2_outidx
    generic map (
        DataWidth => 3,
        AddressRange => 420,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => outidx_address0,
        ce0 => outidx_ce0,
        q0 => outidx_q0);

    w17_V_U : component dense_large_rf_gt_ni_2_w17_V
    generic map (
        DataWidth => 25,
        AddressRange => 420,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w17_V_address0,
        ce0 => w17_V_ce0,
        q0 => w17_V_q0);

    acc_V_U : component dense_large_rf_gt_ni_2_acc_V
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_V_address0,
        ce0 => acc_V_ce0,
        we0 => acc_V_we0,
        d0 => acc_V_d0,
        q0 => acc_V_q0);

    grp_product_fu_259 : component product
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_product_fu_259_ap_start,
        ap_done => grp_product_fu_259_ap_done,
        ap_idle => grp_product_fu_259_ap_idle,
        ap_ready => grp_product_fu_259_ap_ready,
        a_V => extLd_reg_576,
        w_V => tmp_73_reg_625,
        ap_return => grp_product_fu_259_ap_return);

    myproject_urem_11ns_10ns_11_15_seq_1_U68 : component myproject_urem_11ns_10ns_11_15_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_334_ap_start,
        done => grp_fu_334_ap_done,
        din0 => w_index5_reg_238,
        din1 => grp_fu_334_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_334_p2);

    myproject_mul_mul_11ns_13ns_24_3_1_U69 : component myproject_mul_mul_11ns_13ns_24_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 11,
        din1_WIDTH => 13,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_528_p0,
        din1 => grp_fu_528_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_528_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_product_fu_259_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_product_fu_259_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    grp_product_fu_259_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_product_fu_259_ap_ready = ap_const_logic_1)) then 
                    grp_product_fu_259_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    iacc_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iacc_reg_183 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond6_fu_270_p2 = ap_const_lv1_0))) then 
                iacc_reg_183 <= iacc_3_fu_276_p2;
            end if; 
        end if;
    end process;

    im_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_70_fu_481_p2 = ap_const_lv1_0) and (tmp_59_reg_581 = ap_const_lv1_0))) then 
                im_reg_217 <= im_3_reg_585;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                im_reg_217 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    in_index_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                in_index_reg_205 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                in_index_reg_205 <= p_s_fu_504_p3;
            end if; 
        end if;
    end process;

    ires_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_291_p2 = ap_const_lv1_1))) then 
                ires_reg_248 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                ires_reg_248 <= ires_3_reg_680;
            end if; 
        end if;
    end process;

    out_index5_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_70_fu_481_p2 = ap_const_lv1_0) and (tmp_59_reg_581 = ap_const_lv1_0))) then 
                out_index5_reg_228 <= out_index_3_fu_487_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_index5_reg_228 <= out_index_cast_fu_313_p1;
            end if; 
        end if;
    end process;

    w_index5_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_70_fu_481_p2 = ap_const_lv1_0) and (tmp_59_reg_581 = ap_const_lv1_0))) then 
                w_index5_reg_238 <= w_index_3_fu_475_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_index5_reg_238 <= w_index_cast_reg_543;
            end if; 
        end if;
    end process;

    w_index_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_index_reg_194 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                w_index_reg_194 <= ir_reg_551;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                acc_V_addr_6_reg_630 <= tmp_64_fu_405_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                brmerge8_reg_649 <= brmerge8_fu_469_p2;
                overflow_reg_641 <= overflow_fu_451_p2;
                underflow_reg_645 <= underflow_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    extLd_reg_576(12 downto 0) <= extLd_fu_316_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                im_3_reg_585 <= im_3_fu_328_p2;
                tmp_59_reg_581 <= im_reg_217(1 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and ((tmp_70_fu_481_p2 = ap_const_lv1_1) or (tmp_59_reg_581 = ap_const_lv1_1)))) then
                in_index_3_reg_666 <= in_index_3_fu_493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ir_reg_551 <= ir_fu_297_p2;
                    w_index_cast_reg_543(8 downto 0) <= w_index_cast_fu_287_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                ires_3_reg_680 <= ires_3_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                mul_reg_600 <= grp_fu_528_p2;
                tmp_60_reg_610 <= grp_fu_528_p2(20 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_index_reg_561 <= outidx_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_product_fu_259_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                p_Val2_17_reg_635 <= grp_product_fu_259_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((grp_product_fu_259_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then
                reg_265 <= acc_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_21_reg_595 <= grp_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (tmp_62_fu_511_p2 = ap_const_lv1_0))) then
                    tmp_63_reg_685(3 downto 0) <= tmp_63_fu_523_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                    tmp_67_reg_620(4 downto 1) <= tmp_67_fu_383_p2(4 downto 1);
                w17_V_load_reg_615 <= w17_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_73_reg_625 <= tmp_73_fu_401_p1;
            end if;
        end if;
    end process;
    w_index_cast_reg_543(10 downto 9) <= "00";
    extLd_reg_576(13) <= '0';
    tmp_67_reg_620(0) <= '0';
    tmp_63_reg_685(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state25, grp_product_fu_259_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_291_p2, tmp_59_fu_320_p3, tmp_59_reg_581, ap_CS_fsm_state6, ap_CS_fsm_state27, tmp_70_fu_481_p2, ap_CS_fsm_state29, tmp_62_fu_511_p2, exitcond6_fu_270_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond6_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_291_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_59_fu_320_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_product_fu_259_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_70_fu_481_p2 = ap_const_lv1_0) and (tmp_59_reg_581 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state29 => 
                if (((tmp_62_fu_511_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    acc_V_address0_assign_proc : process(ap_CS_fsm_state2, tmp_59_reg_581, acc_V_addr_6_reg_630, ap_CS_fsm_state24, overflow_reg_641, ap_CS_fsm_state26, underflow_reg_645, brmerge8_reg_649, ap_CS_fsm_state27, ap_CS_fsm_state29, tmp_63_fu_523_p1, tmp_fu_282_p1, tmp_64_fu_405_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            acc_V_address0 <= tmp_63_fu_523_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or ((brmerge8_reg_649 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27) and (overflow_reg_641 = ap_const_lv1_1) and (tmp_59_reg_581 = ap_const_lv1_0)) or ((brmerge8_reg_649 = ap_const_lv1_1) and (underflow_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27) and (overflow_reg_641 = ap_const_lv1_0) and (tmp_59_reg_581 = ap_const_lv1_0)))) then 
            acc_V_address0 <= acc_V_addr_6_reg_630;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            acc_V_address0 <= tmp_64_fu_405_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            acc_V_address0 <= tmp_fu_282_p1(4 - 1 downto 0);
        else 
            acc_V_address0 <= "XXXX";
        end if; 
    end process;


    acc_V_ce0_assign_proc : process(ap_CS_fsm_state2, tmp_59_reg_581, ap_CS_fsm_state24, overflow_reg_641, ap_CS_fsm_state26, underflow_reg_645, brmerge8_reg_649, ap_CS_fsm_state27, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((brmerge8_reg_649 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27) and (overflow_reg_641 = ap_const_lv1_1) and (tmp_59_reg_581 = ap_const_lv1_0)) or ((brmerge8_reg_649 = ap_const_lv1_1) and (underflow_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27) and (overflow_reg_641 = ap_const_lv1_0) and (tmp_59_reg_581 = ap_const_lv1_0)))) then 
            acc_V_ce0 <= ap_const_logic_1;
        else 
            acc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_V_d0_assign_proc : process(ap_CS_fsm_state2, tmp_59_reg_581, overflow_reg_641, ap_CS_fsm_state26, underflow_reg_645, brmerge8_reg_649, ap_CS_fsm_state27, p_Val2_19_fu_431_p2)
    begin
        if (((brmerge8_reg_649 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27) and (overflow_reg_641 = ap_const_lv1_1) and (tmp_59_reg_581 = ap_const_lv1_0))) then 
            acc_V_d0 <= ap_const_lv14_1FFF;
        elsif (((brmerge8_reg_649 = ap_const_lv1_1) and (underflow_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27) and (overflow_reg_641 = ap_const_lv1_0) and (tmp_59_reg_581 = ap_const_lv1_0))) then 
            acc_V_d0 <= ap_const_lv14_2000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            acc_V_d0 <= p_Val2_19_fu_431_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            acc_V_d0 <= ap_const_lv14_0;
        else 
            acc_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    acc_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_59_reg_581, overflow_reg_641, ap_CS_fsm_state26, underflow_reg_645, brmerge8_reg_649, ap_CS_fsm_state27, exitcond6_fu_270_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((brmerge8_reg_649 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27) and (overflow_reg_641 = ap_const_lv1_1) and (tmp_59_reg_581 = ap_const_lv1_0)) or ((brmerge8_reg_649 = ap_const_lv1_1) and (underflow_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27) and (overflow_reg_641 = ap_const_lv1_0) and (tmp_59_reg_581 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond6_fu_270_p2 = ap_const_lv1_0)))) then 
            acc_V_we0 <= ap_const_logic_1;
        else 
            acc_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state29, tmp_62_fu_511_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_62_fu_511_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29, tmp_62_fu_511_p2)
    begin
        if (((tmp_62_fu_511_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge8_fu_469_p2 <= (p_Result_s_fu_423_p3 xor p_Result_11_fu_437_p3);
    data_V_address0 <= tmp_61_fu_308_p1(7 - 1 downto 0);

    data_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond6_fu_270_p2 <= "1" when (iacc_reg_183 = ap_const_lv4_A) else "0";
    exitcond_fu_291_p2 <= "1" when (w_index_reg_194 = ap_const_lv9_1A4) else "0";
    extLd_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_V_q0),14));

    grp_fu_334_ap_start_assign_proc : process(tmp_59_fu_320_p3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_59_fu_320_p3 = ap_const_lv1_0))) then 
            grp_fu_334_ap_start <= ap_const_logic_1;
        else 
            grp_fu_334_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_334_p1 <= ap_const_lv11_1A4(10 - 1 downto 0);
    grp_fu_528_p0 <= grp_fu_528_p00(11 - 1 downto 0);
    grp_fu_528_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_index5_reg_238),24));
    grp_fu_528_p1 <= ap_const_lv24_9C1(13 - 1 downto 0);
    grp_product_fu_259_ap_start <= grp_product_fu_259_ap_start_reg;
    iacc_3_fu_276_p2 <= std_logic_vector(unsigned(iacc_reg_183) + unsigned(ap_const_lv4_1));
    im_3_fu_328_p2 <= std_logic_vector(unsigned(im_reg_217) + unsigned(ap_const_lv2_1));
    in_index_3_fu_493_p2 <= std_logic_vector(signed(in_index_reg_205) + signed(ap_const_lv32_1));
    ir_fu_297_p2 <= std_logic_vector(unsigned(w_index_reg_194) + unsigned(ap_const_lv9_1));
    ires_3_fu_517_p2 <= std_logic_vector(unsigned(ires_reg_248) + unsigned(ap_const_lv4_1));
        lhs_V_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_265),15));

    out_index_3_fu_487_p2 <= std_logic_vector(unsigned(out_index5_reg_228) + unsigned(ap_const_lv4_5));
    out_index_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_index_reg_561),4));
    outidx_address0 <= tmp_s_fu_303_p1(9 - 1 downto 0);

    outidx_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outidx_ce0 <= ap_const_logic_1;
        else 
            outidx_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_451_p2 <= (tmp_20_fu_445_p2 and p_Result_11_fu_437_p3);
    p_Result_11_fu_437_p3 <= p_Val2_19_fu_431_p2(13 downto 13);
    p_Result_s_fu_423_p3 <= ret_V_fu_417_p2(14 downto 14);
    p_Val2_19_fu_431_p2 <= std_logic_vector(signed(reg_265) + signed(p_Val2_17_reg_635));
    p_s_fu_504_p3 <= 
        ap_const_lv32_0 when (tmp_71_fu_499_p2(0) = '1') else 
        in_index_3_reg_666;
    p_shl8_fu_364_p3 <= (tmp_8_fu_355_p4 & ap_const_lv1_0);
    res_V_address0 <= tmp_63_reg_685(4 - 1 downto 0);

    res_V_ce0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            res_V_ce0 <= ap_const_logic_1;
        else 
            res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_d0 <= reg_265;

    res_V_we0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            res_V_we0 <= ap_const_logic_1;
        else 
            res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_417_p2 <= std_logic_vector(signed(lhs_V_fu_410_p1) + signed(rhs_V_fu_414_p1));
        rhs_V_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_17_reg_635),15));

    tmp_20_fu_445_p2 <= (p_Result_s_fu_423_p3 xor ap_const_lv1_1);
    tmp_23_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_595),64));
    tmp_59_fu_320_p3 <= im_reg_217(1 downto 1);
        tmp_61_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_index_reg_205),64));

    tmp_62_fu_511_p2 <= "1" when (ires_reg_248 = ap_const_lv4_A) else "0";
    tmp_63_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ires_reg_248),64));
    tmp_64_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_index5_reg_228),64));
    tmp_65_fu_372_p3 <= (tmp_60_reg_610 & ap_const_lv4_0);
    tmp_66_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_364_p3),5));
    tmp_67_fu_383_p2 <= std_logic_vector(unsigned(tmp_65_fu_372_p3) - unsigned(tmp_66_fu_379_p1));
    tmp_68_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_reg_620),28));
    tmp_69_fu_457_p2 <= (p_Result_11_fu_437_p3 xor ap_const_lv1_1);
    tmp_70_fu_481_p2 <= "1" when (unsigned(w_index_3_fu_475_p2) > unsigned(ap_const_lv11_347)) else "0";
    tmp_71_fu_499_p2 <= "1" when (signed(in_index_3_reg_666) > signed(ap_const_lv32_53)) else "0";
    tmp_72_fu_395_p2 <= std_logic_vector(shift_right(unsigned(w17_V_load_cast_fu_389_p1),to_integer(unsigned('0' & tmp_68_fu_392_p1(28-1 downto 0)))));
    tmp_73_fu_401_p1 <= tmp_72_fu_395_p2(14 - 1 downto 0);
    tmp_8_fu_355_p4 <= mul_reg_600(21 downto 20);
    tmp_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iacc_reg_183),64));
    tmp_s_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_index_reg_194),64));
    underflow_fu_463_p2 <= (tmp_69_fu_457_p2 and p_Result_s_fu_423_p3);
    w17_V_address0 <= tmp_23_fu_344_p1(9 - 1 downto 0);

    w17_V_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            w17_V_ce0 <= ap_const_logic_1;
        else 
            w17_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        w17_V_load_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w17_V_load_reg_615),28));

    w_index_3_fu_475_p2 <= std_logic_vector(unsigned(w_index5_reg_238) + unsigned(ap_const_lv11_1A4));
    w_index_cast_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_index_reg_194),11));
end behav;
