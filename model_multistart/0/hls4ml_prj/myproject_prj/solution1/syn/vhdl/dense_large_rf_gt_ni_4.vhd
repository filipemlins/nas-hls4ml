-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_large_rf_gt_ni_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    res_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    res_V_ce0 : OUT STD_LOGIC;
    res_V_we0 : OUT STD_LOGIC;
    res_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of dense_large_rf_gt_ni_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_1FFF : STD_LOGIC_VECTOR (13 downto 0) := "01111111111111";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv14_3600 : STD_LOGIC_VECTOR (13 downto 0) := "11011000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv17_3600 : STD_LOGIC_VECTOR (16 downto 0) := "00011011000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv17_10DFF : STD_LOGIC_VECTOR (16 downto 0) := "10000110111111111";
    constant ap_const_lv8_18 : STD_LOGIC_VECTOR (7 downto 0) := "00011000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv36_25ED1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100101111011010001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal outidx5_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal outidx5_ce0 : STD_LOGIC;
    signal outidx5_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal w11_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal w11_V_ce0 : STD_LOGIC;
    signal w11_V_q0 : STD_LOGIC_VECTOR (65 downto 0);
    signal acc_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal reg_265 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_product_fu_259_ap_ready : STD_LOGIC;
    signal grp_product_fu_259_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal iacc_1_fu_276_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal w_index_cast_fu_287_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal w_index_cast_reg_522 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ir_fu_297_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ir_reg_530 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_index_reg_540 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_index_cast_fu_313_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal data_V_load_reg_555 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_48_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal im_1_fu_322_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal im_1_reg_564 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_39_reg_574 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_508_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_reg_579 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal w11_V_load_reg_589 : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_43_fu_371_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_reg_594 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_40_fu_389_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_40_reg_609 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal acc_V_addr_2_reg_614 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_product_fu_259_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_11_reg_619 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_reg_625 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal p_Val2_13_fu_419_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_13_reg_632 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_9_reg_637 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_reg_644 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal underflow_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index_1_fu_456_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal w_index_1_reg_656 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal out_index_1_fu_467_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_52_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_index_1_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_index_1_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ires_1_fu_497_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ires_1_reg_684 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_49_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_reg_689 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal acc_V_ce0 : STD_LOGIC;
    signal acc_V_we0 : STD_LOGIC;
    signal acc_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_product_fu_259_ap_start : STD_LOGIC;
    signal grp_product_fu_259_ap_idle : STD_LOGIC;
    signal iacc_reg_183 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond8_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index_reg_194 : STD_LOGIC_VECTOR (13 downto 0);
    signal in_index_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal im_reg_217 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_index9_reg_228 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_index9_reg_238 : STD_LOGIC_VECTOR (16 downto 0);
    signal ires_reg_248 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_product_fu_259_ap_start_reg : STD_LOGIC := '0';
    signal tmp_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_328_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_342_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl8_fu_359_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_351_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl8_cast_fu_367_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_383_p0 : STD_LOGIC_VECTOR (69 downto 0);
    signal grp_fu_383_p1 : STD_LOGIC_VECTOR (69 downto 0);
    signal grp_fu_383_p2 : STD_LOGIC_VECTOR (69 downto 0);
    signal rhs_V_fu_402_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal lhs_V_fu_398_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_fu_405_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_22_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_508_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_508_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_328_ap_start : STD_LOGIC;
    signal grp_fu_328_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_508_p10 : STD_LOGIC_VECTOR (35 downto 0);

    component product IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (13 downto 0);
        w_V : IN STD_LOGIC_VECTOR (13 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component myproject_urem_17ns_15ns_17_21_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component myproject_lshr_70s_7ns_70_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (69 downto 0);
        din1 : IN STD_LOGIC_VECTOR (69 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (69 downto 0) );
    end component;


    component myproject_mul_mul_19ns_17ns_36_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component dense_large_rf_gt_ni_4_outidx5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component dense_large_rf_gt_ni_4_w11_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (65 downto 0) );
    end component;


    component dense_large_rf_gt_ni_4_acc_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    outidx5_U : component dense_large_rf_gt_ni_4_outidx5
    generic map (
        DataWidth => 5,
        AddressRange => 13824,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => outidx5_address0,
        ce0 => outidx5_ce0,
        q0 => outidx5_q0);

    w11_V_U : component dense_large_rf_gt_ni_4_w11_V
    generic map (
        DataWidth => 66,
        AddressRange => 13824,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w11_V_address0,
        ce0 => w11_V_ce0,
        q0 => w11_V_q0);

    acc_V_U : component dense_large_rf_gt_ni_4_acc_V
    generic map (
        DataWidth => 14,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_V_address0,
        ce0 => acc_V_ce0,
        we0 => acc_V_we0,
        d0 => acc_V_d0,
        q0 => acc_V_q0);

    grp_product_fu_259 : component product
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_product_fu_259_ap_start,
        ap_done => grp_product_fu_259_ap_done,
        ap_idle => grp_product_fu_259_ap_idle,
        ap_ready => grp_product_fu_259_ap_ready,
        a_V => data_V_load_reg_555,
        w_V => tmp_40_reg_609,
        ap_return => grp_product_fu_259_ap_return);

    myproject_urem_17ns_15ns_17_21_seq_1_U40 : component myproject_urem_17ns_15ns_17_21_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_328_ap_start,
        done => grp_fu_328_ap_done,
        din0 => w_index9_reg_238,
        din1 => grp_fu_328_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_328_p2);

    myproject_lshr_70s_7ns_70_2_1_U41 : component myproject_lshr_70s_7ns_70_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 70,
        din1_WIDTH => 7,
        dout_WIDTH => 70)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_383_p0,
        din1 => grp_fu_383_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_383_p2);

    myproject_mul_mul_19ns_17ns_36_3_1_U42 : component myproject_mul_mul_19ns_17ns_36_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 19,
        din1_WIDTH => 17,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_508_p0,
        din1 => grp_fu_508_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_508_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_product_fu_259_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_product_fu_259_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    grp_product_fu_259_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_product_fu_259_ap_ready = ap_const_logic_1)) then 
                    grp_product_fu_259_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    iacc_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iacc_reg_183 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_270_p2 = ap_const_lv1_0))) then 
                iacc_reg_183 <= iacc_1_fu_276_p2;
            end if; 
        end if;
    end process;

    im_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_48_reg_560 = ap_const_lv1_1) and (tmp_52_fu_462_p2 = ap_const_lv1_0))) then 
                im_reg_217 <= im_1_reg_564;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                im_reg_217 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    in_index_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                in_index_reg_205 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                in_index_reg_205 <= p_s_fu_484_p3;
            end if; 
        end if;
    end process;

    ires_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_291_p2 = ap_const_lv1_1))) then 
                ires_reg_248 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                ires_reg_248 <= ires_1_reg_684;
            end if; 
        end if;
    end process;

    out_index9_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_48_reg_560 = ap_const_lv1_1) and (tmp_52_fu_462_p2 = ap_const_lv1_0))) then 
                out_index9_reg_228 <= out_index_1_fu_467_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_index9_reg_228 <= out_index_cast_fu_313_p1;
            end if; 
        end if;
    end process;

    w_index9_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_48_reg_560 = ap_const_lv1_1) and (tmp_52_fu_462_p2 = ap_const_lv1_0))) then 
                w_index9_reg_238 <= w_index_1_reg_656;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_index9_reg_238 <= w_index_cast_reg_522;
            end if; 
        end if;
    end process;

    w_index_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_index_reg_194 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                w_index_reg_194 <= ir_reg_530;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                acc_V_addr_2_reg_614 <= tmp_50_fu_393_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                brmerge1_reg_652 <= brmerge1_fu_452_p2;
                overflow_reg_644 <= overflow_fu_437_p2;
                underflow_reg_648 <= underflow_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                data_V_load_reg_555 <= data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                im_1_reg_564 <= im_1_fu_322_p2;
                tmp_48_reg_560 <= tmp_48_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and ((tmp_52_fu_462_p2 = ap_const_lv1_1) or (tmp_48_reg_560 = ap_const_lv1_0)))) then
                in_index_1_reg_670 <= in_index_1_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ir_reg_530 <= ir_fu_297_p2;
                    w_index_cast_reg_522(13 downto 0) <= w_index_cast_fu_287_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                ires_1_reg_684 <= ires_1_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                mul_reg_579 <= grp_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_index_reg_540 <= outidx5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                p_Result_9_reg_637 <= p_Val2_13_fu_419_p2(13 downto 13);
                p_Result_s_reg_625 <= ret_V_fu_405_p2(14 downto 14);
                p_Val2_13_reg_632 <= p_Val2_13_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_product_fu_259_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                p_Val2_11_reg_619 <= grp_product_fu_259_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) or ((grp_product_fu_259_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then
                reg_265 <= acc_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_39_reg_574 <= grp_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp_40_reg_609 <= tmp_40_fu_389_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                    tmp_43_reg_594(6 downto 1) <= tmp_43_fu_371_p2(6 downto 1);
                w11_V_load_reg_589 <= w11_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (tmp_47_fu_491_p2 = ap_const_lv1_0))) then
                    tmp_49_reg_689(6 downto 0) <= tmp_49_fu_503_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                w_index_1_reg_656 <= w_index_1_fu_456_p2;
            end if;
        end if;
    end process;
    w_index_cast_reg_522(16 downto 14) <= "000";
    tmp_43_reg_594(0) <= '0';
    tmp_49_reg_689(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state32, grp_product_fu_259_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_291_p2, tmp_48_fu_316_p2, tmp_48_reg_560, ap_CS_fsm_state6, ap_CS_fsm_state36, tmp_52_fu_462_p2, ap_CS_fsm_state38, tmp_47_fu_491_p2, exitcond8_fu_270_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond8_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_291_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_48_fu_316_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((grp_product_fu_259_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_48_reg_560 = ap_const_lv1_1) and (tmp_52_fu_462_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state38 => 
                if (((tmp_47_fu_491_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    acc_V_address0_assign_proc : process(ap_CS_fsm_state2, acc_V_addr_2_reg_614, ap_CS_fsm_state31, overflow_reg_644, ap_CS_fsm_state34, underflow_reg_648, brmerge1_reg_652, ap_CS_fsm_state35, ap_CS_fsm_state38, tmp_49_fu_503_p1, tmp_fu_282_p1, tmp_50_fu_393_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            acc_V_address0 <= tmp_49_fu_503_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or ((brmerge1_reg_652 = ap_const_lv1_1) and (overflow_reg_644 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((brmerge1_reg_652 = ap_const_lv1_1) and (underflow_reg_648 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35) and (overflow_reg_644 = ap_const_lv1_0)))) then 
            acc_V_address0 <= acc_V_addr_2_reg_614;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            acc_V_address0 <= tmp_50_fu_393_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            acc_V_address0 <= tmp_fu_282_p1(7 - 1 downto 0);
        else 
            acc_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    acc_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state31, overflow_reg_644, ap_CS_fsm_state34, underflow_reg_648, brmerge1_reg_652, ap_CS_fsm_state35, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((brmerge1_reg_652 = ap_const_lv1_1) and (overflow_reg_644 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((brmerge1_reg_652 = ap_const_lv1_1) and (underflow_reg_648 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35) and (overflow_reg_644 = ap_const_lv1_0)))) then 
            acc_V_ce0 <= ap_const_logic_1;
        else 
            acc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_V_d0_assign_proc : process(ap_CS_fsm_state2, p_Val2_13_reg_632, overflow_reg_644, ap_CS_fsm_state34, underflow_reg_648, brmerge1_reg_652, ap_CS_fsm_state35)
    begin
        if (((brmerge1_reg_652 = ap_const_lv1_1) and (overflow_reg_644 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            acc_V_d0 <= ap_const_lv14_1FFF;
        elsif (((brmerge1_reg_652 = ap_const_lv1_1) and (underflow_reg_648 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35) and (overflow_reg_644 = ap_const_lv1_0))) then 
            acc_V_d0 <= ap_const_lv14_2000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            acc_V_d0 <= p_Val2_13_reg_632;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            acc_V_d0 <= ap_const_lv14_0;
        else 
            acc_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    acc_V_we0_assign_proc : process(ap_CS_fsm_state2, overflow_reg_644, ap_CS_fsm_state34, underflow_reg_648, brmerge1_reg_652, ap_CS_fsm_state35, exitcond8_fu_270_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or ((brmerge1_reg_652 = ap_const_lv1_1) and (overflow_reg_644 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((brmerge1_reg_652 = ap_const_lv1_1) and (underflow_reg_648 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35) and (overflow_reg_644 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_270_p2 = ap_const_lv1_0)))) then 
            acc_V_we0 <= ap_const_logic_1;
        else 
            acc_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state38, tmp_47_fu_491_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_47_fu_491_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state38, tmp_47_fu_491_p2)
    begin
        if (((tmp_47_fu_491_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge1_fu_452_p2 <= (p_Result_s_reg_625 xor p_Result_9_reg_637);
    data_V_address0 <= tmp_46_fu_308_p1(10 - 1 downto 0);

    data_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond8_fu_270_p2 <= "1" when (iacc_reg_183 = ap_const_lv7_78) else "0";
    exitcond_fu_291_p2 <= "1" when (w_index_reg_194 = ap_const_lv14_3600) else "0";

    grp_fu_328_ap_start_assign_proc : process(tmp_48_fu_316_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_48_fu_316_p2 = ap_const_lv1_1))) then 
            grp_fu_328_ap_start <= ap_const_logic_1;
        else 
            grp_fu_328_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_328_p1 <= ap_const_lv17_3600(15 - 1 downto 0);
        grp_fu_383_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(w11_V_load_reg_589),70));

    grp_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_reg_594),70));
    grp_fu_508_p0 <= ap_const_lv36_25ED1(19 - 1 downto 0);
    grp_fu_508_p1 <= grp_fu_508_p10(17 - 1 downto 0);
    grp_fu_508_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_index9_reg_238),36));
    grp_product_fu_259_ap_start <= grp_product_fu_259_ap_start_reg;
    iacc_1_fu_276_p2 <= std_logic_vector(unsigned(iacc_reg_183) + unsigned(ap_const_lv7_1));
    im_1_fu_322_p2 <= std_logic_vector(unsigned(im_reg_217) + unsigned(ap_const_lv3_1));
    in_index_1_fu_473_p2 <= std_logic_vector(signed(in_index_reg_205) + signed(ap_const_lv32_1));
    ir_fu_297_p2 <= std_logic_vector(unsigned(w_index_reg_194) + unsigned(ap_const_lv14_1));
    ires_1_fu_497_p2 <= std_logic_vector(unsigned(ires_reg_248) + unsigned(ap_const_lv7_1));
        lhs_V_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_265),15));

    out_index_1_fu_467_p2 <= std_logic_vector(unsigned(out_index9_reg_228) + unsigned(ap_const_lv8_18));
    out_index_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_index_reg_540),8));
    outidx5_address0 <= tmp_s_fu_303_p1(14 - 1 downto 0);

    outidx5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outidx5_ce0 <= ap_const_logic_1;
        else 
            outidx5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_437_p2 <= (tmp_22_fu_432_p2 and p_Result_9_reg_637);
    p_Val2_13_fu_419_p2 <= std_logic_vector(signed(p_Val2_11_reg_619) + signed(reg_265));
    p_s_fu_484_p3 <= 
        ap_const_lv32_0 when (tmp_53_fu_479_p2(0) = '1') else 
        in_index_1_reg_670;
    p_shl8_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_359_p3),7));
    p_shl8_fu_359_p3 <= (tmp_4_fu_342_p4 & ap_const_lv1_0);
    p_shl_fu_351_p3 <= (tmp_4_fu_342_p4 & ap_const_lv4_0);
    res_V_address0 <= tmp_49_reg_689(7 - 1 downto 0);

    res_V_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            res_V_ce0 <= ap_const_logic_1;
        else 
            res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_d0 <= reg_265;

    res_V_we0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            res_V_we0 <= ap_const_logic_1;
        else 
            res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_405_p2 <= std_logic_vector(signed(rhs_V_fu_402_p1) + signed(lhs_V_fu_398_p1));
        rhs_V_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_reg_619),15));

    tmp_22_fu_432_p2 <= (p_Result_s_reg_625 xor ap_const_lv1_1);
    tmp_40_fu_389_p1 <= grp_fu_383_p2(14 - 1 downto 0);
    tmp_41_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_reg_574),64));
    tmp_43_fu_371_p2 <= std_logic_vector(unsigned(p_shl_fu_351_p3) - unsigned(p_shl8_cast_fu_367_p1));
        tmp_46_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_index_reg_205),64));

    tmp_47_fu_491_p2 <= "1" when (ires_reg_248 = ap_const_lv7_78) else "0";
    tmp_48_fu_316_p2 <= "1" when (unsigned(im_reg_217) < unsigned(ap_const_lv3_5)) else "0";
    tmp_49_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ires_reg_248),64));
    tmp_4_fu_342_p4 <= mul_reg_579(33 downto 31);
    tmp_50_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_index9_reg_228),64));
    tmp_51_fu_442_p2 <= (p_Result_9_reg_637 xor ap_const_lv1_1);
    tmp_52_fu_462_p2 <= "1" when (unsigned(w_index_1_reg_656) > unsigned(ap_const_lv17_10DFF)) else "0";
    tmp_53_fu_479_p2 <= "1" when (signed(in_index_1_reg_670) > signed(ap_const_lv32_23F)) else "0";
    tmp_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iacc_reg_183),64));
    tmp_s_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_index_reg_194),64));
    underflow_fu_447_p2 <= (tmp_51_fu_442_p2 and p_Result_s_reg_625);
    w11_V_address0 <= tmp_41_fu_338_p1(14 - 1 downto 0);

    w11_V_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            w11_V_ce0 <= ap_const_logic_1;
        else 
            w11_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_1_fu_456_p2 <= std_logic_vector(unsigned(w_index9_reg_238) + unsigned(ap_const_lv17_3600));
    w_index_cast_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_index_reg_194),17));
end behav;
