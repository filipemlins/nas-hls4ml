-- ==============================================================
-- File generated on Tue Mar 02 23:01:38 -03 2021
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_large_rf_gt_ni_w7_V_rom is 
    generic(
             DWIDTH     : integer := 25; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_large_rf_gt_ni_w7_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111100111111110001000", 1 => "0010001100011111001100000", 
    2 => "1101110010000001100100010", 3 => "0100011001111111100100111", 
    4 => "1001000001100001111110001", 5 => "1111010101100000001010100", 
    6 => "0010010000100001010100101", 7 => "0001001001000001011111010", 
    8 => "1110111111100001111010101", 9 => "0010010111111110000011100", 
    10 => "1111110011011111100001011", 11 => "0011000010111111000110001", 
    12 => "1010000111111111000011111", 13 => "0011101011111110111101001", 
    14 => "0101111010111110101001010", 15 => "0011100000011111100101101", 
    16 => "1000100110100000110110000", 17 => "0111000110011111101111011", 
    18 => "1011101000011111100101101", 19 => "1100001010000000011101010", 
    20 => "0000010001100001111010001", 21 => "0000000010000000101110001", 
    22 => "1001111000000001110011010", 23 => "1011001100100001101011100", 
    24 => "1010100111011110110110100", 25 => "0001110101011110111010010", 
    26 => "0001001101100000000101001", 27 => "1000011011000001110100110", 
    28 => "1000011001011111101000100", 29 => "1110100000011110000001010", 
    30 => "1011101111011111000001111", 31 => "0000010110000000000110011", 
    32 => "0010000110000000111100100", 33 => "0000100010111110011100011", 
    34 => "1001110000111110100111010", 35 => "1010100001000000111110110", 
    36 => "0000100100011111111100000", 37 => "0111000110011110011111001", 
    38 => "1101100000011110110110000", 39 => "1110100111000001011000001", 
    40 => "1010001001100000110001110", 41 => "1001111101011111110001100", 
    42 => "1100000010100001011010110", 43 => "1111100100011110101111111", 
    44 => "0100111010111111010110000", 45 => "1111010011111110100111000", 
    46 => "0100101100111110000100011", 47 => "0101001000000001100001110", 
    48 => "1111101110111110000100101", 49 => "1010001010011111000000101", 
    50 => "0011001001011110011000010", 51 => "0100110101111111101101100", 
    52 => "1110001000000000010101110", 53 => "0011000011111111110110100", 
    54 => "1101010101011111000111000", 55 => "0000001111000001101111010", 
    56 => "0000111110011110011101101", 57 => "1101000001011110001100010", 
    58 => "1011101010000001111001110", 59 => "0000011110000000011010000", 
    60 => "0100100000011110011000011", 61 => "1000110111111111101010111", 
    62 => "1010000110011111000001100", 63 => "0010101101111110111001110", 
    64 => "1010101001011110010000000", 65 => "1100011010111110111011111", 
    66 => "1100010001111110110100101", 67 => "1010010100000000110110110", 
    68 => "1001100100111110100110001", 69 => "0110011000100001000110101", 
    70 => "1010000110100001111101000", 71 => "1001001001111110100011001", 
    72 => "0101100001100000110000111", 73 => "1100000100011110011111111", 
    74 => "1101100011100001101111011", 75 => "1001000010100001000011101", 
    76 => "0100111011111111011001110", 77 => "1001100101011110011011100", 
    78 => "1101111111000000010010101", 79 => "1000001111000001011001000", 
    80 => "0101100110011110101010111", 81 => "1011011100000000111011001", 
    82 => "1100001011111111011010110", 83 => "0001011000000000111110000", 
    84 => "1110000001100000000111011", 85 => "1101110110100000000000001", 
    86 => "1010111011011111111101100", 87 => "1010110111100000101110100", 
    88 => "0110000111111110101001100", 89 => "1101011110011110111101110", 
    90 => "1100010000111111101001000", 91 => "0010000100000001110100010", 
    92 => "1110111010111110110101110", 93 => "0110110011000001101111000", 
    94 => "0000000111111111110111111", 95 => "1000111000100001101101101", 
    96 => "0011011110111110010100000", 97 => "1010100100100000011011011", 
    98 => "1011011001100001100000100", 99 => "1001110100000001100101001", 
    100 => "0011010010111110111000100", 101 => "1100110001100001011100110", 
    102 => "1100100111100001001000000", 103 => "1001110001100000000000011", 
    104 => "0111000101111110111111000", 105 => "0010000011111110010000111", 
    106 => "0000100110111111100111111", 107 => "0111010111100000011101100", 
    108 => "0110011110011111011000110", 109 => "1101001001100001000000111", 
    110 => "0101010100000001011110001", 111 => "0000010111111111100111010", 
    112 => "1110101110000000011011111", 113 => "0001111010100001001100001", 
    114 => "1010010000111110111100111", 115 => "0010100100000000110101110", 
    116 => "0110111001000001111011100", 117 => "0011010111011111000011100", 
    118 => "1001100110111110011010010", 119 => "0010100110000001000001001", 
    120 => "1101011010111111000010000", 121 => "0001001101011110001000110", 
    122 => "0011001110111110111000111", 123 => "0110010010100001111000110", 
    124 => "0010010110000000011011100", 125 => "1101010110011111100111110", 
    126 => "0011111010011111000011100", 127 => "1000111101111110101111100", 
    128 => "0111000110100000000111100", 129 => "0110001000000001100111001", 
    130 => "0011001110100001110110011", 131 => "1001010001100001101011000", 
    132 => "0011000100111111011010000", 133 => "1111101101000001011010010", 
    134 => "1011101100100000000001011", 135 => "0100110111100001111111011", 
    136 => "1000000101011110001101001", 137 => "1101000100111110110110000", 
    138 => "0101100010100000011000001", 139 => "1110101111000000111010111", 
    140 => "0110101001100001110011001", 141 => "0111010001000000110001000", 
    142 => "1100000100111111100001100", 143 => "0010100010000001100001111", 
    144 => "1001100000100000000000111", 145 => "0110111111000001000100100", 
    146 => "1000001000111111010011100", 147 => "1100010001000000001000010", 
    148 => "1101010111011110001000100", 149 => "0100000000111111100010001", 
    150 => "0011101010000001100101000", 151 => "0111000101000001111000010", 
    152 => "1100010011111110110111101", 153 => "0011011001111111100111111", 
    154 => "1110000000000001011100101", 155 => "0001100011100001101001011", 
    156 => "0101011111111110111100100", 157 => "1010010011111111001110010", 
    158 => "0110110000100000100011011", 159 => "0000101111011111111101011", 
    160 => "0010110111011110000011011", 161 => "1110010101100000101101110", 
    162 => "0011000000000000110010111", 163 => "1100011100000001101010100", 
    164 => "1010100010000001000111010", 165 => "1101101000000000011010001", 
    166 => "0001111111100001110100000", 167 => "0011011011011110110001001", 
    168 => "0101000001100001111000111", 169 => "0010101111011110011000011", 
    170 => "1001000110111110000011101", 171 => "1011101110000001110110101", 
    172 => "1111001100100000011101011", 173 => "1011100111100000011001110", 
    174 => "1110101010100000110000111", 175 => "0001110100000001000010111", 
    176 => "1001011100011111011110001", 177 => "0001001011000000111011001", 
    178 => "0011110101000000010100111", 179 => "0110000010011111101101110", 
    180 => "1011001101000000011010110", 181 => "1100101001000000100010101", 
    182 => "1111101111000000001100110", 183 => "0010110010100001001000011", 
    184 => "1100110011011111000010101", 185 => "0001110110100001010011100", 
    186 => "0011001010000000101000100", 187 => "0111110001111111111111111", 
    188 => "0101111100011110011010111", 189 => "0000010001100000011010001", 
    190 => "1010010000100000101001110", 191 => "0001011000111110101111010", 
    192 => "1110100100011110011001001", 193 => "1000011110000001000110100", 
    194 => "1100110000100001011011001", 195 => "1000001000111110001100000", 
    196 => "0101001010100001101111110", 197 => "1101100011111110011000110", 
    198 => "0101100001000001010011001", 199 => "0110101111000001010111100", 
    200 => "1011100101111111010111110", 201 => "0001011111100000110011110", 
    202 => "0100001010100001011011011", 203 => "0010000100111111111001000", 
    204 => "1001001110100001100011010", 205 => "0000110100100001011110001", 
    206 => "1000101001111110101000010", 207 => "0100101010100000011100001", 
    208 => "1011111110100001101011111", 209 => "1110011111011110100010011", 
    210 => "0001010101000000000011110", 211 => "1011101110111110001110000", 
    212 => "0001000110011111010100111", 213 => "0010000010000000001111000", 
    214 => "1010010101011111011000100", 215 => "1001000000000001101010010", 
    216 => "0100100110100001101110011", 217 => "1111011000011111001011010", 
    218 => "0100101010011111011110110", 219 => "0001001010111111011111100", 
    220 => "1001010110011110101011110", 221 => "1101100100111111001101100", 
    222 => "1011101000111111001000011", 223 => "0001110000000000111000010", 
    224 => "0111010101100001111110100", 225 => "1100100111100000000110101", 
    226 => "0011110111100001101101111", 227 => "1000101010100001011000000", 
    228 => "0001110001111110110010111", 229 => "1010110000100001110100100", 
    230 => "1010011001000000100010100", 231 => "0001101001011111110100011", 
    232 => "1001110101011111000010001", 233 => "1110111110011111000000000", 
    234 => "0100001111011111011100000", 235 => "0110111111100001110101001", 
    236 => "0110110101100000100000000", 237 => "1101110100111111000000110", 
    238 => "1000110111111110110100011", 239 => "1100111001111111010010111", 
    240 => "0111011000000000010011100", 241 => "0111100001000001100000100", 
    242 => "0001001111000000010001010", 243 => "0011111111111110011111010", 
    244 => "1011110000111111010000110", 245 => "1010111011011111000100001", 
    246 => "1111101110100000000100111", 247 => "1011011111100000111100100", 
    248 => "1010110100100001011001010", 249 => "1000110110100001100011111", 
    250 => "0110011110011111000101011", 251 => "1001000110011110010111010", 
    252 => "0000110100111110101011101", 253 => "0100000010000001010110000", 
    254 => "0100010101100000110101110", 255 => "0010001101000000100010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_large_rf_gt_ni_w7_V is
    generic (
        DataWidth : INTEGER := 25;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_large_rf_gt_ni_w7_V is
    component dense_large_rf_gt_ni_w7_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_large_rf_gt_ni_w7_V_rom_U :  component dense_large_rf_gt_ni_w7_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


