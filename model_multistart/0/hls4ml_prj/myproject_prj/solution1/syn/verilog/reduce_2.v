// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reduce_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V_address0,
        x_V_ce0,
        x_V_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] x_V_address0;
output   x_V_ce0;
input  [12:0] x_V_q0;
output  [17:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] x_V_address0;
reg x_V_ce0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_4_fu_161_p2;
reg   [3:0] i_4_reg_361;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond3_fu_155_p2;
wire   [2:0] tmp_18_fu_172_p1;
reg   [2:0] tmp_18_reg_371;
wire   [1:0] i_3_fu_226_p2;
reg   [1:0] i_3_reg_378;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_220_p2;
wire   [0:0] tmp_19_fu_245_p1;
reg   [0:0] tmp_19_reg_388;
wire   [17:0] right_1_V_1_fu_285_p3;
wire    ap_CS_fsm_state6;
wire   [17:0] right_1_V_2_fu_292_p3;
wire   [17:0] grp_reduce_fu_143_ap_return;
reg   [17:0] p_Val2_8_reg_444;
wire    ap_CS_fsm_state7;
wire    grp_reduce_fu_143_ap_ready;
wire    grp_reduce_fu_143_ap_done;
wire    grp_reduce_fu_143_ap_start;
wire    grp_reduce_fu_143_ap_idle;
reg   [3:0] i_reg_97;
wire    ap_CS_fsm_state4;
reg   [17:0] p_Val2_7_reg_108;
reg   [17:0] p_Val2_s_reg_120;
reg   [1:0] i2_reg_132;
reg    grp_reduce_fu_143_ap_start_reg;
wire   [63:0] tmp_fu_167_p1;
wire   [63:0] tmp_s_fu_240_p1;
reg   [17:0] left_7_V_fu_44;
wire   [17:0] left_0_V_fu_176_p1;
wire    ap_CS_fsm_state3;
reg   [17:0] left_7_V_1_fu_48;
reg   [17:0] left_7_V_2_fu_52;
reg   [17:0] left_7_V_3_fu_56;
reg   [17:0] left_7_V_4_fu_60;
reg   [17:0] left_7_V_5_fu_64;
reg   [17:0] left_7_V_6_fu_68;
reg   [17:0] left_7_V_7_fu_72;
wire   [3:0] tmp_1_fu_232_p3;
wire   [17:0] right_0_V_fu_281_p1;
wire    ap_CS_fsm_state8;
wire   [17:0] tmp1_fu_299_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_reduce_fu_143_ap_start_reg = 1'b0;
end

reduce grp_reduce_fu_143(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reduce_fu_143_ap_start),
    .ap_done(grp_reduce_fu_143_ap_done),
    .ap_idle(grp_reduce_fu_143_ap_idle),
    .ap_ready(grp_reduce_fu_143_ap_ready),
    .x_0_V_read(left_7_V_fu_44),
    .x_1_V_read(left_7_V_1_fu_48),
    .x_2_V_read(left_7_V_2_fu_52),
    .x_3_V_read(left_7_V_3_fu_56),
    .x_4_V_read(left_7_V_4_fu_60),
    .x_5_V_read(left_7_V_5_fu_64),
    .x_6_V_read(left_7_V_6_fu_68),
    .x_7_V_read(left_7_V_7_fu_72),
    .ap_return(grp_reduce_fu_143_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reduce_fu_143_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_reduce_fu_143_ap_start_reg <= 1'b1;
        end else if ((grp_reduce_fu_143_ap_ready == 1'b1)) begin
            grp_reduce_fu_143_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i2_reg_132 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i2_reg_132 <= i_3_reg_378;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_97 <= i_4_reg_361;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_97 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_3_reg_378 <= i_3_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_4_reg_361 <= i_4_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_reg_371 == 3'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        left_7_V_1_fu_48[12 : 0] <= left_0_V_fu_176_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_reg_371 == 3'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        left_7_V_2_fu_52[12 : 0] <= left_0_V_fu_176_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_reg_371 == 3'd3) & (1'b1 == ap_CS_fsm_state3))) begin
        left_7_V_3_fu_56[12 : 0] <= left_0_V_fu_176_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_reg_371 == 3'd4) & (1'b1 == ap_CS_fsm_state3))) begin
        left_7_V_4_fu_60[12 : 0] <= left_0_V_fu_176_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_reg_371 == 3'd5) & (1'b1 == ap_CS_fsm_state3))) begin
        left_7_V_5_fu_64[12 : 0] <= left_0_V_fu_176_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_reg_371 == 3'd6) & (1'b1 == ap_CS_fsm_state3))) begin
        left_7_V_6_fu_68[12 : 0] <= left_0_V_fu_176_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_reg_371 == 3'd7) & (1'b1 == ap_CS_fsm_state3))) begin
        left_7_V_7_fu_72[12 : 0] <= left_0_V_fu_176_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_18_reg_371 == 3'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        left_7_V_fu_44[12 : 0] <= left_0_V_fu_176_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_7_reg_108 <= right_1_V_1_fu_285_p3;
        p_Val2_s_reg_120 <= right_1_V_2_fu_292_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_reduce_fu_143_ap_done == 1'b1))) begin
        p_Val2_8_reg_444 <= grp_reduce_fu_143_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_155_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_18_reg_371 <= tmp_18_fu_172_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_19_reg_388 <= tmp_19_fu_245_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        x_V_address0 = tmp_s_fu_240_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_V_address0 = tmp_fu_167_p1;
    end else begin
        x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        x_V_ce0 = 1'b1;
    end else begin
        x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_155_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_reduce_fu_143_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_return = (tmp1_fu_299_p2 + p_Val2_7_reg_108);

assign exitcond3_fu_155_p2 = ((i_reg_97 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_220_p2 = ((i2_reg_132 == 2'd2) ? 1'b1 : 1'b0);

assign grp_reduce_fu_143_ap_start = grp_reduce_fu_143_ap_start_reg;

assign i_3_fu_226_p2 = (i2_reg_132 + 2'd1);

assign i_4_fu_161_p2 = (i_reg_97 + 4'd1);

assign left_0_V_fu_176_p1 = x_V_q0;

assign right_0_V_fu_281_p1 = x_V_q0;

assign right_1_V_1_fu_285_p3 = ((tmp_19_reg_388[0:0] === 1'b1) ? right_0_V_fu_281_p1 : p_Val2_7_reg_108);

assign right_1_V_2_fu_292_p3 = ((tmp_19_reg_388[0:0] === 1'b1) ? p_Val2_s_reg_120 : right_0_V_fu_281_p1);

assign tmp1_fu_299_p2 = (p_Val2_s_reg_120 + p_Val2_8_reg_444);

assign tmp_18_fu_172_p1 = i_reg_97[2:0];

assign tmp_19_fu_245_p1 = i2_reg_132[0:0];

assign tmp_1_fu_232_p3 = {{2'd2}, {i2_reg_132}};

assign tmp_fu_167_p1 = i_reg_97;

assign tmp_s_fu_240_p1 = tmp_1_fu_232_p3;

always @ (posedge ap_clk) begin
    left_7_V_fu_44[17:13] <= 5'b00000;
    left_7_V_1_fu_48[17:13] <= 5'b00000;
    left_7_V_2_fu_52[17:13] <= 5'b00000;
    left_7_V_3_fu_56[17:13] <= 5'b00000;
    left_7_V_4_fu_60[17:13] <= 5'b00000;
    left_7_V_5_fu_64[17:13] <= 5'b00000;
    left_7_V_6_fu_68[17:13] <= 5'b00000;
    left_7_V_7_fu_72[17:13] <= 5'b00000;
end

endmodule //reduce_2
