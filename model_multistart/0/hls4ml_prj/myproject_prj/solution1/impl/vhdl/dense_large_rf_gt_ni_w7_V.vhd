-- ==============================================================
-- File generated on Mon Mar 01 22:17:22 -03 2021
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_large_rf_gt_ni_w7_V_rom is 
    generic(
             DWIDTH     : integer := 19; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_large_rf_gt_ni_w7_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0011000000000000101", 1 => "1110111111111111111", 
    2 => "0001100000000000100", 3 => "1101011111111111011", 
    4 => "0001000000000000101", 5 => "0100000000000000110", 
    6 => "1101000000000000101", 7 => "0000100000000000100", 
    8 => "0010000000000000111", 9 => "0010100000000000100", 
    10 => "0100011111111111101", 11 => "0011011111111111111", 
    12 => "1101000000000000011", 13 => "1101100000000001000", 
    14 => "1111111111111111011", 15 => "1101111111111111100", 
    16 => "1111100000000000011", 17 => "0011011111111111010", 
    18 => "0010100000000000010", 19 => "1100011111111111011", 
    20 => "1101111111111111110", 21 => "1111011111111111111", 
    22 => "0000011111111111010", 23 => "0011000000000000100", 
    24 => "0001100000000000111", 25 => "0010100000000000100", 
    26 => "1100000000000000111", 27 => "0100000000000000011", 
    28 => "0001100000000000110", 29 => "0000000000000000101", 
    30 => "1110100000000000000", 31 => "1100111111111111011", 
    32 => "1111000000000000000", 33 => "1101000000000000100", 
    34 => "0001100000000000011", 35 => "0001011111111111100", 
    36 => "1101000000000000110", 37 => "0001011111111111001", 
    38 => "1111100000000000011", 39 => "1100100000000000011", 
    40 => "1110111111111111111", 41 => "0000000000000000011", 
    42 => "1101011111111111100", 43 => "0001000000000000110", 
    44 => "1110011111111111111", 45 => "1101011111111111111", 
    46 => "1111000000000000000", 47 => "0010100000000000110", 
    48 => "1111000000000000001", 49 => "0001111111111111111", 
    50 => "1110000000000000011", 51 => "1100100000000000101", 
    52 => "1111111111111111110", 53 => "1100000000000000010", 
    54 => "1101100000000000101", 55 => "0011011111111111011", 
    56 => "1100100000000000010", 57 => "1110100000000000111", 
    58 => "1100011111111111101", 59 => "0001011111111111101", 
    60 => "1100100000000000110", 61 => "1100111111111111101", 
    62 => "1110000000000000010", 63 => "0010011111111111101", 
    64 => "1111011111111111100", 65 => "0010111111111111101", 
    66 => "1101100000000001000", 67 => "1111000000000000011", 
    68 => "0010011111111111001", 69 => "0000000000000000101", 
    70 => "1101000000000000110", 71 => "1110100000000000000", 
    72 => "1110000000000000001", 73 => "1101100000000000001", 
    74 => "1110000000000000000", 75 => "1111011111111111111", 
    76 => "1101111111111111110", 77 => "1111111111111111011", 
    78 => "1110111111111111101", 79 => "0011100000000000101", 
    80 => "1101100000000000011", 81 => "1100000000000000010", 
    82 => "0001011111111111010", 83 => "1110111111111111000", 
    84 => "1101111111111111101", 85 => "1111011111111111111", 
    86 => "1110000000000000110", 87 => "0000100000000001000", 
    88 => "1111100000000000001", 89 => "1111000000000001000", 
    90 => "0000111111111111001", 91 => "1111000000000000111", 
    92 => "0010000000000000001", 93 => "0010100000000000110", 
    94 => "0011011111111111000", 95 => "0010000000000000110", 
    96 => "0011000000000000011", 97 => "1110011111111111110", 
    98 => "1100011111111111111", 99 => "1110111111111111001", 
    100 => "1110111111111111111", 101 => "1100100000000000011", 
    102 => "1101100000000000101", 103 => "0010111111111111011", 
    104 => "0000111111111111010", 105 => "0100000000000001000", 
    106 => "1111000000000000000", 107 => "0011100000000000100", 
    108 => "0010000000000000000", 109 => "1110000000000000111", 
    110 => "1111111111111111100", 111 => "0010100000000000000", 
    112 => "0000000000000000111", 113 => "1100011111111111010", 
    114 => "0010011111111111011", 115 => "1110000000000000101", 
    116 => "0011111111111111110", 117 => "1111100000000000011", 
    118 => "1110000000000000000", 119 => "0010011111111111001", 
    120 => "1111011111111111000", 121 => "1101111111111111011", 
    122 => "1101011111111111111", 123 => "0000011111111111111", 
    124 => "0011100000000000001", 125 => "1101000000000000111", 
    126 => "1110111111111111011", 127 => "0000000000000000001", 
    128 => "1111100000000000011", 129 => "1101011111111111100", 
    130 => "0100000000000000111", 131 => "0100011111111111011", 
    132 => "1101100000000000001", 133 => "1111000000000000101", 
    134 => "1110111111111111100", 135 => "0000000000000000110", 
    136 => "1111011111111111001", 137 => "1111000000000000110", 
    138 => "1111100000000000111", 139 => "1110111111111111011", 
    140 => "0000100000000000100", 141 => "1101100000000000111", 
    142 => "1101000000000000010", 143 => "0010111111111111101", 
    144 => "0000111111111111111", 145 => "0010100000000000011", 
    146 => "1101100000000000000", 147 => "0010000000000000101", 
    148 => "1111011111111111100", 149 => "1100111111111111000", 
    150 => "0100011111111111010", 151 => "0010100000000000010", 
    152 => "1110100000000000110", 153 => "1101100000000000101", 
    154 => "1111111111111111101", 155 => "0001100000000000111", 
    156 => "0010100000000000001", 157 => "0001000000000000100", 
    158 => "1111011111111111111", 159 => "0010111111111111010", 
    160 => "1101011111111111011", 161 => "0000011111111111011", 
    162 => "0000100000000000100", 163 => "1110011111111111001", 
    164 => "1101011111111111101", 165 => "0000000000000000000", 
    166 => "0000100000000000010", 167 => "1101000000000000010", 
    168 => "0011100000000000001", 169 => "0000000000000000110", 
    170 => "1111000000000000111", 171 => "1110011111111111111", 
    172 => "1100011111111111111", 173 => "0001100000000000000", 
    174 => "1110011111111111011", 175 => "0011111111111111100", 
    176 => "0000000000000000001", 177 => "1110011111111111010", 
    178 => "0011100000000000111", 179 => "1111111111111111101", 
    180 => "0011000000000000100", 181 => "1110000000000000011", 
    182 => "0011100000000000100", 183 => "0001000000000000010", 
    184 => "1111111111111111101", 185 => "1111000000000000010", 
    186 => "0000100000000000101", 187 => "1111000000000000000", 
    188 => "0001100000000000011", 189 => "1111011111111111110", 
    190 => "1110100000000000110", 191 => "0011100000000000110", 
    192 => "1110000000000000100", 193 => "1101000000000000110", 
    194 => "0011111111111111000", 195 => "1110000000000000110", 
    196 => "1110100000000000110", 197 => "1100100000000000110", 
    198 => "0011011111111111011", 199 => "0010011111111111101", 
    200 => "0011000000000000001", 201 => "0010011111111111101", 
    202 => "0001011111111111001", 203 => "1111111111111111100", 
    204 => "0011111111111111111", 205 => "1100011111111111010", 
    206 => "0011000000000000010", 207 => "0000100000000000100", 
    208 => "1110011111111111001", 209 => "0001000000000000010", 
    210 => "1100111111111111011", 211 => "1111000000000000011", 
    212 => "1111111111111111110", 213 => "0000111111111111100", 
    214 => "0010011111111111011", 215 => "1111000000000000111", 
    216 => "0001111111111111100", 217 => "0010011111111111100", 
    218 => "1100111111111111011", 219 => "1101011111111111000", 
    220 => "0001000000000000010", 221 => "1110000000000000111", 
    222 => "1100111111111111001", 223 => "0000000000000001000", 
    224 => "0011000000000000011", 225 => "0001011111111111011", 
    226 => "0011111111111111100", 227 => "0011000000000000100", 
    228 => "1110000000000000110", 229 => "0001100000000000010", 
    230 => "0010100000000000010", 231 => "1111111111111111100", 
    232 => "1101000000000000010", 233 => "0000100000000000000", 
    234 => "0000000000000000001", 235 => "0000011111111111000", 
    236 => "0001011111111111110", 237 => "1111011111111111001", 
    238 => "1110011111111111001", 239 => "0010011111111111010", 
    240 => "1100111111111111000", 241 => "1111000000000000010", 
    242 => "0000111111111111100", 243 => "0001100000000000001", 
    244 => "0000100000000001000", 245 => "0000000000000000100", 
    246 => "0000011111111111001", 247 => "0100011111111111110", 
    248 => "0001111111111111111", 249 => "0011100000000000000", 
    250 => "1110011111111111001", 251 => "1100111111111111001", 
    252 => "0001011111111111011", 253 => "0011111111111111110", 
    254 => "1111011111111111011", 255 => "0011111111111111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_large_rf_gt_ni_w7_V is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_large_rf_gt_ni_w7_V is
    component dense_large_rf_gt_ni_w7_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_large_rf_gt_ni_w7_V_rom_U :  component dense_large_rf_gt_ni_w7_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


