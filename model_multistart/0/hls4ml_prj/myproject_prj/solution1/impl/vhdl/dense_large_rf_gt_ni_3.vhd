-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_large_rf_gt_ni_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    res_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    res_V_ce0 : OUT STD_LOGIC;
    res_V_we0 : OUT STD_LOGIC;
    res_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of dense_large_rf_gt_ni_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_1FFF : STD_LOGIC_VECTOR (13 downto 0) := "01111111111111";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_9D8 : STD_LOGIC_VECTOR (11 downto 0) := "100111011000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv14_9D8 : STD_LOGIC_VECTOR (13 downto 0) := "00100111011000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_275F : STD_LOGIC_VECTOR (13 downto 0) := "10011101011111";
    constant ap_const_lv7_15 : STD_LOGIC_VECTOR (6 downto 0) := "0010101";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv30_6807 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000110100000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal outidx4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal outidx4_ce0 : STD_LOGIC;
    signal outidx4_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal w14_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal w14_V_ce0 : STD_LOGIC;
    signal w14_V_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal acc_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal reg_273 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_product_fu_267_ap_ready : STD_LOGIC;
    signal grp_product_fu_267_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal iacc_2_fu_284_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal w_index_cast_fu_295_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_index_cast_reg_546 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ir_fu_305_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ir_reg_554 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_index_reg_564 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_index_cast_fu_321_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal extLd_fu_324_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal extLd_reg_579 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_46_fu_328_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_584 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal im_2_fu_336_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal im_2_reg_588 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_30_reg_598 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_532_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_reg_603 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal w14_V_load_reg_614 : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_50_fu_394_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_50_reg_619 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_53_fu_412_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_53_reg_634 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal acc_V_addr_4_reg_639 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_product_fu_267_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_14_reg_644 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal p_Val2_16_fu_442_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_16_reg_657 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_10_reg_662 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal underflow_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_reg_677 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index_2_fu_479_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal out_index_2_fu_491_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_60_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_index_2_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_index_2_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ires_2_fu_521_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ires_2_reg_708 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_57_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_reg_713 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal acc_V_ce0 : STD_LOGIC;
    signal acc_V_we0 : STD_LOGIC;
    signal acc_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_product_fu_267_ap_start : STD_LOGIC;
    signal grp_product_fu_267_ap_idle : STD_LOGIC;
    signal iacc_reg_191 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond7_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index_reg_202 : STD_LOGIC_VECTOR (11 downto 0);
    signal in_index_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal im_reg_225 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_index7_reg_236 : STD_LOGIC_VECTOR (6 downto 0);
    signal w_index7_reg_246 : STD_LOGIC_VECTOR (13 downto 0);
    signal ires_reg_256 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_product_fu_267_ap_start_reg : STD_LOGIC := '0';
    signal tmp_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_356_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_47_fu_365_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl8_fu_374_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_48_fu_382_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_fu_390_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_406_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_406_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal lhs_V_fu_421_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal rhs_V_fu_425_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_fu_428_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_21_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_532_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_532_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_342_ap_start : STD_LOGIC;
    signal grp_fu_342_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_532_p00 : STD_LOGIC_VECTOR (29 downto 0);

    component product IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (13 downto 0);
        w_V : IN STD_LOGIC_VECTOR (13 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component myproject_urem_14ns_13ns_14_18_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component myproject_lshr_56s_6ns_56_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (55 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component myproject_mul_mul_14ns_16ns_30_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component dense_large_rf_gt_ni_3_outidx4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component dense_large_rf_gt_ni_3_w14_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component dense_large_rf_gt_ni_3_acc_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    outidx4_U : component dense_large_rf_gt_ni_3_outidx4
    generic map (
        DataWidth => 5,
        AddressRange => 2520,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => outidx4_address0,
        ce0 => outidx4_ce0,
        q0 => outidx4_q0);

    w14_V_U : component dense_large_rf_gt_ni_3_w14_V
    generic map (
        DataWidth => 46,
        AddressRange => 2520,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w14_V_address0,
        ce0 => w14_V_ce0,
        q0 => w14_V_q0);

    acc_V_U : component dense_large_rf_gt_ni_3_acc_V
    generic map (
        DataWidth => 14,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_V_address0,
        ce0 => acc_V_ce0,
        we0 => acc_V_we0,
        d0 => acc_V_d0,
        q0 => acc_V_q0);

    grp_product_fu_267 : component product
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_product_fu_267_ap_start,
        ap_done => grp_product_fu_267_ap_done,
        ap_idle => grp_product_fu_267_ap_idle,
        ap_ready => grp_product_fu_267_ap_ready,
        a_V => extLd_reg_579,
        w_V => tmp_53_reg_634,
        ap_return => grp_product_fu_267_ap_return);

    myproject_urem_14ns_13ns_14_18_seq_1_U55 : component myproject_urem_14ns_13ns_14_18_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 14,
        din1_WIDTH => 13,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_342_ap_start,
        done => grp_fu_342_ap_done,
        din0 => w_index7_reg_246,
        din1 => grp_fu_342_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_342_p2);

    myproject_lshr_56s_6ns_56_2_1_U56 : component myproject_lshr_56s_6ns_56_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 56,
        din1_WIDTH => 6,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_406_p0,
        din1 => grp_fu_406_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_406_p2);

    myproject_mul_mul_14ns_16ns_30_3_1_U57 : component myproject_mul_mul_14ns_16ns_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_532_p0,
        din1 => grp_fu_532_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_532_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_product_fu_267_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_product_fu_267_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                    grp_product_fu_267_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_product_fu_267_ap_ready = ap_const_logic_1)) then 
                    grp_product_fu_267_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    iacc_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iacc_reg_191 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_278_p2 = ap_const_lv1_0))) then 
                iacc_reg_191 <= iacc_2_fu_284_p2;
            end if; 
        end if;
    end process;

    im_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (tmp_60_fu_485_p2 = ap_const_lv1_0) and (tmp_46_reg_584 = ap_const_lv1_0))) then 
                im_reg_225 <= im_2_reg_588;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                im_reg_225 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    in_index_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                in_index_reg_213 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                in_index_reg_213 <= p_s_fu_508_p3;
            end if; 
        end if;
    end process;

    ires_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_299_p2 = ap_const_lv1_1))) then 
                ires_reg_256 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                ires_reg_256 <= ires_2_reg_708;
            end if; 
        end if;
    end process;

    out_index7_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (tmp_60_fu_485_p2 = ap_const_lv1_0) and (tmp_46_reg_584 = ap_const_lv1_0))) then 
                out_index7_reg_236 <= out_index_2_fu_491_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_index7_reg_236 <= out_index_cast_fu_321_p1;
            end if; 
        end if;
    end process;

    w_index7_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (tmp_60_fu_485_p2 = ap_const_lv1_0) and (tmp_46_reg_584 = ap_const_lv1_0))) then 
                w_index7_reg_246 <= w_index_2_fu_479_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_index7_reg_246 <= w_index_cast_reg_546;
            end if; 
        end if;
    end process;

    w_index_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_index_reg_202 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                w_index_reg_202 <= ir_reg_554;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                acc_V_addr_4_reg_639 <= tmp_58_fu_416_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                brmerge9_reg_677 <= brmerge9_fu_475_p2;
                overflow_reg_669 <= overflow_fu_460_p2;
                underflow_reg_673 <= underflow_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    extLd_reg_579(12 downto 0) <= extLd_fu_324_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                im_2_reg_588 <= im_2_fu_336_p2;
                tmp_46_reg_584 <= im_reg_225(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and ((tmp_60_fu_485_p2 = ap_const_lv1_1) or (tmp_46_reg_584 = ap_const_lv1_1)))) then
                in_index_2_reg_694 <= in_index_2_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ir_reg_554 <= ir_fu_305_p2;
                    w_index_cast_reg_546(11 downto 0) <= w_index_cast_fu_295_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                ires_2_reg_708 <= ires_2_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                mul_reg_603 <= grp_fu_532_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_index_reg_564 <= outidx4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                p_Result_10_reg_662 <= p_Val2_16_fu_442_p2(13 downto 13);
                p_Result_s_reg_650 <= ret_V_fu_428_p2(14 downto 14);
                p_Val2_16_reg_657 <= p_Val2_16_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_product_fu_267_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                p_Val2_14_reg_644 <= grp_product_fu_267_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) or ((grp_product_fu_267_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then
                reg_273 <= acc_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_30_reg_598 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                    tmp_50_reg_619(5 downto 1) <= tmp_50_fu_394_p2(5 downto 1);
                w14_V_load_reg_614 <= w14_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp_53_reg_634 <= tmp_53_fu_412_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) and (tmp_56_fu_515_p2 = ap_const_lv1_0))) then
                    tmp_57_reg_713(6 downto 0) <= tmp_57_fu_527_p1(6 downto 0);
            end if;
        end if;
    end process;
    w_index_cast_reg_546(13 downto 12) <= "00";
    extLd_reg_579(13) <= '0';
    tmp_50_reg_619(0) <= '0';
    tmp_57_reg_713(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state29, grp_product_fu_267_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_299_p2, tmp_46_fu_328_p3, tmp_46_reg_584, ap_CS_fsm_state6, ap_CS_fsm_state32, tmp_60_fu_485_p2, ap_CS_fsm_state34, tmp_56_fu_515_p2, exitcond7_fu_278_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond7_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_299_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_46_fu_328_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((grp_product_fu_267_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (tmp_60_fu_485_p2 = ap_const_lv1_0) and (tmp_46_reg_584 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state34 => 
                if (((tmp_56_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    acc_V_address0_assign_proc : process(ap_CS_fsm_state2, tmp_46_reg_584, acc_V_addr_4_reg_639, ap_CS_fsm_state28, overflow_reg_669, ap_CS_fsm_state31, underflow_reg_673, brmerge9_reg_677, ap_CS_fsm_state32, ap_CS_fsm_state34, tmp_57_fu_527_p1, tmp_fu_290_p1, tmp_58_fu_416_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            acc_V_address0 <= tmp_57_fu_527_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or ((brmerge9_reg_677 = ap_const_lv1_1) and (overflow_reg_669 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32) and (tmp_46_reg_584 = ap_const_lv1_0)) or ((brmerge9_reg_677 = ap_const_lv1_1) and (underflow_reg_673 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32) and (overflow_reg_669 = ap_const_lv1_0) and (tmp_46_reg_584 = ap_const_lv1_0)))) then 
            acc_V_address0 <= acc_V_addr_4_reg_639;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            acc_V_address0 <= tmp_58_fu_416_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            acc_V_address0 <= tmp_fu_290_p1(7 - 1 downto 0);
        else 
            acc_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    acc_V_ce0_assign_proc : process(ap_CS_fsm_state2, tmp_46_reg_584, ap_CS_fsm_state28, overflow_reg_669, ap_CS_fsm_state31, underflow_reg_673, brmerge9_reg_677, ap_CS_fsm_state32, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((brmerge9_reg_677 = ap_const_lv1_1) and (overflow_reg_669 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32) and (tmp_46_reg_584 = ap_const_lv1_0)) or ((brmerge9_reg_677 = ap_const_lv1_1) and (underflow_reg_673 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32) and (overflow_reg_669 = ap_const_lv1_0) and (tmp_46_reg_584 = ap_const_lv1_0)))) then 
            acc_V_ce0 <= ap_const_logic_1;
        else 
            acc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_V_d0_assign_proc : process(ap_CS_fsm_state2, tmp_46_reg_584, p_Val2_16_reg_657, overflow_reg_669, ap_CS_fsm_state31, underflow_reg_673, brmerge9_reg_677, ap_CS_fsm_state32)
    begin
        if (((brmerge9_reg_677 = ap_const_lv1_1) and (overflow_reg_669 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32) and (tmp_46_reg_584 = ap_const_lv1_0))) then 
            acc_V_d0 <= ap_const_lv14_1FFF;
        elsif (((brmerge9_reg_677 = ap_const_lv1_1) and (underflow_reg_673 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32) and (overflow_reg_669 = ap_const_lv1_0) and (tmp_46_reg_584 = ap_const_lv1_0))) then 
            acc_V_d0 <= ap_const_lv14_2000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            acc_V_d0 <= p_Val2_16_reg_657;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            acc_V_d0 <= ap_const_lv14_0;
        else 
            acc_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    acc_V_we0_assign_proc : process(ap_CS_fsm_state2, tmp_46_reg_584, overflow_reg_669, ap_CS_fsm_state31, underflow_reg_673, brmerge9_reg_677, ap_CS_fsm_state32, exitcond7_fu_278_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or ((brmerge9_reg_677 = ap_const_lv1_1) and (overflow_reg_669 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32) and (tmp_46_reg_584 = ap_const_lv1_0)) or ((brmerge9_reg_677 = ap_const_lv1_1) and (underflow_reg_673 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32) and (overflow_reg_669 = ap_const_lv1_0) and (tmp_46_reg_584 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_278_p2 = ap_const_lv1_0)))) then 
            acc_V_we0 <= ap_const_logic_1;
        else 
            acc_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state34, tmp_56_fu_515_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_56_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state34, tmp_56_fu_515_p2)
    begin
        if (((tmp_56_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge9_fu_475_p2 <= (p_Result_s_reg_650 xor p_Result_10_reg_662);
    data_V_address0 <= tmp_55_fu_316_p1(7 - 1 downto 0);

    data_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond7_fu_278_p2 <= "1" when (iacc_reg_191 = ap_const_lv7_54) else "0";
    exitcond_fu_299_p2 <= "1" when (w_index_reg_202 = ap_const_lv12_9D8) else "0";
    extLd_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_V_q0),14));

    grp_fu_342_ap_start_assign_proc : process(tmp_46_fu_328_p3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_46_fu_328_p3 = ap_const_lv1_0))) then 
            grp_fu_342_ap_start <= ap_const_logic_1;
        else 
            grp_fu_342_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_342_p1 <= ap_const_lv14_9D8(13 - 1 downto 0);
        grp_fu_406_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(w14_V_load_reg_614),56));

    grp_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_reg_619),56));
    grp_fu_532_p0 <= grp_fu_532_p00(14 - 1 downto 0);
    grp_fu_532_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_index7_reg_246),30));
    grp_fu_532_p1 <= ap_const_lv30_6807(16 - 1 downto 0);
    grp_product_fu_267_ap_start <= grp_product_fu_267_ap_start_reg;
    iacc_2_fu_284_p2 <= std_logic_vector(unsigned(iacc_reg_191) + unsigned(ap_const_lv7_1));
    im_2_fu_336_p2 <= std_logic_vector(unsigned(im_reg_225) + unsigned(ap_const_lv3_1));
    in_index_2_fu_497_p2 <= std_logic_vector(signed(in_index_reg_213) + signed(ap_const_lv32_1));
    ir_fu_305_p2 <= std_logic_vector(unsigned(w_index_reg_202) + unsigned(ap_const_lv12_1));
    ires_2_fu_521_p2 <= std_logic_vector(unsigned(ires_reg_256) + unsigned(ap_const_lv7_1));
        lhs_V_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_273),15));

    out_index_2_fu_491_p2 <= std_logic_vector(unsigned(out_index7_reg_236) + unsigned(ap_const_lv7_15));
    out_index_cast_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_index_reg_564),7));
    outidx4_address0 <= tmp_s_fu_311_p1(12 - 1 downto 0);

    outidx4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outidx4_ce0 <= ap_const_logic_1;
        else 
            outidx4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_460_p2 <= (tmp_21_fu_455_p2 and p_Result_10_reg_662);
    p_Val2_16_fu_442_p2 <= std_logic_vector(signed(reg_273) + signed(p_Val2_14_reg_644));
    p_s_fu_508_p3 <= 
        ap_const_lv32_0 when (tmp_61_fu_503_p2(0) = '1') else 
        in_index_2_reg_694;
    p_shl8_fu_374_p3 <= (tmp_6_fu_356_p4 & ap_const_lv1_0);
    res_V_address0 <= tmp_57_reg_713(7 - 1 downto 0);

    res_V_ce0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            res_V_ce0 <= ap_const_logic_1;
        else 
            res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_d0 <= reg_273;

    res_V_we0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            res_V_we0 <= ap_const_logic_1;
        else 
            res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_428_p2 <= std_logic_vector(signed(lhs_V_fu_421_p1) + signed(rhs_V_fu_425_p1));
        rhs_V_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_14_reg_644),15));

    tmp_21_fu_455_p2 <= (p_Result_s_reg_650 xor ap_const_lv1_1);
    tmp_32_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_reg_598),64));
    tmp_46_fu_328_p3 <= im_reg_225(2 downto 2);
    tmp_47_fu_365_p4 <= mul_reg_603(27 downto 26);
    tmp_48_fu_382_p3 <= (tmp_47_fu_365_p4 & ap_const_lv4_0);
    tmp_49_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_374_p3),6));
    tmp_50_fu_394_p2 <= std_logic_vector(unsigned(tmp_48_fu_382_p3) - unsigned(tmp_49_fu_390_p1));
    tmp_53_fu_412_p1 <= grp_fu_406_p2(14 - 1 downto 0);
        tmp_55_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_index_reg_213),64));

    tmp_56_fu_515_p2 <= "1" when (ires_reg_256 = ap_const_lv7_54) else "0";
    tmp_57_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ires_reg_256),64));
    tmp_58_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_index7_reg_236),64));
    tmp_59_fu_465_p2 <= (p_Result_10_reg_662 xor ap_const_lv1_1);
    tmp_60_fu_485_p2 <= "1" when (unsigned(w_index_2_fu_479_p2) > unsigned(ap_const_lv14_275F)) else "0";
    tmp_61_fu_503_p2 <= "1" when (signed(in_index_2_reg_694) > signed(ap_const_lv32_77)) else "0";
    tmp_6_fu_356_p4 <= mul_reg_603(28 downto 26);
    tmp_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iacc_reg_191),64));
    tmp_s_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_index_reg_202),64));
    underflow_fu_470_p2 <= (tmp_59_fu_465_p2 and p_Result_s_reg_650);
    w14_V_address0 <= tmp_32_fu_352_p1(12 - 1 downto 0);

    w14_V_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            w14_V_ce0 <= ap_const_logic_1;
        else 
            w14_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_2_fu_479_p2 <= std_logic_vector(unsigned(w_index7_reg_246) + unsigned(ap_const_lv14_9D8));
    w_index_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_index_reg_202),14));
end behav;
