-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reduce is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    x_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    x_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    x_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    x_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    x_5_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    x_6_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    x_7_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of reduce is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_3_fu_194_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_369 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_200_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_374 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond1_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_230_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_405 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_22_fu_242_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_22_reg_413 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_reduce_1_fu_172_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_reg_457 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_reduce_1_fu_172_ap_ready : STD_LOGIC;
    signal grp_reduce_1_fu_172_ap_done : STD_LOGIC;
    signal grp_reduce_1_fu_180_ap_ready : STD_LOGIC;
    signal grp_reduce_1_fu_180_ap_done : STD_LOGIC;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal grp_reduce_1_fu_180_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_7_reg_462 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_reduce_1_fu_172_ap_start : STD_LOGIC;
    signal grp_reduce_1_fu_172_ap_idle : STD_LOGIC;
    signal grp_reduce_1_fu_180_ap_start : STD_LOGIC;
    signal grp_reduce_1_fu_180_ap_idle : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_128_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_124 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal left_0_V_reg_135 : STD_LOGIC_VECTOR (17 downto 0);
    signal i2_reg_148 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal right_0_V_reg_159 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_20_t_fu_236_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_reduce_1_fu_172_ap_start_reg : STD_LOGIC := '0';
    signal grp_reduce_1_fu_180_ap_start_reg : STD_LOGIC := '0';
    signal left_3_V_fu_44 : STD_LOGIC_VECTOR (17 downto 0);
    signal left_3_V_1_fu_48 : STD_LOGIC_VECTOR (17 downto 0);
    signal left_3_V_2_fu_52 : STD_LOGIC_VECTOR (17 downto 0);
    signal left_3_V_3_fu_56 : STD_LOGIC_VECTOR (17 downto 0);
    signal right_3_V_fu_60 : STD_LOGIC_VECTOR (17 downto 0);
    signal right_3_V_1_fu_64 : STD_LOGIC_VECTOR (17 downto 0);
    signal right_3_V_2_fu_68 : STD_LOGIC_VECTOR (17 downto 0);
    signal right_3_V_3_fu_72 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_condition_285 : BOOLEAN;
    signal ap_condition_290 : BOOLEAN;

    component reduce_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        x_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        x_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        x_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    grp_reduce_1_fu_172 : component reduce_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reduce_1_fu_172_ap_start,
        ap_done => grp_reduce_1_fu_172_ap_done,
        ap_idle => grp_reduce_1_fu_172_ap_idle,
        ap_ready => grp_reduce_1_fu_172_ap_ready,
        x_0_V_read => left_3_V_fu_44,
        x_1_V_read => left_3_V_1_fu_48,
        x_2_V_read => left_3_V_2_fu_52,
        x_3_V_read => left_3_V_3_fu_56,
        ap_return => grp_reduce_1_fu_172_ap_return);

    grp_reduce_1_fu_180 : component reduce_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reduce_1_fu_180_ap_start,
        ap_done => grp_reduce_1_fu_180_ap_done,
        ap_idle => grp_reduce_1_fu_180_ap_idle,
        ap_ready => grp_reduce_1_fu_180_ap_ready,
        x_0_V_read => right_3_V_fu_60,
        x_1_V_read => right_3_V_1_fu_64,
        x_2_V_read => right_3_V_2_fu_68,
        x_3_V_read => right_3_V_3_fu_72,
        ap_return => grp_reduce_1_fu_180_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_reduce_1_fu_172_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reduce_1_fu_172_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_reduce_1_fu_172_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reduce_1_fu_172_ap_ready = ap_const_logic_1)) then 
                    grp_reduce_1_fu_172_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reduce_1_fu_180_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reduce_1_fu_180_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_reduce_1_fu_180_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reduce_1_fu_180_ap_ready = ap_const_logic_1)) then 
                    grp_reduce_1_fu_180_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i2_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i2_reg_148 <= i_4_reg_405;
            elsif (((exitcond1_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i2_reg_148 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_124 <= i_3_reg_369;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_124 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    left_0_V_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                if ((ap_phi_mux_i_phi_fu_128_p4 = ap_const_lv3_0)) then 
                    left_0_V_reg_135 <= x_0_V_read;
                elsif ((ap_const_boolean_1 = ap_condition_285)) then 
                    left_0_V_reg_135 <= x_3_V_read;
                elsif ((ap_phi_mux_i_phi_fu_128_p4 = ap_const_lv3_2)) then 
                    left_0_V_reg_135 <= x_2_V_read;
                elsif ((ap_phi_mux_i_phi_fu_128_p4 = ap_const_lv3_1)) then 
                    left_0_V_reg_135 <= x_1_V_read;
                end if;
            end if; 
        end if;
    end process;

    right_0_V_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                if ((tmp_20_t_fu_236_p2 = ap_const_lv3_4)) then 
                    right_0_V_reg_159 <= x_4_V_read;
                elsif ((ap_const_boolean_1 = ap_condition_290)) then 
                    right_0_V_reg_159 <= x_7_V_read;
                elsif ((tmp_20_t_fu_236_p2 = ap_const_lv3_6)) then 
                    right_0_V_reg_159 <= x_6_V_read;
                elsif ((tmp_20_t_fu_236_p2 = ap_const_lv3_5)) then 
                    right_0_V_reg_159 <= x_5_V_read;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_369 <= i_3_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_4_reg_405 <= i_4_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_374 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                left_3_V_1_fu_48 <= left_0_V_reg_135;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_374 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                left_3_V_2_fu_52 <= left_0_V_reg_135;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_374 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                left_3_V_3_fu_56 <= left_0_V_reg_135;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_374 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                left_3_V_fu_44 <= left_0_V_reg_135;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                p_Val2_7_reg_462 <= grp_reduce_1_fu_180_ap_return;
                p_Val2_s_reg_457 <= grp_reduce_1_fu_172_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_reg_413 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                right_3_V_1_fu_64 <= right_0_V_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_reg_413 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                right_3_V_2_fu_68 <= right_0_V_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_reg_413 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                right_3_V_3_fu_72 <= right_0_V_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_reg_413 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                right_3_V_fu_60 <= right_0_V_reg_159;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_22_reg_413 <= tmp_22_fu_242_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_374 <= tmp_fu_200_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_188_p2, ap_CS_fsm_state4, exitcond_fu_224_p2, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state6_on_subcall_done_assign_proc : process(grp_reduce_1_fu_172_ap_done, grp_reduce_1_fu_180_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_reduce_1_fu_180_ap_done = ap_const_logic_0) or (grp_reduce_1_fu_172_ap_done = ap_const_logic_0));
    end process;


    ap_condition_285_assign_proc : process(ap_phi_mux_i_phi_fu_128_p4)
    begin
                ap_condition_285 <= (not((ap_phi_mux_i_phi_fu_128_p4 = ap_const_lv3_0)) and not((ap_phi_mux_i_phi_fu_128_p4 = ap_const_lv3_2)) and not((ap_phi_mux_i_phi_fu_128_p4 = ap_const_lv3_1)));
    end process;


    ap_condition_290_assign_proc : process(tmp_20_t_fu_236_p2)
    begin
                ap_condition_290 <= (not((tmp_20_t_fu_236_p2 = ap_const_lv3_4)) and not((tmp_20_t_fu_236_p2 = ap_const_lv3_6)) and not((tmp_20_t_fu_236_p2 = ap_const_lv3_5)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_phi_fu_128_p4 <= i_reg_124;

    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(p_Val2_7_reg_462) + unsigned(p_Val2_s_reg_457));
    exitcond1_fu_188_p2 <= "1" when (i_reg_124 = ap_const_lv3_4) else "0";
    exitcond_fu_224_p2 <= "1" when (i2_reg_148 = ap_const_lv3_4) else "0";
    grp_reduce_1_fu_172_ap_start <= grp_reduce_1_fu_172_ap_start_reg;
    grp_reduce_1_fu_180_ap_start <= grp_reduce_1_fu_180_ap_start_reg;
    i_3_fu_194_p2 <= std_logic_vector(unsigned(i_reg_124) + unsigned(ap_const_lv3_1));
    i_4_fu_230_p2 <= std_logic_vector(unsigned(i2_reg_148) + unsigned(ap_const_lv3_1));
    tmp_20_t_fu_236_p2 <= (i2_reg_148 xor ap_const_lv3_4);
    tmp_22_fu_242_p1 <= i2_reg_148(2 - 1 downto 0);
    tmp_fu_200_p1 <= i_reg_124(2 - 1 downto 0);
end behav;
