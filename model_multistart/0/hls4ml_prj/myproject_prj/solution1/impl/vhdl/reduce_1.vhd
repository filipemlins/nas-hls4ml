-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reduce_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    x_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    x_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    x_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of reduce_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_5_fu_122_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal left_0_V_fu_144_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond2_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal left_0_V_1_fu_152_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_6_fu_166_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal right_0_V_fu_188_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal right_0_V_1_fu_196_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_fu_204_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_reg_277 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_9_reg_46 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_reg_58 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_reg_70 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_10_reg_81 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_1_reg_93 : STD_LOGIC_VECTOR (17 downto 0);
    signal i2_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal cond_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_140_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal left_1_V_fu_134_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal cond1_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_184_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal right_1_V_fu_178_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_210_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i2_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i2_reg_105 <= ap_const_lv2_0;
            elsif (((exitcond_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i2_reg_105 <= i_6_fu_166_p2;
            end if; 
        end if;
    end process;

    i_reg_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_70 <= i_5_fu_122_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_70 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                p_Val2_10_reg_81 <= right_0_V_fu_188_p3;
                p_Val2_1_reg_93 <= right_0_V_1_fu_196_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_Val2_9_reg_46 <= left_0_V_fu_144_p3;
                p_Val2_s_reg_58 <= left_0_V_1_fu_152_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp1_reg_277 <= tmp1_fu_204_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_116_p2, ap_CS_fsm_state3, exitcond_fu_160_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(tmp1_reg_277) + unsigned(tmp_fu_210_p2));
    cond1_fu_172_p2 <= "1" when (i2_reg_105 = ap_const_lv2_0) else "0";
    cond_fu_128_p2 <= "1" when (i_reg_70 = ap_const_lv2_0) else "0";
    exitcond2_fu_116_p2 <= "1" when (i_reg_70 = ap_const_lv2_2) else "0";
    exitcond_fu_160_p2 <= "1" when (i2_reg_105 = ap_const_lv2_2) else "0";
    i_5_fu_122_p2 <= std_logic_vector(unsigned(i_reg_70) + unsigned(ap_const_lv2_1));
    i_6_fu_166_p2 <= std_logic_vector(unsigned(i2_reg_105) + unsigned(ap_const_lv2_1));
    left_0_V_1_fu_152_p3 <= 
        p_Val2_s_reg_58 when (tmp_20_fu_140_p1(0) = '1') else 
        left_1_V_fu_134_p3;
    left_0_V_fu_144_p3 <= 
        left_1_V_fu_134_p3 when (tmp_20_fu_140_p1(0) = '1') else 
        p_Val2_9_reg_46;
    left_1_V_fu_134_p3 <= 
        x_0_V_read when (cond_fu_128_p2(0) = '1') else 
        x_1_V_read;
    right_0_V_1_fu_196_p3 <= 
        p_Val2_1_reg_93 when (tmp_21_fu_184_p1(0) = '1') else 
        right_1_V_fu_178_p3;
    right_0_V_fu_188_p3 <= 
        right_1_V_fu_178_p3 when (tmp_21_fu_184_p1(0) = '1') else 
        p_Val2_10_reg_81;
    right_1_V_fu_178_p3 <= 
        x_2_V_read when (cond1_fu_172_p2(0) = '1') else 
        x_3_V_read;
    tmp1_fu_204_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_58) + unsigned(p_Val2_9_reg_46));
    tmp_20_fu_140_p1 <= i_reg_70(1 - 1 downto 0);
    tmp_21_fu_184_p1 <= i2_reg_105(1 - 1 downto 0);
    tmp_fu_210_p2 <= std_logic_vector(unsigned(p_Val2_10_reg_81) + unsigned(p_Val2_1_reg_93));
end behav;
