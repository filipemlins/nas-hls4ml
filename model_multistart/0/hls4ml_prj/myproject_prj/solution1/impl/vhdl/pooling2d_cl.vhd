-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    res_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    res_V_ce0 : OUT STD_LOGIC;
    res_V_we0 : OUT STD_LOGIC;
    res_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of pooling2d_cl is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv13_E8 : STD_LOGIC_VECTOR (12 downto 0) := "0000011101000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ff_cast1_cast_fu_215_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ff_cast1_cast_reg_474 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ff_1_fu_225_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ff_1_reg_482 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_277_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_reg_490 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_4_fu_291_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_11_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kk_1_fu_307_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kk_1_reg_506 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_17_fu_313_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_reg_511 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_32_fu_327_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_32_reg_521 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_20_fu_333_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_reg_526 : STD_LOGIC_VECTOR (12 downto 0);
    signal ll_1_fu_349_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ll_1_reg_534 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_23_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_539 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_26_reg_543 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_fu_379_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_reg_548 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_fu_392_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_29_reg_553 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal data_V_load_reg_563 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_16_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_reg_568 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal pool_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond_i_i_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_445_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_586 : STD_LOGIC_VECTOR (2 downto 0);
    signal jj_1_fu_451_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal pool_V_load_reg_596 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal y_V_2_fu_462_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal pool_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal pool_V_ce0 : STD_LOGIC;
    signal pool_V_we0 : STD_LOGIC;
    signal pool_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ff_reg_129 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_reg_141 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal jj_reg_153 : STD_LOGIC_VECTOR (4 downto 0);
    signal kk_reg_165 : STD_LOGIC_VECTOR (1 downto 0);
    signal ll_reg_177 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal agg_result_V_i_i_reg_188 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_i_i_reg_199 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_25_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal extLd_fu_405_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_fu_237_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_fu_249_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_245_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl5_cast_fu_257_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_261_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_fu_267_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal kk_cast8_fu_297_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_fu_333_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ll_cast7_fu_339_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_fu_355_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_fu_367_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_cast_cast_fu_375_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_cast_fu_389_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_fu_409_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_cast_fu_417_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_fu_421_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_32_cast_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_41_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_20_fu_333_p10 : STD_LOGIC_VECTOR (12 downto 0);

    component pooling2d_cl_pool_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    pool_V_U : component pooling2d_cl_pool_V
    generic map (
        DataWidth => 14,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool_V_address0,
        ce0 => pool_V_ce0,
        we0 => pool_V_we0,
        d0 => pool_V_d0,
        q0 => pool_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    agg_result_V_i_i_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                agg_result_V_i_i_reg_188 <= y_V_2_fu_462_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                agg_result_V_i_i_reg_188 <= pool_V_q0;
            end if; 
        end if;
    end process;

    ff_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ff_reg_129 <= ff_1_reg_482;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ff_reg_129 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_i_i_reg_199 <= i_reg_586;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_i_i_reg_199 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    ii_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_219_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ii_reg_141 <= ap_const_lv5_0;
            elsif (((tmp_11_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ii_reg_141 <= ii_4_fu_291_p2;
            end if; 
        end if;
    end process;

    jj_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                jj_reg_153 <= ap_const_lv5_0;
            elsif (((exitcond_i_i_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                jj_reg_153 <= jj_1_fu_451_p2;
            end if; 
        end if;
    end process;

    kk_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_11_fu_285_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                kk_reg_165 <= ap_const_lv2_0;
            elsif (((tmp_21_fu_343_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                kk_reg_165 <= kk_1_reg_506;
            end if; 
        end if;
    end process;

    ll_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ll_reg_177 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                ll_reg_177 <= ll_1_reg_534;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                data_V_load_reg_563 <= data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ff_1_reg_482 <= ff_1_fu_225_p2;
                    ff_cast1_cast_reg_474(3 downto 0) <= ff_cast1_cast_fu_215_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                i_reg_586 <= i_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kk_1_reg_506 <= kk_1_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ll_1_reg_534 <= ll_1_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                pool_V_load_reg_596 <= pool_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_fu_343_p2 = ap_const_lv1_0) and (tmp_23_fu_361_p2 = ap_const_lv1_0) and (tmp_18_reg_517 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp1_reg_548 <= tmp1_fu_379_p2;
                tmp_26_reg_543 <= grp_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_231_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_10_reg_490 <= tmp_10_fu_277_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    tmp_16_reg_568(31 downto 0) <= tmp_16_fu_430_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_12_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_17_reg_511 <= tmp_17_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_18_reg_517 <= tmp_18_fu_322_p2;
                tmp_20_reg_526 <= tmp_20_fu_333_p2;
                    tmp_32_reg_521(1) <= tmp_32_fu_327_p2(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_fu_343_p2 = ap_const_lv1_0) and (tmp_18_reg_517 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_23_reg_539 <= tmp_23_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_29_reg_553 <= tmp_29_fu_392_p2;
            end if;
        end if;
    end process;
    ff_cast1_cast_reg_474(8 downto 4) <= "00000";
    tmp_32_reg_521(0) <= '0';
    tmp_16_reg_568(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_fu_231_p2, ap_CS_fsm_state4, tmp_11_fu_285_p2, ap_CS_fsm_state5, tmp_12_fu_301_p2, tmp_18_reg_517, ap_CS_fsm_state7, tmp_23_fu_361_p2, tmp_21_fu_343_p2, ap_CS_fsm_state13, exitcond_i_i_fu_434_p2, exitcond_fu_219_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_fu_231_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_11_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_12_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((tmp_21_fu_343_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (((tmp_21_fu_343_p2 = ap_const_lv1_0) and (tmp_18_reg_517 = ap_const_lv1_1)) or ((tmp_21_fu_343_p2 = ap_const_lv1_0) and (tmp_23_fu_361_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((exitcond_i_i_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond_fu_219_p2)
    begin
        if (((exitcond_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_219_p2)
    begin
        if (((exitcond_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_V_address0 <= tmp_30_fu_397_p1(13 - 1 downto 0);

    data_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_219_p2 <= "1" when (ff_reg_129 = ap_const_lv4_8) else "0";
    exitcond_i_i_fu_434_p2 <= "1" when (i_i_i_reg_199 = ap_const_lv3_4) else "0";
    extLd_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_V_load_reg_563),14));
    ff_1_fu_225_p2 <= std_logic_vector(unsigned(ff_reg_129) + unsigned(ap_const_lv4_1));
    ff_cast1_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ff_reg_129),9));
    grp_fu_210_p2 <= std_logic_vector(unsigned(tmp_32_reg_521) + unsigned(ll_reg_177));
    i_fu_445_p2 <= std_logic_vector(unsigned(i_i_i_reg_199) + unsigned(ap_const_lv3_1));
    ii_4_fu_291_p2 <= std_logic_vector(unsigned(ii_reg_141) + unsigned(ap_const_lv5_2));
    jj_1_fu_451_p2 <= std_logic_vector(unsigned(jj_reg_153) + unsigned(ap_const_lv5_2));
    kk_1_fu_307_p2 <= std_logic_vector(unsigned(kk_reg_165) + unsigned(ap_const_lv2_1));
    kk_cast8_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kk_reg_165),5));
    ll_1_fu_349_p2 <= std_logic_vector(unsigned(ll_reg_177) + unsigned(ap_const_lv2_1));
    ll_cast7_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ll_reg_177),5));
    p_shl5_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_249_p3),12));
    p_shl5_fu_249_p3 <= (ii_reg_141 & ap_const_lv3_0);
    p_shl_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_237_p3),12));
    p_shl_fu_237_p3 <= (ii_reg_141 & ap_const_lv6_0);

    pool_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state11, tmp_25_fu_384_p1, tmp_27_fu_401_p1, tmp_i_i_fu_440_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pool_V_address0 <= tmp_i_i_fu_440_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pool_V_address0 <= tmp_27_fu_401_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pool_V_address0 <= tmp_25_fu_384_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pool_V_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            pool_V_address0 <= "XX";
        end if; 
    end process;


    pool_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            pool_V_ce0 <= ap_const_logic_1;
        else 
            pool_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool_V_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, extLd_fu_405_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pool_V_d0 <= extLd_fu_405_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pool_V_d0 <= ap_const_lv14_2000;
        else 
            pool_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    pool_V_we0_assign_proc : process(tmp_18_reg_517, ap_CS_fsm_state7, tmp_23_fu_361_p2, tmp_23_reg_539, tmp_21_fu_343_p2, ap_CS_fsm_state11)
    begin
        if ((((tmp_23_reg_539 = ap_const_lv1_0) and (tmp_18_reg_517 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (((tmp_21_fu_343_p2 = ap_const_lv1_0) and (tmp_18_reg_517 = ap_const_lv1_1)) or ((tmp_21_fu_343_p2 = ap_const_lv1_0) and (tmp_23_fu_361_p2 = ap_const_lv1_1)))))) then 
            pool_V_we0 <= ap_const_logic_1;
        else 
            pool_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_address0 <= tmp_16_reg_568(11 - 1 downto 0);

    res_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            res_V_ce0 <= ap_const_logic_1;
        else 
            res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_d0 <= agg_result_V_i_i_reg_188;

    res_V_we0_assign_proc : process(ap_CS_fsm_state13, exitcond_i_i_fu_434_p2)
    begin
        if (((exitcond_i_i_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            res_V_we0 <= ap_const_logic_1;
        else 
            res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_reg_548),13));
    tmp1_fu_379_p2 <= std_logic_vector(unsigned(ff_cast1_cast_reg_474) + unsigned(tmp_45_cast_cast_fu_375_p1));
    tmp_10_fu_277_p3 <= (tmp_13_fu_267_p4 & ff_reg_129);
    tmp_11_fu_285_p2 <= "1" when (unsigned(jj_reg_153) < unsigned(ap_const_lv5_1C)) else "0";
    tmp_12_fu_301_p2 <= "1" when (kk_reg_165 = ap_const_lv2_2) else "0";
    tmp_13_fu_267_p4 <= tmp_s_fu_261_p2(11 downto 4);
    tmp_14_fu_409_p3 <= (jj_reg_153 & ap_const_lv2_0);
    tmp_15_fu_421_p2 <= std_logic_vector(unsigned(tmp_30_cast_fu_417_p1) + unsigned(tmp_10_reg_490));
    tmp_16_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_cast_fu_426_p1),64));
    tmp_17_fu_313_p2 <= std_logic_vector(unsigned(ii_reg_141) + unsigned(kk_cast8_fu_297_p1));
    tmp_18_fu_322_p2 <= "1" when (unsigned(tmp_17_reg_511) > unsigned(ap_const_lv5_1B)) else "0";
    tmp_20_fu_333_p1 <= tmp_20_fu_333_p10(5 - 1 downto 0);
    tmp_20_fu_333_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_511),13));
    tmp_20_fu_333_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv13_E8) * unsigned(tmp_20_fu_333_p1), 13));
    tmp_21_fu_343_p2 <= "1" when (ll_reg_177 = ap_const_lv2_2) else "0";
    tmp_22_fu_355_p2 <= std_logic_vector(unsigned(jj_reg_153) + unsigned(ll_cast7_fu_339_p1));
    tmp_23_fu_361_p2 <= "1" when (unsigned(tmp_22_fu_355_p2) > unsigned(ap_const_lv5_1B)) else "0";
    tmp_25_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_210_p2),64));
    tmp_27_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_reg_543),64));
    tmp_28_fu_367_p3 <= (tmp_22_fu_355_p2 & ap_const_lv3_0);
    tmp_29_fu_392_p2 <= std_logic_vector(unsigned(tmp_20_reg_526) + unsigned(tmp1_cast_fu_389_p1));
    tmp_30_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_409_p3),12));
    tmp_30_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_reg_553),64));
        tmp_32_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_421_p2),32));

    tmp_32_fu_327_p2 <= std_logic_vector(shift_left(unsigned(kk_reg_165),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_45_cast_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_367_p3),9));
    tmp_fu_231_p2 <= "1" when (unsigned(ii_reg_141) < unsigned(ap_const_lv5_1C)) else "0";
    tmp_i_i_41_fu_457_p2 <= "1" when (signed(pool_V_load_reg_596) > signed(agg_result_V_i_i_reg_188)) else "0";
    tmp_i_i_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_reg_199),64));
    tmp_s_fu_261_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_245_p1) - unsigned(p_shl5_cast_fu_257_p1));
    y_V_2_fu_462_p3 <= 
        pool_V_load_reg_596 when (tmp_i_i_41_fu_457_p2(0) = '1') else 
        agg_result_V_i_i_reg_188;
end behav;
