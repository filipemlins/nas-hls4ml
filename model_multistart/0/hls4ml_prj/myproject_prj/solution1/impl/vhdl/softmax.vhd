-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    res_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_V_ce0 : OUT STD_LOGIC;
    res_V_we0 : OUT STD_LOGIC;
    res_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of softmax is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv14_1FFF : STD_LOGIC_VECTOR (13 downto 0) := "01111111111111";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal exp_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table2_ce0 : STD_LOGIC;
    signal exp_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal invert_table3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table3_ce0 : STD_LOGIC;
    signal invert_table3_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_fu_178_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_473 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_4_fu_184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_478 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_V_reg_488 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exp_table2_load_reg_498 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal y_V_2_reg_503 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_reduce_2_fu_167_ap_ready : STD_LOGIC;
    signal grp_reduce_2_fu_167_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_3_cast_cast_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_cast_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_2_fu_227_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_521 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_8_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_526 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_res_V_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_V_load_reg_536 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_463_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_Result_s_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_274_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_2_reg_566 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal carry_1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_reg_572 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_300_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_demorgan_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_demorgan_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge192_demorgan_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge192_demorgan_reg_598 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_097_2_fu_455_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_097_2_reg_604 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal exp_res_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal exp_res_V_ce0 : STD_LOGIC;
    signal exp_res_V_we0 : STD_LOGIC;
    signal grp_reduce_2_fu_167_ap_start : STD_LOGIC;
    signal grp_reduce_2_fu_167_ap_idle : STD_LOGIC;
    signal grp_reduce_2_fu_167_x_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_reduce_2_fu_167_x_V_ce0 : STD_LOGIC;
    signal grp_reduce_2_fu_167_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal i_reg_145 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal i3_reg_156 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_reduce_2_fu_167_ap_start_reg : STD_LOGIC := '0';
    signal tmp_5_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_1_fu_255_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_11_cast_fu_271_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_11_fu_280_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_264_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_308_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_323_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_344_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_363_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_383_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_demorgan_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_197_not_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux_fu_441_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_3_fu_448_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_463_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component reduce_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        x_V_ce0 : OUT STD_LOGIC;
        x_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component myproject_mul_mul_18s_14s_32_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component softmax_exp_table2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component softmax_invert_table3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component softmax_exp_res_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table2_U : component softmax_exp_table2
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table2_address0,
        ce0 => exp_table2_ce0,
        q0 => exp_table2_q0);

    invert_table3_U : component softmax_invert_table3
    generic map (
        DataWidth => 14,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table3_address0,
        ce0 => invert_table3_ce0,
        q0 => invert_table3_q0);

    exp_res_V_U : component softmax_exp_res_V
    generic map (
        DataWidth => 18,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_res_V_address0,
        ce0 => exp_res_V_ce0,
        we0 => exp_res_V_we0,
        d0 => exp_table2_load_reg_498,
        q0 => exp_res_V_q0);

    grp_reduce_2_fu_167 : component reduce_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reduce_2_fu_167_ap_start,
        ap_done => grp_reduce_2_fu_167_ap_done,
        ap_idle => grp_reduce_2_fu_167_ap_idle,
        ap_ready => grp_reduce_2_fu_167_ap_ready,
        x_V_address0 => grp_reduce_2_fu_167_x_V_address0,
        x_V_ce0 => grp_reduce_2_fu_167_x_V_ce0,
        x_V_q0 => exp_res_V_q0,
        ap_return => grp_reduce_2_fu_167_ap_return);

    myproject_mul_mul_18s_14s_32_3_1_U94 : component myproject_mul_mul_18s_14s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 14,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_V_load_reg_536,
        din1 => grp_fu_463_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_463_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_7_fu_221_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_reduce_2_fu_167_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reduce_2_fu_167_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_fu_172_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_reduce_2_fu_167_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reduce_2_fu_167_ap_ready = ap_const_logic_1)) then 
                    grp_reduce_2_fu_167_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i3_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i3_reg_156 <= i_2_reg_521;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i3_reg_156 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_145 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_145 <= i_1_reg_473;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                Range1_all_ones_reg_582 <= Range1_all_ones_fu_332_p2;
                Range1_all_zeros_reg_587 <= Range1_all_zeros_fu_338_p2;
                brmerge192_demorgan_reg_598 <= brmerge192_demorgan_fu_377_p2;
                carry_1_reg_572 <= carry_1_fu_294_p2;
                p_Result_6_reg_577 <= p_Val2_2_fu_274_p2(13 downto 13);
                p_Val2_2_reg_566 <= p_Val2_2_fu_274_p2;
                phitmp_demorgan_reg_592 <= phitmp_demorgan_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                exp_res_V_load_reg_536 <= exp_res_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                exp_table2_load_reg_498 <= exp_table2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_473 <= i_1_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_2_reg_521 <= i_2_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                p_097_2_reg_604 <= p_097_2_fu_455_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                p_Result_s_reg_555 <= grp_fu_463_p2(30 downto 30);
                r_V_reg_546 <= grp_fu_463_p2;
                tmp_10_reg_561 <= grp_fu_463_p2(14 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_3_cast_cast_reg_513 <= tmp_3_cast_cast_fu_217_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_172_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_4_reg_478(3 downto 0) <= tmp_4_fu_184_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    tmp_8_reg_526(3 downto 0) <= tmp_8_fu_233_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_reduce_2_fu_167_ap_done = ap_const_logic_1))) then
                y_V_2_reg_503 <= grp_reduce_2_fu_167_ap_return(17 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                y_V_reg_488 <= data_V_q0(13 downto 4);
            end if;
        end if;
    end process;
    tmp_4_reg_478(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_8_reg_526(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_172_p2, ap_CS_fsm_state7, grp_reduce_2_fu_167_ap_done, ap_CS_fsm_state10, tmp_7_fu_221_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_172_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_reduce_2_fu_167_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_7_fu_221_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_332_p2 <= "1" when (tmp_9_fu_323_p4 = ap_const_lv3_7) else "0";
    Range1_all_zeros_fu_338_p2 <= "1" when (tmp_9_fu_323_p4 = ap_const_lv3_0) else "0";
    Range2_all_ones_fu_317_p2 <= "1" when (tmp_6_fu_308_p4 = ap_const_lv2_3) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10, tmp_7_fu_221_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_7_fu_221_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, tmp_7_fu_221_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_7_fu_221_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge192_demorgan_fu_377_p2 <= (p_Result_6_fu_300_p3 and deleted_ones_fu_363_p3);
    brmerge2_fu_425_p2 <= (underflow_fu_420_p2 or overflow_fu_404_p2);
    brmerge_fu_394_p2 <= (p_not_fu_388_p2 or p_Result_6_reg_577);
    carry_1_fu_294_p2 <= (rev_fu_288_p2 and p_Result_5_fu_264_p3);
    data_V_address0 <= tmp_4_fu_184_p1(4 - 1 downto 0);

    data_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    deleted_ones_fu_363_p3 <= 
        p_s_fu_357_p2 when (carry_1_fu_294_p2(0) = '1') else 
        Range1_all_ones_fu_332_p2;
    deleted_zeros_fu_383_p3 <= 
        Range1_all_ones_reg_582 when (carry_1_reg_572(0) = '1') else 
        Range1_all_zeros_reg_587;

    exp_res_V_address0_assign_proc : process(tmp_4_reg_478, ap_CS_fsm_state7, ap_CS_fsm_state10, tmp_8_fu_233_p1, grp_reduce_2_fu_167_x_V_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            exp_res_V_address0 <= tmp_8_fu_233_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            exp_res_V_address0 <= tmp_4_reg_478(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            exp_res_V_address0 <= grp_reduce_2_fu_167_x_V_address0;
        else 
            exp_res_V_address0 <= "XXXX";
        end if; 
    end process;


    exp_res_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, grp_reduce_2_fu_167_x_V_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            exp_res_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            exp_res_V_ce0 <= grp_reduce_2_fu_167_x_V_ce0;
        else 
            exp_res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_res_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            exp_res_V_we0 <= ap_const_logic_1;
        else 
            exp_res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_table2_address0 <= tmp_5_fu_199_p1(10 - 1 downto 0);

    exp_table2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            exp_table2_ce0 <= ap_const_logic_1;
        else 
            exp_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_463_p1 <= tmp_3_cast_cast_reg_513(14 - 1 downto 0);
    grp_reduce_2_fu_167_ap_start <= grp_reduce_2_fu_167_ap_start_reg;
    i_1_fu_178_p2 <= std_logic_vector(unsigned(i_reg_145) + unsigned(ap_const_lv4_1));
    i_2_fu_227_p2 <= std_logic_vector(unsigned(i3_reg_156) + unsigned(ap_const_lv4_1));
    invert_table3_address0 <= tmp_2_fu_213_p1(10 - 1 downto 0);

    invert_table3_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            invert_table3_ce0 <= ap_const_logic_1;
        else 
            invert_table3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_404_p2 <= (tmp_s_fu_399_p2 and brmerge_fu_394_p2);
    p_097_2_fu_455_p3 <= 
        p_mux_fu_441_p3 when (p_197_not_fu_436_p2(0) = '1') else 
        p_3_fu_448_p3;
    p_197_not_fu_436_p2 <= (tmp2_fu_431_p2 or phitmp_demorgan_reg_592);
    p_3_fu_448_p3 <= 
        ap_const_lv14_2000 when (underflow_fu_420_p2(0) = '1') else 
        p_Val2_2_reg_566;
    p_Result_5_fu_264_p3 <= r_V_reg_546(28 downto 28);
    p_Result_6_fu_300_p3 <= p_Val2_2_fu_274_p2(13 downto 13);
    p_Val2_1_fu_255_p4 <= r_V_reg_546(28 downto 15);
    p_Val2_2_fu_274_p2 <= std_logic_vector(unsigned(p_Val2_1_fu_255_p4) + unsigned(tmp_11_cast_fu_271_p1));
    p_mux_fu_441_p3 <= 
        ap_const_lv14_1FFF when (brmerge2_fu_425_p2(0) = '1') else 
        p_Val2_2_reg_566;
    p_not_fu_388_p2 <= (deleted_zeros_fu_383_p3 xor ap_const_lv1_1);
    p_s_fu_357_p2 <= (rev1_fu_351_p2 and Range2_all_ones_fu_317_p2);
    phitmp_demorgan_fu_371_p2 <= (carry_1_fu_294_p2 and Range1_all_ones_fu_332_p2);
    res_V_address0 <= tmp_8_reg_526(4 - 1 downto 0);

    res_V_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            res_V_ce0 <= ap_const_logic_1;
        else 
            res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_d0 <= p_097_2_reg_604;

    res_V_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            res_V_we0 <= ap_const_logic_1;
        else 
            res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rev1_fu_351_p2 <= (tmp_13_fu_344_p3 xor ap_const_lv1_1);
    rev_fu_288_p2 <= (tmp_11_fu_280_p3 xor ap_const_lv1_1);
    tmp1_demorgan_fu_410_p2 <= (phitmp_demorgan_reg_592 or brmerge192_demorgan_reg_598);
    tmp1_fu_414_p2 <= (tmp1_demorgan_fu_410_p2 xor ap_const_lv1_1);
    tmp2_fu_431_p2 <= (tmp_s_fu_399_p2 or brmerge192_demorgan_reg_598);
    tmp_11_cast_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_561),14));
    tmp_11_fu_280_p3 <= p_Val2_2_fu_274_p2(13 downto 13);
    tmp_13_fu_344_p3 <= r_V_reg_546(29 downto 29);
    tmp_2_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_reg_503),64));
        tmp_3_cast_cast_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table3_q0),32));

    tmp_4_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_145),64));
    tmp_5_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_488),64));
    tmp_6_fu_308_p4 <= r_V_reg_546(31 downto 30);
    tmp_7_fu_221_p2 <= "1" when (i3_reg_156 = ap_const_lv4_A) else "0";
    tmp_8_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_156),64));
    tmp_9_fu_323_p4 <= r_V_reg_546(31 downto 29);
    tmp_fu_172_p2 <= "1" when (i_reg_145 = ap_const_lv4_A) else "0";
    tmp_s_fu_399_p2 <= (p_Result_s_reg_555 xor ap_const_lv1_1);
    underflow_fu_420_p2 <= (tmp1_fu_414_p2 and p_Result_s_reg_555);
end behav;
