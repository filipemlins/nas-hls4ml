// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_large_rf_gt_ni_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] data_V_address0;
output   data_V_ce0;
input  [12:0] data_V_q0;
output  [6:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [13:0] res_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg res_V_ce0;
reg res_V_we0;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] outidx4_address0;
reg    outidx4_ce0;
wire   [4:0] outidx4_q0;
wire   [11:0] w14_V_address0;
reg    w14_V_ce0;
wire   [45:0] w14_V_q0;
wire   [13:0] acc_V_q0;
reg  signed [13:0] reg_273;
wire    ap_CS_fsm_state29;
wire    grp_product_fu_267_ap_ready;
wire    grp_product_fu_267_ap_done;
wire    ap_CS_fsm_state35;
wire   [6:0] iacc_2_fu_284_p2;
wire    ap_CS_fsm_state2;
wire   [13:0] w_index_cast_fu_295_p1;
reg   [13:0] w_index_cast_reg_546;
wire    ap_CS_fsm_state3;
wire   [11:0] ir_fu_305_p2;
reg   [11:0] ir_reg_554;
wire   [0:0] exitcond_fu_299_p2;
reg   [4:0] out_index_reg_564;
wire    ap_CS_fsm_state4;
wire   [6:0] out_index_cast_fu_321_p1;
wire    ap_CS_fsm_state5;
wire   [13:0] extLd_fu_324_p1;
reg   [13:0] extLd_reg_579;
wire   [0:0] tmp_46_fu_328_p3;
reg   [0:0] tmp_46_reg_584;
wire    ap_CS_fsm_state6;
wire   [2:0] im_2_fu_336_p2;
reg   [2:0] im_2_reg_588;
wire    ap_CS_fsm_state22;
wire   [13:0] grp_fu_342_p2;
reg   [13:0] tmp_30_reg_598;
wire    ap_CS_fsm_state23;
wire   [29:0] grp_fu_532_p2;
reg   [29:0] mul_reg_603;
wire    ap_CS_fsm_state24;
reg   [45:0] w14_V_load_reg_614;
wire    ap_CS_fsm_state25;
wire   [5:0] tmp_50_fu_394_p2;
reg   [5:0] tmp_50_reg_619;
wire    ap_CS_fsm_state26;
wire   [13:0] tmp_53_fu_412_p1;
reg   [13:0] tmp_53_reg_634;
wire    ap_CS_fsm_state27;
reg   [6:0] acc_V_addr_4_reg_639;
wire    ap_CS_fsm_state28;
wire   [13:0] grp_product_fu_267_ap_return;
reg  signed [13:0] p_Val2_14_reg_644;
reg   [0:0] p_Result_s_reg_650;
wire    ap_CS_fsm_state30;
wire   [13:0] p_Val2_16_fu_442_p2;
reg   [13:0] p_Val2_16_reg_657;
reg   [0:0] p_Result_10_reg_662;
wire   [0:0] overflow_fu_460_p2;
reg   [0:0] overflow_reg_669;
wire    ap_CS_fsm_state31;
wire   [0:0] underflow_fu_470_p2;
reg   [0:0] underflow_reg_673;
wire   [0:0] brmerge9_fu_475_p2;
reg   [0:0] brmerge9_reg_677;
wire   [13:0] w_index_2_fu_479_p2;
wire    ap_CS_fsm_state32;
wire   [6:0] out_index_2_fu_491_p2;
wire   [0:0] tmp_60_fu_485_p2;
wire   [31:0] in_index_2_fu_497_p2;
reg   [31:0] in_index_2_reg_694;
wire   [31:0] p_s_fu_508_p3;
wire    ap_CS_fsm_state33;
wire   [6:0] ires_2_fu_521_p2;
reg   [6:0] ires_2_reg_708;
wire    ap_CS_fsm_state34;
wire   [63:0] tmp_57_fu_527_p1;
reg   [63:0] tmp_57_reg_713;
wire   [0:0] tmp_56_fu_515_p2;
reg   [6:0] acc_V_address0;
reg    acc_V_ce0;
reg    acc_V_we0;
reg   [13:0] acc_V_d0;
wire    grp_product_fu_267_ap_start;
wire    grp_product_fu_267_ap_idle;
reg   [6:0] iacc_reg_191;
wire   [0:0] exitcond7_fu_278_p2;
reg   [11:0] w_index_reg_202;
reg  signed [31:0] in_index_reg_213;
reg   [2:0] im_reg_225;
reg   [6:0] out_index7_reg_236;
reg   [13:0] w_index7_reg_246;
reg   [6:0] ires_reg_256;
wire    ap_CS_fsm_state36;
reg    grp_product_fu_267_ap_start_reg;
wire   [63:0] tmp_fu_290_p1;
wire   [63:0] tmp_s_fu_311_p1;
wire  signed [63:0] tmp_55_fu_316_p1;
wire   [63:0] tmp_32_fu_352_p1;
wire   [63:0] tmp_58_fu_416_p1;
wire   [12:0] grp_fu_342_p1;
wire   [2:0] tmp_6_fu_356_p4;
wire   [1:0] tmp_47_fu_365_p4;
wire   [3:0] p_shl8_fu_374_p3;
wire   [5:0] tmp_48_fu_382_p3;
wire   [5:0] tmp_49_fu_390_p1;
wire  signed [55:0] grp_fu_406_p0;
wire   [55:0] grp_fu_406_p1;
wire   [55:0] grp_fu_406_p2;
wire  signed [14:0] lhs_V_fu_421_p1;
wire  signed [14:0] rhs_V_fu_425_p1;
wire   [14:0] ret_V_fu_428_p2;
wire   [0:0] tmp_21_fu_455_p2;
wire   [0:0] tmp_59_fu_465_p2;
wire   [0:0] tmp_61_fu_503_p2;
wire   [13:0] grp_fu_532_p0;
wire   [15:0] grp_fu_532_p1;
reg    grp_fu_342_ap_start;
wire    grp_fu_342_ap_done;
reg   [35:0] ap_NS_fsm;
wire   [29:0] grp_fu_532_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
#0 grp_product_fu_267_ap_start_reg = 1'b0;
end

dense_large_rf_gt_ni_3_outidx4 #(
    .DataWidth( 5 ),
    .AddressRange( 2520 ),
    .AddressWidth( 12 ))
outidx4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(outidx4_address0),
    .ce0(outidx4_ce0),
    .q0(outidx4_q0)
);

dense_large_rf_gt_ni_3_w14_V #(
    .DataWidth( 46 ),
    .AddressRange( 2520 ),
    .AddressWidth( 12 ))
w14_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w14_V_address0),
    .ce0(w14_V_ce0),
    .q0(w14_V_q0)
);

dense_large_rf_gt_ni_3_acc_V #(
    .DataWidth( 14 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
acc_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_V_address0),
    .ce0(acc_V_ce0),
    .we0(acc_V_we0),
    .d0(acc_V_d0),
    .q0(acc_V_q0)
);

product grp_product_fu_267(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_product_fu_267_ap_start),
    .ap_done(grp_product_fu_267_ap_done),
    .ap_idle(grp_product_fu_267_ap_idle),
    .ap_ready(grp_product_fu_267_ap_ready),
    .a_V(extLd_reg_579),
    .w_V(tmp_53_reg_634),
    .ap_return(grp_product_fu_267_ap_return)
);

myproject_urem_14ns_13ns_14_18_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 14 ))
myproject_urem_14ns_13ns_14_18_seq_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_342_ap_start),
    .done(grp_fu_342_ap_done),
    .din0(w_index7_reg_246),
    .din1(grp_fu_342_p1),
    .ce(1'b1),
    .dout(grp_fu_342_p2)
);

myproject_lshr_56s_6ns_56_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 1 ),
    .din0_WIDTH( 56 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 56 ))
myproject_lshr_56s_6ns_56_2_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_406_p0),
    .din1(grp_fu_406_p1),
    .ce(1'b1),
    .dout(grp_fu_406_p2)
);

myproject_mul_mul_14ns_16ns_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
myproject_mul_mul_14ns_16ns_30_3_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_532_p0),
    .din1(grp_fu_532_p1),
    .ce(1'b1),
    .dout(grp_fu_532_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_product_fu_267_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state28)) begin
            grp_product_fu_267_ap_start_reg <= 1'b1;
        end else if ((grp_product_fu_267_ap_ready == 1'b1)) begin
            grp_product_fu_267_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iacc_reg_191 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_278_p2 == 1'd0))) begin
        iacc_reg_191 <= iacc_2_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (tmp_60_fu_485_p2 == 1'd0) & (tmp_46_reg_584 == 1'd0))) begin
        im_reg_225 <= im_2_reg_588;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        im_reg_225 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        in_index_reg_213 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        in_index_reg_213 <= p_s_fu_508_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_299_p2 == 1'd1))) begin
        ires_reg_256 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        ires_reg_256 <= ires_2_reg_708;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (tmp_60_fu_485_p2 == 1'd0) & (tmp_46_reg_584 == 1'd0))) begin
        out_index7_reg_236 <= out_index_2_fu_491_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_index7_reg_236 <= out_index_cast_fu_321_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (tmp_60_fu_485_p2 == 1'd0) & (tmp_46_reg_584 == 1'd0))) begin
        w_index7_reg_246 <= w_index_2_fu_479_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_index7_reg_246 <= w_index_cast_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        w_index_reg_202 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        w_index_reg_202 <= ir_reg_554;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        acc_V_addr_4_reg_639 <= tmp_58_fu_416_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        brmerge9_reg_677 <= brmerge9_fu_475_p2;
        overflow_reg_669 <= overflow_fu_460_p2;
        underflow_reg_673 <= underflow_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        extLd_reg_579[12 : 0] <= extLd_fu_324_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        im_2_reg_588 <= im_2_fu_336_p2;
        tmp_46_reg_584 <= im_reg_225[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & ((tmp_60_fu_485_p2 == 1'd1) | (tmp_46_reg_584 == 1'd1)))) begin
        in_index_2_reg_694 <= in_index_2_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ir_reg_554 <= ir_fu_305_p2;
        w_index_cast_reg_546[11 : 0] <= w_index_cast_fu_295_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ires_2_reg_708 <= ires_2_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_reg_603 <= grp_fu_532_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_index_reg_564 <= outidx4_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        p_Result_10_reg_662 <= p_Val2_16_fu_442_p2[32'd13];
        p_Result_s_reg_650 <= ret_V_fu_428_p2[32'd14];
        p_Val2_16_reg_657 <= p_Val2_16_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_product_fu_267_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        p_Val2_14_reg_644 <= grp_product_fu_267_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) | ((grp_product_fu_267_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29)))) begin
        reg_273 <= acc_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_30_reg_598 <= grp_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_50_reg_619[5 : 1] <= tmp_50_fu_394_p2[5 : 1];
        w14_V_load_reg_614 <= w14_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_53_reg_634 <= tmp_53_fu_412_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (tmp_56_fu_515_p2 == 1'd0))) begin
        tmp_57_reg_713[6 : 0] <= tmp_57_fu_527_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        acc_V_address0 = tmp_57_fu_527_p1;
    end else if (((1'b1 == ap_CS_fsm_state31) | ((brmerge9_reg_677 == 1'd1) & (overflow_reg_669 == 1'd1) & (1'b1 == ap_CS_fsm_state32) & (tmp_46_reg_584 == 1'd0)) | ((brmerge9_reg_677 == 1'd1) & (underflow_reg_673 == 1'd1) & (1'b1 == ap_CS_fsm_state32) & (overflow_reg_669 == 1'd0) & (tmp_46_reg_584 == 1'd0)))) begin
        acc_V_address0 = acc_V_addr_4_reg_639;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        acc_V_address0 = tmp_58_fu_416_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_V_address0 = tmp_fu_290_p1;
    end else begin
        acc_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state2) | ((brmerge9_reg_677 == 1'd1) & (overflow_reg_669 == 1'd1) & (1'b1 == ap_CS_fsm_state32) & (tmp_46_reg_584 == 1'd0)) | ((brmerge9_reg_677 == 1'd1) & (underflow_reg_673 == 1'd1) & (1'b1 == ap_CS_fsm_state32) & (overflow_reg_669 == 1'd0) & (tmp_46_reg_584 == 1'd0)))) begin
        acc_V_ce0 = 1'b1;
    end else begin
        acc_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((brmerge9_reg_677 == 1'd1) & (overflow_reg_669 == 1'd1) & (1'b1 == ap_CS_fsm_state32) & (tmp_46_reg_584 == 1'd0))) begin
        acc_V_d0 = 14'd8191;
    end else if (((brmerge9_reg_677 == 1'd1) & (underflow_reg_673 == 1'd1) & (1'b1 == ap_CS_fsm_state32) & (overflow_reg_669 == 1'd0) & (tmp_46_reg_584 == 1'd0))) begin
        acc_V_d0 = 14'd8192;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        acc_V_d0 = p_Val2_16_reg_657;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_V_d0 = 14'd0;
    end else begin
        acc_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | ((brmerge9_reg_677 == 1'd1) & (overflow_reg_669 == 1'd1) & (1'b1 == ap_CS_fsm_state32) & (tmp_46_reg_584 == 1'd0)) | ((brmerge9_reg_677 == 1'd1) & (underflow_reg_673 == 1'd1) & (1'b1 == ap_CS_fsm_state32) & (overflow_reg_669 == 1'd0) & (tmp_46_reg_584 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_278_p2 == 1'd0)))) begin
        acc_V_we0 = 1'b1;
    end else begin
        acc_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_56_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_56_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_46_fu_328_p3 == 1'd0))) begin
        grp_fu_342_ap_start = 1'b1;
    end else begin
        grp_fu_342_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        outidx4_ce0 = 1'b1;
    end else begin
        outidx4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        w14_V_ce0 = 1'b1;
    end else begin
        w14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond7_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_299_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_46_fu_328_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((grp_product_fu_267_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (tmp_60_fu_485_p2 == 1'd0) & (tmp_46_reg_584 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state34 : begin
            if (((tmp_56_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign brmerge9_fu_475_p2 = (p_Result_s_reg_650 ^ p_Result_10_reg_662);

assign data_V_address0 = tmp_55_fu_316_p1;

assign exitcond7_fu_278_p2 = ((iacc_reg_191 == 7'd84) ? 1'b1 : 1'b0);

assign exitcond_fu_299_p2 = ((w_index_reg_202 == 12'd2520) ? 1'b1 : 1'b0);

assign extLd_fu_324_p1 = data_V_q0;

assign grp_fu_342_p1 = 14'd2520;

assign grp_fu_406_p0 = $signed(w14_V_load_reg_614);

assign grp_fu_406_p1 = tmp_50_reg_619;

assign grp_fu_532_p0 = grp_fu_532_p00;

assign grp_fu_532_p00 = w_index7_reg_246;

assign grp_fu_532_p1 = 30'd26631;

assign grp_product_fu_267_ap_start = grp_product_fu_267_ap_start_reg;

assign iacc_2_fu_284_p2 = (iacc_reg_191 + 7'd1);

assign im_2_fu_336_p2 = (im_reg_225 + 3'd1);

assign in_index_2_fu_497_p2 = ($signed(in_index_reg_213) + $signed(32'd1));

assign ir_fu_305_p2 = (w_index_reg_202 + 12'd1);

assign ires_2_fu_521_p2 = (ires_reg_256 + 7'd1);

assign lhs_V_fu_421_p1 = reg_273;

assign out_index_2_fu_491_p2 = (out_index7_reg_236 + 7'd21);

assign out_index_cast_fu_321_p1 = out_index_reg_564;

assign outidx4_address0 = tmp_s_fu_311_p1;

assign overflow_fu_460_p2 = (tmp_21_fu_455_p2 & p_Result_10_reg_662);

assign p_Val2_16_fu_442_p2 = ($signed(reg_273) + $signed(p_Val2_14_reg_644));

assign p_s_fu_508_p3 = ((tmp_61_fu_503_p2[0:0] === 1'b1) ? 32'd0 : in_index_2_reg_694);

assign p_shl8_fu_374_p3 = {{tmp_6_fu_356_p4}, {1'd0}};

assign res_V_address0 = tmp_57_reg_713;

assign res_V_d0 = reg_273;

assign ret_V_fu_428_p2 = ($signed(lhs_V_fu_421_p1) + $signed(rhs_V_fu_425_p1));

assign rhs_V_fu_425_p1 = p_Val2_14_reg_644;

assign tmp_21_fu_455_p2 = (p_Result_s_reg_650 ^ 1'd1);

assign tmp_32_fu_352_p1 = tmp_30_reg_598;

assign tmp_46_fu_328_p3 = im_reg_225[32'd2];

assign tmp_47_fu_365_p4 = {{mul_reg_603[27:26]}};

assign tmp_48_fu_382_p3 = {{tmp_47_fu_365_p4}, {4'd0}};

assign tmp_49_fu_390_p1 = p_shl8_fu_374_p3;

assign tmp_50_fu_394_p2 = (tmp_48_fu_382_p3 - tmp_49_fu_390_p1);

assign tmp_53_fu_412_p1 = grp_fu_406_p2[13:0];

assign tmp_55_fu_316_p1 = in_index_reg_213;

assign tmp_56_fu_515_p2 = ((ires_reg_256 == 7'd84) ? 1'b1 : 1'b0);

assign tmp_57_fu_527_p1 = ires_reg_256;

assign tmp_58_fu_416_p1 = out_index7_reg_236;

assign tmp_59_fu_465_p2 = (p_Result_10_reg_662 ^ 1'd1);

assign tmp_60_fu_485_p2 = ((w_index_2_fu_479_p2 > 14'd10079) ? 1'b1 : 1'b0);

assign tmp_61_fu_503_p2 = (($signed(in_index_2_reg_694) > $signed(32'd119)) ? 1'b1 : 1'b0);

assign tmp_6_fu_356_p4 = {{mul_reg_603[28:26]}};

assign tmp_fu_290_p1 = iacc_reg_191;

assign tmp_s_fu_311_p1 = w_index_reg_202;

assign underflow_fu_470_p2 = (tmp_59_fu_465_p2 & p_Result_s_reg_650);

assign w14_V_address0 = tmp_32_fu_352_p1;

assign w_index_2_fu_479_p2 = (w_index7_reg_246 + 14'd2520);

assign w_index_cast_fu_295_p1 = w_index_reg_202;

always @ (posedge ap_clk) begin
    w_index_cast_reg_546[13:12] <= 2'b00;
    extLd_reg_579[13] <= 1'b0;
    tmp_50_reg_619[0] <= 1'b0;
    tmp_57_reg_713[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense_large_rf_gt_ni_3
