// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_large_rf_gt_ni_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0
);

parameter    ap_ST_fsm_state1 = 44'd1;
parameter    ap_ST_fsm_state2 = 44'd2;
parameter    ap_ST_fsm_state3 = 44'd4;
parameter    ap_ST_fsm_state4 = 44'd8;
parameter    ap_ST_fsm_state5 = 44'd16;
parameter    ap_ST_fsm_state6 = 44'd32;
parameter    ap_ST_fsm_state7 = 44'd64;
parameter    ap_ST_fsm_state8 = 44'd128;
parameter    ap_ST_fsm_state9 = 44'd256;
parameter    ap_ST_fsm_state10 = 44'd512;
parameter    ap_ST_fsm_state11 = 44'd1024;
parameter    ap_ST_fsm_state12 = 44'd2048;
parameter    ap_ST_fsm_state13 = 44'd4096;
parameter    ap_ST_fsm_state14 = 44'd8192;
parameter    ap_ST_fsm_state15 = 44'd16384;
parameter    ap_ST_fsm_state16 = 44'd32768;
parameter    ap_ST_fsm_state17 = 44'd65536;
parameter    ap_ST_fsm_state18 = 44'd131072;
parameter    ap_ST_fsm_state19 = 44'd262144;
parameter    ap_ST_fsm_state20 = 44'd524288;
parameter    ap_ST_fsm_state21 = 44'd1048576;
parameter    ap_ST_fsm_state22 = 44'd2097152;
parameter    ap_ST_fsm_state23 = 44'd4194304;
parameter    ap_ST_fsm_state24 = 44'd8388608;
parameter    ap_ST_fsm_state25 = 44'd16777216;
parameter    ap_ST_fsm_state26 = 44'd33554432;
parameter    ap_ST_fsm_state27 = 44'd67108864;
parameter    ap_ST_fsm_state28 = 44'd134217728;
parameter    ap_ST_fsm_state29 = 44'd268435456;
parameter    ap_ST_fsm_state30 = 44'd536870912;
parameter    ap_ST_fsm_state31 = 44'd1073741824;
parameter    ap_ST_fsm_state32 = 44'd2147483648;
parameter    ap_ST_fsm_state33 = 44'd4294967296;
parameter    ap_ST_fsm_state34 = 44'd8589934592;
parameter    ap_ST_fsm_state35 = 44'd17179869184;
parameter    ap_ST_fsm_state36 = 44'd34359738368;
parameter    ap_ST_fsm_state37 = 44'd68719476736;
parameter    ap_ST_fsm_state38 = 44'd137438953472;
parameter    ap_ST_fsm_state39 = 44'd274877906944;
parameter    ap_ST_fsm_state40 = 44'd549755813888;
parameter    ap_ST_fsm_state41 = 44'd1099511627776;
parameter    ap_ST_fsm_state42 = 44'd2199023255552;
parameter    ap_ST_fsm_state43 = 44'd4398046511104;
parameter    ap_ST_fsm_state44 = 44'd8796093022208;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] data_V_address0;
output   data_V_ce0;
input  [13:0] data_V_q0;
output  [6:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [13:0] res_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg res_V_ce0;
reg res_V_we0;

(* fsm_encoding = "none" *) reg   [43:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] outidx5_address0;
reg    outidx5_ce0;
wire   [1:0] outidx5_q0;
wire   [11:0] w11_V_address0;
reg    w11_V_ce0;
wire   [408:0] w11_V_q0;
wire   [13:0] acc_V_q0;
reg  signed [13:0] reg_267;
wire    ap_CS_fsm_state36;
wire    grp_product_fu_261_ap_ready;
wire    grp_product_fu_261_ap_done;
wire    ap_CS_fsm_state43;
wire   [6:0] iacc_1_fu_278_p2;
wire    ap_CS_fsm_state2;
wire   [16:0] w_index_cast_fu_289_p1;
reg   [16:0] w_index_cast_reg_524;
wire    ap_CS_fsm_state3;
wire   [11:0] ir_fu_299_p2;
reg   [11:0] ir_reg_532;
wire   [0:0] exitcond_fu_293_p2;
reg   [1:0] out_index_reg_542;
wire    ap_CS_fsm_state4;
wire   [6:0] out_index_cast_fu_315_p1;
wire    ap_CS_fsm_state5;
reg   [13:0] data_V_load_reg_557;
wire   [0:0] tmp_49_fu_318_p2;
reg   [0:0] tmp_49_reg_562;
wire    ap_CS_fsm_state6;
wire   [4:0] im_1_fu_324_p2;
reg   [4:0] im_1_reg_566;
wire    ap_CS_fsm_state25;
wire   [16:0] grp_fu_330_p2;
reg   [16:0] tmp_39_reg_576;
wire    ap_CS_fsm_state26;
wire   [35:0] grp_fu_510_p2;
reg   [35:0] mul_reg_581;
wire    ap_CS_fsm_state27;
reg   [408:0] w11_V_load_reg_591;
wire    ap_CS_fsm_state28;
wire   [8:0] tmp_43_fu_373_p2;
reg   [8:0] tmp_43_reg_596;
wire    ap_CS_fsm_state29;
wire   [13:0] tmp_42_fu_391_p1;
reg   [13:0] tmp_42_reg_611;
wire    ap_CS_fsm_state34;
reg   [6:0] acc_V_addr_2_reg_616;
wire    ap_CS_fsm_state35;
wire   [13:0] grp_product_fu_261_ap_return;
reg  signed [13:0] p_Val2_11_reg_621;
reg   [0:0] p_Result_s_reg_627;
wire    ap_CS_fsm_state37;
wire   [13:0] p_Val2_13_fu_421_p2;
reg   [13:0] p_Val2_13_reg_634;
reg   [0:0] p_Result_9_reg_639;
wire   [0:0] overflow_fu_439_p2;
reg   [0:0] overflow_reg_646;
wire    ap_CS_fsm_state38;
wire   [0:0] underflow_fu_449_p2;
reg   [0:0] underflow_reg_650;
wire   [0:0] brmerge1_fu_454_p2;
reg   [0:0] brmerge1_reg_654;
wire   [16:0] w_index_1_fu_458_p2;
reg   [16:0] w_index_1_reg_658;
wire    ap_CS_fsm_state39;
wire   [6:0] out_index_1_fu_469_p2;
wire    ap_CS_fsm_state40;
wire   [0:0] tmp_53_fu_464_p2;
wire   [31:0] in_index_1_fu_475_p2;
reg   [31:0] in_index_1_reg_672;
wire   [31:0] p_s_fu_486_p3;
wire    ap_CS_fsm_state41;
wire   [6:0] ires_1_fu_499_p2;
reg   [6:0] ires_1_reg_686;
wire    ap_CS_fsm_state42;
wire   [63:0] tmp_50_fu_505_p1;
reg   [63:0] tmp_50_reg_691;
wire   [0:0] tmp_48_fu_493_p2;
reg   [6:0] acc_V_address0;
reg    acc_V_ce0;
reg    acc_V_we0;
reg   [13:0] acc_V_d0;
wire    grp_product_fu_261_ap_start;
wire    grp_product_fu_261_ap_idle;
reg   [6:0] iacc_reg_185;
wire   [0:0] exitcond8_fu_272_p2;
reg   [11:0] w_index_reg_196;
reg  signed [31:0] in_index_reg_207;
reg   [4:0] im_reg_219;
reg   [6:0] out_index9_reg_230;
reg   [16:0] w_index9_reg_240;
reg   [6:0] ires_reg_250;
wire    ap_CS_fsm_state44;
reg    grp_product_fu_261_ap_start_reg;
wire   [63:0] tmp_fu_284_p1;
wire   [63:0] tmp_s_fu_305_p1;
wire  signed [63:0] tmp_47_fu_310_p1;
wire   [63:0] tmp_41_fu_340_p1;
wire   [63:0] tmp_51_fu_395_p1;
wire   [12:0] grp_fu_330_p1;
wire   [4:0] tmp_4_fu_344_p4;
wire   [5:0] p_shl8_fu_361_p3;
wire   [8:0] p_shl_fu_353_p3;
wire   [8:0] p_shl8_cast_fu_369_p1;
wire  signed [419:0] grp_fu_385_p0;
wire   [419:0] grp_fu_385_p1;
wire   [419:0] grp_fu_385_p2;
wire  signed [14:0] rhs_V_fu_404_p1;
wire  signed [14:0] lhs_V_fu_400_p1;
wire   [14:0] ret_V_fu_407_p2;
wire   [0:0] tmp_22_fu_434_p2;
wire   [0:0] tmp_52_fu_444_p2;
wire   [0:0] tmp_54_fu_481_p2;
wire   [18:0] grp_fu_510_p0;
wire   [16:0] grp_fu_510_p1;
reg    grp_fu_330_ap_start;
wire    grp_fu_330_ap_done;
reg   [43:0] ap_NS_fsm;
wire   [35:0] grp_fu_510_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 44'd1;
#0 grp_product_fu_261_ap_start_reg = 1'b0;
end

dense_large_rf_gt_ni_4_outidx5 #(
    .DataWidth( 2 ),
    .AddressRange( 2304 ),
    .AddressWidth( 12 ))
outidx5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(outidx5_address0),
    .ce0(outidx5_ce0),
    .q0(outidx5_q0)
);

dense_large_rf_gt_ni_4_w11_V #(
    .DataWidth( 409 ),
    .AddressRange( 2304 ),
    .AddressWidth( 12 ))
w11_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w11_V_address0),
    .ce0(w11_V_ce0),
    .q0(w11_V_q0)
);

dense_large_rf_gt_ni_4_acc_V #(
    .DataWidth( 14 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
acc_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_V_address0),
    .ce0(acc_V_ce0),
    .we0(acc_V_we0),
    .d0(acc_V_d0),
    .q0(acc_V_q0)
);

product grp_product_fu_261(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_product_fu_261_ap_start),
    .ap_done(grp_product_fu_261_ap_done),
    .ap_idle(grp_product_fu_261_ap_idle),
    .ap_ready(grp_product_fu_261_ap_ready),
    .a_V(data_V_load_reg_557),
    .w_V(tmp_42_reg_611),
    .ap_return(grp_product_fu_261_ap_return)
);

myproject_urem_17ns_13ns_17_21_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 17 ))
myproject_urem_17ns_13ns_17_21_seq_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_330_ap_start),
    .done(grp_fu_330_ap_done),
    .din0(w_index9_reg_240),
    .din1(grp_fu_330_p1),
    .ce(1'b1),
    .dout(grp_fu_330_p2)
);

myproject_lshr_420s_9ns_420_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .OP( 1 ),
    .din0_WIDTH( 420 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 420 ))
myproject_lshr_420s_9ns_420_6_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_385_p0),
    .din1(grp_fu_385_p1),
    .ce(1'b1),
    .dout(grp_fu_385_p2)
);

myproject_mul_mul_19ns_17ns_36_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 36 ))
myproject_mul_mul_19ns_17ns_36_3_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_510_p0),
    .din1(grp_fu_510_p1),
    .ce(1'b1),
    .dout(grp_fu_510_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_product_fu_261_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state35)) begin
            grp_product_fu_261_ap_start_reg <= 1'b1;
        end else if ((grp_product_fu_261_ap_ready == 1'b1)) begin
            grp_product_fu_261_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iacc_reg_185 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_272_p2 == 1'd0))) begin
        iacc_reg_185 <= iacc_1_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (tmp_49_reg_562 == 1'd1) & (tmp_53_fu_464_p2 == 1'd0))) begin
        im_reg_219 <= im_1_reg_566;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        im_reg_219 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        in_index_reg_207 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        in_index_reg_207 <= p_s_fu_486_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_293_p2 == 1'd1))) begin
        ires_reg_250 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        ires_reg_250 <= ires_1_reg_686;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (tmp_49_reg_562 == 1'd1) & (tmp_53_fu_464_p2 == 1'd0))) begin
        out_index9_reg_230 <= out_index_1_fu_469_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_index9_reg_230 <= out_index_cast_fu_315_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (tmp_49_reg_562 == 1'd1) & (tmp_53_fu_464_p2 == 1'd0))) begin
        w_index9_reg_240 <= w_index_1_reg_658;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_index9_reg_240 <= w_index_cast_reg_524;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        w_index_reg_196 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        w_index_reg_196 <= ir_reg_532;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        acc_V_addr_2_reg_616 <= tmp_51_fu_395_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        brmerge1_reg_654 <= brmerge1_fu_454_p2;
        overflow_reg_646 <= overflow_fu_439_p2;
        underflow_reg_650 <= underflow_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_V_load_reg_557 <= data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        im_1_reg_566 <= im_1_fu_324_p2;
        tmp_49_reg_562 <= tmp_49_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & ((tmp_53_fu_464_p2 == 1'd1) | (tmp_49_reg_562 == 1'd0)))) begin
        in_index_1_reg_672 <= in_index_1_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ir_reg_532 <= ir_fu_299_p2;
        w_index_cast_reg_524[11 : 0] <= w_index_cast_fu_289_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ires_1_reg_686 <= ires_1_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        mul_reg_581 <= grp_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_index_reg_542 <= outidx5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        p_Result_9_reg_639 <= p_Val2_13_fu_421_p2[32'd13];
        p_Result_s_reg_627 <= ret_V_fu_407_p2[32'd14];
        p_Val2_13_reg_634 <= p_Val2_13_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_product_fu_261_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
        p_Val2_11_reg_621 <= grp_product_fu_261_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | ((grp_product_fu_261_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state36)))) begin
        reg_267 <= acc_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_39_reg_576 <= grp_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        tmp_42_reg_611 <= tmp_42_fu_391_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_43_reg_596[8 : 1] <= tmp_43_fu_373_p2[8 : 1];
        w11_V_load_reg_591 <= w11_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (tmp_48_fu_493_p2 == 1'd0))) begin
        tmp_50_reg_691[6 : 0] <= tmp_50_fu_505_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        w_index_1_reg_658 <= w_index_1_fu_458_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        acc_V_address0 = tmp_50_fu_505_p1;
    end else if (((1'b1 == ap_CS_fsm_state38) | ((brmerge1_reg_654 == 1'd1) & (overflow_reg_646 == 1'd1) & (1'b1 == ap_CS_fsm_state39)) | ((brmerge1_reg_654 == 1'd1) & (underflow_reg_650 == 1'd1) & (1'b1 == ap_CS_fsm_state39) & (overflow_reg_646 == 1'd0)))) begin
        acc_V_address0 = acc_V_addr_2_reg_616;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        acc_V_address0 = tmp_51_fu_395_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_V_address0 = tmp_fu_284_p1;
    end else begin
        acc_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state2) | ((brmerge1_reg_654 == 1'd1) & (overflow_reg_646 == 1'd1) & (1'b1 == ap_CS_fsm_state39)) | ((brmerge1_reg_654 == 1'd1) & (underflow_reg_650 == 1'd1) & (1'b1 == ap_CS_fsm_state39) & (overflow_reg_646 == 1'd0)))) begin
        acc_V_ce0 = 1'b1;
    end else begin
        acc_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((brmerge1_reg_654 == 1'd1) & (overflow_reg_646 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        acc_V_d0 = 14'd8191;
    end else if (((brmerge1_reg_654 == 1'd1) & (underflow_reg_650 == 1'd1) & (1'b1 == ap_CS_fsm_state39) & (overflow_reg_646 == 1'd0))) begin
        acc_V_d0 = 14'd8192;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        acc_V_d0 = p_Val2_13_reg_634;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_V_d0 = 14'd0;
    end else begin
        acc_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | ((brmerge1_reg_654 == 1'd1) & (overflow_reg_646 == 1'd1) & (1'b1 == ap_CS_fsm_state39)) | ((brmerge1_reg_654 == 1'd1) & (underflow_reg_650 == 1'd1) & (1'b1 == ap_CS_fsm_state39) & (overflow_reg_646 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_272_p2 == 1'd0)))) begin
        acc_V_we0 = 1'b1;
    end else begin
        acc_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_48_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_48_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_49_fu_318_p2 == 1'd1))) begin
        grp_fu_330_ap_start = 1'b1;
    end else begin
        grp_fu_330_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        outidx5_ce0 = 1'b1;
    end else begin
        outidx5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        w11_V_ce0 = 1'b1;
    end else begin
        w11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond8_fu_272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_293_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_49_fu_318_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((grp_product_fu_261_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (tmp_49_reg_562 == 1'd1) & (tmp_53_fu_464_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state42 : begin
            if (((tmp_48_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign brmerge1_fu_454_p2 = (p_Result_s_reg_627 ^ p_Result_9_reg_639);

assign data_V_address0 = tmp_47_fu_310_p1;

assign exitcond8_fu_272_p2 = ((iacc_reg_185 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_fu_293_p2 = ((w_index_reg_196 == 12'd2304) ? 1'b1 : 1'b0);

assign grp_fu_330_p1 = 17'd2304;

assign grp_fu_385_p0 = $signed(w11_V_load_reg_591);

assign grp_fu_385_p1 = tmp_43_reg_596;

assign grp_fu_510_p0 = 36'd233017;

assign grp_fu_510_p1 = grp_fu_510_p10;

assign grp_fu_510_p10 = w_index9_reg_240;

assign grp_product_fu_261_ap_start = grp_product_fu_261_ap_start_reg;

assign iacc_1_fu_278_p2 = (iacc_reg_185 + 7'd1);

assign im_1_fu_324_p2 = (im_reg_219 + 5'd1);

assign in_index_1_fu_475_p2 = ($signed(in_index_reg_207) + $signed(32'd1));

assign ir_fu_299_p2 = (w_index_reg_196 + 12'd1);

assign ires_1_fu_499_p2 = (ires_reg_250 + 7'd1);

assign lhs_V_fu_400_p1 = reg_267;

assign out_index_1_fu_469_p2 = (out_index9_reg_230 + 7'd4);

assign out_index_cast_fu_315_p1 = out_index_reg_542;

assign outidx5_address0 = tmp_s_fu_305_p1;

assign overflow_fu_439_p2 = (tmp_22_fu_434_p2 & p_Result_9_reg_639);

assign p_Val2_13_fu_421_p2 = ($signed(p_Val2_11_reg_621) + $signed(reg_267));

assign p_s_fu_486_p3 = ((tmp_54_fu_481_p2[0:0] === 1'b1) ? 32'd0 : in_index_1_reg_672);

assign p_shl8_cast_fu_369_p1 = p_shl8_fu_361_p3;

assign p_shl8_fu_361_p3 = {{tmp_4_fu_344_p4}, {1'd0}};

assign p_shl_fu_353_p3 = {{tmp_4_fu_344_p4}, {4'd0}};

assign res_V_address0 = tmp_50_reg_691;

assign res_V_d0 = reg_267;

assign ret_V_fu_407_p2 = ($signed(rhs_V_fu_404_p1) + $signed(lhs_V_fu_400_p1));

assign rhs_V_fu_404_p1 = p_Val2_11_reg_621;

assign tmp_22_fu_434_p2 = (p_Result_s_reg_627 ^ 1'd1);

assign tmp_41_fu_340_p1 = tmp_39_reg_576;

assign tmp_42_fu_391_p1 = grp_fu_385_p2[13:0];

assign tmp_43_fu_373_p2 = (p_shl_fu_353_p3 - p_shl8_cast_fu_369_p1);

assign tmp_47_fu_310_p1 = in_index_reg_207;

assign tmp_48_fu_493_p2 = ((ires_reg_250 == 7'd120) ? 1'b1 : 1'b0);

assign tmp_49_fu_318_p2 = ((im_reg_219 < 5'd30) ? 1'b1 : 1'b0);

assign tmp_4_fu_344_p4 = {{mul_reg_581[33:29]}};

assign tmp_50_fu_505_p1 = ires_reg_250;

assign tmp_51_fu_395_p1 = out_index9_reg_230;

assign tmp_52_fu_444_p2 = (p_Result_9_reg_639 ^ 1'd1);

assign tmp_53_fu_464_p2 = ((w_index_1_reg_658 > 17'd69119) ? 1'b1 : 1'b0);

assign tmp_54_fu_481_p2 = (($signed(in_index_1_reg_672) > $signed(32'd575)) ? 1'b1 : 1'b0);

assign tmp_fu_284_p1 = iacc_reg_185;

assign tmp_s_fu_305_p1 = w_index_reg_196;

assign underflow_fu_449_p2 = (tmp_52_fu_444_p2 & p_Result_s_reg_627);

assign w11_V_address0 = tmp_41_fu_340_p1;

assign w_index_1_fu_458_p2 = (w_index9_reg_240 + 17'd2304);

assign w_index_cast_fu_289_p1 = w_index_reg_196;

always @ (posedge ap_clk) begin
    w_index_cast_reg_524[16:12] <= 5'b00000;
    tmp_43_reg_596[0] <= 1'b0;
    tmp_50_reg_691[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense_large_rf_gt_ni_4
