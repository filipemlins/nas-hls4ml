// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_large_rf_gt_ni_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_state13 = 31'd4096;
parameter    ap_ST_fsm_state14 = 31'd8192;
parameter    ap_ST_fsm_state15 = 31'd16384;
parameter    ap_ST_fsm_state16 = 31'd32768;
parameter    ap_ST_fsm_state17 = 31'd65536;
parameter    ap_ST_fsm_state18 = 31'd131072;
parameter    ap_ST_fsm_state19 = 31'd262144;
parameter    ap_ST_fsm_state20 = 31'd524288;
parameter    ap_ST_fsm_state21 = 31'd1048576;
parameter    ap_ST_fsm_state22 = 31'd2097152;
parameter    ap_ST_fsm_state23 = 31'd4194304;
parameter    ap_ST_fsm_state24 = 31'd8388608;
parameter    ap_ST_fsm_state25 = 31'd16777216;
parameter    ap_ST_fsm_state26 = 31'd33554432;
parameter    ap_ST_fsm_state27 = 31'd67108864;
parameter    ap_ST_fsm_state28 = 31'd134217728;
parameter    ap_ST_fsm_state29 = 31'd268435456;
parameter    ap_ST_fsm_state30 = 31'd536870912;
parameter    ap_ST_fsm_state31 = 31'd1073741824;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] data_V_address0;
output   data_V_ce0;
input  [12:0] data_V_q0;
output  [3:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [13:0] res_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg res_V_ce0;
reg res_V_we0;

(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] outidx_address0;
reg    outidx_ce0;
wire   [2:0] outidx_q0;
wire   [8:0] w17_V_address0;
reg    w17_V_ce0;
wire   [17:0] w17_V_q0;
wire   [13:0] acc_V_q0;
reg  signed [13:0] reg_265;
wire    ap_CS_fsm_state25;
wire    grp_product_fu_259_ap_ready;
wire    grp_product_fu_259_ap_done;
wire    ap_CS_fsm_state30;
wire   [3:0] iacc_3_fu_276_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] w_index_cast_fu_287_p1;
reg   [10:0] w_index_cast_reg_543;
wire    ap_CS_fsm_state3;
wire   [8:0] ir_fu_297_p2;
reg   [8:0] ir_reg_551;
wire   [0:0] exitcond_fu_291_p2;
reg   [2:0] out_index_reg_561;
wire    ap_CS_fsm_state4;
wire   [3:0] out_index_cast_fu_313_p1;
wire    ap_CS_fsm_state5;
wire   [13:0] extLd_fu_316_p1;
reg   [13:0] extLd_reg_576;
wire   [0:0] tmp_60_fu_320_p3;
reg   [0:0] tmp_60_reg_581;
wire    ap_CS_fsm_state6;
wire   [1:0] im_3_fu_328_p2;
reg   [1:0] im_3_reg_585;
wire    ap_CS_fsm_state19;
wire   [10:0] grp_fu_334_p2;
reg   [10:0] tmp_21_reg_595;
wire    ap_CS_fsm_state20;
wire   [23:0] grp_fu_528_p2;
reg   [23:0] mul_reg_600;
wire    ap_CS_fsm_state21;
reg   [0:0] tmp_61_reg_610;
reg   [17:0] w17_V_load_reg_615;
wire    ap_CS_fsm_state22;
wire   [4:0] tmp_68_fu_383_p2;
reg   [4:0] tmp_68_reg_620;
wire   [13:0] tmp_74_fu_401_p1;
reg   [13:0] tmp_74_reg_625;
wire    ap_CS_fsm_state23;
reg   [3:0] acc_V_addr_6_reg_630;
wire    ap_CS_fsm_state24;
wire   [13:0] grp_product_fu_259_ap_return;
reg  signed [13:0] p_Val2_17_reg_635;
wire   [0:0] overflow_fu_451_p2;
reg   [0:0] overflow_reg_641;
wire    ap_CS_fsm_state26;
wire   [0:0] underflow_fu_463_p2;
reg   [0:0] underflow_reg_645;
wire   [0:0] brmerge8_fu_469_p2;
reg   [0:0] brmerge8_reg_649;
wire   [10:0] w_index_3_fu_475_p2;
wire    ap_CS_fsm_state27;
wire   [3:0] out_index_3_fu_487_p2;
wire   [0:0] tmp_70_fu_481_p2;
wire   [31:0] in_index_3_fu_493_p2;
reg   [31:0] in_index_3_reg_666;
wire   [31:0] p_s_fu_504_p3;
wire    ap_CS_fsm_state28;
wire   [3:0] ires_3_fu_517_p2;
reg   [3:0] ires_3_reg_680;
wire    ap_CS_fsm_state29;
wire   [63:0] tmp_64_fu_523_p1;
reg   [63:0] tmp_64_reg_685;
wire   [0:0] tmp_63_fu_511_p2;
reg   [3:0] acc_V_address0;
reg    acc_V_ce0;
reg    acc_V_we0;
reg   [13:0] acc_V_d0;
wire    grp_product_fu_259_ap_start;
wire    grp_product_fu_259_ap_idle;
reg   [3:0] iacc_reg_183;
wire   [0:0] exitcond6_fu_270_p2;
reg   [8:0] w_index_reg_194;
reg  signed [31:0] in_index_reg_205;
reg   [1:0] im_reg_217;
reg   [3:0] out_index5_reg_228;
reg   [10:0] w_index5_reg_238;
reg   [3:0] ires_reg_248;
wire    ap_CS_fsm_state31;
reg    grp_product_fu_259_ap_start_reg;
wire   [63:0] tmp_fu_282_p1;
wire   [63:0] tmp_s_fu_303_p1;
wire  signed [63:0] tmp_62_fu_308_p1;
wire   [63:0] tmp_23_fu_344_p1;
wire   [63:0] tmp_65_fu_405_p1;
wire   [13:0] p_Val2_19_fu_431_p2;
wire   [9:0] grp_fu_334_p1;
wire   [1:0] tmp_8_fu_355_p4;
wire   [2:0] p_shl8_fu_364_p3;
wire   [4:0] tmp_66_fu_372_p3;
wire   [4:0] tmp_67_fu_379_p1;
wire  signed [27:0] w17_V_load_cast_fu_389_p1;
wire   [27:0] tmp_72_fu_392_p1;
wire   [27:0] tmp_73_fu_395_p2;
wire  signed [14:0] lhs_V_fu_410_p1;
wire  signed [14:0] rhs_V_fu_414_p1;
wire   [14:0] ret_V_fu_417_p2;
wire   [0:0] p_Result_s_fu_423_p3;
wire   [0:0] p_Result_11_fu_437_p3;
wire   [0:0] tmp_20_fu_445_p2;
wire   [0:0] tmp_69_fu_457_p2;
wire   [0:0] tmp_71_fu_499_p2;
wire   [10:0] grp_fu_528_p0;
wire   [12:0] grp_fu_528_p1;
reg    grp_fu_334_ap_start;
wire    grp_fu_334_ap_done;
reg   [30:0] ap_NS_fsm;
wire   [23:0] grp_fu_528_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'd1;
#0 grp_product_fu_259_ap_start_reg = 1'b0;
end

dense_large_rf_gt_ni_2_outidx #(
    .DataWidth( 3 ),
    .AddressRange( 420 ),
    .AddressWidth( 9 ))
outidx_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(outidx_address0),
    .ce0(outidx_ce0),
    .q0(outidx_q0)
);

dense_large_rf_gt_ni_2_w17_V #(
    .DataWidth( 18 ),
    .AddressRange( 420 ),
    .AddressWidth( 9 ))
w17_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w17_V_address0),
    .ce0(w17_V_ce0),
    .q0(w17_V_q0)
);

dense_large_rf_gt_ni_2_acc_V #(
    .DataWidth( 14 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
acc_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_V_address0),
    .ce0(acc_V_ce0),
    .we0(acc_V_we0),
    .d0(acc_V_d0),
    .q0(acc_V_q0)
);

product grp_product_fu_259(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_product_fu_259_ap_start),
    .ap_done(grp_product_fu_259_ap_done),
    .ap_idle(grp_product_fu_259_ap_idle),
    .ap_ready(grp_product_fu_259_ap_ready),
    .a_V(extLd_reg_576),
    .w_V(tmp_74_reg_625),
    .ap_return(grp_product_fu_259_ap_return)
);

myproject_urem_11ns_10ns_11_15_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 11 ))
myproject_urem_11ns_10ns_11_15_seq_1_U70(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_334_ap_start),
    .done(grp_fu_334_ap_done),
    .din0(w_index5_reg_238),
    .din1(grp_fu_334_p1),
    .ce(1'b1),
    .dout(grp_fu_334_p2)
);

myproject_mul_mul_11ns_13ns_24_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 24 ))
myproject_mul_mul_11ns_13ns_24_3_1_U71(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_528_p0),
    .din1(grp_fu_528_p1),
    .ce(1'b1),
    .dout(grp_fu_528_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_product_fu_259_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            grp_product_fu_259_ap_start_reg <= 1'b1;
        end else if ((grp_product_fu_259_ap_ready == 1'b1)) begin
            grp_product_fu_259_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iacc_reg_183 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_270_p2 == 1'd0))) begin
        iacc_reg_183 <= iacc_3_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (tmp_70_fu_481_p2 == 1'd0) & (tmp_60_reg_581 == 1'd0))) begin
        im_reg_217 <= im_3_reg_585;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        im_reg_217 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        in_index_reg_205 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        in_index_reg_205 <= p_s_fu_504_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_291_p2 == 1'd1))) begin
        ires_reg_248 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        ires_reg_248 <= ires_3_reg_680;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (tmp_70_fu_481_p2 == 1'd0) & (tmp_60_reg_581 == 1'd0))) begin
        out_index5_reg_228 <= out_index_3_fu_487_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_index5_reg_228 <= out_index_cast_fu_313_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (tmp_70_fu_481_p2 == 1'd0) & (tmp_60_reg_581 == 1'd0))) begin
        w_index5_reg_238 <= w_index_3_fu_475_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_index5_reg_238 <= w_index_cast_reg_543;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        w_index_reg_194 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        w_index_reg_194 <= ir_reg_551;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        acc_V_addr_6_reg_630 <= tmp_65_fu_405_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        brmerge8_reg_649 <= brmerge8_fu_469_p2;
        overflow_reg_641 <= overflow_fu_451_p2;
        underflow_reg_645 <= underflow_fu_463_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        extLd_reg_576[12 : 0] <= extLd_fu_316_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        im_3_reg_585 <= im_3_fu_328_p2;
        tmp_60_reg_581 <= im_reg_217[32'd1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & ((tmp_70_fu_481_p2 == 1'd1) | (tmp_60_reg_581 == 1'd1)))) begin
        in_index_3_reg_666 <= in_index_3_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ir_reg_551 <= ir_fu_297_p2;
        w_index_cast_reg_543[8 : 0] <= w_index_cast_fu_287_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ires_3_reg_680 <= ires_3_fu_517_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        mul_reg_600 <= grp_fu_528_p2;
        tmp_61_reg_610 <= grp_fu_528_p2[32'd20];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_index_reg_561 <= outidx_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_product_fu_259_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        p_Val2_17_reg_635 <= grp_product_fu_259_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) | ((grp_product_fu_259_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25)))) begin
        reg_265 <= acc_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_21_reg_595 <= grp_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (tmp_63_fu_511_p2 == 1'd0))) begin
        tmp_64_reg_685[3 : 0] <= tmp_64_fu_523_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_68_reg_620[4 : 1] <= tmp_68_fu_383_p2[4 : 1];
        w17_V_load_reg_615 <= w17_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_74_reg_625 <= tmp_74_fu_401_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        acc_V_address0 = tmp_64_fu_523_p1;
    end else if (((1'b1 == ap_CS_fsm_state26) | ((brmerge8_reg_649 == 1'd1) & (1'b1 == ap_CS_fsm_state27) & (overflow_reg_641 == 1'd1) & (tmp_60_reg_581 == 1'd0)) | ((brmerge8_reg_649 == 1'd1) & (underflow_reg_645 == 1'd1) & (1'b1 == ap_CS_fsm_state27) & (overflow_reg_641 == 1'd0) & (tmp_60_reg_581 == 1'd0)))) begin
        acc_V_address0 = acc_V_addr_6_reg_630;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        acc_V_address0 = tmp_65_fu_405_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_V_address0 = tmp_fu_282_p1;
    end else begin
        acc_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state2) | ((brmerge8_reg_649 == 1'd1) & (1'b1 == ap_CS_fsm_state27) & (overflow_reg_641 == 1'd1) & (tmp_60_reg_581 == 1'd0)) | ((brmerge8_reg_649 == 1'd1) & (underflow_reg_645 == 1'd1) & (1'b1 == ap_CS_fsm_state27) & (overflow_reg_641 == 1'd0) & (tmp_60_reg_581 == 1'd0)))) begin
        acc_V_ce0 = 1'b1;
    end else begin
        acc_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((brmerge8_reg_649 == 1'd1) & (1'b1 == ap_CS_fsm_state27) & (overflow_reg_641 == 1'd1) & (tmp_60_reg_581 == 1'd0))) begin
        acc_V_d0 = 14'd8191;
    end else if (((brmerge8_reg_649 == 1'd1) & (underflow_reg_645 == 1'd1) & (1'b1 == ap_CS_fsm_state27) & (overflow_reg_641 == 1'd0) & (tmp_60_reg_581 == 1'd0))) begin
        acc_V_d0 = 14'd8192;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        acc_V_d0 = p_Val2_19_fu_431_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_V_d0 = 14'd0;
    end else begin
        acc_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((brmerge8_reg_649 == 1'd1) & (1'b1 == ap_CS_fsm_state27) & (overflow_reg_641 == 1'd1) & (tmp_60_reg_581 == 1'd0)) | ((brmerge8_reg_649 == 1'd1) & (underflow_reg_645 == 1'd1) & (1'b1 == ap_CS_fsm_state27) & (overflow_reg_641 == 1'd0) & (tmp_60_reg_581 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_270_p2 == 1'd0)))) begin
        acc_V_we0 = 1'b1;
    end else begin
        acc_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_63_fu_511_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_63_fu_511_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_60_fu_320_p3 == 1'd0))) begin
        grp_fu_334_ap_start = 1'b1;
    end else begin
        grp_fu_334_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        outidx_ce0 = 1'b1;
    end else begin
        outidx_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        w17_V_ce0 = 1'b1;
    end else begin
        w17_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond6_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_291_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_60_fu_320_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_product_fu_259_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (tmp_70_fu_481_p2 == 1'd0) & (tmp_60_reg_581 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state29 : begin
            if (((tmp_63_fu_511_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign brmerge8_fu_469_p2 = (p_Result_s_fu_423_p3 ^ p_Result_11_fu_437_p3);

assign data_V_address0 = tmp_62_fu_308_p1;

assign exitcond6_fu_270_p2 = ((iacc_reg_183 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_291_p2 = ((w_index_reg_194 == 9'd420) ? 1'b1 : 1'b0);

assign extLd_fu_316_p1 = data_V_q0;

assign grp_fu_334_p1 = 11'd420;

assign grp_fu_528_p0 = grp_fu_528_p00;

assign grp_fu_528_p00 = w_index5_reg_238;

assign grp_fu_528_p1 = 24'd2497;

assign grp_product_fu_259_ap_start = grp_product_fu_259_ap_start_reg;

assign iacc_3_fu_276_p2 = (iacc_reg_183 + 4'd1);

assign im_3_fu_328_p2 = (im_reg_217 + 2'd1);

assign in_index_3_fu_493_p2 = ($signed(in_index_reg_205) + $signed(32'd1));

assign ir_fu_297_p2 = (w_index_reg_194 + 9'd1);

assign ires_3_fu_517_p2 = (ires_reg_248 + 4'd1);

assign lhs_V_fu_410_p1 = reg_265;

assign out_index_3_fu_487_p2 = (out_index5_reg_228 + 4'd5);

assign out_index_cast_fu_313_p1 = out_index_reg_561;

assign outidx_address0 = tmp_s_fu_303_p1;

assign overflow_fu_451_p2 = (tmp_20_fu_445_p2 & p_Result_11_fu_437_p3);

assign p_Result_11_fu_437_p3 = p_Val2_19_fu_431_p2[32'd13];

assign p_Result_s_fu_423_p3 = ret_V_fu_417_p2[32'd14];

assign p_Val2_19_fu_431_p2 = ($signed(reg_265) + $signed(p_Val2_17_reg_635));

assign p_s_fu_504_p3 = ((tmp_71_fu_499_p2[0:0] === 1'b1) ? 32'd0 : in_index_3_reg_666);

assign p_shl8_fu_364_p3 = {{tmp_8_fu_355_p4}, {1'd0}};

assign res_V_address0 = tmp_64_reg_685;

assign res_V_d0 = reg_265;

assign ret_V_fu_417_p2 = ($signed(lhs_V_fu_410_p1) + $signed(rhs_V_fu_414_p1));

assign rhs_V_fu_414_p1 = p_Val2_17_reg_635;

assign tmp_20_fu_445_p2 = (p_Result_s_fu_423_p3 ^ 1'd1);

assign tmp_23_fu_344_p1 = tmp_21_reg_595;

assign tmp_60_fu_320_p3 = im_reg_217[32'd1];

assign tmp_62_fu_308_p1 = in_index_reg_205;

assign tmp_63_fu_511_p2 = ((ires_reg_248 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_64_fu_523_p1 = ires_reg_248;

assign tmp_65_fu_405_p1 = out_index5_reg_228;

assign tmp_66_fu_372_p3 = {{tmp_61_reg_610}, {4'd0}};

assign tmp_67_fu_379_p1 = p_shl8_fu_364_p3;

assign tmp_68_fu_383_p2 = (tmp_66_fu_372_p3 - tmp_67_fu_379_p1);

assign tmp_69_fu_457_p2 = (p_Result_11_fu_437_p3 ^ 1'd1);

assign tmp_70_fu_481_p2 = ((w_index_3_fu_475_p2 > 11'd839) ? 1'b1 : 1'b0);

assign tmp_71_fu_499_p2 = (($signed(in_index_3_reg_666) > $signed(32'd83)) ? 1'b1 : 1'b0);

assign tmp_72_fu_392_p1 = tmp_68_reg_620;

assign tmp_73_fu_395_p2 = w17_V_load_cast_fu_389_p1 >> tmp_72_fu_392_p1;

assign tmp_74_fu_401_p1 = tmp_73_fu_395_p2[13:0];

assign tmp_8_fu_355_p4 = {{mul_reg_600[21:20]}};

assign tmp_fu_282_p1 = iacc_reg_183;

assign tmp_s_fu_303_p1 = w_index_reg_194;

assign underflow_fu_463_p2 = (tmp_69_fu_457_p2 & p_Result_s_fu_423_p3);

assign w17_V_address0 = tmp_23_fu_344_p1;

assign w17_V_load_cast_fu_389_p1 = $signed(w17_V_load_reg_615);

assign w_index_3_fu_475_p2 = (w_index5_reg_238 + 11'd420);

assign w_index_cast_fu_287_p1 = w_index_reg_194;

always @ (posedge ap_clk) begin
    w_index_cast_reg_543[10:9] <= 2'b00;
    extLd_reg_576[13] <= 1'b0;
    tmp_68_reg_620[0] <= 1'b0;
    tmp_64_reg_685[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense_large_rf_gt_ni_2
