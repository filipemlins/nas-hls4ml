// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module im2col_2d_cl (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        data_col_V_address0,
        data_col_V_ce0,
        data_col_V_we0,
        data_col_V_d0,
        row,
        col
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] data_V_address0;
output   data_V_ce0;
input  [13:0] data_V_q0;
output  [4:0] data_col_V_address0;
output   data_col_V_ce0;
output   data_col_V_we0;
output  [13:0] data_col_V_d0;
input  [3:0] row;
input  [3:0] col;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg[4:0] data_col_V_address0;
reg data_col_V_ce0;
reg data_col_V_we0;
reg[13:0] data_col_V_d0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] row_cast_fu_189_p1;
reg   [4:0] row_cast_reg_360;
wire   [4:0] col_cast_fu_193_p1;
reg   [4:0] col_cast_reg_365;
wire   [7:0] p_0106_rec_cast_cast_fu_197_p1;
reg   [7:0] p_0106_rec_cast_cast_reg_370;
wire    ap_CS_fsm_state2;
wire   [3:0] channel_1_fu_201_p2;
reg   [3:0] channel_1_reg_375;
wire   [3:0] p_rec_fu_213_p2;
reg   [3:0] p_rec_reg_383;
wire   [5:0] index_3_fu_219_p2;
reg   [5:0] index_3_reg_388;
wire   [0:0] tmp_fu_207_p2;
wire   [1:0] kernel_row_1_fu_235_p2;
reg   [1:0] kernel_row_1_reg_396;
wire    ap_CS_fsm_state3;
wire   [5:0] tmp_39_fu_246_p2;
reg   [5:0] tmp_39_reg_401;
wire   [0:0] tmp_s_fu_229_p2;
wire   [0:0] tmp_40_fu_252_p2;
reg   [0:0] tmp_40_reg_406;
wire   [11:0] tmp_41_fu_278_p2;
reg   [11:0] tmp_41_reg_410;
wire   [1:0] kernel_col_1_fu_294_p2;
reg   [1:0] kernel_col_1_reg_418;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_44_fu_305_p2;
reg   [0:0] tmp_44_reg_423;
wire   [0:0] tmp_42_fu_288_p2;
wire   [63:0] tmp_45_fu_311_p1;
reg   [63:0] tmp_45_reg_427;
wire   [7:0] tmp1_fu_332_p2;
reg   [7:0] tmp1_reg_432;
wire   [11:0] sum_fu_345_p2;
reg   [11:0] sum_reg_437;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [13:0] data_V_load_reg_447;
wire    ap_CS_fsm_state7;
wire   [5:0] index_4_fu_354_p2;
wire    ap_CS_fsm_state8;
reg   [3:0] p_0106_rec_reg_111;
reg   [5:0] index_reg_122;
reg   [3:0] channel_reg_134;
reg   [5:0] index_1_reg_145;
reg   [1:0] kernel_row_reg_156;
reg   [5:0] index_2_reg_167;
reg   [1:0] kernel_col_reg_178;
wire   [63:0] tmp_43_fu_337_p1;
wire   [63:0] sum_cast_fu_350_p1;
wire   [4:0] kernel_row_cast_fu_225_p1;
wire   [4:0] input_row_fu_241_p2;
wire   [8:0] p_shl9_fu_266_p3;
wire   [11:0] p_shl_fu_258_p3;
wire   [11:0] p_shl9_cast_fu_274_p1;
wire   [4:0] kernel_col_cast_fu_284_p1;
wire   [4:0] input_col_fu_300_p2;
wire   [3:0] tmp_36_fu_316_p1;
wire   [6:0] tmp_46_fu_320_p3;
wire   [7:0] tmp_79_cast_cast_cas_fu_328_p1;
wire   [11:0] tmp1_cast_fu_342_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        channel_reg_134 <= channel_1_reg_375;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        channel_reg_134 <= 4'd8;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_42_fu_288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        index_1_reg_145 <= tmp_39_reg_401;
    end else if (((tmp_fu_207_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        index_1_reg_145 <= index_reg_122;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        index_2_reg_167 <= index_4_fu_354_p2;
    end else if (((tmp_s_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        index_2_reg_167 <= index_1_reg_145;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        index_reg_122 <= index_3_reg_388;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        index_reg_122 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        kernel_col_reg_178 <= kernel_col_1_reg_418;
    end else if (((tmp_s_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_col_reg_178 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_42_fu_288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        kernel_row_reg_156 <= kernel_row_1_reg_396;
    end else if (((tmp_fu_207_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_row_reg_156 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_0106_rec_reg_111 <= p_rec_reg_383;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_0106_rec_reg_111 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        channel_1_reg_375 <= channel_1_fu_201_p2;
        p_0106_rec_cast_cast_reg_370[3 : 0] <= p_0106_rec_cast_cast_fu_197_p1[3 : 0];
        p_rec_reg_383 <= p_rec_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_cast_reg_365[3 : 0] <= col_cast_fu_193_p1[3 : 0];
        row_cast_reg_360[3 : 0] <= row_cast_fu_189_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data_V_load_reg_447 <= data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_207_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        index_3_reg_388 <= index_3_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_col_1_reg_418 <= kernel_col_1_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_row_1_reg_396 <= kernel_row_1_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sum_reg_437 <= sum_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_44_fu_305_p2 == 1'd1) & (tmp_42_fu_288_p2 == 1'd0) & (tmp_40_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp1_reg_432 <= tmp1_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_39_reg_401 <= tmp_39_fu_246_p2;
        tmp_40_reg_406 <= tmp_40_fu_252_p2;
        tmp_41_reg_410[11 : 4] <= tmp_41_fu_278_p2[11 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_42_fu_288_p2 == 1'd0) & (tmp_40_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_44_reg_423 <= tmp_44_fu_305_p2;
        tmp_45_reg_427[5 : 0] <= tmp_45_fu_311_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((tmp_fu_207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        data_col_V_address0 = tmp_45_reg_427;
    end else if (((tmp_40_reg_406 == 1'd1) & (tmp_42_fu_288_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        data_col_V_address0 = tmp_43_fu_337_p1;
    end else if (((tmp_42_fu_288_p2 == 1'd0) & (tmp_44_fu_305_p2 == 1'd0) & (tmp_40_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        data_col_V_address0 = tmp_45_fu_311_p1;
    end else begin
        data_col_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((tmp_42_fu_288_p2 == 1'd0) & (tmp_44_fu_305_p2 == 1'd0) & (tmp_40_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((tmp_40_reg_406 == 1'd1) & (tmp_42_fu_288_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        data_col_V_ce0 = 1'b1;
    end else begin
        data_col_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        data_col_V_d0 = data_V_load_reg_447;
    end else if ((((tmp_42_fu_288_p2 == 1'd0) & (tmp_44_fu_305_p2 == 1'd0) & (tmp_40_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((tmp_40_reg_406 == 1'd1) & (tmp_42_fu_288_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        data_col_V_d0 = 14'd0;
    end else begin
        data_col_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_44_reg_423 == 1'd1) & (tmp_40_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_42_fu_288_p2 == 1'd0) & (tmp_44_fu_305_p2 == 1'd0) & (tmp_40_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((tmp_40_reg_406 == 1'd1) & (tmp_42_fu_288_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        data_col_V_we0 = 1'b1;
    end else begin
        data_col_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_207_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_s_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_42_fu_288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state4) & (((tmp_40_reg_406 == 1'd1) & (tmp_42_fu_288_p2 == 1'd0)) | ((tmp_42_fu_288_p2 == 1'd0) & (tmp_44_fu_305_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign channel_1_fu_201_p2 = ($signed(channel_reg_134) + $signed(4'd15));

assign col_cast_fu_193_p1 = col;

assign data_V_address0 = sum_cast_fu_350_p1;

assign index_3_fu_219_p2 = (index_reg_122 + 6'd4);

assign index_4_fu_354_p2 = (index_2_reg_167 + 6'd1);

assign input_col_fu_300_p2 = (col_cast_reg_365 + kernel_col_cast_fu_284_p1);

assign input_row_fu_241_p2 = (kernel_row_cast_fu_225_p1 + row_cast_reg_360);

assign kernel_col_1_fu_294_p2 = (kernel_col_reg_178 + 2'd1);

assign kernel_col_cast_fu_284_p1 = kernel_col_reg_178;

assign kernel_row_1_fu_235_p2 = (kernel_row_reg_156 + 2'd1);

assign kernel_row_cast_fu_225_p1 = kernel_row_reg_156;

assign p_0106_rec_cast_cast_fu_197_p1 = p_0106_rec_reg_111;

assign p_rec_fu_213_p2 = (p_0106_rec_reg_111 + 4'd1);

assign p_shl9_cast_fu_274_p1 = p_shl9_fu_266_p3;

assign p_shl9_fu_266_p3 = {{input_row_fu_241_p2}, {4'd0}};

assign p_shl_fu_258_p3 = {{input_row_fu_241_p2}, {7'd0}};

assign row_cast_fu_189_p1 = row;

assign sum_cast_fu_350_p1 = sum_reg_437;

assign sum_fu_345_p2 = (tmp_41_reg_410 + tmp1_cast_fu_342_p1);

assign tmp1_cast_fu_342_p1 = tmp1_reg_432;

assign tmp1_fu_332_p2 = (p_0106_rec_cast_cast_reg_370 + tmp_79_cast_cast_cas_fu_328_p1);

assign tmp_36_fu_316_p1 = input_col_fu_300_p2[3:0];

assign tmp_39_fu_246_p2 = (index_1_reg_145 + 6'd2);

assign tmp_40_fu_252_p2 = ((input_row_fu_241_p2 > 5'd13) ? 1'b1 : 1'b0);

assign tmp_41_fu_278_p2 = (p_shl_fu_258_p3 - p_shl9_cast_fu_274_p1);

assign tmp_42_fu_288_p2 = ((kernel_col_reg_178 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_43_fu_337_p1 = index_2_reg_167;

assign tmp_44_fu_305_p2 = ((input_col_fu_300_p2 < 5'd14) ? 1'b1 : 1'b0);

assign tmp_45_fu_311_p1 = index_2_reg_167;

assign tmp_46_fu_320_p3 = {{tmp_36_fu_316_p1}, {3'd0}};

assign tmp_79_cast_cast_cas_fu_328_p1 = tmp_46_fu_320_p3;

assign tmp_fu_207_p2 = ((channel_reg_134 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_229_p2 = ((kernel_row_reg_156 == 2'd2) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    row_cast_reg_360[4] <= 1'b0;
    col_cast_reg_365[4] <= 1'b0;
    p_0106_rec_cast_cast_reg_370[7:4] <= 4'b0000;
    tmp_41_reg_410[3:0] <= 4'b0000;
    tmp_45_reg_427[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //im2col_2d_cl
