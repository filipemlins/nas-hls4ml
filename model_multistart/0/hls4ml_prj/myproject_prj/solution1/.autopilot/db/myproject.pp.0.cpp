# 1 "firmware/myproject.cpp"
# 1 "firmware/myproject.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 155 "<built-in>" 3
# 1 "<command line>" 1






# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 157 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 8 "<command line>" 2
# 1 "<built-in>" 2
# 1 "firmware/myproject.cpp" 2
# 19 "firmware/myproject.cpp"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 1 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 1 3
# 153 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 393 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 1 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 439 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 440 "/usr/include/features.h" 2 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 2 3
# 394 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 2 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/cpu_defines.h" 1 3
# 397 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 2 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 1 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    class allocator;







  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;

  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;

  typedef basic_string<wchar_t> wstring;





  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;

  typedef basic_string<char16_t> u16string;
  typedef basic_string<char32_t> u32string;





}
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 1 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 31 "/usr/include/wchar.h" 2 3 4




# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 31 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 3 4
typedef __typeof__(((int*)0)-((int*)0)) ptrdiff_t;



typedef __typeof__(sizeof(int)) size_t;
# 55 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 3 4
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 36 "/usr/include/wchar.h" 2 3 4


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 1 3 4
# 30 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 48 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 39 "/usr/include/wchar.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 41 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 2 3 4

typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 44 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 47 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 50 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) throw ();




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));
# 164 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));
# 174 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));
# 201 "/usr/include/wchar.h" 3 4
extern wchar_t *wcspbrk (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));
# 212 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsstr (const wchar_t *__haystack, const wchar_t *__needle)
     throw () __attribute__ ((__pure__));



extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));
# 233 "/usr/include/wchar.h" 3 4
extern wchar_t *wcswcs (const wchar_t *__haystack, const wchar_t *__needle)
     throw () __attribute__ ((__pure__));





extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));
# 253 "/usr/include/wchar.h" 3 4
extern wchar_t *wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)
     throw () __attribute__ ((__pure__));



extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();





extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();
# 337 "/usr/include/wchar.h" 3 4
extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 396 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();
# 411 "/usr/include/wchar.h" 3 4
extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 428 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 511 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();
# 529 "/usr/include/wchar.h" 3 4
extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 551 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();
# 567 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();





extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream, const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_fwscanf")


                                                          ;
extern int wscanf (const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_wscanf")

                                                          ;
extern int swscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, ...) throw () __asm__ ("" "__isoc99_swscanf")


                                                          ;
# 671 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;






extern int vfwscanf (__FILE *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfwscanf")


                                                          ;
extern int vwscanf (const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vwscanf")

                                                          ;
extern int vswscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vswscanf")


                                                          ;
# 726 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 781 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 807 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 817 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();
# 856 "/usr/include/wchar.h" 3 4
}
# 46 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 2 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 136 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }



}







namespace __gnu_cxx
{





  using ::wcstold;
# 258 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 278 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 2 3
# 69 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
  typedef long streamoff;
# 99 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 112 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 134 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 75 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 1 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 117 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{
# 142 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop




# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_defines.h" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 2 3





extern "C++" {

namespace std
{




  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() throw();


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {




    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) throw();

      void _M_addref() throw();
      void _M_release() throw();

      void *_M_get() const throw() __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() throw();
      friend void std::rethrow_exception(exception_ptr);

    public:
      exception_ptr() throw();

      exception_ptr(const exception_ptr&) throw();


      exception_ptr(nullptr_t) throw()
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) throw()
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }







      exception_ptr&
      operator=(const exception_ptr&) throw();


      exception_ptr&
      operator=(exception_ptr&& __o) throw()
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() throw();

      void
      swap(exception_ptr&) throw();
# 132 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&) throw()
      __attribute__ ((__pure__));

      const class type_info*
      __cxa_exception_type() const throw() __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&) throw()
    __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&) throw()
    __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

  }



  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) throw()
    {
      if (true)
 {



 }
      if (false)
 {
   return current_exception();
 }
    }




  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) throw()
    { return std::copy_exception<_Ex>(__ex); }


}

}

#pragma GCC visibility pop
# 154 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/nested_exception.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/nested_exception.h" 3
#pragma GCC visibility push(default)
# 45 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() throw() : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) = default;

    nested_exception& operator=(const nested_exception&) = default;

    virtual ~nested_exception();

    void
    rethrow_nested() const __attribute__ ((__noreturn__))
    { rethrow_exception(_M_ptr); }

    exception_ptr
    nested_ptr() const
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };

  template<typename _Ex>
    struct __get_nested_helper
    {
      static const nested_exception*
      _S_get(const _Ex& __ex)
      { return dynamic_cast<const nested_exception*>(&__ex); }
    };

  template<typename _Ex>
    struct __get_nested_helper<_Ex*>
    {
      static const nested_exception*
      _S_get(const _Ex* __ex)
      { return dynamic_cast<const nested_exception*>(__ex); }
    };

  template<typename _Ex>
    inline const nested_exception*
    __get_nested_exception(const _Ex& __ex)
    { return __get_nested_helper<_Ex>::_S_get(__ex); }

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, const nested_exception* = 0)
    __attribute__ ((__noreturn__));

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, ...) __attribute__ ((__noreturn__));




  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, const nested_exception*)
    { throw __ex; }

  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, ...)
    { throw _Nested_exception<_Ex>(static_cast<_Ex&&>(__ex)); }

  template<typename _Ex>
    void
    throw_with_nested(_Ex __ex) __attribute__ ((__noreturn__));



  template<typename _Ex>
    inline void
    throw_with_nested(_Ex __ex)
    {
      if (__get_nested_exception(__ex))
        throw __ex;
      __throw_with_nested(static_cast<_Ex&&>(__ex), &__ex);
    }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    {
      if (const nested_exception* __nested = __get_nested_exception(__ex))
        __nested->rethrow_nested();
    }


  inline void
  rethrow_if_nested(const nested_exception& __ex)
  { __ex.rethrow_nested(); }


}

}



#pragma GCC visibility pop
# 155 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 2 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 1 3
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functexcept.h" 1 3
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functexcept.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 1 3
# 36 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
# 36 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
# 68 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<typename _Iterator>
    class move_iterator;

  template<typename _Iterator>
    struct __is_move_iterator< move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



}
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 64 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 53 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 98 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 1 3
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r)
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


}



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3







namespace std __attribute__ ((__visibility__ ("default")))
{






  struct __sfinae_types
  {
    typedef char __one;
    typedef struct { char __arr[2]; } __two;
  };
# 70 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() { return value; }
    };


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };
  template<> struct __is_void_helper<void> : public integral_constant<bool, true> { };




  template<typename _Tp>
    struct is_void
    : public integral_constant<bool, (__is_void_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };
  template<> struct __is_integral_helper<bool> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<char> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<signed char> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned char> : public integral_constant<bool, true> { };

  template<> struct __is_integral_helper<wchar_t> : public integral_constant<bool, true> { };

  template<> struct __is_integral_helper<char16_t> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<char32_t> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<short> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned short> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<int> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned int> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<long> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned long> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<long long> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned long long> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct is_integral
    : public integral_constant<bool, (__is_integral_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };
  template<> struct __is_floating_point_helper<float> : public integral_constant<bool, true> { };
  template<> struct __is_floating_point_helper<double> : public integral_constant<bool, true> { };
  template<> struct __is_floating_point_helper<long double> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct is_floating_point
    : public integral_constant<bool, (__is_floating_point_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };
  template<typename _Tp> struct __is_pointer_helper<_Tp*> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct is_pointer
    : public integral_constant<bool, (__is_pointer_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };


  template<typename _Tp>
    struct is_reference;


  template<typename _Tp>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };
  template<typename _Tp, typename _Cp> struct __is_member_object_pointer_helper<_Tp _Cp::*> : public integral_constant<bool, !is_function<_Tp>::value> { };



  template<typename _Tp>
    struct is_member_object_pointer
    : public integral_constant<bool, (__is_member_object_pointer_helper<
          typename remove_cv<_Tp>::type>::value)>
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };
  template<typename _Tp, typename _Cp> struct __is_member_function_pointer_helper<_Tp _Cp::*> : public integral_constant<bool, is_function<_Tp>::value> { };



  template<typename _Tp>
    struct is_member_function_pointer
    : public integral_constant<bool, (__is_member_function_pointer_helper<
          typename remove_cv<_Tp>::type>::value)>
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...)>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......)>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile>
    : public true_type { };

  template<typename>
    struct __is_nullptr_t_helper
    : public false_type { };
  template<> struct __is_nullptr_t_helper<std::nullptr_t> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public integral_constant<bool, (__is_nullptr_t_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };




  template<typename _Tp>
    struct is_arithmetic
    : public integral_constant<bool, (is_integral<_Tp>::value
          || is_floating_point<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_fundamental
    : public integral_constant<bool, (is_arithmetic<_Tp>::value
          || is_void<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_object
    : public integral_constant<bool, !(is_function<_Tp>::value
           || is_reference<_Tp>::value
           || is_void<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public integral_constant<bool, (is_arithmetic<_Tp>::value
          || is_enum<_Tp>::value
          || is_pointer<_Tp>::value
          || is_member_pointer<_Tp>::value
          || __is_nullptr_t<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };


  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };
  template<typename _Tp, typename _Cp> struct __is_member_pointer_helper<_Tp _Cp::*> : public integral_constant<bool, true> { };

  template<typename _Tp>
  struct is_member_pointer
    : public integral_constant<bool, (__is_member_pointer_helper<
          typename remove_cv<_Tp>::type>::value)>
    { };



  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };


  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };


  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };


  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint = 0>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };




  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };




  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };




  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };

  template<typename>
    struct remove_reference;


  template<typename _Tp>
    struct add_pointer
    { typedef typename remove_reference<_Tp>::type* type; };




  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };




  template<typename _Tp>
    struct is_reference
    : public integral_constant<bool, (is_lvalue_reference<_Tp>::value
          || is_rvalue_reference<_Tp>::value)>
    { };




  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp,
    bool = !is_reference<_Tp>::value && !is_void<_Tp>::value,
    bool = is_rvalue_reference<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true, false>
    { typedef _Tp& type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, false, true>
    { typedef typename remove_reference<_Tp>::type& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp,
    bool = !is_reference<_Tp>::value && !is_void<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp,
    bool = is_integral<_Tp>::value,
    bool = is_floating_point<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, false, true>
    : public true_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true, false>
    : public integral_constant<bool, static_cast<bool>(_Tp(-1) < _Tp(0))>
    { };


  template<typename _Tp>
    struct is_signed
    : public integral_constant<bool, __is_signed_helper<_Tp>::value>
    { };


  template<typename _Tp>
    struct is_unsigned
    : public integral_constant<bool, (is_arithmetic<_Tp>::value
          && !is_signed<_Tp>::value)>
    { };




  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };

  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename _Tp, typename... _Args>
    class __is_constructible_helper
    : public __sfinae_types
    {
      template<typename _Tp1, typename... _Args1>
        static decltype(_Tp1(declval<_Args1>()...), __one()) __test(int);

      template<typename, typename...>
        static __two __test(...);

    public:
      static const bool __value = sizeof(__test<_Tp, _Args...>(0)) == 1;
    };

  template<typename _Tp, typename _Arg>
    class __is_constructible_helper<_Tp, _Arg>
    : public __sfinae_types
    {
      template<typename _Tp1, typename _Arg1>
        static decltype(static_cast<_Tp1>(declval<_Arg1>()), __one())
 __test(int);

      template<typename, typename>
        static __two __test(...);

    public:
      static const bool __value = sizeof(__test<_Tp, _Arg>(0)) == 1;
    };




  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public integral_constant<bool,
          __is_constructible_helper<_Tp,
        _Args...>::__value>
    { };

  template<bool, typename _Tp, typename... _Args>
    struct __is_nt_constructible_helper
    { static const bool __value = false; };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_helper<true, _Tp, _Args...>
    { static const bool __value = noexcept(_Tp(declval<_Args>()...)); };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_helper<true, _Tp, _Arg>
    {
      static const bool __value = noexcept(static_cast<_Tp>(declval<_Arg>()));
    };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public integral_constant<bool,
   __is_nt_constructible_helper<is_constructible<_Tp, _Args...>::value,
           _Tp, _Args...>::__value>
    { };


  template<typename _Tp>
    struct has_trivial_default_constructor
    : public integral_constant<bool, __has_trivial_constructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_copy_constructor
    : public integral_constant<bool, __has_trivial_copy(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_copy_assign
    : public integral_constant<bool, __has_trivial_assign(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_destructor
    : public integral_constant<bool, __has_trivial_destructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_nothrow_default_constructor
    : public integral_constant<bool, __has_nothrow_constructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_nothrow_copy_constructor
    : public integral_constant<bool, __has_nothrow_copy(_Tp)>
    { };


  template<typename _Tp>
    struct has_nothrow_copy_assign
    : public integral_constant<bool, __has_nothrow_assign(_Tp)>
    { };




  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
    bool = (is_void<_From>::value || is_function<_To>::value
     || is_array<_To>::value)>
    struct __is_convertible_helper
    { static const bool __value = is_void<_To>::value; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    : public __sfinae_types
    {
      template<typename _To1>
        static void __test_aux(_To1);

      template<typename _From1, typename _To1>
        static decltype(__test_aux<_To1>(std::declval<_From1>()), __one())
 __test(int);

      template<typename, typename>
        static __two __test(...);

    public:
      static const bool __value = sizeof(__test<_From, _To>(0)) == 1;
    };




  template<typename _From, typename _To>
    struct is_convertible
    : public integral_constant<bool,
          __is_convertible_helper<_From, _To>::__value>
    { };


  template<typename _From, typename _To>
    struct is_explicitly_convertible
    : public is_constructible<_To, _From>
    { };

  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 819 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };





  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };





  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };




  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<const reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };



  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };



  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };



  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      typedef conditional<__b2, unsigned int, unsigned long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };



  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {

      typedef signed char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(signed short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(signed int);
      typedef conditional<__b2, signed int, signed long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, signed short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;


  template<typename... _Tp>
    struct common_type;

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    { typedef decltype(true ? declval<_Tp>() : declval<_Up>()) type; };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    {
      typedef typename
        common_type<typename common_type<_Tp, _Up>::type, _Vp...>::type type;
    };


  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }


  template<typename _Signature>
    class result_of;

  template<typename _MemPtr, typename _Arg>
    struct _Result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct _Result_of_memobj<_Res _Class::*, _Arg>
    {
    private:
      typedef _Res _Class::* _Func;

      template<typename _Tp>
 static _Tp _S_get(const _Class&);
      template<typename _Tp>
 static decltype(*std::declval<_Tp>()) _S_get(...);

    public:
      typedef
        decltype(_S_get<_Arg>(std::declval<_Arg>()).*std::declval<_Func>())
        __type;
    };

  template<typename _MemPtr, typename _Arg, typename... _ArgTypes>
    struct _Result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct _Result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
    private:
      typedef _Res _Class::* _Func;

      template<typename _Tp>
 static _Tp _S_get(const _Class&);
      template<typename _Tp>
 static decltype(*std::declval<_Tp>()) _S_get(...);

    public:
      typedef
        decltype((_S_get<_Arg>(std::declval<_Arg>()).*std::declval<_Func>())
            (std::declval<_Args>()...) )
        __type;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct _Result_of_impl;

  template<typename _Functor, typename... _ArgTypes>
    struct _Result_of_impl<false, false, _Functor, _ArgTypes...>
    {
      typedef
        decltype( std::declval<_Functor>()(std::declval<_ArgTypes>()...) )
        __type;
    };

  template<typename _MemPtr, typename _Arg>
    struct _Result_of_impl<true, false, _MemPtr, _Arg>
    : _Result_of_memobj<typename remove_reference<_MemPtr>::type, _Arg>
    {
      typedef typename _Result_of_memobj<
 typename remove_reference<_MemPtr>::type, _Arg>::__type
 __type;
    };

  template<typename _MemPtr, typename _Arg, typename... _ArgTypes>
    struct _Result_of_impl<false, true, _MemPtr, _Arg, _ArgTypes...>
    : _Result_of_memfun<typename remove_reference<_MemPtr>::type, _Arg,
                        _ArgTypes...>
    {
      typedef typename _Result_of_memfun<
 typename remove_reference<_MemPtr>::type, _Arg, _ArgTypes...>::__type
 __type;
    };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : _Result_of_impl<is_member_object_pointer<
                        typename remove_reference<_Functor>::type >::value,
                      is_member_function_pointer<
   typename remove_reference<_Functor>::type >::value,
        _Functor, _ArgTypes...>
    {
      typedef typename _Result_of_impl<
 is_member_object_pointer<
   typename remove_reference<_Functor>::type >::value,
        is_member_function_pointer<
   typename remove_reference<_Functor>::type >::value,
        _Functor, _ArgTypes...>::__type
 type;
    };
# 1266 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
}
# 54 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    inline _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t)
    { return static_cast<_Tp&&>(__t); }

  template<typename _Tp>
    inline _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t)
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }







  template<typename _Tp>
    inline typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
# 94 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r)
    { return std::__addressof(__r); }


}
# 109 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 120 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {



      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }



  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }


}
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{




  struct piecewise_construct_t { };


  constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();


  template<typename...>
    class tuple;

  template<int...>
    struct _Index_tuple;



  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      constexpr pair()
      : first(), second() { }


      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


      template<class _U1, class _U2>
 constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }


      constexpr pair(const pair&) = default;





      template<class _U1, class = typename
        std::enable_if<std::is_convertible<_U1, _T1>::value>::type>
 pair(_U1&& __x, const _T2& __y)
 : first(std::forward<_U1>(__x)), second(__y) { }

      template<class _U2, class = typename
        std::enable_if<std::is_convertible<_U2, _T2>::value>::type>
 pair(const _T1& __x, _U2&& __y)
 : first(__x), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
        std::enable_if<std::is_convertible<_U1, _T1>::value
         && std::is_convertible<_U2, _T2>::value>::type>
 pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2>
 pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<class... _Args1, class... _Args2>
 pair(piecewise_construct_t,
      tuple<_Args1...> __first, tuple<_Args2...> __second)
 : first(__cons<first_type>(std::move(__first))),
   second(__cons<second_type>(std::move(__second))) { }

      pair&
      operator=(const pair& __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(pair&& __p)
      {
 first = std::move(__p.first);
 second = std::move(__p.second);
 return *this;
      }

      template<class _U1, class _U2>
 pair&
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<class _U1, class _U2>
 pair&
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::move(__p.first);
   second = std::move(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename _Tp, typename... _Args>
 static _Tp
 __cons(tuple<_Args...>&&);

      template<typename _Tp, typename... _Args, int... _Indexes>
 static _Tp
 __do_cons(tuple<_Args...>&&, const _Index_tuple<_Indexes...>&);

    };


  template<class _T1, class _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<class _T1, class _T2>
    inline void
    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    { __x.swap(__y); }
# 259 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<typename __decay_and_strip<_T1>::__type,
  typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 277 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
}
# 66 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 1 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 142 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
template<typename _Tp> class __has_iterator_category_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::iterator_category>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_iterator_category : integral_constant<bool, __has_iterator_category_helper <typename remove_cv<_Tp>::type>::value> { };

  template<typename _Iterator,
    bool = __has_iterator_category<_Iterator>::value>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator, true>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 174 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }





  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };


}
# 67 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 1 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }
# 110 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      __i += __n;
    }
# 168 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _ForwardIterator>
    inline _ForwardIterator
    next(_ForwardIterator __x, typename
  iterator_traits<_ForwardIterator>::difference_type __n = 1)
    {
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {
      std::advance(__x, -__n);
      return __x;
    }




}
# 68 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 1 3
# 68 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 96 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }






      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 283 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>


    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())





    { return __y.base() - __x.base(); }
# 395 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 429 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 471 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 486 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 519 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 561 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 580 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 631 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 675 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 699 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 797 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}



namespace std __attribute__ ((__visibility__ ("default")))
{
# 923 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;
      typedef value_type&& reference;

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>
 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
      { return std::move(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline auto
    operator-(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(const _Iterator& __i)
    { return move_iterator<_Iterator>(__i); }




}
# 69 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/debug/debug.h" 1 3
# 47 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 71 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{





  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = std::move(*__a);
          *__a = std::move(*__b);
          *__b = std::move(__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 116 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;
# 135 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);
    }
# 157 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 185 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 208 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 231 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 252 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 442 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 475 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 611 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 647 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      __builtin_memset(__first, static_cast<unsigned char>(__tmp),
         __last - __first);
    }
# 713 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 773 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)
       * (__last1 - __first1));
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = (__is_integer<_ValueType1>::__value
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }


  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 typedef typename iterator_traits<_II1>::iterator_category _Category1;
 typedef typename iterator_traits<_II2>::iterator_category _Category2;
 typedef std::__lc_rai<_Category1, _Category2> __rai_type;

 __last1 = __rai_type::__newlast1(__first1, __last1,
      __first2, __last2);
 for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
      ++__first1, ++__first2)
   {
     if (*__first1 < *__first2)
       return true;
     if (*__first2 < *__first1)
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp(__first1, __first2,
      std::min(__len1, __len2));
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }
# 934 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;




                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }



  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 0; __n >>= 1)
 ++__k;
      return __k - 1;
    }

  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }
# 1008 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1040 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1071 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {

      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;




                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1105 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;




                                                       ;
                                                       ;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1145 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1182 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }


}
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 58 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 83 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{
# 227 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}





# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
# 49 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 3
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 2 3
# 50 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 2 3
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 378 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 1 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) throw ();
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) throw ();



extern void freelocale (locale_t __dataset) throw ();






extern locale_t uselocale (locale_t __dataset) throw ();







}
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 2 3








namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 2 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 2 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 56 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;


}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 1 3
# 30 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 170 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 32 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 33 "/usr/include/sched.h" 2 3 4





typedef __pid_t pid_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int getcpu (unsigned int *, unsigned int *) throw ();


extern int setns (int __fd, int __nstype) throw ();


}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 121 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 23 "/usr/include/x86_64-linux-gnu/bits/timex.h" 2 3 4



struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 38 "/usr/include/time.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 47 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 48 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;
# 190 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 205 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 274 "/usr/include/time.h" 3 4
extern int getdate_err;
# 283 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 297 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 24 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 27 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4




enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 100 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 120 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 155 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 193 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
# 238 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,
                                 clockid_t __clockid,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 470 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 482 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 516 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 656 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
                            ;
# 668 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
                         ;
# 691 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
                            ;
# 704 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
                         ;



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
                             __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,
        clockid_t __clockid,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 789 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 871 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 997 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1010 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __clockid_t __clock_id,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 4)));





extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1056 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1123 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1157 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1171 "/usr/include/pthread.h" 3 4
}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 2 3
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 220 "/usr/include/unistd.h" 3 4
typedef __ssize_t ssize_t;






# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4





typedef __gid_t gid_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __useconds_t useconds_t;
# 274 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 334 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 345 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 376 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 404 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 432 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 444 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 469 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 511 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));






# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 610 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 660 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () ;




extern int seteuid (__uid_t __uid) throw () ;






extern int setgid (__gid_t __gid) throw () ;




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () ;




extern int setegid (__gid_t __gid) throw () ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () ;






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));








# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 870 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 991 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1003 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1014 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1024 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1035 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1056 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1079 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1089 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1107 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1124 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1161 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;
# 1170 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) throw ();
# 1171 "/usr/include/unistd.h" 2 3 4

}
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 2 3

typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 118 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));


static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));


static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));


static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 239 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw_pthread_cancel;






  return __gthread_active_ptr != 0;
}
# 657 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}



static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}



static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 800 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}



static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}



static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait_recursive (__gthread_cond_t *__cond,
        __gthread_recursive_mutex_t *__mutex,
        const __gthread_time_t *__abs_timeout)
{
  return __gthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 171 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 2 3







#pragma GCC visibility pop
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/atomic_word.h" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 36 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __sync_fetch_and_add(__mem, __val); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __sync_fetch_and_add(__mem, __val); }
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 2 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 3




# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 1 3
# 48 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3




#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 92 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 2 3



namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 53 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }



      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }


      template<typename... _Args>
        void
        construct(pointer __p, _Args&&... __args)
 { ::new((void *)__p) _Tp(std::forward<_Args>(__args)...); }


      void
      destroy(pointer __p) { __p->~_Tp(); }
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 2 3
# 49 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
  template<typename _Tp>
    class allocator;


  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };
    };
# 91 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }




  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };
# 191 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
  template<typename _Tp,
    bool = __has_trivial_copy(typename _Tp::value_type)>
    struct __shrink_to_fit
    { static void _S_do_it(_Tp&) { } };

  template<typename _Tp>
    struct __shrink_to_fit<_Tp, true>
    {
      static void
      _S_do_it(_Tp& __v)
      {
 if (true)
   { _Tp(__v).swap(__v); }
 if (false) { }
      }
    };



  struct allocator_arg_t { };

  constexpr allocator_arg_t allocator_arg = allocator_arg_t();

template<typename _Tp> class __has_allocator_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::allocator_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_allocator_type : integral_constant<bool, __has_allocator_type_helper <typename remove_cv<_Tp>::type>::value> { };

  template<typename _Tp, typename _Alloc,
    bool = __has_allocator_type<_Tp>::value>
    struct __uses_allocator_helper
    : public false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc, true>
    : public integral_constant<bool, is_convertible<_Alloc,
         typename _Tp::allocator_type>::value>
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : public integral_constant<bool,
          __uses_allocator_helper<_Tp, _Alloc>::value>
    { };




}
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 36 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   if (true)
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   if (false)
     {
       __out._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 46 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 1 3
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 101 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 140 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 204 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 268 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };
# 351 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 422 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st : public unary_function<_Pair,
           typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd : public unary_function<_Pair,
           typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 541 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 1 3
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 99 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}
# 732 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 2 3
# 50 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{







  template<class _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<class _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<class _Tp, size_t _Nm>
    inline _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<class _Tp, size_t _Nm>
    inline _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }


}
# 53 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 3



#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() { return _M_len; }


      constexpr const_iterator
      begin() { return _M_array; }


      constexpr const_iterator
      end() { return begin() + size(); }
  };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils)
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils)
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 105 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 142 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 167 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {

                                                                  ;
       if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
        -1) <= 0)
  {
                                                              ;
    _M_destroy(__a);
  }
     }
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      basic_string()

      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }







      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 477 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 501 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string(basic_string&& __str)
      : _M_dataplus(__str._M_dataplus)
      {

 __str._M_data(_S_empty_rep()._M_refdata());



      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
# 525 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 558 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 573 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      {

 this->swap(__str);
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }







      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 733 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 746 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit()
      {
 if (true)
   { reserve(0); }
 if (false)
   { }
      }






      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 787 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }





      bool
      empty() const
      { return this->size() == 0; }
# 816 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
                                       ;
 return _M_data()[__pos];
      }
# 833 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {

                                       ;

                                         ;
 _M_leak();
 return _M_data()[__pos];
      }
# 854 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }






      reference
      front()
      { return operator[](0); }





      const_reference
      front() const
      { return operator[](0); }





      reference
      back()
      { return operator[](this->size() - 1); }





      const_reference
      back() const
      { return operator[](this->size() - 1); }
# 907 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }







      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }







      basic_string&
      append(const basic_string& __str);
# 978 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 return this->append(__s, traits_type::length(__s));
      }
# 1010 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1032 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 1068 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      {
 this->swap(__str);
 return *this;
      }
# 1088 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 1104 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 1116 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return this->assign(__s, traits_type::length(__s));
      }
# 1132 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1144 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1172 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1187 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1199 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
                                                                 ;
 this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
      }
# 1218 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1240 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1263 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1281 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1304 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1321 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
                                                                 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1345 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1361 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {

                               ;
 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1381 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1400 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1422 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1446 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1465 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1488 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1506 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1524 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {

                          ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1545 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1566 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {

                          ;
 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1588 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                            ;
                                             ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1658 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string& replace(iterator __i1, iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.end()); }


    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct_aux_2(static_cast<size_type>(__beg),
        __end, __a); }

      static _CharT*
      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
      { return _S_construct(__req, __c, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1744 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1754 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1764 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1796 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1809 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }
# 1823 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1840 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const;
# 1853 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1868 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1881 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1898 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const;
# 1911 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1926 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1939 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 1958 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 1972 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 1987 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2000 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2019 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 2033 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2048 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2062 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2079 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;
# 2092 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2108 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2121 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2138 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;
# 2153 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2171 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2201 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2225 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2243 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2266 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2291 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
# 2303 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 2424 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2470 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2507 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2544 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2581 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2618 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2655 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2672 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2690 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2713 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2731 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return getline(__is, __str, __is.widen('\n')); }

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}





# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 3




# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 58 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 158 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 250 "/usr/include/stdlib.h" 3 4
extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 337 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;
# 69 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __mode_t mode_t;




typedef __nlink_t nlink_t;
# 103 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 138 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __suseconds_t suseconds_t;






# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;







typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{



  return ((__uint16_t) ((((__bsx) >> 8) & 0xff) | (((__bsx) & 0xff) << 8)));

}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{



  return ((((__bsx) & 0xff000000u) >> 24) | (((__bsx) & 0x00ff0000u) >> 8) | (((__bsx) & 0x0000ff00u) << 8) | (((__bsx) & 0x000000ffu) << 24));

}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{



  return ((((__bsx) & 0xff00000000000000ull) >> 56) | (((__bsx) & 0x00ff000000000000ull) >> 40) | (((__bsx) & 0x0000ff0000000000ull) >> 24) | (((__bsx) & 0x000000ff00000000ull) >> 8) | (((__bsx) & 0x00000000ff000000ull) << 8) | (((__bsx) & 0x0000000000ff0000ull) << 24) | (((__bsx) & 0x000000000000ff00ull) << 40) | (((__bsx) & 0x00000000000000ffull) << 56));

}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
# 230 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
}
# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__))
                                         ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__)) ;







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__))
                                      ;



extern void free (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__))
                                         ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 610 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 688 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 698 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 710 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 720 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 742 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 752 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 762 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 774 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 957 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1014 "/usr/include/stdlib.h" 2 3 4
# 1023 "/usr/include/stdlib.h" 3 4
}
# 66 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 2 3
# 97 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;
  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;
  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;


  inline long
  abs(long __i) { return labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }


}
# 157 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;


  inline long long
  abs(long long __x) { return __x >= 0 ? __x : -__x; }


  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 192 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;
  using ::__gnu_cxx::abs;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



namespace std
{


  using std::lldiv_t;


  using std::llabs;
  using std::lldiv;


  using std::atoll;
  using std::strtoll;
  using std::strtoull;

  using std::strtof;
  using std::strtold;


  using std::abs;

  using std::div;

}
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3


# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {




# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 3 4
typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 84 "/usr/include/stdio.h" 3 4
typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();







extern FILE *tmpfile (void) ;
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf") ;


extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf") ;

extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) throw () __asm__ ("" "__isoc99_sscanf");
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
          ;
# 577 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 873 "/usr/include/stdio.h" 3 4
}
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 2 3
# 91 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;
  using ::gets;
  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;
  using ::tmpnam;
  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 147 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
namespace __gnu_cxx
{
# 165 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 3

# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;


# 1 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4



}
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 2 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;
      (*__errno_location ()) = 0;
      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
        || (std::__are_same<_Ret, int>::__value
     && (__tmp < __numeric_traits<int>::__min
         || __tmp > __numeric_traits<int>::__max)))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 2756 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }




  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }


  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }


  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }



}






# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/hash_bytes.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/hash_bytes.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 48 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type;
      typedef _Arg argument_type;
    };


  template<typename _Tp>
    struct hash : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const;
    };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const
      { return reinterpret_cast<size_t>(__p); }
    };
# 80 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3
  template<> inline size_t hash<bool>::operator()(bool __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<char>::operator()(char __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<signed char>::operator()(signed char __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned char>::operator()(unsigned char __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<wchar_t>::operator()(wchar_t __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<char16_t>::operator()(char16_t __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<char32_t>::operator()(char32_t __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<short>::operator()(short __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<int>::operator()(int __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<long>::operator()(long __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<long long>::operator()(long long __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned short>::operator()(unsigned short __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned int>::operator()(unsigned int __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned long>::operator()(unsigned long __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned long long>::operator()(unsigned long long __val) const { return static_cast<size_t>(__val); };



  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };

  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    inline size_t
    hash<float>::operator()(float __val) const
    {

      return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
    }


  template<>
    inline size_t
    hash<double>::operator()(double __val) const
    {

      return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
    }


  template<>
    __attribute__ ((__pure__)) size_t
    hash<long double>::operator()(long double __val) const;




}
# 2974 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };





  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };



}
# 54 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 1 3
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 if (true)
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   __throw_logic_error(("basic_string::_S_construct null not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 if (true)
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {

      if (__n == 0 && __a == _Alloc())
 return _S_empty_rep()._M_refdata();


      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(initializer_list<_CharT> __l, const _Alloc& __a)
    : _M_dataplus(_S_construct(__l.begin(), __l.end(), __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
                                             ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
                                             ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
                                              ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {

                           ;




       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
                                               ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {

      if (_M_rep() == &_S_empty_rep())
 return;

      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 578 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   if (true)
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 55 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 99 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 118 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale() throw();
# 127 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 137 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 152 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 165 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 177 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 191 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 206 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 225 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 253 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 269 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    static locale
    global(const locale&);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 304 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 338 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 369 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 436 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 582 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw();
# 599 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc);
# 616 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 643 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 657 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 674 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 693 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 707 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 736 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 752 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 765 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };


}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 1 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      if (true)
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      if (false)
 {
   _M_impl->_M_remove_reference();
                          ;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      if (true)
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      if (false)
 {
   __tmp->_M_remove_reference();
                          ;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }


  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }

  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      if (true)
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      if (false)
 {
   delete [] __c;
                          ;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 823 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 2 3
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 200 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 256 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 331 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 362 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 394 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 420 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 437 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef void (*event_callback) (event, ios_base&, int);
# 449 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

                                                             ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
                                                                ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 562 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 578 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 595 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 621 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 672 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 684 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 695 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 706 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 725 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 741 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 762 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 779 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }


}
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 1 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3








namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 115 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:
# 181 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 205 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      locale
      pubimbue(const locale &__loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 222 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 235 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      __streambuf_type*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }

      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }

      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }

      int
      pubsync() { return this->sync(); }
# 262 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 276 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 294 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 316 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 335 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 350 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 375 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 402 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 428 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 442 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 460 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 476 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 487 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 507 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 523 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 533 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 554 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual void
      imbue(const locale&)
      { }
# 569 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 580 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 592 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 605 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int
      sync() { return 0; }
# 627 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 643 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 665 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 678 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 702 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      pbackfail(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 720 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 746 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      overflow(int_type = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 761 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }

    private:


      basic_streambuf(const __streambuf_type& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      __streambuf_type&
      operator=(const __streambuf_type&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);



}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 808 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 2 3
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 1 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 51 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 38 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
typedef unsigned long int wctype_t;
# 56 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {







extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 155 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
extern wctype_t wctype (const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();






extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();

}
# 39 "/usr/include/wctype.h" 2 3 4





extern "C" {



typedef const __int32_t *wctrans_t;



extern wctrans_t wctrans (const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();







extern int iswalnum_l (wint_t __wc, locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, locale_t __locale) throw ();



extern wctype_t wctype_l (const char *__property, locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)
     throw ();






extern wint_t towlower_l (wint_t __wc, locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, locale_t __locale) throw ();



extern wctrans_t wctrans_l (const char *__property, locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      locale_t __locale) throw ();



}
# 52 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 2 3
# 81 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}







namespace std
{

  using std::iswblank;

}
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_base.h" 1 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;
  };


}
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3






# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 1 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 50 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT&>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      constexpr istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw ()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw ()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }




}
# 50 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 143 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 161 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 178 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 194 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 210 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 224 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 239 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 253 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 268 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 285 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 304 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 323 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 345 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char *__to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 370 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 389 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 408 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 427 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 445 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const = 0;
# 462 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 478 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const = 0;
# 495 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 514 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const = 0;
# 535 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi,
        char_type* __dest) const = 0;
# 557 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const = 0;
# 581 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const = 0;
    };
# 604 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 673 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 710 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 723 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 736 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 751 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 765 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 779 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 794 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 811 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 827 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 844 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 864 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 891 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 922 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 955 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char *__to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1004 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1021 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1037 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1054 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1074 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1097 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }
# 1123 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char) const
      { return __c; }
# 1149 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char, char* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1174 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1207 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1218 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1242 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1261 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1279 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1297 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1314 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1331 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1347 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1364 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1384 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const;
# 1406 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
# 1429 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const;
# 1455 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };



}



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_inline.h" 1 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1512 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
        _S_ominus,
        _S_oplus,
        _S_ox,
        _S_oX,
        _S_odigits,
        _S_odigits_end = _S_odigits + 16,
        _S_oudigits = _S_odigits_end,
        _S_oudigits_end = _S_oudigits + 16,
        _S_oe = _S_odigits + 14,
        _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
        { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1640 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1678 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1692 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1706 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1719 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1750 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1763 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1776 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1793 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1805 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1818 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1831 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1844 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };
# 1914 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1935 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1961 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1997 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2056 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2098 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
        iter_type
        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2169 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      void*&) const;
# 2234 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2252 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2273 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2291 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2333 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __f, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2396 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2421 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __f, __fill, __v); }

    protected:
      template<typename _ValueT>
        iter_type
        _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
        iter_type
        _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2469 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, double __v) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;
# 2527 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 1 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     if (true)
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     if (false)
       {
  delete __tmp;
                         ;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      if (true)
 {
   _M_grouping_size = __np.grouping().size();
   __grouping = new char[_M_grouping_size];
   __np.grouping().copy(__grouping, _M_grouping_size);
   _M_grouping = __grouping;
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(_M_grouping[0]) > 0
        && (_M_grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   _M_truename_size = __np.truename().size();
   __truename = new _CharT[_M_truename_size];
   __np.truename().copy(__truename, _M_truename_size);
   _M_truename = __truename;

   _M_falsename_size = __np.falsename().size();
   __falsename = new _CharT[_M_falsename_size];
   __np.falsename().copy(__falsename, _M_falsename_size);
   _M_falsename = __falsename;

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);
 }
      if (false)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
                          ;
 }
    }
# 137 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 731 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 967 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1028 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1153 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1190 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2608 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 127 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 138 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
                          ;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 191 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 212 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 247 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 285 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 297 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 337 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 351 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 380 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 400 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 420 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 439 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };


}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 473 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 2 3
# 45 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 82 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 108 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }


      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 250 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 283 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      put(char_type __c);


      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 311 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 324 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      flush();
# 335 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      pos_type
      tellp();
# 346 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 358 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
        __ostream_type&
        _M_insert(_ValueT __v);
    };
# 377 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 396 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 406 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 425 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 448 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 490 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 540 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }







  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 578 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)
    { return (__os << __x); }



}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   if (true)
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   if (true)
     { _M_write(__s, __n); }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      if (true)
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   if (true)
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   if (false)
     {
       __out._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 588 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 2 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:
# 91 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 120 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 239 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 249 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 281 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      int_type
      get();
# 295 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(char_type& __c);
# 322 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 333 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 356 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 366 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 395 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 406 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 430 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      ignore();

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore(streamsize __n, int_type __delim);
# 447 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      int_type
      peek();
# 465 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 484 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 501 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      putback(char_type __c);
# 517 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      unget();
# 535 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      int
      sync();
# 550 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      pos_type
      tellg();
# 565 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      seekg(pos_type);
# 581 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
        __istream_type&
        _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 636 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 672 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 683 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 702 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 744 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 772 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 833 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 849 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>&& __is, _Tp& __x)
    { return (__is >> __x); }



}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   if (true)
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::failbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          if (true)
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 514 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 859 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 2 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 20 "firmware/myproject.cpp" 2

# 1 "firmware/myproject.h" 1
# 23 "firmware/myproject.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 1
# 54 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h" 1
# 56 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_decl.h" 1
# 100 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 232 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 57 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h" 2
# 156 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/climits" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/climits" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/climits" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/limits.h" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/limits.h" 3
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/limits.h" 2 3
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/climits" 2 3
# 157 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h" 2
enum { CHAR_IS_SIGNED = (-127 -1) < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 220 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;
# 238 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_dt.def" 1


template <> struct ssdm_int<1 + 1024 * 0, true> { int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<2 + 1024 * 0, true> { int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<2 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<3 + 1024 * 0, true> { int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<3 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<4 + 1024 * 0, true> { int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<4 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<5 + 1024 * 0, true> { int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<5 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<6 + 1024 * 0, true> { int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<6 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<7 + 1024 * 0, true> { int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<7 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<8 + 1024 * 0, true> { int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<8 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<9 + 1024 * 0, true> { int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<9 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<10 + 1024 * 0, true> { int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<10 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<11 + 1024 * 0, true> { int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<11 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<12 + 1024 * 0, true> { int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<12 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<13 + 1024 * 0, true> { int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<13 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<14 + 1024 * 0, true> { int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<14 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<15 + 1024 * 0, true> { int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<15 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<16 + 1024 * 0, true> { int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<16 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<17 + 1024 * 0, true> { int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<17 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<18 + 1024 * 0, true> { int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<18 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<19 + 1024 * 0, true> { int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<19 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<20 + 1024 * 0, true> { int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<20 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<21 + 1024 * 0, true> { int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<21 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<22 + 1024 * 0, true> { int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<22 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<23 + 1024 * 0, true> { int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<23 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<24 + 1024 * 0, true> { int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<24 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<25 + 1024 * 0, true> { int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<25 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<26 + 1024 * 0, true> { int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<26 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<27 + 1024 * 0, true> { int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<27 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<28 + 1024 * 0, true> { int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<28 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<29 + 1024 * 0, true> { int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<29 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<30 + 1024 * 0, true> { int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<30 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<31 + 1024 * 0, true> { int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<31 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<32 + 1024 * 0, true> { int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<32 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<33 + 1024 * 0, true> { int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<33 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<34 + 1024 * 0, true> { int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<34 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<35 + 1024 * 0, true> { int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<35 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<36 + 1024 * 0, true> { int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<36 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<37 + 1024 * 0, true> { int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<37 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<38 + 1024 * 0, true> { int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<38 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<39 + 1024 * 0, true> { int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<39 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<40 + 1024 * 0, true> { int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<40 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<41 + 1024 * 0, true> { int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<41 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<42 + 1024 * 0, true> { int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<42 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<43 + 1024 * 0, true> { int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<43 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<44 + 1024 * 0, true> { int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<44 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<45 + 1024 * 0, true> { int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<45 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<46 + 1024 * 0, true> { int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<46 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<47 + 1024 * 0, true> { int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<47 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<48 + 1024 * 0, true> { int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<48 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<49 + 1024 * 0, true> { int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<49 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<50 + 1024 * 0, true> { int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<50 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<51 + 1024 * 0, true> { int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<51 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<52 + 1024 * 0, true> { int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<52 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<53 + 1024 * 0, true> { int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<53 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<54 + 1024 * 0, true> { int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<54 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<55 + 1024 * 0, true> { int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<55 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<56 + 1024 * 0, true> { int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<56 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<57 + 1024 * 0, true> { int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<57 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<58 + 1024 * 0, true> { int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<58 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<59 + 1024 * 0, true> { int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<59 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<60 + 1024 * 0, true> { int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<60 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<61 + 1024 * 0, true> { int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<61 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<62 + 1024 * 0, true> { int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<62 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<63 + 1024 * 0, true> { int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<63 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, false>(){}; };


template <> struct ssdm_int<64 + 1024 * 0, true> { int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<64 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, false>(){}; };




template <> struct ssdm_int<65 + 1024 * 0, true> { int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<65 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<66 + 1024 * 0, true> { int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<66 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<67 + 1024 * 0, true> { int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<67 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<68 + 1024 * 0, true> { int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<68 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<69 + 1024 * 0, true> { int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<69 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<70 + 1024 * 0, true> { int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<70 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<71 + 1024 * 0, true> { int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<71 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<72 + 1024 * 0, true> { int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<72 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<73 + 1024 * 0, true> { int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<73 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<74 + 1024 * 0, true> { int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<74 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<75 + 1024 * 0, true> { int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<75 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<76 + 1024 * 0, true> { int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<76 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<77 + 1024 * 0, true> { int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<77 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<78 + 1024 * 0, true> { int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<78 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<79 + 1024 * 0, true> { int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<79 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<80 + 1024 * 0, true> { int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<80 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<81 + 1024 * 0, true> { int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<81 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<82 + 1024 * 0, true> { int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<82 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<83 + 1024 * 0, true> { int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<83 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<84 + 1024 * 0, true> { int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<84 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<85 + 1024 * 0, true> { int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<85 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<86 + 1024 * 0, true> { int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<86 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<87 + 1024 * 0, true> { int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<87 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<88 + 1024 * 0, true> { int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<88 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<89 + 1024 * 0, true> { int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<89 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<90 + 1024 * 0, true> { int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<90 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<91 + 1024 * 0, true> { int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<91 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<92 + 1024 * 0, true> { int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<92 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<93 + 1024 * 0, true> { int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<93 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<94 + 1024 * 0, true> { int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<94 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<95 + 1024 * 0, true> { int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<95 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<96 + 1024 * 0, true> { int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<96 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<97 + 1024 * 0, true> { int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<97 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<98 + 1024 * 0, true> { int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<98 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<99 + 1024 * 0, true> { int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<99 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<100 + 1024 * 0, true> { int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<100 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<101 + 1024 * 0, true> { int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<101 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<102 + 1024 * 0, true> { int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<102 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<103 + 1024 * 0, true> { int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<103 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<104 + 1024 * 0, true> { int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<104 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<105 + 1024 * 0, true> { int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<105 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<106 + 1024 * 0, true> { int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<106 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<107 + 1024 * 0, true> { int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<107 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<108 + 1024 * 0, true> { int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<108 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<109 + 1024 * 0, true> { int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<109 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<110 + 1024 * 0, true> { int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<110 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<111 + 1024 * 0, true> { int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<111 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<112 + 1024 * 0, true> { int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<112 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<113 + 1024 * 0, true> { int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<113 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<114 + 1024 * 0, true> { int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<114 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<115 + 1024 * 0, true> { int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<115 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<116 + 1024 * 0, true> { int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<116 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<117 + 1024 * 0, true> { int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<117 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<118 + 1024 * 0, true> { int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<118 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<119 + 1024 * 0, true> { int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<119 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<120 + 1024 * 0, true> { int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<120 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<121 + 1024 * 0, true> { int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<121 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<122 + 1024 * 0, true> { int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<122 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<123 + 1024 * 0, true> { int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<123 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<124 + 1024 * 0, true> { int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<124 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<125 + 1024 * 0, true> { int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<125 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<126 + 1024 * 0, true> { int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<126 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<127 + 1024 * 0, true> { int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<127 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<128 + 1024 * 0, true> { int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<128 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, false>(){}; };






template <> struct ssdm_int<129 + 1024 * 0, true> { int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<129 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<130 + 1024 * 0, true> { int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<130 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<131 + 1024 * 0, true> { int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<131 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<132 + 1024 * 0, true> { int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<132 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<133 + 1024 * 0, true> { int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<133 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<134 + 1024 * 0, true> { int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<134 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<135 + 1024 * 0, true> { int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<135 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<136 + 1024 * 0, true> { int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<136 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<137 + 1024 * 0, true> { int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<137 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<138 + 1024 * 0, true> { int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<138 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<139 + 1024 * 0, true> { int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<139 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<140 + 1024 * 0, true> { int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<140 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<141 + 1024 * 0, true> { int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<141 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<142 + 1024 * 0, true> { int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<142 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<143 + 1024 * 0, true> { int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<143 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<144 + 1024 * 0, true> { int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<144 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<145 + 1024 * 0, true> { int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<145 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<146 + 1024 * 0, true> { int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<146 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<147 + 1024 * 0, true> { int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<147 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<148 + 1024 * 0, true> { int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<148 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<149 + 1024 * 0, true> { int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<149 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<150 + 1024 * 0, true> { int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<150 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<151 + 1024 * 0, true> { int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<151 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<152 + 1024 * 0, true> { int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<152 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<153 + 1024 * 0, true> { int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<153 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<154 + 1024 * 0, true> { int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<154 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<155 + 1024 * 0, true> { int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<155 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<156 + 1024 * 0, true> { int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<156 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<157 + 1024 * 0, true> { int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<157 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<158 + 1024 * 0, true> { int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<158 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<159 + 1024 * 0, true> { int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<159 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<160 + 1024 * 0, true> { int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<160 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<161 + 1024 * 0, true> { int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<161 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<162 + 1024 * 0, true> { int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<162 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<163 + 1024 * 0, true> { int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<163 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<164 + 1024 * 0, true> { int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<164 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<165 + 1024 * 0, true> { int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<165 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<166 + 1024 * 0, true> { int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<166 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<167 + 1024 * 0, true> { int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<167 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<168 + 1024 * 0, true> { int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<168 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<169 + 1024 * 0, true> { int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<169 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<170 + 1024 * 0, true> { int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<170 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<171 + 1024 * 0, true> { int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<171 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<172 + 1024 * 0, true> { int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<172 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<173 + 1024 * 0, true> { int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<173 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<174 + 1024 * 0, true> { int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<174 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<175 + 1024 * 0, true> { int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<175 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<176 + 1024 * 0, true> { int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<176 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<177 + 1024 * 0, true> { int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<177 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<178 + 1024 * 0, true> { int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<178 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<179 + 1024 * 0, true> { int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<179 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<180 + 1024 * 0, true> { int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<180 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<181 + 1024 * 0, true> { int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<181 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<182 + 1024 * 0, true> { int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<182 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<183 + 1024 * 0, true> { int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<183 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<184 + 1024 * 0, true> { int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<184 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<185 + 1024 * 0, true> { int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<185 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<186 + 1024 * 0, true> { int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<186 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<187 + 1024 * 0, true> { int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<187 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<188 + 1024 * 0, true> { int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<188 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<189 + 1024 * 0, true> { int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<189 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<190 + 1024 * 0, true> { int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<190 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<191 + 1024 * 0, true> { int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<191 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<192 + 1024 * 0, true> { int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<192 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<193 + 1024 * 0, true> { int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<193 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<194 + 1024 * 0, true> { int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<194 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<195 + 1024 * 0, true> { int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<195 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<196 + 1024 * 0, true> { int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<196 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<197 + 1024 * 0, true> { int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<197 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<198 + 1024 * 0, true> { int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<198 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<199 + 1024 * 0, true> { int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<199 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<200 + 1024 * 0, true> { int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<200 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<201 + 1024 * 0, true> { int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<201 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<202 + 1024 * 0, true> { int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<202 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<203 + 1024 * 0, true> { int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<203 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<204 + 1024 * 0, true> { int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<204 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<205 + 1024 * 0, true> { int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<205 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<206 + 1024 * 0, true> { int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<206 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<207 + 1024 * 0, true> { int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<207 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<208 + 1024 * 0, true> { int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<208 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<209 + 1024 * 0, true> { int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<209 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<210 + 1024 * 0, true> { int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<210 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<211 + 1024 * 0, true> { int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<211 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<212 + 1024 * 0, true> { int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<212 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<213 + 1024 * 0, true> { int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<213 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<214 + 1024 * 0, true> { int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<214 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<215 + 1024 * 0, true> { int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<215 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<216 + 1024 * 0, true> { int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<216 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<217 + 1024 * 0, true> { int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<217 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<218 + 1024 * 0, true> { int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<218 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<219 + 1024 * 0, true> { int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<219 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<220 + 1024 * 0, true> { int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<220 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<221 + 1024 * 0, true> { int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<221 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<222 + 1024 * 0, true> { int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<222 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<223 + 1024 * 0, true> { int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<223 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<224 + 1024 * 0, true> { int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<224 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<225 + 1024 * 0, true> { int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<225 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<226 + 1024 * 0, true> { int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<226 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<227 + 1024 * 0, true> { int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<227 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<228 + 1024 * 0, true> { int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<228 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<229 + 1024 * 0, true> { int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<229 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<230 + 1024 * 0, true> { int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<230 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<231 + 1024 * 0, true> { int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<231 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<232 + 1024 * 0, true> { int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<232 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<233 + 1024 * 0, true> { int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<233 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<234 + 1024 * 0, true> { int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<234 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<235 + 1024 * 0, true> { int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<235 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<236 + 1024 * 0, true> { int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<236 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<237 + 1024 * 0, true> { int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<237 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<238 + 1024 * 0, true> { int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<238 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<239 + 1024 * 0, true> { int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<239 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<240 + 1024 * 0, true> { int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<240 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<241 + 1024 * 0, true> { int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<241 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<242 + 1024 * 0, true> { int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<242 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<243 + 1024 * 0, true> { int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<243 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<244 + 1024 * 0, true> { int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<244 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<245 + 1024 * 0, true> { int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<245 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<246 + 1024 * 0, true> { int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<246 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<247 + 1024 * 0, true> { int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<247 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<248 + 1024 * 0, true> { int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<248 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<249 + 1024 * 0, true> { int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<249 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<250 + 1024 * 0, true> { int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<250 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<251 + 1024 * 0, true> { int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<251 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<252 + 1024 * 0, true> { int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<252 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<253 + 1024 * 0, true> { int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<253 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<254 + 1024 * 0, true> { int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<254 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<255 + 1024 * 0, true> { int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<255 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<256 + 1024 * 0, true> { int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<256 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<257 + 1024 * 0, true> { int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<257 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<258 + 1024 * 0, true> { int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<258 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<259 + 1024 * 0, true> { int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<259 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<260 + 1024 * 0, true> { int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<260 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<261 + 1024 * 0, true> { int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<261 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<262 + 1024 * 0, true> { int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<262 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<263 + 1024 * 0, true> { int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<263 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<264 + 1024 * 0, true> { int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<264 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<265 + 1024 * 0, true> { int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<265 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<266 + 1024 * 0, true> { int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<266 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<267 + 1024 * 0, true> { int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<267 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<268 + 1024 * 0, true> { int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<268 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<269 + 1024 * 0, true> { int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<269 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<270 + 1024 * 0, true> { int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<270 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<271 + 1024 * 0, true> { int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<271 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<272 + 1024 * 0, true> { int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<272 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<273 + 1024 * 0, true> { int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<273 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<274 + 1024 * 0, true> { int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<274 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<275 + 1024 * 0, true> { int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<275 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<276 + 1024 * 0, true> { int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<276 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<277 + 1024 * 0, true> { int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<277 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<278 + 1024 * 0, true> { int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<278 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<279 + 1024 * 0, true> { int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<279 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<280 + 1024 * 0, true> { int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<280 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<281 + 1024 * 0, true> { int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<281 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<282 + 1024 * 0, true> { int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<282 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<283 + 1024 * 0, true> { int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<283 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<284 + 1024 * 0, true> { int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<284 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<285 + 1024 * 0, true> { int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<285 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<286 + 1024 * 0, true> { int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<286 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<287 + 1024 * 0, true> { int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<287 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<288 + 1024 * 0, true> { int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<288 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<289 + 1024 * 0, true> { int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<289 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<290 + 1024 * 0, true> { int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<290 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<291 + 1024 * 0, true> { int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<291 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<292 + 1024 * 0, true> { int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<292 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<293 + 1024 * 0, true> { int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<293 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<294 + 1024 * 0, true> { int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<294 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<295 + 1024 * 0, true> { int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<295 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<296 + 1024 * 0, true> { int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<296 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<297 + 1024 * 0, true> { int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<297 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<298 + 1024 * 0, true> { int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<298 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<299 + 1024 * 0, true> { int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<299 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<300 + 1024 * 0, true> { int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<300 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<301 + 1024 * 0, true> { int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<301 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<302 + 1024 * 0, true> { int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<302 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<303 + 1024 * 0, true> { int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<303 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<304 + 1024 * 0, true> { int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<304 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<305 + 1024 * 0, true> { int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<305 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<306 + 1024 * 0, true> { int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<306 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<307 + 1024 * 0, true> { int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<307 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<308 + 1024 * 0, true> { int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<308 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<309 + 1024 * 0, true> { int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<309 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<310 + 1024 * 0, true> { int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<310 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<311 + 1024 * 0, true> { int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<311 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<312 + 1024 * 0, true> { int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<312 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<313 + 1024 * 0, true> { int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<313 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<314 + 1024 * 0, true> { int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<314 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<315 + 1024 * 0, true> { int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<315 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<316 + 1024 * 0, true> { int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<316 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<317 + 1024 * 0, true> { int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<317 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<318 + 1024 * 0, true> { int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<318 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<319 + 1024 * 0, true> { int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<319 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<320 + 1024 * 0, true> { int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<320 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<321 + 1024 * 0, true> { int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<321 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<322 + 1024 * 0, true> { int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<322 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<323 + 1024 * 0, true> { int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<323 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<324 + 1024 * 0, true> { int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<324 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<325 + 1024 * 0, true> { int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<325 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<326 + 1024 * 0, true> { int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<326 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<327 + 1024 * 0, true> { int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<327 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<328 + 1024 * 0, true> { int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<328 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<329 + 1024 * 0, true> { int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<329 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<330 + 1024 * 0, true> { int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<330 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<331 + 1024 * 0, true> { int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<331 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<332 + 1024 * 0, true> { int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<332 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<333 + 1024 * 0, true> { int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<333 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<334 + 1024 * 0, true> { int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<334 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<335 + 1024 * 0, true> { int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<335 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<336 + 1024 * 0, true> { int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<336 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<337 + 1024 * 0, true> { int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<337 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<338 + 1024 * 0, true> { int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<338 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<339 + 1024 * 0, true> { int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<339 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<340 + 1024 * 0, true> { int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<340 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<341 + 1024 * 0, true> { int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<341 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<342 + 1024 * 0, true> { int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<342 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<343 + 1024 * 0, true> { int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<343 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<344 + 1024 * 0, true> { int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<344 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<345 + 1024 * 0, true> { int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<345 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<346 + 1024 * 0, true> { int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<346 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<347 + 1024 * 0, true> { int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<347 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<348 + 1024 * 0, true> { int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<348 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<349 + 1024 * 0, true> { int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<349 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<350 + 1024 * 0, true> { int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<350 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<351 + 1024 * 0, true> { int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<351 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<352 + 1024 * 0, true> { int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<352 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<353 + 1024 * 0, true> { int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<353 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<354 + 1024 * 0, true> { int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<354 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<355 + 1024 * 0, true> { int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<355 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<356 + 1024 * 0, true> { int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<356 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<357 + 1024 * 0, true> { int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<357 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<358 + 1024 * 0, true> { int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<358 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<359 + 1024 * 0, true> { int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<359 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<360 + 1024 * 0, true> { int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<360 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<361 + 1024 * 0, true> { int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<361 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<362 + 1024 * 0, true> { int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<362 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<363 + 1024 * 0, true> { int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<363 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<364 + 1024 * 0, true> { int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<364 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<365 + 1024 * 0, true> { int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<365 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<366 + 1024 * 0, true> { int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<366 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<367 + 1024 * 0, true> { int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<367 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<368 + 1024 * 0, true> { int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<368 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<369 + 1024 * 0, true> { int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<369 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<370 + 1024 * 0, true> { int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<370 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<371 + 1024 * 0, true> { int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<371 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<372 + 1024 * 0, true> { int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<372 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<373 + 1024 * 0, true> { int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<373 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<374 + 1024 * 0, true> { int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<374 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<375 + 1024 * 0, true> { int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<375 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<376 + 1024 * 0, true> { int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<376 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<377 + 1024 * 0, true> { int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<377 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<378 + 1024 * 0, true> { int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<378 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<379 + 1024 * 0, true> { int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<379 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<380 + 1024 * 0, true> { int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<380 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<381 + 1024 * 0, true> { int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<381 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<382 + 1024 * 0, true> { int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<382 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<383 + 1024 * 0, true> { int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<383 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<384 + 1024 * 0, true> { int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<384 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<385 + 1024 * 0, true> { int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<385 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<386 + 1024 * 0, true> { int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<386 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<387 + 1024 * 0, true> { int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<387 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<388 + 1024 * 0, true> { int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<388 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<389 + 1024 * 0, true> { int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<389 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<390 + 1024 * 0, true> { int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<390 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<391 + 1024 * 0, true> { int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<391 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<392 + 1024 * 0, true> { int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<392 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<393 + 1024 * 0, true> { int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<393 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<394 + 1024 * 0, true> { int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<394 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<395 + 1024 * 0, true> { int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<395 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<396 + 1024 * 0, true> { int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<396 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<397 + 1024 * 0, true> { int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<397 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<398 + 1024 * 0, true> { int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<398 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<399 + 1024 * 0, true> { int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<399 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<400 + 1024 * 0, true> { int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<400 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<401 + 1024 * 0, true> { int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<401 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<402 + 1024 * 0, true> { int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<402 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<403 + 1024 * 0, true> { int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<403 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<404 + 1024 * 0, true> { int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<404 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<405 + 1024 * 0, true> { int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<405 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<406 + 1024 * 0, true> { int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<406 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<407 + 1024 * 0, true> { int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<407 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<408 + 1024 * 0, true> { int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<408 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<409 + 1024 * 0, true> { int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<409 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<410 + 1024 * 0, true> { int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<410 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<411 + 1024 * 0, true> { int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<411 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<412 + 1024 * 0, true> { int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<412 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<413 + 1024 * 0, true> { int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<413 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<414 + 1024 * 0, true> { int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<414 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<415 + 1024 * 0, true> { int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<415 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<416 + 1024 * 0, true> { int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<416 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<417 + 1024 * 0, true> { int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<417 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<418 + 1024 * 0, true> { int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<418 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<419 + 1024 * 0, true> { int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<419 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<420 + 1024 * 0, true> { int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<420 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<421 + 1024 * 0, true> { int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<421 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<422 + 1024 * 0, true> { int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<422 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<423 + 1024 * 0, true> { int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<423 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<424 + 1024 * 0, true> { int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<424 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<425 + 1024 * 0, true> { int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<425 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<426 + 1024 * 0, true> { int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<426 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<427 + 1024 * 0, true> { int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<427 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<428 + 1024 * 0, true> { int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<428 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<429 + 1024 * 0, true> { int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<429 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<430 + 1024 * 0, true> { int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<430 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<431 + 1024 * 0, true> { int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<431 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<432 + 1024 * 0, true> { int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<432 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<433 + 1024 * 0, true> { int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<433 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<434 + 1024 * 0, true> { int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<434 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<435 + 1024 * 0, true> { int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<435 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<436 + 1024 * 0, true> { int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<436 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<437 + 1024 * 0, true> { int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<437 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<438 + 1024 * 0, true> { int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<438 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<439 + 1024 * 0, true> { int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<439 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<440 + 1024 * 0, true> { int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<440 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<441 + 1024 * 0, true> { int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<441 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<442 + 1024 * 0, true> { int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<442 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<443 + 1024 * 0, true> { int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<443 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<444 + 1024 * 0, true> { int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<444 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<445 + 1024 * 0, true> { int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<445 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<446 + 1024 * 0, true> { int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<446 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<447 + 1024 * 0, true> { int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<447 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<448 + 1024 * 0, true> { int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<448 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<449 + 1024 * 0, true> { int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<449 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<450 + 1024 * 0, true> { int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<450 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<451 + 1024 * 0, true> { int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<451 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<452 + 1024 * 0, true> { int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<452 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<453 + 1024 * 0, true> { int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<453 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<454 + 1024 * 0, true> { int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<454 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<455 + 1024 * 0, true> { int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<455 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<456 + 1024 * 0, true> { int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<456 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<457 + 1024 * 0, true> { int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<457 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<458 + 1024 * 0, true> { int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<458 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<459 + 1024 * 0, true> { int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<459 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<460 + 1024 * 0, true> { int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<460 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<461 + 1024 * 0, true> { int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<461 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<462 + 1024 * 0, true> { int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<462 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<463 + 1024 * 0, true> { int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<463 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<464 + 1024 * 0, true> { int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<464 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<465 + 1024 * 0, true> { int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<465 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<466 + 1024 * 0, true> { int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<466 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<467 + 1024 * 0, true> { int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<467 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<468 + 1024 * 0, true> { int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<468 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<469 + 1024 * 0, true> { int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<469 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<470 + 1024 * 0, true> { int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<470 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<471 + 1024 * 0, true> { int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<471 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<472 + 1024 * 0, true> { int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<472 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<473 + 1024 * 0, true> { int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<473 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<474 + 1024 * 0, true> { int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<474 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<475 + 1024 * 0, true> { int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<475 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<476 + 1024 * 0, true> { int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<476 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<477 + 1024 * 0, true> { int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<477 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<478 + 1024 * 0, true> { int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<478 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<479 + 1024 * 0, true> { int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<479 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<480 + 1024 * 0, true> { int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<480 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<481 + 1024 * 0, true> { int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<481 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<482 + 1024 * 0, true> { int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<482 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<483 + 1024 * 0, true> { int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<483 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<484 + 1024 * 0, true> { int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<484 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<485 + 1024 * 0, true> { int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<485 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<486 + 1024 * 0, true> { int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<486 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<487 + 1024 * 0, true> { int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<487 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<488 + 1024 * 0, true> { int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<488 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<489 + 1024 * 0, true> { int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<489 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<490 + 1024 * 0, true> { int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<490 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<491 + 1024 * 0, true> { int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<491 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<492 + 1024 * 0, true> { int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<492 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<493 + 1024 * 0, true> { int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<493 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<494 + 1024 * 0, true> { int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<494 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<495 + 1024 * 0, true> { int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<495 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<496 + 1024 * 0, true> { int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<496 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<497 + 1024 * 0, true> { int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<497 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<498 + 1024 * 0, true> { int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<498 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<499 + 1024 * 0, true> { int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<499 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<500 + 1024 * 0, true> { int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<500 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<501 + 1024 * 0, true> { int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<501 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<502 + 1024 * 0, true> { int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<502 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<503 + 1024 * 0, true> { int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<503 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<504 + 1024 * 0, true> { int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<504 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<505 + 1024 * 0, true> { int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<505 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<506 + 1024 * 0, true> { int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<506 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<507 + 1024 * 0, true> { int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<507 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<508 + 1024 * 0, true> { int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<508 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<509 + 1024 * 0, true> { int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<509 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<510 + 1024 * 0, true> { int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<510 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<511 + 1024 * 0, true> { int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<511 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<512 + 1024 * 0, true> { int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<512 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<513 + 1024 * 0, true> { int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<513 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<514 + 1024 * 0, true> { int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<514 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<515 + 1024 * 0, true> { int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<515 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<516 + 1024 * 0, true> { int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<516 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<517 + 1024 * 0, true> { int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<517 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<518 + 1024 * 0, true> { int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<518 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<519 + 1024 * 0, true> { int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<519 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<520 + 1024 * 0, true> { int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<520 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<521 + 1024 * 0, true> { int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<521 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<522 + 1024 * 0, true> { int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<522 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<523 + 1024 * 0, true> { int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<523 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<524 + 1024 * 0, true> { int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<524 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<525 + 1024 * 0, true> { int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<525 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<526 + 1024 * 0, true> { int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<526 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<527 + 1024 * 0, true> { int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<527 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<528 + 1024 * 0, true> { int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<528 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<529 + 1024 * 0, true> { int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<529 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<530 + 1024 * 0, true> { int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<530 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<531 + 1024 * 0, true> { int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<531 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<532 + 1024 * 0, true> { int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<532 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<533 + 1024 * 0, true> { int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<533 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<534 + 1024 * 0, true> { int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<534 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<535 + 1024 * 0, true> { int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<535 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<536 + 1024 * 0, true> { int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<536 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<537 + 1024 * 0, true> { int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<537 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<538 + 1024 * 0, true> { int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<538 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<539 + 1024 * 0, true> { int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<539 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<540 + 1024 * 0, true> { int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<540 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<541 + 1024 * 0, true> { int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<541 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<542 + 1024 * 0, true> { int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<542 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<543 + 1024 * 0, true> { int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<543 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<544 + 1024 * 0, true> { int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<544 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<545 + 1024 * 0, true> { int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<545 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<546 + 1024 * 0, true> { int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<546 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<547 + 1024 * 0, true> { int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<547 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<548 + 1024 * 0, true> { int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<548 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<549 + 1024 * 0, true> { int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<549 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<550 + 1024 * 0, true> { int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<550 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<551 + 1024 * 0, true> { int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<551 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<552 + 1024 * 0, true> { int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<552 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<553 + 1024 * 0, true> { int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<553 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<554 + 1024 * 0, true> { int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<554 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<555 + 1024 * 0, true> { int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<555 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<556 + 1024 * 0, true> { int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<556 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<557 + 1024 * 0, true> { int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<557 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<558 + 1024 * 0, true> { int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<558 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<559 + 1024 * 0, true> { int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<559 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<560 + 1024 * 0, true> { int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<560 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<561 + 1024 * 0, true> { int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<561 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<562 + 1024 * 0, true> { int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<562 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<563 + 1024 * 0, true> { int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<563 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<564 + 1024 * 0, true> { int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<564 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<565 + 1024 * 0, true> { int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<565 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<566 + 1024 * 0, true> { int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<566 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<567 + 1024 * 0, true> { int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<567 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<568 + 1024 * 0, true> { int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<568 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<569 + 1024 * 0, true> { int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<569 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<570 + 1024 * 0, true> { int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<570 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<571 + 1024 * 0, true> { int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<571 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<572 + 1024 * 0, true> { int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<572 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<573 + 1024 * 0, true> { int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<573 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<574 + 1024 * 0, true> { int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<574 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<575 + 1024 * 0, true> { int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<575 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<576 + 1024 * 0, true> { int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<576 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<577 + 1024 * 0, true> { int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<577 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<578 + 1024 * 0, true> { int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<578 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<579 + 1024 * 0, true> { int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<579 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<580 + 1024 * 0, true> { int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<580 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<581 + 1024 * 0, true> { int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<581 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<582 + 1024 * 0, true> { int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<582 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<583 + 1024 * 0, true> { int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<583 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<584 + 1024 * 0, true> { int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<584 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<585 + 1024 * 0, true> { int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<585 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<586 + 1024 * 0, true> { int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<586 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<587 + 1024 * 0, true> { int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<587 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<588 + 1024 * 0, true> { int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<588 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<589 + 1024 * 0, true> { int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<589 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<590 + 1024 * 0, true> { int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<590 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<591 + 1024 * 0, true> { int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<591 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<592 + 1024 * 0, true> { int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<592 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<593 + 1024 * 0, true> { int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<593 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<594 + 1024 * 0, true> { int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<594 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<595 + 1024 * 0, true> { int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<595 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<596 + 1024 * 0, true> { int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<596 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<597 + 1024 * 0, true> { int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<597 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<598 + 1024 * 0, true> { int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<598 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<599 + 1024 * 0, true> { int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<599 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<600 + 1024 * 0, true> { int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<600 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<601 + 1024 * 0, true> { int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<601 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<602 + 1024 * 0, true> { int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<602 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<603 + 1024 * 0, true> { int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<603 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<604 + 1024 * 0, true> { int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<604 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<605 + 1024 * 0, true> { int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<605 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<606 + 1024 * 0, true> { int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<606 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<607 + 1024 * 0, true> { int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<607 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<608 + 1024 * 0, true> { int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<608 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<609 + 1024 * 0, true> { int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<609 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<610 + 1024 * 0, true> { int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<610 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<611 + 1024 * 0, true> { int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<611 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<612 + 1024 * 0, true> { int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<612 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<613 + 1024 * 0, true> { int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<613 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<614 + 1024 * 0, true> { int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<614 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<615 + 1024 * 0, true> { int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<615 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<616 + 1024 * 0, true> { int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<616 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<617 + 1024 * 0, true> { int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<617 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<618 + 1024 * 0, true> { int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<618 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<619 + 1024 * 0, true> { int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<619 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<620 + 1024 * 0, true> { int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<620 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<621 + 1024 * 0, true> { int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<621 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<622 + 1024 * 0, true> { int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<622 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<623 + 1024 * 0, true> { int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<623 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<624 + 1024 * 0, true> { int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<624 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<625 + 1024 * 0, true> { int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<625 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<626 + 1024 * 0, true> { int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<626 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<627 + 1024 * 0, true> { int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<627 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<628 + 1024 * 0, true> { int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<628 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<629 + 1024 * 0, true> { int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<629 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<630 + 1024 * 0, true> { int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<630 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<631 + 1024 * 0, true> { int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<631 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<632 + 1024 * 0, true> { int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<632 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<633 + 1024 * 0, true> { int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<633 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<634 + 1024 * 0, true> { int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<634 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<635 + 1024 * 0, true> { int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<635 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<636 + 1024 * 0, true> { int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<636 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<637 + 1024 * 0, true> { int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<637 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<638 + 1024 * 0, true> { int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<638 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<639 + 1024 * 0, true> { int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<639 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<640 + 1024 * 0, true> { int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<640 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<641 + 1024 * 0, true> { int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<641 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<642 + 1024 * 0, true> { int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<642 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<643 + 1024 * 0, true> { int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<643 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<644 + 1024 * 0, true> { int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<644 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<645 + 1024 * 0, true> { int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<645 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<646 + 1024 * 0, true> { int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<646 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<647 + 1024 * 0, true> { int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<647 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<648 + 1024 * 0, true> { int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<648 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<649 + 1024 * 0, true> { int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<649 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<650 + 1024 * 0, true> { int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<650 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<651 + 1024 * 0, true> { int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<651 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<652 + 1024 * 0, true> { int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<652 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<653 + 1024 * 0, true> { int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<653 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<654 + 1024 * 0, true> { int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<654 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<655 + 1024 * 0, true> { int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<655 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<656 + 1024 * 0, true> { int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<656 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<657 + 1024 * 0, true> { int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<657 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<658 + 1024 * 0, true> { int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<658 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<659 + 1024 * 0, true> { int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<659 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<660 + 1024 * 0, true> { int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<660 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<661 + 1024 * 0, true> { int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<661 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<662 + 1024 * 0, true> { int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<662 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<663 + 1024 * 0, true> { int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<663 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<664 + 1024 * 0, true> { int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<664 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<665 + 1024 * 0, true> { int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<665 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<666 + 1024 * 0, true> { int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<666 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<667 + 1024 * 0, true> { int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<667 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<668 + 1024 * 0, true> { int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<668 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<669 + 1024 * 0, true> { int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<669 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<670 + 1024 * 0, true> { int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<670 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<671 + 1024 * 0, true> { int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<671 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<672 + 1024 * 0, true> { int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<672 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<673 + 1024 * 0, true> { int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<673 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<674 + 1024 * 0, true> { int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<674 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<675 + 1024 * 0, true> { int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<675 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<676 + 1024 * 0, true> { int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<676 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<677 + 1024 * 0, true> { int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<677 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<678 + 1024 * 0, true> { int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<678 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<679 + 1024 * 0, true> { int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<679 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<680 + 1024 * 0, true> { int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<680 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<681 + 1024 * 0, true> { int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<681 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<682 + 1024 * 0, true> { int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<682 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<683 + 1024 * 0, true> { int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<683 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<684 + 1024 * 0, true> { int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<684 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<685 + 1024 * 0, true> { int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<685 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<686 + 1024 * 0, true> { int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<686 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<687 + 1024 * 0, true> { int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<687 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<688 + 1024 * 0, true> { int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<688 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<689 + 1024 * 0, true> { int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<689 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<690 + 1024 * 0, true> { int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<690 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<691 + 1024 * 0, true> { int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<691 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<692 + 1024 * 0, true> { int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<692 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<693 + 1024 * 0, true> { int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<693 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<694 + 1024 * 0, true> { int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<694 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<695 + 1024 * 0, true> { int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<695 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<696 + 1024 * 0, true> { int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<696 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<697 + 1024 * 0, true> { int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<697 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<698 + 1024 * 0, true> { int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<698 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<699 + 1024 * 0, true> { int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<699 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<700 + 1024 * 0, true> { int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<700 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<701 + 1024 * 0, true> { int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<701 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<702 + 1024 * 0, true> { int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<702 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<703 + 1024 * 0, true> { int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<703 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<704 + 1024 * 0, true> { int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<704 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<705 + 1024 * 0, true> { int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<705 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<706 + 1024 * 0, true> { int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<706 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<707 + 1024 * 0, true> { int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<707 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<708 + 1024 * 0, true> { int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<708 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<709 + 1024 * 0, true> { int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<709 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<710 + 1024 * 0, true> { int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<710 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<711 + 1024 * 0, true> { int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<711 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<712 + 1024 * 0, true> { int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<712 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<713 + 1024 * 0, true> { int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<713 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<714 + 1024 * 0, true> { int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<714 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<715 + 1024 * 0, true> { int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<715 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<716 + 1024 * 0, true> { int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<716 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<717 + 1024 * 0, true> { int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<717 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<718 + 1024 * 0, true> { int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<718 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<719 + 1024 * 0, true> { int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<719 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<720 + 1024 * 0, true> { int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<720 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<721 + 1024 * 0, true> { int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<721 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<722 + 1024 * 0, true> { int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<722 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<723 + 1024 * 0, true> { int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<723 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<724 + 1024 * 0, true> { int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<724 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<725 + 1024 * 0, true> { int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<725 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<726 + 1024 * 0, true> { int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<726 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<727 + 1024 * 0, true> { int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<727 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<728 + 1024 * 0, true> { int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<728 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<729 + 1024 * 0, true> { int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<729 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<730 + 1024 * 0, true> { int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<730 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<731 + 1024 * 0, true> { int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<731 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<732 + 1024 * 0, true> { int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<732 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<733 + 1024 * 0, true> { int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<733 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<734 + 1024 * 0, true> { int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<734 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<735 + 1024 * 0, true> { int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<735 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<736 + 1024 * 0, true> { int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<736 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<737 + 1024 * 0, true> { int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<737 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<738 + 1024 * 0, true> { int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<738 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<739 + 1024 * 0, true> { int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<739 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<740 + 1024 * 0, true> { int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<740 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<741 + 1024 * 0, true> { int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<741 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<742 + 1024 * 0, true> { int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<742 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<743 + 1024 * 0, true> { int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<743 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<744 + 1024 * 0, true> { int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<744 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<745 + 1024 * 0, true> { int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<745 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<746 + 1024 * 0, true> { int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<746 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<747 + 1024 * 0, true> { int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<747 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<748 + 1024 * 0, true> { int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<748 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<749 + 1024 * 0, true> { int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<749 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<750 + 1024 * 0, true> { int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<750 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<751 + 1024 * 0, true> { int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<751 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<752 + 1024 * 0, true> { int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<752 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<753 + 1024 * 0, true> { int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<753 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<754 + 1024 * 0, true> { int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<754 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<755 + 1024 * 0, true> { int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<755 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<756 + 1024 * 0, true> { int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<756 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<757 + 1024 * 0, true> { int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<757 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<758 + 1024 * 0, true> { int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<758 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<759 + 1024 * 0, true> { int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<759 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<760 + 1024 * 0, true> { int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<760 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<761 + 1024 * 0, true> { int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<761 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<762 + 1024 * 0, true> { int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<762 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<763 + 1024 * 0, true> { int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<763 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<764 + 1024 * 0, true> { int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<764 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<765 + 1024 * 0, true> { int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<765 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<766 + 1024 * 0, true> { int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<766 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<767 + 1024 * 0, true> { int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<767 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<768 + 1024 * 0, true> { int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<768 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<769 + 1024 * 0, true> { int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<769 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<770 + 1024 * 0, true> { int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<770 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<771 + 1024 * 0, true> { int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<771 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<772 + 1024 * 0, true> { int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<772 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<773 + 1024 * 0, true> { int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<773 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<774 + 1024 * 0, true> { int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<774 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<775 + 1024 * 0, true> { int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<775 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<776 + 1024 * 0, true> { int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<776 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<777 + 1024 * 0, true> { int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<777 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<778 + 1024 * 0, true> { int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<778 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<779 + 1024 * 0, true> { int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<779 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<780 + 1024 * 0, true> { int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<780 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<781 + 1024 * 0, true> { int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<781 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<782 + 1024 * 0, true> { int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<782 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<783 + 1024 * 0, true> { int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<783 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<784 + 1024 * 0, true> { int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<784 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<785 + 1024 * 0, true> { int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<785 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<786 + 1024 * 0, true> { int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<786 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<787 + 1024 * 0, true> { int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<787 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<788 + 1024 * 0, true> { int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<788 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<789 + 1024 * 0, true> { int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<789 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<790 + 1024 * 0, true> { int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<790 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<791 + 1024 * 0, true> { int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<791 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<792 + 1024 * 0, true> { int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<792 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<793 + 1024 * 0, true> { int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<793 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<794 + 1024 * 0, true> { int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<794 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<795 + 1024 * 0, true> { int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<795 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<796 + 1024 * 0, true> { int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<796 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<797 + 1024 * 0, true> { int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<797 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<798 + 1024 * 0, true> { int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<798 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<799 + 1024 * 0, true> { int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<799 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<800 + 1024 * 0, true> { int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<800 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<801 + 1024 * 0, true> { int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<801 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<802 + 1024 * 0, true> { int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<802 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<803 + 1024 * 0, true> { int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<803 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<804 + 1024 * 0, true> { int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<804 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<805 + 1024 * 0, true> { int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<805 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<806 + 1024 * 0, true> { int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<806 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<807 + 1024 * 0, true> { int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<807 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<808 + 1024 * 0, true> { int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<808 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<809 + 1024 * 0, true> { int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<809 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<810 + 1024 * 0, true> { int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<810 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<811 + 1024 * 0, true> { int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<811 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<812 + 1024 * 0, true> { int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<812 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<813 + 1024 * 0, true> { int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<813 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<814 + 1024 * 0, true> { int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<814 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<815 + 1024 * 0, true> { int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<815 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<816 + 1024 * 0, true> { int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<816 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<817 + 1024 * 0, true> { int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<817 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<818 + 1024 * 0, true> { int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<818 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<819 + 1024 * 0, true> { int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<819 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<820 + 1024 * 0, true> { int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<820 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<821 + 1024 * 0, true> { int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<821 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<822 + 1024 * 0, true> { int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<822 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<823 + 1024 * 0, true> { int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<823 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<824 + 1024 * 0, true> { int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<824 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<825 + 1024 * 0, true> { int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<825 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<826 + 1024 * 0, true> { int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<826 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<827 + 1024 * 0, true> { int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<827 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<828 + 1024 * 0, true> { int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<828 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<829 + 1024 * 0, true> { int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<829 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<830 + 1024 * 0, true> { int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<830 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<831 + 1024 * 0, true> { int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<831 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<832 + 1024 * 0, true> { int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<832 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<833 + 1024 * 0, true> { int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<833 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<834 + 1024 * 0, true> { int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<834 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<835 + 1024 * 0, true> { int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<835 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<836 + 1024 * 0, true> { int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<836 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<837 + 1024 * 0, true> { int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<837 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<838 + 1024 * 0, true> { int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<838 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<839 + 1024 * 0, true> { int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<839 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<840 + 1024 * 0, true> { int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<840 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<841 + 1024 * 0, true> { int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<841 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<842 + 1024 * 0, true> { int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<842 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<843 + 1024 * 0, true> { int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<843 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<844 + 1024 * 0, true> { int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<844 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<845 + 1024 * 0, true> { int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<845 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<846 + 1024 * 0, true> { int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<846 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<847 + 1024 * 0, true> { int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<847 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<848 + 1024 * 0, true> { int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<848 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<849 + 1024 * 0, true> { int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<849 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<850 + 1024 * 0, true> { int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<850 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<851 + 1024 * 0, true> { int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<851 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<852 + 1024 * 0, true> { int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<852 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<853 + 1024 * 0, true> { int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<853 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<854 + 1024 * 0, true> { int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<854 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<855 + 1024 * 0, true> { int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<855 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<856 + 1024 * 0, true> { int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<856 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<857 + 1024 * 0, true> { int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<857 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<858 + 1024 * 0, true> { int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<858 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<859 + 1024 * 0, true> { int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<859 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<860 + 1024 * 0, true> { int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<860 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<861 + 1024 * 0, true> { int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<861 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<862 + 1024 * 0, true> { int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<862 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<863 + 1024 * 0, true> { int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<863 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<864 + 1024 * 0, true> { int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<864 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<865 + 1024 * 0, true> { int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<865 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<866 + 1024 * 0, true> { int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<866 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<867 + 1024 * 0, true> { int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<867 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<868 + 1024 * 0, true> { int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<868 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<869 + 1024 * 0, true> { int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<869 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<870 + 1024 * 0, true> { int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<870 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<871 + 1024 * 0, true> { int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<871 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<872 + 1024 * 0, true> { int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<872 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<873 + 1024 * 0, true> { int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<873 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<874 + 1024 * 0, true> { int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<874 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<875 + 1024 * 0, true> { int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<875 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<876 + 1024 * 0, true> { int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<876 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<877 + 1024 * 0, true> { int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<877 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<878 + 1024 * 0, true> { int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<878 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<879 + 1024 * 0, true> { int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<879 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<880 + 1024 * 0, true> { int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<880 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<881 + 1024 * 0, true> { int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<881 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<882 + 1024 * 0, true> { int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<882 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<883 + 1024 * 0, true> { int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<883 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<884 + 1024 * 0, true> { int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<884 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<885 + 1024 * 0, true> { int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<885 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<886 + 1024 * 0, true> { int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<886 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<887 + 1024 * 0, true> { int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<887 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<888 + 1024 * 0, true> { int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<888 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<889 + 1024 * 0, true> { int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<889 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<890 + 1024 * 0, true> { int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<890 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<891 + 1024 * 0, true> { int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<891 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<892 + 1024 * 0, true> { int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<892 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<893 + 1024 * 0, true> { int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<893 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<894 + 1024 * 0, true> { int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<894 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<895 + 1024 * 0, true> { int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<895 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<896 + 1024 * 0, true> { int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<896 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<897 + 1024 * 0, true> { int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<897 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<898 + 1024 * 0, true> { int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<898 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<899 + 1024 * 0, true> { int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<899 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<900 + 1024 * 0, true> { int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<900 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<901 + 1024 * 0, true> { int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<901 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<902 + 1024 * 0, true> { int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<902 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<903 + 1024 * 0, true> { int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<903 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<904 + 1024 * 0, true> { int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<904 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<905 + 1024 * 0, true> { int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<905 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<906 + 1024 * 0, true> { int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<906 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<907 + 1024 * 0, true> { int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<907 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<908 + 1024 * 0, true> { int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<908 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<909 + 1024 * 0, true> { int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<909 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<910 + 1024 * 0, true> { int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<910 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<911 + 1024 * 0, true> { int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<911 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<912 + 1024 * 0, true> { int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<912 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<913 + 1024 * 0, true> { int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<913 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<914 + 1024 * 0, true> { int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<914 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<915 + 1024 * 0, true> { int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<915 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<916 + 1024 * 0, true> { int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<916 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<917 + 1024 * 0, true> { int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<917 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<918 + 1024 * 0, true> { int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<918 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<919 + 1024 * 0, true> { int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<919 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<920 + 1024 * 0, true> { int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<920 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<921 + 1024 * 0, true> { int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<921 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<922 + 1024 * 0, true> { int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<922 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<923 + 1024 * 0, true> { int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<923 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<924 + 1024 * 0, true> { int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<924 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<925 + 1024 * 0, true> { int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<925 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<926 + 1024 * 0, true> { int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<926 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<927 + 1024 * 0, true> { int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<927 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<928 + 1024 * 0, true> { int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<928 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<929 + 1024 * 0, true> { int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<929 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<930 + 1024 * 0, true> { int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<930 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<931 + 1024 * 0, true> { int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<931 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<932 + 1024 * 0, true> { int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<932 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<933 + 1024 * 0, true> { int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<933 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<934 + 1024 * 0, true> { int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<934 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<935 + 1024 * 0, true> { int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<935 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<936 + 1024 * 0, true> { int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<936 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<937 + 1024 * 0, true> { int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<937 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<938 + 1024 * 0, true> { int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<938 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<939 + 1024 * 0, true> { int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<939 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<940 + 1024 * 0, true> { int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<940 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<941 + 1024 * 0, true> { int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<941 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<942 + 1024 * 0, true> { int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<942 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<943 + 1024 * 0, true> { int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<943 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<944 + 1024 * 0, true> { int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<944 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<945 + 1024 * 0, true> { int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<945 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<946 + 1024 * 0, true> { int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<946 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<947 + 1024 * 0, true> { int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<947 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<948 + 1024 * 0, true> { int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<948 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<949 + 1024 * 0, true> { int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<949 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<950 + 1024 * 0, true> { int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<950 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<951 + 1024 * 0, true> { int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<951 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<952 + 1024 * 0, true> { int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<952 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<953 + 1024 * 0, true> { int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<953 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<954 + 1024 * 0, true> { int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<954 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<955 + 1024 * 0, true> { int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<955 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<956 + 1024 * 0, true> { int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<956 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<957 + 1024 * 0, true> { int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<957 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<958 + 1024 * 0, true> { int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<958 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<959 + 1024 * 0, true> { int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<959 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<960 + 1024 * 0, true> { int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<960 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<961 + 1024 * 0, true> { int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<961 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<962 + 1024 * 0, true> { int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<962 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<963 + 1024 * 0, true> { int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<963 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<964 + 1024 * 0, true> { int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<964 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<965 + 1024 * 0, true> { int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<965 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<966 + 1024 * 0, true> { int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<966 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<967 + 1024 * 0, true> { int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<967 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<968 + 1024 * 0, true> { int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<968 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<969 + 1024 * 0, true> { int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<969 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<970 + 1024 * 0, true> { int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<970 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<971 + 1024 * 0, true> { int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<971 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<972 + 1024 * 0, true> { int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<972 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<973 + 1024 * 0, true> { int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<973 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<974 + 1024 * 0, true> { int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<974 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<975 + 1024 * 0, true> { int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<975 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<976 + 1024 * 0, true> { int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<976 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<977 + 1024 * 0, true> { int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<977 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<978 + 1024 * 0, true> { int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<978 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<979 + 1024 * 0, true> { int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<979 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<980 + 1024 * 0, true> { int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<980 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<981 + 1024 * 0, true> { int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<981 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<982 + 1024 * 0, true> { int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<982 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<983 + 1024 * 0, true> { int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<983 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<984 + 1024 * 0, true> { int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<984 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<985 + 1024 * 0, true> { int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<985 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<986 + 1024 * 0, true> { int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<986 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<987 + 1024 * 0, true> { int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<987 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<988 + 1024 * 0, true> { int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<988 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<989 + 1024 * 0, true> { int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<989 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<990 + 1024 * 0, true> { int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<990 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<991 + 1024 * 0, true> { int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<991 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<992 + 1024 * 0, true> { int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<992 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<993 + 1024 * 0, true> { int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<993 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<994 + 1024 * 0, true> { int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<994 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<995 + 1024 * 0, true> { int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<995 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<996 + 1024 * 0, true> { int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<996 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<997 + 1024 * 0, true> { int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<997 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<998 + 1024 * 0, true> { int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<998 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<999 + 1024 * 0, true> { int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<999 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1000 + 1024 * 0, true> { int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1000 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1001 + 1024 * 0, true> { int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1001 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1002 + 1024 * 0, true> { int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1002 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1003 + 1024 * 0, true> { int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1003 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1004 + 1024 * 0, true> { int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1004 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1005 + 1024 * 0, true> { int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1005 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1006 + 1024 * 0, true> { int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1006 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1007 + 1024 * 0, true> { int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1007 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1008 + 1024 * 0, true> { int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1008 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1009 + 1024 * 0, true> { int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1009 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1010 + 1024 * 0, true> { int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1010 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1011 + 1024 * 0, true> { int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1011 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1012 + 1024 * 0, true> { int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1012 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1013 + 1024 * 0, true> { int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1013 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1014 + 1024 * 0, true> { int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1014 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1015 + 1024 * 0, true> { int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1015 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1016 + 1024 * 0, true> { int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1016 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1017 + 1024 * 0, true> { int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1017 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1018 + 1024 * 0, true> { int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1018 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1019 + 1024 * 0, true> { int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1019 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1020 + 1024 * 0, true> { int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1020 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1021 + 1024 * 0, true> { int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1021 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1022 + 1024 * 0, true> { int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1022 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1023 + 1024 * 0, true> { int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1023 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1024 + 1024 * 0, true> { int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1024 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, false>(){}; };
# 239 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h" 2
# 562 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 563 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 574 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 691 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 55 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h" 1
# 72 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 2 3
# 73 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h" 2
# 82 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 239 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ __typeof__(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<__typeof__(reg.V)>::type __Result__ = 0; __typeof__(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<__typeof__(reg.V)>::type __Result__ = 0; __typeof__(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<__typeof__(man.V)>::type __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ __typeof__(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<__typeof__(reg.V)>::type __Result__ = 0; __typeof__(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<__typeof__(reg.V)>::type __Result__ = 0; __typeof__(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<__typeof__(man.V)>::type __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 393 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    __typeof__(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    __typeof__(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }
# 484 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 588 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    __typeof__(Base::V) l_p = Base::V << n;
    __typeof__(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    __typeof__(Base::V) l_p = Base::V << (_AP_W - n);
    __typeof__(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 701 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 719 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ __typeof__(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ __typeof__(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 830 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ __typeof__(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ __typeof__(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 879 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 988 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1055 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<__typeof__(this->V)>::type __Result__ = 0; __typeof__(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<__typeof__(t.V)>::type __Result__ = 0; __typeof__(t.V) __Val2__ = t.V; __typeof__(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<__typeof__(this->V)>::type __Result__ = 0; __typeof__(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<__typeof__(t.V)>::type __Result__ = 0; __typeof__(t.V) __Val2__ = t.V; __typeof__(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<__typeof__(this->V)>::type __Result__ = 0; __typeof__(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<__typeof__(this->V)>::type __Result__ = 0; __typeof__(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<__typeof__(t.V)>::type __Result__ = 0; __typeof__(t.V) __Val2__ = t.V; __typeof__(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1295 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    return 0;
  }

};
# 1354 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1373 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1401 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { std::ptrdiff_t op2 = op.to_long(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { std::ptrdiff_t op2 = op.to_long(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { std::ptrdiff_t op2 = op.to_long(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { std::ptrdiff_t op2 = op.to_long(); return op2 - i_op; }
# 1429 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1463 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1502 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1526 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1557 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1594 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1631 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1661 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1690 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 &= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp &= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 |= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp |= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp ^= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1716 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1743 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1772 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 &= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp &= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 |= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp |= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp ^= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1798 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1906 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 56 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h" 1
# 72 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<__typeof__(vval.V)>::type __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<__typeof__(vval.V)>::type __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 115 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 303 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<__typeof__(tmpVal.V)>::type __Result__ = 0; __typeof__(tmpVal.V) __Val2__ = tmpVal.V; __typeof__(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<__typeof__(tmpVal.V)>::type __Result__ = 0; __typeof__(tmpVal.V) __Val2__ = tmpVal.V; __typeof__(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<__typeof__(vval.V)>::type __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<__typeof__(vval.V)>::type __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 384 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret &= ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret |= ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret ^= ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 732 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    return 0;
  }

};
# 771 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 809 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 831 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1029 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1088 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1111 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1139 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1188 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1335 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1359 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 57 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_int& operator=(const ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_uint& operator=(const ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 341 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_special.h" 1
# 60 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 88 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
struct complex<ap_int<_AP_W> > {
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 220 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 342 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 2







# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h" 1
# 55 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h" 1
# 61 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 1
# 62 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h" 2
# 132 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 153 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 332 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 476 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    __typeof__(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    __typeof__(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 534 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ __typeof__(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<__typeof__(ireg.V)>::type __Result__ = 0; __typeof__(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<__typeof__(ireg.V)>::type __Result__ = 0; __typeof__(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<__typeof__(man.V)>::type __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ __typeof__(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<__typeof__(man.V)>::type __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 687 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ __typeof__(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ __typeof__(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<__typeof__(op.V)>::type __Result__ = 0; __typeof__(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ __typeof__(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<__typeof__(op.V)>::type __Result__ = 0; __typeof__(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<__typeof__(op.V)>::type __Result__ = 0; __typeof__(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 847 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<__typeof__(tmp.V)>::type __Result__ = 0; __typeof__(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ __typeof__(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ __typeof__(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<__typeof__(tmp.V)>::type __Result__ = 0; __typeof__(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ __typeof__(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ __typeof__(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<__typeof__(tmp.V)>::type __Result__ = 0; __typeof__(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ __typeof__(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ __typeof__(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1073 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1143 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1176 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }
# 1191 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1209 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1327 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1349 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1493 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1579 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1762 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2212 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2300 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 56 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h" 1
# 69 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 256 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 286 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 298 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
  }
# 310 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 632 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
    return 0;
  }

};
# 695 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 741 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 57 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 111 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 136 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  inline __attribute__((always_inline)) ap_fixed& operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 267 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 289 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 380 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_special.h" 1
# 60 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 88 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 219 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 381 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h" 2
# 350 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 2
# 24 "firmware/myproject.h" 2


# 1 "firmware/defines.h" 1



# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 1
# 5 "firmware/defines.h" 2
# 31 "firmware/defines.h"
typedef ap_fixed<17,7,AP_RND,AP_SAT> model_default_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> input_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> input2_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> layer3_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> layer5_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> layer6_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> layer7_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> layer9_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> layer10_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> layer11_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> layer13_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> layer14_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> layer16_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> layer17_t;
typedef ap_fixed<17,7,AP_RND,AP_SAT> result_t;
# 27 "firmware/myproject.h" 2



void myproject(
    input_t input1[32*32*1],
    result_t layer19_out[10],
    unsigned short &const_size_in_1,
    unsigned short &const_size_out_1
);
# 22 "firmware/myproject.cpp" 2
# 1 "firmware/parameters.h" 1



# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 1
# 5 "firmware/parameters.h" 2


# 1 "firmware/nnet_utils/nnet_helpers.h" 1
# 25 "firmware/nnet_utils/nnet_helpers.h"
# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4






extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4
# 138 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 139 "/usr/include/math.h" 2 3 4
# 149 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 190 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 191 "/usr/include/math.h" 2 3 4
# 233 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 234 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 289 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));


extern int __isnan (double __value) throw () __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) throw ();


extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));
# 290 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();



extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();





extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();





extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();




extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();




extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();






extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();



extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();




extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();






extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();
# 182 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();






extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));




extern double nan (const char *__tagb) throw (); extern double __nan (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();





extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();




extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();







extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();






extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw (); extern double __nextafter (double __x, double __y) throw ();

extern double nexttoward (double __x, long double __y) throw (); extern double __nexttoward (double __x, long double __y) throw ();




extern double nextdown (double __x) throw (); extern double __nextdown (double __x) throw ();

extern double nextup (double __x) throw (); extern double __nextup (double __x) throw ();



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern long int llogb (double __x) throw (); extern long int __llogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));


extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();




extern double roundeven (double __x) throw () __attribute__ ((__const__)); extern double __roundeven (double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) throw ();



extern double fmaxmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) throw () __attribute__ ((__const__));


extern double fminmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) throw () __attribute__ ((__const__));


extern int canonicalize (double *__cx, const double *__x) throw ();




extern int totalorder (const double *__x, const double *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermag (const double *__x, const double *__y) throw ()

     __attribute__ ((__pure__));


extern double getpayload (const double *__x) throw (); extern double __getpayload (const double *__x) throw ();


extern int setpayload (double *__x, double __payload) throw ();


extern int setpayloadsig (double *__x, double __payload) throw ();







extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 291 "/usr/include/math.h" 2 3 4
# 306 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));


extern int __isnanf (float __value) throw () __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) throw ();


extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));
# 307 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();



extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();





extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();





extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();




extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();




extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();






extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();



extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();




extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();






extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) throw () __attribute__ ((__const__));




extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();






extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));




extern float nanf (const char *__tagb) throw (); extern float __nanf (const char *__tagb) throw ();
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();





extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();




extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();







extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();






extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw (); extern float __nextafterf (float __x, float __y) throw ();

extern float nexttowardf (float __x, long double __y) throw (); extern float __nexttowardf (float __x, long double __y) throw ();




extern float nextdownf (float __x) throw (); extern float __nextdownf (float __x) throw ();

extern float nextupf (float __x) throw (); extern float __nextupf (float __x) throw ();



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern long int llogbf (float __x) throw (); extern long int __llogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();




extern float roundevenf (float __x) throw () __attribute__ ((__const__)); extern float __roundevenf (float __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) throw ();



extern float fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern int canonicalizef (float *__cx, const float *__x) throw ();




extern int totalorderf (const float *__x, const float *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf (const float *__x, const float *__y) throw ()

     __attribute__ ((__pure__));


extern float getpayloadf (const float *__x) throw (); extern float __getpayloadf (const float *__x) throw ();


extern int setpayloadf (float *__x, float __payload) throw ();


extern int setpayloadsigf (float *__x, float __payload) throw ();







extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 308 "/usr/include/math.h" 2 3 4
# 349 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));


extern int __isnanl (long double __value) throw () __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) throw ();


extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));
# 350 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();



extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();





extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();





extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();




extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();




extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();






extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();



extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();




extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();






extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) throw () __attribute__ ((__const__));




extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();






extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));




extern long double nanl (const char *__tagb) throw (); extern long double __nanl (const char *__tagb) throw ();
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();





extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();




extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();







extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();






extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw (); extern long double __nextafterl (long double __x, long double __y) throw ();

extern long double nexttowardl (long double __x, long double __y) throw (); extern long double __nexttowardl (long double __x, long double __y) throw ();




extern long double nextdownl (long double __x) throw (); extern long double __nextdownl (long double __x) throw ();

extern long double nextupl (long double __x) throw (); extern long double __nextupl (long double __x) throw ();



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long int llogbl (long double __x) throw (); extern long int __llogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();




extern long double roundevenl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundevenl (long double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) throw ();



extern long double fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern int canonicalizel (long double *__cx, const long double *__x) throw ();




extern int totalorderl (const long double *__x, const long double *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagl (const long double *__x, const long double *__y) throw ()

     __attribute__ ((__pure__));


extern long double getpayloadl (const long double *__x) throw (); extern long double __getpayloadl (const long double *__x) throw ();


extern int setpayloadl (long double *__x, long double __payload) throw ();


extern int setpayloadsigl (long double *__x, long double __payload) throw ();







extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 351 "/usr/include/math.h" 2 3 4
# 389 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 acosf32 (_Float32 __x) throw (); extern _Float32 __acosf32 (_Float32 __x) throw ();

extern _Float32 asinf32 (_Float32 __x) throw (); extern _Float32 __asinf32 (_Float32 __x) throw ();

extern _Float32 atanf32 (_Float32 __x) throw (); extern _Float32 __atanf32 (_Float32 __x) throw ();

extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) throw (); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) throw ();


extern _Float32 cosf32 (_Float32 __x) throw (); extern _Float32 __cosf32 (_Float32 __x) throw ();

extern _Float32 sinf32 (_Float32 __x) throw (); extern _Float32 __sinf32 (_Float32 __x) throw ();

extern _Float32 tanf32 (_Float32 __x) throw (); extern _Float32 __tanf32 (_Float32 __x) throw ();




extern _Float32 coshf32 (_Float32 __x) throw (); extern _Float32 __coshf32 (_Float32 __x) throw ();

extern _Float32 sinhf32 (_Float32 __x) throw (); extern _Float32 __sinhf32 (_Float32 __x) throw ();

extern _Float32 tanhf32 (_Float32 __x) throw (); extern _Float32 __tanhf32 (_Float32 __x) throw ();



extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw (); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw ();





extern _Float32 acoshf32 (_Float32 __x) throw (); extern _Float32 __acoshf32 (_Float32 __x) throw ();

extern _Float32 asinhf32 (_Float32 __x) throw (); extern _Float32 __asinhf32 (_Float32 __x) throw ();

extern _Float32 atanhf32 (_Float32 __x) throw (); extern _Float32 __atanhf32 (_Float32 __x) throw ();





extern _Float32 expf32 (_Float32 __x) throw (); extern _Float32 __expf32 (_Float32 __x) throw ();


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) throw (); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) throw ();


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) throw (); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) throw ();


extern _Float32 logf32 (_Float32 __x) throw (); extern _Float32 __logf32 (_Float32 __x) throw ();


extern _Float32 log10f32 (_Float32 __x) throw (); extern _Float32 __log10f32 (_Float32 __x) throw ();


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) throw (); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32 exp10f32 (_Float32 __x) throw (); extern _Float32 __exp10f32 (_Float32 __x) throw ();




extern _Float32 expm1f32 (_Float32 __x) throw (); extern _Float32 __expm1f32 (_Float32 __x) throw ();


extern _Float32 log1pf32 (_Float32 __x) throw (); extern _Float32 __log1pf32 (_Float32 __x) throw ();


extern _Float32 logbf32 (_Float32 __x) throw (); extern _Float32 __logbf32 (_Float32 __x) throw ();




extern _Float32 exp2f32 (_Float32 __x) throw (); extern _Float32 __exp2f32 (_Float32 __x) throw ();


extern _Float32 log2f32 (_Float32 __x) throw (); extern _Float32 __log2f32 (_Float32 __x) throw ();






extern _Float32 powf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 sqrtf32 (_Float32 __x) throw (); extern _Float32 __sqrtf32 (_Float32 __x) throw ();



extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) throw ();




extern _Float32 cbrtf32 (_Float32 __x) throw (); extern _Float32 __cbrtf32 (_Float32 __x) throw ();






extern _Float32 ceilf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) throw (); extern _Float32 __nanf32 (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) throw (); extern _Float32 __j0f32 (_Float32) throw ();
extern _Float32 j1f32 (_Float32) throw (); extern _Float32 __j1f32 (_Float32) throw ();
extern _Float32 jnf32 (int, _Float32) throw (); extern _Float32 __jnf32 (int, _Float32) throw ();
extern _Float32 y0f32 (_Float32) throw (); extern _Float32 __y0f32 (_Float32) throw ();
extern _Float32 y1f32 (_Float32) throw (); extern _Float32 __y1f32 (_Float32) throw ();
extern _Float32 ynf32 (int, _Float32) throw (); extern _Float32 __ynf32 (int, _Float32) throw ();





extern _Float32 erff32 (_Float32) throw (); extern _Float32 __erff32 (_Float32) throw ();
extern _Float32 erfcf32 (_Float32) throw (); extern _Float32 __erfcf32 (_Float32) throw ();
extern _Float32 lgammaf32 (_Float32) throw (); extern _Float32 __lgammaf32 (_Float32) throw ();




extern _Float32 tgammaf32 (_Float32) throw (); extern _Float32 __tgammaf32 (_Float32) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) throw (); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) throw ();






extern _Float32 rintf32 (_Float32 __x) throw (); extern _Float32 __rintf32 (_Float32 __x) throw ();


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) throw ();






extern _Float32 nextdownf32 (_Float32 __x) throw (); extern _Float32 __nextdownf32 (_Float32 __x) throw ();

extern _Float32 nextupf32 (_Float32 __x) throw (); extern _Float32 __nextupf32 (_Float32 __x) throw ();



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) throw ();



extern _Float32 scalbnf32 (_Float32 __x, int __n) throw (); extern _Float32 __scalbnf32 (_Float32 __x, int __n) throw ();



extern int ilogbf32 (_Float32 __x) throw (); extern int __ilogbf32 (_Float32 __x) throw ();




extern long int llogbf32 (_Float32 __x) throw (); extern long int __llogbf32 (_Float32 __x) throw ();




extern _Float32 scalblnf32 (_Float32 __x, long int __n) throw (); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) throw ();



extern _Float32 nearbyintf32 (_Float32 __x) throw (); extern _Float32 __nearbyintf32 (_Float32 __x) throw ();



extern _Float32 roundf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) throw () __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw (); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw ();






extern long int lrintf32 (_Float32 __x) throw (); extern long int __lrintf32 (_Float32 __x) throw ();
__extension__
extern long long int llrintf32 (_Float32 __x) throw (); extern long long int __llrintf32 (_Float32 __x) throw ();



extern long int lroundf32 (_Float32 __x) throw (); extern long int __lroundf32 (_Float32 __x) throw ();
__extension__
extern long long int llroundf32 (_Float32 __x) throw (); extern long long int __llroundf32 (_Float32 __x) throw ();



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw (); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw ();




extern _Float32 roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ();



extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) throw ();




extern int totalorderf32 (const _Float32 *__x, const _Float32 *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf32 (const _Float32 *__x, const _Float32 *__y) throw ()

     __attribute__ ((__pure__));


extern _Float32 getpayloadf32 (const _Float32 *__x) throw (); extern _Float32 __getpayloadf32 (const _Float32 *__x) throw ();


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) throw ();


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) throw ();
# 390 "/usr/include/math.h" 2 3 4
# 406 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 acosf64 (_Float64 __x) throw (); extern _Float64 __acosf64 (_Float64 __x) throw ();

extern _Float64 asinf64 (_Float64 __x) throw (); extern _Float64 __asinf64 (_Float64 __x) throw ();

extern _Float64 atanf64 (_Float64 __x) throw (); extern _Float64 __atanf64 (_Float64 __x) throw ();

extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) throw (); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) throw ();


extern _Float64 cosf64 (_Float64 __x) throw (); extern _Float64 __cosf64 (_Float64 __x) throw ();

extern _Float64 sinf64 (_Float64 __x) throw (); extern _Float64 __sinf64 (_Float64 __x) throw ();

extern _Float64 tanf64 (_Float64 __x) throw (); extern _Float64 __tanf64 (_Float64 __x) throw ();




extern _Float64 coshf64 (_Float64 __x) throw (); extern _Float64 __coshf64 (_Float64 __x) throw ();

extern _Float64 sinhf64 (_Float64 __x) throw (); extern _Float64 __sinhf64 (_Float64 __x) throw ();

extern _Float64 tanhf64 (_Float64 __x) throw (); extern _Float64 __tanhf64 (_Float64 __x) throw ();



extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw (); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw ();





extern _Float64 acoshf64 (_Float64 __x) throw (); extern _Float64 __acoshf64 (_Float64 __x) throw ();

extern _Float64 asinhf64 (_Float64 __x) throw (); extern _Float64 __asinhf64 (_Float64 __x) throw ();

extern _Float64 atanhf64 (_Float64 __x) throw (); extern _Float64 __atanhf64 (_Float64 __x) throw ();





extern _Float64 expf64 (_Float64 __x) throw (); extern _Float64 __expf64 (_Float64 __x) throw ();


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) throw (); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) throw ();


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) throw (); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) throw ();


extern _Float64 logf64 (_Float64 __x) throw (); extern _Float64 __logf64 (_Float64 __x) throw ();


extern _Float64 log10f64 (_Float64 __x) throw (); extern _Float64 __log10f64 (_Float64 __x) throw ();


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) throw (); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64 exp10f64 (_Float64 __x) throw (); extern _Float64 __exp10f64 (_Float64 __x) throw ();




extern _Float64 expm1f64 (_Float64 __x) throw (); extern _Float64 __expm1f64 (_Float64 __x) throw ();


extern _Float64 log1pf64 (_Float64 __x) throw (); extern _Float64 __log1pf64 (_Float64 __x) throw ();


extern _Float64 logbf64 (_Float64 __x) throw (); extern _Float64 __logbf64 (_Float64 __x) throw ();




extern _Float64 exp2f64 (_Float64 __x) throw (); extern _Float64 __exp2f64 (_Float64 __x) throw ();


extern _Float64 log2f64 (_Float64 __x) throw (); extern _Float64 __log2f64 (_Float64 __x) throw ();






extern _Float64 powf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 sqrtf64 (_Float64 __x) throw (); extern _Float64 __sqrtf64 (_Float64 __x) throw ();



extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) throw ();




extern _Float64 cbrtf64 (_Float64 __x) throw (); extern _Float64 __cbrtf64 (_Float64 __x) throw ();






extern _Float64 ceilf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) throw (); extern _Float64 __nanf64 (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) throw (); extern _Float64 __j0f64 (_Float64) throw ();
extern _Float64 j1f64 (_Float64) throw (); extern _Float64 __j1f64 (_Float64) throw ();
extern _Float64 jnf64 (int, _Float64) throw (); extern _Float64 __jnf64 (int, _Float64) throw ();
extern _Float64 y0f64 (_Float64) throw (); extern _Float64 __y0f64 (_Float64) throw ();
extern _Float64 y1f64 (_Float64) throw (); extern _Float64 __y1f64 (_Float64) throw ();
extern _Float64 ynf64 (int, _Float64) throw (); extern _Float64 __ynf64 (int, _Float64) throw ();





extern _Float64 erff64 (_Float64) throw (); extern _Float64 __erff64 (_Float64) throw ();
extern _Float64 erfcf64 (_Float64) throw (); extern _Float64 __erfcf64 (_Float64) throw ();
extern _Float64 lgammaf64 (_Float64) throw (); extern _Float64 __lgammaf64 (_Float64) throw ();




extern _Float64 tgammaf64 (_Float64) throw (); extern _Float64 __tgammaf64 (_Float64) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) throw (); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) throw ();






extern _Float64 rintf64 (_Float64 __x) throw (); extern _Float64 __rintf64 (_Float64 __x) throw ();


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) throw ();






extern _Float64 nextdownf64 (_Float64 __x) throw (); extern _Float64 __nextdownf64 (_Float64 __x) throw ();

extern _Float64 nextupf64 (_Float64 __x) throw (); extern _Float64 __nextupf64 (_Float64 __x) throw ();



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) throw ();



extern _Float64 scalbnf64 (_Float64 __x, int __n) throw (); extern _Float64 __scalbnf64 (_Float64 __x, int __n) throw ();



extern int ilogbf64 (_Float64 __x) throw (); extern int __ilogbf64 (_Float64 __x) throw ();




extern long int llogbf64 (_Float64 __x) throw (); extern long int __llogbf64 (_Float64 __x) throw ();




extern _Float64 scalblnf64 (_Float64 __x, long int __n) throw (); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) throw ();



extern _Float64 nearbyintf64 (_Float64 __x) throw (); extern _Float64 __nearbyintf64 (_Float64 __x) throw ();



extern _Float64 roundf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) throw () __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw (); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw ();






extern long int lrintf64 (_Float64 __x) throw (); extern long int __lrintf64 (_Float64 __x) throw ();
__extension__
extern long long int llrintf64 (_Float64 __x) throw (); extern long long int __llrintf64 (_Float64 __x) throw ();



extern long int lroundf64 (_Float64 __x) throw (); extern long int __lroundf64 (_Float64 __x) throw ();
__extension__
extern long long int llroundf64 (_Float64 __x) throw (); extern long long int __llroundf64 (_Float64 __x) throw ();



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw (); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw ();




extern _Float64 roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ();



extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) throw ();




extern int totalorderf64 (const _Float64 *__x, const _Float64 *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf64 (const _Float64 *__x, const _Float64 *__y) throw ()

     __attribute__ ((__pure__));


extern _Float64 getpayloadf64 (const _Float64 *__x) throw (); extern _Float64 __getpayloadf64 (const _Float64 *__x) throw ();


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) throw ();


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) throw ();
# 407 "/usr/include/math.h" 2 3 4
# 440 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x acosf32x (_Float32x __x) throw (); extern _Float32x __acosf32x (_Float32x __x) throw ();

extern _Float32x asinf32x (_Float32x __x) throw (); extern _Float32x __asinf32x (_Float32x __x) throw ();

extern _Float32x atanf32x (_Float32x __x) throw (); extern _Float32x __atanf32x (_Float32x __x) throw ();

extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) throw (); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) throw ();


extern _Float32x cosf32x (_Float32x __x) throw (); extern _Float32x __cosf32x (_Float32x __x) throw ();

extern _Float32x sinf32x (_Float32x __x) throw (); extern _Float32x __sinf32x (_Float32x __x) throw ();

extern _Float32x tanf32x (_Float32x __x) throw (); extern _Float32x __tanf32x (_Float32x __x) throw ();




extern _Float32x coshf32x (_Float32x __x) throw (); extern _Float32x __coshf32x (_Float32x __x) throw ();

extern _Float32x sinhf32x (_Float32x __x) throw (); extern _Float32x __sinhf32x (_Float32x __x) throw ();

extern _Float32x tanhf32x (_Float32x __x) throw (); extern _Float32x __tanhf32x (_Float32x __x) throw ();



extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw (); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw ();





extern _Float32x acoshf32x (_Float32x __x) throw (); extern _Float32x __acoshf32x (_Float32x __x) throw ();

extern _Float32x asinhf32x (_Float32x __x) throw (); extern _Float32x __asinhf32x (_Float32x __x) throw ();

extern _Float32x atanhf32x (_Float32x __x) throw (); extern _Float32x __atanhf32x (_Float32x __x) throw ();





extern _Float32x expf32x (_Float32x __x) throw (); extern _Float32x __expf32x (_Float32x __x) throw ();


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) throw (); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) throw ();


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) throw (); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) throw ();


extern _Float32x logf32x (_Float32x __x) throw (); extern _Float32x __logf32x (_Float32x __x) throw ();


extern _Float32x log10f32x (_Float32x __x) throw (); extern _Float32x __log10f32x (_Float32x __x) throw ();


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) throw (); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32x exp10f32x (_Float32x __x) throw (); extern _Float32x __exp10f32x (_Float32x __x) throw ();




extern _Float32x expm1f32x (_Float32x __x) throw (); extern _Float32x __expm1f32x (_Float32x __x) throw ();


extern _Float32x log1pf32x (_Float32x __x) throw (); extern _Float32x __log1pf32x (_Float32x __x) throw ();


extern _Float32x logbf32x (_Float32x __x) throw (); extern _Float32x __logbf32x (_Float32x __x) throw ();




extern _Float32x exp2f32x (_Float32x __x) throw (); extern _Float32x __exp2f32x (_Float32x __x) throw ();


extern _Float32x log2f32x (_Float32x __x) throw (); extern _Float32x __log2f32x (_Float32x __x) throw ();






extern _Float32x powf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x sqrtf32x (_Float32x __x) throw (); extern _Float32x __sqrtf32x (_Float32x __x) throw ();



extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) throw ();




extern _Float32x cbrtf32x (_Float32x __x) throw (); extern _Float32x __cbrtf32x (_Float32x __x) throw ();






extern _Float32x ceilf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) throw (); extern _Float32x __nanf32x (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) throw (); extern _Float32x __j0f32x (_Float32x) throw ();
extern _Float32x j1f32x (_Float32x) throw (); extern _Float32x __j1f32x (_Float32x) throw ();
extern _Float32x jnf32x (int, _Float32x) throw (); extern _Float32x __jnf32x (int, _Float32x) throw ();
extern _Float32x y0f32x (_Float32x) throw (); extern _Float32x __y0f32x (_Float32x) throw ();
extern _Float32x y1f32x (_Float32x) throw (); extern _Float32x __y1f32x (_Float32x) throw ();
extern _Float32x ynf32x (int, _Float32x) throw (); extern _Float32x __ynf32x (int, _Float32x) throw ();





extern _Float32x erff32x (_Float32x) throw (); extern _Float32x __erff32x (_Float32x) throw ();
extern _Float32x erfcf32x (_Float32x) throw (); extern _Float32x __erfcf32x (_Float32x) throw ();
extern _Float32x lgammaf32x (_Float32x) throw (); extern _Float32x __lgammaf32x (_Float32x) throw ();




extern _Float32x tgammaf32x (_Float32x) throw (); extern _Float32x __tgammaf32x (_Float32x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) throw (); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) throw ();






extern _Float32x rintf32x (_Float32x __x) throw (); extern _Float32x __rintf32x (_Float32x __x) throw ();


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) throw ();






extern _Float32x nextdownf32x (_Float32x __x) throw (); extern _Float32x __nextdownf32x (_Float32x __x) throw ();

extern _Float32x nextupf32x (_Float32x __x) throw (); extern _Float32x __nextupf32x (_Float32x __x) throw ();



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) throw ();



extern _Float32x scalbnf32x (_Float32x __x, int __n) throw (); extern _Float32x __scalbnf32x (_Float32x __x, int __n) throw ();



extern int ilogbf32x (_Float32x __x) throw (); extern int __ilogbf32x (_Float32x __x) throw ();




extern long int llogbf32x (_Float32x __x) throw (); extern long int __llogbf32x (_Float32x __x) throw ();




extern _Float32x scalblnf32x (_Float32x __x, long int __n) throw (); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) throw ();



extern _Float32x nearbyintf32x (_Float32x __x) throw (); extern _Float32x __nearbyintf32x (_Float32x __x) throw ();



extern _Float32x roundf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) throw () __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw (); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw ();






extern long int lrintf32x (_Float32x __x) throw (); extern long int __lrintf32x (_Float32x __x) throw ();
__extension__
extern long long int llrintf32x (_Float32x __x) throw (); extern long long int __llrintf32x (_Float32x __x) throw ();



extern long int lroundf32x (_Float32x __x) throw (); extern long int __lroundf32x (_Float32x __x) throw ();
__extension__
extern long long int llroundf32x (_Float32x __x) throw (); extern long long int __llroundf32x (_Float32x __x) throw ();



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw (); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw ();




extern _Float32x roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ();



extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) throw ();




extern int totalorderf32x (const _Float32x *__x, const _Float32x *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf32x (const _Float32x *__x, const _Float32x *__y) throw ()

     __attribute__ ((__pure__));


extern _Float32x getpayloadf32x (const _Float32x *__x) throw (); extern _Float32x __getpayloadf32x (const _Float32x *__x) throw ();


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) throw ();


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) throw ();
# 441 "/usr/include/math.h" 2 3 4
# 457 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x acosf64x (_Float64x __x) throw (); extern _Float64x __acosf64x (_Float64x __x) throw ();

extern _Float64x asinf64x (_Float64x __x) throw (); extern _Float64x __asinf64x (_Float64x __x) throw ();

extern _Float64x atanf64x (_Float64x __x) throw (); extern _Float64x __atanf64x (_Float64x __x) throw ();

extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) throw (); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) throw ();


extern _Float64x cosf64x (_Float64x __x) throw (); extern _Float64x __cosf64x (_Float64x __x) throw ();

extern _Float64x sinf64x (_Float64x __x) throw (); extern _Float64x __sinf64x (_Float64x __x) throw ();

extern _Float64x tanf64x (_Float64x __x) throw (); extern _Float64x __tanf64x (_Float64x __x) throw ();




extern _Float64x coshf64x (_Float64x __x) throw (); extern _Float64x __coshf64x (_Float64x __x) throw ();

extern _Float64x sinhf64x (_Float64x __x) throw (); extern _Float64x __sinhf64x (_Float64x __x) throw ();

extern _Float64x tanhf64x (_Float64x __x) throw (); extern _Float64x __tanhf64x (_Float64x __x) throw ();



extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw (); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw ();





extern _Float64x acoshf64x (_Float64x __x) throw (); extern _Float64x __acoshf64x (_Float64x __x) throw ();

extern _Float64x asinhf64x (_Float64x __x) throw (); extern _Float64x __asinhf64x (_Float64x __x) throw ();

extern _Float64x atanhf64x (_Float64x __x) throw (); extern _Float64x __atanhf64x (_Float64x __x) throw ();





extern _Float64x expf64x (_Float64x __x) throw (); extern _Float64x __expf64x (_Float64x __x) throw ();


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) throw (); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) throw ();


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) throw (); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) throw ();


extern _Float64x logf64x (_Float64x __x) throw (); extern _Float64x __logf64x (_Float64x __x) throw ();


extern _Float64x log10f64x (_Float64x __x) throw (); extern _Float64x __log10f64x (_Float64x __x) throw ();


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) throw (); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64x exp10f64x (_Float64x __x) throw (); extern _Float64x __exp10f64x (_Float64x __x) throw ();




extern _Float64x expm1f64x (_Float64x __x) throw (); extern _Float64x __expm1f64x (_Float64x __x) throw ();


extern _Float64x log1pf64x (_Float64x __x) throw (); extern _Float64x __log1pf64x (_Float64x __x) throw ();


extern _Float64x logbf64x (_Float64x __x) throw (); extern _Float64x __logbf64x (_Float64x __x) throw ();




extern _Float64x exp2f64x (_Float64x __x) throw (); extern _Float64x __exp2f64x (_Float64x __x) throw ();


extern _Float64x log2f64x (_Float64x __x) throw (); extern _Float64x __log2f64x (_Float64x __x) throw ();






extern _Float64x powf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x sqrtf64x (_Float64x __x) throw (); extern _Float64x __sqrtf64x (_Float64x __x) throw ();



extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) throw ();




extern _Float64x cbrtf64x (_Float64x __x) throw (); extern _Float64x __cbrtf64x (_Float64x __x) throw ();






extern _Float64x ceilf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) throw (); extern _Float64x __nanf64x (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) throw (); extern _Float64x __j0f64x (_Float64x) throw ();
extern _Float64x j1f64x (_Float64x) throw (); extern _Float64x __j1f64x (_Float64x) throw ();
extern _Float64x jnf64x (int, _Float64x) throw (); extern _Float64x __jnf64x (int, _Float64x) throw ();
extern _Float64x y0f64x (_Float64x) throw (); extern _Float64x __y0f64x (_Float64x) throw ();
extern _Float64x y1f64x (_Float64x) throw (); extern _Float64x __y1f64x (_Float64x) throw ();
extern _Float64x ynf64x (int, _Float64x) throw (); extern _Float64x __ynf64x (int, _Float64x) throw ();





extern _Float64x erff64x (_Float64x) throw (); extern _Float64x __erff64x (_Float64x) throw ();
extern _Float64x erfcf64x (_Float64x) throw (); extern _Float64x __erfcf64x (_Float64x) throw ();
extern _Float64x lgammaf64x (_Float64x) throw (); extern _Float64x __lgammaf64x (_Float64x) throw ();




extern _Float64x tgammaf64x (_Float64x) throw (); extern _Float64x __tgammaf64x (_Float64x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) throw (); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) throw ();






extern _Float64x rintf64x (_Float64x __x) throw (); extern _Float64x __rintf64x (_Float64x __x) throw ();


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) throw ();






extern _Float64x nextdownf64x (_Float64x __x) throw (); extern _Float64x __nextdownf64x (_Float64x __x) throw ();

extern _Float64x nextupf64x (_Float64x __x) throw (); extern _Float64x __nextupf64x (_Float64x __x) throw ();



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) throw ();



extern _Float64x scalbnf64x (_Float64x __x, int __n) throw (); extern _Float64x __scalbnf64x (_Float64x __x, int __n) throw ();



extern int ilogbf64x (_Float64x __x) throw (); extern int __ilogbf64x (_Float64x __x) throw ();




extern long int llogbf64x (_Float64x __x) throw (); extern long int __llogbf64x (_Float64x __x) throw ();




extern _Float64x scalblnf64x (_Float64x __x, long int __n) throw (); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) throw ();



extern _Float64x nearbyintf64x (_Float64x __x) throw (); extern _Float64x __nearbyintf64x (_Float64x __x) throw ();



extern _Float64x roundf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) throw () __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw (); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw ();






extern long int lrintf64x (_Float64x __x) throw (); extern long int __lrintf64x (_Float64x __x) throw ();
__extension__
extern long long int llrintf64x (_Float64x __x) throw (); extern long long int __llrintf64x (_Float64x __x) throw ();



extern long int lroundf64x (_Float64x __x) throw (); extern long int __lroundf64x (_Float64x __x) throw ();
__extension__
extern long long int llroundf64x (_Float64x __x) throw (); extern long long int __llroundf64x (_Float64x __x) throw ();



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw (); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw ();




extern _Float64x roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ();



extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) throw ();




extern int totalorderf64x (const _Float64x *__x, const _Float64x *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf64x (const _Float64x *__x, const _Float64x *__y) throw ()

     __attribute__ ((__pure__));


extern _Float64x getpayloadf64x (const _Float64x *__x) throw (); extern _Float64x __getpayloadf64x (const _Float64x *__x) throw ();


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) throw ();


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) throw ();
# 458 "/usr/include/math.h" 2 3 4
# 503 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float fadd (double __x, double __y) throw ();


extern float fdiv (double __x, double __y) throw ();


extern float fmul (double __x, double __y) throw ();


extern float fsub (double __x, double __y) throw ();
# 504 "/usr/include/math.h" 2 3 4
# 517 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float faddl (long double __x, long double __y) throw ();


extern float fdivl (long double __x, long double __y) throw ();


extern float fmull (long double __x, long double __y) throw ();


extern float fsubl (long double __x, long double __y) throw ();
# 518 "/usr/include/math.h" 2 3 4
# 537 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern double daddl (long double __x, long double __y) throw ();


extern double ddivl (long double __x, long double __y) throw ();


extern double dmull (long double __x, long double __y) throw ();


extern double dsubl (long double __x, long double __y) throw ();
# 538 "/usr/include/math.h" 2 3 4
# 616 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32divf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32mulf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32subf32x (_Float32x __x, _Float32x __y) throw ();
# 617 "/usr/include/math.h" 2 3 4
# 626 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32divf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32mulf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32subf64 (_Float64 __x, _Float64 __y) throw ();
# 627 "/usr/include/math.h" 2 3 4
# 636 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32divf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32mulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32subf64x (_Float64x __x, _Float64x __y) throw ();
# 637 "/usr/include/math.h" 2 3 4
# 666 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xdivf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xmulf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xsubf64 (_Float64 __x, _Float64 __y) throw ();
# 667 "/usr/include/math.h" 2 3 4
# 676 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xdivf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xmulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xsubf64x (_Float64x __x, _Float64x __y) throw ();
# 677 "/usr/include/math.h" 2 3 4
# 706 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64divf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64mulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64subf64x (_Float64x __x, _Float64x __y) throw ();
# 707 "/usr/include/math.h" 2 3 4
# 773 "/usr/include/math.h" 3 4
extern int signgam;
# 853 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 973 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     throw () __attribute__ ((__const__));
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }



}
# 974 "/usr/include/math.h" 2 3 4
# 985 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}





}
# 1016 "/usr/include/math.h" 3 4
extern "C++" {
# 1047 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 1278 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (long double __x, long double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};
# 1321 "/usr/include/math.h" 3 4
template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 26 "firmware/nnet_utils/nnet_helpers.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 1 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 67 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 115 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 154 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 195 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 236 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };
# 275 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
   template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs) { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };



  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };



  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }

    protected:
      virtual
      ~codecvt_byname() { }
    };




  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);




}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 1 3
# 36 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;


}
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _CharT>
    class __basic_file;


  template<>
    class __basic_file<char>
    {

      __c_file* _M_cfile;


      bool _M_cfile_created;

    public:
      __basic_file(__c_lock* __lock = 0) throw ();

      __basic_file*
      open(const char* __name, ios_base::openmode __mode, int __prot = 0664);

      __basic_file*
      sys_open(__c_file* __file, ios_base::openmode);

      __basic_file*
      sys_open(int __fd, ios_base::openmode __mode) throw ();

      __basic_file*
      close();

      __attribute__ ((__pure__)) bool
      is_open() const throw ();

      __attribute__ ((__pure__)) int
      fd() throw ();

      __attribute__ ((__pure__)) __c_file*
      file() throw ();

      ~__basic_file();

      streamsize
      xsputn(const char* __s, streamsize __n);

      streamsize
      xsputn_2(const char* __s1, streamsize __n1,
        const char* __s2, streamsize __n2);

      streamsize
      xsgetn(char* __s, streamsize __n);

      streamoff
      seekoff(streamoff __off, ios_base::seekdir __way) throw ();

      int
      sync();

      streamsize
      showmanyc();
    };


}
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 67 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_filebuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef __basic_file<char> __file_type;
      typedef typename traits_type::state_type __state_type;
      typedef codecvt<char_type, char, __state_type> __codecvt_type;

      friend class ios_base;

    protected:


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base::openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type* _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;
# 129 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type* _M_pback_cur_save;
      char_type* _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type* _M_codecvt;






      char* _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char* _M_ext_next;
      char* _M_ext_end;






      void
      _M_create_pback()
      {
 if (!_M_pback_init)
   {
     _M_pback_cur_save = this->gptr();
     _M_pback_end_save = this->egptr();
     this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback() throw()
      {
 if (_M_pback_init)
   {

     _M_pback_cur_save += this->gptr() != this->eback();
     this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
     _M_pback_init = false;
   }
      }

    public:







      basic_filebuf();




      virtual
      ~basic_filebuf()
      { this->close(); }





      bool
      is_open() const throw()
      { return _M_file.is_open(); }
# 265 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      open(const char* __s, ios_base::openmode __mode);
# 275 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      open(const std::string& __s, ios_base::openmode __mode)
      { return open(__s.c_str(), __mode); }
# 292 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      close();

    protected:
      void
      _M_allocate_internal_buffer();

      void
      _M_destroy_internal_buffer() throw();


      virtual streamsize
      showmanyc();






      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = _Traits::eof());
# 324 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      virtual int_type
      overflow(int_type __c = _Traits::eof());



      bool
      _M_convert_to_external(char_type*, streamsize);
# 344 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n);

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __pos,
       ios_base::openmode __mode = ios_base::in | ios_base::out);


      pos_type
      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);

      int
      _M_get_ext_pos(__state_type &__state);

      virtual int
      sync();

      virtual void
      imbue(const locale& __loc);

      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);

      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);


      bool
      _M_terminate_output();
# 390 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      _M_set_buffer(streamsize __off)
      {
  const bool __testin = _M_mode & ios_base::in;
  const bool __testout = _M_mode & ios_base::out;

 if (__testin && __off > 0)
   this->setg(_M_buf, _M_buf, _M_buf + __off);
 else
   this->setg(_M_buf, _M_buf, _M_buf);

 if (__testout && __off == 0 && _M_buf_size > 1 )
   this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 else
   this->setp(0, 0);
      }
    };
# 418 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ifstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 445 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      basic_ifstream() : __istream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 458 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 474 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ifstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 490 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      ~basic_ifstream()
      { }
# 500 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 529 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 549 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const std::string& __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 567 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 586 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ofstream : public basic_ostream<_CharT,_Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 613 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      basic_ofstream(): __ostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 627 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ofstream(const char* __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 645 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ofstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 661 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      ~basic_ofstream()
      { }
# 671 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 700 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 721 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const std::string& __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 740 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 759 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_fstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ios<char_type, traits_type> __ios_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 787 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 799 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_fstream(const char* __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }







      explicit
      basic_fstream(const std::string& __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 830 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      ~basic_fstream()
      { }
# 840 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 869 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 890 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const std::string& __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 909 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };


}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_allocate_internal_buffer()
    {


      if (!_M_buf_allocated && !_M_buf)
 {
   _M_buf = new char_type[_M_buf_size];
   _M_buf_allocated = true;
 }
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_destroy_internal_buffer() throw()
    {
      if (_M_buf_allocated)
 {
   delete [] _M_buf;
   _M_buf = 0;
   _M_buf_allocated = false;
 }
      delete [] _M_ext_buf;
      _M_ext_buf = 0;
      _M_ext_buf_size = 0;
      _M_ext_next = 0;
      _M_ext_end = 0;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),
    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),
    _M_state_last(), _M_buf(0), _M_buf_size(8192),
    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(),
    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),
    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),
    _M_ext_end(0)
    {
      if (has_facet<__codecvt_type>(this->_M_buf_locale))
 _M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    open(const char* __s, ios_base::openmode __mode)
    {
      __filebuf_type *__ret = 0;
      if (!this->is_open())
 {
   _M_file.open(__s, __mode);
   if (this->is_open())
     {
       _M_allocate_internal_buffer();
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer(-1);


       _M_state_last = _M_state_cur = _M_state_beg;


       if ((__mode & ios_base::ate)
    && this->seekoff(0, ios_base::end, __mode)
    == pos_type(off_type(-1)))
  this->close();
       else
  __ret = this;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    close()
    {
      if (!this->is_open())
 return 0;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf *__fb;
   __close_sentry (basic_filebuf *__fbi): __fb(__fbi) { }
   ~__close_sentry ()
   {
     __fb->_M_mode = ios_base::openmode(0);
     __fb->_M_pback_init = false;
     __fb->_M_destroy_internal_buffer();
     __fb->_M_reading = false;
     __fb->_M_writing = false;
     __fb->_M_set_buffer(-1);
     __fb->_M_state_last = __fb->_M_state_cur = __fb->_M_state_beg;
   }
 } __cs (this);

 if (true)
   {
     if (!_M_terminate_output())
       __testfail = true;
   }
 if (false)
   {
     _M_file.close();
                            ;
   }
 if (false)
   { __testfail = true; }
      }

      if (!_M_file.close())
 __testfail = true;

      if (__testfail)
 return 0;
      else
 return this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    showmanyc()
    {
      streamsize __ret = -1;
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && this->is_open())
 {


   __ret = this->egptr() - this->gptr();







   if (__check_facet(_M_codecvt).encoding() >= 0)

     __ret += _M_file.showmanyc() / _M_codecvt->max_length();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }



   _M_destroy_pback();

   if (this->gptr() < this->egptr())
     return traits_type::to_int_type(*this->gptr());


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base::result __r = codecvt_base::ok;
   if (__check_facet(_M_codecvt).always_noconv())
     {
       __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()),
          __buflen);
       if (__ilen == 0)
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt->encoding();
       streamsize __blen;
       streamsize __rlen;
       if (__enc > 0)
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt->max_length() - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if (_M_reading && this->egptr() == this->eback() && __remainder)
  __rlen = 0;



       if (_M_ext_buf_size < __blen)
  {
    char* __buf = new char[__blen];
    if (__remainder)
      __builtin_memcpy(__buf, _M_ext_next, __remainder);

    delete [] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if (__remainder)
  __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if (__rlen > 0)
      {



        if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)
   {
     __throw_ios_failure(("basic_filebuf::underflow " "codecvt::max_length() " "is not valid"));


   }
        streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);
        if (__elen == 0)
   __got_eof = true;
        else if (__elen == -1)
   break;
        _M_ext_end += __elen;
      }

    char_type* __iend = this->eback();
    if (_M_ext_next < _M_ext_end)
      __r = _M_codecvt->in(_M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this->eback(),
      this->eback() + __buflen, __iend);
    if (__r == codecvt_base::noconv)
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std::min(__avail, __buflen);
        traits_type::copy(this->eback(),
     reinterpret_cast<char_type*>
     (_M_ext_buf), __ilen);
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this->eback();




    if (__r == codecvt_base::error)
      break;

    __rlen = 1;
  }
       while (__ilen == 0 && !__got_eof);
     }

   if (__ilen > 0)
     {
       _M_set_buffer(__ilen);
       _M_reading = true;
       __ret = traits_type::to_int_type(*this->gptr());
     }
   else if (__got_eof)
     {



       _M_set_buffer(-1);
       _M_reading = false;


       if (__r == codecvt_base::partial)
  __throw_ios_failure(("basic_filebuf::underflow " "incomplete character in file"));

     }
   else if (__r == codecvt_base::error)
     __throw_ios_failure(("basic_filebuf::underflow " "invalid byte sequence in file"));

   else
     __throw_ios_failure(("basic_filebuf::underflow " "error reading the file"));

 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    pbackfail(int_type __i)
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type::eq_int_type(__i, __ret);
   int_type __tmp;
   if (this->eback() < this->gptr())
     {
       this->gbump(-1);
       __tmp = traits_type::to_int_type(*this->gptr());
     }
   else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))
     {
       __tmp = this->underflow();
       if (traits_type::eq_int_type(__tmp, __ret))
  return __ret;
     }
   else
     {





       return __ret;
     }



   if (!__testeof && traits_type::eq_int_type(__i, __tmp))
     __ret = __i;
   else if (__testeof)
     __ret = traits_type::not_eof(__i);
   else if (!__testpb)
     {
       _M_create_pback();
       _M_reading = true;
       *this->gptr() = traits_type::to_char_type(__i);
       __ret = __i;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    overflow(int_type __c)
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(__c, __ret);
      const bool __testout = _M_mode & ios_base::out;
      if (__testout)
 {
          if (_M_reading)
            {
              _M_destroy_pback();
              const int __gptr_off = _M_get_ext_pos(_M_state_last);
              if (_M_seek(__gptr_off, ios_base::cur, _M_state_last)
                  == pos_type(off_type(-1)))
                return __ret;
            }
   if (this->pbase() < this->pptr())
     {

       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }



       if (_M_convert_to_external(this->pbase(),
      this->pptr() - this->pbase()))
  {
    _M_set_buffer(0);
    __ret = traits_type::not_eof(__c);
  }
     }
   else if (_M_buf_size > 1)
     {



       _M_set_buffer(0);
       _M_writing = true;
       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
       __ret = traits_type::not_eof(__c);
     }
   else
     {

       char_type __conv = traits_type::to_char_type(__c);
       if (__testeof || _M_convert_to_external(&__conv, 1))
  {
    _M_writing = true;
    __ret = traits_type::not_eof(__c);
  }
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)
    {

      streamsize __elen;
      streamsize __plen;
      if (__check_facet(_M_codecvt).always_noconv())
 {
   __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt->max_length();
   char* __buf = static_cast<char*>(__builtin_alloca(__blen));

   char* __bend;
   const char_type* __iend;
   codecvt_base::result __r;
   __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend);

   if (__r == codecvt_base::ok || __r == codecvt_base::partial)
     __blen = __bend - __buf;
   else if (__r == codecvt_base::noconv)
     {

       __buf = reinterpret_cast<char*>(__ibuf);
       __blen = __ilen;
     }
   else
     __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));


   __elen = _M_file.xsputn(__buf, __blen);
   __plen = __blen;


   if (__r == codecvt_base::partial && __elen == __plen)
     {
       const char_type* __iresume = __iend;
       streamsize __rlen = this->pptr() - __iend;
       __r = _M_codecvt->out(_M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend);
       if (__r != codecvt_base::error)
  {
    __rlen = __bend - __buf;
    __elen = _M_file.xsputn(__buf, __rlen);
    __plen = __rlen;
  }
       else
  __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));

     }
 }
      return __elen == __plen;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsgetn(_CharT* __s, streamsize __n)
    {

      streamsize __ret = 0;
      if (_M_pback_init)
 {
   if (__n > 0 && this->gptr() == this->eback())
     {
       *__s++ = *this->gptr();
       this->gbump(1);
       __ret = 1;
       --__n;
     }
   _M_destroy_pback();
 }
      else if (_M_writing)
 {
    if (overflow() == traits_type::eof())
      return __ret;
    _M_set_buffer(-1);
    _M_writing = false;
  }




      const bool __testin = _M_mode & ios_base::in;
      const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

      if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()
     && __testin)
   {

     const streamsize __avail = this->egptr() - this->gptr();
     if (__avail != 0)
       {
        traits_type::copy(__s, this->gptr(), __avail);
         __s += __avail;
        this->setg(this->eback(), this->gptr() + __avail,
     this->egptr());
        __ret += __avail;
        __n -= __avail;
       }



     streamsize __len;
     for (;;)
       {
         __len = _M_file.xsgetn(reinterpret_cast<char*>(__s),
           __n);
         if (__len == -1)
    __throw_ios_failure(("basic_filebuf::xsgetn " "error reading the file"));

         if (__len == 0)
    break;

         __n -= __len;
         __ret += __len;
         if (__n == 0)
    break;

         __s += __len;
       }

     if (__n == 0)
       {
         _M_set_buffer(0);
         _M_reading = true;
       }
     else if (__len == 0)
       {



         _M_set_buffer(-1);
         _M_reading = false;
       }
   }
      else
   __ret += __streambuf_type::xsgetn(__s, __n);

      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsputn(const _CharT* __s, streamsize __n)
    {
      streamsize __ret = 0;



      const bool __testout = _M_mode & ios_base::out;
      if (__check_facet(_M_codecvt).always_noconv()
     && __testout && !_M_reading)
 {

   const streamsize __chunk = 1ul << 10;
   streamsize __bufavail = this->epptr() - this->pptr();


   if (!_M_writing && _M_buf_size > 1)
     __bufavail = _M_buf_size - 1;

   const streamsize __limit = std::min(__chunk, __bufavail);
   if (__n >= __limit)
     {
       const streamsize __buffill = this->pptr() - this->pbase();
       const char* __buf = reinterpret_cast<const char*>(this->pbase());
       __ret = _M_file.xsputn_2(__buf, __buffill,
           reinterpret_cast<const char*>(__s),
           __n);
       if (__ret == __buffill + __n)
  {
    _M_set_buffer(0);
    _M_writing = true;
  }
       if (__ret > __buffill)
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type::xsputn(__s, __n);
 }
       else
  __ret = __streambuf_type::xsputn(__s, __n);
       return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__streambuf_type*
    basic_filebuf<_CharT, _Traits>::
    setbuf(char_type* __s, streamsize __n)
    {
      if (!this->is_open())
 {
   if (__s == 0 && __n == 0)
     _M_buf_size = 1;
   else if (__s && __n > 0)
     {
# 701 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3
       _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }




  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)
    {
      int __width = 0;
      if (_M_codecvt)
 __width = _M_codecvt->encoding();
      if (__width < 0)
 __width = 0;

      pos_type __ret = pos_type(off_type(-1));
      const bool __testfail = __off != 0 && __width <= 0;
      if (this->is_open() && !__testfail)
 {




   bool __no_movement = __way == ios_base::cur && __off == 0
     && (!_M_writing || _M_codecvt->always_noconv());


   if (!__no_movement)
     _M_destroy_pback();






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if (_M_reading && __way == ios_base::cur)
     {
       __state = _M_state_last;
       __computed_off += _M_get_ext_pos(__state);
     }
   if (!__no_movement)
     __ret = _M_seek(__computed_off, __way, __state);
   else
     {
       if (_M_writing)
  __computed_off = this->pptr() - this->pbase();

        off_type __file_off = _M_file.seekoff(0, ios_base::cur);
        if (__file_off != off_type(-1))
  {
    __ret = __file_off + __computed_off;
    __ret.state(__state);
  }
     }
 }
      return __ret;
    }





  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekpos(pos_type __pos, ios_base::openmode)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (this->is_open())
 {

   _M_destroy_pback();
   __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (_M_terminate_output())
 {
   off_type __file_off = _M_file.seekoff(__off, __way);
   if (__file_off != off_type(-1))
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer(-1);
       _M_state_cur = __state;
       __ret = __file_off;
       __ret.state(_M_state_cur);
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    int basic_filebuf<_CharT, _Traits>::
    _M_get_ext_pos(__state_type& __state)
    {
      if (_M_codecvt->always_noconv())
        return this->gptr() - this->egptr();
      else
        {



          const int __gptr_off =
            _M_codecvt->length(__state, _M_ext_buf, _M_ext_next,
                               this->gptr() - this->eback());
          return _M_ext_buf + __gptr_off - _M_ext_end;
        }
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_terminate_output()
    {

      bool __testvalid = true;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __testvalid = false;
 }


      if (_M_writing && !__check_facet(_M_codecvt).always_noconv()
   && __testvalid)
 {



   const size_t __blen = 128;
   char __buf[__blen];
   codecvt_base::result __r;
   streamsize __ilen = 0;

   do
     {
       char* __next;
       __r = _M_codecvt->unshift(_M_state_cur, __buf,
     __buf + __blen, __next);
       if (__r == codecvt_base::error)
  __testvalid = false;
       else if (__r == codecvt_base::ok ||
         __r == codecvt_base::partial)
  {
    __ilen = __next - __buf;
    if (__ilen > 0)
      {
        const streamsize __elen = _M_file.xsputn(__buf, __ilen);
        if (__elen != __ilen)
   __testvalid = false;
      }
  }
     }
   while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);

   if (__testvalid)
     {




       const int_type __tmp = this->overflow();
       if (traits_type::eq_int_type(__tmp, traits_type::eof()))
  __testvalid = false;
     }
 }
      return __testvalid;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_filebuf<_CharT, _Traits>::
    sync()
    {


      int __ret = 0;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __ret = -1;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    imbue(const locale& __loc)
    {
      bool __testvalid = true;

      const __codecvt_type* _M_codecvt_tmp = 0;
      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))
 _M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);

      if (this->is_open())
 {

   if ((_M_reading || _M_writing)
       && __check_facet(_M_codecvt).encoding() == -1)
     __testvalid = false;
   else
     {
       if (_M_reading)
  {
    if (__check_facet(_M_codecvt).always_noconv())
      {
        if (_M_codecvt_tmp
     && !__check_facet(_M_codecvt_tmp).always_noconv())
   __testvalid = this->seekoff(0, ios_base::cur, _M_mode)
                 != pos_type(off_type(-1));
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt->length(_M_state_last, _M_ext_buf,
          _M_ext_next,
          this->gptr() - this->eback());
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if (__remainder)
   __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer(-1);
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if (_M_writing && (__testvalid = _M_terminate_output()))
  _M_set_buffer(-1);
     }
 }

      if (__testvalid)
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }




  extern template class basic_filebuf<char>;
  extern template class basic_ifstream<char>;
  extern template class basic_ofstream<char>;
  extern template class basic_fstream<char>;


  extern template class basic_filebuf<wchar_t>;
  extern template class basic_ifstream<wchar_t>;
  extern template class basic_ofstream<wchar_t>;
  extern template class basic_fstream<wchar_t>;




}
# 921 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 27 "firmware/nnet_utils/nnet_helpers.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 1 3
# 59 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 3
# 59 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 1 3
# 59 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 59 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 69 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 1 3
# 68 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace rel_ops
  {
# 86 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 99 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 112 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 125 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }


  }

}
# 70 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 2 3






namespace std __attribute__ ((__visibility__ ("default")))
{


  template<class _Tp>
    class tuple_size;

  template<std::size_t _Int, class _Tp>
    class tuple_element;


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2> >
    { static const std::size_t value = 2; };

  template<class _Tp1, class _Tp2>
    const std::size_t
    tuple_size<std::pair<_Tp1, _Tp2> >::value;

  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2> >
    { typedef _Tp1 type; };

  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2> >
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
      static _Tp1& __get(std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
      static const _Tp1& __const_get(const std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.first; }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
      static _Tp2& __get(std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
      static const _Tp2& __const_get(const std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.second; }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&
    get(std::pair<_Tp1, _Tp2>& __in)
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    inline const typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&
    get(const std::pair<_Tp1, _Tp2>& __in)
    { return __pair_get<_Int>::__const_get(__in); }


}
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 2 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 1 3
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3






namespace std __attribute__ ((__visibility__ ("default")))
{
# 191 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _Predicate>
    bool
    all_of(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Predicate>
    bool
    any_of(_IIter, _IIter, _Predicate);


  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);


  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    copy_if(_IIter, _IIter, _OIter, _Predicate);

  template<typename _IIter, typename _Size, typename _OIter>
    _OIter
    copy_n(_IIter, _Size, _OIter);





  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);





  template<typename _IIter, typename _Predicate>
    _IIter
    find_if_not(_IIter, _IIter, _Predicate);






  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);


  template<typename _RAIter>
    bool
    is_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    bool
    is_heap(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    _RAIter
    is_heap_until(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    _RAIter
    is_heap_until(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _Predicate>
    bool
    is_partitioned(_IIter, _IIter, _Predicate);

  template<typename _FIter1, typename _FIter2>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2);

  template<typename _FIter1, typename _FIter2,
    typename _BinaryPredicate>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);

  template<typename _FIter>
    bool
    is_sorted(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    bool
    is_sorted(_FIter, _FIter, _Compare);

  template<typename _FIter>
    _FIter
    is_sorted_until(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    is_sorted_until(_FIter, _FIter, _Compare);


  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&, _Compare);

  template<typename _FIter>
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter, _Compare);

  template<typename _Tp>
    _Tp
    min(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    _Tp
    min(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    _Tp
    max(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    _Tp
    max(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>, _Compare);




  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);


  template<typename _IIter, typename _Predicate>
    bool
    none_of(_IIter, _IIter, _Predicate);





  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);




  template<typename _IIter, typename _OIter1,
    typename _OIter2, typename _Predicate>
    pair<_OIter1, _OIter2>
    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);

  template<typename _FIter, typename _Predicate>
    _FIter
    partition_point(_FIter, _FIter, _Predicate);


  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  template<typename _FIter>
    void
    rotate(_FIter, _FIter, _FIter);

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 532 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _RAIter, typename _UGenerator>
    void
    shuffle(_RAIter, _RAIter, _UGenerator&&);


  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);

  template<typename _Tp>
    void
    swap(_Tp&, _Tp&);

  template<typename _Tp, size_t _Nm>
    void
    swap(_Tp (&)[_Nm], _Tp (&)[_Nm]);

  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);





  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,

     _Generator&&);




  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);


}
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 1 3
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__first[__parent] < __first[__child])
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first[__parent], __first[__child]))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    { return std::__is_heap_until(__first, __n) == __n; }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    { return std::__is_heap_until(__first, __n, __comp) == __n; }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && *(__first + __parent) < __value)
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 154 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;
                                                  ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value));
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,
  _Distance __topIndex, _Tp __value, _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex
      && __comp(*(__first + __parent), __value))
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 203 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;
                                                               ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value));
    }

  template<typename _RandomAccessIterator>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value));
    }
# 276 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                     ;
                                              ;

      --__last;
      std::__pop_heap(__first, __last, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(*(__first + __secondChild),
       *(__first + (__secondChild - 1))))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value), __comp);
    }
# 350 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {



                                                     ;
                                                           ;

      --__last;
      std::__pop_heap(__first, __last, __last, __comp);
    }
# 373 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value));
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 413 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 452 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;
                                              ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last);
 }
    }
# 481 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {



                                                     ;
                                                           ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 510 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      return __first + std::__is_heap_until(__first, std::distance(__first,
           __last));
    }
# 536 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {



                                                     ;

      return __first + std::__is_heap_until(__first, std::distance(__first,
           __last),
         __comp);
    }
# 558 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::is_heap_until(__first, __last) == __last; }
# 571 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
    { return std::is_heap_until(__first, __last, __comp) == __last; }



}
# 64 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 1 3
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 1 3
# 64 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
# 91 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 3
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template <typename _Tp> class allocator;

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 __alloc.destroy(std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 84 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len)
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 111 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {



    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __ucr(_ForwardIterator __first, _ForwardIterator __last,
       _Tp& __value)
        {
   if(__first == __last)
     return;

   _ForwardIterator __cur = __first;
   if (true)
     {
       std::_Construct(std::__addressof(*__first),
         std::move(__value));
       _ForwardIterator __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       __value = std::move(*__prev);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __ucr(_ForwardIterator, _ForwardIterator, _Tp&) { }
    };
# 230 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_construct_buf(_ForwardIterator __first,
      _ForwardIterator __last,
      _Tp& __value)
    {
      typedef typename std::iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __value);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      if (true)
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if(_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            *__first);
 }
      if (false)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
                          ;
 }
    }


}
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 3





# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 76 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;

  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;

  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;

  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;

  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }

  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;

  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;

  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;

  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;

  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;

  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;

  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;

  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }

  using ::frexp;

  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;

  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
  ldexp(_Tp __x, int __exp)
  { return __builtin_ldexp(__x, __exp); }

  using ::log;

  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;

  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;

  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }

  using ::pow;

  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 371 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;

  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;

  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;

  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;

  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;

  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 480 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  inline int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  inline int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  inline int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }

  inline bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  inline bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  inline bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isfinite(_Tp __x)
    { return true; }

  inline bool
  isinf(float __x)
  { return __builtin_isinf(__x); }

  inline bool
  isinf(double __x)
  { return __builtin_isinf(__x); }

  inline bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isinf(_Tp __x)
    { return false; }

  inline bool
  isnan(float __x)
  { return __builtin_isnan(__x); }

  inline bool
  isnan(double __x)
  { return __builtin_isnan(__x); }

  inline bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isnan(_Tp __x)
    { return false; }

  inline bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  inline bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  inline bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }

  inline bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  inline bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  inline bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }

  inline bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  inline bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  inline bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }

  inline bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  inline bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  inline bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }

  inline bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  inline bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  inline bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }

  inline bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  inline bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  inline bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }

  inline bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  inline bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  inline bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }

  inline bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  inline bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  inline bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 842 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
}
# 957 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;

  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;

  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;


  inline float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  inline long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    acosh(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return acosh(__type(__x));
    }

  inline float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  inline long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    asinh(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return asinh(__type(__x));
    }

  inline float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  inline long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    atanh(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return atanh(__type(__x));
    }

  inline float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  inline long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    cbrt(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return cbrt(__type(__x));
    }

  inline float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  inline long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }

  inline float
  erf(float __x)
  { return __builtin_erff(__x); }

  inline long double
  erf(long double __x)
  { return __builtin_erfl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    erf(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return erf(__type(__x));
    }

  inline float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  inline long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    erfc(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return erfc(__type(__x));
    }

  inline float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  inline long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    exp2(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return exp2(__type(__x));
    }

  inline float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  inline long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    expm1(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return expm1(__type(__x));
    }

  inline float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  inline long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }

  inline float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  inline long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }

  template<typename _Tp, typename _Up, typename _Vp>
    inline typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }

  inline float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  inline long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }

  inline float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  inline long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }

  inline float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  inline long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }

  inline int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  inline int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }

  template<typename _Tp>
    inline int
    ilogb(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return ilogb(__type(__x));
    }

  inline float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  inline long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    lgamma(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return lgamma(__type(__x));
    }

  inline long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  inline long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }

  template<typename _Tp>
    inline long long
    llrint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return llrint(__type(__x));
    }

  inline long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  inline long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }

  template<typename _Tp>
    inline long long
    llround(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return llround(__type(__x));
    }

  inline float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  inline long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    log1p(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return log1p(__type(__x));
    }


  inline float
  log2(float __x)
  { return __builtin_log2f(__x); }

  inline long double
  log2(long double __x)
  { return __builtin_log2l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    log2(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return log2(__type(__x));
    }

  inline float
  logb(float __x)
  { return __builtin_logbf(__x); }

  inline long double
  logb(long double __x)
  { return __builtin_logbl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    logb(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return logb(__type(__x));
    }

  inline long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  inline long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }

  template<typename _Tp>
    inline long
    lrint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return lrint(__type(__x));
    }

  inline long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  inline long
  lround(long double __x)
  { return __builtin_lroundl(__x); }

  template<typename _Tp>
    inline long
    lround(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return lround(__type(__x));
    }

  inline float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  inline long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    nearbyint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return nearbyint(__type(__x));
    }

  inline float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  inline long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }

  inline float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  inline long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    nexttoward(_Tp __x, long double __y)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return nexttoward(__type(__x), __y);
    }

  inline float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  inline long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }

  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }

  inline float
  rint(float __x)
  { return __builtin_rintf(__x); }

  inline long double
  rint(long double __x)
  { return __builtin_rintl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    rint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return rint(__type(__x));
    }

  inline float
  round(float __x)
  { return __builtin_roundf(__x); }

  inline long double
  round(long double __x)
  { return __builtin_roundl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    round(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return round(__type(__x));
    }

  inline float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  inline long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    scalbln(_Tp __x, long __ex)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return scalbln(__type(__x), __ex);
    }

  inline float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  inline long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    scalbn(_Tp __x, int __ex)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return scalbn(__type(__x), __ex);
    }

  inline float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  inline long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    tgamma(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return tgamma(__type(__x));
    }

  inline float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  inline long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    trunc(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return trunc(__type(__x));
    }


}
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
# 147 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 191 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;



    static constexpr bool is_integer = false;





    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;





    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 302 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() throw() { return static_cast<_Tp>(0); }


      static constexpr _Tp
      max() throw() { return static_cast<_Tp>(0); }




      static constexpr _Tp
      lowest() throw() { return static_cast<_Tp>(0); }




      static constexpr _Tp
      epsilon() throw() { return static_cast<_Tp>(0); }


      static constexpr _Tp
      round_error() throw() { return static_cast<_Tp>(0); }


      static constexpr _Tp
      infinity() throw() { return static_cast<_Tp>(0); }



      static constexpr _Tp
      quiet_NaN() throw() { return static_cast<_Tp>(0); }



      static constexpr _Tp
      signaling_NaN() throw() { return static_cast<_Tp>(0); }




      static constexpr _Tp
      denorm_min() throw() { return static_cast<_Tp>(0); }
    };


  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };






  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() throw() { return false; }

      static constexpr bool
      max() throw() { return true; }


      static constexpr bool
      lowest() throw() { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() throw() { return false; }

      static constexpr bool
      round_error() throw() { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() throw() { return false; }

      static constexpr bool
      quiet_NaN() throw() { return false; }

      static constexpr bool
      signaling_NaN() throw() { return false; }

      static constexpr bool
      denorm_min() throw() { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() throw() { return (((char)(-1) < 0) ? (char)1 << (sizeof(char) * 8 - ((char)(-1) < 0)) : (char)0); }

      static constexpr char
      max() throw() { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() throw() { return 0; }

      static constexpr char
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() throw() { return char(); }

      static constexpr char
      quiet_NaN() throw() { return char(); }

      static constexpr char
      signaling_NaN() throw() { return char(); }

      static constexpr char
      denorm_min() throw() { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() throw() { return -127 - 1; }

      static constexpr signed char
      max() throw() { return 127; }


      static constexpr signed char
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() throw() { return 0; }

      static constexpr signed char
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() throw() { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() throw() { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() throw() { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() throw() { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() throw() { return 0; }

      static constexpr unsigned char
      max() throw() { return 127 * 2U + 1; }


      static constexpr unsigned char
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() throw() { return 0; }

      static constexpr unsigned char
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() throw() { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() throw() { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() throw() { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() throw() { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() throw() { return (((wchar_t)(-1) < 0) ? (wchar_t)1 << (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) : (wchar_t)0); }

      static constexpr wchar_t
      max() throw() { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() throw() { return 0; }

      static constexpr wchar_t
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() throw() { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() throw() { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() throw() { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() throw() { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() throw() { return (((char16_t)(-1) < 0) ? (char16_t)1 << (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) : (char16_t)0); }

      static constexpr char16_t
      max() throw() { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }


      static constexpr char16_t
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed
       = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() throw() { return 0; }

      static constexpr char16_t
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() throw() { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() throw() { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() throw() { return char16_t(); }

      static constexpr char16_t
      denorm_min() throw() { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() throw() { return (((char32_t)(-1) < 0) ? (char32_t)1 << (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) : (char32_t)0); }

      static constexpr char32_t
      max() throw() { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }


      static constexpr char32_t
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed
       = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() throw() { return 0; }

      static constexpr char32_t
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() throw() { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() throw() { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() throw() { return char32_t(); }

      static constexpr char32_t
      denorm_min() throw() { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() throw() { return -32767 - 1; }

      static constexpr short
      max() throw() { return 32767; }


      static constexpr short
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() throw() { return 0; }

      static constexpr short
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() throw() { return short(); }

      static constexpr short
      quiet_NaN() throw() { return short(); }

      static constexpr short
      signaling_NaN() throw() { return short(); }

      static constexpr short
      denorm_min() throw() { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() throw() { return 0; }

      static constexpr unsigned short
      max() throw() { return 32767 * 2U + 1; }


      static constexpr unsigned short
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() throw() { return 0; }

      static constexpr unsigned short
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() throw() { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() throw() { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() throw() { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() throw() { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() throw() { return -2147483647 - 1; }

      static constexpr int
      max() throw() { return 2147483647; }


      static constexpr int
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() throw() { return 0; }

      static constexpr int
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() throw() { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() throw() { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() throw() { return static_cast<int>(0); }

      static constexpr int
      denorm_min() throw() { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() throw() { return 0; }

      static constexpr unsigned int
      max() throw() { return 2147483647 * 2U + 1; }


      static constexpr unsigned int
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() throw() { return 0; }

      static constexpr unsigned int
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() throw() { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() throw() { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() throw() { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() throw() { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() throw() { return -9223372036854775807L - 1; }

      static constexpr long
      max() throw() { return 9223372036854775807L; }


      static constexpr long
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() throw() { return 0; }

      static constexpr long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() throw() { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() throw() { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() throw() { return static_cast<long>(0); }

      static constexpr long
      denorm_min() throw() { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() throw() { return 0; }

      static constexpr unsigned long
      max() throw() { return 9223372036854775807L * 2UL + 1; }


      static constexpr unsigned long
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() throw() { return 0; }

      static constexpr unsigned long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() throw() { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() throw() { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() throw() { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() throw() { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() throw() { return -9223372036854775807LL - 1; }

      static constexpr long long
      max() throw() { return 9223372036854775807LL; }


      static constexpr long long
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() throw() { return 0; }

      static constexpr long long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() throw() { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() throw() { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() throw() { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() throw() { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() throw() { return 0; }

      static constexpr unsigned long long
      max() throw() { return 9223372036854775807LL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() throw() { return 0; }

      static constexpr unsigned long long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() throw() { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() throw() { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() throw() { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() throw() { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() throw() { return 1.17549435e-38F; }

      static constexpr float
      max() throw() { return 3.40282347e+38F; }


      static constexpr float
      lowest() throw() { return -3.40282347e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() throw() { return 1.19209290e-7F; }

      static constexpr float
      round_error() throw() { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() throw() { return __builtin_huge_valf (); }

      static constexpr float
      quiet_NaN() throw() { return __builtin_nanf (""); }

      static constexpr float
      signaling_NaN() throw() { return __builtin_nansf (""); }

      static constexpr float
      denorm_min() throw() { return 1.40129846e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() throw() { return 2.2250738585072014e-308; }

      static constexpr double
      max() throw() { return 1.7976931348623157e+308; }


      static constexpr double
      lowest() throw() { return -1.7976931348623157e+308; }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() throw() { return 2.2204460492503131e-16; }

      static constexpr double
      round_error() throw() { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() throw() { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() throw() { return __builtin_nan (""); }

      static constexpr double
      signaling_NaN() throw() { return __builtin_nans (""); }

      static constexpr double
      denorm_min() throw() { return 4.9406564584124654e-324; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() throw() { return 3.36210314311209350626e-4932L; }

      static constexpr long double
      max() throw() { return 1.18973149535723176502e+4932L; }


      static constexpr long double
      lowest() throw() { return -1.18973149535723176502e+4932L; }


      static constexpr int digits = 64;
      static constexpr int digits10 = 18;

      static constexpr int max_digits10
  = (2 + (64) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() throw() { return 1.08420217248550443401e-19L; }

      static constexpr long double
      round_error() throw() { return 0.5L; }

      static constexpr int min_exponent = (-16381);
      static constexpr int min_exponent10 = (-4931);
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() throw() { return __builtin_huge_vall (); }

      static constexpr long double
      quiet_NaN() throw() { return __builtin_nanl (""); }

      static constexpr long double
      signaling_NaN() throw() { return __builtin_nansl (""); }

      static constexpr long double
      denorm_min() throw() { return 3.64519953188247460253e-4951L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };






}
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3






# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 1 3
# 59 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 3
# 59 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 3




# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 1 3
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   if (true)
     {
       for (; __first != __last; ++__first, ++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   if (false)
     {
       std::_Destroy(__result, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 107 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
     && __is_trivial(_ValueType2))>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 164 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill<__is_trivial(_ValueType)>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { std::fill_n(__first, __n, __x); }
    };
# 218 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill_n<__is_trivial(_ValueType)>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   for (; __first != __last; ++__first, ++__cur)
     __alloc.construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__result, __cur, __alloc);
                          ;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __cur != __last; ++__cur)
     __alloc.construct(std::__addressof(*__cur), __x);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __n > 0; --__n, ++__cur)
     __alloc.construct(std::__addressof(*__cur), __x);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill_n(__first, __n, __x); }
# 332 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      if (true)
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      if (false)
 {
   std::_Destroy(__first2, __mid2, __alloc);
                          ;
 }
    }





  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill_n(__first, __n, _ValueType());
 }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_1<__is_trivial(_ValueType)>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline void
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_n_1<__is_trivial(_ValueType)>::
 __uninit_default_n(__first, __n);
    }

 template<typename _Tp, typename _Allocator>
   inline auto
   _Construct_default_a_impl(_Tp* __ptr, _Allocator& __alloc, void*)
   -> decltype(__alloc.construct(__ptr))
   { return __alloc.construct(__ptr); }

  template<typename _Tp, typename _Allocator>
   inline void
   _Construct_default_a_impl(_Tp* __ptr, _Allocator& __alloc, ...)
   { _Construct(__ptr); }

  template<typename _Tp, typename _Allocator>
   inline void
   _Construct_default_a(_Tp* __ptr, _Allocator& __alloc)
   { _Construct_default_a_impl(__ptr, __alloc, nullptr); }




  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __cur != __last; ++__cur)
     _Construct_default_a(std::__addressof(*__cur), __alloc);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __n > 0; --__n, ++__cur)
     _Construct_default_a(std::__addressof(*__cur), __alloc);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { std::__uninitialized_default_n(__first, __n); }


  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   for (; __n > 0; --__n, ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__result, __cur);
                          ;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }
# 644 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }



}
# 64 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 1 3
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 typename _Tp_alloc_type::pointer _M_start;
 typename _Tp_alloc_type::pointer _M_finish;
 typename _Tp_alloc_type::pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }

 _Vector_impl(_Tp_alloc_type const& __a)
 : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }


      _Vector_base(_Vector_base&& __x)
      : _M_impl(__x._M_get_Tp_allocator())
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = 0;
 __x._M_impl._M_finish = 0;
 __x._M_impl._M_end_of_storage = 0;
      }


      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      typename _Tp_alloc_type::pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
      {
 if (__p)
   _M_impl.deallocate(__p, __n);
      }
    };
# 179 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;



      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type::pointer pointer;
      typedef typename _Tp_alloc_type::const_pointer const_pointer;
      typedef typename _Tp_alloc_type::reference reference;
      typedef typename _Tp_alloc_type::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:





      vector()
      : _Base() { }





      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }
# 236 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      explicit
      vector(size_type __n)
      : _Base(__n)
      { _M_default_initialize(__n); }
# 249 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 278 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(), __x._M_get_Tp_allocator())
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 294 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector(vector&& __x)
      : _Base(std::move(__x)) { }
# 308 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 333 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _InputIterator>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }







      ~vector()
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 361 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 372 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector&
      operator=(vector&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 393 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }
# 411 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 427 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }
# 448 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      assign(initializer_list<value_type> __l)
      { this->assign(__l.begin(), __l.end()); }



      using _Base::get_allocator;







      iterator
      begin()
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end()
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const
      { return const_iterator(this->_M_impl._M_start); }






      const_iterator
      cend() const
      { return const_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crbegin() const
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const
      { return const_reverse_iterator(begin()); }




      size_type
      size() const
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const
      { return _M_get_Tp_allocator().max_size(); }
# 588 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 608 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 640 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      shrink_to_fit()
      { std::__shrink_to_fit<vector>::_S_do_it(*this); }






      size_type
      capacity() const
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const
      { return begin() == end(); }
# 679 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 694 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      reference
      operator[](size_type __n)
      { return *(this->_M_impl._M_start + __n); }
# 709 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("vector::_M_range_check"));
      }

    public:
# 734 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 752 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      { return *(end() - 1); }





      const_reference
      back() const
      { return *(end() - 1); }
# 799 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      _Tp*



      data()
      { return std::__addressof(front()); }


      const _Tp*



      data() const
      { return std::__addressof(front()); }
# 825 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     this->_M_impl.construct(this->_M_impl._M_finish, __x);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(end(), __x);
      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>
        void
        emplace_back(_Args&&... __args);
# 856 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      pop_back()
      {
 --this->_M_impl._M_finish;
 this->_M_impl.destroy(this->_M_impl._M_finish);
      }
# 876 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename... _Args>
        iterator
        emplace(iterator __position, _Args&&... __args);
# 892 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, const value_type& __x);
# 907 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 924 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      insert(iterator __position, initializer_list<value_type> __l)
      { this->insert(__position, __l.begin(), __l.end()); }
# 942 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      insert(iterator __position, size_type __n, const value_type& __x)
      { _M_fill_insert(__position, __n, __x); }
# 960 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_insert_dispatch(__position, __first, __last, _Integral());
 }
# 985 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      erase(iterator __position);
# 1006 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1018 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      swap(vector& __x)
      {
 std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 std::swap(this->_M_impl._M_end_of_storage,
    __x._M_impl._M_end_of_storage);



 std::__alloc_swap<_Tp_alloc_type>::_S_do_it(_M_get_Tp_allocator(),
          __x._M_get_Tp_allocator());
      }







      void
      clear()
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   if (true)
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   if (false)
     {
       _M_deallocate(__result, __n);
                              ;
     }
 }
# 1073 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
          _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }



      void
      _M_default_initialize(size_type __n)
      {
 std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
      _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }
# 1147 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1187 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_default_append(size_type __n);







      template<typename... _Args>
        void
        _M_insert_aux(iterator __position, _Args&&... __args);



      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos)
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }
    };
# 1271 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1288 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 1 3
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() : _M_p(0), _M_mask(0) { }

    operator bool() const
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x)
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x)
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip()
    { *_M_p ^= _M_mask; }
  };

  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename _Alloc::template rebind<_Bit_type>::other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type* _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator()
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }


      _Bvector_base(_Bvector_base&& __x)
      : _M_impl(__x._M_get_Bit_allocator())
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = _Bit_iterator();
 __x._M_impl._M_finish = _Bit_iterator();
 __x._M_impl._M_end_of_storage = 0;
      }


      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_type*
      _M_allocate(size_t __n)
      { return _M_impl.allocate((__n + int(_S_word_bit) - 1)
    / int(_S_word_bit)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   _M_impl.deallocate(_M_impl._M_start._M_p,
        _M_impl._M_end_of_storage - _M_impl._M_start._M_p);
      }
    };


}




namespace std __attribute__ ((__visibility__ ("default")))
{
# 478 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;


    template<typename> friend class hash;


  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()
    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }

    explicit
    vector(size_type __n, const bool& __value = bool(),
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_of_storage,
  __value ? ~0 : 0);
    }

    vector(const vector& __x)
    : _Base(__x._M_get_Bit_allocator())
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }


    vector(vector&& __x)
    : _Base(std::move(__x)) { }

    vector(initializer_list<bool> __l,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize_range(__l.begin(), __l.end(),
     random_access_iterator_tag());
    }


    template<typename _InputIterator>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_initialize_dispatch(__first, __last, _Integral());
      }

    ~vector() { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }


    vector&
    operator=(vector&& __x)
    {


      this->clear();
      this->swap(__x);
      return *this;
    }

    vector&
    operator=(initializer_list<bool> __l)
    {
      this->assign (__l.begin(), __l.end());
      return *this;
    }






    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }

    template<typename _InputIterator>
      void
      assign(_InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_assign_dispatch(__first, __last, _Integral());
      }


    void
    assign(initializer_list<bool> __l)
    { this->assign(__l.begin(), __l.end()); }


    iterator
    begin()
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const
    { return this->_M_impl._M_start; }

    iterator
    end()
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin()
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend()
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const
    { return const_reverse_iterator(begin()); }


    const_iterator
    cbegin() const
    { return this->_M_impl._M_start; }

    const_iterator
    cend() const
    { return this->_M_impl._M_finish; }

    const_reverse_iterator
    crbegin() const
    { return const_reverse_iterator(end()); }

    const_reverse_iterator
    crend() const
    { return const_reverse_iterator(begin()); }


    size_type
    size() const
    { return size_type(end() - begin()); }

    size_type
    max_size() const
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize = _M_get_Bit_allocator().max_size();
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const
    { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)
         - begin()); }

    bool
    empty() const
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
        __throw_out_of_range(("vector<bool>::_M_range_check"));
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n);

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x)
    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);



      std::__alloc_swap<typename _Base::_Bit_alloc_type>::
 _S_do_it(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y)
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator
    insert(iterator __position, const bool& __x = bool())
    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position, __x);
      return begin() + __n;
    }

    template<typename _InputIterator>
      void
      insert(iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_insert_dispatch(__position, __first, __last, _Integral());
      }

    void
    insert(iterator __position, size_type __n, const bool& __x)
    { _M_fill_insert(__position, __n, __x); }


    void insert(iterator __p, initializer_list<bool> __l)
    { this->insert(__p, __l.begin(), __l.end()); }


    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator
    erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

    iterator
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }


    void
    shrink_to_fit()
    { std::__shrink_to_fit<vector>::_S_do_it(*this); }


    void
    flip()
    {
      for (_Bit_type * __p = this->_M_impl._M_start._M_p;
    __p != this->_M_impl._M_end_of_storage; ++__p)
        *__p = ~*__p;
    }

    void
    clear()
    { _M_erase_at_end(begin()); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = (__q
      + ((__n + int(_S_word_bit) - 1)
         / int(_S_word_bit)));
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }





    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }
  };


}





namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>& __b) const;
    };


}
# 66 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 1 3
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
   std::make_move_iterator(this->_M_impl._M_start),
   std::make_move_iterator(this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     this->_M_impl.construct(this->_M_impl._M_finish,
        std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(end(), std::forward<_Args>(__args)...);
      }


  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    insert(iterator __position, const value_type& __x)
    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   this->_M_impl.construct(this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {

   if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     {
       _Tp __x_copy = __x;
       _M_insert_aux(__position, std::move(__x_copy));
     }
   else

     _M_insert_aux(__position, __x);
 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      this->_M_impl.destroy(this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp.swap(*this);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
     __n - size(), __val,
     _M_get_Tp_allocator());
   this->_M_impl._M_finish += __n - size();
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename vector<_Tp, _Alloc>::iterator
      vector<_Tp, _Alloc>::
      emplace(iterator __position, _Args&&... __args)
      {
 const size_type __n = __position - begin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
     && __position == end())
   {
     this->_M_impl.construct(this->_M_impl._M_finish,
        std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(__position, std::forward<_Args>(__args)...);
 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Args&&... __args)






    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   this->_M_impl.construct(this->_M_impl._M_finish,
      std::move(*(this->_M_impl._M_finish - 1)));

   ++this->_M_impl._M_finish;



   std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1);





   *__position = _Tp(std::forward<_Args>(__args)...);

 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   if (true)
     {




       this->_M_impl.construct(__new_start + __elems_before,

          std::forward<_Args>(__args)...);



       __new_finish = 0;

       __new_finish =
  std::__uninitialized_move_a(this->_M_impl._M_start,
         __position.base(), __new_start,
         _M_get_Tp_allocator());
       ++__new_finish;

       __new_finish =
  std::__uninitialized_move_a(__position.base(),
         this->_M_impl._M_finish,
         __new_finish,
         _M_get_Tp_allocator());
     }
          if (false)
     {
       if (!__new_finish)
  this->_M_impl.destroy(__new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
                              ;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish);

    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n - __elems_after;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       if (true)
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = 0;

    __new_finish =
      std::__uninitialized_move_a(this->_M_impl._M_start,
      __position.base(),
      __new_start,
      _M_get_Tp_allocator());
    __new_finish += __n;

    __new_finish =
      std::__uninitialized_move_a(__position.base(),
      this->_M_impl._M_finish,
      __new_finish,
      _M_get_Tp_allocator());
  }
       if (false)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
                           ;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       std::__uninitialized_default_n_a(this->_M_impl._M_finish,
            __n, _M_get_Tp_allocator());
       this->_M_impl._M_finish += __n;
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       const size_type __old_size = this->size();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       if (true)
  {
    __new_finish =
      std::__uninitialized_move_a(this->_M_impl._M_start,
      this->_M_impl._M_finish,
      __new_start,
      _M_get_Tp_allocator());
    std::__uninitialized_default_n_a(__new_finish, __n,
         _M_get_Tp_allocator());
    __new_finish += __n;
  }
       if (false)
  {
    std::_Destroy(__new_start, __new_finish,
    _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
                           ;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish);

      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  if (true)
    {
      __new_finish =
        std::__uninitialized_move_a(this->_M_impl._M_start,
        __position.base(),
        __new_start,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_copy_a(__first, __last,
        __new_finish,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_move_a(__position.base(),
        this->_M_impl._M_finish,
        __new_finish,
        _M_get_Tp_allocator());
    }
  if (false)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
                             ;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }




  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   _Bit_type* __q = this->_M_allocate(__n);
   this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),
          iterator(__q, 0));
   this->_M_deallocate();
   this->_M_impl._M_start = iterator(__q, 0);
   this->_M_impl._M_end_of_storage = (__q + (__n + int(_S_word_bit) - 1)
          / int(_S_word_bit));
 }
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_type * __q = this->_M_allocate(__len);
  iterator __i = _M_copy_aligned(begin(), __position,
            iterator(__q, 0));
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = (__q
         + ((__len
             + int(_S_word_bit) - 1)
            / int(_S_word_bit)));
  this->_M_impl._M_start = iterator(__q, 0);
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }


}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const
    {
      size_t __hash = 0;
      using std::_S_word_bit;
      using std::_Bit_type;

      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}
# 70 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __g);






  namespace __detail
  {


    template<typename _UIntType, size_t __w,
      bool = __w < static_cast<size_t>
     (std::numeric_limits<_UIntType>::digits)>
      struct _Shift
      { static const _UIntType __value = 0; };

    template<typename _UIntType, size_t __w>
      struct _Shift<_UIntType, __w, true>
      { static const _UIntType __value = _UIntType(1) << __w; };

    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool>
      struct _Mod;



    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
      inline _Tp
      __mod(_Tp __x)
      { return _Mod<_Tp, __m, __a, __c, __m == 0>::__calc(__x); }





    template<typename _Engine, typename _DInputType>
      struct _Adaptor
      {

      public:
 _Adaptor(_Engine& __g)
 : _M_g(__g) { }

 _DInputType
 min() const
 { return _DInputType(0); }

 _DInputType
 max() const
 { return _DInputType(1); }






 _DInputType
 operator()()
 {
   return std::generate_canonical<_DInputType,
                             std::numeric_limits<_DInputType>::digits,
                             _Engine>(_M_g);
 }

      private:
 _Engine& _M_g;
      };


  }
# 169 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    class linear_congruential_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(__m == 0u || (__a < __m && __c < __m),
      "template argument substituting __m out of bounds");



      static_assert(__m % __a < __m / __a,
      "sorry, not implemented yet: try a smaller 'a' constant");

    public:

      typedef _UIntType result_type;


      static constexpr result_type multiplier = __a;

      static constexpr result_type increment = __c;

      static constexpr result_type modulus = __m;
      static constexpr result_type default_seed = 1u;
# 201 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      explicit
      linear_congruential_engine(result_type __s = default_seed)
      { seed(__s); }







      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, linear_congruential_engine>::value>
        ::type>
        explicit
        linear_congruential_engine(_Sseq& __q)
        { seed(__q); }







      void
      seed(result_type __s = default_seed);
# 234 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _Sseq>
        typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);







      static constexpr result_type
      min()
      { return __c == 0u ? 1u : 0u; }




      static constexpr result_type
      max()
      { return __m - 1u; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()()
      {
 _M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
 return _M_x;
      }
# 286 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const linear_congruential_engine& __lhs,
   const linear_congruential_engine& __rhs)
      { return __lhs._M_x == __rhs._M_x; }
# 299 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::linear_congruential_engine<_UIntType1,
     __a1, __c1, __m1>&);
# 319 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::linear_congruential_engine<_UIntType1, __a1,
     __c1, __m1>&);

    private:
      _UIntType _M_x;
    };
# 341 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    inline bool
    operator!=(const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __lhs,
        const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __rhs)
    { return !(__lhs == __rhs); }
# 375 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    class mersenne_twister_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(1u <= __m && __m <= __n,
      "template argument substituting __m out of bounds");
      static_assert(__r <= __w, "template argument substituting "
      "__r out of bound");
      static_assert(__u <= __w, "template argument substituting "
      "__u out of bound");
      static_assert(__s <= __w, "template argument substituting "
      "__s out of bound");
      static_assert(__t <= __w, "template argument substituting "
      "__t out of bound");
      static_assert(__l <= __w, "template argument substituting "
      "__l out of bound");
      static_assert(__w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bound");
      static_assert(__a <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __a out of bound");
      static_assert(__b <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __b out of bound");
      static_assert(__c <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __c out of bound");
      static_assert(__d <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __d out of bound");
      static_assert(__f <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __f out of bound");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t state_size = __n;
      static constexpr size_t shift_size = __m;
      static constexpr size_t mask_bits = __r;
      static constexpr result_type xor_mask = __a;
      static constexpr size_t tempering_u = __u;
      static constexpr result_type tempering_d = __d;
      static constexpr size_t tempering_s = __s;
      static constexpr result_type tempering_b = __b;
      static constexpr size_t tempering_t = __t;
      static constexpr result_type tempering_c = __c;
      static constexpr size_t tempering_l = __l;
      static constexpr result_type initialization_multiplier = __f;
      static constexpr result_type default_seed = 5489u;


      explicit
      mersenne_twister_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, mersenne_twister_engine>::value>
        ::type>
        explicit
        mersenne_twister_engine(_Sseq& __q)
        { seed(__q); }

      void
      seed(result_type __sd = default_seed);

      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);




      static constexpr result_type
      min()
      { return 0; };




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }

      result_type
      operator()();
# 493 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const mersenne_twister_engine& __lhs,
   const mersenne_twister_engine& __rhs)
      { return std::equal(__lhs._M_x, __lhs._M_x + state_size, __rhs._M_x); }
# 510 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::mersenne_twister_engine<_UIntType1, __w1, __n1,
     __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>&);
# 536 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::mersenne_twister_engine<_UIntType1, __w1, __n1, __m1,
     __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>&);

    private:
      _UIntType _M_x[state_size];
      size_t _M_p;
    };
# 567 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    inline bool
    operator!=(const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __lhs,
        const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __rhs)
    { return !(__lhs == __rhs); }
# 599 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    class subtract_with_carry_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __s && __s < __r,
      "template argument substituting __s out of bounds");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t short_lag = __s;
      static constexpr size_t long_lag = __r;
      static constexpr result_type default_seed = 19780503u;





      explicit
      subtract_with_carry_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, subtract_with_carry_engine>::value>
        ::type>
        explicit
        subtract_with_carry_engine(_Sseq& __q)
        { seed(__q); }
# 652 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      void
      seed(result_type __sd = default_seed);





      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);





      static constexpr result_type
      min()
      { return 0; }





      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 707 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const subtract_with_carry_engine& __lhs,
   const subtract_with_carry_engine& __rhs)
      { return std::equal(__lhs._M_x, __lhs._M_x + long_lag, __rhs._M_x); }
# 724 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>&);
# 743 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>&);

    private:
      _UIntType _M_x[long_lag];
      _UIntType _M_carry;
      size_t _M_p;
    };
# 768 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    inline bool
    operator!=(const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __lhs,
        const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __rhs)
    { return !(__lhs == __rhs); }
# 783 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    class discard_block_engine
    {
      static_assert(1 <= __r && __r <= __p,
      "template argument substituting __r out of bounds");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;


      static constexpr size_t block_size = __p;
      static constexpr size_t used_block = __r;






      discard_block_engine()
      : _M_b(), _M_n(0) { }







      explicit
      discard_block_engine(const _RandomNumberEngine& __rne)
      : _M_b(__rne), _M_n(0) { }







      explicit
      discard_block_engine(_RandomNumberEngine&& __rne)
      : _M_b(std::move(__rne)), _M_n(0) { }







      explicit
      discard_block_engine(result_type __s)
      : _M_b(__s), _M_n(0) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, discard_block_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        discard_block_engine(_Sseq& __q)
 : _M_b(__q), _M_n(0)
        { }





      void
      seed()
      {
 _M_b.seed();
 _M_n = 0;
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_n = 0;
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_n = 0;
 }





      const _RandomNumberEngine&
      base() const
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 933 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const discard_block_engine& __lhs,
   const discard_block_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b && __lhs._M_n == __rhs._M_n; }
# 949 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>&);
# 967 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>&);

    private:
      _RandomNumberEngine _M_b;
      size_t _M_n;
    };
# 990 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    inline bool
    operator!=(const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __lhs,
        const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __rhs)
    { return !(__lhs == __rhs); }






  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    class independent_bits_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;






      independent_bits_engine()
      : _M_b() { }







      explicit
      independent_bits_engine(const _RandomNumberEngine& __rne)
      : _M_b(__rne) { }







      explicit
      independent_bits_engine(_RandomNumberEngine&& __rne)
      : _M_b(std::move(__rne)) { }







      explicit
      independent_bits_engine(result_type __s)
      : _M_b(__s) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, independent_bits_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
               ::type>
        explicit
        independent_bits_engine(_Sseq& __q)
        : _M_b(__q)
        { }





      void
      seed()
      { _M_b.seed(); }





      void
      seed(result_type __s)
      { _M_b.seed(__s); }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        { _M_b.seed(__q); }





      const _RandomNumberEngine&
      base() const
      { return _M_b; }




      static constexpr result_type
      min()
      { return 0U; }




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1143 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const independent_bits_engine& __lhs,
   const independent_bits_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b; }
# 1160 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::independent_bits_engine<_RandomNumberEngine,
     __w, _UIntType>& __x)
 {
   __is >> __x._M_b;
   return __is;
 }

    private:
      _RandomNumberEngine _M_b;
    };
# 1186 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    inline bool
    operator!=(const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __lhs,
        const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __rhs)
    { return !(__lhs == __rhs); }
# 1204 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __w, typename _UIntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::independent_bits_engine<_RandomNumberEngine,
        __w, _UIntType>& __x)
    {
      __os << __x.base();
      return __os;
    }







  template<typename _RandomNumberEngine, size_t __k>
    class shuffle_order_engine
    {
      static_assert(1u <= __k, "template argument substituting "
      "__k out of bound");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;

      static constexpr size_t table_size = __k;






      shuffle_order_engine()
      : _M_b()
      { _M_initialize(); }







      explicit
      shuffle_order_engine(const _RandomNumberEngine& __rne)
      : _M_b(__rne)
      { _M_initialize(); }







      explicit
      shuffle_order_engine(_RandomNumberEngine&& __rne)
      : _M_b(std::move(__rne))
      { _M_initialize(); }







      explicit
      shuffle_order_engine(result_type __s)
      : _M_b(__s)
      { _M_initialize(); }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, shuffle_order_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        shuffle_order_engine(_Sseq& __q)
        : _M_b(__q)
        { _M_initialize(); }





      void
      seed()
      {
 _M_b.seed();
 _M_initialize();
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_initialize();
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_initialize();
 }




      const _RandomNumberEngine&
      base() const
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1372 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const shuffle_order_engine& __lhs,
   const shuffle_order_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b; }
# 1388 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::shuffle_order_engine<_RandomNumberEngine1,
     __k1>&);
# 1406 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::shuffle_order_engine<_RandomNumberEngine1, __k1>&);

    private:
      void _M_initialize()
      {
 for (size_t __i = 0; __i < __k; ++__i)
   _M_v[__i] = _M_b();
 _M_y = _M_b();
      }

      _RandomNumberEngine _M_b;
      result_type _M_v[__k];
      result_type _M_y;
    };
# 1436 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __k>
    inline bool
    operator!=(const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __lhs,
        const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __rhs)
    { return !(__lhs == __rhs); }





  typedef linear_congruential_engine<uint_fast32_t, 16807UL, 0UL, 2147483647UL>
  minstd_rand0;




  typedef linear_congruential_engine<uint_fast32_t, 48271UL, 0UL, 2147483647UL>
  minstd_rand;
# 1465 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  typedef mersenne_twister_engine<
    uint_fast32_t,
    32, 624, 397, 31,
    0x9908b0dfUL, 11,
    0xffffffffUL, 7,
    0x9d2c5680UL, 15,
    0xefc60000UL, 18, 1812433253UL> mt19937;




  typedef mersenne_twister_engine<
    uint_fast64_t,
    64, 312, 156, 31,
    0xb5026f5aa96619e9ULL, 29,
    0x5555555555555555ULL, 17,
    0x71d67fffeda60000ULL, 37,
    0xfff7eee000000000ULL, 43,
    6364136223846793005ULL> mt19937_64;

  typedef subtract_with_carry_engine<uint_fast32_t, 24, 10, 24>
    ranlux24_base;

  typedef subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>
    ranlux48_base;

  typedef discard_block_engine<ranlux24_base, 223, 23> ranlux24;

  typedef discard_block_engine<ranlux48_base, 389, 11> ranlux48;

  typedef shuffle_order_engine<minstd_rand0, 256> knuth_b;

  typedef minstd_rand0 default_random_engine;





  class random_device
  {
  public:

    typedef unsigned int result_type;





    explicit
    random_device(const std::string& __token = "/dev/urandom")
    {
      if ((__token != "/dev/urandom" && __token != "/dev/random")
   || !(_M_file = std::fopen(__token.c_str(), "rb")))
 std::__throw_runtime_error(("random_device::" "random_device(const std::string&)"));

    }

    ~random_device()
    { std::fclose(_M_file); }
# 1552 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
    result_type
    min() const
    { return std::numeric_limits<result_type>::min(); }

    result_type
    max() const
    { return std::numeric_limits<result_type>::max(); }

    double
    entropy() const
    { return 0.0; }

    result_type
    operator()()
    {

      result_type __ret;
      std::fread(reinterpret_cast<void*>(&__ret), sizeof(result_type),
   1, _M_file);
      return __ret;



    }


    random_device(const random_device&) = delete;
    void operator=(const random_device&) = delete;

  private:


    FILE* _M_file;



  };
# 1609 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class uniform_int_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef uniform_int_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __a = 0,
     _IntType __b = std::numeric_limits<_IntType>::max())
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _IntType _M_a;
 _IntType _M_b;
      };

    public:



      explicit
      uniform_int_distribution(_IntType __a = 0,
      _IntType __b = std::numeric_limits<_IntType>::max())
      : _M_param(__a, __b)
      { }

      explicit
      uniform_int_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::uniform_int_distribution<_IntType>& __d1,
        const std::uniform_int_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_int_distribution<_IntType>& __d1,
        const std::uniform_int_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 1754 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_int_distribution<_IntType>&);
# 1768 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_int_distribution<_IntType>&);
# 1781 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class uniform_real_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef uniform_real_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

    public:






      explicit
      uniform_real_distribution(_RealType __a = _RealType(0),
    _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      uniform_real_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return (__aurng() * (__p.b() - __p.a())) + __p.a();
 }

    private:
      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::uniform_real_distribution<_IntType>& __d1,
        const std::uniform_real_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_real_distribution<_IntType>& __d1,
        const std::uniform_real_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 1935 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_real_distribution<_RealType>&);
# 1949 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_real_distribution<_RealType>&);
# 1971 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class normal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef normal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __mean = _RealType(0),
     _RealType __stddev = _RealType(1))
 : _M_mean(__mean), _M_stddev(__stddev)
 {
                                                  ;
 }

 _RealType
 mean() const
 { return _M_mean; }

 _RealType
 stddev() const
 { return _M_stddev; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_mean == __p2._M_mean
    && __p1._M_stddev == __p2._M_stddev); }

      private:
 _RealType _M_mean;
 _RealType _M_stddev;
      };

    public:




      explicit
      normal_distribution(result_type __mean = result_type(0),
     result_type __stddev = result_type(1))
      : _M_param(__mean, __stddev), _M_saved_available(false)
      { }

      explicit
      normal_distribution(const param_type& __p)
      : _M_param(__p), _M_saved_available(false)
      { }




      void
      reset()
      { _M_saved_available = false; }




      _RealType
      mean() const
      { return _M_param.mean(); }




      _RealType
      stddev() const
      { return _M_param.stddev(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _RealType1>
 friend bool
        operator==(const std::normal_distribution<_RealType1>& __d1,
     const std::normal_distribution<_RealType1>& __d2);
# 2110 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::normal_distribution<_RealType1>&);
# 2125 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::normal_distribution<_RealType1>&);

    private:
      param_type _M_param;
      result_type _M_saved;
      bool _M_saved_available;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2155 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class lognormal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef lognormal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(0),
     _RealType __s = _RealType(1))
 : _M_m(__m), _M_s(__s)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 s() const
 { return _M_s; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_s == __p2._M_s; }

      private:
 _RealType _M_m;
 _RealType _M_s;
      };

      explicit
      lognormal_distribution(_RealType __m = _RealType(0),
        _RealType __s = _RealType(1))
      : _M_param(__m, __s), _M_nd()
      { }

      explicit
      lognormal_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      s() const
      { return _M_param.s(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        { return std::exp(__p.s() * _M_nd(__urng) + __p.m()); }






      template<typename _RealType1>
        friend bool
        operator==(const std::lognormal_distribution<_RealType1>& __d1,
     const std::lognormal_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_nd == __d2._M_nd); }
# 2286 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::lognormal_distribution<_RealType1>&);
# 2301 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::lognormal_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::lognormal_distribution<_RealType>& __d1,
        const std::lognormal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2331 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class gamma_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef gamma_distribution<_RealType> distribution_type;
 friend class gamma_distribution<_RealType>;

 explicit
 param_type(_RealType __alpha_val = _RealType(1),
     _RealType __beta_val = _RealType(1))
 : _M_alpha(__alpha_val), _M_beta(__beta_val)
 {
                                                 ;
   _M_initialize();
 }

 _RealType
 alpha() const
 { return _M_alpha; }

 _RealType
 beta() const
 { return _M_beta; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_alpha == __p2._M_alpha
    && __p1._M_beta == __p2._M_beta); }

      private:
 void
 _M_initialize();

 _RealType _M_alpha;
 _RealType _M_beta;

 _RealType _M_malpha, _M_a2;
      };

    public:




      explicit
      gamma_distribution(_RealType __alpha_val = _RealType(1),
    _RealType __beta_val = _RealType(1))
      : _M_param(__alpha_val, __beta_val), _M_nd()
      { }

      explicit
      gamma_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      alpha() const
      { return _M_param.alpha(); }




      _RealType
      beta() const
      { return _M_param.beta(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _RealType1>
        friend bool
        operator==(const std::gamma_distribution<_RealType1>& __d1,
     const std::gamma_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_nd == __d2._M_nd); }
# 2479 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::gamma_distribution<_RealType1>&);
# 2493 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::gamma_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




   template<typename _RealType>
    inline bool
     operator!=(const std::gamma_distribution<_RealType>& __d1,
  const std::gamma_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2520 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class chi_squared_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef chi_squared_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      chi_squared_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_gd(__n / 2)
      { }

      explicit
      chi_squared_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.n() / 2)
      { }




      void
      reset()
      { _M_gd.reset(); }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return 2 * _M_gd(__urng); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return 2 * _M_gd(__urng, param_type(__p.n() / 2));
 }






      template<typename _RealType1>
        friend bool
        operator==(const std::chi_squared_distribution<_RealType1>& __d1,
     const std::chi_squared_distribution<_RealType1>& __d2)
        { return __d1.param() == __d2.param() && __d1._M_gd == __d2._M_gd; }
# 2643 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::chi_squared_distribution<_RealType1>&);
# 2658 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::chi_squared_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::chi_squared_distribution<_RealType>& __d1,
        const std::chi_squared_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2685 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class cauchy_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef cauchy_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      cauchy_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      cauchy_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }

      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::cauchy_distribution<_RealType>& __d1,
        const std::cauchy_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::cauchy_distribution<_RealType>& __d1,
        const std::cauchy_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2827 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::cauchy_distribution<_RealType>&);
# 2842 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::cauchy_distribution<_RealType>&);
# 2858 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class fisher_f_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef fisher_f_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(1),
     _RealType __n = _RealType(1))
 : _M_m(__m), _M_n(__n)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_m;
 _RealType _M_n;
      };

      explicit
      fisher_f_distribution(_RealType __m = _RealType(1),
       _RealType __n = _RealType(1))
      : _M_param(__m, __n), _M_gd_x(__m / 2), _M_gd_y(__n / 2)
      { }

      explicit
      fisher_f_distribution(const param_type& __p)
      : _M_param(__p), _M_gd_x(__p.m() / 2), _M_gd_y(__p.n() / 2)
      { }




      void
      reset()
      {
 _M_gd_x.reset();
 _M_gd_y.reset();
      }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return (_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return ((_M_gd_x(__urng, param_type(__p.m() / 2)) * n())
    / (_M_gd_y(__urng, param_type(__p.n() / 2)) * m()));
 }






      template<typename _RealType1>
        friend bool
        operator==(const std::fisher_f_distribution<_RealType1>& __d1,
     const std::fisher_f_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_gd_x == __d2._M_gd_x
    && __d1._M_gd_y == __d2._M_gd_y); }
# 2998 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::fisher_f_distribution<_RealType1>&);
# 3013 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::fisher_f_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd_x, _M_gd_y;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::fisher_f_distribution<_RealType>& __d1,
        const std::fisher_f_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3042 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class student_t_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef student_t_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      student_t_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_nd(), _M_gd(__n / 2, 2)
      { }

      explicit
      student_t_distribution(const param_type& __p)
      : _M_param(__p), _M_nd(), _M_gd(__p.n() / 2, 2)
      { }




      void
      reset()
      {
 _M_nd.reset();
 _M_gd.reset();
      }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng)
        { return _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng)); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;

   const result_type __g = _M_gd(__urng, param_type(__p.n() / 2, 2));
   return _M_nd(__urng) * std::sqrt(__p.n() / __g);
        }






      template<typename _RealType1>
        friend bool
        operator==(const std::student_t_distribution<_RealType1>& __d1,
     const std::student_t_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_nd == __d2._M_nd && __d1._M_gd == __d2._M_gd); }
# 3171 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::student_t_distribution<_RealType1>&);
# 3186 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::student_t_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::student_t_distribution<_RealType>& __d1,
        const std::student_t_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3222 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  class bernoulli_distribution
  {
  public:

    typedef bool result_type;

    struct param_type
    {
      typedef bernoulli_distribution distribution_type;

      explicit
      param_type(double __p = 0.5)
      : _M_p(__p)
      {
                                                      ;
      }

      double
      p() const
      { return _M_p; }

      friend bool
      operator==(const param_type& __p1, const param_type& __p2)
      { return __p1._M_p == __p2._M_p; }

    private:
      double _M_p;
    };

  public:






    explicit
    bernoulli_distribution(double __p = 0.5)
    : _M_param(__p)
    { }

    explicit
    bernoulli_distribution(const param_type& __p)
    : _M_param(__p)
    { }






    void
    reset() { }




    double
    p() const
    { return _M_param.p(); }




    param_type
    param() const
    { return _M_param; }





    void
    param(const param_type& __param)
    { _M_param = __param; }




    result_type
    min() const
    { return std::numeric_limits<result_type>::min(); }




    result_type
    max() const
    { return std::numeric_limits<result_type>::max(); }




    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng)
      { return this->operator()(__urng, this->param()); }

    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);
 if ((__aurng() - __aurng.min())
      < __p.p() * (__aurng.max() - __aurng.min()))
   return true;
 return false;
      }

  private:
    param_type _M_param;
  };





  inline bool
  operator==(const std::bernoulli_distribution& __d1,
      const std::bernoulli_distribution& __d2)
  { return __d1.param() == __d2.param(); }





  inline bool
  operator!=(const std::bernoulli_distribution& __d1,
      const std::bernoulli_distribution& __d2)
  { return !(__d1 == __d2); }
# 3365 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::bernoulli_distribution&);
# 3379 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::bernoulli_distribution& __x)
    {
      double __p;
      __is >> __p;
      __x.param(bernoulli_distribution::param_type(__p));
      return __is;
    }
# 3398 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef binomial_distribution<_IntType> distribution_type;
 friend class binomial_distribution<_IntType>;

 explicit
 param_type(_IntType __t = _IntType(1), double __p = 0.5)
 : _M_t(__t), _M_p(__p)
 {


                     ;
   _M_initialize();
 }

 _IntType
 t() const
 { return _M_t; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_t == __p2._M_t && __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize();

 _IntType _M_t;
 double _M_p;

 double _M_q;

 double _M_d1, _M_d2, _M_s1, _M_s2, _M_c,
        _M_a1, _M_a123, _M_s, _M_lf, _M_lp1p;

 bool _M_easy;
      };


      explicit
      binomial_distribution(_IntType __t = _IntType(1),
       double __p = 0.5)
      : _M_param(__t, __p), _M_nd()
      { }

      explicit
      binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _IntType
      t() const
      { return _M_param.t(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return _M_param.t(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _IntType1>
 friend bool
        operator==(const std::binomial_distribution<_IntType1>& __d1,
     const std::binomial_distribution<_IntType1>& __d2)

 { return __d1.param() == __d2.param() && __d1._M_nd == __d2._M_nd; }
# 3550 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::binomial_distribution<_IntType1>&);
# 3566 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::binomial_distribution<_IntType1>&);

    private:
      template<typename _UniformRandomNumberGenerator>
 result_type
 _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t);

      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::binomial_distribution<_IntType>& __d1,
        const std::binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 3600 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class geometric_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef geometric_distribution<_IntType> distribution_type;
 friend class geometric_distribution<_IntType>;

 explicit
 param_type(double __p = 0.5)
 : _M_p(__p)
 {

                        ;
   _M_initialize();
 }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize()
 { _M_log_1_p = std::log(1.0 - _M_p); }

 double _M_p;

 double _M_log_1_p;
      };


      explicit
      geometric_distribution(double __p = 0.5)
      : _M_param(__p)
      { }

      explicit
      geometric_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::geometric_distribution<_IntType>& __d1,
        const std::geometric_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::geometric_distribution<_IntType>& __d1,
        const std::geometric_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 3744 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::geometric_distribution<_IntType>&);
# 3759 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::geometric_distribution<_IntType>&);
# 3773 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class negative_binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef negative_binomial_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __k = 1, double __p = 0.5)
 : _M_k(__k), _M_p(__p)
 {
                                                                     ;
 }

 _IntType
 k() const
 { return _M_k; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_k == __p2._M_k && __p1._M_p == __p2._M_p; }

      private:
 _IntType _M_k;
 double _M_p;
      };

      explicit
      negative_binomial_distribution(_IntType __k = 1, double __p = 0.5)
      : _M_param(__k, __p), _M_gd(__k, (1.0 - __p) / __p)
      { }

      explicit
      negative_binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.k(), (1.0 - __p.p()) / __p.p())
      { }




      void
      reset()
      { _M_gd.reset(); }




      _IntType
      k() const
      { return _M_param.k(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng);

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _IntType1>
        friend bool
        operator==(const std::negative_binomial_distribution<_IntType1>& __d1,
     const std::negative_binomial_distribution<_IntType1>& __d2)
        { return __d1.param() == __d2.param() && __d1._M_gd == __d2._M_gd; }
# 3905 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::negative_binomial_distribution<_IntType1>&);
# 3920 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::negative_binomial_distribution<_IntType1>&);

    private:
      param_type _M_param;

      std::gamma_distribution<double> _M_gd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::negative_binomial_distribution<_IntType>& __d1,
        const std::negative_binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 3956 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class poisson_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef poisson_distribution<_IntType> distribution_type;
 friend class poisson_distribution<_IntType>;

 explicit
 param_type(double __mean = 1.0)
 : _M_mean(__mean)
 {
                                       ;
   _M_initialize();
 }

 double
 mean() const
 { return _M_mean; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_mean == __p2._M_mean; }

      private:

 void
 _M_initialize();

 double _M_mean;

 double _M_lm_thr;

 double _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb;

      };


      explicit
      poisson_distribution(double __mean = 1.0)
      : _M_param(__mean), _M_nd()
      { }

      explicit
      poisson_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      double
      mean() const
      { return _M_param.mean(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _IntType1>
        friend bool
        operator==(const std::poisson_distribution<_IntType1>& __d1,
     const std::poisson_distribution<_IntType1>& __d2)

        { return __d1.param() == __d2.param() && __d1._M_nd == __d2._M_nd; }
# 4092 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::poisson_distribution<_IntType1>&);
# 4107 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::poisson_distribution<_IntType1>&);

    private:
      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::poisson_distribution<_IntType>& __d1,
        const std::poisson_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4144 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class exponential_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef exponential_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __lambda = _RealType(1))
 : _M_lambda(__lambda)
 {
                                                  ;
 }

 _RealType
 lambda() const
 { return _M_lambda; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_lambda == __p2._M_lambda; }

      private:
 _RealType _M_lambda;
      };

    public:




      explicit
      exponential_distribution(const result_type& __lambda = result_type(1))
      : _M_param(__lambda)
      { }

      explicit
      exponential_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      _RealType
      lambda() const
      { return _M_param.lambda(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return -std::log(__aurng()) / __p.lambda();
 }

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::exponential_distribution<_RealType>& __d1,
        const std::exponential_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::exponential_distribution<_RealType>& __d1,
        const std::exponential_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4288 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::exponential_distribution<_RealType>&);
# 4303 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::exponential_distribution<_RealType>&);
# 4318 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class weibull_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef weibull_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(1),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      weibull_distribution(_RealType __a = _RealType(1),
      _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      weibull_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::weibull_distribution<_RealType>& __d1,
        const std::weibull_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::weibull_distribution<_RealType>& __d1,
        const std::weibull_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4463 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::weibull_distribution<_RealType>&);
# 4478 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::weibull_distribution<_RealType>&);
# 4493 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class extreme_value_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef extreme_value_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      extreme_value_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      extreme_value_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::extreme_value_distribution<_RealType>& __d1,
        const std::extreme_value_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::extreme_value_distribution<_RealType>& __d1,
        const std::extreme_value_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4638 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::extreme_value_distribution<_RealType>&);
# 4653 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::extreme_value_distribution<_RealType>&);
# 4665 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class discrete_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef discrete_distribution<_IntType> distribution_type;
 friend class discrete_distribution<_IntType>;

 param_type()
 : _M_prob(), _M_cp()
 { }

 template<typename _InputIterator>
   param_type(_InputIterator __wbegin,
       _InputIterator __wend)
   : _M_prob(__wbegin, __wend), _M_cp()
   { _M_initialize(); }

 param_type(initializer_list<double> __wil)
 : _M_prob(__wil.begin(), __wil.end()), _M_cp()
 { _M_initialize(); }

 template<typename _Func>
   param_type(size_t __nw, double __xmin, double __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<double>
 probabilities() const
 { return _M_prob.empty() ? std::vector<double>(1, 1.0) : _M_prob; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_prob == __p2._M_prob; }

      private:
 void
 _M_initialize();

 std::vector<double> _M_prob;
 std::vector<double> _M_cp;
      };

      discrete_distribution()
      : _M_param()
      { }

      template<typename _InputIterator>
 discrete_distribution(_InputIterator __wbegin,
         _InputIterator __wend)
 : _M_param(__wbegin, __wend)
 { }

      discrete_distribution(initializer_list<double> __wl)
      : _M_param(__wl)
      { }

      template<typename _Func>
 discrete_distribution(size_t __nw, double __xmin, double __xmax,
         _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      discrete_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<double>
      probabilities() const
      {
 return _M_param._M_prob.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_prob;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      {
 return _M_param._M_prob.empty()
   ? result_type(0) : result_type(_M_param._M_prob.size() - 1);
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);
# 4815 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::discrete_distribution<_IntType1>&);
# 4831 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::discrete_distribution<_IntType1>&);

    private:
      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::discrete_distribution<_IntType>& __d1,
        const std::discrete_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::discrete_distribution<_IntType>& __d1,
        const std::discrete_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4867 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class piecewise_constant_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_constant_distribution<_RealType> distribution_type;
 friend class piecewise_constant_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bi, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(1, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_int == __p2._M_int && __p1._M_den == __p2._M_den; }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
      };

      explicit
      piecewise_constant_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_constant_distribution(_InputIteratorB __bfirst,
     _InputIteratorB __bend,
     _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_constant_distribution(initializer_list<_RealType> __bl,
     _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_constant_distribution(size_t __nw,
     _RealType __xmin, _RealType __xmax,
     _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_constant_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }




      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);
# 5054 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::piecewise_constant_distribution<_RealType1>&);
# 5070 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::piecewise_constant_distribution<_RealType1>&);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::piecewise_constant_distribution<_RealType>& __d1,
        const std::piecewise_constant_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_constant_distribution<_RealType>& __d1,
        const std::piecewise_constant_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5106 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class piecewise_linear_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_linear_distribution<_RealType> distribution_type;
 friend class piecewise_linear_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp(), _M_m()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bl, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(2, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_int == __p2._M_int
    && __p1._M_den == __p2._M_den); }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
 std::vector<double> _M_m;
      };

      explicit
      piecewise_linear_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_linear_distribution(_InputIteratorB __bfirst,
          _InputIteratorB __bend,
          _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_linear_distribution(initializer_list<_RealType> __bl,
          _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_linear_distribution(size_t __nw,
          _RealType __xmin, _RealType __xmax,
          _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_linear_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }





      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(2, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);
# 5296 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::piecewise_linear_distribution<_RealType1>&);
# 5312 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::piecewise_linear_distribution<_RealType1>&);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::piecewise_linear_distribution<_RealType>& __d1,
        const std::piecewise_linear_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_linear_distribution<_RealType>& __d1,
        const std::piecewise_linear_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5356 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  class seed_seq
  {

  public:

    typedef uint_least32_t result_type;


    seed_seq()
    : _M_v()
    { }

    template<typename _IntType>
      seed_seq(std::initializer_list<_IntType> il);

    template<typename _InputIterator>
      seed_seq(_InputIterator __begin, _InputIterator __end);


    template<typename _RandomAccessIterator>
      void
      generate(_RandomAccessIterator __begin, _RandomAccessIterator __end);


    size_t size() const
    { return _M_v.size(); }

    template<typename OutputIterator>
      void
      param(OutputIterator __dest) const
      { std::copy(_M_v.begin(), _M_v.end(), __dest); }

  private:

    std::vector<result_type> _M_v;
  };






}
# 50 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 1 3
# 58 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 3
# 58 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 3



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 1 3
# 66 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 81 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)
    {





                                                     ;

      for (; __first != __last; ++__first)
 {
   *__first = __value;
   ++__value;
 }
    }


}



namespace std __attribute__ ((__visibility__ ("default")))
{
# 119 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __init + *__first;
      return __init;
    }
# 145 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _Tp, typename _BinaryOperation>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,
        _BinaryOperation __binary_op)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __binary_op(__init, *__first);
      return __init;
    }
# 173 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator1, typename _InputIterator2, typename _Tp>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __init + (*__first1 * *__first2);
      return __init;
    }
# 204 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator1, typename _InputIterator2, typename _Tp,
    typename _BinaryOperation1, typename _BinaryOperation2>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init,
    _BinaryOperation1 __binary_op1,
    _BinaryOperation2 __binary_op2)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __binary_op1(__init, __binary_op2(*__first1, *__first2));
      return __init;
    }
# 236 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __value + *__first;
   *++__result = __value;
 }
      return ++__result;
    }
# 276 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __binary_op(__value, *__first);
   *++__result = __value;
 }
      return ++__result;
    }
# 316 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    adjacent_difference(_InputIterator __first,
   _InputIterator __last, _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __tmp - __value;
   __value = std::move(__tmp);
 }
      return ++__result;
    }
# 357 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    adjacent_difference(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __binary_op(__tmp, __value);
   __value = std::move(__tmp);
 }
      return ++__result;
    }


}
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 2 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  namespace __detail
  {
# 54 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool>
      struct _Mod
      {
 static _Tp
 __calc(_Tp __x)
 {
   if (__a == 1)
     __x %= __m;
   else
     {
       static const _Tp __q = __m / __a;
       static const _Tp __r = __m % __a;

       _Tp __t1 = __a * (__x % __q);
       _Tp __t2 = __r * (__x / __q);
       if (__t1 >= __t2)
  __x = __t1 - __t2;
       else
  __x = __m - __t2 + __t1;
     }

   if (__c != 0)
     {
       const _Tp __d = __m - __x;
       if (__d > __c)
  __x += __c;
       else
  __x = __c - __d;
     }
   return __x;
 }
      };



    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>
      struct _Mod<_Tp, __m, __a, __c, true>
      {
 static _Tp
 __calc(_Tp __x)
 { return __a * __x + __c; }
      };

    template<typename _InputIterator, typename _OutputIterator,
      typename _UnaryOperation>
      _OutputIterator
      __transform(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _UnaryOperation __unary_op)
      {
 for (; __first != __last; ++__first, ++__result)
   *__result = __unary_op(*__first);
 return __result;
      }


  }



  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::multiplier;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::increment;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::modulus;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::default_seed;





  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    void
    linear_congruential_engine<_UIntType, __a, __c, __m>::
    seed(result_type __s)
    {
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
   && (__detail::__mod<_UIntType, __m>(__s) == 0))
 _M_x = 1;
      else
 _M_x = __detail::__mod<_UIntType, __m>(__s);
    }




  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      linear_congruential_engine<_UIntType, __a, __c, __m>::
      seed(_Sseq& __q)
      {
 const _UIntType __k0 = __m == 0 ? std::numeric_limits<_UIntType>::digits
                                 : std::__lg(__m);
 const _UIntType __k = (__k0 + 31) / 32;
 uint_least32_t __arr[__k + 3];
 __q.generate(__arr + 0, __arr + __k + 3);
 _UIntType __factor = 1u;
 _UIntType __sum = 0u;
 for (size_t __j = 0; __j < __k; ++__j)
   {
     __sum += __arr[__j + 3] * __factor;
     __factor *= __detail::_Shift<_UIntType, 32>::__value;
   }
 seed(__sum);
      }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const linear_congruential_engine<_UIntType,
      __a, __c, __m>& __lcr)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__os.widen(' '));

      __os << __lcr._M_x;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        linear_congruential_engine<_UIntType, __a, __c, __m>& __lcr)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec);

      __is >> __lcr._M_x;

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::word_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::state_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::shift_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::mask_bits;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::xor_mask;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_u;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_d;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_s;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_b;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_t;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_c;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_l;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
                                              initialization_multiplier;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::default_seed;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
 __detail::_Shift<_UIntType, __w>::__value>(__sd);

      for (size_t __i = 1; __i < state_size; ++__i)
 {
   _UIntType __x = _M_x[__i - 1];
   __x ^= __x >> (__w - 2);
   __x *= __f;
   __x += __detail::__mod<_UIntType, __n>(__i);
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__x);
 }
      _M_p = state_size;
    }

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
         __s, __b, __t, __c, __l, __f>::
      seed(_Sseq& __q)
      {
 const _UIntType __upper_mask = (~_UIntType()) << __r;
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__n * __k];
 __q.generate(__arr + 0, __arr + __n * __k);

 bool __zero = true;
 for (size_t __i = 0; __i < state_size; ++__i)
   {
     _UIntType __factor = 1u;
     _UIntType __sum = 0u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);

     if (__zero)
       {
  if (__i == 0)
    {
      if ((_M_x[0] & __upper_mask) != 0u)
        __zero = false;
    }
  else if (_M_x[__i] != 0u)
    __zero = false;
       }
   }
        if (__zero)
          _M_x[0] = __detail::_Shift<_UIntType, __w - 1>::__value;
      }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    typename
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::result_type
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    operator()()
    {

      if (_M_p >= state_size)
 {
   const _UIntType __upper_mask = (~_UIntType()) << __r;
   const _UIntType __lower_mask = ~__upper_mask;

   for (size_t __k = 0; __k < (__n - __m); ++__k)
     {
       _UIntType __y = ((_M_x[__k] & __upper_mask)
          | (_M_x[__k + 1] & __lower_mask));
       _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
      ^ ((__y & 0x01) ? __a : 0));
     }

   for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
     {
       _UIntType __y = ((_M_x[__k] & __upper_mask)
          | (_M_x[__k + 1] & __lower_mask));
       _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
      ^ ((__y & 0x01) ? __a : 0));
     }

   _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
      | (_M_x[0] & __lower_mask));
   _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
      ^ ((__y & 0x01) ? __a : 0));
   _M_p = 0;
 }


      result_type __z = _M_x[_M_p++];
      __z ^= (__z >> __u) & __d;
      __z ^= (__z << __s) & __b;
      __z ^= (__z << __t) & __c;
      __z ^= (__z >> __l);

      return __z;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __n - 1; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_x[__n - 1];

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __n; ++__i)
 __is >> __x._M_x[__i];

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::word_size;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::short_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::long_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr _UIntType
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::default_seed;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    void
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    seed(result_type __value)
    {
      std::linear_congruential_engine<result_type, 40014u, 0u, 2147483563u>
 __lcg(__value == 0u ? default_seed : __value);

      const size_t __n = (__w + 31) / 32;

      for (size_t __i = 0; __i < long_lag; ++__i)
 {
   _UIntType __sum = 0u;
   _UIntType __factor = 1u;
   for (size_t __j = 0; __j < __n; ++__j)
     {
       __sum += __detail::__mod<uint_least32_t,
         __detail::_Shift<uint_least32_t, 32>::__value>
    (__lcg()) * __factor;
       __factor *= __detail::_Shift<_UIntType, 32>::__value;
     }
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__sum);
 }
      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
      _M_p = 0;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      seed(_Sseq& __q)
      {
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__r * __k];
 __q.generate(__arr + 0, __arr + __r * __k);

 for (size_t __i = 0; __i < long_lag; ++__i)
   {
     _UIntType __sum = 0u;
     _UIntType __factor = 1u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);
   }
 _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
 _M_p = 0;
      }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    typename subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      result_type
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    operator()()
    {

      long __ps = _M_p - short_lag;
      if (__ps < 0)
 __ps += long_lag;




      _UIntType __xi;
      if (_M_x[__ps] >= _M_x[_M_p] + _M_carry)
 {
   __xi = _M_x[__ps] - _M_x[_M_p] - _M_carry;
   _M_carry = 0;
 }
      else
 {
   __xi = (__detail::_Shift<_UIntType, __w>::__value
    - _M_x[_M_p] - _M_carry + _M_x[__ps]);
   _M_carry = 1;
 }
      _M_x[_M_p] = __xi;


      if (++_M_p >= long_lag)
 _M_p = 0;

      return __xi;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const subtract_with_carry_engine<_UIntType,
      __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __r; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_carry;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        subtract_with_carry_engine<_UIntType, __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __r; ++__i)
 __is >> __x._M_x[__i];
      __is >> __x._M_carry;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::block_size;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::used_block;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    typename discard_block_engine<_RandomNumberEngine,
      __p, __r>::result_type
    discard_block_engine<_RandomNumberEngine, __p, __r>::
    operator()()
    {
      if (_M_n >= used_block)
 {
   _M_b.discard(block_size - _M_n);
   _M_n = 0;
 }
      ++_M_n;
      return _M_b();
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discard_block_engine<_RandomNumberEngine,
        __p, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base() << __space << __x._M_n;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discard_block_engine<_RandomNumberEngine, __p, __r>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b >> __x._M_n;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    typename independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
      result_type
    independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
    operator()()
    {
      const long double __r = static_cast<long double>(_M_b.max())
       - static_cast<long double>(_M_b.min()) + 1.0L;
      const result_type __m = std::log(__r) / std::log(2.0L);
      result_type __n, __n0, __y0, __y1, __s0, __s1;
      for (size_t __i = 0; __i < 2; ++__i)
 {
   __n = (__w + __m - 1) / __m + __i;
   __n0 = __n - __w % __n;
   const result_type __w0 = __w / __n;
   const result_type __w1 = __w0 + 1;
   __s0 = result_type(1) << __w0;
   __s1 = result_type(1) << __w1;
   __y0 = __s0 * (__r / __s0);
   __y1 = __s1 * (__r / __s1);
   if (__r - __y0 <= __y0 / __n)
     break;
 }

      result_type __sum = 0;
      for (size_t __k = 0; __k < __n0; ++__k)
 {
   result_type __u;
   do
     __u = _M_b() - _M_b.min();
   while (__u >= __y0);
   __sum = __s0 * __sum + __u % __s0;
 }
      for (size_t __k = __n0; __k < __n; ++__k)
 {
   result_type __u;
   do
     __u = _M_b() - _M_b.min();
   while (__u >= __y1);
   __sum = __s1 * __sum + __u % __s1;
 }
      return __sum;
    }


  template<typename _RandomNumberEngine, size_t __k>
    constexpr size_t
    shuffle_order_engine<_RandomNumberEngine, __k>::table_size;

  template<typename _RandomNumberEngine, size_t __k>
    typename shuffle_order_engine<_RandomNumberEngine, __k>::result_type
    shuffle_order_engine<_RandomNumberEngine, __k>::
    operator()()
    {
      size_t __j = __k * ((_M_y - _M_b.min())
     / (_M_b.max() - _M_b.min() + 1.0L));
      _M_y = _M_v[__j];
      _M_v[__j] = _M_b();

      return _M_y;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base();
      for (size_t __i = 0; __i < __k; ++__i)
 __os << __space << __x._M_v[__i];
      __os << __space << __x._M_y;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b;
      for (size_t __i = 0; __i < __k; ++__i)
 __is >> __x._M_v[__i];
      __is >> __x._M_y;

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 typedef typename std::make_unsigned<typename
   _UniformRandomNumberGenerator::result_type>::type __urngtype;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::conditional<(sizeof(__urngtype)
        > sizeof(__utype)),
   __urngtype, __utype>::type __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {

     const __uctype __uerange = __urange + 1;
     const __uctype __scaling = __urngrange / __uerange;
     const __uctype __past = __uerange * __scaling;
     do
       __ret = __uctype(__urng()) - __urngmin;
     while (__ret >= __past);
     __ret /= __scaling;
   }
 else if (__urngrange < __urange)
   {
# 884 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
     __uctype __tmp;
     do
       {
  const __uctype __uerngrange = __urngrange + 1;
  __tmp = (__uerngrange * operator()
    (__urng, param_type(0, __urange / __uerngrange)));
  __ret = __tmp + (__uctype(__urng()) - __urngmin);
       }
     while (__ret > __urange || __ret < __tmp);
   }
 else
   __ret = __uctype(__urng()) - __urngmin;

 return __ret + __param.a();
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_int_distribution<_IntType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_real_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const bernoulli_distribution& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename geometric_distribution<_IntType>::result_type
      geometric_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {


 const double __naf =
   (1 - std::numeric_limits<double>::epsilon()) / 2;

 const double __thr =
   std::numeric_limits<_IntType>::max() + __naf;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 double __cand;
 do
   __cand = std::floor(std::log(__aurng()) / __param._M_log_1_p);
 while (__cand >= __thr);

 return result_type(__cand + __naf);
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __p;
      __is >> __p;
      __x.param(typename geometric_distribution<_IntType>::param_type(__p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng)
      {
 const double __y = _M_gd(__urng);


 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 typedef typename std::gamma_distribution<result_type>::param_type
   param_type;

 const double __y =
   _M_gd(__urng, param_type(__p.k(), (1.0 - __p.p()) / __p.p()));

 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.k() << __space << __x.p()
    << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _IntType __k;
      double __p;
      __is >> __k >> __p >> __x._M_gd;
      __x.param(typename negative_binomial_distribution<_IntType>::
  param_type(__k, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    poisson_distribution<_IntType>::param_type::
    _M_initialize()
    {

      if (_M_mean >= 12)
 {
   const double __m = std::floor(_M_mean);
   _M_lm_thr = std::log(_M_mean);
   _M_lfm = std::lgamma(__m + 1);
   _M_sm = std::sqrt(__m);

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __dx = std::sqrt(2 * __m * std::log(32 * __m
             / __pi_4));
   _M_d = std::round(std::max(6.0, std::min(__m, __dx)));
   const double __cx = 2 * __m + _M_d;
   _M_scx = std::sqrt(__cx / 2);
   _M_1cx = 1 / __cx;

   _M_c2b = std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx);
   _M_cb = 2 * __cx * std::exp(-_M_d * _M_1cx * (1 + _M_d / 2))
  / _M_d;
 }
      else

 _M_lm_thr = std::exp(-_M_mean);
      }
# 1198 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename poisson_distribution<_IntType>::result_type
      poisson_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 if (__param.mean() >= 12)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __m = std::floor(__param.mean());

     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __c1 = __param._M_sm * __spi_2;
     const double __c2 = __param._M_c2b + __c1;
     const double __c3 = __c2 + 1;
     const double __c4 = __c3 + 1;

     const double __e178 = 1.0129030479320018583185514777512983L;
     const double __c5 = __c4 + __e178;
     const double __c = __param._M_cb + __c5;
     const double __2cx = 2 * (2 * __m + __param._M_d);

     bool __reject = true;
     do
       {
  const double __u = __c * __aurng();
  const double __e = -std::log(__aurng());

  double __w = 0.0;

  if (__u <= __c1)
    {
      const double __n = _M_nd(__urng);
      const double __y = -std::abs(__n) * __param._M_sm - 1;
      __x = std::floor(__y);
      __w = -__n * __n / 2;
      if (__x < -__m)
        continue;
    }
  else if (__u <= __c2)
    {
      const double __n = _M_nd(__urng);
      const double __y = 1 + std::abs(__n) * __param._M_scx;
      __x = std::ceil(__y);
      __w = __y * (2 - __y) * __param._M_1cx;
      if (__x > __param._M_d)
        continue;
    }
  else if (__u <= __c3)


    __x = -1;
  else if (__u <= __c4)
    __x = 0;
  else if (__u <= __c5)
    __x = 1;
  else
    {
      const double __v = -std::log(__aurng());
      const double __y = __param._M_d
         + __v * __2cx / __param._M_d;
      __x = std::ceil(__y);
      __w = -__param._M_d * __param._M_1cx * (1 + __y / 2);
    }

  __reject = (__w - __e - __x * __param._M_lm_thr
       > __param._M_lfm - std::lgamma(__x + __m + 1));

  __reject |= __x + __m >= __thr;

       } while (__reject);

     return result_type(__x + __m + __naf);
   }
 else

   {
     _IntType __x = 0;
     double __prod = 1.0;

     do
       {
  __prod *= __aurng();
  __x += 1;
       }
     while (__prod > __param._M_lm_thr);

     return __x - 1;
   }
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.mean() << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __mean;
      __is >> __mean >> __x._M_nd;
      __x.param(typename poisson_distribution<_IntType>::param_type(__mean));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    binomial_distribution<_IntType>::param_type::
    _M_initialize()
    {
      const double __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;

      _M_easy = true;


      if (_M_t * __p12 >= 8)
 {
   _M_easy = false;
   const double __np = std::floor(_M_t * __p12);
   const double __pa = __np / _M_t;
   const double __1p = 1 - __pa;

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __d1x =
     std::sqrt(__np * __1p * std::log(32 * __np
          / (81 * __pi_4 * __1p)));
   _M_d1 = std::round(std::max(1.0, __d1x));
   const double __d2x =
     std::sqrt(__np * __1p * std::log(32 * _M_t * __1p
          / (__pi_4 * __pa)));
   _M_d2 = std::round(std::max(1.0, __d2x));


   const double __spi_2 = 1.2533141373155002512078826424055226L;
   _M_s1 = std::sqrt(__np * __1p) * (1 + _M_d1 / (4 * __np));
   _M_s2 = std::sqrt(__np * __1p) * (1 + _M_d2 / (4 * _M_t * __1p));
   _M_c = 2 * _M_d1 / __np;
   _M_a1 = std::exp(_M_c) * _M_s1 * __spi_2;
   const double __a12 = _M_a1 + _M_s2 * __spi_2;
   const double __s1s = _M_s1 * _M_s1;
   _M_a123 = __a12 + (std::exp(_M_d1 / (_M_t * __1p))
        * 2 * __s1s / _M_d1
        * std::exp(-_M_d1 * _M_d1 / (2 * __s1s)));
   const double __s2s = _M_s2 * _M_s2;
   _M_s = (_M_a123 + 2 * __s2s / _M_d2
    * std::exp(-_M_d2 * _M_d2 / (2 * __s2s)));
   _M_lf = (std::lgamma(__np + 1)
     + std::lgamma(_M_t - __np + 1));
   _M_lp1p = std::log(__pa / __1p);

   _M_q = -std::log(1 - (__p12 - __pa) / __1p);
 }
      else

 _M_q = -std::log(1 - __p12);
    }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t)
      {
 _IntType __x = 0;
 double __sum = 0.0;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 do
   {
     const double __e = -std::log(__aurng());
     __sum += __e / (__t - __x);
     __x += 1;
   }
 while (__sum <= _M_param._M_q);

 return __x - 1;
      }
# 1430 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 const _IntType __t = __param.t();
 const double __p = __param.p();
 const double __p12 = __p <= 0.5 ? __p : 1.0 - __p;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);


 if (!__param._M_easy)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __np = std::floor(__t * __p12);


     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __a1 = __param._M_a1;
     const double __a12 = __a1 + __param._M_s2 * __spi_2;
     const double __a123 = __param._M_a123;
     const double __s1s = __param._M_s1 * __param._M_s1;
     const double __s2s = __param._M_s2 * __param._M_s2;

     bool __reject;
     do
       {
  const double __u = __param._M_s * __aurng();

  double __v;

  if (__u <= __a1)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s1 * std::abs(__n);
      __reject = __y >= __param._M_d1;
      if (!__reject)
        {
   const double __e = -std::log(__aurng());
   __x = std::floor(__y);
   __v = -__e - __n * __n / 2 + __param._M_c;
        }
    }
  else if (__u <= __a12)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s2 * std::abs(__n);
      __reject = __y >= __param._M_d2;
      if (!__reject)
        {
   const double __e = -std::log(__aurng());
   __x = std::floor(-__y);
   __v = -__e - __n * __n / 2;
        }
    }
  else if (__u <= __a123)
    {
      const double __e1 = -std::log(__aurng());
      const double __e2 = -std::log(__aurng());

      const double __y = __param._M_d1
         + 2 * __s1s * __e1 / __param._M_d1;
      __x = std::floor(__y);
      __v = (-__e2 + __param._M_d1 * (1 / (__t - __np)
          -__y / (2 * __s1s)));
      __reject = false;
    }
  else
    {
      const double __e1 = -std::log(__aurng());
      const double __e2 = -std::log(__aurng());

      const double __y = __param._M_d2
         + 2 * __s2s * __e1 / __param._M_d2;
      __x = std::floor(-__y);
      __v = -__e2 - __param._M_d2 * __y / (2 * __s2s);
      __reject = false;
    }

  __reject = __reject || __x < -__np || __x > __t - __np;
  if (!__reject)
    {
      const double __lfx =
        std::lgamma(__np + __x + 1)
        + std::lgamma(__t - (__np + __x) + 1);
      __reject = __v > __param._M_lf - __lfx
        + __x * __param._M_lp1p;
    }

  __reject |= __x + __np >= __thr;
       }
     while (__reject);

     __x += __np + __naf;

     const _IntType __z = _M_waiting(__urng, __t - _IntType(__x));
     __ret = _IntType(__x) + __z;
   }
 else

   __ret = _M_waiting(__urng, __t);

 if (__p12 != __p)
   __ret = __t - __ret;
 return __ret;
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.t() << __space << __x.p()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __t;
      double __p;
      __is >> __t >> __p >> __x._M_nd;
      __x.param(typename binomial_distribution<_IntType>::
  param_type(__t, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.lambda();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __lambda;
      __is >> __lambda;
      __x.param(typename exponential_distribution<_RealType>::
  param_type(__lambda));

      __is.flags(__flags);
      return __is;
    }
# 1647 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename normal_distribution<_RealType>::result_type
      normal_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 if (_M_saved_available)
   {
     _M_saved_available = false;
     __ret = _M_saved;
   }
 else
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     _M_saved = __x * __mult;
     _M_saved_available = true;
     __ret = __y * __mult;
   }

 __ret = __ret * __param.stddev() + __param.mean();
 return __ret;
      }

  template<typename _RealType>
    bool
    operator==(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    {
      if (__d1._M_param == __d2._M_param
   && __d1._M_saved_available == __d2._M_saved_available)
 {
   if (__d1._M_saved_available
       && __d1._M_saved == __d2._M_saved)
     return true;
   else if(!__d1._M_saved_available)
     return true;
   else
     return false;
 }
      else
 return false;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const normal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.mean() << __space << __x.stddev()
    << __space << __x._M_saved_available;
      if (__x._M_saved_available)
 __os << __space << __x._M_saved;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        normal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      double __mean, __stddev;
      __is >> __mean >> __stddev
    >> __x._M_saved_available;
      if (__x._M_saved_available)
 __is >> __x._M_saved;
      __x.param(typename normal_distribution<_RealType>::
  param_type(__mean, __stddev));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.s()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __s;
      __is >> __m >> __s >> __x._M_nd;
      __x.param(typename lognormal_distribution<_RealType>::
  param_type(__m, __s));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_gd;
      __x.param(typename chi_squared_distribution<_RealType>::
  param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename cauchy_distribution<_RealType>::result_type
      cauchy_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 _RealType __u;
 do
   __u = __aurng();
 while (__u == 0.5);

 const _RealType __pi = 3.1415926535897932384626433832795029L;
 return __p.a() + __p.b() * std::tan(__pi * __u);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename cauchy_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.n()
    << __space << __x._M_gd_x << __space << __x._M_gd_y;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __n;
      __is >> __m >> __n >> __x._M_gd_x >> __x._M_gd_y;
      __x.param(typename fisher_f_distribution<_RealType>::
  param_type(__m, __n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_nd << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_nd >> __x._M_gd;
      __x.param(typename student_t_distribution<_RealType>::param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    gamma_distribution<_RealType>::param_type::
    _M_initialize()
    {
      _M_malpha = _M_alpha < 1.0 ? _M_alpha + _RealType(1.0) : _M_alpha;

      const _RealType __a1 = _M_malpha - _RealType(1.0) / _RealType(3.0);
      _M_a2 = _RealType(1.0) / std::sqrt(_RealType(9.0) * __a1);
    }






  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename gamma_distribution<_RealType>::result_type
      gamma_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 result_type __u, __v, __n;
 const result_type __a1 = (__param._M_malpha
      - _RealType(1.0) / _RealType(3.0));

 do
   {
     do
       {
  __n = _M_nd(__urng);
  __v = result_type(1.0) + __param._M_a2 * __n;
       }
     while (__v <= 0.0);

     __v = __v * __v * __v;
     __u = __aurng();
   }
 while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
        && (std::log(__u) > (0.5 * __n * __n + __a1
        * (1.0 - __v + std::log(__v)))));

 if (__param.alpha() == __param._M_malpha)
   return __a1 * __v * __param.beta();
 else
   {
     do
       __u = __aurng();
     while (__u == 0.0);

     return (std::pow(__u, result_type(1.0) / __param.alpha())
      * __a1 * __v * __param.beta());
   }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.alpha() << __space << __x.beta()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __alpha_val, __beta_val;
      __is >> __alpha_val >> __beta_val >> __x._M_nd;
      __x.param(typename gamma_distribution<_RealType>::
  param_type(__alpha_val, __beta_val));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename weibull_distribution<_RealType>::result_type
      weibull_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.b() * std::pow(-std::log(__aurng()),
      result_type(1) / __p.a());
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename weibull_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename extreme_value_distribution<_RealType>::result_type
      extreme_value_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.a() - __p.b() * std::log(-std::log(__aurng()));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename extreme_value_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    discrete_distribution<_IntType>::param_type::
    _M_initialize()
    {
      if (_M_prob.size() < 2)
 {
   _M_prob.clear();
   return;
 }

      const double __sum = std::accumulate(_M_prob.begin(),
        _M_prob.end(), 0.0);

      __detail::__transform(_M_prob.begin(), _M_prob.end(), _M_prob.begin(),
     std::bind2nd(std::divides<double>(), __sum));

      _M_cp.reserve(_M_prob.size());
      std::partial_sum(_M_prob.begin(), _M_prob.end(),
         std::back_inserter(_M_cp));

      _M_cp[_M_cp.size() - 1] = 1.0;
    }

  template<typename _IntType>
    template<typename _Func>
      discrete_distribution<_IntType>::param_type::
      param_type(size_t __nw, double __xmin, double __xmax, _Func __fw)
      : _M_prob(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const double __delta = (__xmax - __xmin) / __n;

 _M_prob.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_prob.push_back(__fw(__xmin + __k * __delta + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename discrete_distribution<_IntType>::result_type
      discrete_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 if (__param._M_cp.empty())
   return result_type(0);

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);

 return __pos - __param._M_cp.begin();
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      std::vector<double> __prob = __x.probabilities();
      __os << __prob.size();
      for (auto __dit = __prob.begin(); __dit != __prob.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<double> __prob_vec;
      __prob_vec.reserve(__n);
      for (; __n != 0; --__n)
 {
   double __prob;
   __is >> __prob;
   __prob_vec.push_back(__prob);
 }

      __x.param(typename discrete_distribution<_IntType>::
  param_type(__prob_vec.begin(), __prob_vec.end()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_constant_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      const double __sum = std::accumulate(_M_den.begin(),
        _M_den.end(), 0.0);

      __detail::__transform(_M_den.begin(), _M_den.end(), _M_den.begin(),
       std::bind2nd(std::divides<double>(), __sum));

      _M_cp.reserve(_M_den.size());
      std::partial_sum(_M_den.begin(), _M_den.end(),
         std::back_inserter(_M_cp));


      _M_cp[_M_cp.size() - 1] = 1.0;

      for (size_t __k = 0; __k < _M_den.size(); ++__k)
 _M_den[__k] /= _M_int[__k + 1] - _M_int[__k];
    }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp()
      {
 if (__bbegin != __bend)
   {
     for (;;)
       {
  _M_int.push_back(*__bbegin);
  ++__bbegin;
  if (__bbegin == __bend)
    break;

  _M_den.push_back(*__wbegin);
  ++__wbegin;
       }
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 _M_int.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   _M_int.push_back(*__biter);

 _M_den.reserve(_M_int.size() - 1);
 for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
   _M_den.push_back(__fw(0.5 * (_M_int[__k + 1] + _M_int[__k])));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   _M_int.push_back(__xmin + __k * __delta);

 _M_den.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_den.push_back(__fw(_M_int[__k] + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_constant_distribution<_RealType>::result_type
      piecewise_constant_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 return __param._M_int[__i] + (__p - __pref) / __param._M_den[__i];
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n);
      for (size_t __i = 0; __i < __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_constant_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_linear_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)
       && _M_den[0] == _M_den[1]))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      double __sum = 0.0;
      _M_cp.reserve(_M_int.size() - 1);
      _M_m.reserve(_M_int.size() - 1);
      for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
 {
   const _RealType __delta = _M_int[__k + 1] - _M_int[__k];
   __sum += 0.5 * (_M_den[__k + 1] + _M_den[__k]) * __delta;
   _M_cp.push_back(__sum);
   _M_m.push_back((_M_den[__k + 1] - _M_den[__k]) / __delta);
 }


      __detail::__transform(_M_den.begin(), _M_den.end(), _M_den.begin(),
     std::bind2nd(std::divides<double>(), __sum));

      __detail::__transform(_M_cp.begin(), _M_cp.end(), _M_cp.begin(),
       std::bind2nd(std::divides<double>(), __sum));

      __detail::__transform(_M_m.begin(), _M_m.end(), _M_m.begin(),
       std::bind2nd(std::divides<double>(), __sum));

      _M_cp[_M_cp.size() - 1] = 1.0;
     }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 for (; __bbegin != __bend; ++__bbegin, ++__wbegin)
   {
     _M_int.push_back(*__bbegin);
     _M_den.push_back(*__wbegin);
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 _M_int.reserve(__bl.size());
 _M_den.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   {
     _M_int.push_back(*__biter);
     _M_den.push_back(__fw(*__biter));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 _M_den.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   {
     _M_int.push_back(__xmin + __k * __delta);
     _M_den.push_back(__fw(_M_int[__k] + __delta));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_linear_distribution<_RealType>::result_type
      piecewise_linear_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 const double __a = 0.5 * __param._M_m[__i];
 const double __b = __param._M_den[__i];
 const double __cm = __p - __pref;

 _RealType __x = __param._M_int[__i];
 if (__a == 0)
   __x += __cm / __b;
 else
   {
     const double __d = __b * __b + 4.0 * __a * __cm;
     __x += 0.5 * (std::sqrt(__d) - __b) / __a;
          }

        return __x;
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_linear_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    seed_seq::seed_seq(std::initializer_list<_IntType> __il)
    {
      for (auto __iter = __il.begin(); __iter != __il.end(); ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _InputIterator>
    seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end)
    {
      for (_InputIterator __iter = __begin; __iter != __end; ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _RandomAccessIterator>
    void
    seed_seq::generate(_RandomAccessIterator __begin,
         _RandomAccessIterator __end)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
        _Type;

      if (__begin == __end)
 return;

      std::fill(__begin, __end, _Type(0x8b8b8b8bu));

      const size_t __n = __end - __begin;
      const size_t __s = _M_v.size();
      const size_t __t = (__n >= 623) ? 11
         : (__n >= 68) ? 7
         : (__n >= 39) ? 5
         : (__n >= 7) ? 3
         : (__n - 1) / 2;
      const size_t __p = (__n - __t) / 2;
      const size_t __q = __p + __t;
      const size_t __m = std::max(__s + 1, __n);

      for (size_t __k = 0; __k < __m; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    ^ __begin[(__k + __p) % __n]
    ^ __begin[(__k - 1) % __n]);
   _Type __r1 = __arg ^ (__arg >> 27);
   __r1 = __detail::__mod<_Type,
      __detail::_Shift<_Type, 32>::__value>(1664525u * __r1);
   _Type __r2 = __r1;
   if (__k == 0)
     __r2 += __s;
   else if (__k <= __s)
     __r2 += __k % __n + _M_v[__k - 1];
   else
     __r2 += __k % __n;
   __r2 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r2);
   __begin[(__k + __p) % __n] += __r1;
   __begin[(__k + __q) % __n] += __r2;
   __begin[__k % __n] = __r2;
 }

      for (size_t __k = __m; __k < __m + __n; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    + __begin[(__k + __p) % __n]
    + __begin[(__k - 1) % __n]);
   _Type __r3 = __arg ^ (__arg >> 27);
   __r3 = __detail::__mod<_Type,
     __detail::_Shift<_Type, 32>::__value>(1566083941u * __r3);
   _Type __r4 = __r3 - __k % __n;
   __r4 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r4);
   __begin[(__k + __p) % __n] ^= __r3;
   __begin[(__k + __q) % __n] ^= __r4;
   __begin[__k % __n] = __r4;
 }
    }

  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __urng)
    {
      const size_t __b
 = std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),
                   __bits);
      const long double __r = static_cast<long double>(__urng.max())
       - static_cast<long double>(__urng.min()) + 1.0L;
      const size_t __log2r = std::log(__r) / std::log(2.0L);
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
 {
   __sum += _RealType(__urng() - __urng.min()) * __tmp;
   __tmp *= __r;
 }
      return __sum / __tmp;
    }


}
# 51 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 68 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 1 3
# 47 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
# 47 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3






# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3







#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 82 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const
    { return __name[0] == '*' ? __name + 1 : __name; }
# 117 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
    bool before(const type_info& __arg) const
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 138 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
    bool operator!=(const type_info& __arg) const
    { return !operator==(__arg); }


    size_t hash_code() const throw()
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() throw() { }



    virtual ~bad_cast() throw();


    virtual const char* what() const throw();
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () throw() { }



    virtual ~bad_typeid() throw();


    virtual const char* what() const throw();
  };
}

#pragma GCC visibility pop

}
# 54 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 2 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 3







namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct __add_c_ref
    { typedef const _Tp& type; };

  template<typename _Tp>
    struct __add_c_ref<_Tp&>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct __add_ref
    { typedef _Tp& type; };

  template<typename _Tp>
    struct __add_ref<_Tp&>
    { typedef _Tp& type; };

  template<std::size_t _Idx, typename _Head, bool _IsEmpty>
    struct _Head_base;

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
      : _Head(__h) { }

      template<typename _UHead>
        _Head_base(_UHead&& __h)
 : _Head(std::forward<_UHead>(__h)) { }

      _Head& _M_head() { return *this; }
      const _Head& _M_head() const { return *this; }

      void
      _M_swap_impl(_Head& __h)
      {
 using std::swap;
 swap(__h, _M_head());
      }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      template<typename _UHead>
        _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

      _Head& _M_head() { return _M_head_impl; }
      const _Head& _M_head() const { return _M_head_impl; }

      void
      _M_swap_impl(_Head& __h)
      {
 using std::swap;
 swap(__h, _M_head());
      }

      _Head _M_head_impl;
    };
# 123 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 3
  template<std::size_t _Idx, typename... _Elements>
    struct _Tuple_impl;





  template<std::size_t _Idx>
    struct _Tuple_impl<_Idx>
    {
    protected:
      void _M_swap_impl(_Tuple_impl&) { }
    };






  template<std::size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head, std::is_empty<_Head>::value>
    {
      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, std::is_empty<_Head>::value> _Base;

      _Head& _M_head() { return _Base::_M_head(); }
      const _Head& _M_head() const { return _Base::_M_head(); }

      _Inherited& _M_tail() { return *this; }
      const _Inherited& _M_tail() const { return *this; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail>
        explicit
        _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      _Tuple_impl(_Tuple_impl&& __in)
      : _Inherited(std::move(__in._M_tail())),
 _Base(std::forward<_Head>(__in._M_head())) { }

      template<typename... _UElements>
        _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(__in._M_tail()), _Base(__in._M_head()) { }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move(__in._M_tail())),
   _Base(std::forward<_UHead>(__in._M_head())) { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head() = __in._M_head();
 _M_tail() = __in._M_tail();
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      {
 _M_head() = std::forward<_Head>(__in._M_head());
 _M_tail() = std::move(__in._M_tail());
 return *this;
      }

      template<typename... _UElements>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)
        {
   _M_head() = __in._M_head();
   _M_tail() = __in._M_tail();
   return *this;
 }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
   _M_head() = std::forward<_UHead>(__in._M_head());
   _M_tail() = std::move(__in._M_tail());
   return *this;
 }

    protected:
      void
      _M_swap_impl(_Tuple_impl& __in)
      {
 _Base::_M_swap_impl(__in._M_head());
 _Inherited::_M_swap_impl(__in._M_tail());
      }
    };


  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        explicit
        tuple(_UElements&&... __elements)
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      constexpr tuple(const tuple&) = default;

      tuple(tuple&& __in)
      : _Inherited(static_cast<_Inherited&&>(__in)) { }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple&
        operator=(const tuple<_UElements...>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple&
        operator=(tuple<_UElements...>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      { _Inherited::_M_swap_impl(__in); }
    };

  template<>
    class tuple<>
    {
    public:
      void swap(tuple&) { }
    };


  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _T1& __a1, const _T2& __a2)
      : _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2>
        explicit
        tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      tuple(tuple&& __in)
      : _Inherited(static_cast<_Inherited&&>(__in)) { }

      template<typename _U1, typename _U2>
        tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2>
        tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2>
        tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2>
        tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const tuple<_U1, _U2>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(tuple<_U1, _U2>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const pair<_U1, _U2>& __in)
        {
   this->_M_head() = __in.first;
   this->_M_tail()._M_head() = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(pair<_U1, _U2>&& __in)
        {
   this->_M_head() = std::forward<_U1>(__in.first);
   this->_M_tail()._M_head() = std::forward<_U2>(__in.second);
   return *this;
 }

      void
      swap(tuple& __in)
      {
 using std::swap;
 swap(this->_M_head(), __in._M_head());
 swap(this->_M_tail()._M_head(), __in._M_tail()._M_head());
      }
    };


  template<typename _T1>
    class tuple<_T1> : public _Tuple_impl<0, _T1>
    {
      typedef _Tuple_impl<0, _T1> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _T1& __a1)
      : _Inherited(__a1) { }

      template<typename _U1, typename = typename
        std::enable_if<std::is_convertible<_U1, _T1>::value>::type>
        explicit
        tuple(_U1&& __a1)
 : _Inherited(std::forward<_U1>(__a1)) { }

      constexpr tuple(const tuple&) = default;

      tuple(tuple&& __in)
      : _Inherited(static_cast<_Inherited&&>(__in)) { }

      template<typename _U1>
        tuple(const tuple<_U1>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1>&>(__in)) { }

      template<typename _U1>
        tuple(tuple<_U1>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1>&&>(__in)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1>
        tuple&
        operator=(const tuple<_U1>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1>
        tuple&
        operator=(tuple<_U1>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      { _Inherited::_M_swap_impl(__in); }
    };



  template<std::size_t __i, typename _Tp>
    struct tuple_element;





  template<std::size_t __i, typename _Head, typename... _Tail>
    struct tuple_element<__i, tuple<_Head, _Tail...> >
    : tuple_element<__i - 1, tuple<_Tail...> > { };




  template<typename _Head, typename... _Tail>
    struct tuple_element<0, tuple<_Head, _Tail...> >
    {
      typedef _Head type;
    };


  template<typename _Tp>
    struct tuple_size;


  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...> >
    {
      static const std::size_t value = sizeof...(_Elements);
    };

  template<typename... _Elements>
    const std::size_t tuple_size<tuple<_Elements...> >::value;

  template<std::size_t __i, typename _Head, typename... _Tail>
    inline typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t)
    { return __t._M_head(); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    inline typename __add_c_ref<_Head>::type
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t)
    { return __t._M_head(); }



  template<std::size_t __i, typename... _Elements>
    inline typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...> >::type
                    >::type
    get(tuple<_Elements...>& __t)
    { return __get_helper<__i>(__t); }

  template<std::size_t __i, typename... _Elements>
    inline typename __add_c_ref<
                      typename tuple_element<__i, tuple<_Elements...> >::type
                    >::type
    get(const tuple<_Elements...>& __t)
    { return __get_helper<__i>(__t); }


  template<std::size_t __check_equal_size, std::size_t __i, std::size_t __j,
    typename _Tp, typename _Up>
    struct __tuple_compare;

  template<std::size_t __i, std::size_t __j, typename _Tp, typename _Up>
    struct __tuple_compare<0, __i, __j, _Tp, _Up>
    {
      static bool __eq(const _Tp& __t, const _Up& __u)
      {
 return (get<__i>(__t) == get<__i>(__u) &&
  __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__eq(__t, __u));
      }

      static bool __less(const _Tp& __t, const _Up& __u)
      {
 return ((get<__i>(__t) < get<__i>(__u))
  || !(get<__i>(__u) < get<__i>(__t)) &&
  __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__less(__t, __u));
      }
    };

  template<std::size_t __i, typename _Tp, typename _Up>
    struct __tuple_compare<0, __i, __i, _Tp, _Up>
    {
      static bool __eq(const _Tp&, const _Up&)
      { return true; }

      static bool __less(const _Tp&, const _Up&)
      { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      typedef tuple<_TElements...> _Tp;
      typedef tuple<_UElements...> _Up;
      return (__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,
       0, tuple_size<_Tp>::value, _Tp, _Up>::__eq(__t, __u));
    }

  template<typename... _TElements, typename... _UElements>
    bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      typedef tuple<_TElements...> _Tp;
      typedef tuple<_UElements...> _Up;
      return (__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,
       0, tuple_size<_Tp>::value, _Tp, _Up>::__less(__t, __u));
    }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }


  template<typename... _Elements>
    inline tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }

  template<typename... _Elements>
    inline tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args)
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }

  template<std::size_t...> struct __index_holder { };

  template<std::size_t __i, typename _IdxHolder, typename... _Elements>
    struct __index_holder_impl;

  template<std::size_t __i, std::size_t... _Indexes, typename _IdxHolder,
    typename... _Elements>
    struct __index_holder_impl<__i, __index_holder<_Indexes...>,
          _IdxHolder, _Elements...>
    {
      typedef typename __index_holder_impl<__i + 1,
        __index_holder<_Indexes..., __i>,
        _Elements...>::type type;
    };

  template<std::size_t __i, std::size_t... _Indexes>
    struct __index_holder_impl<__i, __index_holder<_Indexes...> >
    { typedef __index_holder<_Indexes...> type; };

  template<typename... _Elements>
    struct __make_index_holder
    : __index_holder_impl<0, __index_holder<>, _Elements...> { };

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(const tuple<_TElements...>& __t,
         const __index_holder<_TIdx...>&,
                       const tuple<_UElements...>& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>(get<_TIdx>(__t)...,
       get<_UIdx>(__u)...); }

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(tuple<_TElements...>&& __t,
         const __index_holder<_TIdx...>&,
         const tuple<_UElements...>& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>
 (std::forward<_TElements>(get<_TIdx>(__t))..., get<_UIdx>(__u)...); }

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(const tuple<_TElements...>& __t,
         const __index_holder<_TIdx...>&,
         tuple<_UElements...>&& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>
 (get<_TIdx>(__t)..., std::forward<_UElements>(get<_UIdx>(__u))...); }

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(tuple<_TElements...>&& __t,
         const __index_holder<_TIdx...>&,
         tuple<_UElements...>&& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>
 (std::forward<_TElements>(get<_TIdx>(__t))...,
  std::forward<_UElements>(get<_UIdx>(__u))...); }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(const tuple<_TElements...>& __t, const tuple<_UElements...>& __u)
    {
      return __tuple_cat_helper(__t, typename
    __make_index_holder<_TElements...>::type(),
    __u, typename
    __make_index_holder<_UElements...>::type());
    }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(tuple<_TElements...>&& __t, const tuple<_UElements...>& __u)
    {
      return __tuple_cat_helper(std::move(__t), typename
     __make_index_holder<_TElements...>::type(),
     __u, typename
     __make_index_holder<_UElements...>::type());
    }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(const tuple<_TElements...>& __t, tuple<_UElements...>&& __u)
    {
      return __tuple_cat_helper(__t, typename
    __make_index_holder<_TElements...>::type(),
    std::move(__u), typename
    __make_index_holder<_UElements...>::type());
    }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(tuple<_TElements...>&& __t, tuple<_UElements...>&& __u)
    {
      return __tuple_cat_helper(std::move(__t), typename
    __make_index_holder<_TElements...>::type(),
    std::move(__u), typename
    __make_index_holder<_UElements...>::type());
    }

  template<typename... _Elements>
    inline tuple<_Elements&...>
    tie(_Elements&... __args)
    { return tuple<_Elements&...>(__args...); }

  template<typename... _Elements>
    inline void
    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    { __x.swap(__y); }



  struct _Swallow_assign
  {
    template<class _Tp>
      const _Swallow_assign&
      operator=(const _Tp&) const
      { return *this; }
  };

  const _Swallow_assign ignore{};





  template<int... _Indexes>
    struct _Index_tuple
    {
      typedef _Index_tuple<_Indexes..., sizeof...(_Indexes)> __next;
    };


  template<std::size_t _Num>
    struct _Build_index_tuple
    {
      typedef typename _Build_index_tuple<_Num-1>::__type::__next __type;
    };

  template<>
    struct _Build_index_tuple<0>
    {
      typedef _Index_tuple<> __type;
    };


  template<class _T1, class _T2>
    template<typename _Tp, typename... _Args>
      inline _Tp
      pair<_T1, _T2>::
      __cons(tuple<_Args...>&& __tuple)
      {
 typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
   _Indexes;
 return __do_cons<_Tp>(std::move(__tuple), _Indexes());
      }

  template<class _T1, class _T2>
    template<typename _Tp, typename... _Args, int... _Indexes>
      inline _Tp
      pair<_T1, _T2>::
      __do_cons(tuple<_Args...>&& __tuple,
  const _Index_tuple<_Indexes...>&)
      { return _Tp(std::forward<_Args>(get<_Indexes>(__tuple))...); }


}
# 56 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{


template<typename _Tp> class __has_result_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::result_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_result_type : integral_constant<bool, __has_result_type_helper <typename remove_cv<_Tp>::type>::value> { };


  template<bool _Has_result_type, typename _Functor>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<true, _Functor>
    { typedef typename _Functor::result_type result_type; };





  template<typename _Functor>
    struct _Weak_result_type_impl
    : _Maybe_get_result_type<__has_result_type<_Functor>::value, _Functor>
    { };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) const>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)
      const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)
      const volatile>
    { typedef _Res result_type; };





  template<typename _Functor>
    struct _Weak_result_type
    : _Weak_result_type_impl<typename remove_cv<_Functor>::type>
    { };


  template<typename _Tp>
    struct _Derives_from_unary_function : __sfinae_types
    {
    private:
      template<typename _T1, typename _Res>
 static __one __test(const volatile unary_function<_T1, _Res>*);



      static __two __test(...);

    public:
      static const bool value = sizeof(__test((_Tp*)0)) == 1;
    };


  template<typename _Tp>
    struct _Derives_from_binary_function : __sfinae_types
    {
    private:
      template<typename _T1, typename _T2, typename _Res>
 static __one __test(const volatile binary_function<_T1, _T2, _Res>*);



      static __two __test(...);

    public:
      static const bool value = sizeof(__test((_Tp*)0)) == 1;
    };





  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (!is_member_pointer<_Functor>::value
       && !is_function<_Functor>::value
       && !is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor(_Args&&...)>::type
    >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }

  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
             (is_member_pointer<_Functor>::value
              && !is_function<_Functor>::value
              && !is_function<typename remove_pointer<_Functor>::type>::value),
             typename result_of<_Functor(_Args&&...)>::type
           >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return mem_fn(__f)(std::forward<_Args>(__args)...);
    }


  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (is_pointer<_Functor>::value
       && is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor(_Args&&...)>::type
    >::type
    __invoke(_Functor __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }






  template<bool _Unary, bool _Binary, typename _Tp>
    struct _Reference_wrapper_base_impl;


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, false, _Tp>
    : _Weak_result_type<_Tp>
    { };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, false, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
    };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };


   template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };

  template<typename _Tp> class __has_argument_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::argument_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_argument_type : integral_constant<bool, __has_argument_type_helper <typename remove_cv<_Tp>::type>::value> { };
  template<typename _Tp> class __has_first_argument_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::first_argument_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_first_argument_type : integral_constant<bool, __has_first_argument_type_helper <typename remove_cv<_Tp>::type>::value> { };
  template<typename _Tp> class __has_second_argument_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::second_argument_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_second_argument_type : integral_constant<bool, __has_second_argument_type_helper <typename remove_cv<_Tp>::type>::value> { };







  template<typename _Tp>
    struct _Reference_wrapper_base
    : _Reference_wrapper_base_impl<
      __has_argument_type<_Tp>::value,
      __has_first_argument_type<_Tp>::value
      && __has_second_argument_type<_Tp>::value,
      _Tp>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1)>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) volatile>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const volatile>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(*)(_T1)>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(*)(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)()>
    : unary_function<_T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2)>
    : binary_function<_T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const>
    : unary_function<const _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const>
    : binary_function<const _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() volatile>
    : unary_function<volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) volatile>
    : binary_function<volatile _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const volatile>
    : unary_function<const volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const volatile>
    : binary_function<const volatile _T1*, _T2, _Res>
    { };






  template<typename _Tp>
    class reference_wrapper
    : public _Reference_wrapper_base<typename remove_cv<_Tp>::type>
    {
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata)
      : _M_data(std::__addressof(__indata))
      { }

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper<_Tp>& __inref):
      _M_data(__inref._M_data)
      { }

      reference_wrapper&
      operator=(const reference_wrapper<_Tp>& __inref)
      {
 _M_data = __inref._M_data;
 return *this;
      }

      operator _Tp&() const
      { return this->get(); }

      _Tp&
      get() const
      { return *_M_data; }

      template<typename... _Args>
 typename result_of<_Tp&(_Args&&...)>::type
 operator()(_Args&&... __args) const
 {
   return __invoke(get(), std::forward<_Args>(__args)...);
 }
    };



  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t)
    { return reference_wrapper<_Tp>(__t); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(const _Tp& __t)
    { return reference_wrapper<const _Tp>(__t); }

  template<typename _Tp>
    void ref(const _Tp&&) = delete;

  template<typename _Tp>
    void cref(const _Tp&&) = delete;


  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(reference_wrapper<_Tp> __t)
    { return ref(__t.get()); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(reference_wrapper<_Tp> __t)
    { return cref(__t.get()); }



  template<typename _MemberPointer>
    class _Mem_fn;






  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };


  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
    : std::unary_function<_T1, _Res> { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>
    : std::binary_function<_T1, _T2, _Res> { };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...);

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(_Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(_Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res
 operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) const>
    : public _Maybe_unary_or_binary_function<_Res, const _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) const;

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(const _Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(const _Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) volatile>
    : public _Maybe_unary_or_binary_function<_Res, volatile _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) volatile;

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(volatile _Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(volatile _Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res
 operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) const volatile>
    : public _Maybe_unary_or_binary_function<_Res, const volatile _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) const volatile;

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(const volatile _Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(const volatile _Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Tp, bool>
    struct _Mem_fn_const_or_non
    {
      typedef const _Tp& type;
    };

  template<typename _Tp>
    struct _Mem_fn_const_or_non<_Tp, false>
    {
      typedef _Tp& type;
    };

  template<typename _Res, typename _Class>
    class _Mem_fn<_Res _Class::*>
    {


      template<typename _Tp>
 _Res&
 _M_call(_Tp& __object, _Class *) const
 { return __object.*__pm; }

      template<typename _Tp, typename _Up>
 _Res&
 _M_call(_Tp& __object, _Up * const *) const
 { return (*__object).*__pm; }

      template<typename _Tp, typename _Up>
 const _Res&
 _M_call(_Tp& __object, const _Up * const *) const
 { return (*__object).*__pm; }

      template<typename _Tp>
 const _Res&
 _M_call(_Tp& __object, const _Class *) const
 { return __object.*__pm; }

      template<typename _Tp>
 const _Res&
 _M_call(_Tp& __ptr, const volatile void*) const
 { return (*__ptr).*__pm; }

      template<typename _Tp> static _Tp& __get_ref();

      template<typename _Tp>
 static __sfinae_types::__one __check_const(_Tp&, _Class*);
      template<typename _Tp, typename _Up>
 static __sfinae_types::__one __check_const(_Tp&, _Up * const *);
      template<typename _Tp, typename _Up>
 static __sfinae_types::__two __check_const(_Tp&, const _Up * const *);
      template<typename _Tp>
 static __sfinae_types::__two __check_const(_Tp&, const _Class*);
      template<typename _Tp>
 static __sfinae_types::__two __check_const(_Tp&, const volatile void*);

    public:
      template<typename _Tp>
 struct _Result_type
 : _Mem_fn_const_or_non<_Res,
   (sizeof(__sfinae_types::__two)
    == sizeof(__check_const<_Tp>(__get_ref<_Tp>(), (_Tp*)0)))>
 { };

      template<typename _Signature>
 struct result;

      template<typename _CVMem, typename _Tp>
 struct result<_CVMem(_Tp)>
 : public _Result_type<_Tp> { };

      template<typename _CVMem, typename _Tp>
 struct result<_CVMem(_Tp&)>
 : public _Result_type<_Tp> { };

      explicit
      _Mem_fn(_Res _Class::*__pm) : __pm(__pm) { }


      _Res&
      operator()(_Class& __object) const
      { return __object.*__pm; }

      const _Res&
      operator()(const _Class& __object) const
      { return __object.*__pm; }


      _Res&
      operator()(_Class* __object) const
      { return __object->*__pm; }

      const _Res&
      operator()(const _Class* __object) const
      { return __object->*__pm; }


      template<typename _Tp>
 typename _Result_type<_Tp>::type
 operator()(_Tp& __unknown) const
 { return _M_call(__unknown, &__unknown); }

    private:
      _Res _Class::*__pm;
    };






  template<typename _Tp, typename _Class>
    inline _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::* __pm)
    {
      return _Mem_fn<_Tp _Class::*>(__pm);
    }







  template<typename _Tp>
    struct is_bind_expression
    : public false_type { };






  template<typename _Tp>
    struct is_placeholder
    : public integral_constant<int, 0>
    { };


  template<int _Num> struct _Placeholder { };
# 855 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  namespace placeholders
  {

    extern const _Placeholder<1> _1;
    extern const _Placeholder<2> _2;
    extern const _Placeholder<3> _3;
    extern const _Placeholder<4> _4;
    extern const _Placeholder<5> _5;
    extern const _Placeholder<6> _6;
    extern const _Placeholder<7> _7;
    extern const _Placeholder<8> _8;
    extern const _Placeholder<9> _9;
    extern const _Placeholder<10> _10;
    extern const _Placeholder<11> _11;
    extern const _Placeholder<12> _12;
    extern const _Placeholder<13> _13;
    extern const _Placeholder<14> _14;
    extern const _Placeholder<15> _15;
    extern const _Placeholder<16> _16;
    extern const _Placeholder<17> _17;
    extern const _Placeholder<18> _18;
    extern const _Placeholder<19> _19;
    extern const _Placeholder<20> _20;
    extern const _Placeholder<21> _21;
    extern const _Placeholder<22> _22;
    extern const _Placeholder<23> _23;
    extern const _Placeholder<24> _24;
    extern const _Placeholder<25> _25;
    extern const _Placeholder<26> _26;
    extern const _Placeholder<27> _27;
    extern const _Placeholder<28> _28;
    extern const _Placeholder<29> _29;

  }
# 897 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<int _Num>
    struct is_placeholder<_Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };





  struct _No_tuple_element;






  template<int __i, typename _Tuple, bool _IsSafe>
    struct _Safe_tuple_element_impl
    : tuple_element<__i, _Tuple> { };






  template<int __i, typename _Tuple>
    struct _Safe_tuple_element_impl<__i, _Tuple, false>
    {
      typedef _No_tuple_element type;
    };





 template<int __i, typename _Tuple>
   struct _Safe_tuple_element
   : _Safe_tuple_element_impl<__i, _Tuple,
         (__i >= 0 && __i < tuple_size<_Tuple>::value)>
   { };
# 949 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<typename _Arg,
    bool _IsBindExp = is_bind_expression<_Arg>::value,
    bool _IsPlaceholder = (is_placeholder<_Arg>::value > 0)>
    class _Mu;





  template<typename _Tp>
    class _Mu<reference_wrapper<_Tp>, false, false>
    {
    public:
      typedef _Tp& result_type;





      template<typename _CVRef, typename _Tuple>
 result_type
 operator()(_CVRef& __arg, _Tuple&) const volatile
 { return __arg.get(); }
    };






  template<typename _Arg>
    class _Mu<_Arg, true, false>
    {
    public:
      template<typename _CVArg, typename... _Args>
 auto
 operator()(_CVArg& __arg,
     tuple<_Args...>& __tuple) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {

   typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
     _Indexes;
   return this->__call(__arg, __tuple, _Indexes());
 }

    private:


      template<typename _CVArg, typename... _Args, int... _Indexes>
 auto
 __call(_CVArg& __arg, tuple<_Args...>& __tuple,
        const _Index_tuple<_Indexes...>&) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {
   return __arg(std::forward<_Args>(get<_Indexes>(__tuple))...);
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, true>
    {
    public:
      template<typename _Signature> class result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 class result<_CVMu(_CVArg, _Tuple)>
 {



   typedef typename _Safe_tuple_element<(is_placeholder<_Arg>::value
      - 1), _Tuple>::type
     __base_type;

 public:
   typedef typename add_rvalue_reference<__base_type>::type type;
 };

      template<typename _Tuple>
 typename result<_Mu(_Arg, _Tuple)>::type
 operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 {
   return std::forward<typename result<_Mu(_Arg, _Tuple)>::type>(
       ::std::get<(is_placeholder<_Arg>::value - 1)>(__tuple));
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, false>
    {
    public:
      template<typename _Signature> struct result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 struct result<_CVMu(_CVArg, _Tuple)>
 {
   typedef typename add_lvalue_reference<_CVArg>::type type;
 };


      template<typename _CVArg, typename _Tuple>
 _CVArg&&
 operator()(_CVArg&& __arg, _Tuple&) const volatile
 { return std::forward<_CVArg>(__arg); }
    };






  template<typename _Tp>
    struct _Maybe_wrap_member_pointer
    {
      typedef _Tp type;

      static const _Tp&
      __do_wrap(const _Tp& __x)
      { return __x; }

      static _Tp&&
      __do_wrap(_Tp&& __x)
      { return static_cast<_Tp&&>(__x); }
    };






  template<typename _Tp, typename _Class>
    struct _Maybe_wrap_member_pointer<_Tp _Class::*>
    {
      typedef _Mem_fn<_Tp _Class::*> type;

      static type
      __do_wrap(_Tp _Class::* __pm)
      { return type(__pm); }
    };





  template<>
    struct _Maybe_wrap_member_pointer<void>
    {
      typedef void type;
    };


  template<size_t _Ind, typename... _Tp>
    inline auto
    __volget(volatile tuple<_Tp...>& __tuple)
    -> typename tuple_element<_Ind, tuple<_Tp...>>::type volatile&
    { return std::get<_Ind>(const_cast<tuple<_Tp...>&>(__tuple)); }


  template<size_t _Ind, typename... _Tp>
    inline auto
    __volget(const volatile tuple<_Tp...>& __tuple)
    -> typename tuple_element<_Ind, tuple<_Tp...>>::type const volatile&
    { return std::get<_Ind>(const_cast<const tuple<_Tp...>&>(__tuple)); }


  template<typename _Signature>
    struct _Bind;

   template<typename _Functor, typename... _Bound_args>
    class _Bind<_Functor(_Bound_args...)>
    : public _Weak_result_type<_Functor>
    {
      typedef _Bind __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call_v(tuple<_Args...>&& __args,
   _Index_tuple<_Indexes...>) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call_c_v(tuple<_Args...>&& __args,
     _Index_tuple<_Indexes...>) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

     public:
      template<typename... _Args>
 explicit _Bind(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args, typename _Result
 = decltype( std::declval<_Functor>()(
       _Mu<_Bound_args>()( std::declval<_Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
         typename add_const<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<const _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const
 {
   return this->__call_c<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_volatile<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) volatile
 {
   return this->__call_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_cv<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<const volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const volatile
 {
   return this->__call_c_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };


  template<typename _Result, typename _Signature>
    struct _Bind_result;

  template<typename _Result, typename _Functor, typename... _Bound_args>
    class _Bind_result<_Result, _Functor(_Bound_args...)>
    {
      typedef _Bind_result __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Res>
 struct __enable_if_void : enable_if<is_void<_Res>::value, int> { };
      template<typename _Res>
 struct __disable_if_void : enable_if<!is_void<_Res>::value, int> { };


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0)
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0)
 {
   _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const
 {
   _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args,
        _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

    public:
      typedef _Result result_type;

      template<typename... _Args>
 explicit _Bind_result(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind_result(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind_result(const _Bind_result&) = default;

      _Bind_result(_Bind_result&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };





  template<typename _Signature>
    struct is_bind_expression<_Bind<_Signature> >
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<_Bind_result<_Result, _Signature> >
    : public true_type { };

  template<typename _Functor, typename... _ArgTypes>
    struct _Bind_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Functor>::type>
 __maybe_type;
      typedef typename __maybe_type::type __functor_type;
      typedef _Bind<__functor_type(typename decay<_ArgTypes>::type...)> type;
    };





  template<typename _Functor, typename... _ArgTypes>
    inline
    typename _Bind_helper<_Functor, _ArgTypes...>::type
    bind(_Functor&& __f, _ArgTypes&&... __args)
    {
      typedef _Bind_helper<_Functor, _ArgTypes...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Functor>(__f)),
      std::forward<_ArgTypes>(__args)...);
    }

  template<typename _Result, typename _Functor, typename... _ArgTypes>
    struct _Bindres_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Functor>::type>
 __maybe_type;
      typedef typename __maybe_type::type __functor_type;
      typedef _Bind_result<_Result,
      __functor_type(typename decay<_ArgTypes>::type...)>
 type;
    };





  template<typename _Result, typename _Functor, typename... _ArgTypes>
    inline
    typename _Bindres_helper<_Result, _Functor, _ArgTypes...>::type
    bind(_Functor&& __f, _ArgTypes&&... __args)
    {
      typedef _Bindres_helper<_Result, _Functor, _ArgTypes...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Functor>(__f)),
      std::forward<_ArgTypes>(__args)...);
    }






  class bad_function_call : public std::exception
  {
  public:
    virtual ~bad_function_call() throw();
  };






  template<typename _Tp>
    struct __is_location_invariant
    : integral_constant<bool, (is_pointer<_Tp>::value
          || is_member_pointer<_Tp>::value)>
    { };

  class _Undefined_class;

  union _Nocopy_types
  {
    void* _M_object;
    const void* _M_const_object;
    void (*_M_function_pointer)();
    void (_Undefined_class::*_M_member_pointer)();
  };

  union _Any_data
  {
    void* _M_access() { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const
      { return *static_cast<const _Tp*>(_M_access()); }

    _Nocopy_types _M_unused;
    char _M_pod_data[sizeof(_Nocopy_types)];
  };

  enum _Manager_operation
  {
    __get_type_info,
    __get_functor_ptr,
    __clone_functor,
    __destroy_functor
  };



  template<typename _Tp>
    struct _Simple_type_wrapper
    {
      _Simple_type_wrapper(_Tp __value) : __value(__value) { }

      _Tp __value;
    };

  template<typename _Tp>
    struct __is_location_invariant<_Simple_type_wrapper<_Tp> >
    : __is_location_invariant<_Tp>
    { };



  template<typename _Functor>
    inline _Functor&
    __callable_functor(_Functor& __f)
    { return __f; }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* &__p)
    { return mem_fn(__p); }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* const &__p)
    { return mem_fn(__p); }

  template<typename _Signature>
    class function;


  class _Function_base
  {
  public:
    static const std::size_t _M_max_size = sizeof(_Nocopy_types);
    static const std::size_t _M_max_align = __alignof__(_Nocopy_types);

    template<typename _Functor>
      class _Base_manager
      {
      protected:
 static const bool __stored_locally =
 (__is_location_invariant<_Functor>::value
  && sizeof(_Functor) <= _M_max_size
  && __alignof__(_Functor) <= _M_max_align
  && (_M_max_align % __alignof__(_Functor) == 0));

 typedef integral_constant<bool, __stored_locally> _Local_storage;


 static _Functor*
 _M_get_pointer(const _Any_data& __source)
 {
   const _Functor* __ptr =
     __stored_locally? std::__addressof(__source._M_access<_Functor>())
                                 : __source._M_access<_Functor*>();
   return const_cast<_Functor*>(__ptr);
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 {
   new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 {
   __dest._M_access<_Functor*>() =
     new _Functor(*__source._M_access<_Functor*>());
 }



 static void
 _M_destroy(_Any_data& __victim, true_type)
 {
   __victim._M_access<_Functor>().~_Functor();
 }


 static void
 _M_destroy(_Any_data& __victim, false_type)
 {
   delete __victim._M_access<_Functor*>();
 }

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = _M_get_pointer(__source);
       break;

     case __clone_functor:
       _M_clone(__dest, __source, _Local_storage());
       break;

     case __destroy_functor:
       _M_destroy(__dest, _Local_storage());
       break;
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f)
 { _M_init_functor(__functor, std::move(__f), _Local_storage()); }

 template<typename _Signature>
   static bool
   _M_not_empty_function(const function<_Signature>& __f)
   { return static_cast<bool>(__f); }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp*& __fp)
   { return __fp; }

 template<typename _Class, typename _Tp>
   static bool
   _M_not_empty_function(_Tp _Class::* const& __mp)
   { return __mp; }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp&)
   { return true; }

      private:
 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 { new (__functor._M_access()) _Functor(std::move(__f)); }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    template<typename _Functor>
      class _Ref_manager : public _Base_manager<_Functor*>
      {
 typedef _Function_base::_Base_manager<_Functor*> _Base;

    public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = *_Base::_M_get_pointer(__source);
       return is_const<_Functor>::value;
       break;

     default:
       _Base::_M_manager(__dest, __source, __op);
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, reference_wrapper<_Functor> __f)
 {

   _Base::_M_init_functor(__functor, &__f.get());
 }
      };

    _Function_base() : _M_manager(0) { }

    ~_Function_base()
    {
      if (_M_manager)
 _M_manager(_M_functor, _M_functor, __destroy_functor);
    }


    bool _M_empty() const { return !_M_manager; }

    typedef bool (*_Manager_type)(_Any_data&, const _Any_data&,
      _Manager_operation);

    _Any_data _M_functor;
    _Manager_type _M_manager;
  };

  template<typename _Signature, typename _Functor>
    class _Function_handler;

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return __callable_functor(**_Base::_M_get_pointer(__functor))(
       std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 __callable_functor(**_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename _Res,
    typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Member _Class::*>
    : public _Function_handler<void(_ArgTypes...), _Member _Class::*>
    {
      typedef _Function_handler<void(_ArgTypes...), _Member _Class::*>
 _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Member _Class::*>
    : public _Function_base::_Base_manager<
   _Simple_type_wrapper< _Member _Class::* > >
    {
      typedef _Member _Class::* _Functor;
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

     public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   _Manager_operation __op)
      {
 switch (__op)
   {

   case __get_type_info:
     __dest._M_access<const type_info*>() = &typeid(_Functor);
     break;

   case __get_functor_ptr:
     __dest._M_access<_Functor*>() =
       &_Base::_M_get_pointer(__source)->__value;
     break;

   default:
     _Base::_M_manager(__dest, __source, __op);
   }
 return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };







  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
      private _Function_base
    {
      typedef _Res _Signature_type(_ArgTypes...);

      struct _Useless { };

    public:
      typedef _Res result_type;







      function() : _Function_base() { }





      function(nullptr_t) : _Function_base() { }
# 1909 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function(const function& __x);
# 1918 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function(function&& __x) : _Function_base()
      {
 __x.swap(*this);
      }
# 1941 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      template<typename _Functor>
 function(_Functor __f,
   typename enable_if<
      !is_integral<_Functor>::value, _Useless>::type
     = _Useless());
# 1959 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function&
      operator=(const function& __x)
      {
 function(__x).swap(*this);
 return *this;
      }
# 1977 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function&
      operator=(function&& __x)
      {
 function(std::move(__x)).swap(*this);
 return *this;
      }
# 1991 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function&
      operator=(nullptr_t)
      {
 if (_M_manager)
   {
     _M_manager(_M_functor, _M_functor, __destroy_functor);
     _M_manager = 0;
     _M_invoker = 0;
   }
 return *this;
      }
# 2019 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      template<typename _Functor>
 typename enable_if<!is_integral<_Functor>::value, function&>::type
 operator=(_Functor&& __f)
 {
   function(std::forward<_Functor>(__f)).swap(*this);
   return *this;
 }


      template<typename _Functor>
 typename enable_if<!is_integral<_Functor>::value, function&>::type
 operator=(reference_wrapper<_Functor> __f)
 {
   function(__f).swap(*this);
   return *this;
 }
# 2045 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      void swap(function& __x)
      {
 std::swap(_M_functor, __x._M_functor);
 std::swap(_M_manager, __x._M_manager);
 std::swap(_M_invoker, __x._M_invoker);
      }
# 2073 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      explicit operator bool() const
      { return !_M_empty(); }
# 2086 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      _Res operator()(_ArgTypes... __args) const;
# 2099 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      const type_info& target_type() const;
# 2110 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      template<typename _Functor> _Functor* target();


      template<typename _Functor> const _Functor* target() const;


    private:
      typedef _Res (*_Invoker_type)(const _Any_data&, _ArgTypes...);
      _Invoker_type _M_invoker;
  };


  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 {
   _M_invoker = __x._M_invoker;
   _M_manager = __x._M_manager;
   __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 }
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      function<_Res(_ArgTypes...)>::
      function(_Functor __f,
        typename enable_if<
   !is_integral<_Functor>::value, _Useless>::type)
      : _Function_base()
      {
 typedef _Function_handler<_Signature_type, _Functor> _My_handler;

 if (_My_handler::_M_not_empty_function(__f))
   {
     _M_invoker = &_My_handler::_M_invoke;
     _M_manager = &_My_handler::_M_manager;
     _My_handler::_M_init_functor(_M_functor, std::move(__f));
   }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 __throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }


  template<typename _Res, typename... _ArgTypes>
    const type_info&
    function<_Res(_ArgTypes...)>::
    target_type() const
    {
      if (_M_manager)
 {
   _Any_data __typeinfo_result;
   _M_manager(__typeinfo_result, _M_functor, __get_type_info);
   return *__typeinfo_result._M_access<const type_info*>();
 }
      else
 return typeid(void);
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      _Functor*
      function<_Res(_ArgTypes...)>::
      target()
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     if (_M_manager(__ptr, _M_functor, __get_functor_ptr)
  && !is_const<_Functor>::value)
       return 0;
     else
       return __ptr._M_access<_Functor*>();
   }
 else
   return 0;
      }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      const _Functor*
      function<_Res(_ArgTypes...)>::
      target() const
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     _M_manager(__ptr, _M_functor, __get_functor_ptr);
     return __ptr._M_access<const _Functor*>();
   }
 else
   return 0;
      }
# 2224 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t)
    { return !static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator==(nullptr_t, const function<_Res(_Args...)>& __f)
    { return !static_cast<bool>(__f); }
# 2242 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t)
    { return static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator!=(nullptr_t, const function<_Res(_Args...)>& __f)
    { return static_cast<bool>(__f); }
# 2260 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<typename _Res, typename... _Args>
    inline void
    swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y)
    { __x.swap(__y); }


}
# 69 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator>
    void
    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c)
    {




      if (*__a < *__b)
 {
   if (*__b < *__c)
     std::iter_swap(__a, __b);
   else if (*__a < *__c)
     std::iter_swap(__a, __c);
 }
      else if (*__a < *__c)
 return;
      else if (*__b < *__c)
 std::iter_swap(__a, __c);
      else
 std::iter_swap(__a, __b);
    }


  template<typename _Iterator, typename _Compare>
    void
    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c,
   _Compare __comp)
    {





      if (__comp(*__a, *__b))
 {
   if (__comp(*__b, *__c))
     std::iter_swap(__a, __b);
   else if (__comp(*__a, *__c))
     std::iter_swap(__a, __c);
 }
      else if (__comp(*__a, *__c))
 return;
      else if (__comp(*__b, *__c))
 std::iter_swap(__a, __c);
      else
 std::iter_swap(__a, __b);
    }




  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    __find(_InputIterator __first, _InputIterator __last,
    const _Tp& __val, input_iterator_tag)
    {
      while (__first != __last && !(*__first == __val))
 ++__first;
      return __first;
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !bool(__pred(*__first)))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,
    const _Tp& __val, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (*__first == __val)
     return __first;
   ++__first;
 case 2:
   if (*__first == __val)
     return __first;
   ++__first;
 case 1:
   if (*__first == __val)
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }



  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && bool(__pred(*__first)))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if_not(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 2:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 1:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }
# 326 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        std::forward_iterator_tag)
    {
      __first = std::find(__first, __last, __val);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && *__i == __val)
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::find(++__i, __last, __val);
 }
      return __last;
    }






  template<typename _RandomAccessIter, typename _Integer, typename _Tp>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!(*__lookAhead == __val))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        *__backTrack == __val; --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 411 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::forward_iterator_tag)
    {
      while (__first != __last && !bool(__binary_pred(*__first, __val)))
        ++__first;

      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && bool(__binary_pred(*__i, __val)))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = ++__i;
   while (__first != __last
   && !bool(__binary_pred(*__first, __val)))
     ++__first;
 }
      return __last;
    }







  template<typename _RandomAccessIter, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!bool(__binary_pred(*__lookAhead, __val)))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        __binary_pred(*__backTrack, __val); --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2, __last2);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2,
      __last2, __comp);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1),
             __rlast1,
             _RevIterator2(__last2),
             __rlast2);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }

  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1), __rlast1,
         _RevIterator2(__last2), __rlast2,
         __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 649 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2));
    }
# 695 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __comp);
    }
# 730 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if_not(__first, __last, __pred); }
# 747 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if(__first, __last, __pred); }
# 764 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return !std::none_of(__first, __last, __pred); }
# 779 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
  _Predicate __pred)
    {




                                                     ;
      return std::__find_if_not(__first, __last, __pred,
    std::__iterator_category(__first));
    }
# 803 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    is_partitioned(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      __first = std::find_if_not(__first, __last, __pred);
      return std::none_of(__first, __last, __pred);
    }
# 821 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    partition_point(_ForwardIterator __first, _ForwardIterator __last,
      _Predicate __pred)
    {






                                                     ;

      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__pred(*__middle))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 874 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (!(*__first == __value))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 911 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (!bool(__pred(*__first)))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 950 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }


  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    _OutputIterator
    __copy_n(_InputIterator __first, _Size __n,
      _OutputIterator __result, input_iterator_tag)
    {
      for (; __n > 0; --__n)
 {
   *__result = *__first;
   ++__first;
   ++__result;
 }
      return __result;
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _OutputIterator>
    inline _OutputIterator
    __copy_n(_RandomAccessIterator __first, _Size __n,
      _OutputIterator __result, random_access_iterator_tag)
    { return std::copy(__first, __first + __n, __result); }
# 1008 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    inline _OutputIterator
    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
    {





      return std::__copy_n(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 1036 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator1,
    typename _OutputIterator2, typename _Predicate>
    pair<_OutputIterator1, _OutputIterator2>
    partition_copy(_InputIterator __first, _InputIterator __last,
     _OutputIterator1 __out_true, _OutputIterator2 __out_false,
     _Predicate __pred)
    {
# 1051 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__out_true = *__first;
     ++__out_true;
   }
 else
   {
     *__out_false = *__first;
     ++__out_false;
   }

      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
    }
# 1086 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {





                                                     ;

      __first = std::find(__first, __last, __value);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!(*__first == __value))
          {
            *__result = std::move(*__first);
            ++__result;
          }
      return __result;
    }
# 1129 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      __first = std::find_if(__first, __last, __pred);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!bool(__pred(*__first)))
          {
            *__result = std::move(*__first);
            ++__result;
          }
      return __result;
    }
# 1169 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {





                                                     ;


      __first = std::adjacent_find(__first, __last);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!(*__dest == *__first))
   *++__dest = std::move(*__first);
      return ++__dest;
    }
# 1209 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {






                                                     ;


      __first = std::adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__dest, *__first)))
   *++__dest = std::move(*__first);
      return ++__dest;
    }






  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result,
    forward_iterator_tag, output_iterator_tag)
    {

      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!(*__first == *__next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result,
    input_iterator_tag, output_iterator_tag)
    {

      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!(__value == *__first))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _ForwardIterator>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result,
    input_iterator_tag, forward_iterator_tag)
    {

      *__result = *__first;
      while (++__first != __last)
 if (!(*__result == *__first))
   *++__result = *__first;
      return ++__result;
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {





      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!bool(__binary_pred(*__first, *__next)))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {





      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!bool(__binary_pred(__value, *__first)))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {





      *__result = *__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__result, *__first)))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1437 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {



                                                     ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1464 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {





                                                     ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }


  template<typename _ForwardIterator>
    void
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle || __last == __middle)
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
    }


  template<typename _BidirectionalIterator>
    void
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 std::__reverse(__middle, __last, bidirectional_iterator_tag());
      else
 std::__reverse(__first, __middle, bidirectional_iterator_tag());
    }


  template<typename _RandomAccessIterator>
    void
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return;
 }

      _RandomAccessIterator __p = __first;

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*__p);
    std::move(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = std::move(__t);
    return;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*(__p + __n - 1));
    std::move_backward(__p, __p + __n - 1, __p + __n);
    *__p = std::move(__t);
    return;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
     }
 }
    }
# 1668 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline void
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {



                                                       ;
                                                      ;

      typedef typename iterator_traits<_ForwardIterator>::iterator_category
 _IterType;
      std::__rotate(__first, __middle, __last, _IterType());
    }
# 1702 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {




                                                       ;
                                                      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }




  template<typename _ForwardIterator, typename _Predicate, typename _Distance>
    _ForwardIterator
    __inplace_stable_partition(_ForwardIterator __first,
          _ForwardIterator __last,
          _Predicate __pred, _Distance __len)
    {
      if (__len == 1)
 return __pred(*__first) ? __last : __first;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __begin = std::__inplace_stable_partition(__first,
         __middle,
         __pred,
         __len / 2);
      _ForwardIterator __end = std::__inplace_stable_partition(__middle, __last,
              __pred,
              __len
              - __len / 2);
      std::rotate(__begin, __middle, __end);
      std::advance(__begin, std::distance(__middle, __end));
      return __begin;
    }


  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;
   for (; __first != __last; ++__first)
     if (__pred(*__first))
       {
  *__result1 = std::move(*__first);
  ++__result1;
       }
     else
       {
  *__result2 = std::move(*__first);
  ++__result2;
       }
   std::move(__buffer, __result2, __result1);
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std::advance(__middle, __len / 2);
   _ForwardIterator __begin =
     std::__stable_partition_adaptive(__first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size);
   _ForwardIterator __end =
     std::__stable_partition_adaptive(__middle, __last, __pred,
          __len - __len / 2,
          __buffer, __buffer_size);
   std::rotate(__begin, __middle, __end);
   std::advance(__begin, std::distance(__middle, __end));
   return __begin;
 }
    }
# 1860 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      if (__first == __last)
 return __first;
      else
 {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;
   typedef typename iterator_traits<_ForwardIterator>::difference_type
     _DistanceType;

   _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first,
        __last);
 if (__buf.size() > 0)
   return
     std::__stable_partition_adaptive(__first, __last, __pred,
       _DistanceType(__buf.requested_size()),
       __buf.begin(),
       _DistanceType(__buf.size()));
 else
   return
     std::__inplace_stable_partition(__first, __last, __pred,
      _DistanceType(__buf.requested_size()));
 }
    }


  template<typename _RandomAccessIterator>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last)
    {
      std::make_heap(__first, __middle);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (*__i < *__first)
   std::__pop_heap(__first, __middle, __i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(*__i, *__first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }
# 1942 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 1962 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last);
      while (__first != __last)
 {
   if (*__first < *__result_first)
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first));
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last);
      return __result_real_last;
    }
# 2008 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 2032 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(*__first, *__result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first),
          __comp);
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }


  template<typename _RandomAccessIterator>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__val < *__next)
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, *__next))
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last)
    {
      if (__first == __last)
 return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (*__i < *__first)
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i);
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(*__i, *__first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i, __comp);
 }
    }


  template<typename _RandomAccessIterator>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i, __comp);
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold));
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last);
 }
      else
 std::__insertion_sort(__first, __last);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last, const _Tp& __pivot)
    {
      while (true)
 {
   while (*__first < __pivot)
     ++__first;
   --__last;
   while (__pivot < *__last)
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     const _Tp& __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(*__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, *__last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1));
      return std::__unguarded_partition(__first + 1, __last, *__first);
    }



  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1), __comp);
      return std::__unguarded_partition(__first + 1, __last, *__first, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last);
   std::__introsort_loop(__cut, __last, __depth_limit);
   __last = __cut;
 }
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Size>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last);


       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2392 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;






                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2439 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;




                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__val < *__middle)
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2488 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;






                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2541 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;





                                                                  ;
                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__val < *__middle)
     __len = __half;
   else
     {
       _ForwardIterator __left = std::lower_bound(__first, __middle,
        __val);
       std::advance(__first, __len);
       _ForwardIterator __right = std::upper_bound(++__middle, __first,
         __val);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2603 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;
# 2620 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                    ;

                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       _ForwardIterator __left = std::lower_bound(__first, __middle,
        __val, __comp);
       std::advance(__first, __len);
       _ForwardIterator __right = std::upper_bound(++__middle, __first,
         __val, __comp);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2663 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




                                                                  ;
                                                                  ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val);
      return __i != __last && !(__val < *__i);
    }
# 2696 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

                    ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (*__last2 < *__last1)
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(*__last2, *__last1))
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::move(__middle, __last, __buffer);
       std::move_backward(__first, __middle, __last);
       return std::move(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::move(__first, __middle, __buffer);
       std::move(__middle, __last, __first);
       return std::move_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last,
           *__first_cut);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle,
          *__second_cut);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer, __buffer_size);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last, *__first_cut,
           __comp);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle, *__second_cut,
          __comp);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (*__middle < *__first)
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22);
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (__comp(*__middle, *__first))
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut,
       __comp);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut,
      __comp);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }
# 3120 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;





                                                  ;
                                                 ;

      if (__first == __middle || __middle == __last)
 return;

      _DistanceType __len1 = std::distance(__first, __middle);
      _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1, __len2);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()));
    }
# 3175 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;






                                                               ;
                                                              ;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1,
        __len2, __comp);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()),
         __comp);
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result));


    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result));


    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result,
        _Distance __step_size)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step, __result);
   __first += __two_step;
 }

      __step_size = std::min(_Distance(__last - __first), __step_size);
      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result);
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first,__first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer, __step_size);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle,
          __buffer, __buffer_size);
   std::__stable_sort_adaptive(__middle, __last,
          __buffer, __buffer_size);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer);
   std::__merge_sort_with_buffer(__middle, __last, __buffer);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size);
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle);
      std::__inplace_stable_sort(__middle, __last);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 3513 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;






                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first2 < *__first1)
   return false;
 else if(*__first1 < *__first2)
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3562 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 3581 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first2, *__first1))
   return false;
 else if(__comp(*__first1, *__first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3617 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__i < *__ii)
     {
       _BidirectionalIterator __j = __last;
       while (!(*__i < *--__j))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3674 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__i, *__ii))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*__i, *--__j)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3730 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__ii < *__i)
     {
       _BidirectionalIterator __j = __last;
       while (!(*--__j < *__i))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3787 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__ii, *__i))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*--__j, *__i)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3847 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {






                                                     ;

      for (; __first != __last; ++__first, ++__result)
 if (*__first == __old_value)
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3884 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {






                                                     ;

      for (; __first != __last; ++__first, ++__result)
 if (__pred(*__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3915 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last)
    { return std::is_sorted_until(__first, __last) == __last; }
# 3929 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    { return std::is_sorted_until(__first, __last, __comp) == __last; }
# 3943 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, ++__next)
 if (*__next < *__first)
   return __next;
      return __next;
    }
# 3972 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
      _Compare __comp)
    {





                                                     ;

      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, ++__next)
 if (__comp(*__next, *__first))
   return __next;
      return __next;
    }
# 4001 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _Tp>
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b)
    {



      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
                : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 4020 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
                       : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 4039 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min, __max;
      if (*__next < *__first)
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (*__first < *__min)
  __min = __first;
       else if (!(*__first < *__max))
  __max = __first;
       break;
     }

   if (*__next < *__first)
     {
       if (*__next < *__min)
  __min = __next;
       if (!(*__first < *__max))
  __max = __first;
     }
   else
     {
       if (*__first < *__min)
  __min = __first;
       if (!(*__next < *__max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }
# 4115 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last,
     _Compare __comp)
    {





                                                     ;

      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min, __max;
      if (__comp(*__next, *__first))
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (__comp(*__first, *__min))
  __min = __first;
       else if (!__comp(*__first, *__max))
  __max = __first;
       break;
     }

   if (__comp(*__next, *__first))
     {
       if (__comp(*__next, *__min))
  __min = __next;
       if (!__comp(*__first, *__max))
  __max = __first;
     }
   else
     {
       if (__comp(*__first, *__min))
  __min = __first;
       if (!__comp(*__next, *__max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }


  template<typename _Tp>
    inline _Tp
    min(initializer_list<_Tp> __l)
    { return *std::min_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    inline _Tp
    min(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::min_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    inline _Tp
    max(initializer_list<_Tp> __l)
    { return *std::max_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    inline _Tp
    max(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::max_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end());
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _Tp, typename _Compare>
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l, _Compare __comp)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end(), __comp);
      return std::make_pair(*__p.first, *__p.second);
    }
# 4232 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {


      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!(*__first1 == *__first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::find(__first1, __scan, *__scan))
     continue;

   auto __matches = std::count(__first2, __last2, *__scan);
   if (0 == __matches
       || std::count(__scan, __last1, *__scan) != __matches)
     return false;
 }
      return true;
    }
# 4276 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__pred(*__first1, *__first2)))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   using std::placeholders::_1;

   if (__scan != std::find_if(__first1, __scan,
      std::bind(__pred, _1, *__scan)))
     continue;

   auto __matches = std::count_if(__first2, __last2,
      std::bind(__pred, _1, *__scan));
   if (0 == __matches
       || std::count_if(__scan, __last1,
          std::bind(__pred, _1, *__scan)) != __matches)
     return false;
 }
      return true;
    }
# 4326 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator,
    typename _UniformRandomNumberGenerator>
    void
    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _UniformRandomNumberGenerator&& __g)
    {



                                                     ;

      if (__first == __last)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      typedef typename __distr_type::param_type __p_type;
      __distr_type __d;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    }
# 4371 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {


                                                     ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return std::move(__f);
    }
# 4392 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {




                                                     ;
      return std::__find(__first, __last, __val,
           std::__iterator_category(__first));
    }
# 4416 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {




                                                     ;
      return std::__find_if(__first, __last, __pred,
       std::__iterator_category(__first));
    }
# 4445 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 4484 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 4516 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (*__first == *__next)
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4548 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {





                                                     ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (__binary_pred(*__first, *__next))
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4580 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {




                                                     ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (*__first == __value)
   ++__n;
      return __n;
    }
# 4605 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {




                                                     ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(*__first))
   ++__n;
      return __n;
    }
# 4645 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::find(__first1, __last1, *__first2);


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 = std::find(__first1, __last1, *__first2);
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (*__current == *__p)
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4716 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {






                                                       ;
                                                       ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   return __first1;
 }


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(*__current, *__p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4790 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {




                                                     ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 return std::find(__first, __last, __val);
      return std::__search_n(__first, __last, __count, __val,
        std::__iterator_category(__first));
    }
# 4826 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 {
   while (__first != __last && !bool(__binary_pred(*__first, __val)))
     ++__first;
   return __first;
 }
      return std::__search_n(__first, __last, __count, __val, __binary_pred,
        std::__iterator_category(__first));
    }
# 4868 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {





                                                     ;

      for (; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4904 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {






                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4937 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4969 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 5001 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {




                                                     ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 5032 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {





      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __gen();
      return __first;
    }
# 5069 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {






                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 5108 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result, __binary_pred,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 5140 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {



                                                     ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   std::iter_swap(__i, __first + (std::rand() % ((__i - __first) + 1)));
    }
# 5168 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,

     _RandomNumberGenerator&& __rand)



    {



                                                     ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __rand((__i - __first) + 1));
    }
# 5204 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 5238 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                       ;
                                                      ;

      std::__heap_select(__first, __middle, __last);
      std::sort_heap(__first, __middle);
    }
# 5277 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                       ;
                                                      ;

      std::__heap_select(__first, __middle, __last, __comp);
      std::sort_heap(__first, __middle, __comp);
    }
# 5315 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2);
    }
# 5354 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2, __comp);
    }
# 5392 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                     ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2);
   std::__final_insertion_sort(__first, __last);
 }
    }
# 5428 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                     ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2, __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }
# 5469 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5489 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5532 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5553 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5592 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;





                                                     ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()));
    }
# 5634 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;







                                                     ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 5680 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5701 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first1 < *__first2)
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5747 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5770 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first1, *__first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5814 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5833 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   ++__first1;
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5871 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5892 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   ++__first1;
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5929 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5948 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5990 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6011 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 6048 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6069 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2, std::copy(__first1,
          __last1, __result));
    }
# 6114 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6138 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 6171 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__first < *__result)
   __result = __first;
      return __result;
    }
# 6199 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__first, *__result))
   __result = __first;
      return __result;
    }
# 6227 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__result < *__first)
   __result = __first;
      return __result;
    }
# 6255 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__result, *__first))
   __result = __first;
      return __result;
    }


}
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 2 3
# 28 "firmware/nnet_utils/nnet_helpers.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 1 3
# 58 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 3
# 58 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 1 3
# 68 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 88 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
  enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;
    typedef const _Rb_tree_node_base* _Const_Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Const_Base_ptr
    _S_minimum(_Const_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }

    static _Const_Base_ptr
    _S_maximum(_Const_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;
      _Val _M_value_field;


      template<typename... _Args>
        _Rb_tree_node(_Args&&... __args)
 : _Rb_tree_node_base(),
   _M_value_field(std::forward<_Args>(__args)...) { }

    };

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Link_type __x)
      : _M_node(__x) { }

      reference
      operator*() const
      { return static_cast<_Link_type>(_M_node)->_M_value_field; }

      pointer
      operator->() const
      { return std::__addressof(static_cast<_Link_type>
    (_M_node)->_M_value_field); }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
  };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_const_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Link_type __x)
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it)
      : _M_node(__it._M_node) { }

      iterator
      _M_const_cast() const
      { return iterator(static_cast<typename iterator::_Link_type>
   (const_cast<typename iterator::_Base_ptr>(_M_node))); }

      reference
      operator*() const
      { return static_cast<_Link_type>(_M_node)->_M_value_field; }

      pointer
      operator->() const
      { return std::__addressof(static_cast<_Link_type>
    (_M_node)->_M_value_field); }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node != __y._M_node; }

  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
                                _Rb_tree_node_base* __x,
                                _Rb_tree_node_base* __p,
                                _Rb_tree_node_base& __header) throw ();

  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header) throw ();


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename _Alloc::template rebind<_Rb_tree_node<_Val> >::other
              _Node_allocator;

    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef const _Rb_tree_node_base* _Const_Base_ptr;

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef _Rb_tree_node<_Val>* _Link_type;
      typedef const _Rb_tree_node<_Val>* _Const_Link_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator()
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }

      const _Node_allocator&
      _M_get_Node_allocator() const
      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
      { return _M_impl._Node_allocator::allocate(1); }

      void
      _M_put_node(_Link_type __p)
      { _M_impl._Node_allocator::deallocate(__p, 1); }
# 398 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      template<typename... _Args>
        _Link_type
        _M_create_node(_Args&&... __args)
 {
   _Link_type __tmp = _M_get_node();
   if (true)
     {
       _M_get_Node_allocator().construct(__tmp,
          std::forward<_Args>(__args)...);
     }
   if (false)
     {
       _M_put_node(__tmp);
                              ;
     }
   return __tmp;
 }

      void
      _M_destroy_node(_Link_type __p)
      {
 _M_get_Node_allocator().destroy(__p);
 _M_put_node(__p);
      }


      _Link_type
      _M_clone_node(_Const_Link_type __x)
      {
 _Link_type __tmp = _M_create_node(__x->_M_value_field);
 __tmp->_M_color = __x->_M_color;
 __tmp->_M_left = 0;
 __tmp->_M_right = 0;
 return __tmp;
      }

    protected:
      template<typename _Key_compare,
        bool _Is_pod_comparator = __is_pod(_Key_compare)>
        struct _Rb_tree_impl : public _Node_allocator
        {
   _Key_compare _M_key_compare;
   _Rb_tree_node_base _M_header;
   size_type _M_node_count;

   _Rb_tree_impl()
   : _Node_allocator(), _M_key_compare(), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

   _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
   : _Node_allocator(__a), _M_key_compare(__comp), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

 private:
   void
   _M_initialize()
   {
     this->_M_header._M_color = _S_red;
     this->_M_header._M_parent = 0;
     this->_M_header._M_left = &this->_M_header;
     this->_M_header._M_right = &this->_M_header;
   }
 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root()
      { return this->_M_impl._M_header._M_parent; }

      _Const_Base_ptr
      _M_root() const
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost()
      { return this->_M_impl._M_header._M_left; }

      _Const_Base_ptr
      _M_leftmost() const
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost()
      { return this->_M_impl._M_header._M_right; }

      _Const_Base_ptr
      _M_rightmost() const
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin()
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }

      _Const_Link_type
      _M_begin() const
      {
 return static_cast<_Const_Link_type>
   (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end()
      { return static_cast<_Link_type>(&this->_M_impl._M_header); }

      _Const_Link_type
      _M_end() const
      { return static_cast<_Const_Link_type>(&this->_M_impl._M_header); }

      static const_reference
      _S_value(_Const_Link_type __x)
      { return __x->_M_value_field; }

      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_left); }

      static _Const_Link_type
      _S_left(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_right); }

      static _Const_Link_type
      _S_right(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x)->_M_value_field; }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Base_ptr
      _S_minimum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Const_Base_ptr
      _S_minimum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Base_ptr
      _S_maximum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

      static _Const_Base_ptr
      _S_maximum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type> iterator;
      typedef _Rb_tree_const_iterator<value_type> const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    private:

      template<typename _Arg>
        iterator
        _M_insert_(_Const_Base_ptr __x, _Const_Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
        iterator
        _M_insert_lower(_Base_ptr __x, _Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
        iterator
        _M_insert_equal_lower(_Arg&& __x);
# 592 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      _Link_type
      _M_copy(_Const_Link_type __x, _Link_type __p);

      void
      _M_erase(_Link_type __x);

      iterator
      _M_lower_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

      iterator
      _M_upper_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

    public:

      _Rb_tree() { }

      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, __a) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())
      {
 if (__x._M_root() != 0)
   {
     _M_root() = _M_copy(__x._M_begin(), _M_end());
     _M_leftmost() = _S_minimum(_M_root());
     _M_rightmost() = _S_maximum(_M_root());
     _M_impl._M_node_count = __x._M_impl._M_node_count;
   }
      }


      _Rb_tree(_Rb_tree&& __x);


      ~_Rb_tree()
      { _M_erase(_M_begin()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin()
      {
 return iterator(static_cast<_Link_type>
   (this->_M_impl._M_header._M_left));
      }

      const_iterator
      begin() const
      {
 return const_iterator(static_cast<_Const_Link_type>
         (this->_M_impl._M_header._M_left));
      }

      iterator
      end()
      { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }

      const_iterator
      end() const
      {
 return const_iterator(static_cast<_Const_Link_type>
         (&this->_M_impl._M_header));
      }

      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }

      bool
      empty() const
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const
      { return _M_impl._M_node_count; }

      size_type
      max_size() const
      { return _M_get_Node_allocator().max_size(); }

      void
      swap(_Rb_tree& __t);



      template<typename _Arg>
        pair<iterator, bool>
        _M_insert_unique(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_unique_(const_iterator __position, _Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal_(const_iterator __position, _Arg&& __x);
# 736 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      template<typename _InputIterator>
        void
        _M_insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
        void
        _M_insert_equal(_InputIterator __first, _InputIterator __last);

    private:
      void
      _M_erase_aux(const_iterator __position);

      void
      _M_erase_aux(const_iterator __first, const_iterator __last);

    public:



      iterator
      erase(const_iterator __position)
      {
 const_iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result._M_const_cast();
      }


      iterator
      erase(iterator __position)
      {
 iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result;
      }
# 782 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      size_type
      erase(const key_type& __x);




      iterator
      erase(const_iterator __first, const_iterator __last)
      {
 _M_erase_aux(__first, __last);
 return __last._M_const_cast();
      }
# 803 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      void
      erase(const key_type* __first, const key_type* __last);

      void
      clear()
      {
        _M_erase(_M_begin());
        _M_leftmost() = _M_end();
        _M_root() = 0;
        _M_rightmost() = _M_end();
        _M_impl._M_node_count = 0;
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      lower_bound(const key_type& __k) const
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      iterator
      upper_bound(const key_type& __k)
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      upper_bound(const key_type& __k) const
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;


      bool
      __rb_verify() const;
    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _Rb_tree(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&& __x)
    : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())
    {
      if (__x._M_root() != 0)
 {
   _M_root() = __x._M_root();
   _M_leftmost() = __x._M_leftmost();
   _M_rightmost() = __x._M_rightmost();
   _M_root()->_M_parent = _M_end();

   __x._M_root() = 0;
   __x._M_leftmost() = __x._M_end();
   __x._M_rightmost() = __x._M_end();

   this->_M_impl._M_node_count = __x._M_impl._M_node_count;
   __x._M_impl._M_node_count = 0;
 }
    }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
    {
      if (this != &__x)
 {

   clear();
   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root() != 0)
     {
       _M_root() = _M_copy(__x._M_begin(), _M_end());
       _M_leftmost() = _S_minimum(_M_root());
       _M_rightmost() = _S_maximum(_M_root());
       _M_impl._M_node_count = __x._M_impl._M_node_count;
     }
 }
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_(_Const_Base_ptr __x, _Const_Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_KeyOfValue()(__v),
            _S_key(__p)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z,
        const_cast<_Base_ptr>(__p),
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_lower(_Base_ptr __x, _Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_lower(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__x, __y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
    _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
    _M_copy(_Const_Link_type __x, _Link_type __p)
    {

      _Link_type __top = _M_clone_node(__x);
      __top->_M_parent = __p;

      if (true)
 {
   if (__x->_M_right)
     __top->_M_right = _M_copy(_S_right(__x), __top);
   __p = __top;
   __x = _S_left(__x);

   while (__x != 0)
     {
       _Link_type __y = _M_clone_node(__x);
       __p->_M_left = __y;
       __y->_M_parent = __p;
       if (__x->_M_right)
  __y->_M_right = _M_copy(_S_right(__x), __y);
       __p = __y;
       __x = _S_left(__x);
     }
 }
      if (false)
 {
   _M_erase(__top);
                          ;
 }
      return __top;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {

      while (__x != 0)
 {
   _M_erase(_S_right(__x));
   _Link_type __y = _S_left(__x);
   _M_destroy_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<iterator,
            iterator>(_M_lower_bound(__x, __y, __k),
        _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<iterator, iterator>(iterator(__y),
          iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      _Const_Link_type __x = _M_begin();
      _Const_Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Const_Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<const_iterator,
            const_iterator>(_M_lower_bound(__x, __y, __k),
       _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<const_iterator, const_iterator>(const_iterator(__y),
        const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)
    {
      if (_M_root() == 0)
 {
   if (__t._M_root() != 0)
     {
       _M_root() = __t._M_root();
       _M_leftmost() = __t._M_leftmost();
       _M_rightmost() = __t._M_rightmost();
       _M_root()->_M_parent = _M_end();

       __t._M_root() = 0;
       __t._M_leftmost() = __t._M_end();
       __t._M_rightmost() = __t._M_end();
     }
 }
      else if (__t._M_root() == 0)
 {
   __t._M_root() = _M_root();
   __t._M_leftmost() = _M_leftmost();
   __t._M_rightmost() = _M_rightmost();
   __t._M_root()->_M_parent = __t._M_end();

   _M_root() = 0;
   _M_leftmost() = _M_end();
   _M_rightmost() = _M_end();
 }
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
 }

      std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);



      std::__alloc_swap<_Node_allocator>::
 _S_do_it(_M_get_Node_allocator(), __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(_KeyOfValue()(__v), _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return pair<iterator, bool>
       (_M_insert_(__x, __y, std::forward<_Arg>(__v)), true);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), _KeyOfValue()(__v)))
 return pair<iterator, bool>
   (_M_insert_(__x, __y, std::forward<_Arg>(__v)), true);
      return pair<iterator, bool>(__j, false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(_KeyOfValue()(__v), _S_key(__x)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_(__x, __y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique_(const_iterator __position, _Arg&& __v)



    {

      if (__position._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()),
     _KeyOfValue()(__v)))
     return _M_insert_(0, _M_rightmost(), std::forward<_Arg>(__v));
   else
     return _M_insert_unique(std::forward<_Arg>(__v)).first;
 }
      else if (_M_impl._M_key_compare(_KeyOfValue()(__v),
          _S_key(__position._M_node)))
 {

   const_iterator __before = __position;
   if (__position._M_node == _M_leftmost())
     return _M_insert_(_M_leftmost(), _M_leftmost(),
         std::forward<_Arg>(__v));
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node),
       _KeyOfValue()(__v)))
     {
       if (_S_right(__before._M_node) == 0)
  return _M_insert_(0, __before._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__position._M_node,
      __position._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_unique(std::forward<_Arg>(__v)).first;
 }
      else if (_M_impl._M_key_compare(_S_key(__position._M_node),
          _KeyOfValue()(__v)))
 {

   const_iterator __after = __position;
   if (__position._M_node == _M_rightmost())
     return _M_insert_(0, _M_rightmost(),
         std::forward<_Arg>(__v));
   else if (_M_impl._M_key_compare(_KeyOfValue()(__v),
       _S_key((++__after)._M_node)))
     {
       if (_S_right(__position._M_node) == 0)
  return _M_insert_(0, __position._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__after._M_node, __after._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_unique(std::forward<_Arg>(__v)).first;
 }
      else

 return __position._M_const_cast();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_(const_iterator __position, _Arg&& __v)



    {

      if (__position._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(_KeyOfValue()(__v),
      _S_key(_M_rightmost())))
     return _M_insert_(0, _M_rightmost(),
         std::forward<_Arg>(__v));
   else
     return _M_insert_equal(std::forward<_Arg>(__v));
 }
      else if (!_M_impl._M_key_compare(_S_key(__position._M_node),
           _KeyOfValue()(__v)))
 {

   const_iterator __before = __position;
   if (__position._M_node == _M_leftmost())
     return _M_insert_(_M_leftmost(), _M_leftmost(),
         std::forward<_Arg>(__v));
   else if (!_M_impl._M_key_compare(_KeyOfValue()(__v),
        _S_key((--__before)._M_node)))
     {
       if (_S_right(__before._M_node) == 0)
  return _M_insert_(0, __before._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__position._M_node,
      __position._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_equal(std::forward<_Arg>(__v));
 }
      else
 {

   const_iterator __after = __position;
   if (__position._M_node == _M_rightmost())
     return _M_insert_(0, _M_rightmost(),
         std::forward<_Arg>(__v));
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node),
        _KeyOfValue()(__v)))
     {
       if (_S_right(__position._M_node) == 0)
  return _M_insert_(0, __position._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__after._M_node, __after._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_equal_lower(std::forward<_Arg>(__v));
 }
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_unique(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_equal(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (const_cast<_Base_ptr>(__position._M_node),
     this->_M_impl._M_header));
      _M_destroy_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   erase(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      erase(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
 erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  __attribute__ ((__pure__)) unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
                       const _Rb_tree_node_base* __root) throw ();

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
   _Const_Link_type __L = _S_left(__x);
   _Const_Link_type __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }


}
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 1 3
# 64 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 86 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename _Alloc::template rebind<value_type>::other
        _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

    public:


      typedef typename _Pair_alloc_type::pointer pointer;
      typedef typename _Pair_alloc_type::const_pointer const_pointer;
      typedef typename _Pair_alloc_type::reference reference;
      typedef typename _Pair_alloc_type::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      map()
      : _M_t() { }






      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a) { }
# 172 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map(const map& __x)
      : _M_t(__x._M_t) { }
# 183 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map(map&& __x)
      : _M_t(std::move(__x._M_t)) { }
# 197 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map(initializer_list<value_type> __l,
   const _Compare& __c = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__c, __a)
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }
# 213 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_unique(__first, __last); }
# 229 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, __a)
        { _M_t._M_insert_unique(__first, __last); }
# 252 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map&
      operator=(const map& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 267 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map&
      operator=(map&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 288 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const
      { return _M_t.get_allocator(); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }







      const_iterator
      cbegin() const
      { return _M_t.begin(); }






      const_iterator
      cend() const
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const
      { return _M_t.rend(); }






      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 444 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
          __i = insert(__i, value_type(__k, mapped_type()));
 return (*__i).second;
      }


      mapped_type&
      operator[](key_type&& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
          __i = insert(__i, std::make_pair(std::move(__k), mapped_type()));
 return (*__i).second;
      }
# 481 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 516 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        std::pair<iterator, bool>
        insert(_Pair&& __x)
        { return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }
# 537 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      void
      insert(std::initializer_list<value_type> __list)
      { insert(__list.begin(), __list.end()); }
# 565 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_unique_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_unique_(__position,
     std::forward<_Pair>(__x)); }
# 591 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_unique(__first, __last); }
# 612 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 647 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 666 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 697 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      void
      swap(map& __x)
      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 740 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 755 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 767 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
# 782 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 797 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 836 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 855 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);
    };
# 880 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 897 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 1 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 85 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
  template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename _Alloc::template rebind<value_type>::other
        _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

    public:


      typedef typename _Pair_alloc_type::pointer pointer;
      typedef typename _Pair_alloc_type::const_pointer const_pointer;
      typedef typename _Pair_alloc_type::reference reference;
      typedef typename _Pair_alloc_type::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;






      multimap()
      : _M_t() { }






      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a) { }
# 170 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap(const multimap& __x)
      : _M_t(__x._M_t) { }
# 181 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap(multimap&& __x)
      : _M_t(std::move(__x._M_t)) { }
# 194 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a)
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }
# 210 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_equal(__first, __last); }
# 226 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
        : _M_t(__comp, __a)
        { _M_t._M_insert_equal(__first, __last); }
# 249 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap&
      operator=(const multimap& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 264 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap&
      operator=(multimap&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 285 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const
      { return _M_t.get_allocator(); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }







      const_iterator
      cbegin() const
      { return _M_t.begin(); }






      const_iterator
      cend() const
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const
      { return _M_t.rend(); }




      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 439 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        iterator
        insert(_Pair&& __x)
        { return _M_t._M_insert_equal(std::forward<_Pair>(__x)); }
# 472 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_equal_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_equal_(__position,
           std::forward<_Pair>(__x)); }
# 499 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_equal(__first, __last); }
# 512 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 533 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 568 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 588 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 622 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      void
      swap(multimap& __x)
      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 665 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 680 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }






      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }
# 704 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 719 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 756 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 773 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);
  };
# 798 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 815 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
         multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 2 3
# 29 "firmware/nnet_utils/nnet_helpers.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/hls_stream.h" 1
# 66 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/hls_stream.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_enum.h" 1
# 58 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_enum.h"
enum SsdmDataTypes {
    _ssdm_sc_int = 0,
    _ssdm_c_int = _ssdm_sc_int,
    _ssdm_sc_uint = 1,
    _ssdm_c_uint = _ssdm_sc_uint,
    _ssdm_sc_bigint = 2,
    _ssdm_sc_biguint = 3,
};



enum SsdmPortTypes {
    _ssdm_sc_in = 0,
    _ssdm_sc_out = 1,
    _ssdm_sc_inout = 2,
    _ssdm_sc_in_clk,

    _ssdm_fifo_in,
    _ssdm_sc_fifo_in = _ssdm_fifo_in,
    _ssdm_tlm_fifo_in = _ssdm_fifo_in,
    _ssdm_fifo_out,
    _ssdm_sc_fifo_out = _ssdm_fifo_out,
    _ssdm_tlm_fifo_out = _ssdm_fifo_out,
    _ssdm_fifo_inout,
    _ssdm_sc_fifo_inout = _ssdm_fifo_inout,
    _ssdm_tlm_fifo_inout = _ssdm_fifo_inout,
    _ssdm_sc_bus,
    _ssdm_hls_bus_port = _ssdm_sc_bus,
    _ssdm_AXI4M_bus_port = _ssdm_sc_bus,
    _ssdm_port_end,
};



enum SsdmProcessTypes {
    _ssdm_method = 0,
    _ssdm_sc_method = _ssdm_method,
    _ssdm_thread = 1,
    _ssdm_sc_thread = _ssdm_thread,
    _ssdm_cthread = 2,
    _ssdm_sc_cthread = _ssdm_cthread,
    _ssdm_process_end,
};



enum SsdmSensitiveTypes {
    _ssdm_sensitive = 0,
    _ssdm_sensitive_pos,
    _ssdm_sensitive_neg,
    _ssdm_sensitive_reset0,
    _ssdm_sensitive_reset1,
    _ssdm_sensitive_end,
};



enum SsdmChannelTypes {
    _ssdm_sc_sig,
    _ssdm_fifo,
    _ssdm_sc_fifo = _ssdm_fifo,
    _ssdm_mem_fifo,
    _ssdm_sc_mem_fifo = _ssdm_mem_fifo,
};


enum SsdmRegionTypes {
    _ssdm_region_reset,
    _ssdm_region_protocol,
    _ssdm_region_pipeline,
    _ssdm_region_parallel,
};
# 67 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/hls_stream.h" 2


namespace hls {
# 78 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/hls_stream.h"
template<typename __STREAM_T__>
class stream
{
  public:

    inline __attribute__((always_inline)) stream() {
    }

    inline __attribute__((always_inline)) stream(const char* name) {
    }


  private:
    inline __attribute__((always_inline)) stream(const stream< __STREAM_T__ >& chn):V(chn.V) {
    }

    inline __attribute__((always_inline)) stream& operator= (const stream< __STREAM_T__ >& chn) {
        V = chn.V;
        return *this;
    }

  public:

    inline __attribute__((always_inline)) void operator >> (__STREAM_T__& rdata) {
        read(rdata);
    }

    inline __attribute__((always_inline)) void operator << (const __STREAM_T__& wdata) {
        write(wdata);
    }


  public:


    inline __attribute__((always_inline)) bool empty() const {
        bool tmp = _ssdm_StreamCanRead(&V);
        return !tmp;
    }

    inline __attribute__((always_inline)) bool full() const {
        bool tmp = _ssdm_StreamCanWrite(&V);
        return !tmp;
    }



    inline __attribute__((always_inline)) void read(__STREAM_T__& dout) {

        __STREAM_T__ tmp;
        _ssdm_StreamRead(&V, &tmp);
        dout = tmp;



    }

    inline __attribute__((always_inline)) __STREAM_T__ read() {

        __STREAM_T__ tmp;
        _ssdm_StreamRead(&V, &tmp);
        return tmp;





    }



    inline __attribute__((always_inline)) bool read_nb(__STREAM_T__& dout) {
        __STREAM_T__ tmp;
        bool empty_n = _ssdm_StreamNbRead(&V, &tmp);
        dout = tmp;
        return empty_n;
    }



    inline __attribute__((always_inline)) void write(const __STREAM_T__& din) {

        __STREAM_T__ tmp = din;
        _ssdm_StreamWrite(&V, &tmp);



    }



    inline __attribute__((always_inline)) bool write_nb(const __STREAM_T__& din) {
        __STREAM_T__ tmp = din;
        bool full_n = _ssdm_StreamNbWrite(&V, &tmp);
        return full_n;
    }


    inline __attribute__((always_inline)) unsigned size() {
        unsigned size = _ssdm_StreamSize(&V);
        return size;
    }


  public:
    __STREAM_T__ V;
};


}
# 30 "firmware/nnet_utils/nnet_helpers.h" 2

namespace nnet {
# 166 "firmware/nnet_utils/nnet_helpers.h"
template <class dataType, unsigned int nrows>
int read_file_1D(const char * filename, dataType data[nrows])
{
  FILE *fp;
  fp = fopen(filename, "r");
  if (fp == 0) {
    return -1;
  }

  float newval;
  for (int ii = 0; ii < nrows; ii++){
    if (fscanf(fp, "%f\n", &newval) != 0){
      data[ii] = newval;
    } else {
      return -2;
    }
  }
  fclose(fp);
  return 0;
}

template <class dataType, unsigned int nrows, unsigned int ncols>
int read_file_2D(const char * filename, dataType data[nrows][ncols])
{
  FILE *fp;
  fp = fopen(filename, "r");
  if (fp == 0) {
    return -1;
  }

  float newval;
  for (int ii = 0; ii < nrows; ii++) {
    for (int jj = 0; jj < ncols; jj++){
      if (fscanf(fp, "%f\n", &newval) != 0){
        data[ii][jj] = newval;
      } else {
        return -2;
      }
    }
  }
  fclose(fp);
  return 0;
}

template<class in_T, class out_T, int N_IN>
void change_type(hls::stream<in_T> &in, hls::stream<out_T> &out)
{
    in_T datareg;
    hls::stream<out_T> input_trunc;
    for (int ii=0; ii<N_IN; ii++) {
        out << (out_T) in.read();
    }
}

template<class data_T, int N_IN>
void hls_stream_debug(hls::stream<data_T> &data, hls::stream<data_T> &res)
{
    data_T datareg;
    for (int ii=0; ii<N_IN; ii++) {
        datareg = data.read();
        std::cout << "[" << ii << "]: " << datareg << std::endl;
        res << datareg;
    }
}

constexpr int ceillog2(int x){
  return (x <= 2) ? 1 : 1 + ceillog2((x+1) / 2);
}

constexpr int floorlog2(int x){
  return (x < 2) ? 0 : 1 + floorlog2(x / 2);
}

constexpr int pow2(int x){
  return x == 0 ? 1 : 2 * pow2(x - 1);
}

}
# 8 "firmware/parameters.h" 2

# 1 "firmware/nnet_utils/nnet_activation.h" 1
# 23 "firmware/nnet_utils/nnet_activation.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 24 "firmware/nnet_utils/nnet_activation.h" 2

# 1 "firmware/nnet_utils/nnet_common.h" 1
# 29 "firmware/nnet_utils/nnet_common.h"
namespace nnet {


enum io_type {io_parallel = 0, io_serial};


typedef ap_fixed<16,4> weight_t_def;
typedef ap_fixed<16,4> bias_t_def;
typedef ap_fixed<32,10> accum_t_def;

 template<class data_T, int NIN1, int NIN2>
   void merge(
       data_T data1[NIN1],
       data_T data2[NIN2],
       data_T res[NIN1+NIN2])
 {
   for(int ii=0; ii<NIN1; ii++){
     res[ii] = data1[ii];
   }
   for(int ii=0; ii<NIN2; ii++){
     res[NIN1+ii] = data2[ii];
   }
 }
# 61 "firmware/nnet_utils/nnet_common.h"
 template<class T, int N, class Op>
 T reduce(T* x, Op op){
 static constexpr int leftN = pow2(floorlog2(N - 1)) > 0 ? pow2(floorlog2(N - 1)) : 0;
 static constexpr int rightN = N - leftN > 0 ? N - leftN : 0;
 if(N == 1){
  return x[0];
 }else if(N == 2){
  return op(x[0],x[1]);
 }else{
  T left[leftN];
  T right[rightN];
#pragma HLS array_partition variable=left complete
#pragma HLS array_partition variable=right complete
 for(int i = 0; i < leftN; i++){
   left[i] = x[i];
  }
  for(int i = 0; i < rightN; i++){
   right[i] = x[i+leftN];
  }
  return op(reduce<T,leftN,Op>(left, op), reduce<T,rightN,Op>(right, op));
 }
 }

 template<class T>
 class Op_add{
 public:
  T operator()(T a, T b){
   return a + b;
  }
 };

 template<class T>
 class Op_and{
 public:
  T operator()(T a, T b){
   return a && b;
  }
 };

 template<class T>
 class Op_or{
 public:
  T operator()(T a, T b){
   return a || b;
  }
 };

 template<class T>
 class Op_max{
 public:
     T operator()(T a, T b){
        return a >= b ? a : b;
     }
 };

 template<class T>
 class Op_min{
 public:
     T operator()(T a, T b){
        return a <= b ? a : b;
     }
 };

}
# 26 "firmware/nnet_utils/nnet_activation.h" 2

namespace nnet {

struct activ_config
{

    static const unsigned n_in = 10;


    static const unsigned table_size = 1024;


    static const unsigned io_type = io_parallel;
    static const unsigned reuse_factor = 1;


    typedef ap_fixed<18,8> table_t;
};




template<class data_T, class res_T, typename CONFIG_T>
void linear(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        res[ii] = data[ii];
    }
}






template<class data_T, class res_T, typename CONFIG_T>
void relu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{




    data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {



        datareg = data[ii];
        if (datareg > 0) res[ii] = datareg;
        else res[ii] = 0;
    }
}

template<class data_T, class res_T, int MAX_INT, typename CONFIG_T>
void relu_max(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = data[ii];
        if (datareg < 0) res[ii] = 0;
        else if (datareg > MAX_INT) res[ii] = MAX_INT;
        else res[ii] = datareg;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void relu6(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    relu_max<data_T, res_T, 6, CONFIG_T>(data, res);
}

template<class data_T, class res_T, typename CONFIG_T>
void relu1(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    relu_max<data_T, res_T, 1, CONFIG_T>(data, res);
}




inline float sigmoid_fcn_float(float input) {
    return 1.0 / (1 + std::exp(-input));
}

template<typename CONFIG_T, int N_TABLE>
void init_sigmoid_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);

        typename CONFIG_T::table_t real_val = sigmoid_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void sigmoid(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t sigmoid_table[CONFIG_T::table_size];




    if (!initialized) {
        init_sigmoid_table<CONFIG_T, CONFIG_T::table_size>(sigmoid_table);
        initialized = true;
    }

    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }


    int data_round;
    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        data_round = data[ii]*CONFIG_T::table_size/16;
        index = data_round + 8*CONFIG_T::table_size/16;
        if (index < 0) index = 0;
        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
        res[ii] = (res_T) sigmoid_table[index];
    }
}




inline float exp_fcn_float(float input) {
    return std::exp(input);
}

template<class data_T, typename CONFIG_T>
inline float softmax_real_val_from_idx(unsigned i){

    static constexpr int N = ceillog2(CONFIG_T::table_size);
    data_T x(0);
    x(x.width-1, x.width-N) = i;
    return (float) x;
}

template<class data_T, typename CONFIG_T>
inline unsigned softmax_idx_from_real_val(data_T x){

    static constexpr int N = ceillog2(CONFIG_T::table_size);
    ap_uint<N> y = x(x.width-1, x.width-N);
    return (unsigned) y(N-1, 0);
}

template<class data_T, typename CONFIG_T>
void init_exp_table(typename CONFIG_T::exp_table_t table_out[CONFIG_T::table_size]){

    for(unsigned i = 0; i < CONFIG_T::table_size; i++){

        float x = softmax_real_val_from_idx<data_T, CONFIG_T>(i);
        typename CONFIG_T::exp_table_t exp_x = exp_fcn_float(x);
        table_out[i] = exp_x;
    }
}

template<class data_T, typename CONFIG_T>
void init_invert_table(typename CONFIG_T::inv_table_t table_out[CONFIG_T::table_size]){

    for(unsigned i = 0; i < CONFIG_T::table_size; i++){
        float x = softmax_real_val_from_idx<data_T, CONFIG_T>(i);
        typename CONFIG_T::inv_table_t inv_x = 1 / x;
        table_out[i] = inv_x;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]){


    bool initialized = false;
    typename CONFIG_T::exp_table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::inv_table_t invert_table[CONFIG_T::table_size];






    if (!initialized) {

        init_exp_table<data_T, CONFIG_T>(exp_table);

        init_invert_table<typename CONFIG_T::exp_table_t, CONFIG_T>(invert_table);
        initialized = true;
    }



    typename CONFIG_T::exp_table_t exp_res[CONFIG_T::n_in];

    typename CONFIG_T::exp_table_t exp_sum(0);
    for(unsigned i = 0; i < CONFIG_T::n_in; i++){

     unsigned x = softmax_idx_from_real_val<data_T, CONFIG_T>(data[i]);
        exp_res[i] = exp_table[x];
    }



    Op_add<typename CONFIG_T::exp_table_t> op_add;
    exp_sum = reduce<typename CONFIG_T::exp_table_t, CONFIG_T::n_in, Op_add<typename CONFIG_T::exp_table_t>>(exp_res, op_add);

    typename CONFIG_T::inv_table_t inv_exp_sum = invert_table[softmax_idx_from_real_val<typename CONFIG_T::exp_table_t,CONFIG_T>(exp_sum)];
    for(unsigned i = 0; i < CONFIG_T::n_in; i++){

        res[i] = exp_res[i] * inv_exp_sum;
    }
}




template<typename CONFIG_T, int N_TABLE>
void init_tanh_table(typename CONFIG_T::table_t table_out[N_TABLE])
{

    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2*4.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);

        typename CONFIG_T::table_t real_val = tanh(in_val);

        table_out[ii] = real_val;
    }
}


template<class data_T, class res_T, typename CONFIG_T>
void tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t tanh_table[CONFIG_T::table_size];




    if (!initialized) {
        init_tanh_table<CONFIG_T, CONFIG_T::table_size>(tanh_table);
        initialized = true;
    }

    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }


    int data_round;
    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        data_round = data[ii]*CONFIG_T::table_size/8;
        index = data_round + 4*CONFIG_T::table_size/8;

        if (index < 0) index = 0;
        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
        res[ii] = (res_T) tanh_table[index];
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void hard_sigmoid(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;
    data_T slope = (data_T) 0.2;
    data_T shift = (data_T) 0.5;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = slope * data[ii] + shift;
        if (datareg > 1) datareg = 1;
        else if (datareg < 0) datareg = 0;
        res[ii] = datareg;
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void leaky_relu(data_T data[CONFIG_T::n_in], data_T alpha, res_T res[CONFIG_T::n_in])
{
    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = data[ii];
        if (datareg > 0) res[ii] = datareg;
        else res[ii] = alpha * datareg;
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void thresholded_relu(data_T data[CONFIG_T::n_in], data_T theta, res_T res[CONFIG_T::n_in])
{
    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = data[ii];
        if (datareg > theta) res[ii] = datareg;
        else res[ii] = 0;
    }
}




inline float softplus_fcn_float(float input) {
    return std::log(std::exp(input) + 1.);
}

template<typename CONFIG_T, int N_TABLE>
void init_softplus_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);

        typename CONFIG_T::table_t real_val = softplus_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void softplus(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t softplus_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softplus_table<CONFIG_T, CONFIG_T::table_size>(softplus_table);
        initialized = true;
    }

    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }


    int data_round;
    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        data_round = data[ii]*CONFIG_T::table_size/16;
        index = data_round + 8*CONFIG_T::table_size/16;
        if (index < 0) index = 0;
        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
        res[ii] = (res_T) softplus_table[index];
    }
}




inline float softsign_fcn_float(float input) {
    return input / (std::abs(input) + 1.);
}

template<typename CONFIG_T, int N_TABLE>
void init_softsign_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);

        typename CONFIG_T::table_t real_val = softsign_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void softsign(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t softsign_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softsign_table<CONFIG_T, CONFIG_T::table_size>(softsign_table);
        initialized = true;
    }

    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }


    int data_round;
    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        data_round = data[ii]*CONFIG_T::table_size/16;
        index = data_round + 8*CONFIG_T::table_size/16;
        if (index < 0) index = 0;
        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
        res[ii] = (res_T) softsign_table[index];
    }
}




inline float elu_fcn_float(float input) {
    return std::exp(input) - 1.;
}

template<typename CONFIG_T, int N_TABLE>
void init_elu_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = -8.0*ii/float(N_TABLE);

        typename CONFIG_T::table_t real_val = elu_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void elu(data_T data[CONFIG_T::n_in], const res_T alpha, res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t elu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_elu_table<CONFIG_T, CONFIG_T::table_size>(elu_table);
        initialized = true;
    }

    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;

    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = data[ii];
        if (datareg >= 0) {
            res[ii] = datareg;
        } else {
            index = datareg*CONFIG_T::table_size/-8;
            if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
            res[ii] = alpha * elu_table[index];
        }
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void elu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
 elu<data_T, res_T, CONFIG_T>(data, 1.0, res);
}




inline float selu_fcn_float(float input) {
    return 1.0507009873554804934193349852946 * (1.6732632423543772848170429916717 * (std::exp(input) - 1.));
}

template<typename CONFIG_T, int N_TABLE>
void init_selu_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = -8.0*ii/float(N_TABLE);

        typename CONFIG_T::table_t real_val = selu_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void selu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t selu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_selu_table<CONFIG_T, CONFIG_T::table_size>(selu_table);
        initialized = true;
    }

    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;

    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = data[ii];
        if (datareg >= 0) {
            res[ii] = res_T(1.0507009873554804934193349852946) * datareg;
        } else {
            index = datareg*CONFIG_T::table_size/-8;
            if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
            res[ii] = selu_table[index];
        }
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void prelu(data_T data[CONFIG_T::n_in], data_T alpha[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = data[ii];
        if (datareg > 0) res[ii] = datareg;
        else res[ii] = alpha[ii] * datareg;
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void binary_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{

 if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

 data_T datareg;
 res_T cache;
 for (int ii=0; ii<CONFIG_T::n_in; ii++) {

  if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
  datareg = data[ii];
  if( datareg > 0 ) cache = 1;
  else cache = -1;

  res[ii] = (res_T) cache;

 }

}




template<class data_T, class res_T, typename CONFIG_T>
void ternary_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{

 if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

 data_T datareg;
 res_T cache;
 for (int ii=0; ii<CONFIG_T::n_in; ii++) {

  if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
  datareg = 2*data[ii];
  if( datareg > 1 ) cache = 1;
  else if( datareg > -1 && datareg <= 1) cache=0;
  else cache = -1;

  res[ii] = (res_T) cache;

 }

}

}
# 10 "firmware/parameters.h" 2
# 1 "firmware/nnet_utils/nnet_conv2d.h" 1
# 24 "firmware/nnet_utils/nnet_conv2d.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 25 "firmware/nnet_utils/nnet_conv2d.h" 2

namespace nnet {

struct conv2d_config
{

    typedef float bias_t;
    typedef float weight_t;
    typedef float accum_t;


    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_height = 10;
    static const unsigned in_width = 10;
    static const unsigned n_chan = 1;
    static const unsigned filt_height = 1;
    static const unsigned filt_width = 1;
    static const unsigned n_filt = 1;
    static const unsigned stride_height = 1;
    static const unsigned stride_width = 1;
    static const unsigned out_height = 10;
    static const unsigned out_width = 10;
    static const unsigned dilation_height = 1;
    static const unsigned dilation_width = 1;

    static const unsigned reuse_factor = 1;
    static const bool store_weights_in_bram = false;
    static const unsigned n_zeros = 0;
};




template<typename CONFIG_T>
    int compute_multiplier_limit_conv2d(
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt]
)
{
    int n_mult = 0;

    for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            for(int ff = 0; ff < CONFIG_T::n_filt; ff++){
                for(int cc = 0; cc < CONFIG_T::n_chan; cc++){
                    for(int fh = 0; fh < CONFIG_T::filt_height; fh++){
                        for(int fw = 0; fw < CONFIG_T::filt_width; fw++){

                                int index_weight = fh*CONFIG_T::filt_width*CONFIG_T::n_chan*CONFIG_T::n_filt
                                                 + fw*CONFIG_T::n_chan*CONFIG_T::n_filt
                                                 + cc*CONFIG_T::n_filt
                                                  + ff;

                                if ((oh*CONFIG_T::stride_height+fh) < CONFIG_T::pad_top
                                || (oh*CONFIG_T::stride_height+fh) >= (CONFIG_T::pad_top+CONFIG_T::in_height)
                                || (ow*CONFIG_T::stride_width+fw) < CONFIG_T::pad_left
                                || (ow*CONFIG_T::stride_width+fw) >= (CONFIG_T::pad_left+CONFIG_T::in_width)) {

                                    continue;
                                } else {
                                    if (weights[index_weight] > 1e-20 || weights[index_weight] < -1e-20) {
                                          n_mult++;
                                    }
                                }

                        }
                    }
                }
            }
        }
    }

    return ceil( float(n_mult) / float(CONFIG_T::reuse_factor) );

}

template<class data_T, class res_T, typename CONFIG_T>
void conv_2d_latency_cf(
    data_T data[CONFIG_T::in_height*CONFIG_T::in_width*CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_height*CONFIG_T::out_width*CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{

    typename CONFIG_T::accum_t mult[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt * CONFIG_T::n_chan * CONFIG_T::filt_height * CONFIG_T::filt_width];
    typename CONFIG_T::accum_t acc[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt];
# 125 "firmware/nnet_utils/nnet_conv2d.h"
    const int multiplier_limit = compute_multiplier_limit_conv2d<CONFIG_T>(weights);
#pragma HLS ALLOCATION instances=mul limit=multiplier_limit operation


 ConvOutHeight: for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        ConvOutWidth: for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            ConvFilt: for(int ff = 0; ff < CONFIG_T::n_filt; ff++){
                ConvChan: for(int cc = 0; cc < CONFIG_T::n_chan; cc++){
                    ConvFiltHeight: for(int fh = 0; fh < CONFIG_T::filt_height; fh++){
                        ConvFiltWidth: for(int fw = 0; fw < CONFIG_T::filt_width; fw++){

                            int index_mult = oh*CONFIG_T::out_width*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ow*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ff*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + cc*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + fh*CONFIG_T::filt_width
                                           + fw;

                                int index_weight = fh*CONFIG_T::filt_width*CONFIG_T::n_chan*CONFIG_T::n_filt
                                                 + fw*CONFIG_T::n_chan*CONFIG_T::n_filt
                                                 + cc*CONFIG_T::n_filt
                                                 + ff;

                                if ((oh*CONFIG_T::stride_height+fh) < CONFIG_T::pad_top
                                || (oh*CONFIG_T::stride_height+fh) >= (CONFIG_T::pad_top+CONFIG_T::in_height)
                                || (ow*CONFIG_T::stride_width+fw) < CONFIG_T::pad_left
                                || (ow*CONFIG_T::stride_width+fw) >= (CONFIG_T::pad_left+CONFIG_T::in_width)) {
                                    mult[index_mult] = 0;
                                } else {
                                    int index_data = cc*CONFIG_T::in_height*CONFIG_T::in_width
                                                   + (oh*CONFIG_T::stride_height+fh-CONFIG_T::pad_top)*CONFIG_T::in_width
                                                   + (ow*CONFIG_T::stride_width+fw-CONFIG_T::pad_left);
                                    mult[index_mult] = data[index_data] * weights[index_weight];
                                }

                        }
                    }
                  }
            }
        }
    }



    for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {
                acc[oh*CONFIG_T::out_width*CONFIG_T::n_filt + ow*CONFIG_T::n_filt + ff]=biases[ff];
            }
        }
    }



    AccumOutHeight: for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        AccumOutWidth: for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            AccumFilt: for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {

                AccumChan: for(int cc = 0; cc < CONFIG_T::n_chan; cc++){
                    AccumDotHeight: for(int fh = 0; fh < CONFIG_T::filt_height; fh++){
                        AccumDotWidth: for(int fw = 0; fw < CONFIG_T::filt_width; fw++){

                            int index_mult = oh*CONFIG_T::out_width*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ow*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ff*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + cc*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + fh*CONFIG_T::filt_width
                                           + fw;
                            int index_acc = oh*CONFIG_T::out_width*CONFIG_T::n_filt
                                          + ow*CONFIG_T::n_filt
                                          + ff;

                            acc[index_acc] += mult[index_mult];

                        }
                    }
                }
            }
        }
    }


    for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {
        for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
            for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
                int res_index = ff*CONFIG_T::out_height*CONFIG_T::out_width + oh*CONFIG_T::out_width + ow;
                int acc_index = oh*CONFIG_T::out_width*CONFIG_T::n_filt + ow*CONFIG_T::n_filt + ff;
                res[res_index] = acc[acc_index];
            }
        }
    }

}

template<class data_T, class res_T, typename CONFIG_T>
void conv_2d_latency_cl(
    data_T data[CONFIG_T::in_height*CONFIG_T::in_width*CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_height*CONFIG_T::out_width*CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{

    typename CONFIG_T::accum_t mult[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt * CONFIG_T::n_chan * CONFIG_T::filt_height * CONFIG_T::filt_width];
    typename CONFIG_T::accum_t acc[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt];
# 241 "firmware/nnet_utils/nnet_conv2d.h"
    const int multiplier_limit = compute_multiplier_limit_conv2d<CONFIG_T>(weights);
#pragma HLS ALLOCATION instances=mul limit=multiplier_limit operation


 ConvOutHeight: for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        ConvOutWidth: for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            ConvFilt: for(int ff = 0; ff < CONFIG_T::n_filt; ff++){
                ConvChan: for(int cc = 0; cc < CONFIG_T::n_chan; cc++){
                    ConvFiltHeight: for(int fh = 0; fh < CONFIG_T::filt_height; fh++){
                        ConvFiltWidth: for(int fw = 0; fw < CONFIG_T::filt_width; fw++){

                            int index_mult = oh*CONFIG_T::out_width*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ow*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ff*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + cc*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + fh*CONFIG_T::filt_width
                                           + fw;

                                int index_weight = fh*CONFIG_T::filt_width*CONFIG_T::n_chan*CONFIG_T::n_filt
                                                 + fw*CONFIG_T::n_chan*CONFIG_T::n_filt
                                                 + cc*CONFIG_T::n_filt
                                                 + ff;

                                if ((oh*CONFIG_T::stride_height+fh) < CONFIG_T::pad_top
                                || (oh*CONFIG_T::stride_height+fh) >= (CONFIG_T::pad_top+CONFIG_T::in_height)
                                || (ow*CONFIG_T::stride_width+fw) < CONFIG_T::pad_left
                                || (ow*CONFIG_T::stride_width+fw) >= (CONFIG_T::pad_left+CONFIG_T::in_width)) {
                                    mult[index_mult] = 0;
                                } else {
                                    int index_data = (oh*CONFIG_T::stride_height+fh-CONFIG_T::pad_top)*CONFIG_T::in_width*CONFIG_T::n_chan
                                                   + (ow*CONFIG_T::stride_width+fw-CONFIG_T::pad_left)*CONFIG_T::n_chan
                                                   + cc;
                                    mult[index_mult] = data[index_data] * weights[index_weight];
                                }

                        }
                    }
                  }
            }
        }
    }



    for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {
                acc[oh*CONFIG_T::out_width*CONFIG_T::n_filt + ow*CONFIG_T::n_filt + ff]=biases[ff];
            }
        }
    }



    AccumOutHeight: for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        AccumOutWidth: for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            AccumFilt: for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {

                AccumChan: for(int cc = 0; cc < CONFIG_T::n_chan; cc++){
                    AccumDotHeight: for(int fh = 0; fh < CONFIG_T::filt_height; fh++){
                        AccumDotWidth: for(int fw = 0; fw < CONFIG_T::filt_width; fw++){

                            int index_mult = oh*CONFIG_T::out_width*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ow*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ff*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + cc*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + fh*CONFIG_T::filt_width
                                           + fw;
                            int index_acc = oh*CONFIG_T::out_width*CONFIG_T::n_filt
                                          + ow*CONFIG_T::n_filt
                                          + ff;

                            acc[index_acc] += mult[index_mult];

                        }
                    }
                }
            }
        }
    }


    for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
              for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {
                int index = oh*CONFIG_T::out_width*CONFIG_T::n_filt + ow*CONFIG_T::n_filt + ff;
                res[index] = (res_T)(acc[index]);
            }
        }
    }

}


template<class data_T, int N1, int N2, int N3>
void flatten(
    data_T data[N1][N2][N3],
    data_T res[N1*N2*N3]
)
{
    for(int i1=0; i1<N1; i1++){
        for(int i2=0; i2<N2; i2++){
            for(int i3=0; i3<N3; i3++){
                res[i1*N2*N3+i2*N3+i3] = data[i1][i2][i3];
            }
        }
    }
}


template<class data_T, int N1, int N2, int N3>
void unflatten(
    data_T data[N1*N2*N3],
    data_T res[N1][N2][N3]
)
{
    for(int i1=0; i1<N1; i1++){
        for(int i2=0; i2<N2; i2++){
            for(int i3=0; i3<N3; i3++){
                res[i1][i2][i3] = data[i1*N2*N3+i2*N3+i3];
            }
        }
    }
}


}
# 11 "firmware/parameters.h" 2
# 1 "firmware/nnet_utils/nnet_conv2d_large.h" 1





# 1 "firmware/nnet_utils/nnet_dense_large.h" 1
# 24 "firmware/nnet_utils/nnet_dense_large.h"
# 1 "firmware/nnet_utils/nnet_dense.h" 1
# 28 "firmware/nnet_utils/nnet_dense.h"
namespace nnet {

struct dense_config
{

    typedef float bias_t;
    typedef float weight_t;
    typedef float accum_t;


    static const unsigned n_in = 10;
    static const unsigned n_out = 10;


    static const unsigned io_type = io_parallel;
    static const unsigned reuse_factor = 1;
    static const bool store_weights_in_bram = false;
    static const unsigned n_zeros = 0;

};







template<class data_T, class weight_T, class ret_T>
inline typename std::enable_if<std::is_same<data_T, ap_uint<1>>::value
        and std::is_same<weight_T, ap_uint<1>>::value, ap_uint<1>>::type
product(ap_uint<1> a, ap_uint<1> w){

#pragma HLS inline off
 return a == w;
}

template<class data_T, class weight_T, class ret_T>
inline typename std::enable_if<(not std::is_same<data_T, ap_uint<1>>::value)
        and std::is_same<weight_T, ap_uint<1>>::value, ret_T>::type
product(data_T a, ap_uint<1> w){

#pragma HLS inline off
 return w == 0 ? (data_T) -a : a;
}

template<class data_T, class weight_T, class ret_T>
inline typename std::enable_if<(not std::is_same<data_T, ap_uint<2>>::value)
        and std::is_same<weight_T, ap_int<2>>::value, ret_T>::type
product(data_T a, ap_int<2> w){

#pragma HLS inline off
 if (w == 0) return (data_T) 0;
    else if(w == -1) return (data_T) -a;
    else return (data_T) a;
}

template<class data_T, class weight_T, class ret_T>
inline typename std::enable_if<(not std::is_same<data_T, ap_uint<1>>::value)
        and (not std::is_same<weight_T, ap_uint<1>>::value), ret_T>::type
product(data_T a, weight_T w){

#pragma HLS inline off
 return a * w;
}

template<class data_T, class res_T, typename CONFIG_T>
inline typename std::enable_if<std::is_same<data_T, ap_uint<1>>::value
        and std::is_same<typename CONFIG_T::weight_t, ap_uint<1>>::value, ap_int<nnet::ceillog2(CONFIG_T::n_in) + 2>>::type
cast(typename CONFIG_T::accum_t x){
  return (ap_int<nnet::ceillog2(CONFIG_T::n_in) + 2>) (x - CONFIG_T::n_in / 2) * 2;
}

template<class data_T, class res_T, typename CONFIG_T>
inline typename std::enable_if<(not std::is_same<data_T, ap_uint<1>>::value), res_T>::type
cast(typename CONFIG_T::accum_t x){
  return (res_T) x;
}

template<class data_T, class res_T, typename CONFIG_T>
void dense_latency(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out])
{
    data_T cache;
    typename CONFIG_T::accum_t mult[CONFIG_T::n_in*CONFIG_T::n_out];
    typename CONFIG_T::accum_t acc[CONFIG_T::n_out];


#pragma HLS function_instantiate variable=weights,biases

 if (CONFIG_T::io_type == io_parallel){



#pragma HLS PIPELINE II=CONFIG_T::reuse_factor


#pragma HLS ARRAY_PARTITION variable=biases complete
#pragma HLS ARRAY_PARTITION variable=mult complete
#pragma HLS ARRAY_PARTITION variable=acc complete

 int multiplier_limit = ceil(float(CONFIG_T::n_in*CONFIG_T::n_out) / float(CONFIG_T::reuse_factor)) - floor(float(CONFIG_T::n_zeros) / float(CONFIG_T::reuse_factor));
#pragma HLS ALLOCATION instances=product limit=multiplier_limit function

 } else if (CONFIG_T::io_type == io_serial){


        int cycle_factor = CONFIG_T::n_out / CONFIG_T::reuse_factor;
        int reused_cycle = ((CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
        if (cycle_factor != reused_cycle) {
            cycle_factor = CONFIG_T::n_out;
        }






#pragma HLS ARRAY_PARTITION variable=weights cyclic factor=cycle_factor
#pragma HLS ARRAY_PARTITION variable=mult cyclic factor=cycle_factor
#pragma HLS ARRAY_PARTITION variable=acc complete
#pragma HLS DATAFLOW
#pragma HLS STREAM variable=mult depth=1
#pragma HLS STREAM variable=acc depth=1
 if (CONFIG_T::store_weights_in_bram){
#pragma HLS RESOURCE variable=weights core=ROM_2P_BRAM
 }
    }


    Product1: for(int ii = 0; ii < CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        cache = data[ii];
        Product2: for(int jj = 0; jj < CONFIG_T::n_out; jj++) {
            if (CONFIG_T::io_type == io_serial) {
                int multiplier_limit = ceil(float(CONFIG_T::n_out) / float(CONFIG_T::reuse_factor));
#pragma HLS ALLOCATION instances=product limit=multiplier_limit function
 }
        int index = ii*CONFIG_T::n_out+jj;
        mult[index] = product<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::accum_t>(cache, weights[index]);
        }
    }


    ResetAccum: for(int iacc = 0; iacc < CONFIG_T::n_out; iacc++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS UNROLL
 }
        acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];
    }


    Accum1: for(int ii = 0; ii < CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        Accum2: for(int jj = 0; jj < CONFIG_T::n_out; jj++) {
        int index = ii*CONFIG_T::n_out+jj;
        acc[jj] += mult[index];
        }
    }


    Result: for(int ires = 0; ires < CONFIG_T::n_out; ires++){
        if (CONFIG_T::io_type == io_serial){
#pragma HLS UNROLL
 }

        res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

}
# 25 "firmware/nnet_utils/nnet_dense_large.h" 2


# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 28 "firmware/nnet_utils/nnet_dense_large.h" 2

namespace nnet {

template<class data_T, class res_T, typename CONFIG_T>
void dense_large_rf_leq_nin(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = CONFIG_T::reuse_factor;
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in*CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in*CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit/CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    (static_cast <bool> ((multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed") ? void (0) : __assert_fail ("(multiplier_limit % nout == 0 || rufactor >= nin) && \"The current Reuse Factor is not allowed\"", "firmware/nnet_utils/nnet_dense_large.h", 46, __extension__ __PRETTY_FUNCTION__));
    (static_cast <bool> ((multiplier_limit == block_factor) && "This function is correct only for RF <= N_IN") ? void (0) : __assert_fail ("(multiplier_limit == block_factor) && \"This function is correct only for RF <= N_IN\"", "firmware/nnet_utils/nnet_dense_large.h", 47, __extension__ __PRETTY_FUNCTION__));



#pragma HLS ARRAY_RESHAPE variable=weights block factor=block_factor


 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];


    InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {

        acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];
    }

    ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {


        int w_index = ir;
        int in_index = ir;
        int out_index = 0;
        int acc_step = 0;

        MultLoop:
        for (int im = 0; im < block_factor; im++) {


            acc[out_index] += product<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::accum_t>(data[in_index], weights[w_index]);


            w_index += rufactor;

            in_index += rufactor;
            if (in_index >= nin) {
                in_index = ir;
            }

            if (acc_step + 1 >= multscale) {
                acc_step = 0;
                out_index++;
            } else {
                acc_step++;
            }
        }
    }


    Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {

        res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void dense_large_rf_gt_nin_rem0(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = (CONFIG_T::reuse_factor > CONFIG_T::n_in * CONFIG_T::n_out ? CONFIG_T::n_in * CONFIG_T::n_out : CONFIG_T::reuse_factor);
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in*CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in*CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit/CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    (static_cast <bool> ((multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed") ? void (0) : __assert_fail ("(multiplier_limit % nout == 0 || rufactor >= nin) && \"The current Reuse Factor is not allowed\"", "firmware/nnet_utils/nnet_dense_large.h", 118, __extension__ __PRETTY_FUNCTION__));
    (static_cast <bool> ((rufactor > nin && rufactor % nin == 0) && "This function is correct only for RF > N_IN && RF % N_IN == 0") ? void (0) : __assert_fail ("(rufactor > nin && rufactor % nin == 0) && \"This function is correct only for RF > N_IN && RF % N_IN == 0\"", "firmware/nnet_utils/nnet_dense_large.h", 119, __extension__ __PRETTY_FUNCTION__));



#pragma HLS ARRAY_RESHAPE variable=weights block factor=block_factor


 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];


    InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {

        acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];
    }

    int w_index;
    int in_index = 0;
    int out_index;
    int outstep = 0;
    const int outscale = rufactor / nin;

    int outidx[rufactor];
    IndexLoop:
    for (int ir = 0; ir < rufactor; ir++) {
        outidx[ir] = outstep;
        if ((ir + 1) % nin == 0) {
            outstep++;
        }
    }

    ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {


        w_index = ir;
        out_index = outidx[ir] ;

        MultLoop:
        for (int im = 0; im < block_factor; im++) {

            acc[out_index] += product<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::accum_t>(data[in_index], weights[w_index]);

            w_index += rufactor;
            if (w_index >= CONFIG_T::n_in * CONFIG_T::n_out) break;
            out_index += outscale;
        }

        in_index++;
        if (in_index >= nin) {
            in_index = 0;

        }
    }


    Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {

        res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void dense_large_rf_gt_nin(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = CONFIG_T::reuse_factor;
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in*CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in*CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit/CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    (static_cast <bool> ((multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed") ? void (0) : __assert_fail ("(multiplier_limit % nout == 0 || rufactor >= nin) && \"The current Reuse Factor is not allowed\"", "firmware/nnet_utils/nnet_dense_large.h", 197, __extension__ __PRETTY_FUNCTION__));
    (static_cast <bool> ((rufactor > nin) && "This function is correct only for RF > N_IN") ? void (0) : __assert_fail ("(rufactor > nin) && \"This function is correct only for RF > N_IN\"", "firmware/nnet_utils/nnet_dense_large.h", 198, __extension__ __PRETTY_FUNCTION__));



#pragma HLS ARRAY_RESHAPE variable=weights block factor=block_factor


 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];


    InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {

        acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];
    }

    ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {

        typename CONFIG_T::accum_t tmpmult[block_factor];


        MultLoop:
        for (int im = 0; im < block_factor; im++) {

            int w_index = ir + rufactor * im;
            int in_index = w_index % nin;
            if (w_index >= CONFIG_T::n_in*CONFIG_T::n_out) continue;
            tmpmult[im] = product<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::accum_t>(data[in_index], weights[w_index]);
        }

        typename CONFIG_T::accum_t mult[multiplier_limit];


        ResetMult:
        for (int imult = 0; imult < multiplier_limit; imult++) {

            mult[imult] = 0;
        }

        AccumLoop1:
        for (int im = 0; im < block_factor; im++) {

            int w_index = ir + rufactor * im;
            int out_index = w_index / multfactor;
            if (out_index >= multiplier_limit) continue;
            mult[out_index] += tmpmult[im];
        }

        AccumLoop2:
        for (int im = 0; im < multiplier_limit; im++) {



            acc[im] += mult[im];
        }
    }


    Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {

        res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void dense_large(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {



    if (CONFIG_T::reuse_factor <= CONFIG_T::n_in) {
        dense_large_rf_leq_nin<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else if (CONFIG_T::reuse_factor % CONFIG_T::n_in == 0) {
        dense_large_rf_gt_nin_rem0<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        dense_large_rf_gt_nin<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

}
# 7 "firmware/nnet_utils/nnet_conv2d_large.h" 2

namespace nnet {

template<class data_T, typename CONFIG_T>
void im2col_2d(
    data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
    data_T data_col[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::out_height * CONFIG_T::out_width])
{
    const int output_h = (CONFIG_T::in_height + CONFIG_T::pad_top + CONFIG_T::pad_bottom -
        (CONFIG_T::dilation_height * (CONFIG_T::filt_height - 1) + 1)) / CONFIG_T::stride_height + 1;
    const int output_w = (CONFIG_T::in_width + CONFIG_T::pad_left + CONFIG_T::pad_right -
        (CONFIG_T::dilation_width * (CONFIG_T::filt_width - 1) + 1)) / CONFIG_T::stride_width + 1;
    const int channel_size = CONFIG_T::in_height * CONFIG_T::in_width;

    for (int channel = CONFIG_T::n_chan; channel--; data += channel_size) {
        for (int kernel_row = 0; kernel_row < CONFIG_T::filt_height; kernel_row++) {
            for (int kernel_col = 0; kernel_col < CONFIG_T::filt_width; kernel_col++) {
                int input_row = -CONFIG_T::pad_top + kernel_row * CONFIG_T::dilation_height;
                for (int output_rows = output_h; output_rows; output_rows--) {
                    if (input_row < 0 || input_row > CONFIG_T::in_height) {
                        for (int output_cols = output_w; output_cols; output_cols--) {
                            *(data_col++) = 0;
                        }
                    } else {
                        int input_col = -CONFIG_T::pad_left + kernel_col * CONFIG_T::dilation_width;
                        for (int output_col = output_w; output_col; output_col--) {
                            if (input_col >= 0 && input_col < CONFIG_T::in_width) {
                                *(data_col++) = data[input_row * CONFIG_T::in_width + input_col];
                            } else {
                                *(data_col++) = 0;
                            }
                            input_col += CONFIG_T::stride_width;
                        }
                    }
                    input_row += CONFIG_T::stride_height;
                }
            }
        }
    }
}


template<class data_T, class res_T, typename CONFIG_T>
void conv_2d_full(
    data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{
    data_T data_conv[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::out_height * CONFIG_T::out_width];
    data_T data_col[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan];
    res_T res_col[CONFIG_T::n_filt];





    im2col_2d<data_T, CONFIG_T>(data, data_conv);

    for (int i = 0; i < CONFIG_T::out_height * CONFIG_T::out_width; i++) {
        for (int j = 0; j < CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan; j++) {
            data_col[j] = data[j * CONFIG_T::out_height * CONFIG_T::out_width + i];
        }
        dense_large<data_T, res_T, typename CONFIG_T::mult_config>(data_col, res_col, weights, biases);
        for (int j = 0; j < CONFIG_T::n_filt; j++) {

            res[j * CONFIG_T::out_height * CONFIG_T::out_width + i] = res_col[j];
        }
    }
}

template<class data_T, typename CONFIG_T>
void im2col_2d_cf(
    data_T data[CONFIG_T::n_chan * CONFIG_T::in_height * CONFIG_T::in_width],
    data_T data_col[CONFIG_T::n_chan * CONFIG_T::filt_height * CONFIG_T::filt_width],
    const int row,
    const int col)
{
    const int channel_size = CONFIG_T::in_height * CONFIG_T::in_width;
    int index = 0;
    for (int channel = CONFIG_T::n_chan; channel--; data += channel_size) {

        for (int kernel_row = 0; kernel_row < CONFIG_T::filt_height; kernel_row++) {
            int input_row = -CONFIG_T::pad_top + kernel_row * CONFIG_T::dilation_height + row * CONFIG_T::stride_height;
            for (int kernel_col = 0; kernel_col < CONFIG_T::filt_width; kernel_col++) {
                if (input_row < 0 || input_row > CONFIG_T::in_height) {
                    data_col[index++] = 0;
                } else {
                    int input_col = -CONFIG_T::pad_left + kernel_col * CONFIG_T::dilation_width + col * CONFIG_T::stride_width;
                    if (input_col >= 0 && input_col < CONFIG_T::in_width) {

                        data_col[index++] = data[input_row * CONFIG_T::in_width + input_col];
                    } else {

                        data_col[index++] = 0;
                    }
                    input_col += CONFIG_T::stride_width;
                }
            }
            input_row += CONFIG_T::stride_height;
        }
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void conv_2d_large_cf(
    data_T data[CONFIG_T::n_chan * CONFIG_T::in_height * CONFIG_T::in_width],
    res_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{
    const int nin = CONFIG_T::n_chan * CONFIG_T::filt_width;
    const int nout = CONFIG_T::n_filt;
    const int rufactor = CONFIG_T::reuse_factor;
    const int block_factor = ((nin*nout + rufactor - 1) / rufactor);



#pragma HLS ARRAY_RESHAPE variable=weights block factor=block_factor


 data_T data_col[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan];
    res_T res_col[CONFIG_T::n_filt];




    HeightLoop:
    for (int i = 0; i < CONFIG_T::out_height; i++) {
        WidthLoop:
        for (int j = 0; j < CONFIG_T::out_width; j++) {

            im2col_2d_cf<data_T, CONFIG_T>(data, data_col, i, j);
            dense_large<data_T, res_T, typename CONFIG_T::mult_config>(data_col, res_col, weights, biases);
            FiltLoop:
            for (int k = 0; k < CONFIG_T::n_filt; k++) {

                res[k * CONFIG_T::out_height * CONFIG_T::out_width + i * CONFIG_T::out_width + j] = res_col[k];
            }
        }
    }
}

template<class data_T, typename CONFIG_T>
void im2col_2d_cl(
    data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
    data_T data_col[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan],
    const int row,
    const int col)
{
    int index = 0;
    for (int channel = CONFIG_T::n_chan; channel--; data++) {

        for (int kernel_row = 0; kernel_row < CONFIG_T::filt_height; kernel_row++) {
            int input_row = -CONFIG_T::pad_top + kernel_row * CONFIG_T::dilation_height + row * CONFIG_T::stride_height;
            for (int kernel_col = 0; kernel_col < CONFIG_T::filt_width; kernel_col++) {
                if (input_row < 0 || input_row >= CONFIG_T::in_height) {
                    data_col[index++] = 0;
                } else {
                    int input_col = -CONFIG_T::pad_left + kernel_col * CONFIG_T::dilation_width + col * CONFIG_T::stride_width;
                    if (input_col >= 0 && input_col < CONFIG_T::in_width) {

                        data_col[index++] = data[input_row * CONFIG_T::in_width * CONFIG_T::n_chan + input_col * CONFIG_T::n_chan];
                    } else {

                        data_col[index++] = 0;
                    }
                }
            }
        }
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void conv_2d_large_cl(
    data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{
    const int nin = CONFIG_T::n_chan * CONFIG_T::filt_width;
    const int nout = CONFIG_T::n_filt;
    const int rufactor = CONFIG_T::reuse_factor;
    const int block_factor = ((nin*nout + rufactor - 1) / rufactor);






    data_T data_col[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan];
    res_T res_col[CONFIG_T::n_filt];




    HeightLoop:
    for (int i = 0; i < CONFIG_T::out_height; i++) {
        WidthLoop:
        for (int j = 0; j < CONFIG_T::out_width; j++) {

            im2col_2d_cl<data_T, CONFIG_T>(data, data_col, i, j);
            dense_large<data_T, res_T, typename CONFIG_T::mult_config>(data_col, res_col, weights, biases);
            FiltLoop:
            for (int k = 0; k < CONFIG_T::n_filt; k++) {
                res[i * CONFIG_T::out_width * CONFIG_T::n_filt + j * CONFIG_T::n_filt + k] = res_col[k];

            }
        }
    }
}

}
# 12 "firmware/parameters.h" 2

# 1 "firmware/nnet_utils/nnet_dense_compressed.h" 1
# 28 "firmware/nnet_utils/nnet_dense_compressed.h"
namespace nnet {

template<typename CONFIG_T>
void fill_mult(typename CONFIG_T::index_t index,
        typename CONFIG_T::accum_t mult[CONFIG_T::n_out],
        typename CONFIG_T::accum_t weight) {
    for(unsigned k = 0; k < CONFIG_T::n_out; k++) {
#pragma HLS UNROLL
 if (k == index) mult[k] += weight;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void dense_compressed(
        data_T data[CONFIG_T::n_in],
        res_T res[CONFIG_T::n_out],
        typename CONFIG_T::weight_t weights[CONFIG_T::n_nonzeros],
        typename CONFIG_T::bias_t biases[CONFIG_T::n_out])
{

    const int multiplier_limit = ((CONFIG_T::n_nonzeros + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);

    typename CONFIG_T::accum_t acc [CONFIG_T::n_out];
#pragma HLS ARRAY_PARTITION variable=acc complete
#pragma HLS ARRAY_PARTITION variable=biases complete
#pragma HLS ARRAY_RESHAPE variable=weights block factor=multiplier_limit


#pragma HLS data_pack variable=weights struct_level


 InitAccum:
    for(unsigned i = 0; i < CONFIG_T::n_out; i++) {
#pragma HLS UNROLL
 acc[i] = (typename CONFIG_T::accum_t) (biases[i]);
    }


    const int rufactor = CONFIG_T::reuse_factor;
    ReuseLoop:
    for(unsigned ir = 0; ir < rufactor; ir++) {
#pragma HLS PIPELINE II=1 rewind

 typename CONFIG_T::accum_t mult[CONFIG_T::n_out];
#pragma HLS ARRAY_PARTITION variable=mult complete

 ResetMult:
        for(int imult = 0; imult < CONFIG_T::n_out; imult++) {
#pragma HLS UNROLL
 mult[imult] = 0;
        }

        CompressedMultLoop:
        for(unsigned im = 0; im < multiplier_limit; im++) {
#pragma HLS UNROLL
 unsigned w = im * rufactor + ir;
            auto row = weights[w].row_index;
            auto col = weights[w].col_index;
            auto weight_cache = weights[w].weight;
            data_T data_cache = data[row];

            typename CONFIG_T::accum_t prod = product<data_T, decltype(weight_cache), typename CONFIG_T::accum_t>(data_cache, weight_cache);
            fill_mult<CONFIG_T>(col, mult, prod);
        }

        for (int im = 0; im < CONFIG_T::n_out; im++){
            acc[im] += mult[im];
        }
    }


    ResultLoop:
    for(unsigned i = 0; i < CONFIG_T::n_out; i++){
#pragma HLS UNROLL

 res[i] = cast<data_T, res_T, CONFIG_T>(acc[i]);
    }
}

}
# 14 "firmware/parameters.h" 2

# 1 "firmware/nnet_utils/nnet_pooling.h" 1






namespace nnet{


template<typename T, int N>
T max(T x[N]){
  T y = x[0];
  for(int i = 1; i < N; i++){
    y = x[i] > y ? x[i] : y;
  }
  return y;
}

template<int W, int N>
ap_int<W> avg(ap_int<W> (&x)[N]){

  ap_int<W + ceillog2(N)> tmp = 0;
  for(int i = 0; i < N; i++){
    tmp += x[i];
  }
  tmp /= N;

  ap_int<W> y = tmp;
  return tmp;
}

template<int W, int I, int N>
ap_fixed<W, I> avg(ap_fixed<W, I> (&x)[N]){

  ap_fixed<W + ceillog2(N), I + ceillog2(N)> tmp = 0;
  for(int i = 0; i < N; i++){
    tmp += x[i];
  }
  tmp /= N;

  ap_fixed<W, I> y = tmp;
  return y;
}


template<typename T, int N>
T avg(T (&x)[N]){
  T y = 0;
  for(int i = 0; i < N; i++){
    y += x[i];
  }
  y /= N;
  return y;
}


enum Pool_Op { Max, Average };
template<typename T, int N, Pool_Op op>
T pool_op(T (&x)[N]){
 switch(op){
 case Max: return max<T, N>(x);
 case Average: return avg(x);

 }
}

template<typename T, Pool_Op op>
T pad_val(){







  switch(op){
    case Max:{
      T x = 0;
      x[x.width - 1] = 1;
      return x;
      break;}
    case Average: return 0;
  }
}

struct pooling1d_config{

  static const unsigned n_in = 10;
  static const unsigned pool_size = 2;
  static const unsigned n_out = n_in / pool_size;
  static const unsigned pad_left = 0;
  static const unsigned pad_right = 0;

  static const Pool_Op pool_op = Max;
};

template<class data_T, typename CONFIG_T>
void pooling1d(data_T data[CONFIG_T::n_in], data_T res[CONFIG_T::n_out]){
  for(int ii = 0; ii < CONFIG_T::n_out; ii ++){
    data_T pool[CONFIG_T::pool_size];
    for(int jj = 0; jj < CONFIG_T::pool_size; jj++){
      pool[jj] = data[ii * CONFIG_T::pool_size + jj];
    }
    res[ii] = pool_op<data_T, CONFIG_T::pool_size, CONFIG_T::pool_op>(pool);
  }
}

struct pooling2d_config{

  static const unsigned in_height = 10;
  static const unsigned in_width = 10;
  static const unsigned n_filt = 4;
  static const unsigned stride_height = 2;
  static const unsigned stride_width = 2;
  static const unsigned pool_height = 2;
  static const unsigned pool_width = 2;
  static const unsigned out_height = (in_height - pool_height) / stride_height + 1;
  static const unsigned out_width = (in_width - pool_width) / stride_width + 1;

  static const unsigned pad_top = 0;
  static const unsigned pad_bottom = 0;
  static const unsigned pad_left = 0;
  static const unsigned pad_right = 0;

  static const Pool_Op pool_op = Max;

  static const unsigned reuse = 1;
};

template<typename CONFIG_T>
constexpr int pool_op_limit(){
  return (CONFIG_T::out_height * CONFIG_T::out_width) * CONFIG_T::n_filt / CONFIG_T::reuse;
}

template<class data_T, typename CONFIG_T>
void pooling2d_cl(data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_filt],
               data_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt]){


  const int limit = pool_op_limit<CONFIG_T>();
#pragma HLS ALLOCATION instances=pool_op limit=limit function

 unsigned padded_height = CONFIG_T::in_height + CONFIG_T::pad_top + CONFIG_T::pad_bottom;
  unsigned padded_width = CONFIG_T::in_width + CONFIG_T::pad_left + CONFIG_T::pad_right;
  if (CONFIG_T::pad_top == 0 && CONFIG_T::pad_bottom == 0 && CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0) {
    padded_height -= padded_height - (padded_height / CONFIG_T::stride_height * CONFIG_T::stride_height);
    padded_width -= padded_width - (padded_width / CONFIG_T::stride_width * CONFIG_T::stride_width);
  }

  for(int ff = 0; ff < CONFIG_T::n_filt; ff++){

   for(int ii = 0; ii < padded_height; ii += CONFIG_T::stride_height){

    for(int jj = 0; jj < padded_width; jj += CONFIG_T::stride_width){
     data_T pool[CONFIG_T::pool_height * CONFIG_T::pool_width];

        unsigned img_overlap = 0;

     for(int kk = 0; kk < CONFIG_T::stride_height; kk++){

      for(int ll = 0; ll < CONFIG_T::stride_width; ll++){
            if(ii+kk < CONFIG_T::pad_top || ii+kk >= (padded_height - CONFIG_T::pad_bottom) || jj+ll < CONFIG_T::pad_left || jj+ll >= (padded_width - CONFIG_T::pad_right)){

              pool[kk * CONFIG_T::stride_width + ll] = pad_val<data_T, CONFIG_T::pool_op>();
            }else{
         pool[kk * CONFIG_T::stride_width + ll] = data[(ii + kk) * CONFIG_T::in_width * CONFIG_T::n_filt + (jj + ll) * CONFIG_T::n_filt + ff];
              img_overlap++;
            }
      }
     }



     res[(ii/CONFIG_T::stride_height) * CONFIG_T::out_width * CONFIG_T::n_filt + (jj/CONFIG_T::stride_width)* CONFIG_T::n_filt + ff] =
       pool_op<data_T, CONFIG_T::pool_height*CONFIG_T::pool_width, CONFIG_T::pool_op>(pool);

        if(CONFIG_T::pool_op == Average){
          data_T rescale = CONFIG_T::pool_height * CONFIG_T::pool_width / img_overlap;
          res[(ii/CONFIG_T::stride_height) * CONFIG_T::out_width * CONFIG_T::n_filt + (jj/CONFIG_T::stride_width)* CONFIG_T::n_filt + ff] *= rescale;
        }
    }
   }
  }
}

template<class data_T, typename CONFIG_T>
void pooling2d_cf(data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_filt],
               data_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt]){


  const int limit = pool_op_limit<CONFIG_T>();
#pragma HLS ALLOCATION instances=pool_op limit=limit function

 unsigned padded_height = CONFIG_T::in_height + CONFIG_T::pad_top + CONFIG_T::pad_bottom;
  unsigned padded_width = CONFIG_T::in_width + CONFIG_T::pad_left + CONFIG_T::pad_right;
  if (CONFIG_T::pad_top == 0 && CONFIG_T::pad_bottom == 0 && CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0) {
    padded_height -= padded_height - (padded_height / CONFIG_T::stride_height * CONFIG_T::stride_height);
    padded_width -= padded_width - (padded_width / CONFIG_T::stride_width * CONFIG_T::stride_width);
  }

  for(int ff = 0; ff < CONFIG_T::n_filt; ff++){

   for(int ii = 0; ii < padded_height; ii += CONFIG_T::stride_height){

    for(int jj = 0; jj < padded_width; jj += CONFIG_T::stride_width){
     data_T pool[CONFIG_T::pool_height * CONFIG_T::pool_width];

        unsigned img_overlap = 0;

     for(int kk = 0; kk < CONFIG_T::stride_height; kk++){

      for(int ll = 0; ll < CONFIG_T::stride_width; ll++){
            if(ii+kk < CONFIG_T::pad_top || ii+kk >= (padded_height - CONFIG_T::pad_bottom) || jj+ll < CONFIG_T::pad_left || jj+ll >= (padded_width - CONFIG_T::pad_right)){

              pool[kk * CONFIG_T::stride_width + ll] = pad_val<data_T, CONFIG_T::pool_op>();
            }else{
         pool[kk * CONFIG_T::stride_width + ll] = data[(ii + kk) * CONFIG_T::in_width + ff * CONFIG_T::in_width*CONFIG_T::in_height + ll + jj];
              img_overlap++;
            }
      }
     }



     res[(ii/CONFIG_T::stride_height) * CONFIG_T::out_width + (jj/CONFIG_T::stride_width) + ff* CONFIG_T::out_height* CONFIG_T::out_width] =
       pool_op<data_T, CONFIG_T::pool_height*CONFIG_T::pool_width, CONFIG_T::pool_op>(pool);

        if(CONFIG_T::pool_op == Average){
          data_T rescale = CONFIG_T::pool_height * CONFIG_T::pool_width / img_overlap;
          res[(ii/CONFIG_T::stride_height) * CONFIG_T::out_width + (jj/CONFIG_T::stride_width) + ff* CONFIG_T::out_height* CONFIG_T::out_width] *= rescale;
        }
    }
   }
  }
}

}
# 16 "firmware/parameters.h" 2


# 1 "firmware/weights/w3.h" 1
# 12 "firmware/weights/w3.h"
model_default_t w3[128] = {0.0692690015, 0.1678345799, -0.0274070054, 0.0107738525, 0.0883197784, -0.1209157184, 0.1727648079, -0.0538309515, -0.1024980843, -0.0208037794, -0.1276368797, 0.1485739052, 0.1265161633, -0.0642207712, -0.1115282923, 0.0233578235, 0.1542240977, 0.0205238461, -0.1738427728, -0.0166796446, 0.0166962892, -0.1248298064, 0.1977156401, 0.0940996706, 0.0942828953, -0.0473950356, -0.1817857623, 0.1531914771, -0.1473307908, 0.0443667769, -0.1517399251, -0.0705143809, -0.1036412716, -0.0273979604, -0.0152090192, 0.0580664277, 0.0985561907, 0.1245419383, -0.0851322934, -0.0949597582, -0.1084419787, -0.0201323181, 0.0330495089, 0.0396507531, 0.1074540913, -0.0855555981, -0.0959459990, -0.0343699008, 0.0610099137, 0.1266074777, 0.1687377989, -0.1265915632, -0.0860595927, -0.1062367782, -0.1909449399, 0.1600342393, 0.0660273731, -0.0434497446, -0.1589873731, -0.0231105983, 0.2037039995, 0.0540405214, 0.1488416493, 0.1027725637, -0.0851523429, -0.1249352247, 0.1331124306, -0.0391269922, -0.0672026873, -0.0629805326, 0.1614394486, 0.1669938266, 0.1038163304, -0.1526399255, -0.1524728090, 0.0361487716, 0.1935786903, -0.0788883120, -0.1046080887, -0.1144785360, -0.1139623746, -0.0934297219, 0.1930023432, -0.0378439873, 0.1465085149, -0.0586680621, 0.1784616113, -0.1831984222, 0.0332270414, -0.0284539312, -0.1564818919, 0.1734510660, -0.2001981437, -0.0483854562, -0.0660003722, 0.2027331889, 0.2011039853, -0.0320927650, 0.1844275594, -0.0500251949, 0.0786553025, 0.0422485024, -0.0460473448, -0.1277175099, -0.0948983431, 0.0203451812, -0.0249718130, -0.1939448118, -0.1736559421, -0.0555212498, 0.0276640207, -0.1106070280, -0.2004646808, -0.1021037325, -0.1357299387, 0.1562291086, 0.0083434731, 0.0765256286, 0.0691477060, -0.0149906427, -0.1878684461, 0.1939565539, -0.1495480239, 0.0164392292, -0.0493850261, 0.1534563601, 0.1549175978, -0.0016618818};
# 19 "firmware/parameters.h" 2
# 1 "firmware/weights/b3.h" 1
# 12 "firmware/weights/b3.h"
model_default_t b3[8] = {0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000};
# 20 "firmware/parameters.h" 2
# 1 "firmware/weights/w7.h" 1
# 12 "firmware/weights/w7.h"
model_default_t w7[512] = {0.2062711120, 0.0786967278, -0.0367625952, -0.1172171235, -0.0576430559, -0.1919775009, 0.2212558389, 0.2214972973, 0.2351205349, 0.0849211216, -0.0252798796, 0.1369253397, 0.0072176456, 0.0250067711, -0.2244468927, 0.1490698457, 0.2241400480, 0.1885102391, 0.2292526364, 0.0004792213, 0.2072006464, -0.2290676832, -0.0556336045, -0.1867077947, -0.0348520279, -0.1275417209, -0.1196771264, -0.2082149982, -0.1863918900, -0.2088745236, -0.2208533883, -0.1858772039, -0.1466374397, -0.0381171703, 0.0786334872, 0.2007316947, -0.1819471121, -0.1921755075, 0.1540480852, -0.2267223597, -0.0824804902, -0.0475134850, -0.0761643648, 0.0982960463, 0.0063982010, -0.1065922379, 0.2358110547, 0.0744493604, 0.1063994169, 0.1115310192, 0.1872261763, -0.2098792195, 0.1629736423, 0.0591803193, -0.1277534962, -0.1531487703, -0.0877183676, 0.2175544500, 0.2266833782, 0.0696277022, 0.1509492993, 0.1683245301, 0.1803647876, 0.2467792630, 0.2453196049, 0.0275031924, -0.1155440211, -0.0740379691, 0.0348966718, -0.2389014959, 0.1190487146, -0.0447664261, -0.2185886502, 0.1127541661, -0.2262682319, -0.0553052425, -0.2331675887, 0.2211142778, -0.1938479543, 0.1407064199, -0.2025362253, -0.0065464377, 0.1535869837, -0.0576077104, -0.1606070399, 0.1484379172, 0.0323616266, -0.0775552988, 0.1072432995, -0.2479284406, -0.0270425677, 0.0987537503, -0.1051996350, -0.2464880347, 0.1367686391, 0.2168252468, -0.1763180494, 0.0036708713, -0.1241217852, -0.0001787543, 0.1678895950, -0.0111152530, 0.2084408998, 0.1780813932, 0.0541904569, 0.1547154188, 0.0552238822, 0.1610202789, 0.2162650824, -0.0739581585, 0.0288721323, -0.2491219044, -0.0613110065, 0.0983474851, -0.1190840602, 0.1889711022, 0.2425312400, 0.1589822769, -0.1245749593, -0.2353411317, 0.0561330318, 0.0036663413, -0.0775299668, 0.0140816569, -0.1997506022, -0.1665664315, -0.1151223183, 0.1054147482, -0.0927460194, -0.2193618417, 0.1934449077, -0.0970185995, 0.2081702352, -0.0318201184, -0.1014113426, 0.1224069595, 0.0929294229, -0.1189920902, -0.0567812324, -0.0753434896, 0.0152271986, 0.1079038382, 0.1624358892, 0.2261223197, -0.1709657907, -0.0064423680, -0.1043847203, -0.1556797624, 0.1910621524, -0.1378890276, -0.0053455234, -0.1656988859, -0.1658517122, -0.0021357536, 0.0433478355, -0.0947781801, -0.1738203764, -0.1154569983, 0.2182314992, 0.0596745610, -0.1198618412, 0.2050899267, -0.0393322706, 0.1365842223, -0.0737298727, 0.1033542752, 0.1285156608, -0.1328904629, -0.0337862968, 0.0398294330, -0.0760141611, 0.2375391722, 0.2202907801, -0.0089969635, -0.0029541254, 0.2314665914, -0.1137562394, 0.0123956800, -0.1131832600, 0.2222208381, -0.1420959234, 0.1930025220, 0.2338498831, -0.0226965547, -0.2470775247, -0.1349148750, 0.1800292134, 0.0322291255, -0.0318353176, 0.0837411284, 0.0742746592, -0.1361219883, -0.2477989793, -0.2035221457, 0.2378171086, -0.1518808603, 0.2040818930, -0.0476379395, -0.0337995291, -0.1162041426, 0.2232939005, -0.1865484118, 0.0841724873, 0.1748032570, -0.0547559261, -0.0638145804, 0.1023373604, -0.0608047247, -0.2062559128, -0.0208121538, -0.0035097599, 0.0842209458, -0.2303191423, -0.0551705956, 0.1858180165, 0.1950002909, 0.0417245030, -0.1410633326, 0.1802874804, 0.2228871584, -0.2020664811, 0.2495709062, -0.0635251403, 0.0025356412, 0.1615096331, 0.1624811292, 0.2229664922, 0.0113304257, 0.0975372195, 0.0004500151, -0.1683979630, -0.0609077811, -0.1499603391, -0.1254375577, 0.1137436032, -0.0744165182, 0.1653028727, 0.0235278010, -0.0368900895, -0.1149523258, 0.2177692652, -0.1533596516, 0.1236737370, 0.2105392814, -0.1262404919, -0.0460343361, -0.1330872774, -0.0883671641, 0.0344754457, -0.2393672466, -0.0356148481, -0.0822917223, -0.1974529028, 0.1183876395, 0.0026898980, -0.1288246512, 0.2244074345, 0.1059118509, -0.2050799727, -0.0713788867, 0.0312876105, 0.1595233083, -0.1585810184, -0.1245078444, 0.0860618949, 0.1357488036, 0.2218411565, 0.2070710659, -0.0811282396, -0.2235026956, -0.0886482000, 0.2019259334, 0.0800331831, -0.1664959192, 0.2192627788, -0.1216399670, 0.0024943948, -0.0954434276, -0.0415469408, 0.2377943993, 0.0477803349, -0.0167005062, 0.0766248107, 0.2005155683, 0.0411157012, -0.0100952387, 0.0387418270, 0.0798247457, 0.0963034034, -0.1717621088, 0.2032632232, 0.0546855330, -0.2101787925, 0.2338463664, 0.0806176066, 0.0919403434, 0.1341587305, -0.0069550872, 0.0979452729, 0.0698591471, -0.0733810663, -0.0357995033, -0.1979783773, -0.1288628578, -0.1920163631, -0.0184118152, 0.0483654737, 0.2107502222, -0.1129888296, -0.0957379937, -0.1144657135, 0.2266858816, -0.0830150247, -0.0994321704, -0.1043671966, 0.2353371978, -0.1612263918, -0.0974918008, 0.0389063358, 0.1880122423, 0.0847848654, 0.0985867381, 0.0520889163, 0.0064185262, -0.0245515704, -0.1258850098, -0.2081971765, -0.2168903947, -0.1452845931, 0.0021346211, -0.2300254703, -0.0868343711, 0.0511374474, -0.2214643359, -0.1135600209, 0.2384238839, 0.2284026742, -0.2316107750, 0.0921485424, 0.0653414726, 0.2152019739, 0.0729072690, -0.0269962549, -0.0080522299, 0.1499742270, -0.0619914532, -0.2476235032, 0.0511272550, -0.0960088372, 0.0132758617, -0.1909574270, 0.0454797745, -0.2421845794, -0.1014363766, -0.1818389893, -0.1832385659, 0.1958390474, 0.1529377103, -0.0516138077, -0.2291772962, -0.0076866150, 0.1040410399, -0.1783969402, 0.0290933847, 0.2358371615, 0.2428660989, -0.2232874632, 0.1970355511, 0.1778885722, 0.1972299218, 0.0556275845, -0.2448791862, -0.1518315673, -0.1383263469, 0.1089996696, -0.1646299958, -0.1456633210, 0.1311720014, 0.0917015076, 0.1894617081, 0.1191630363, 0.1104825139, 0.1966600418, -0.1689327955, 0.0155827999, 0.0146231055, 0.1508802176, -0.1782240868, -0.0302950144, -0.0908556581, -0.1901053786, -0.1348800659, 0.0278357267, 0.0369656086, 0.1902506351, 0.1016768813, 0.1960504651, -0.1219192147, -0.1574200988, 0.0528691411, -0.1997734308, 0.1192875504, 0.0718372464, -0.0804694295, 0.0733549595, 0.2067252994, 0.0865796208, 0.2124659419, -0.1592460871, 0.0227907300, 0.1304246187, -0.1555157304, 0.1666185856, 0.1226305962, 0.1104595661, 0.0834063888, 0.1401695013, 0.2072657347, 0.0944755673, 0.1358332634, 0.1682774425, 0.1377041936, -0.1758794785, -0.1798910499, 0.2382977009, -0.1457602382, 0.1325165629, 0.1815468073, -0.2089698911, 0.2033490539, -0.1664994955, 0.1080828905, -0.2382459044, -0.0844711065, 0.1580100656, 0.1006072760, 0.0104064941, 0.2226570249, -0.2415292859, 0.2286955714, 0.1507663727, -0.2051874399, 0.1658801436, 0.0632322431, 0.2102504373, 0.1345428228, 0.1103984714, -0.1984733343, -0.1305767894, -0.0668502450, -0.0619711280, -0.1556141973, -0.2174990773, 0.1456658840, -0.1244581938, 0.2306155562, 0.1925449371, -0.0932129025, 0.2082408667, 0.0953957438, 0.2494628429, 0.2040054798, -0.0947178006, -0.0837376118, -0.2284055352, 0.1002118587, -0.2085120082, -0.0290661454, -0.1259044409, -0.2044594288, -0.1728652120, 0.1332458258, 0.0333719850, 0.2084979415, -0.1401903629, 0.2236472964, -0.0130230784, 0.1901278496, 0.0278109312, 0.0340261459, 0.1981890798, 0.2388178706, 0.0662869811, -0.1732873917, 0.2075900435, 0.0951457024, 0.1788056493, 0.0814882517, 0.2410176992, -0.1731852293, 0.1420332789, -0.1821719408, 0.1460089684, 0.2017930746, -0.1195685267, 0.0137320161, -0.0645617247, 0.2289268374, -0.0448996425, -0.1684156060, 0.1626621485, 0.0827904344, 0.1892608404, 0.0766364336, 0.0694429278, -0.1638821959, -0.1200732589, 0.1452049017, 0.2273166776, -0.1981223226, 0.0739777088, -0.2427236438};
# 21 "firmware/parameters.h" 2
# 1 "firmware/weights/b7.h" 1
# 12 "firmware/weights/b7.h"
model_default_t b7[16] = {0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000};
# 22 "firmware/parameters.h" 2
# 1 "firmware/weights/w11.h" 1
# 12 "firmware/weights/w11.h"
model_default_t w11[69120] = {0.0525747985, -0.0285196230, 0.0190686584, -0.0680398047, 0.0072833374, -0.0654982477, -0.0437826440, 0.0504450426, -0.0546166226, -0.0611741655, 0.0210756287, 0.0386494845, 0.0139035955, -0.0543652549, -0.0601418316, -0.0087443665, -0.0688102543, -0.0448886007, -0.0339336097, 0.0202874243, 0.0638028979, 0.0343899727, -0.0439824313, 0.0657109320, -0.0243086554, 0.0413403064, 0.0346500352, 0.0563102067, -0.0001065433, -0.0429166332, -0.0554518551, 0.0306990519, -0.0436658487, -0.0141835809, 0.0714793950, 0.0391846225, 0.0132637471, -0.0298427269, -0.0545140207, 0.0675751269, 0.0166142583, 0.0348462239, 0.0292888731, -0.0231909640, 0.0133590698, 0.0524821579, -0.0321322419, -0.0040078983, -0.0206332877, -0.0404546224, 0.0572252125, 0.0292380899, 0.0096315444, -0.0348758139, -0.0208635591, 0.0000762790, -0.0632846132, 0.0576102734, -0.0368284285, -0.0343603641, -0.0573920980, 0.0666907132, -0.0454630554, 0.0245990306, 0.0463652909, 0.0645776838, 0.0155392364, 0.0183908641, -0.0051044300, -0.0471217483, -0.0352996774, -0.0278080553, -0.0709987283, 0.0409404114, -0.0583289526, 0.0250120535, -0.0355993956, -0.0356898159, -0.0024686828, -0.0523966253, 0.0097854361, -0.0271994136, 0.0159890428, -0.0395999141, 0.0213796496, 0.0546134263, 0.0599046052, -0.0171147548, 0.0407936573, -0.0560467839, -0.0432012603, 0.0509973168, -0.0561171919, -0.0568086989, -0.0619347543, -0.0092198849, 0.0269467533, 0.0236938223, 0.0022407547, -0.0634139180, 0.0306608900, -0.0517597981, -0.0280207433, -0.0719581619, -0.0517843366, 0.0357638523, -0.0320778675, -0.0396330170, -0.0654240400, 0.0025137514, -0.0163403116, -0.0380566046, 0.0712895244, -0.0216604061, 0.0092627406, -0.0041321293, -0.0167898275, -0.0464714020, -0.0269745253, -0.0034039542, -0.0692347139, 0.0291701630, -0.0191993080, -0.0385676660, -0.0375387929, 0.0599584132, 0.0518647358, 0.0065662637, -0.0332090668, 0.0100506395, 0.0515547991, -0.0542859174, -0.0383546352, 0.0608417988, -0.0346321538, -0.0001296327, 0.0589099526, 0.0698259920, -0.0059126467, 0.0196765587, -0.0410930291, 0.0408722386, 0.0239196196, -0.0458267108, -0.0428665578, 0.0397368744, 0.0394573435, -0.0466905385, -0.0555056781, -0.0214154907, -0.0109863244, -0.0019412562, -0.0002594367, -0.0168779604, 0.0644840747, -0.0089448243, -0.0152599923, 0.0275591314, -0.0606867746, 0.0439837724, -0.0265662521, -0.0075172111, 0.0349660292, -0.0437337980, 0.0009335652, 0.0618441999, 0.0457557663, -0.0438853353, 0.0656948686, 0.0442925021, 0.0422894210, 0.0581904054, 0.0630317926, 0.0572077781, -0.0656052902, -0.0258783922, -0.0113875084, 0.0278623924, -0.0534294173, -0.0519151017, -0.0348270535, -0.0004350618, -0.0469967276, 0.0526338294, 0.0001929030, 0.0120336041, -0.0057711378, 0.0608744770, 0.0239444301, -0.0419715717, -0.0201964527, -0.0594600476, 0.0100634247, -0.0449589416, 0.0500712693, 0.0568024516, -0.0530904531, 0.0679812431, 0.0146088153, -0.0331378318, 0.0062090605, -0.0556165203, -0.0614132807, -0.0022054240, 0.0707381815, 0.0273497626, 0.0507955179, -0.0202181302, -0.0510700792, -0.0364548974, -0.0376041457, -0.0391372666, -0.0481116995, 0.0672779530, -0.0716779158, -0.0184953101, 0.0165686756, -0.0102107972, 0.0719859749, -0.0058760792, -0.0395781286, -0.0176640339, 0.0465738103, -0.0155802369, 0.0100541711, -0.0571204126, -0.0610160902, 0.0292029381, -0.0357902497, 0.0664891452, -0.0710693821, 0.0024357215, -0.0100287385, 0.0713157803, 0.0050295964, 0.0165117756, 0.0544914454, -0.0395160504, 0.0537343919, -0.0297323801, 0.0266237706, -0.0597776771, -0.0195540525, -0.0288217328, -0.0015021190, -0.0437937267, -0.0014908314, 0.0507566333, 0.0211602002, -0.0282318294, 0.0612770915, -0.0251402035, 0.0121950060, -0.0473061502, 0.0146572366, 0.0718737394, 0.0462267399, 0.0200008005, 0.0628424138, -0.0108167380, 0.0322963074, 0.0483315960, 0.0089406595, 0.0593670160, -0.0300431624, 0.0067723766, -0.0656312555, -0.0218214393, -0.0100055076, 0.0346249118, -0.0312261544, -0.0517385453, 0.0320523381, 0.0443382934, 0.0248576775, -0.0262731947, -0.0051814616, 0.0324341580, 0.0094739497, 0.0005927607, 0.0684300810, 0.0429316387, 0.0590360612, 0.0292978659, -0.0668064356, -0.0383899957, -0.0112131722, -0.0673839822, -0.0707853213, 0.0651639253, -0.0383663885, 0.0457947105, 0.0197069272, -0.0207535587, -0.0313092954, 0.0175992548, -0.0393481329, 0.0238773078, 0.0230001435, -0.0498483405, -0.0139390416, 0.0272017196, -0.0178243108, -0.0120619647, -0.0175538771, -0.0133403651, 0.0137100592, -0.0267707519, -0.0335116424, 0.0509296954, -0.0454770960, 0.0596249402, -0.0199622400, -0.0128184259, 0.0104945004, 0.0207165107, 0.0121262148, -0.0025030151, -0.0146218427, -0.0617106594, -0.0311824307, -0.0145407319, 0.0296220705, 0.0075243339, -0.0224024653, -0.0534966439, -0.0065971687, 0.0138738155, -0.0618197843, -0.0427326262, -0.0526752807, -0.0257476233, -0.0009763390, -0.0378231294, -0.0218637995, -0.0146365389, 0.0046451390, -0.0156897567, 0.0010452867, -0.0049764290, 0.0488694161, -0.0230223909, -0.0492882729, -0.0535509661, 0.0701299310, 0.0277871117, -0.0255011246, 0.0668635368, 0.0038129687, -0.0004124045, -0.0414920971, 0.0161987394, 0.0082780570, 0.0469482243, 0.0524177328, 0.0630334169, -0.0342465080, 0.0580421090, 0.0704221129, 0.0511675701, -0.0507367589, -0.0004737228, -0.0573310852, -0.0515969396, -0.0285976715, 0.0655153990, 0.0264419541, -0.0071254894, -0.0367051475, 0.0263632163, 0.0311961994, 0.0430696830, 0.0022470132, 0.0321925133, 0.0317167938, -0.0088789016, 0.0598405153, 0.0238420218, -0.0001441389, 0.0386347175, -0.0214075409, -0.0573818088, 0.0395130888, 0.0387659371, -0.0269471668, -0.0381669812, 0.0451347083, 0.0245142356, 0.0673176795, 0.0645453483, 0.0152175799, 0.0354066491, 0.0166390017, 0.0199869275, -0.0516160056, -0.0679711848, -0.0010425672, -0.0346541442, -0.0440770984, -0.0308106542, -0.0228126459, -0.0370641053, -0.0250300691, -0.0576490089, 0.0093092695, 0.0144693628, 0.0549181104, -0.0071752667, 0.0500419810, 0.0318162143, 0.0668359101, -0.0553679243, -0.0247635767, -0.0693236738, 0.0064350665, 0.0293762088, 0.0043086335, -0.0078138262, -0.0054387972, 0.0436351895, 0.0542863458, -0.0054047629, -0.0519953705, -0.0565022007, -0.0232350789, -0.0534228459, -0.0599642284, -0.0245905817, 0.0050582588, 0.0684972703, 0.0363432243, -0.0400704890, -0.0507268980, 0.0713389665, 0.0567857176, 0.0568823069, -0.0433502644, -0.0496715978, 0.0717188120, 0.0118548647, -0.0441736095, -0.0706825331, 0.0560017079, -0.0603407733, 0.0359009877, 0.0508068427, 0.0182319134, 0.0708921552, -0.0167075992, 0.0500221252, 0.0122316033, 0.0085121840, -0.0326836370, 0.0230507478, -0.0132407397, 0.0235786065, 0.0200357437, 0.0148188025, -0.0643273741, 0.0582665205, -0.0686828718, 0.0359841436, 0.0529293865, -0.0322983861, -0.0146844722, -0.0684341714, 0.0313560292, -0.0539551079, -0.0178660005, 0.0085456148, 0.0008782819, -0.0027268827, -0.0157470889, 0.0356232747, 0.0189559609, 0.0056341290, -0.0284952931, 0.0160857588, 0.0190748349, -0.0259032920, 0.0231661499, 0.0689700544, -0.0246363841, 0.0369428545, 0.0179836601, 0.0345521644, 0.0274083316, -0.0369139276, -0.0695333481, -0.0412323996, 0.0643593222, -0.0442865677, 0.0012851581, -0.0073099434, 0.0373170227, -0.0452502966, 0.0278951675, -0.0151456222, 0.0137740672, -0.0263394713, 0.0016780719, -0.0121788830, -0.0130625144, -0.0440906063, -0.0543857515, 0.0350957140, -0.0287976116, -0.0132356100, 0.0162780806, 0.0184756219, 0.0260119662, -0.0019425452, 0.0577592850, 0.0557157397, -0.0138481073, 0.0345262811, 0.0089231580, -0.0500679463, 0.0278774649, 0.0355000645, 0.0685410053, 0.0403647870, 0.0549091101, -0.0704778060, -0.0007494241, -0.0199494362, 0.0127846673, 0.0585212857, 0.0229342282, 0.0098725557, -0.0416747630, -0.0414132066, 0.0293171778, 0.0110219568, -0.0214824565, -0.0112948157, -0.0067445189, -0.0180693828, 0.0262558982, 0.0015657097, 0.0609975904, -0.0191836655, 0.0092067346, 0.0584380478, 0.0378378928, 0.0213065520, 0.0625227541, 0.0398102775, 0.0162305385, -0.0631096736, -0.0112870410, 0.0038734302, -0.0036598817, -0.0149774626, -0.0289114639, 0.0582704544, -0.0718461648, -0.0365481563, -0.0381167568, 0.0672428161, 0.0470021144, 0.0275315493, -0.0557045862, -0.0086186752, -0.0275525749, -0.0243743844, -0.0043338537, 0.0227249786, -0.0151337162, 0.0649493635, 0.0362327620, 0.0483579412, 0.0100553930, -0.0012808070, -0.0693295226, 0.0028044358, 0.0299908519, 0.0115841106, 0.0188039541, 0.0047569275, -0.0702673048, 0.0488280728, -0.0261513889, -0.0604054183, -0.0094209537, -0.0585275479, -0.0130865537, 0.0054554865, 0.0570056736, -0.0022477061, 0.0278060064, 0.0418738723, -0.0703090504, -0.0664247945, -0.0600462854, -0.0550347231, -0.0181027465, -0.0581375659, 0.0053225830, -0.0355873145, 0.0248839855, -0.0166060999, -0.0609181337, 0.0324764550, 0.0527613983, 0.0181976706, 0.0397995934, 0.0139434263, 0.0249935016, 0.0433994606, 0.0306068286, -0.0126541890, -0.0280766450, -0.0422450304, 0.0102728307, -0.0569834635, 0.0497769862, 0.0079177544, 0.0128552467, -0.0603610426, 0.0574258715, -0.0439504609, -0.0599735714, 0.0545695871, -0.0620348454, 0.0525930002, 0.0255042389, 0.0653435588, 0.0132062733, -0.0637435094, 0.0189727545, 0.0134267211, 0.0333487466, -0.0329216197, -0.0581511781, 0.0196819454, -0.0405257866, -0.0531782210, -0.0572654940, -0.0177288838, 0.0572492927, 0.0320506468, 0.0194738358, 0.0658183843, -0.0453798771, -0.0370446779, 0.0593888611, -0.0097190216, 0.0431586057, -0.0174783766, 0.0373691395, -0.0287459232, 0.0390136018, 0.0049260333, -0.0299384780, 0.0205903053, -0.0354646705, 0.0289515555, -0.0015731603, 0.0462386683, 0.0024477616, -0.0268266350, 0.0352548510, 0.0435183868, 0.0198473334, -0.0701965168, -0.0523235984, -0.0222993977, -0.0266374201, 0.0255291536, 0.0155790523, -0.0211670995, -0.0543747395, -0.0146848336, -0.0420529768, -0.0253847763, -0.0036807209, -0.0691944733, 0.0608974546, -0.0413821153, -0.0260227211, 0.0263487846, -0.0465485714, 0.0458954871, 0.0499394313, -0.0178411901, -0.0647403225, 0.0375767499, -0.0696124658, -0.0242588595, 0.0163388476, 0.0490445122, 0.0263224393, -0.0384093188, -0.0096935220, 0.0511510372, -0.0592127219, -0.0220156983, 0.0320999250, 0.0481605828, 0.0609405041, -0.0582059622, 0.0500078946, -0.0410238430, 0.0369221196, -0.0700225309, 0.0373672470, -0.0540330186, 0.0268960819, -0.0634090006, -0.0296517871, 0.0601520240, 0.0419463441, -0.0701163560, -0.0210361741, -0.0261287801, -0.0349547416, -0.0576980636, -0.0617498048, 0.0292759165, 0.0160511583, -0.0396473669, -0.0576747507, -0.0021669194, 0.0203758106, -0.0673413128, -0.0113176145, 0.0504442677, -0.0251722448, -0.0278056636, 0.0623739362, 0.0315734148, -0.0476213023, 0.0265784040, -0.0264951400, -0.0339870527, -0.0192610100, -0.0302255675, 0.0299937800, -0.0307285972, -0.0039178580, 0.0242165998, 0.0207183063, 0.0076596960, 0.0281265974, -0.0297009125, 0.0397291183, 0.0053418949, 0.0410267189, 0.0348807722, 0.0689385980, -0.0129890963, 0.0611266643, 0.0377342626, 0.0480634198, 0.0017853156, 0.0670144707, 0.0115903392, 0.0499566197, -0.0004182383, 0.0229086950, 0.0267340317, 0.0078026950, -0.0160507634, 0.0524122491, -0.0673949420, 0.0284726694, 0.0369863510, 0.0165017620, 0.0037709698, 0.0201965198, 0.0320825800, -0.0219200999, 0.0516036004, 0.0164606348, -0.0233628899, -0.0072740167, -0.0381643511, 0.0229722708, 0.0478061512, -0.0362633020, 0.0334926099, -0.0009372458, -0.0234736651, 0.0385855585, 0.0541017950, -0.0141283125, -0.0317169651, -0.0037148073, -0.0330822580, -0.0325863510, -0.0055933669, 0.0607217103, 0.0380197838, 0.0256300345, -0.0468350574, 0.0613794476, 0.0235921443, -0.0571826473, -0.0662058964, -0.0407452025, -0.0177876614, -0.0512367561, -0.0375929251, 0.0603852570, -0.0200812705, 0.0103175640, -0.0452051833, 0.0346297845, -0.0630188435, -0.0685070381, -0.0182749480, 0.0642521232, -0.0444000810, -0.0400957651, 0.0543477982, -0.0619494170, -0.0017938316, -0.0206547603, 0.0197605416, -0.0306834802, 0.0314863473, 0.0224753469, -0.0458168685, -0.0658400357, -0.0094209239, 0.0132774189, 0.0366924852, 0.0423536077, -0.0267477967, 0.0601298064, 0.0656849891, -0.0268153846, 0.0500824153, -0.0524100438, -0.0372880809, 0.0551670343, 0.0467556641, 0.0095421895, -0.0185456388, -0.0647631437, 0.0041106194, 0.0098165646, -0.0435509086, -0.0007382259, 0.0587059259, -0.0478023998, 0.0166714489, 0.0681878179, 0.0431780964, -0.0427535139, -0.0650229752, -0.0630073994, 0.0539848804, 0.0702478588, -0.0582436100, 0.0467594340, -0.0350506306, -0.0207434259, 0.0432391837, -0.0056254193, -0.0266513564, -0.0524339080, -0.0569644682, -0.0251041912, 0.0587567687, 0.0652438551, -0.0253922604, 0.0585431606, -0.0308389068, -0.0039044172, -0.0182291940, 0.0459383652, -0.0521960333, -0.0048356429, 0.0352710634, 0.0661765784, -0.0554239154, 0.0649491698, 0.0284318700, 0.0444106758, -0.0390351973, 0.0073385388, 0.0386301950, 0.0540239662, -0.0642312765, 0.0112028643, -0.0686294511, 0.0214114636, 0.0454810709, -0.0158506520, -0.0621783473, -0.0497812033, 0.0373272076, 0.0364539176, 0.0635287166, 0.0672540218, 0.0667080134, 0.0186236650, -0.0680458248, -0.0612262152, 0.0163515136, 0.0697541982, -0.0336087719, 0.0431029573, -0.0243328810, -0.0658351183, -0.0198345482, -0.0663340166, -0.0316057242, 0.0004280433, -0.0329314582, 0.0132705942, 0.0443378091, -0.0500357188, -0.0401309021, 0.0658972114, -0.0123236552, 0.0702294111, 0.0634426773, -0.0381642804, -0.0333141796, 0.0055260211, 0.0590459108, 0.0139250681, 0.0717471540, 0.0605190247, 0.0705171525, -0.0693432167, -0.0072904602, 0.0239483565, 0.0614174455, 0.0596430898, -0.0462155752, -0.0066995248, 0.0183959901, 0.0439352319, -0.0363063551, -0.0408663712, 0.0190368071, 0.0164472684, -0.0259378776, 0.0254496112, -0.0714702755, 0.0576706529, 0.0251163766, 0.0582347512, -0.0060173124, 0.0326234847, 0.0230467916, 0.0551008582, -0.0476963557, -0.0664422438, -0.0597430579, -0.0597208291, -0.0392799787, 0.0388348475, -0.0049294010, -0.0163433403, 0.0310081318, 0.0276320353, -0.0045912266, -0.0666769519, -0.0078147426, -0.0178807303, -0.0197960250, -0.0591148883, 0.0485491753, -0.0509894863, -0.0405464023, 0.0149975270, 0.0460570902, 0.0483149067, 0.0454067588, 0.0380706638, -0.0147698186, -0.0327328630, -0.0336304531, -0.0028452128, -0.0171119496, 0.0564646870, 0.0066060945, 0.0698414892, -0.0518443324, -0.0649685487, 0.0561798960, -0.0008473471, 0.0463384464, -0.0609631278, 0.0001054555, 0.0269806683, 0.0379539505, 0.0546309501, -0.0303988010, 0.0121831670, 0.0089419335, 0.0032971203, -0.0090326965, 0.0581280142, 0.0365265459, -0.0539573617, -0.0708887130, -0.0618910156, -0.0435627140, 0.0607906133, -0.0103604086, -0.0539380051, 0.0403649732, -0.0440022163, 0.0173086375, -0.0037475675, -0.0201138780, 0.0481116325, 0.0248033032, 0.0436046794, 0.0219654888, 0.0405828953, 0.0151386186, 0.0516609624, 0.0322674513, -0.0267241746, 0.0524432659, -0.0685076937, 0.0700414181, 0.0434813127, -0.0433918722, 0.0376417264, 0.0113978013, 0.0684614033, -0.0713344440, -0.0552353114, 0.0070910230, 0.0707696974, -0.0232358538, -0.0255144797, -0.0327041298, 0.0418005884, -0.0231876597, 0.0592453778, 0.0129738003, -0.0363026708, -0.0270349532, -0.0327694267, -0.0593612492, -0.0154163986, 0.0531170815, -0.0207176171, -0.0614215061, 0.0019142628, -0.0643523335, 0.0677845925, 0.0644033700, 0.0467767790, 0.0366945118, 0.0462775007, 0.0639934242, 0.0261023194, 0.0421923772, 0.0098780766, -0.0611831807, -0.0662594065, -0.0674847960, 0.0684019625, 0.0230760947, -0.0069874227, 0.0140804425, 0.0127207264, 0.0139392167, -0.0547288954, -0.0092791617, -0.0695242807, -0.0194747113, 0.0159800425, 0.0654413849, 0.0397464409, 0.0136614144, 0.0075003654, -0.0430030227, -0.0166695900, -0.0597964674, -0.0429115891, -0.0111937821, -0.0010529608, 0.0535093546, 0.0219528303, 0.0019742772, -0.0465400517, 0.0134494156, 0.0451981425, 0.0295984671, -0.0595533587, 0.0384861454, -0.0198139548, -0.0099438056, 0.0207817107, 0.0546530187, 0.0566749871, -0.0546320602, 0.0426951498, -0.0329993032, 0.0141322389, -0.0207444727, -0.0707427338, -0.0425608195, 0.0719286054, -0.0283717699, -0.0246129148, 0.0458333045, 0.0139091685, 0.0363756418, 0.0678740889, 0.0569957048, -0.0448441058, -0.0015846565, 0.0352918282, -0.0201111920, 0.0321216211, -0.0285561346, 0.0059181154, 0.0074631795, 0.0216038823, 0.0198908001, 0.0288958102, 0.0712174922, -0.0025255159, 0.0704902709, -0.0510600507, 0.0265572742, 0.0012126341, -0.0679220781, -0.0650201365, 0.0686076134, 0.0559284240, 0.0194150582, 0.0518521816, -0.0444685593, 0.0621146709, -0.0414346606, 0.0304174051, -0.0226561204, 0.0355506986, -0.0193627328, 0.0333459973, 0.0600715280, -0.0373028256, 0.0539208502, -0.0341024734, -0.0495320857, -0.0603727438, 0.0241789892, 0.0021516755, 0.0272583812, -0.0560316779, 0.0497219414, -0.0172727592, -0.0575938597, -0.0706548095, -0.0283491276, 0.0496328473, -0.0343797542, -0.0194152631, -0.0272341520, -0.0131485127, -0.0438839048, 0.0268542692, -0.0712215230, -0.0464985520, 0.0537931323, -0.0589547306, 0.0201375857, -0.0363784321, 0.0412830785, 0.0400912762, -0.0389816351, -0.0018482730, 0.0572334081, 0.0424490497, 0.0458737016, 0.0053265244, 0.0400063470, 0.0276830494, -0.0682576001, 0.0066547394, 0.0297163948, 0.0714271516, -0.0232673772, -0.0380680636, -0.0265766978, 0.0473460704, -0.0537135303, -0.0713844970, 0.0082499906, 0.0039479509, 0.0443385169, -0.0210827701, 0.0315872952, -0.0107850432, -0.0117334425, -0.0076640993, 0.0224185362, 0.0672180355, 0.0702355206, 0.0409676507, -0.0702005625, 0.0193125606, -0.0393806510, 0.0279339701, -0.0648811758, 0.0695044547, -0.0586021394, 0.0636814237, -0.0226782486, 0.0586409271, 0.0468162671, 0.0664867312, -0.0060776025, -0.0265429392, 0.0689189285, 0.0478516296, -0.0113997422, -0.0192618184, 0.0552058518, -0.0540377647, -0.0270171985, -0.0277877524, -0.0222270116, -0.0405339077, 0.0496468022, -0.0497474968, -0.0566253476, -0.0031482652, -0.0048850775, -0.0177306235, -0.0160771944, 0.0284711346, -0.0141610391, -0.0494980514, -0.0308326446, 0.0693314224, 0.0017438978, -0.0578142740, 0.0424619690, -0.0665324926, -0.0087844953, -0.0469221212, 0.0415510610, 0.0315871462, -0.0016808212, -0.0013052598, -0.0569536649, 0.0379901007, 0.0507799610, 0.0578917712, 0.0051815957, 0.0059183612, 0.0218290240, 0.0616108328, -0.0298265330, -0.0267503597, 0.0038032085, 0.0060575902, -0.0697925985, -0.0389888808, 0.0358885676, 0.0014884919, -0.0300393961, 0.0553216189, 0.0600301474, -0.0683847591, 0.0466097370, -0.0340531766, 0.0207808986, 0.0087080449, -0.0447341949, 0.0007052049, 0.0551975518, 0.0458999425, -0.0257005654, 0.0576970130, -0.0351324156, -0.0047474280, 0.0598835349, 0.0127480030, 0.0594046265, 0.0623043776, -0.0266990699, 0.0079017356, -0.0256338902, -0.0207735002, 0.0454612449, 0.0104062110, -0.0269626714, 0.0133367181, 0.0570849031, 0.0220480114, 0.0358710140, 0.0114314035, 0.0304835290, -0.0642444342, -0.0381282158, 0.0263119414, -0.0287949108, -0.0163092390, -0.0427128226, -0.0530958734, 0.0601030737, -0.0306779221, -0.0133283548, 0.0677739084, 0.0477573499, 0.0615901351, -0.0315188840, -0.0250890516, 0.0118612722, -0.0588736385, 0.0674277842, 0.0127960220, -0.0051658675, -0.0103699043, 0.0191775560, -0.0594676882, -0.0322315395, -0.0425343737, 0.0066856965, -0.0141531937, 0.0669455826, 0.0617449582, 0.0257426873, 0.0359379277, -0.0244681761, -0.0323095173, 0.0319543928, 0.0050843507, 0.0355911702, 0.0708742589, -0.0236272477, -0.0185156800, 0.0238717645, 0.0241290703, 0.0381118506, -0.0378245227, -0.0518751815, -0.0068898797, 0.0324592665, 0.0101690218, 0.0368038267, 0.0164197013, 0.0420516804, 0.0560219586, -0.0261900686, 0.0621789545, -0.0702831894, -0.0450082570, -0.0655689687, -0.0612693653, 0.0518854707, -0.0496327952, -0.0700708628, -0.0628994852, -0.0015201494, 0.0386553183, -0.0018763915, 0.0515503436, -0.0064107329, -0.0331659503, 0.0320715159, 0.0312006697, -0.0510063842, 0.0247637331, 0.0581918061, -0.0105102919, 0.0639445335, 0.0024077371, -0.0201577730, -0.0694533065, 0.0451270863, -0.0307971649, 0.0599422604, 0.0485384390, 0.0160101578, 0.0524918288, 0.0605226606, 0.0240649432, 0.0377153009, -0.0333881862, 0.0015015006, 0.0694275498, -0.0255186260, 0.0664184242, 0.0155566856, -0.0600793920, 0.0716055185, -0.0268446356, 0.0075177774, -0.0446767583, 0.0291793197, 0.0370111763, -0.0388402864, 0.0309597105, -0.0629197359, -0.0535930023, -0.0621992163, 0.0258353949, -0.0615184307, -0.0280889831, -0.0516351908, -0.0229481123, -0.0082551390, -0.0712972656, -0.0044498816, -0.0500427932, -0.0230251290, 0.0267000645, -0.0516033247, 0.0181562230, -0.0119135603, 0.0047729313, 0.0437608287, 0.0154571086, -0.0051676109, 0.0705869347, -0.0121702775, -0.0310509391, -0.0496199280, 0.0454045385, 0.0025763139, -0.0715490803, -0.0583509952, -0.0049519762, 0.0069974065, -0.0330216549, -0.0036974102, 0.0681683868, 0.0605843365, -0.0090897307, 0.0374355242, 0.0605320930, 0.0199465826, -0.0018004775, -0.0682751834, 0.0575289875, 0.0274341255, -0.0668938905, 0.0349630713, -0.0225304440, -0.0255535878, -0.0643034577, 0.0713613927, 0.0179468021, -0.0222369544, 0.0511074662, 0.0432559922, -0.0025175661, -0.0013301373, 0.0715187788, 0.0393556505, 0.0028429255, -0.0263263099, 0.0393452570, 0.0012147874, 0.0688233972, -0.0168717317, -0.0521763302, -0.0719947219, -0.0433664583, -0.0203149691, 0.0455274954, 0.0247461423, -0.0577323362, 0.0505537018, 0.0016787425, 0.0586765558, -0.0446995199, 0.0546019077, 0.0341268033, -0.0717334300, -0.0351363383, -0.0052446276, -0.0692412853, 0.0351940617, -0.0436248258, 0.0300280899, -0.0386222973, 0.0535790920, 0.0306150317, -0.0314844549, -0.0229968913, -0.0013421178, -0.0421178266, -0.0214932263, -0.0060984567, -0.0365175605, 0.0406153649, 0.0526276529, 0.0463756844, -0.0447687060, 0.0160044581, -0.0058433563, 0.0681077391, 0.0158149526, -0.0244876035, 0.0626059622, 0.0189670548, 0.0221180767, 0.0051854327, 0.0418224931, 0.0719720274, -0.0476468541, -0.0029625222, -0.0217629895, 0.0032746121, -0.0322417244, 0.0191309825, 0.0299794450, 0.0272466093, -0.0274048410, -0.0507937819, 0.0299535841, -0.0358436927, 0.0426552817, 0.0067420602, 0.0274187103, 0.0507263690, -0.0447678305, 0.0390350446, -0.0618446618, -0.0306993611, -0.0277635232, 0.0345991179, 0.0028558597, -0.0040520653, -0.0063953325, 0.0153903291, -0.0258279964, -0.0057998896, -0.0285008177, 0.0669003725, -0.0042583719, 0.0289954692, 0.0282765478, 0.0492637530, -0.0358536690, -0.0405347683, -0.0625210479, 0.0347398147, -0.0108743608, -0.0010999367, -0.0324486829, 0.0537238270, 0.0353018641, 0.0322926715, 0.0018785745, -0.0373035483, -0.0159163289, 0.0289815664, 0.0502858460, 0.0628784746, -0.0178795084, -0.0552064404, 0.0416630581, 0.0060146451, 0.0195443109, 0.0622298419, 0.0437816158, -0.0170117728, -0.0357056968, 0.0006090701, 0.0178322569, 0.0512749553, -0.0413035527, -0.0534911379, 0.0619419366, 0.0658732653, 0.0135804266, -0.0611529127, -0.0280823745, -0.0073621124, 0.0297484174, -0.0696364716, -0.0680742860, -0.0362735391, 0.0531924367, -0.0301305354, -0.0427470617, 0.0580624044, -0.0188098922, 0.0134230554, -0.0318146795, -0.0498810336, 0.0143462643, -0.0622523166, -0.0479908437, 0.0540408641, -0.0679511726, 0.0628433675, -0.0679888874, -0.0487501957, 0.0473203138, 0.0332327932, -0.0661254227, 0.0036941394, -0.0157369040, -0.0595201999, -0.0431226790, -0.0033884346, -0.0119759142, -0.0357604809, 0.0468413234, 0.0660834759, -0.0078107640, 0.0077756494, 0.0402267203, -0.0543793999, 0.0596655756, 0.0563974530, 0.0328760892, 0.0219049081, 0.0711674243, -0.0685550272, 0.0614159554, 0.0263950154, -0.0212084278, 0.0405940637, -0.0254054591, 0.0416935980, -0.0525440127, 0.0179529637, 0.0114925206, 0.0602590889, 0.0264107585, 0.0541427583, 0.0149485916, -0.0318452194, 0.0273312852, 0.0209239870, 0.0033336356, 0.0599301159, 0.0191244930, -0.0088388622, 0.0314796567, -0.0226458646, -0.0235773511, -0.0331253074, 0.0576699078, 0.0179752633, 0.0091262087, -0.0345306545, -0.0401159301, 0.0431211442, 0.0370530933, -0.0511990786, -0.0443539321, -0.0517165214, 0.0403533429, -0.0106425248, -0.0336367153, -0.0243789777, -0.0183419473, 0.0699930191, -0.0410756841, 0.0575590730, -0.0364267118, 0.0026582330, 0.0509983972, -0.0222478807, -0.0651914552, 0.0228319019, -0.0237163603, 0.0415073112, 0.0445879400, 0.0095702931, 0.0370369181, 0.0542582721, 0.0406778380, -0.0312114432, 0.0384766459, 0.0021362901, 0.0351528004, 0.0697246045, -0.0523585975, 0.0633484870, 0.0499956310, -0.0580385588, -0.0259889774, -0.0079854652, -0.0669078827, 0.0096935555, -0.0479550883, -0.0039785951, 0.0116927847, -0.0472805277, -0.0651535392, -0.0213866867, 0.0555853397, 0.0417361856, -0.0517440885, 0.0328004509, -0.0566550121, -0.0117310695, 0.0485591739, 0.0238826424, -0.0081707612, -0.0542363301, -0.0379641727, 0.0263559893, 0.0321141407, 0.0327352583, 0.0301272869, 0.0370313823, 0.0576336384, -0.0579147600, 0.0253189132, -0.0099959075, 0.0420651063, -0.0423388556, -0.0612686425, 0.0593404919, 0.0033389479, -0.0476873405, 0.0377644375, 0.0192566216, -0.0615995936, -0.0478832722, 0.0599440634, 0.0530674309, 0.0111933500, 0.0234932825, 0.0407372192, -0.0700006783, 0.0545160770, 0.0269269124, 0.0010300800, -0.0318741798, 0.0247795433, -0.0168050900, -0.0318931937, 0.0225694999, -0.0594381094, 0.0442337096, 0.0490143299, -0.0614933781, -0.0718195811, -0.0118130893, -0.0170815103, 0.0142259598, 0.0114309043, 0.0141380876, 0.0303178281, -0.0288917795, 0.0408572182, 0.0088302270, -0.0394041203, -0.0115811490, 0.0387156755, 0.0302355140, -0.0352424160, 0.0509995148, 0.0675039142, -0.0210604705, -0.0595670380, -0.0068669096, -0.0148244314, -0.0245409086, 0.0088731050, 0.0690912604, -0.0689644068, 0.0665135980, 0.0620974302, -0.0503741167, 0.0149264336, -0.0206396692, -0.0350330472, -0.0656471699, -0.0502403192, 0.0418565124, 0.0035058483, 0.0133916214, 0.0338940173, 0.0701428652, 0.0232118145, -0.0520904176, 0.0364197120, -0.0272558331, -0.0332428962, 0.0173389539, -0.0719259456, -0.0543241501, 0.0508117080, 0.0318598449, -0.0052712634, -0.0250919238, 0.0427129418, -0.0105172433, -0.0434838571, 0.0353648067, -0.0559906736, 0.0579748452, 0.0124160871, 0.0076901168, 0.0286621451, 0.0581210107, -0.0446183421, -0.0037943497, -0.0208584853, 0.0447697788, 0.0657688081, 0.0411085188, -0.0718402639, -0.0329457596, -0.0444574431, 0.0455636233, -0.0003954917, -0.0053344741, 0.0711715519, 0.0330976546, 0.0654930621, 0.0217562094, 0.0045775697, 0.0662727952, -0.0291261673, 0.0376886278, 0.0649595857, -0.0439792462, -0.0454250947, 0.0407910720, -0.0252053328, 0.0149993822, 0.0566604882, 0.0202961639, -0.0575281680, 0.0542433560, -0.0712468624, -0.0658128113, -0.0109637156, 0.0271529406, -0.0661402196, -0.0169892013, -0.0288083628, -0.0363180526, 0.0069358200, -0.0185811333, 0.0585000217, -0.0420504287, 0.0078878030, 0.0024047792, -0.0138790607, -0.0561014824, 0.0451555774, -0.0425022691, -0.0645548031, -0.0007347614, -0.0340594426, 0.0048139319, 0.0687591732, 0.0564030260, 0.0698881149, 0.0556551516, -0.0042133257, -0.0208822787, -0.0056703612, 0.0666343719, 0.0388896167, -0.0526880473, -0.0296586007, 0.0197621286, 0.0566475838, -0.0030466989, -0.0661266446, -0.0215003863, -0.0650920570, -0.0476226620, 0.0639714748, -0.0128551424, -0.0065044090, -0.0254748166, 0.0401404873, -0.0682887807, 0.0639634430, -0.0591258146, -0.0066095218, 0.0652479529, -0.0639918670, -0.0509962291, -0.0039439797, 0.0060845017, 0.0026545450, -0.0366943404, -0.0633709356, -0.0241293311, -0.0476269461, -0.0707703009, 0.0506644920, -0.0685685575, 0.0458502695, -0.0631293952, 0.0178785101, 0.0453694016, -0.0678995028, -0.0374644101, -0.0097058788, -0.0554608554, -0.0533464178, -0.0240492001, 0.0423047394, -0.0186765417, 0.0366109908, -0.0031243339, 0.0277804360, 0.0217320323, -0.0205212571, 0.0260993764, -0.0503182113, -0.0353287570, -0.0651123598, -0.0341176502, 0.0720206052, -0.0256849080, 0.0023702160, -0.0383580588, -0.0678680465, 0.0054838285, 0.0322854817, 0.0645943135, -0.0652976558, -0.0075712875, 0.0105147511, -0.0558159612, 0.0476915911, 0.0329996645, -0.0644201487, 0.0169363916, -0.0249015875, -0.0369218253, 0.0601661652, -0.0443648770, -0.0295826159, 0.0234971717, -0.0379512161, -0.0374801047, -0.0368301347, -0.0418620519, 0.0328756422, 0.0028157383, -0.0452835225, -0.0346648134, -0.0163753964, 0.0087275580, -0.0058157593, -0.0237487443, 0.0382135957, 0.0487233028, -0.0000159815, 0.0587998778, -0.0620836951, -0.0400795937, -0.0383947268, -0.0559714735, 0.0611760765, -0.0361654684, 0.0332093760, -0.0568532124, -0.0720488355, -0.0506572798, 0.0390581861, 0.0688246936, 0.0120525882, -0.0415136740, -0.0519869737, -0.0088308454, 0.0566376299, 0.0005863607, -0.0229850896, -0.0292630941, 0.0245734453, -0.0260745287, -0.0657103509, 0.0079183206, 0.0055270493, -0.0191150494, -0.0056735650, -0.0381339304, 0.0280988589, 0.0346872658, -0.0375079103, -0.0401676893, -0.0152617320, -0.0646393597, 0.0306676179, -0.0354344882, 0.0088780075, 0.0436690524, -0.0159212500, -0.0131822526, -0.0284165926, -0.0261053443, 0.0314964801, -0.0373932794, -0.0452045798, 0.0314813778, -0.0666027069, -0.0384720154, 0.0488124639, 0.0483606979, -0.0324686244, 0.0050153136, 0.0091379285, 0.0558823198, -0.0346848741, -0.0369584598, 0.0582027584, 0.0196949914, 0.0354543105, -0.0721572712, -0.0302290246, -0.0567239597, 0.0224509537, -0.0530927926, -0.0719289407, 0.0313998535, 0.0418163687, -0.0409402698, 0.0354188979, 0.0607326031, 0.0500938594, -0.0525969043, 0.0371549726, 0.0579421520, -0.0054481626, 0.0416401625, 0.0070636123, -0.0309065804, 0.0033146515, 0.0449730307, 0.0388645306, -0.0502249897, 0.0231944770, -0.0139174983, -0.0041921139, -0.0128226392, -0.0674919710, -0.0319440365, 0.0354681760, -0.0506257936, 0.0220684186, -0.0164919347, -0.0229121000, -0.0339083187, 0.0653440207, -0.0393676609, -0.0061401650, -0.0566303059, -0.0246687159, -0.0184564926, 0.0481086075, 0.0227568299, -0.0711705387, 0.0556256175, 0.0458276421, 0.0403153375, 0.0034723505, -0.0363865681, -0.0691366941, -0.0048981234, -0.0235017277, 0.0527249053, -0.0091477036, -0.0715861246, 0.0711348057, 0.0084429085, -0.0721424893, -0.0152053125, -0.0649140030, -0.0577928722, 0.0449431986, -0.0692933202, 0.0144089162, -0.0450351164, -0.0466226116, -0.0604651421, 0.0402828008, 0.0219624937, -0.0433868468, -0.0608175956, 0.0176739469, 0.0277290046, -0.0133133829, -0.0257267207, 0.0136712417, -0.0216154940, 0.0303173438, -0.0506768450, 0.0516300648, 0.0377665237, -0.0253412798, 0.0039149150, 0.0226494595, -0.0060810819, -0.0418341607, -0.0719122216, 0.0378917679, 0.0025539622, 0.0031719133, -0.0697833076, 0.0288916752, -0.0631161779, -0.0585026667, -0.0071885511, 0.0451724902, 0.0395129025, 0.0275837034, -0.0214534961, 0.0137481168, 0.0251298323, 0.0356865823, 0.0026035830, 0.0064535439, -0.0370502546, 0.0177594423, 0.0686951429, 0.0531804711, 0.0585292727, -0.0308449455, 0.0190811679, 0.0569527149, 0.0062542260, 0.0188645199, 0.0021376014, -0.0477132015, 0.0323180333, 0.0106236115, 0.0621640980, 0.0334330276, 0.0706306845, 0.0166589543, 0.0673321187, 0.0342630818, -0.0633504093, -0.0264072493, -0.0120796002, 0.0653988421, -0.0459924117, -0.0207703374, -0.0259210840, 0.0299638957, 0.0569464415, 0.0273463354, -0.0416288711, -0.0678621456, -0.0477986149, 0.0279431045, 0.0614180416, -0.0618522167, -0.0163286626, -0.0533004403, -0.0224669874, -0.0416817293, -0.0495355986, 0.0627225786, 0.0548300296, 0.0198525339, 0.0474060178, -0.0256436281, 0.0045489743, -0.0324442089, 0.0543808490, 0.0620300323, 0.0454684198, 0.0188052133, -0.0156939737, -0.0133901052, -0.0480452180, 0.0312875807, -0.0523826703, -0.0156944878, 0.0264532045, 0.0232828781, 0.0475110933, 0.0353613645, -0.0664620772, 0.0074023902, -0.0363197587, 0.0034478828, -0.0273640454, 0.0030489713, -0.0621328689, 0.0407168493, -0.0424562246, 0.0562500060, 0.0097632259, -0.0625006557, 0.0710200667, -0.0617639832, -0.0236470178, -0.0175072998, 0.0231633112, 0.0167535767, 0.0486271679, 0.0385031626, -0.0122029372, -0.0401546285, -0.0441444069, 0.0413828194, -0.0555192381, -0.0160385631, 0.0459181145, 0.0496797040, -0.0134339817, 0.0691386163, -0.0003474653, 0.0069693029, 0.0393556878, -0.0313763469, -0.0057060495, -0.0061942637, 0.0554364920, -0.0555042177, 0.0401297659, 0.0126101747, 0.0395720527, 0.0264486149, 0.0658368319, 0.0218566284, -0.0254921094, -0.0231871419, 0.0149611533, 0.0103681013, 0.0391176194, -0.0296367817, -0.0017133057, -0.0129901282, 0.0096264035, 0.0278507248, 0.0622423738, -0.0417007431, -0.0203278549, 0.0141936466, 0.0210136846, -0.0062837154, -0.0072120056, 0.0094849989, -0.0268504508, 0.0108352527, 0.0129553378, 0.0120101571, -0.0507630147, 0.0294414014, 0.0327777043, -0.0545115992, 0.0196575671, 0.0688842386, 0.0246500671, 0.0341370255, -0.0413256064, 0.0353660956, -0.0067008510, 0.0513395146, 0.0481602922, 0.0095076561, -0.0043066368, -0.0675159693, 0.0076946095, -0.0581188612, -0.0392644219, -0.0654556975, 0.0280696228, -0.0468941778, -0.0648252741, 0.0440356284, -0.0377145074, 0.0720355213, 0.0105294436, 0.0595017225, -0.0569315180, 0.0184618086, 0.0239125118, -0.0639536157, 0.0083778724, 0.0155589506, -0.0669226795, -0.0454250798, -0.0089151785, 0.0683793724, 0.0308467150, -0.0283630118, 0.0400392413, 0.0048464686, -0.0226276964, -0.0375147574, 0.0616951585, -0.0125831440, 0.0646522045, 0.0060299262, 0.0097810030, -0.0317194089, 0.0520251021, 0.0392666385, -0.0002080053, 0.0570310801, -0.0438300669, 0.0375474691, -0.0694988370, 0.0178123713, 0.0314240754, 0.0662282258, 0.0004416332, -0.0267326199, 0.0044889897, -0.0179450139, -0.0571855195, -0.0332777202, 0.0051437765, -0.0147862658, 0.0201874524, -0.0171836317, -0.0088440627, 0.0582815558, 0.0442200676, 0.0432421044, 0.0053295866, -0.0480187349, 0.0418706015, -0.0208945125, 0.0143105462, -0.0676667839, -0.0530137122, 0.0227380767, 0.0065495223, 0.0330106243, -0.0535976812, -0.0039837062, -0.0710566118, 0.0630087703, 0.0712926537, 0.0089337602, -0.0038687885, -0.0679578632, 0.0501774326, -0.0665326267, 0.0362911597, -0.0009952858, -0.0629568174, 0.0568161905, 0.0142446458, 0.0458629653, -0.0357915200, -0.0675783455, 0.0000012740, -0.0255633779, 0.0135248527, 0.0521416217, -0.0427724421, 0.0393720791, -0.0306956470, -0.0085942224, -0.0528248735, 0.0494570881, -0.0373086073, 0.0643013865, 0.0153523088, -0.0371853746, -0.0238575712, -0.0082200542, 0.0256728083, 0.0050252602, -0.0351285785, 0.0558614731, 0.0578026623, -0.0437378213, 0.0272102207, -0.0647320449, -0.0640734211, -0.0046577826, 0.0701198131, 0.0690528452, 0.0642683357, -0.0115212724, 0.0708142519, -0.0438467227, -0.0034131631, 0.0493612811, 0.0488094911, 0.0688085258, -0.0540318824, 0.0456158295, -0.0213594288, 0.0121468455, 0.0261274055, -0.0608453155, -0.0154397301, 0.0284342617, 0.0671767443, -0.0059540942, 0.0527774170, -0.0355860442, 0.0209717900, 0.0420107320, -0.0427661091, -0.0178803876, -0.0286043137, 0.0652571470, 0.0487184301, -0.0630458072, 0.0249693990, 0.0391939431, -0.0203025639, 0.0192296579, 0.0636433810, -0.0468236841, 0.0517162159, -0.0295609012, -0.0555592775, -0.0566365831, 0.0583536476, 0.0351812616, -0.0562006980, -0.0491166413, 0.0622236133, -0.0073777512, 0.0230263695, 0.0184140801, -0.0005960315, 0.0083016455, -0.0009317398, -0.0357642844, -0.0003112778, -0.0069916025, 0.0002171248, 0.0252144486, -0.0674725398, 0.0422800109, 0.0212322772, -0.0391234495, 0.0178002715, -0.0682635009, -0.0596617088, -0.0130137168, 0.0128991082, -0.0641806349, 0.0329713821, -0.0640402511, 0.0148929134, 0.0274565816, -0.0190981701, 0.0529464185, 0.0380478650, 0.0628505647, 0.0367197022, -0.0257995725, -0.0036159530, 0.0239327475, -0.0064905062, 0.0223043039, -0.0713092536, 0.0648475438, -0.0416176692, 0.0086665228, -0.0176546201, -0.0367614441, 0.0027429685, -0.0303601399, -0.0534682348, 0.0462150797, -0.0000508949, -0.0019143820, 0.0203035623, 0.0471506193, 0.0087314770, -0.0175167136, 0.0170130655, 0.0553569794, 0.0567906052, -0.0701316670, -0.0183303319, -0.0293457694, 0.0570540279, 0.0154005364, -0.0434529036, 0.0608344078, 0.0636189729, 0.0054398999, -0.0330899991, -0.0081097484, 0.0205589384, -0.0256141722, 0.0548336804, -0.0286869220, 0.0279395133, 0.0476228371, 0.0501330569, 0.0436178595, 0.0290550515, 0.0530013740, 0.0523107946, -0.0675524175, 0.0071270540, -0.0150570087, 0.0038641915, 0.0316321701, 0.0584905744, 0.0213865638, -0.0673401579, -0.0169015862, 0.0106763691, -0.0042894483, 0.0022690371, 0.0569723845, -0.0518994443, 0.0709387362, 0.0226938874, 0.0067422688, -0.0033487603, 0.0385645851, -0.0683473349, 0.0682198107, -0.0633774921, -0.0299913734, -0.0459626392, 0.0292270109, -0.0394654945, -0.0661142394, -0.0366034210, 0.0093090460, -0.0481489897, -0.0465290062, 0.0163563117, 0.0476019308, -0.0537823886, 0.0242045373, -0.0193287693, -0.0350959525, -0.0210413709, 0.0428610221, -0.0043022111, 0.0684265047, 0.0297418460, 0.0617385656, -0.0626537725, -0.0331598073, -0.0144689456, 0.0599780977, -0.0277092718, 0.0512105003, 0.0549114496, -0.0603186451, 0.0131903067, 0.0347652808, 0.0278879255, 0.0652080625, 0.0376451313, -0.0232686661, 0.0281151384, -0.0462549441, -0.0294774696, -0.0301334262, 0.0323529840, -0.0222362839, 0.0339683816, 0.0147157013, 0.0096923709, 0.0470724553, -0.0553624853, 0.0456641987, 0.0219029486, 0.0167833790, 0.0589431822, 0.0246693492, 0.0147768185, 0.0671513230, 0.0289069712, -0.0007737726, -0.0421388336, -0.0687134340, -0.0246010795, -0.0549908802, -0.0020677596, -0.0272204392, -0.0246220008, 0.0398668870, 0.0207059458, 0.0543399304, 0.0311316550, -0.0698531121, -0.0134556964, 0.0349626765, -0.0091515034, -0.0226550698, -0.0130034275, 0.0676845610, 0.0139370486, 0.0309182629, 0.0476450622, 0.0092876405, -0.0511394367, -0.0153392628, 0.0156664923, 0.0259953961, 0.0380697995, 0.0711564124, -0.0073393956, -0.0382152982, 0.0410669819, -0.0704724193, -0.0332691520, -0.0341689251, -0.0135906972, 0.0138173103, -0.0126898922, -0.0304623619, -0.0606736466, 0.0493149087, 0.0356848612, -0.0164079666, 0.0695900768, 0.0579458922, 0.0465229154, 0.0111437812, 0.0694660693, 0.0592518449, 0.0237359554, 0.0590106398, 0.0056394413, 0.0381803662, 0.0053156316, 0.0510128886, -0.0479822904, 0.0607558489, -0.0211354196, 0.0567089319, 0.0206113681, 0.0304872766, 0.0012148395, 0.0485245362, 0.0057593733, -0.0553292446, 0.0018100217, 0.0333686396, 0.0310681313, -0.0094863921, 0.0524883866, 0.0190522075, 0.0543650389, -0.0630527884, 0.0353684351, 0.0137685239, 0.0014577433, 0.0524463803, 0.0519572049, 0.0005815551, 0.0656755567, 0.0023849607, -0.0486096516, -0.0578388274, -0.0473220646, -0.0158428252, -0.0341698378, 0.0418759212, 0.0519255102, -0.0573082715, -0.0507884286, -0.0417256057, -0.0451711491, 0.0471210927, 0.0362043530, 0.0676905662, 0.0480661392, 0.0444282666, -0.0019319654, -0.0611958615, -0.0187570527, -0.0387350842, -0.0491109267, 0.0309806839, -0.0142600276, -0.0229286514, 0.0021124408, -0.0720031857, 0.0303225592, 0.0608440489, 0.0549875051, 0.0360743105, -0.0312854648, -0.0148579478, -0.0127158575, -0.0490657426, 0.0598836988, 0.0337504521, -0.0452734903, -0.0016396269, -0.0230304115, 0.0672305673, -0.0014385059, -0.0362471789, 0.0661798567, 0.0061023459, -0.0430070534, -0.0073427334, -0.0451292172, 0.0008297786, -0.0086448640, -0.0319712237, 0.0184084997, 0.0043753609, 0.0100035295, 0.0491913334, 0.0714535862, 0.0397828519, 0.0516772941, 0.0271348059, 0.0658935457, -0.0560598597, 0.0358586088, -0.0450102836, -0.0403817706, 0.0029057264, 0.0341710225, -0.0582160614, -0.0419926830, 0.0478063598, -0.0659683645, 0.0611657202, 0.0180722550, 0.0196850225, 0.0425909460, 0.0092640519, 0.0512144268, -0.0479375198, 0.0087470338, 0.0720600188, 0.0142693222, -0.0073802471, 0.0237418264, 0.0524173751, -0.0542791188, -0.0633205250, -0.0364798792, 0.0419767499, 0.0631522238, 0.0587580204, -0.0252411887, -0.0583636574, 0.0149137825, -0.0647931099, 0.0490140244, -0.0430402942, 0.0510053858, 0.0350994095, 0.0215114132, 0.0410119370, -0.0375194028, 0.0392656252, -0.0455424972, -0.0691526905, 0.0026614964, 0.0088755488, -0.0146123953, -0.0063311905, -0.0418534316, 0.0009535253, 0.0314508006, 0.0063195601, -0.0636773109, 0.0112122297, -0.0279070958, 0.0366845354, -0.0455493107, 0.0093221888, -0.0035193041, -0.0151470155, -0.0091313571, 0.0604015738, 0.0516014472, -0.0113543011, -0.0249382555, 0.0061721876, -0.0042784661, 0.0498105362, 0.0298196524, 0.0615948588, -0.0625870526, -0.0324668176, -0.0202919990, -0.0459423363, 0.0357905775, 0.0365938023, 0.0182792619, -0.0430936515, 0.0350248888, -0.0663687885, -0.0361405201, 0.0505007356, -0.0677341297, -0.0568938181, -0.0370630026, -0.0111333169, -0.0287600644, 0.0158907250, -0.0412490927, -0.0619219691, 0.0210062861, -0.0451425537, -0.0297084823, 0.0511800796, 0.0561378300, -0.0091567338, -0.0374185741, -0.0505077764, -0.0493349209, 0.0498178154, 0.0612761676, -0.0251257680, 0.0640592724, -0.0211366937, 0.0462181196, 0.0279306471, 0.0284154415, 0.0520654023, 0.0059945807, 0.0611597002, -0.0038127601, 0.0569468439, -0.0146303773, -0.0327438079, 0.0583653897, 0.0599725842, 0.0631643534, 0.0301851332, 0.0348384604, 0.0145704821, -0.0487467349, -0.0235280544, -0.0323055089, -0.0556830391, -0.0491464958, 0.0125752166, 0.0063156858, 0.0095543042, -0.0475362688, -0.0479702652, 0.0704596341, -0.0316012017, -0.0522729456, 0.0055669844, 0.0579332709, 0.0359048247, 0.0705376118, 0.0721079558, -0.0402670391, -0.0420012847, 0.0451462194, 0.0202500150, -0.0706884116, 0.0469968691, -0.0585535988, 0.0389745981, 0.0663846731, 0.0244769529, -0.0298024118, -0.0573466420, 0.0660045743, -0.0621851422, 0.0052768663, -0.0066788271, -0.0679900795, 0.0461202040, 0.0362903699, 0.0351257920, 0.0696229041, -0.0098650381, 0.0328268111, 0.0514773875, -0.0323160738, -0.0203391798, 0.0599357933, -0.0515839830, -0.0402838327, -0.0438371375, 0.0547045469, -0.0380706601, -0.0023281798, 0.0273713768, -0.0438243523, 0.0008983761, -0.0058885589, -0.0087496489, -0.0406352878, -0.0592450872, 0.0238654390, -0.0528671145, 0.0276728123, -0.0136769041, -0.0664847419, 0.0214205310, -0.0538504571, 0.0315731689, 0.0518899113, -0.0130706020, -0.0571987703, -0.0432577133, -0.0012096912, 0.0297127813, -0.0504433215, -0.0560850352, -0.0665159374, -0.0128042810, 0.0159719586, 0.0600836277, 0.0581637770, 0.0273264647, 0.0680157244, -0.0030534267, -0.0355005972, -0.0261502378, -0.0391075015, 0.0174596906, 0.0009356812, 0.0193938762, -0.0245788805, -0.0661279336, -0.0257030614, 0.0431372821, -0.0654221624, -0.0626034960, 0.0270657167, -0.0599031970, -0.0616476499, 0.0533940494, -0.0689682066, 0.0470707640, 0.0001989082, 0.0152360946, -0.0378753357, -0.0624886453, -0.0528569631, 0.0035545453, -0.0018227920, -0.0698695630, -0.0224920586, -0.0598391891, -0.0407457538, -0.0412079841, -0.0454814509, 0.0654502064, -0.0226843730, -0.0481357388, 0.0495047495, -0.0294382386, -0.0314420238, -0.0186062045, -0.0532767102, 0.0545695424, 0.0247144178, -0.0450042635, 0.0586639196, -0.0457976684, 0.0718195587, -0.0240520574, -0.0430261865, -0.0351853594, 0.0438911468, 0.0550232530, -0.0003119856, -0.0258549750, 0.0566264391, 0.0683224499, 0.0319241956, 0.0143679306, 0.0375141576, -0.0553303808, -0.0365480669, 0.0611033440, 0.0599954277, 0.0009910390, 0.0331977457, -0.0092261657, -0.0466731451, 0.0660333186, -0.0198674649, 0.0636602640, 0.0717332661, -0.0255667008, -0.0339858495, 0.0239966363, 0.0545805544, 0.0096169859, 0.0401732624, 0.0152629539, 0.0545465946, 0.0696824640, 0.0245615542, 0.0435058102, 0.0651382953, 0.0302908495, -0.0579811074, 0.0007823408, -0.0642290190, 0.0414395332, -0.0487760045, 0.0021879598, -0.0383896828, 0.0329225659, -0.0667954534, 0.0567846745, 0.0499836504, 0.0471512228, -0.0630545318, 0.0091832504, 0.0414095074, 0.0176919922, 0.0456326604, -0.0101045333, -0.0158167556, 0.0068081021, 0.0426867902, 0.0719708055, -0.0267647095, -0.0631318241, -0.0031503141, 0.0670110285, 0.0365594402, 0.0240472928, 0.0488382578, 0.0231142193, 0.0399919227, 0.0049108565, 0.0005472153, -0.0347894058, 0.0660123080, 0.0467139408, 0.0519300401, 0.0658954382, 0.0408836827, -0.0683517158, -0.0047873482, -0.0639321730, 0.0594407767, -0.0203930698, -0.0426647477, 0.0171875060, 0.0300773829, -0.0542656146, -0.0598534867, -0.0004893318, 0.0119940862, 0.0165215805, 0.0448176637, 0.0472903699, -0.0600046292, -0.0459435955, -0.0385118313, 0.0682925135, 0.0077638477, 0.0691672713, -0.0278043039, -0.0447981134, -0.0014409646, -0.0568716414, 0.0684993714, -0.0026600063, -0.0117294155, -0.0246896036, -0.0602011792, 0.0660143197, -0.0321675837, -0.0492496639, -0.0213036984, -0.0460764281, -0.0492589697, -0.0622414052, -0.0467849523, 0.0490044728, 0.0626713037, -0.0464741513, 0.0575338304, -0.0090076253, -0.0220777094, 0.0660142899, -0.0693597198, 0.0398296341, 0.0585703403, 0.0562048405, 0.0124779940, -0.0199171901, -0.0425824299, -0.0490535945, 0.0627688169, 0.0514660701, -0.0331319310, -0.0178929977, -0.0639414489, 0.0693268776, 0.0530881584, -0.0148911588, 0.0345509276, -0.0479539707, -0.0108094960, 0.0313106328, 0.0206640661, -0.0345557407, 0.0623572469, 0.0244347453, -0.0064482614, 0.0529763252, -0.0221380889, -0.0026184991, 0.0458847135, 0.0131853521, -0.0103482604, -0.0418751091, 0.0655079335, -0.0637155473, -0.0594224334, -0.0688181669, 0.0298108608, -0.0605314560, 0.0558429211, 0.0221444741, -0.0083431974, 0.0238179639, -0.0644212142, -0.0120015182, 0.0333552733, 0.0000764504, -0.0688665658, -0.0418828875, -0.0598709695, -0.0560203902, -0.0120534115, -0.0343555100, 0.0346912742, -0.0465768725, 0.0003191456, -0.0025900453, 0.0124133900, 0.0090485588, -0.0217011832, -0.0143264420, -0.0707384869, -0.0074361488, 0.0354892090, 0.0318568200, 0.0131432489, -0.0520764142, -0.0650307983, -0.0068051592, -0.0001375154, -0.0186472237, -0.0368724279, 0.0455264971, -0.0075123012, -0.0398204997, 0.0701896697, 0.0518734604, -0.0047344714, 0.0387011915, 0.0447534323, -0.0596647188, -0.0205613114, 0.0568560809, -0.0499594770, -0.0557594895, 0.0545270145, -0.0703502074, -0.0031672791, -0.0530550405, 0.0672735274, 0.0518826544, 0.0680849552, -0.0595978200, 0.0308717862, -0.0076073706, -0.0024250671, 0.0118859634, 0.0509212613, 0.0060921237, 0.0239523277, 0.0414860919, 0.0548835248, -0.0447625145, 0.0251651183, 0.0633102953, 0.0448437631, -0.0530446991, 0.0142712817, 0.0488650128, 0.0711482018, 0.0567354709, 0.0183901787, -0.0493700355, 0.0023261830, -0.0720591396, 0.0570034981, 0.0402481258, 0.0564034134, 0.0208534971, -0.0020930171, -0.0279646479, -0.0215405971, 0.0425713360, -0.0088492557, 0.0575658679, 0.0090553015, 0.0100677758, -0.0456650257, 0.0190521777, 0.0133248940, -0.0490104258, 0.0435554385, 0.0035436377, -0.0346806422, 0.0369699374, -0.0279790349, -0.0473775715, -0.0554876998, -0.0154195316, 0.0509841144, 0.0445900038, -0.0107930116, 0.0711254925, 0.0299516246, 0.0340841487, -0.0494544506, -0.0091891661, -0.0133765638, 0.0402697027, -0.0086934566, -0.0247612856, 0.0383974090, -0.0379717574, 0.0710357279, -0.0372355655, -0.0645501390, -0.0196948349, -0.0451400578, -0.0465479493, 0.0016294271, 0.0403974131, 0.0157949924, 0.0105729774, 0.0294330418, -0.0370519757, -0.0524647422, 0.0332518741, -0.0034593418, 0.0687104166, 0.0541943610, -0.0490922406, 0.0017390996, 0.0514977276, 0.0030612871, -0.0171869174, -0.0588400513, -0.0470584631, 0.0159476250, -0.0664217845, -0.0691927522, 0.0196675137, 0.0142469332, 0.0066178292, 0.0000118688, -0.0403123610, -0.0139948614, -0.0344347656, 0.0171288103, 0.0661213696, 0.0496357232, -0.0242931023, 0.0705227554, 0.0636558533, -0.0479115248, -0.0455055386, 0.0090698749, -0.0424403772, 0.0136107132, 0.0073166713, -0.0176776089, -0.0357168801, 0.0201246291, 0.0495348945, 0.0171484649, 0.0374480113, -0.0308052860, -0.0212348215, -0.0109849982, -0.0343440883, -0.0013666674, 0.0542776734, 0.0231238082, -0.0398361050, 0.0436890796, 0.0000247583, 0.0611591786, -0.0058427677, 0.0376134515, -0.0175346918, 0.0629862100, -0.0056492165, 0.0008444190, -0.0362691693, -0.0557434335, 0.0599986017, 0.0312849805, -0.0149625801, -0.0385049507, -0.0228777230, -0.0109628737, -0.0582118966, 0.0011884645, -0.0482596420, -0.0490612015, 0.0205597505, 0.0489902571, -0.0527298935, -0.0287119560, 0.0293468013, -0.0427766591, 0.0600966215, -0.0702085793, -0.0213334821, -0.0453467220, -0.0398129784, 0.0400423408, -0.0282137617, -0.0638361946, -0.0000291839, -0.0092372447, -0.0129964948, 0.0408634469, 0.0299284458, 0.0029274449, 0.0119597912, -0.0527159050, -0.0536574870, 0.0325550362, -0.0662017465, -0.0556212179, 0.0393175408, -0.0691605359, 0.0268799737, -0.0543827377, -0.0509544387, 0.0137480497, 0.0232060179, 0.0172064826, 0.0476270467, -0.0082583204, -0.0193739869, 0.0699310303, 0.0271005780, 0.0029379204, 0.0137006640, 0.0138993114, -0.0530513972, 0.0168621615, 0.0485443547, 0.0247371122, -0.0160794109, 0.0692566484, -0.0294901170, 0.0447656959, 0.0355335772, 0.0392004997, 0.0312283188, -0.0302170664, 0.0390737951, 0.0270436630, -0.0169390589, 0.0180905834, -0.0668590516, 0.0632371902, 0.0486727878, 0.0315873325, 0.0389735997, 0.0562918335, 0.0622188002, -0.0113191120, 0.0268041492, -0.0568204187, -0.0116521604, -0.0324484929, 0.0467919707, 0.0626707226, -0.0455511175, -0.0004521161, 0.0719951838, 0.0257846862, -0.0412064195, 0.0523155257, 0.0521319062, -0.0317030624, -0.0316735543, -0.0267947018, -0.0398442447, -0.0313613079, 0.0697284192, -0.0601657853, -0.0542458966, -0.0368574560, -0.0521995947, -0.0076072812, -0.0067459345, 0.0524535105, 0.0547497123, 0.0369369537, -0.0584804378, -0.0031430572, 0.0204795152, 0.0439249575, 0.0396514982, -0.0402897000, 0.0612803996, -0.0214237832, 0.0116909966, -0.0667505488, 0.0178810209, -0.0245458111, 0.0489823297, -0.0636458397, 0.0470612496, 0.0091902167, -0.0237498432, 0.0394857451, 0.0711962134, 0.0199064910, -0.0135557875, -0.0282103047, 0.0612433106, -0.0610928833, 0.0409332141, 0.0188052803, -0.0277274922, -0.0282118879, 0.0221482739, 0.0132382289, -0.0051828399, 0.0046313927, -0.0011176541, -0.0161588900, 0.0295756310, -0.0414184183, 0.0239645094, -0.0030341372, 0.0314866602, 0.0553554595, 0.0525847375, 0.0102478117, 0.0434296057, 0.0133541971, 0.0710416287, 0.0461397618, -0.0369635336, -0.0307190120, -0.0076695159, 0.0595039278, -0.0711362436, -0.0210571326, -0.0687766969, -0.0304906331, -0.0141740814, 0.0439767167, 0.0645469725, -0.0470922738, 0.0610917062, 0.0110438988, 0.0276492760, 0.0219233334, -0.0049133003, 0.0224146992, -0.0501317829, -0.0083757192, -0.0548763573, -0.0706358328, -0.0501854643, -0.0568338223, -0.0697995871, 0.0527951941, 0.0585441142, 0.0503788143, -0.0372496061, 0.0127104744, 0.0053271800, 0.0633968115, 0.0610487461, -0.0608051233, -0.0342061594, -0.0286675133, 0.0230208263, 0.0133074820, -0.0080436021, -0.0476443917, -0.0325150490, -0.0373694338, 0.0707647800, 0.0625916123, -0.0720797703, -0.0615315400, -0.0513412356, 0.0671576113, -0.0242231898, 0.0317614749, 0.0537636578, 0.0620127469, -0.0537230968, -0.0194498487, -0.0102962963, 0.0538136363, -0.0597990304, 0.0511423796, 0.0165814757, 0.0126364678, 0.0065411106, -0.0343281031, 0.0621044040, 0.0496250913, -0.0660807863, 0.0075434670, -0.0233393684, -0.0466292873, 0.0626686066, 0.0011572838, 0.0011822507, 0.0076021031, 0.0630406886, 0.0653953850, 0.0599073917, -0.0005029589, -0.0313550122, -0.0509298816, 0.0096122250, -0.0600392818, -0.0087383986, 0.0234212503, 0.0311253592, -0.0688884556, 0.0513896868, 0.0325112492, 0.0359172150, -0.0482675061, 0.0600191653, -0.0216923207, -0.0611712560, 0.0098210946, 0.0390972272, -0.0661300644, 0.0591715425, -0.0327981114, -0.0424751155, 0.0037721917, 0.0266965553, 0.0320056528, 0.0219762102, 0.0704768896, 0.0022489801, 0.0282932371, -0.0517699495, -0.0605415702, -0.0129287019, -0.0274748690, 0.0578024089, -0.0448382907, 0.0468389764, -0.0639179274, 0.0396298841, 0.0376598909, -0.0187488943, 0.0665680617, -0.0373844020, -0.0307985917, -0.0714239329, -0.0162957646, -0.0660522729, -0.0520933270, -0.0292012021, -0.0486461669, 0.0652564764, -0.0101345927, -0.0707404613, -0.0456458405, 0.0049241185, -0.0488193333, -0.0005351901, -0.0268861204, 0.0588525981, 0.0179762095, 0.0252098590, 0.0271055847, -0.0419012681, 0.0031209067, 0.0486826748, -0.0064810216, -0.0574547648, 0.0315331146, 0.0270069391, 0.0288140401, -0.0294527076, -0.0149667971, 0.0426391959, -0.0653341711, -0.0069106668, 0.0228082091, 0.0192853585, -0.0059449747, 0.0173138976, 0.0697650462, -0.0221616104, 0.0065668970, 0.0437726676, -0.0009823292, -0.0141892917, 0.0721294731, -0.0320893973, -0.0188616477, -0.0336802304, -0.0621662512, -0.0271133482, 0.0422121659, 0.0083075836, -0.0473388955, 0.0120046660, -0.0258646794, 0.0246923044, -0.0557896011, 0.0530693680, -0.0209703408, -0.0069963336, -0.0339703634, 0.0433318242, 0.0679700375, 0.0064982846, 0.0435474515, -0.0439987034, -0.0556111187, 0.0359460488, -0.0275339410, -0.0279638059, 0.0490131229, -0.0280662030, -0.0217998102, -0.0084670335, -0.0271281451, 0.0220654607, -0.0211585648, -0.0169831961, -0.0324059762, 0.0223914832, 0.0503834412, -0.0472534299, 0.0477590561, 0.0656521767, -0.0666093677, 0.0686967075, -0.0298841409, -0.0671617985, 0.0497462377, -0.0374679714, -0.0707473829, 0.0397758633, 0.0243822634, -0.0550387315, 0.0578857809, 0.0102504566, 0.0286413953, -0.0192327909, 0.0071958601, 0.0084518790, -0.0471554250, -0.0229090713, -0.0148119554, 0.0525687933, 0.0628896952, 0.0195612609, 0.0721442401, 0.0019203499, -0.0710730478, 0.0216367766, -0.0698841363, 0.0384173021, 0.0374941602, -0.0086116567, 0.0016868412, 0.0201841146, -0.0683914497, 0.0449637622, 0.0578453541, -0.0031162128, 0.0441430658, -0.0035468042, -0.0505497940, -0.0242936350, -0.0188954771, 0.0126997381, -0.0361726247, 0.0706462264, 0.0235326290, -0.0140316300, 0.0472278446, -0.0531989411, 0.0332454592, 0.0500098914, 0.0497570932, -0.0655574873, -0.0177087858, -0.0130827650, 0.0226744115, -0.0408251770, -0.0233962350, 0.0084652826, 0.0691261888, 0.0121958628, 0.0646672845, 0.0013640150, 0.0446944088, -0.0656268820, 0.0044099092, 0.0364926457, 0.0473551527, -0.0487028435, -0.0702392384, 0.0052930266, 0.0216120556, 0.0366587192, -0.0338895805, -0.0419446081, -0.0374613814, -0.0706259385, 0.0534588099, -0.0202433541, -0.0701277927, 0.0312261507, 0.0390679464, -0.0216199867, -0.0139329694, 0.0020423084, 0.0078340471, 0.0053866133, -0.0370804854, 0.0307563692, 0.0580985993, -0.0009854063, -0.0716954544, 0.0135549456, 0.0243697017, -0.0696649104, -0.0584972985, -0.0042741001, -0.0059042275, 0.0395497233, 0.0140065402, 0.0328547210, -0.0135724768, -0.0277808867, 0.0124608055, -0.0618914478, -0.0071504191, 0.0637416244, 0.0005441159, -0.0309240781, 0.0569380820, 0.0597831011, -0.0329117775, 0.0557858944, 0.0296182483, 0.0608271062, 0.0650250167, 0.0174988210, -0.0631063730, 0.0362931564, -0.0505793877, -0.0570531674, -0.0507025346, -0.0084421188, -0.0073118508, -0.0278841406, -0.0364641882, -0.0576484241, 0.0352612585, 0.0498376936, 0.0479554832, -0.0529761836, -0.0060908496, 0.0329410806, -0.0421033204, -0.0686283633, 0.0567937493, 0.0152958333, -0.0087912232, 0.0444292277, -0.0575720593, 0.0219908357, 0.0644649565, -0.0180716030, 0.0629903823, -0.0571382716, 0.0534251332, -0.0598568618, -0.0113776475, -0.0170543604, -0.0357143842, 0.0032097101, -0.0472321957, 0.0396635085, 0.0328122526, 0.0529670417, -0.0260884650, -0.0533745661, 0.0636156350, 0.0105879456, 0.0183210596, -0.0081642047, 0.0408249199, 0.0099643171, 0.0721544027, 0.0486900732, 0.0185806528, -0.0322921574, -0.0557765737, 0.0667213351, 0.0083745494, -0.0135015175, 0.0131431296, 0.0359708816, -0.0178240016, 0.0470770970, 0.0104322135, -0.0427701361, 0.0470750034, -0.0539157242, 0.0366995186, 0.0712352842, -0.0569639206, 0.0451207682, 0.0414569080, -0.0552767813, 0.0085014850, 0.0497235432, -0.0479732230, -0.0171641037, -0.0590874776, -0.0619847216, 0.0231691822, -0.0681603700, -0.0718587264, 0.0262156203, 0.0076926649, -0.0515807644, -0.0396216102, 0.0639203042, 0.0205206722, 0.0084502399, 0.0166352466, -0.0717301220, -0.0574067235, 0.0174723044, 0.0712003857, 0.0434059799, -0.0691037104, 0.0127165467, 0.0377633348, -0.0553871766, 0.0242869258, 0.0370572731, 0.0701746047, 0.0261562392, -0.0091248527, 0.0245701596, -0.0039310232, -0.0030984581, -0.0466580391, 0.0282215774, -0.0698787346, 0.0125830397, 0.0285469964, -0.0124167763, -0.0594921038, 0.0189957768, 0.0233218893, -0.0310027972, 0.0141434371, -0.0483399965, -0.0144970454, -0.0139455795, -0.0685157850, -0.0151123106, 0.0251449198, 0.0699935704, -0.0524274930, 0.0437902510, 0.0018548295, 0.0475216433, -0.0449488088, -0.0446616858, -0.0086821169, 0.0554464012, 0.0654422343, 0.0211646184, -0.0012748539, 0.0251471549, 0.0656856447, -0.0430406369, 0.0482383370, 0.0404188707, -0.0321164988, 0.0707680285, 0.0322470441, -0.0083436668, -0.0609233640, 0.0093067437, 0.0106483549, -0.0168690644, -0.0701870397, 0.0092072338, 0.0599690080, -0.0174853615, 0.0157455206, -0.0490755141, -0.0066921264, 0.0248864964, 0.0043325648, 0.0483958647, 0.0681878626, -0.0464883670, -0.0506071225, -0.0336445421, 0.0033119544, -0.0269649923, 0.0272958577, 0.0190148726, -0.0376920700, 0.0705775172, 0.0436714441, 0.0444095954, -0.0665905401, -0.0386862531, -0.0639801770, 0.0417933464, -0.0619234666, -0.0720473081, -0.0570536666, 0.0591683686, 0.0567069948, 0.0445456281, 0.0605240017, 0.0441067964, -0.0636498854, 0.0514916554, 0.0602634698, 0.0013015941, 0.0673727244, 0.0105696395, -0.0333671272, -0.0030502453, 0.0477261245, -0.0207217634, -0.0539769456, -0.0377716497, 0.0442868471, -0.0070847943, 0.0328226835, -0.0362745374, 0.0555451959, 0.0112210736, -0.0177804008, 0.0500659123, 0.0162916556, 0.0392650068, -0.0290662199, 0.0026609153, -0.0400052592, 0.0530542731, 0.0193326548, 0.0473628640, 0.0296922252, -0.0403387547, -0.0013991892, -0.0693295375, 0.0036380664, 0.0297423750, 0.0150515065, -0.0179198757, -0.0282791145, 0.0197473839, -0.0439224988, -0.0557422638, 0.0571810901, -0.0410801433, -0.0010820925, -0.0391517729, -0.0168579668, -0.0085851401, 0.0187516287, 0.0055282041, 0.0671262443, 0.0249676257, 0.0118242577, 0.0554282963, 0.0504292473, -0.0544483811, 0.0531845093, 0.0328468233, -0.0546580032, -0.0259895809, -0.0199509002, 0.0622689575, -0.0438549444, 0.0502759367, -0.0490519777, 0.0450846329, 0.0011179522, 0.0623662919, 0.0242038667, -0.0482723564, 0.0258350000, -0.0001987144, -0.0361640379, 0.0612293482, 0.0348531529, -0.0712321326, -0.0624349974, 0.0529898852, -0.0265883617, 0.0224294066, 0.0194051489, -0.0150093809, 0.0460430682, 0.0267750323, -0.0516821295, -0.0367235057, 0.0137115568, 0.0398931578, -0.0356717147, 0.0262169465, 0.0338863134, -0.0095829740, 0.0384293422, -0.0244118236, -0.0415288657, 0.0471492633, -0.0233995579, 0.0554776937, -0.0279339701, -0.0473870039, -0.0508828238, 0.0469061211, -0.0173979215, 0.0194424987, -0.0056708232, 0.0692211688, -0.0501009487, -0.0518506989, 0.0720563233, -0.0582149923, 0.0449943393, -0.0169279091, 0.0382123366, -0.0600042343, 0.0442902148, -0.0588213466, -0.0499407202, -0.0195230469, 0.0188737139, -0.0431607366, -0.0701217204, 0.0165180862, 0.0319624692, 0.0617606789, 0.0581650585, 0.0610117316, 0.0265848711, -0.0667407364, -0.0663529932, 0.0389306024, 0.0429787114, 0.0407667980, -0.0113982446, 0.0020432249, -0.0376374200, 0.0384307355, -0.0702111125, -0.0130821802, 0.0244285166, 0.0189100653, -0.0540598258, 0.0206312910, -0.0160529651, 0.0432577506, 0.0055023953, -0.0559686646, 0.0304863974, 0.0633144826, 0.0066859350, 0.0553479344, 0.0450689569, 0.0446967036, -0.0130763985, 0.0572909415, -0.0671931952, -0.0660068840, -0.0176109523, -0.0108744502, -0.0445511676, 0.0661014915, 0.0089951009, 0.0117577910, 0.0084155202, 0.0386968553, 0.0302244872, 0.0431078598, -0.0418455005, -0.0503486507, 0.0293554589, -0.0449695438, -0.0019970909, -0.0159675553, -0.0254232660, -0.0548071675, -0.0669153854, -0.0221747905, 0.0056366697, 0.0034272522, -0.0613777339, -0.0335249938, -0.0486625656, -0.0322597064, -0.0098881796, -0.0597800687, -0.0200250596, -0.0023010448, 0.0399380177, -0.0299417675, -0.0127526447, -0.0227599256, -0.0714412630, -0.0199992508, -0.0705038086, -0.0698688775, -0.0071268156, 0.0160714611, -0.0703338236, 0.0352798700, -0.0337197185, 0.0339195728, -0.0134078451, -0.0631086454, -0.0323135778, 0.0344954878, -0.0233438425, 0.0207323581, 0.0283510908, -0.0396752059, -0.0021115690, 0.0179371014, -0.0037610903, -0.0623412207, 0.0253610685, -0.0265169218, -0.0136675090, -0.0158683062, -0.0024840310, 0.0474077910, -0.0285297073, 0.0037797913, -0.0441326052, 0.0201952308, 0.0640211254, -0.0077325478, 0.0004407093, -0.0595301650, 0.0297643840, -0.0375168398, 0.0390895680, -0.0266918950, 0.0053452477, -0.0226158574, -0.0118430629, -0.0684731603, 0.0667925775, 0.0229022577, -0.0015169159, 0.0278577283, 0.0101990998, -0.0551829562, 0.0063932687, -0.0273139887, 0.0229024664, 0.0549030006, -0.0028830841, -0.0429716930, 0.0038013682, 0.0261587203, 0.0318880975, -0.0208581053, 0.0545302629, 0.0170096755, 0.0658729374, 0.0567440838, -0.0703893304, -0.0662824810, -0.0626349673, 0.0703331679, 0.0609796643, -0.0087500140, 0.0410509259, 0.0714875311, 0.0010150075, -0.0462500378, -0.0633144677, -0.0102459155, 0.0138644502, -0.0340810195, -0.0188157782, -0.0625896826, 0.0007018298, -0.0324193798, 0.0673137903, 0.0304303393, -0.0039274618, -0.0707322061, 0.0050216317, 0.0524880886, 0.0513398275, -0.0433409214, -0.0470405705, -0.0262390226, -0.0457053185, 0.0195460841, -0.0110509843, -0.0082166642, -0.0112037100, -0.0272525623, -0.0342226252, -0.0285239071, -0.0322285108, -0.0561781526, 0.0218192041, -0.0056912005, -0.0663945302, 0.0094774142, 0.0440482274, -0.0174281858, 0.0670815557, 0.0714504570, 0.0649313182, 0.0448833555, 0.0643547922, 0.0184586048, -0.0133200437, 0.0338125154, 0.0065251887, -0.0262779072, 0.0270079374, -0.0499404818, 0.0038382262, 0.0616874099, 0.0414693132, 0.0141563043, -0.0511483327, -0.0163045749, -0.0106191225, 0.0214683488, 0.0524755865, 0.0436790958, -0.0475991219, -0.0079678819, 0.0565453321, -0.0332991965, -0.0691311136, -0.0212321542, -0.0544583574, -0.0288007781, 0.0654549003, -0.0505392291, 0.0711001754, 0.0348038748, -0.0527982712, 0.0057391152, 0.0661813617, 0.0238769501, -0.0719705969, -0.0345033817, -0.0278884433, -0.0168538354, 0.0188938230, 0.0560589433, -0.0336259790, -0.0492320061, -0.0234761946, -0.0716225803, 0.0118237436, 0.0432033762, 0.0326521322, -0.0694826245, 0.0343723893, -0.0398195013, 0.0241121277, -0.0094504505, -0.0048830137, -0.0068475381, 0.0540935844, -0.0717075989, 0.0173386633, 0.0304372907, -0.0454696119, -0.0591732711, 0.0638078302, 0.0148510858, -0.0299563557, 0.0143112019, 0.0142675489, -0.0059650242, 0.0371172577, 0.0377923995, -0.0189888403, 0.0288280845, -0.0251402408, 0.0563800484, -0.0417162962, -0.0270613655, -0.0230404064, 0.0362764001, 0.0005077422, 0.0317451134, 0.0676760972, 0.0098267496, 0.0343435556, -0.0366014242, -0.0153320879, 0.0500791296, -0.0482082292, 0.0237809718, -0.0161729790, 0.0650785714, 0.0157992095, -0.0684225559, -0.0599012710, 0.0219201148, 0.0606763512, -0.0408441238, 0.0042169914, 0.0638456494, 0.0580661893, 0.0183065534, -0.0445956662, 0.0230142176, -0.0411410034, -0.0044969246, 0.0285832360, 0.0645305812, 0.0126108676, 0.0461510718, -0.0294186920, -0.0154863447, 0.0486128703, 0.0656494051, -0.0058406368, -0.0350036770, 0.0468131155, 0.0420381576, -0.0260014348, -0.0627322048, -0.0218935683, -0.0141934194, -0.0158378705, 0.0093016326, -0.0065270662, -0.0095449984, 0.0412709266, -0.0333375148, 0.0178329796, 0.0719830692, -0.0320991538, 0.0502397195, -0.0711405277, 0.0424724668, 0.0561179221, -0.0640997440, 0.0626792610, -0.0015222281, 0.0568282157, 0.0509953350, -0.0278008617, 0.0278769806, 0.0120286867, -0.0561777055, 0.0092955902, 0.0378188938, 0.0081014484, 0.0111251771, -0.0036272630, -0.0147092678, -0.0514996573, 0.0546220243, 0.0487701371, 0.0442010686, 0.0439521596, -0.0227144845, 0.0530530363, 0.0211528018, 0.0337338969, 0.0241105035, 0.0484885722, 0.0369156823, -0.0438848361, 0.0630840659, -0.0135699473, 0.0612221658, -0.0008910522, 0.0335226208, 0.0118287504, -0.0275438167, -0.0498741157, -0.0005244985, -0.0148974545, 0.0265483558, 0.0356677696, -0.0211268179, 0.0165686905, 0.0320954397, 0.0053971931, -0.0623836368, 0.0009470358, -0.0185982361, -0.0245356411, 0.0096928030, 0.0044788197, -0.0122600608, 0.0078478307, 0.0424181819, -0.0481273755, -0.0419667885, 0.0502540991, -0.0604568124, 0.0677350760, 0.0175376385, 0.0462158993, -0.0030055270, -0.0212287828, 0.0348945037, -0.0527643934, 0.0378778800, 0.0655035973, -0.0279145613, 0.0605135411, 0.0334546342, 0.0279780701, -0.0493636876, -0.0266288146, 0.0409246460, 0.0270566717, 0.0569052994, 0.0622830838, 0.0298059061, -0.0147064812, -0.0548881069, 0.0049177557, -0.0248093270, -0.0497106537, 0.0709566772, 0.0485184267, 0.0386431664, -0.0490778238, 0.0381899849, 0.0459865108, -0.0686505735, -0.0719715431, 0.0122693852, 0.0692614913, 0.0339326486, 0.0122006834, -0.0541198254, -0.0197503231, -0.0320193321, 0.0658805221, -0.0273725092, -0.0720893219, -0.0555331931, -0.0557189360, -0.0480960086, -0.0267195106, -0.0570733175, -0.0431003086, 0.0437714607, 0.0317209065, 0.0206786767, -0.0366182178, 0.0391528010, 0.0076301694, 0.0277158618, 0.0360050350, -0.0499809310, 0.0258150026, 0.0174506083, -0.0420617163, 0.0246624723, 0.0461942405, 0.0688550472, -0.0326185785, 0.0043994337, 0.0253143162, 0.0245799646, -0.0283794105, -0.0709825084, -0.0083486214, 0.0547315925, 0.0025690347, -0.0337162428, -0.0704730079, -0.0278519653, -0.0250729285, 0.0277983174, -0.0567671135, -0.0292629413, -0.0379330441, 0.0650446713, -0.0288554579, -0.0379636362, 0.0378940552, -0.0096903928, -0.0011137351, -0.0292985924, 0.0615108609, -0.0059257597, -0.0452051647, -0.0409529358, 0.0431372523, 0.0057210326, 0.0539623201, -0.0509606302, 0.0527792946, 0.0541378707, -0.0066349208, -0.0413906500, 0.0521991253, -0.0709027871, -0.0558150858, -0.0230715163, -0.0007052571, 0.0487387031, -0.0708688945, -0.0674304217, -0.0678385943, -0.0268185847, -0.0314949006, 0.0301003754, 0.0653901696, -0.0622601286, 0.0525417551, -0.0196866281, -0.0279804617, -0.0103285424, -0.0043796450, -0.0556342266, 0.0223558173, -0.0498952642, 0.0003998429, 0.0300272480, -0.0081005543, 0.0024955794, -0.0593073070, -0.0689884573, -0.0117105916, 0.0544851273, 0.0287533030, -0.0570162758, 0.0606570989, -0.0344720148, 0.0157583579, -0.0020874962, 0.0086360723, 0.0453625694, -0.0336952694, -0.0062248558, -0.0205167122, -0.0346056931, -0.0214865357, 0.0223542526, -0.0455188230, -0.0297527350, -0.0063429102, -0.0419957787, 0.0219780654, 0.0674856752, -0.0466967374, 0.0624789000, -0.0491739362, 0.0088576525, 0.0582130998, -0.0451973379, -0.0215120167, 0.0705790520, -0.0489988625, -0.0067296177, -0.0591720492, 0.0124939308, 0.0032528490, 0.0677796751, 0.0427790284, -0.0442137681, -0.0278629959, 0.0058750659, -0.0574168786, -0.0605905056, 0.0283696204, -0.0692112297, -0.0653153956, -0.0310325138, 0.0592087358, -0.0281553827, 0.0465010628, 0.0560598373, 0.0366984904, 0.0619851053, 0.0017371401, 0.0479051769, -0.0295207091, 0.0422761962, 0.0559201837, 0.0715337843, -0.0219418481, 0.0649528801, 0.0419402868, 0.0072106794, -0.0379028134, -0.0676731542, -0.0312678441, 0.0497829765, 0.0326271504, -0.0511216670, 0.0452157632, -0.0500102714, 0.0611006171, -0.0063440800, -0.0445542112, 0.0644275844, -0.0573596135, 0.0157902241, 0.0308972523, -0.0408164039, 0.0677004606, 0.0512214452, -0.0136609189, -0.0452617742, 0.0304109976, -0.0399944372, 0.0232140869, 0.0155311152, 0.0101092979, 0.0525487959, -0.0470997617, -0.0325762182, -0.0101214275, -0.0279158019, -0.0294719450, -0.0188777894, -0.0415954590, -0.0569138303, -0.0364780053, 0.0588362366, -0.0714135394, -0.0670297742, 0.0206510648, -0.0191702470, -0.0690783635, 0.0434153900, 0.0627635568, 0.0468388051, -0.0670805275, -0.0587690733, 0.0634949505, 0.0077018663, 0.0200192407, -0.0150387175, 0.0564119965, 0.0281595439, -0.0490100831, 0.0626703352, -0.0579542667, 0.0337097049, 0.0541597605, -0.0381261185, 0.0374732018, 0.0241735131, -0.0407734551, -0.0496960655, -0.0468664244, 0.0352413282, -0.0178969055, -0.0326280929, -0.0304862112, -0.0350646377, 0.0111042261, 0.0112401322, 0.0618560016, 0.0322942585, 0.0617611110, 0.0497062132, 0.0173755512, -0.0054594800, -0.0148778744, -0.0299671106, -0.0472516939, 0.0389713794, 0.0335171819, 0.0077570155, -0.0120227337, -0.0338670723, 0.0159291178, -0.0713090822, -0.0273840874, 0.0586453080, -0.0160232671, 0.0084022731, -0.0214880668, 0.0621869564, 0.0438816845, 0.0561392158, 0.0527966917, 0.0583634377, -0.0533093698, -0.0444212109, -0.0147196949, 0.0251298994, 0.0200812370, -0.0598756522, -0.0520157441, 0.0705346018, 0.0448986888, 0.0175655633, 0.0617540926, 0.0082186088, 0.0515540615, 0.0697021633, 0.0450309888, -0.0051852316, 0.0271325633, 0.0420143306, -0.0385212451, 0.0013065860, -0.0450092703, -0.0570167750, -0.0504199713, -0.0248550251, 0.0489225835, -0.0158450790, -0.0081160218, -0.0243184455, -0.0599379912, 0.0420011282, 0.0364273116, -0.0600836426, -0.0021732152, 0.0687419772, 0.0388314202, -0.0503281429, 0.0068636909, 0.0117739141, -0.0246203989, 0.0557447374, 0.0151302367, 0.0609794259, -0.0440387130, -0.0233962536, -0.0404404439, 0.0413060263, 0.0532310754, 0.0625088960, 0.0084384754, -0.0039791092, -0.0475620441, 0.0211762190, -0.0481765531, -0.0326308310, -0.0373615511, -0.0359906182, -0.0635974780, 0.0698111355, -0.0450055525, 0.0061193109, -0.0590649210, 0.0324978903, -0.0518403575, 0.0252895206, -0.0240244232, -0.0700586960, 0.0542728901, 0.0020054579, 0.0286295414, -0.0512243360, 0.0035371855, -0.0582253709, -0.0654529631, -0.0402061120, -0.0245041884, -0.0029589087, 0.0442597643, -0.0048069134, -0.0608489811, 0.0251821578, 0.0636694133, -0.0119891800, -0.0613434762, 0.0221505091, -0.0662659109, -0.0076847970, 0.0050648004, -0.0446848795, 0.0261773393, -0.0039877519, -0.0602122769, -0.0515986085, -0.0467816480, -0.0564932898, -0.0231530219, -0.0510856509, -0.0077388808, 0.0030237809, -0.0245108306, 0.0592769235, -0.0645540506, -0.0412008986, 0.0279085711, 0.0133475736, 0.0159337446, -0.0466734916, -0.0121880695, -0.0427063517, -0.0009719878, 0.0410688072, 0.0196214989, 0.0088380203, -0.0379566699, 0.0148000866, 0.0003510267, 0.0689159632, -0.0361966975, -0.0001887903, -0.0471161082, -0.0071800500, 0.0249955654, -0.0347789787, -0.0340741165, -0.0119978003, -0.0468678698, 0.0585130602, -0.0190020353, 0.0590371639, 0.0151537284, 0.0603199601, 0.0131610930, -0.0257490687, -0.0645771921, 0.0636642426, 0.0396754518, -0.0634155199, -0.0457104817, -0.0715435520, -0.0035541803, 0.0345131531, -0.0157626942, -0.0330321528, 0.0328519493, -0.0096947625, -0.0695878267, 0.0522023290, -0.0510233492, -0.0353040136, -0.0062180385, 0.0493128821, 0.0498858690, 0.0178705305, 0.0144663677, -0.0516198762, -0.0542543791, -0.0416393504, -0.0641105697, -0.0189309046, -0.0349387899, -0.0440943725, -0.0477064922, -0.0466233864, 0.0438166112, 0.0040096194, -0.0015343800, 0.0494679734, -0.0463986509, 0.0552685112, -0.0188639723, -0.0171699189, 0.0477491096, 0.0469204858, -0.0441622883, 0.0398912132, 0.0182074979, 0.0491953567, 0.0062776580, -0.0537038445, 0.0614284724, 0.0655112565, -0.0645868108, -0.0653566197, -0.0283732675, -0.0618565530, 0.0117433518, -0.0008342713, 0.0280887559, -0.0529243425, 0.0178145394, 0.0071062520, 0.0181220695, -0.0089308321, -0.0463618487, 0.0543622077, 0.0241348222, 0.0448239222, -0.0438677296, 0.0093555525, -0.0174578503, 0.0010044053, 0.0239971876, -0.0155305304, -0.0123450272, -0.0177160986, 0.0416721106, 0.0010171756, 0.0186608657, 0.0187201276, -0.0231951773, -0.0721325949, 0.0027799159, 0.0327170715, -0.0443225987, -0.0404725000, 0.0645728260, -0.0628600940, -0.0677071884, 0.0545301586, 0.0621993691, -0.0445608571, 0.0532191843, 0.0258048847, 0.0071592852, -0.0528918914, 0.0277057439, -0.0420847721, 0.0134923980, -0.0271242745, 0.0675490052, 0.0334683359, -0.0252394862, -0.0679182932, -0.0670145079, -0.0706938505, 0.0236778706, 0.0006769523, -0.0049770996, -0.0461341739, 0.0260798261, -0.0181090944, -0.0717042461, -0.0290703326, -0.0408382043, -0.0095786005, 0.0626580268, 0.0594339520, 0.0182465240, -0.0464229137, -0.0203815401, -0.0033881739, -0.0685947761, 0.0631779730, 0.0202334970, -0.0615147799, 0.0318238512, -0.0575203560, 0.0641480982, -0.0007304624, 0.0424393639, -0.0709481090, 0.0030283928, -0.0007840246, 0.0590462983, -0.0168935992, -0.0697061568, 0.0163278729, -0.0171081647, -0.0040985942, -0.0389981382, 0.0310379118, 0.0319831297, -0.0302850492, -0.0654317439, -0.0346621461, -0.0360074602, 0.0689171106, 0.0393359140, -0.0097316690, -0.0664414689, -0.0707068741, -0.0656635463, 0.0430614203, 0.0529369563, -0.0704230070, 0.0070117190, -0.0561850742, -0.0106065273, -0.0429216400, 0.0720458329, 0.0047374666, -0.0587908588, 0.0027746856, 0.0502700210, 0.0647403896, 0.0096713975, 0.0155044645, -0.0557899103, 0.0544804484, -0.0145911127, -0.0476745367, -0.0470938757, -0.0085450485, -0.0312981270, -0.0658955276, 0.0438160077, 0.0013959184, 0.0429780558, 0.0485045090, 0.0057490617, -0.0286193006, -0.0414739624, 0.0362072140, -0.0409669951, 0.0492157340, 0.0665375292, -0.0235869847, 0.0363995284, 0.0163582042, 0.0249344185, 0.0596537739, 0.0507898033, 0.0550570190, -0.0144382156, 0.0343887508, 0.0704927742, -0.0281226560, 0.0462210327, 0.0222804174, 0.0592459887, -0.0251813270, 0.0066253841, 0.0377520323, -0.0095750764, 0.0401885808, 0.0034561083, -0.0269898064, -0.0099602230, -0.0542385653, 0.0578460544, 0.0406822935, 0.0159748346, 0.0587009788, -0.0644298345, -0.0404644646, -0.0284336098, -0.0399519876, 0.0700548738, 0.0604597926, 0.0098131225, -0.0014737770, 0.0720420033, 0.0115157813, -0.0436341390, -0.0004222617, -0.0082891360, 0.0483918935, -0.0287074335, -0.0087904260, 0.0409445912, -0.0179596059, 0.0584332049, 0.0178422779, 0.0291281417, 0.0163465440, 0.0339130461, 0.0593700409, -0.0096073374, 0.0137729645, -0.0700486973, -0.0639752597, 0.0220441595, -0.0605698600, 0.0682283491, -0.0257371292, -0.0360230692, -0.0607831851, 0.0311712325, -0.0068237782, -0.0458419919, 0.0024659634, -0.0118682720, -0.0328783765, 0.0149098113, 0.0569113642, -0.0424106792, 0.0506683439, -0.0100837983, -0.0010876134, 0.0596240908, 0.0146092847, 0.0486623049, -0.0002567917, -0.0379311517, 0.0015731081, -0.0537253693, 0.0678779781, -0.0264012776, -0.0261413082, -0.0103552639, -0.0340215862, -0.0116381869, 0.0385119542, -0.0625446737, -0.0369357467, 0.0694216639, 0.0552792102, -0.0452324748, -0.0079507232, -0.0618852675, 0.0442186221, -0.0613745004, -0.0569217987, 0.0516607761, 0.0094010457, 0.0176630393, -0.0189626850, 0.0204553902, -0.0360999964, -0.0438087285, -0.0013247728, -0.0633997619, -0.0324743055, -0.0412508994, -0.0213210955, 0.0330319777, 0.0362228826, -0.0013399273, 0.0023104697, 0.0446957201, -0.0189641491, 0.0195505917, 0.0099616498, 0.0167961419, 0.0394793823, 0.0174767449, -0.0697734505, -0.0210885666, 0.0468812883, -0.0541443266, -0.0071529299, -0.0474828929, 0.0255882591, -0.0148511007, -0.0719012246, -0.0452333689, -0.0186692476, 0.0496453717, 0.0227626935, -0.0529441647, 0.0653029531, -0.0155024827, -0.0463935249, -0.0437490754, 0.0631466508, -0.0198730417, 0.0673253089, 0.0488880202, -0.0070018247, 0.0537523180, -0.0443678685, -0.0339945033, 0.0612741113, -0.0403510220, 0.0422803909, -0.0141168870, 0.0131012648, -0.0593003891, 0.0433734059, -0.0450900383, -0.0037891045, -0.0584791116, 0.0226042122, 0.0442574695, -0.0293248147, -0.0001106560, -0.0659411401, 0.0693382770, -0.0484981388, -0.0629310012, -0.0067868307, 0.0599681586, 0.0491209924, -0.0539314151, -0.0358828716, 0.0593924075, -0.0108215734, 0.0020756721, -0.0440648645, 0.0601149350, -0.0047791600, 0.0461759865, 0.0596068203, 0.0545553416, -0.0321827233, 0.0059666187, 0.0152385160, 0.0541291833, -0.0048878863, 0.0312892348, 0.0008214638, -0.0657116771, -0.0004640743, -0.0107409097, 0.0176584274, -0.0034130886, -0.0103762038, 0.0532514602, 0.0339291021, -0.0052696913, -0.0089944601, -0.0002965033, -0.0489999279, 0.0292562321, 0.0349896327, -0.0267405882, 0.0185175538, 0.0600137562, 0.0024581179, 0.0162723809, -0.0085557699, -0.0702767149, -0.0212266482, -0.0337214917, -0.0144013949, 0.0191409960, 0.0578922480, 0.0610314906, -0.0606374964, -0.0487005897, 0.0456556305, -0.0332077257, 0.0578362346, 0.0317676887, 0.0257015303, 0.0279913023, 0.0625595748, -0.0059845299, -0.0397678465, -0.0466057137, -0.0375518873, -0.0200875178, -0.0389284343, 0.0518513545, -0.0468430221, 0.0224819407, 0.0178415701, -0.0610806644, 0.0151036754, -0.0344996825, -0.0668288544, -0.0336366817, 0.0407782421, 0.0716905147, 0.0685768425, -0.0119056106, 0.0282414630, -0.0574193373, -0.0276173577, -0.0709720775, 0.0539627522, -0.0161516778, -0.0016442910, 0.0614144355, 0.0167606622, 0.0405865461, 0.0165249705, 0.0192051083, -0.0033898801, -0.0671401992, -0.0676433519, -0.0318289250, 0.0170725659, 0.0365601480, -0.0070619807, -0.0491069853, -0.0105032548, 0.0407222137, -0.0415935814, -0.0387757272, 0.0114537850, -0.0313384421, 0.0485504791, -0.0082484633, -0.0419153944, -0.0423032232, -0.0286388658, -0.0327036977, -0.0378588177, 0.0091604665, -0.0712246373, 0.0296378806, 0.0033713132, 0.0522406623, -0.0436603762, -0.0487434343, -0.0512825958, -0.0056758523, 0.0656096935, 0.0526180193, 0.0528215840, -0.0253224708, 0.0284178108, -0.0260371380, -0.0478376895, -0.0181268528, -0.0241593048, 0.0419353023, 0.0408335254, 0.0148406401, 0.0311876312, -0.0452035666, -0.0492013134, -0.0280596800, 0.0173115805, 0.0624683350, -0.0303012431, 0.0098849759, -0.0391015299, 0.0201402232, 0.0199653879, -0.0655458719, -0.0391189083, -0.0539259426, -0.0187716261, 0.0191002861, 0.0108831748, 0.0384600759, 0.0222956985, -0.0102855265, 0.0600562990, -0.0669232607, 0.0447002426, 0.0276615098, -0.0224548392, 0.0366922095, 0.0152716562, 0.0598655045, 0.0059908479, -0.0681609213, 0.0564961135, 0.0495345294, -0.0459957793, -0.0704804584, 0.0185530186, 0.0565105379, -0.0345645845, -0.0070325360, -0.0324005410, 0.0423507988, 0.0712211728, -0.0287761018, 0.0050972700, 0.0583723485, -0.0031547174, -0.0260331295, -0.0170140117, -0.0117616281, 0.0361163765, -0.0585915223, 0.0284067169, -0.0670359284, -0.0203717314, 0.0040934458, -0.0010123923, 0.0055167973, 0.0557225198, 0.0679032356, 0.0094493479, -0.0349040329, -0.0556668155, -0.0407358073, -0.0188754313, 0.0170781016, 0.0561565608, 0.0143529773, -0.0492135957, 0.0074367151, 0.0315578580, 0.0320506990, -0.0305383615, -0.0110527910, 0.0510875955, -0.0617111251, 0.0034360588, -0.0114704594, -0.0304244235, -0.0212411880, -0.0446015149, 0.0529042333, 0.0177908987, -0.0330382772, 0.0114237070, 0.0208103731, 0.0229455307, 0.0274417102, 0.0411975905, 0.0175848305, 0.0531623363, 0.0496292189, -0.0013237372, 0.0286239311, -0.0236137398, 0.0162494630, 0.0486220270, -0.0715008825, 0.0267661735, -0.0579544231, 0.0151014030, 0.0071235448, 0.0088787824, -0.0690565109, -0.0634118542, 0.0304733589, 0.0609463155, 0.0464266837, 0.0238027871, -0.0441155545, -0.0321017504, 0.0171402171, -0.0357863754, -0.0323058702, -0.0167056732, 0.0061564222, 0.0482580438, -0.0403292924, 0.0122145861, 0.0408650488, 0.0344583169, 0.0441058353, -0.0708794370, 0.0344986841, -0.0101144090, 0.0034056380, -0.0073022470, 0.0329262316, 0.0711180121, -0.0197635405, 0.0189858600, 0.0557756871, -0.0303370319, -0.0342601873, -0.0203911774, 0.0718927085, 0.0362041295, 0.0181775242, 0.0506909192, -0.0351862684, 0.0152939558, -0.0496318676, -0.0657583773, -0.0434473604, -0.0071980506, -0.0394061357, 0.0261641592, 0.0500836223, -0.0208844468, 0.0112092122, 0.0302221403, -0.0078157708, 0.0558217466, 0.0027709529, 0.0495965406, -0.0168714039, -0.0601075068, -0.0591681413, -0.0629610121, -0.0137996525, -0.0655541196, -0.0450679101, 0.0394720510, 0.0358648896, 0.0323146433, 0.0624524504, 0.0319066644, -0.0399235822, 0.0599615127, -0.0260086618, 0.0639530420, -0.0510926396, -0.0149857067, 0.0097700730, 0.0059798360, 0.0088748634, 0.0199103057, 0.0591143817, -0.0266837552, -0.0164056793, -0.0225902013, 0.0336969569, -0.0509896725, -0.0266716257, 0.0686831474, 0.0033435971, -0.0282341689, -0.0509793013, 0.0562114269, -0.0269294269, 0.0133426711, 0.0457967743, -0.0642141327, 0.0595048666, -0.0688256845, 0.0215081424, -0.0157050006, 0.0374502689, 0.0192036927, 0.0173910409, -0.0374471024, -0.0050862730, 0.0366720259, 0.0528503954, 0.0073356330, -0.0125922114, -0.0647303611, 0.0560030937, -0.0059706494, 0.0499181673, 0.0049714893, -0.0361026973, -0.0494041219, 0.0129784420, 0.0061247274, -0.0695281699, 0.0055877194, -0.0161234103, 0.0357888862, -0.0402909704, -0.0653798878, 0.0173755512, 0.0248856917, 0.0345061198, 0.0709327459, -0.0554189906, -0.0098671019, -0.0702309683, -0.0300344378, -0.0155027919, -0.0634258240, 0.0257844478, -0.0624736585, -0.0276992247, 0.0439922512, 0.0294110328, 0.0379792601, 0.0548447967, 0.0424735695, 0.0285699368, 0.0422201529, 0.0026418492, 0.0166633651, -0.0036578178, -0.0050670877, -0.0511293560, 0.0678537786, -0.0169037879, -0.0392014980, -0.0651944727, -0.0478982218, 0.0374569297, -0.0516373925, 0.0462044403, 0.0130337775, -0.0664916784, 0.0715678334, 0.0078346804, -0.0352497436, -0.0130329877, 0.0534002036, 0.0410591140, -0.0563368127, -0.0472750068, 0.0477717221, 0.0362568647, -0.0355838239, -0.0385589600, -0.0669314340, 0.0069329813, -0.0181214996, -0.0580130257, -0.0580210947, -0.0286608897, -0.0333130620, 0.0485399142, 0.0063052773, 0.0147254094, -0.0110556819, -0.0399618298, -0.0387475081, 0.0541536063, 0.0474735200, 0.0416440964, -0.0532049611, 0.0241585821, -0.0167686827, 0.0517133027, -0.0395008735, -0.0621107072, 0.0430374369, 0.0532871634, 0.0693964958, 0.0468726382, -0.0632423162, -0.0537020043, -0.0325195044, 0.0193018913, 0.0333192721, -0.0102186464, 0.0407938138, 0.0271537453, -0.0191168189, -0.0569377989, 0.0701307356, 0.0695988834, -0.0057839081, 0.0560557097, 0.0174755007, 0.0085369647, -0.0617410988, -0.0007904470, -0.0530797839, 0.0576450825, -0.0136934556, 0.0710227787, -0.0652917176, -0.0031140596, -0.0444091819, -0.0007112920, -0.0691631883, 0.0440890417, -0.0241314135, 0.0437419862, 0.0119297653, 0.0516849980, -0.0280624330, 0.0129115433, -0.0636771098, 0.0041956529, -0.0604533032, -0.0163695626, -0.0239747129, -0.0339913219, -0.0006258339, 0.0083664805, 0.0226812437, -0.0515584834, -0.0489832535, 0.0190934911, 0.0099779591, -0.0264031552, 0.0308320597, -0.0182780623, -0.0636413842, -0.0291657597, 0.0120220259, 0.0085235760, -0.0285522491, 0.0240958631, 0.0463627949, -0.0295454338, -0.0550821088, 0.0704987645, -0.0614599288, -0.0011816844, 0.0516672432, -0.0342526510, -0.0037370548, 0.0538811237, 0.0060738847, 0.0145574212, 0.0120138004, -0.0440959223, -0.0668157041, -0.0307509825, 0.0669146478, 0.0046320260, -0.0541813374, 0.0209919736, 0.0347122326, 0.0159678981, -0.0390089080, 0.0663631707, -0.0649328306, 0.0079222843, -0.0157324634, 0.0200795010, 0.0097861290, -0.0283618756, 0.0713066459, 0.0699504912, 0.0335925296, -0.0377824195, -0.0268571936, -0.0585224032, -0.0653500184, -0.0095819756, -0.0598023348, 0.0392062142, -0.0678567439, -0.0083031580, 0.0221609920, -0.0144861005, -0.0588431470, 0.0466361195, -0.0064144358, 0.0619978309, 0.0303530693, -0.0099727474, -0.0543113314, 0.0086894631, 0.0660568327, 0.0638242364, 0.0522517636, -0.0422976166, -0.0625188053, 0.0297522545, 0.0002185926, -0.0596888065, -0.0397681408, 0.0027896166, 0.0473981202, 0.0244461894, 0.0484070480, -0.0221914276, -0.0592162162, -0.0260498710, 0.0691626221, 0.0356608182, 0.0060340390, 0.0331399813, 0.0125087798, -0.0485122837, 0.0372531489, 0.0390008241, -0.0151864029, -0.0235105380, 0.0070212036, -0.0335792452, -0.0533196256, 0.0230465531, -0.0653282106, 0.0523789376, -0.0207928233, -0.0324090905, -0.0618362129, 0.0312146246, 0.0116836280, 0.0390887484, 0.0619347394, 0.0345264375, 0.0299438834, -0.0490947515, -0.0545858741, 0.0499396026, 0.0613073558, 0.0320869014, 0.0036012754, -0.0349911824, -0.0267879069, 0.0253695846, 0.0489538163, -0.0150691569, 0.0390476063, -0.0279361904, 0.0010771006, -0.0302998312, -0.0451666042, 0.0208837613, -0.0151518323, -0.0547106564, -0.0575625636, -0.0710772946, -0.0495512411, -0.0226288810, -0.0336749479, 0.0464191958, 0.0250710547, -0.0256054662, -0.0202470906, 0.0453155637, -0.0564413257, -0.0123559535, 0.0008621737, -0.0586328171, -0.0368146636, 0.0350110084, -0.0618755296, 0.0240000784, -0.0077120885, 0.0175446197, 0.0413248837, -0.0325134993, -0.0349774361, -0.0357527547, 0.0034620985, 0.0347662643, -0.0345462784, 0.0397320539, -0.0048730522, -0.0357343964, 0.0045932084, 0.0075052008, 0.0224160776, -0.0529803485, -0.0341846682, 0.0282293186, -0.0527077653, 0.0407273099, 0.0503647700, 0.0598479658, -0.0206218623, 0.0502172261, -0.0702419803, 0.0372177064, -0.0376297310, -0.0003187656, 0.0249722227, 0.0257355645, -0.0307352208, -0.0410340279, -0.0350522138, 0.0237705633, 0.0112722591, 0.0675273985, -0.0022371039, 0.0489257500, -0.0365072712, -0.0512733385, 0.0038018897, 0.0258983001, -0.0142755657, -0.0594187006, -0.0549524762, 0.0312127471, 0.0126419887, -0.0699641258, 0.0253072605, -0.0070684627, -0.0354678184, -0.0717598870, -0.0631291866, 0.0507942438, -0.0201984122, 0.0360461250, -0.0556594506, 0.0320429727, -0.0682177171, -0.0161029510, 0.0495761186, 0.0465343595, -0.0374941789, 0.0392961130, 0.0620090812, 0.0493149459, -0.0687908083, 0.0508955866, 0.0361392647, -0.0720805302, 0.0532018095, -0.0072702989, -0.0262433924, 0.0282345116, -0.0289625339, -0.0552931130, -0.0188855827, -0.0061655417, 0.0094745755, 0.0139272213, -0.0502085574, -0.0224861540, 0.0402647331, -0.0585591048, 0.0096646696, 0.0353302881, 0.0254188254, 0.0186241344, 0.0383437574, -0.0143238790, -0.0084319487, -0.0721586272, 0.0472848341, -0.0465361327, 0.0358411446, 0.0403496772, 0.0559848100, -0.0026254505, 0.0071003810, 0.0021374822, 0.0499564633, 0.0048107132, 0.0680481791, -0.0220135301, 0.0558479279, 0.0326263383, -0.0622723438, -0.0171907730, 0.0481536165, -0.0480673090, 0.0000303835, 0.0227858573, 0.0141172484, 0.0525970086, 0.0703366995, 0.0310795903, 0.0243459269, 0.0234553069, -0.0464282483, 0.0337616652, 0.0427395105, -0.0196680613, -0.0328175016, 0.0129659548, -0.0291593932, -0.0581530333, 0.0585486889, 0.0134172961, -0.0017005056, -0.0116728432, -0.0168438219, -0.0088498965, 0.0321850106, 0.0149433091, -0.0037091449, 0.0530798137, 0.0555738956, 0.0488043278, 0.0690004975, -0.0422810465, 0.0226232409, 0.0572980344, 0.0573874563, 0.0428980291, -0.0019594952, -0.0426948741, 0.0193748102, -0.0529024564, -0.0241667703, -0.0652940273, 0.0254710689, -0.0119900741, -0.0319376886, 0.0262162909, -0.0322432220, -0.0668030232, 0.0246096775, 0.0504364371, 0.0468909293, -0.0054018199, 0.0555540174, 0.0239510015, -0.0042161122, -0.0639497787, -0.0225770064, -0.0398367420, 0.0437951013, -0.0202338770, -0.0238273256, -0.0566707924, 0.0010928139, 0.0014527664, -0.0097961240, 0.0243036300, -0.0558215007, -0.0287119560, 0.0683275312, -0.0188698396, -0.0355394483, -0.0319898911, 0.0527175367, -0.0226726718, -0.0539836213, 0.0411186814, -0.0375287645, 0.0450198203, 0.0272142813, -0.0029370934, -0.0661992505, -0.0506685376, -0.0242566578, -0.0336324461, 0.0399492681, 0.0117638111, -0.0035353079, -0.0327636302, -0.0127068758, 0.0547265410, 0.0130080879, 0.0053298473, -0.0325077511, 0.0589120835, 0.0139408335, -0.0318238325, -0.0211311691, -0.0645283908, 0.0275187492, -0.0349718109, 0.0450369194, -0.0662322342, -0.0051632375, 0.0111294463, -0.0126601271, -0.0381205939, 0.0236491337, 0.0023396015, -0.0614365265, -0.0702922046, 0.0439695939, 0.0307953060, 0.0192290246, 0.0446205288, -0.0652455688, 0.0526925176, 0.0238735899, 0.0356982425, -0.0095302314, 0.0167267472, -0.0460946485, 0.0074896589, -0.0420392081, 0.0541711897, 0.0014084652, 0.0130174533, -0.0275732726, -0.0642686933, 0.0134955272, 0.0034873039, 0.0094486400, 0.0444434062, -0.0475310385, -0.0177162737, 0.0059665218, -0.0227445960, 0.0009645522, 0.0103938431, -0.0623437837, 0.0632295460, -0.0229468048, 0.0443131700, -0.0089626312, -0.0168136097, -0.0474616103, -0.0268185847, -0.0433904268, 0.0192261338, -0.0654442012, -0.0573144108, -0.0452063382, -0.0090696886, -0.0289621875, 0.0013150647, -0.0119783580, -0.0549886078, 0.0693202466, 0.0573592931, -0.0228372514, 0.0489892066, -0.0309315100, 0.0286581367, 0.0604508668, 0.0405419618, -0.0481107198, 0.0363858640, -0.0676539987, -0.0716702417, -0.0041363612, 0.0092486516, -0.0459383130, 0.0078353360, -0.0049552992, -0.0054155216, -0.0609323122, 0.0516998321, 0.0426034257, -0.0229698084, -0.0150602609, -0.0565338433, 0.0086866766, -0.0315210186, -0.0135898888, -0.0520931035, 0.0650992841, 0.0023710206, -0.0224667117, 0.0460507870, -0.0391050056, -0.0133632123, -0.0684492290, 0.0007741973, -0.0422647335, 0.0198630914, 0.0385608003, 0.0474887267, -0.0604663268, 0.0169652104, 0.0571964085, 0.0248024464, -0.0456113890, -0.0154671408, -0.0681415275, -0.0114856884, 0.0309449509, 0.0706515461, 0.0610529184, -0.0027112961, -0.0315823257, 0.0472009182, 0.0719796568, 0.0307445601, 0.0358276516, -0.0268127173, -0.0708750337, -0.0434719846, 0.0123806968, -0.0633137450, -0.0573447980, -0.0040533096, 0.0544550270, -0.0626957938, -0.0160926953, 0.0661003441, -0.0642933846, 0.0326756686, -0.0285573564, -0.0046485290, -0.0461855158, 0.0652961284, -0.0353051312, 0.0385847688, -0.0717336014, 0.0549772382, 0.0386712998, 0.0136611089, 0.0672296584, -0.0490876287, 0.0177834630, -0.0043930784, 0.0375058129, 0.0446334183, 0.0006751940, -0.0299457237, 0.0386642143, 0.0336501151, -0.0589664318, 0.0590790659, 0.0347381979, 0.0297926515, 0.0128748417, -0.0232915021, 0.0428068861, 0.0651107579, -0.0031847432, 0.0523117408, 0.0494966060, -0.0137500465, -0.0114869960, 0.0005430356, 0.0640432537, -0.0426353067, -0.0469413251, 0.0211028010, 0.0120748356, 0.0665773451, -0.0380228274, 0.0359402671, -0.0523137078, 0.0590339005, 0.0304098502, -0.0074629709, -0.0499333218, -0.0340335816, -0.0088014901, 0.0683556944, -0.0432298407, 0.0433778167, 0.0641831458, -0.0464382246, 0.0322054401, 0.0060821101, 0.0436398461, -0.0000940189, 0.0585250556, -0.0350065492, 0.0643632710, 0.0377125069, 0.0341860801, -0.0046376660, -0.0568203852, 0.0123516694, -0.0099838451, -0.0184653178, 0.0160343796, 0.0517602265, -0.0049718320, 0.0398740470, 0.0379013866, 0.0659180433, -0.0378580056, -0.0419735163, 0.0460378155, 0.0134840161, 0.0205253512, 0.0124095827, 0.0425321683, -0.0583142564, -0.0449109189, 0.0590982884, 0.0154951215, 0.0544444174, 0.0086534992, -0.0078841373, -0.0538353026, -0.0096298754, 0.0063736588, -0.0698068291, -0.0400723480, -0.0469926149, 0.0541315526, -0.0654087216, -0.0206054971, -0.0298000202, -0.0211241320, 0.0328279287, -0.0541914403, -0.0541113243, 0.0548051149, -0.0342647806, -0.0329681113, 0.0436379910, 0.0189957246, 0.0431076735, -0.0719347596, 0.0658789277, 0.0266829953, -0.0147575513, -0.0007235631, -0.0026642159, 0.0552177280, 0.0652157664, -0.0513548777, 0.0645205528, 0.0581711531, -0.0214647688, 0.0685223043, 0.0281364918, -0.0235954337, -0.0624117665, -0.0009810552, 0.0202781782, 0.0656998307, -0.0434364378, 0.0304092318, 0.0073666871, 0.0079382285, -0.0299657360, 0.0333246440, 0.0513566509, -0.0545201972, 0.0685070902, 0.0355016142, -0.0013871938, 0.0584607869, -0.0334243178, -0.0501047671, 0.0603113174, -0.0107060149, 0.0661831945, -0.0290674753, 0.0485808179, -0.0708344653, 0.0321904346, -0.0480140559, 0.0507825762, -0.0370285586, 0.0053387806, -0.0286663584, 0.0022785515, 0.0145225450, 0.0082780719, 0.0646585077, 0.0686284006, 0.0078174770, -0.0408837646, 0.0328030810, -0.0259271376, -0.0107709877, 0.0177619234, -0.0000233129, -0.0175840929, -0.0092175230, -0.0284398571, 0.0159357563, -0.0296443366, -0.0710900277, -0.0269105174, -0.0200241469, 0.0269514024, -0.0480063818, 0.0407275483, 0.0265057012, 0.0460601002, -0.0062549636, 0.0330451950, -0.0098457299, -0.0059567243, 0.0287082419, 0.0411816761, -0.0306833610, -0.0155783966, 0.0510757267, 0.0089883208, 0.0032776967, 0.0537844896, 0.0018900335, 0.0284389779, 0.0198404863, -0.0438198820, -0.0223774984, 0.0489324108, 0.0263159499, 0.0332029909, 0.0701146126, -0.0120366886, -0.0602568053, -0.0567218252, -0.0257403813, 0.0567791462, -0.0645276681, 0.0521508828, 0.0120056123, 0.0699113160, 0.0457572341, 0.0103271976, 0.0140866563, -0.0381600484, -0.0025241897, 0.0185847282, -0.0675091222, -0.0074816793, 0.0225084350, -0.0375554338, -0.0227041952, 0.0546201617, 0.0260395333, -0.0686979443, -0.0293074697, 0.0666337162, 0.0606939346, -0.0451219529, -0.0284393579, -0.0357982665, 0.0144414157, -0.0660106912, 0.0617825240, 0.0411174446, -0.0367416218, -0.0204552524, -0.0110034980, -0.0527041033, -0.0565669499, -0.0258819386, 0.0324537605, -0.0489852689, -0.0165619478, -0.0088361949, 0.0413753018, 0.0711840391, 0.0706460625, 0.0069900900, -0.0350120552, -0.0139338449, -0.0018895194, -0.0586665422, -0.0375917740, 0.0173528939, -0.0315041207, -0.0699387118, -0.0099342056, -0.0040660426, 0.0388669893, -0.0015964285, -0.0639175847, 0.0426419303, -0.0292997286, 0.0543958545, -0.0015102923, 0.0103424266, -0.0229226984, 0.0663178414, -0.0636458397, -0.0306995176, 0.0078852549, -0.0354878791, 0.0521176755, 0.0053250641, -0.0575279258, -0.0286682546, -0.0441400222, -0.0253671743, 0.0498824790, -0.0167392604, 0.0672384948, 0.0668455064, -0.0449494421, -0.0351962335, 0.0590671301, 0.0473588854, 0.0095200837, -0.0693089068, 0.0244112909, 0.0411539599, -0.0532445870, 0.0643046647, -0.0203768760, 0.0674889684, -0.0618807450, 0.0538711399, -0.0278936736, -0.0008629486, 0.0499488637, 0.0022385344, -0.0289040655, 0.0405556932, 0.0456139371, -0.0618678220, 0.0688738674, 0.0228538886, 0.0688668638, -0.0569124371, -0.0533511117, 0.0336287692, -0.0135983229, -0.0085811466, 0.0433491468, -0.0206440426, -0.0059257075, 0.0477378443, -0.0570135079, 0.0192143992, 0.0614227206, 0.0462752953, 0.0319089890, -0.0117623508, 0.0489367619, -0.0456400402, -0.0515298173, -0.0621562004, -0.0555550940, -0.0295066163, -0.0349702947, -0.0079635903, 0.0198717341, -0.0136539154, -0.0318866894, -0.0512250587, -0.0422636494, -0.0299301185, 0.0064052492, 0.0659458786, 0.0036297217, 0.0503135994, 0.0365807638, 0.0077338517, -0.0618327893, 0.0528575331, -0.0077317059, -0.0644984692, -0.0280306861, 0.0357659906, -0.0259206332, -0.0685712695, -0.0345233753, 0.0270779505, 0.0229554400, -0.0503555015, -0.0241986886, 0.0332469195, 0.0170192048, -0.0405174606, 0.0298432112, 0.0173730776, -0.0126131512, 0.0523804128, -0.0616793782, -0.0624124557, 0.0266477615, -0.0603469685, -0.0191849582, 0.0491576120, 0.0614444911, 0.0031582490, -0.0480202511, 0.0677231848, 0.0510087535, -0.0636169910, 0.0197248757, 0.0616427958, -0.0257550403, 0.0563076884, -0.0452706367, 0.0446188897, -0.0087524205, 0.0578363687, 0.0547844619, -0.0645201504, 0.0491676554, 0.0622551739, -0.0479900874, 0.0043415502, -0.0156534873, -0.0492649600, -0.0612273663, 0.0490031615, 0.0343743190, -0.0417310782, -0.0431518592, -0.0370314121, 0.0041617900, 0.0379605368, 0.0047219321, 0.0489204675, 0.0558360815, 0.0100770742, -0.0447802022, 0.0622393191, -0.0493443832, 0.0340924785, 0.0567947626, 0.0230771229, 0.0096464306, 0.0694854856, -0.0344985463, 0.0229547024, -0.0519379377, -0.0707351491, -0.0410907418, 0.0255966932, 0.0262180120, -0.0356963873, -0.0149604976, 0.0300163031, -0.0492131338, -0.0106839575, 0.0677848309, 0.0044518784, -0.0455066413, 0.0020351708, -0.0250403397, -0.0496448427, -0.0183488838, -0.0310065821, -0.0204107575, -0.0107271969, -0.0024488643, 0.0205651149, -0.0120369792, -0.0062892959, 0.0477523655, 0.0072849393, 0.0579756498, -0.0010453761, 0.0476598442, -0.0029754266, -0.0647214353, 0.0581452698, 0.0263936520, -0.0700960830, -0.0017164946, -0.0701255575, -0.0228173435, -0.0149070546, 0.0375905335, -0.0050436854, -0.0158631280, -0.0071411133, -0.0006106049, -0.0370009765, 0.0460085124, -0.0550913811, 0.0594014227, 0.0521603599, 0.0089828297, -0.0151259899, 0.0519889519, 0.0585375279, -0.0455430821, 0.0290479138, -0.0279252976, 0.0319722220, 0.0435271338, -0.0331415497, -0.0040391460, -0.0521937422, 0.0143917277, 0.0438878983, 0.0342569724, 0.0091354176, -0.0613726564, 0.0508210659, -0.0535004809, 0.0167762563, 0.0284768641, 0.0402069911, -0.0289726146, 0.0045293868, -0.0274532251, 0.0372463390, 0.0095024481, -0.0448124297, -0.0027032569, -0.0420407206, -0.0010717362, -0.0244156606, -0.0265242681, -0.0224574022, -0.0586305782, 0.0629763603, -0.0561039448, -0.0228454061, -0.0245238207, -0.0186185576, -0.0540756062, -0.0664175525, 0.0131742731, -0.0287370272, 0.0489795730, 0.0643799156, -0.0626549646, 0.0718254000, -0.0024239644, -0.0658756047, -0.0636111721, -0.0007865727, -0.0492584556, -0.0576887019, 0.0696107149, 0.0515669659, 0.0592448413, 0.0462832451, 0.0128136054, 0.0418205857, -0.0443367772, 0.0355651379, 0.0591537356, 0.0570634604, 0.0252683088, 0.0411505178, 0.0065819547, -0.0536876321, 0.0651693940, 0.0464176610, -0.0243686363, -0.0293095671, -0.0126825273, -0.0215336122, 0.0629832298, -0.0251274556, 0.0667455494, -0.0173493810, 0.0240364000, -0.0589910522, -0.0158428252, -0.0495914519, -0.0512534678, -0.0217407569, 0.0281190276, -0.0449444726, -0.0574432723, 0.0156579763, -0.0296189897, -0.0538181104, 0.0160315633, -0.0506127700, -0.0383694172, -0.0304141678, 0.0287748277, -0.0482509360, 0.0315773040, 0.0184671208, 0.0342751890, -0.0134208538, -0.0630653724, 0.0528689921, -0.0289828889, -0.0094487295, -0.0614703558, 0.0037399232, 0.0147834122, -0.0107948519, -0.0052149296, 0.0475312248, 0.0368646458, -0.0469190404, 0.0713179410, 0.0496378541, -0.0130710490, 0.0507972538, -0.0381559692, -0.0189928822, 0.0535715967, 0.0263094306, 0.0632590204, 0.0655868798, 0.0112989321, 0.0262475386, -0.0184456520, -0.0689454079, 0.0362641811, -0.0599342398, 0.0091068521, 0.0711596459, -0.0510923639, 0.0095580369, 0.0267141089, -0.0286074467, -0.0570642836, -0.0185697414, -0.0302395560, 0.0062989444, 0.0148811415, 0.0655652881, -0.0706439018, 0.0161877424, -0.0126568042, 0.0260834768, 0.0000586733, 0.0707676709, 0.0235213414, 0.0039284229, 0.0096411332, -0.0527321324, -0.0187789537, -0.0554904677, 0.0261512324, -0.0669310763, 0.0169064850, -0.0370845981, 0.0160324574, 0.0178798735, -0.0640535653, 0.0477410778, -0.0077216178, 0.0422442779, -0.0325778499, 0.0444498882, -0.0251378119, -0.0095022395, 0.0105021745, -0.0313528255, -0.0287228487, 0.0561524183, -0.0444982238, -0.0085437447, 0.0625132024, 0.0368577987, -0.0445276983, 0.0296543837, 0.0225237161, 0.0315211564, 0.0614738613, 0.0420760810, -0.0208487809, 0.0644998550, -0.0532808751, -0.0582673885, 0.0608712435, -0.0587277450, -0.0660100505, 0.0469025373, 0.0377645567, 0.0494466722, 0.0053254068, 0.0215350389, -0.0123368874, 0.0514193028, -0.0621399768, -0.0543764234, -0.0341934115, 0.0379905999, 0.0502583534, 0.0445698723, -0.0354572348, -0.0181476697, 0.0701023638, -0.0665950328, 0.0203867853, -0.0047361553, 0.0396989211, 0.0181623995, 0.0322359279, 0.0535814315, -0.0431170315, -0.0499711782, -0.0022720322, -0.0438891873, 0.0049588084, -0.0182186626, -0.0661776438, 0.0116841495, 0.0299295858, 0.0361291468, 0.0325585976, 0.0177850276, 0.0027333722, 0.0401628911, -0.0512066297, -0.0023173243, -0.0284252800, 0.0190590769, 0.0037669614, -0.0697068796, -0.0526011027, -0.0692411363, -0.0568157881, -0.0255167857, -0.0065933317, -0.0564276800, -0.0029100776, 0.0045390576, 0.0347927958, 0.0302947387, -0.0365115404, -0.0716792420, 0.0571358800, 0.0005915239, 0.0527745411, 0.0684031695, -0.0102530383, -0.0419565514, -0.0683781803, -0.0686427802, 0.0467035174, -0.0203423947, 0.0326864943, 0.0323379114, 0.0678541213, -0.0341810733, 0.0527412295, -0.0078101158, -0.0275187120, -0.0310291052, -0.0568187833, -0.0457868092, 0.0485361293, -0.0661025494, -0.0358993709, 0.0065403357, 0.0660736710, -0.0426922962, 0.0585335195, 0.0385866091, 0.0414166674, 0.0628596544, 0.0024954900, 0.0455901921, 0.0391772017, 0.0583947599, -0.0567766093, 0.0531406850, 0.0294408724, -0.0116106756, 0.0682951659, 0.0500902086, -0.0181872807, -0.0285868309, 0.0540043414, -0.0475414842, -0.0263154022, -0.0083958730, 0.0486144200, -0.0705123618, 0.0690202713, 0.0476485193, -0.0483485311, 0.0067339912, -0.0292061940, -0.0550695285, -0.0485860631, -0.0285064094, -0.0054991618, 0.0688262880, 0.0607331991, -0.0499876291, -0.0193837434, -0.0064851195, -0.0572898611, -0.0687156692, -0.0633369014, -0.0362534076, 0.0278039947, 0.0508767664, 0.0704423636, 0.0576162338, -0.0180211700, -0.0317185484, 0.0561398566, 0.0642953217, -0.0641719997, 0.0322065726, -0.0005928949, -0.0450460240, -0.0420213491, -0.0436590165, -0.0578192472, 0.0130579695, 0.0048605278, -0.0200009532, 0.0559549183, 0.0117566362, -0.0607138239, 0.0548782200, -0.0062606409, -0.0162951462, 0.0194807351, 0.0617243350, 0.0367345884, -0.0672169775, 0.0367382318, 0.0691297054, -0.0257325694, -0.0104679987, -0.0400239117, 0.0642593205, -0.0449273512, 0.0484217778, 0.0109900758, -0.0255228914, 0.0592704713, 0.0444220528, -0.0308596417, -0.0010456517, 0.0070634931, 0.0131492317, 0.0428303257, -0.0645826086, 0.0241693184, 0.0065892860, -0.0679296330, 0.0116555318, -0.0326825529, -0.0234538764, 0.0262747407, -0.0005308688, 0.0616082698, 0.0226470903, 0.0559761971, 0.0162457600, -0.0466852933, 0.0122337043, 0.0372055620, 0.0504688397, -0.0710839927, 0.0450160652, 0.0281115249, -0.0071361363, -0.0061485618, -0.0306549855, 0.0641914606, 0.0148657262, 0.0115864500, 0.0401346534, 0.0553537756, -0.0702779591, 0.0203296095, -0.0258009657, -0.0324658379, 0.0614168048, 0.0668970793, 0.0544123054, 0.0409154594, -0.0134664513, 0.0438628271, 0.0688003898, -0.0082110912, 0.0056425929, 0.0384133756, -0.0462882742, 0.0253876522, -0.0115618967, -0.0375237577, 0.0345064104, 0.0088407770, -0.0688118190, 0.0308683142, 0.0601683706, -0.0373600051, -0.0382675193, 0.0265211016, 0.0420904309, -0.0463565812, -0.0127993785, 0.0194064751, -0.0709317476, -0.0629481599, -0.0700465292, 0.0250031874, -0.0069235340, 0.0185659230, -0.0548558086, -0.0088092536, 0.0127152875, 0.0262546614, -0.0602358505, -0.0702415481, -0.0143189766, 0.0381794944, -0.0218969062, -0.0142392069, -0.0447793230, -0.0475944579, 0.0574550927, -0.0043994114, 0.0145612583, 0.0042848215, -0.0166209824, -0.0615912117, 0.0701299757, 0.0010315776, -0.0200882405, 0.0396384522, 0.0178374723, -0.0487380326, 0.0042814463, -0.0495247394, -0.0712700933, 0.0180184171, 0.0510643125, -0.0200855397, -0.0359780900, 0.0596252680, -0.0320766307, 0.0626813173, 0.0547210127, -0.0311561748, 0.0204253495, 0.0363643542, 0.0422258973, 0.0130845904, 0.0675382763, -0.0150816143, 0.0480808690, 0.0545415133, -0.0233777910, 0.0559096187, -0.0422551669, -0.0064688250, 0.0605297238, 0.0109064505, -0.0041968450, -0.0071937963, -0.0330853723, -0.0548635349, 0.0336209014, 0.0590051562, -0.0459034890, 0.0559292436, -0.0510639884, -0.0541071594, 0.0401984528, 0.0255484059, -0.0586531721, -0.0056563392, 0.0476319864, 0.0611393899, 0.0313373730, 0.0010080040, 0.0017320290, -0.0558886081, 0.0537978560, 0.0284634605, -0.0080290958, -0.0062679574, 0.0408464298, 0.0365668759, 0.0696068406, 0.0084803030, -0.0620239899, 0.0145416111, -0.0696592852, -0.0530606173, 0.0271720514, -0.0651934221, -0.0019671693, 0.0579671413, -0.0331944078, -0.0466576442, -0.0347632356, -0.0286707319, -0.0478627943, -0.0284403525, 0.0452995077, 0.0347125754, -0.0471516699, 0.0034539029, 0.0476813540, 0.0042641163, 0.0102854744, 0.0111828744, 0.0677187592, 0.0304335952, -0.0706982911, 0.0397684127, 0.0480852872, -0.0666813254, 0.0444052070, 0.0185622051, 0.0643890947, -0.0257009603, -0.0327773243, -0.0670589358, -0.0245976523, 0.0175535157, 0.0487748384, -0.0212078243, -0.0638072044, 0.0230491683, -0.0313305967, 0.0543191582, -0.0247886777, 0.0602828860, 0.0412381291, -0.0216168202, -0.0060778111, 0.0288531184, -0.0224255361, -0.0456751920, 0.0355718508, -0.0556674525, -0.0491655394, -0.0402255021, -0.0274774320, 0.0605219454, 0.0344518349, -0.0624693409, 0.0397522375, 0.0024055690, -0.0627366602, -0.0501995757, -0.0313438103, 0.0173130259, -0.0196903087, -0.0494659096, 0.0577747822, -0.0131607130, 0.0604474396, -0.0550460592, 0.0129756406, -0.0526679829, 0.0690918863, -0.0056214929, 0.0020484552, 0.0447889119, -0.0718703344, 0.0482549295, 0.0492499545, -0.0569830686, -0.0620763116, 0.0119848251, -0.0610226989, 0.0358800665, 0.0026893392, -0.0585777909, 0.0499803126, 0.0430290774, 0.0675001591, -0.0488699004, -0.0199648365, 0.0598367453, -0.0007430241, -0.0687043443, -0.0161710717, -0.0450163260, -0.0671095923, -0.0654251054, 0.0470951647, 0.0285417512, -0.0653904527, -0.0714326277, 0.0715060681, 0.0252137780, -0.0567179695, -0.0504909456, -0.0019562468, 0.0643200427, -0.0621875674, -0.0711730346, -0.0089330152, -0.0078363717, 0.0600058585, 0.0047317371, 0.0077535585, 0.0381534100, 0.0620772094, -0.0155203789, 0.0169894546, -0.0493905321, 0.0712837726, -0.0231877975, 0.0646856278, -0.0368815958, 0.0719980597, 0.0148501024, -0.0031228885, 0.0192801580, 0.0667428374, 0.0489775464, -0.0478281751, -0.0405729339, -0.0169659890, 0.0167879164, 0.0170930773, 0.0660223216, 0.0587125272, -0.0072632581, -0.0543796420, 0.0193589628, -0.0119450465, 0.0312639549, 0.0068825185, -0.0445537642, -0.0420844257, 0.0518577695, -0.0662554130, -0.0174288750, -0.0523697808, 0.0572030693, -0.0657796562, 0.0393215269, 0.0649849176, 0.0039146766, -0.0510384031, -0.0434797108, -0.0528589413, 0.0316234156, -0.0097882263, 0.0294846445, 0.0579804182, -0.0133262537, 0.0237455964, -0.0651349351, 0.0498249903, -0.0088690817, -0.0678601339, -0.0054914653, 0.0664853305, 0.0618428737, 0.0127274543, -0.0009131432, -0.0212765113, -0.0419272818, -0.0548214316, 0.0558904707, -0.0016784817, -0.0632422194, 0.0491787046, 0.0235674083, -0.0110369809, -0.0212521143, -0.0008776262, -0.0329052545, 0.0657555014, 0.0292535648, -0.0646260902, -0.0641121343, 0.0690277517, -0.0444477238, -0.0381781682, -0.0040676072, 0.0235304609, -0.0369252674, 0.0607409775, -0.0049781129, -0.0323224925, -0.0676313564, -0.0115477666, 0.0342484340, 0.0241626054, -0.0258697569, 0.0507245585, 0.0585113764, -0.0066529512, 0.0327375233, -0.0323871709, -0.0197269917, -0.0395341143, 0.0034709424, 0.0565357059, -0.0570509657, -0.0116764195, 0.0074509606, 0.0201602131, -0.0535847768, 0.0374059752, 0.0266460180, -0.0316857025, 0.0024741068, -0.0560422912, 0.0660848469, 0.0627712905, 0.0559611022, 0.0578768849, 0.0291007385, 0.0715991855, -0.0100395270, -0.0042148605, 0.0185240284, 0.0573652685, 0.0587705821, -0.0259304754, -0.0154976137, 0.0460250303, -0.0407181904, -0.0039184242, -0.0007909611, 0.0397390053, 0.0010998845, 0.0693712682, -0.0189504325, -0.0082821548, -0.0110238865, -0.0159844831, 0.0207611099, 0.0385584310, 0.0070387200, 0.0625470281, -0.0337233134, -0.0343154892, 0.0451736450, -0.0012956262, 0.0333617404, 0.0284208953, -0.0102179721, 0.0360282287, 0.0084858090, 0.0081426576, -0.0282163434, -0.0358451381, -0.0705554262, -0.0117283836, -0.0464163423, 0.0019316599, 0.0405630544, 0.0090567693, 0.0348562673, 0.0274416804, 0.0411743447, 0.0098430142, 0.0518260077, -0.0543018356, 0.0609659106, 0.0589780807, -0.0540326759, -0.0407691710, -0.0264120996, -0.0244504027, -0.0468516946, 0.0298807546, -0.0076478049, -0.0491407439, -0.0250066333, -0.0150331445, 0.0692648441, -0.0443831980, 0.0423423648, 0.0378205329, -0.0367235579, 0.0317028239, -0.0216443166, 0.0637387186, 0.0563670248, 0.0029253289, -0.0713334158, 0.0074783191, 0.0491110459, 0.0354323015, 0.0065522566, -0.0413041525, -0.0335544161, -0.0184090361, 0.0094812140, -0.0335850269, -0.0166851990, 0.0324022248, -0.0411759652, -0.0475803539, 0.0671595186, -0.0082626939, 0.0408218428, -0.0609173588, 0.0599349886, -0.0246226899, 0.0181376040, 0.0369317010, 0.0121924579, -0.0115291178, 0.0366837755, 0.0216812044, -0.0023894161, 0.0532954037, -0.0348077118, 0.0692423284, 0.0227525979, -0.0025035962, 0.0628637224, -0.0576622561, 0.0043262169, 0.0466159508, -0.0420495346, -0.0075506419, 0.0094793066, 0.0500569493, 0.0692390054, 0.0565938950, -0.0696865767, -0.0241539516, 0.0693528205, -0.0168810748, -0.0711222365, 0.0431122482, 0.0218747631, 0.0428873450, 0.0114960596, -0.0596335046, 0.0672113001, -0.0553874187, 0.0220991001, 0.0298494697, -0.0021161586, 0.0173940808, -0.0129198916, -0.0597619154, 0.0189007223, -0.0123849288, -0.0229396969, 0.0472682938, 0.0562140197, -0.0471531525, 0.0433994755, -0.0351094604, -0.0437283441, -0.0092761293, 0.0351255164, 0.0038768873, 0.0522159040, 0.0479447320, -0.0434063934, -0.0621757284, -0.0086261258, -0.0520329475, -0.0632249042, 0.0096720010, -0.0054985881, -0.0546753854, 0.0465608016, 0.0463377088, -0.0415637642, -0.0203816108, 0.0513403714, 0.0474869385, 0.0092565119, -0.0203051604, 0.0327892825, -0.0220052898, 0.0314124301, -0.0539825186, -0.0316951834, 0.0029411688, -0.0019894838, 0.0370614901, -0.0085991248, -0.0650858432, -0.0390541591, 0.0101097077, 0.0346652940, -0.0636479110, -0.0054864287, -0.0307877176, -0.0498412699, -0.0127907395, -0.0465241224, -0.0542043597, 0.0035770535, -0.0489215180, -0.0435328782, -0.0051796883, 0.0595375299, -0.0406877697, -0.0491500720, 0.0721631944, 0.0610041022, 0.0528708100, -0.0146161467, -0.0038399473, 0.0560317636, -0.0319733731, 0.0369329080, 0.0204213709, -0.0269057527, -0.0324055143, -0.0304937474, 0.0208216310, -0.0358343497, -0.0401324667, 0.0602147579, -0.0125365667, 0.0095272586, -0.0676670969, -0.0025098771, 0.0472302735, 0.0435365736, -0.0521485955, 0.0316780061, 0.0479815900, -0.0020364970, 0.0498062894, -0.0568245128, -0.0206122771, 0.0380703136, -0.0606177971, -0.0497349352, -0.0394115560, -0.0165758170, -0.0082969144, 0.0527239367, 0.0374335572, -0.0662301034, 0.0468401983, -0.0642479807, 0.0421850160, 0.0603515506, -0.0138277337, 0.0579865128, -0.0168307647, -0.0620838851, 0.0593415648, -0.0116218068, -0.0093706474, 0.0204852596, -0.0462293252, -0.0492813736, -0.0571580231, -0.0217521153, 0.0450437889, 0.0200625136, -0.0230163857, -0.0034000650, -0.0210140646, 0.0418680236, 0.0345300362, -0.0362885445, 0.0499329269, -0.0508687645, 0.0229756087, 0.0079811960, 0.0155939534, 0.0175088346, 0.0120742172, 0.0394880399, 0.0571434349, 0.0684358031, -0.0682816729, -0.0019854233, 0.0621447563, 0.0417779610, -0.0304676630, -0.0200978406, 0.0512259677, -0.0124133714, -0.0109572299, 0.0592997074, -0.0636660978, -0.0570684485, 0.0515622348, 0.0551653057, -0.0350342505, -0.0219327807, 0.0432634428, -0.0406238623, 0.0512075275, 0.0311369747, -0.0611001253, 0.0571060479, 0.0076903552, 0.0078010783, -0.0653833449, -0.0235083178, -0.0466095321, 0.0707026273, -0.0387846567, -0.0576032214, -0.0555214211, -0.0407007262, 0.0565048754, -0.0510498434, 0.0486395732, -0.0167265460, -0.0553031936, 0.0279555470, 0.0335669443, 0.0058433563, 0.0075173825, 0.0343812034, 0.0457088798, -0.0452401638, -0.0267190635, 0.0457135290, 0.0317660570, -0.0714762285, 0.0039696470, -0.0078158230, 0.0357166752, 0.0411956832, -0.0631767958, 0.0659577101, 0.0123768374, -0.0546211489, 0.0487056002, 0.0616179705, 0.0210059062, -0.0282559693, -0.0256962627, -0.0298558362, -0.0143059865, 0.0343272388, -0.0330393091, 0.0582911968, -0.0160172284, -0.0583421513, 0.0103498250, -0.0546595529, 0.0531950444, -0.0541195497, 0.0701631606, -0.0719758645, -0.0336110592, -0.0006720796, -0.0152068958, 0.0585621148, 0.0101463124, -0.0392106511, 0.0070288926, -0.0569708720, 0.0460684970, 0.0566771775, 0.0467214808, 0.0601429194, -0.0625301152, -0.0263226107, 0.0356377512, -0.0285453834, 0.0359793305, -0.0211980343, -0.0161612295, 0.0005157441, -0.0399843901, 0.0042499751, 0.0202344432, 0.0557422936, -0.0543405116, -0.0632633790, -0.0500074998, -0.0163553357, -0.0123721622, 0.0127173215, -0.0672110245, 0.0431662798, 0.0393321142, -0.0145505555, -0.0398197770, 0.0678557903, -0.0340671167, -0.0595122501, -0.0015170872, -0.0006904602, -0.0267215557, -0.0229067467, 0.0409214348, -0.0305509232, 0.0701228678, 0.0349345431, -0.0344132222, 0.0236678347, 0.0650192052, 0.0480551273, 0.0417581797, 0.0187427849, -0.0267952010, 0.0127121061, 0.0666381568, 0.0121169016, 0.0322356820, -0.0115070567, -0.0599623546, 0.0409581289, 0.0599003583, -0.0322131962, -0.0637370050, -0.0655950531, 0.0173694789, -0.0156210177, 0.0360142589, 0.0247619599, 0.0473385155, -0.0224648044, 0.0707049668, 0.0266571566, 0.0684458166, -0.0429688022, 0.0541346520, -0.0176430084, -0.0532158688, 0.0659081340, -0.0564546287, -0.0567144454, -0.0317210071, 0.0325485319, -0.0213407092, -0.0205169022, 0.0714340061, -0.0270074941, -0.0468863659, 0.0374983400, 0.0585846007, -0.0223148651, -0.0149917640, 0.0034833625, -0.0010871887, -0.0155294463, -0.0020259991, -0.0407513790, -0.0031272620, -0.0590377152, 0.0338898897, 0.0457981452, 0.0394316539, -0.0205078013, 0.0203821436, -0.0434164405, 0.0673118979, 0.0107957795, 0.0509208143, -0.0059526637, 0.0452141985, -0.0137471557, -0.0512578189, 0.0697907060, 0.0006304756, 0.0232699588, -0.0324341282, 0.0158870593, 0.0616592318, 0.0332211629, -0.0450054854, -0.0183831044, 0.0211580992, -0.0235816501, -0.0395174921, 0.0277989879, 0.0249180868, 0.0124620795, -0.0131773315, -0.0409640335, -0.0547786728, -0.0470486730, -0.0456366166, 0.0473764241, -0.0081111938, 0.0460102484, 0.0335470885, -0.0122998767, 0.0386762768, -0.0474999100, -0.0254494548, -0.0491836742, 0.0160084888, 0.0255828202, 0.0151817873, -0.0221365727, 0.0236186981, -0.0087710693, -0.0532440208, -0.0102549344, -0.0492249876, -0.0332381465, 0.0365974680, -0.0082341433, -0.0069189221, 0.0109299570, -0.0566036329, -0.0663545057, 0.0276968852, 0.0416168943, -0.0216711052, -0.0142358020, 0.0026637688, 0.0115949661, 0.0535726547, 0.0607684702, 0.0098119006, -0.0672030225, -0.0364714302, 0.0050762743, 0.0058344454, 0.0003960207, 0.0506655946, 0.0132986009, 0.0470432192, 0.0627797246, -0.0265215673, -0.0227270611, -0.0274813212, -0.0500571728, 0.0425362661, 0.0114305243, -0.0121544823, 0.0715643913, -0.0035650581, 0.0304811820, -0.0087681785, 0.0202398598, -0.0316816568, 0.0715758204, -0.0502967574, -0.0344338194, 0.0363503695, -0.0324213952, 0.0036047697, -0.0388977379, -0.0599804893, -0.0286242403, -0.0687528998, -0.0019585490, -0.0413903072, -0.0201137066, 0.0643265098, -0.0513638966, -0.0575390086, -0.0713287517, 0.0113860145, 0.0565684587, 0.0347397476, 0.0537329763, -0.0297295265, -0.0580995902, -0.0650033206, 0.0125475973, -0.0391041972, 0.0180893242, -0.0250470340, 0.0445475876, -0.0498658419, -0.0303478017, 0.0288004354, -0.0219474770, -0.0371190272, 0.0156401023, 0.0073220357, 0.0532408357, 0.0384547934, 0.0560878962, -0.0604390725, -0.0150467195, 0.0690800697, -0.0138073787, -0.0149455816, -0.0251419246, -0.0437636673, -0.0377763472, -0.0406041443, -0.0117335469, 0.0447566286, 0.0492848828, -0.0323798060, 0.0714590997, 0.0407795832, 0.0609493107, 0.0429923534, 0.0705090165, -0.0718854964, -0.0099120773, -0.0517017245, 0.0159126148, -0.0194908530, 0.0337217003, 0.0496594310, -0.0166625530, -0.0389211737, -0.0173933618, -0.0443143919, -0.0028389692, 0.0332530439, 0.0115949288, 0.0172531307, 0.0326332226, -0.0153648332, -0.0041070059, 0.0678099543, -0.0061161295, -0.0259263813, -0.0108499117, 0.0263687372, 0.0169197693, -0.0242632143, -0.0249683820, 0.0388114974, -0.0536627546, -0.0536831766, 0.0454628319, 0.0352688804, -0.0561435521, -0.0217990689, 0.0701111406, 0.0276414305, -0.0465328246, 0.0147588551, 0.0650092363, -0.0613621771, 0.0429194197, 0.0318232626, -0.0004827082, 0.0198513120, -0.0517256260, 0.0127493963, -0.0175008476, 0.0018447638, 0.0147829279, -0.0329665281, 0.0544229597, 0.0596433282, -0.0674187541, 0.0508394316, -0.0468000583, -0.0665978417, 0.0447026342, -0.0103464872, 0.0236476213, -0.0164927281, 0.0408649072, 0.0551210493, 0.0201313943, -0.0684325397, -0.0312430151, 0.0604721904, -0.0215622075, 0.0236597508, 0.0114031285, 0.0382812843, 0.0161614865, 0.0422478393, -0.0237533897, 0.0017959848, 0.0483281612, -0.0017488897, 0.0123473629, -0.0110119805, 0.0359662548, 0.0407444835, -0.0157873183, -0.0314872600, 0.0221476704, -0.0322791152, 0.0413994938, -0.0642043129, 0.0333659202, -0.0646475106, 0.0561575890, -0.0327215940, 0.0313018635, 0.0248099267, 0.0316122994, -0.0100543909, 0.0690504014, -0.0069285408, 0.0334130004, 0.0005594343, -0.0696917549, -0.0240916125, 0.0527320579, 0.0509456471, 0.0016678348, 0.0605996251, 0.0695869476, 0.0284335762, -0.0395599231, 0.0330900326, -0.0684193373, -0.0011636317, 0.0622787625, -0.0693912283, 0.0161853358, 0.0562099814, 0.0416370407, -0.0345226899, 0.0201879889, -0.0061968565, -0.0346479155, -0.0120477863, -0.0710378215, -0.0335337184, -0.0675073192, 0.0669232607, -0.0002919063, -0.0288847610, -0.0552899987, 0.0209659562, 0.0082029179, 0.0433006063, 0.0359928384, 0.0221252516, 0.0420607701, 0.0616025180, 0.0181802064, -0.0127901360, -0.0566128418, -0.0583285242, 0.0657683015, 0.0529143065, 0.0643646121, -0.0222219527, -0.0390547961, 0.0091226473, 0.0047019720, 0.0056979805, 0.0133809522, 0.0604857355, -0.0370500647, 0.0054674149, 0.0643112212, -0.0648205429, -0.0398630835, -0.0676063746, 0.0259527266, -0.0217512213, -0.0656141490, -0.0014861003, -0.0022503212, 0.0279546380, -0.0259510726, -0.0642707795, 0.0636777580, 0.0208256543, -0.0311148092, -0.0174189284, -0.0452386327, 0.0303001776, 0.0370184705, 0.0571138710, 0.0274695531, 0.0363613591, -0.0467658713, -0.0429785252, -0.0581053570, 0.0026268438, 0.0575410873, 0.0678206980, 0.0142526254, -0.0107144304, -0.0076780692, 0.0368205830, 0.0181583762, -0.0143473148, -0.0226483271, 0.0515334308, 0.0172687024, -0.0509109572, 0.0393203795, -0.0181476176, 0.0197387412, 0.0670301616, 0.0644327998, -0.0218812823, -0.0556294098, 0.0671267956, 0.0609526634, 0.0597610772, 0.0664312690, 0.0098727122, -0.0181940086, -0.0551003143, -0.0513143092, -0.0101580620, 0.0351241753, -0.0309469290, -0.0444800183, -0.0162389316, -0.0504567251, -0.0122032464, -0.0564142242, 0.0257286653, -0.0324786752, -0.0567558929, 0.0466108546, -0.0512414575, -0.0646695048, 0.0189976171, -0.0573753417, 0.0441926420, 0.0432399735, 0.0346253067, -0.0706400275, 0.0109095499, -0.0132905506, -0.0590290129, -0.0364987552, 0.0386111513, -0.0705427825, -0.0512463599, -0.0363617912, 0.0447179824, 0.0513183996, -0.0170171261, -0.0584819019, 0.0155346245, -0.0063786134, 0.0274323151, -0.0325099714, -0.0700296164, -0.0159328133, 0.0714279562, -0.0334348492, 0.0521369949, 0.0553134680, -0.0641299933, 0.0246671140, 0.0442224890, 0.0353053063, -0.0403179675, -0.0617711246, -0.0148361996, -0.0323950499, -0.0097613521, 0.0426334813, 0.0019060373, -0.0709755197, -0.0691923574, -0.0657908916, 0.0190284327, -0.0364503898, 0.0427813008, -0.0066227317, -0.0500811413, -0.0001904070, -0.0091112778, -0.0014197305, 0.0277046934, -0.0501463562, -0.0417589024, 0.0017984957, 0.0436051935, 0.0544080287, -0.0107626915, 0.0573494583, 0.0106085613, 0.0043720230, 0.0492509380, 0.0660578310, 0.0309419557, 0.0241497532, 0.0204237998, 0.0282849967, 0.0138491765, -0.0596093126, 0.0070275292, -0.0344722755, 0.0571428984, 0.0721029043, 0.0630997717, 0.0585401952, 0.0102044120, -0.0367123708, 0.0408033580, -0.0289827511, -0.0622355938, -0.0475534424, -0.0174940526, -0.0669093281, 0.0505120084, -0.0604438931, -0.0205785185, 0.0154604986, -0.0238475762, 0.0064736232, 0.0498349890, -0.0156536400, 0.0514965728, 0.0654141605, -0.0693591014, -0.0243728869, -0.0435017161, 0.0238970593, -0.0386812799, -0.0348688811, 0.0549728870, -0.0561381839, -0.0695703104, -0.0075402856, -0.0625586733, -0.0079822317, 0.0095081553, 0.0431894585, 0.0510165021, 0.0542605668, 0.0203901976, -0.0637382939, -0.0625898018, -0.0485107861, 0.0098938197, 0.0081662014, -0.0623049513, -0.0040055588, 0.0716355443, 0.0298228189, 0.0431300923, 0.0560490191, 0.0226709694, -0.0230186917, -0.0144169666, -0.0487584919, -0.0184100680, 0.0433363318, 0.0264970511, -0.0092168897, 0.0590737462, 0.0145780891, 0.0640804470, -0.0151135512, -0.0491063520, -0.0400359556, -0.0238767415, 0.0127354413, 0.0046220496, -0.0074667409, 0.0639793724, -0.0718939304, -0.0128435306, 0.0138491541, 0.0157296211, -0.0268623903, -0.0602585450, 0.0491631478, -0.0020290762, -0.0047564283, 0.0559941381, 0.0452671051, 0.0680298954, 0.0460456312, -0.0642163530, 0.0577075034, 0.0114496201, -0.0025028214, 0.0441579521, 0.0154294595, -0.0593946986, 0.0359996334, -0.0462737009, -0.0390264764, -0.0156455897, -0.0234162472, -0.0144856721, -0.0360911191, 0.0629769117, 0.0632423759, -0.0361929983, -0.0265986510, 0.0354549810, -0.0680364966, -0.0445128493, -0.0135453083, 0.0562881380, 0.0596235245, 0.0566311181, 0.0592152029, 0.0251481012, 0.0654590130, -0.0118830018, -0.0618501678, -0.0446253270, -0.0162171684, -0.0426418968, -0.0547305495, -0.0488586500, -0.0592797920, -0.0301989503, 0.0283886120, -0.0289213769, 0.0567702502, 0.0018162876, 0.0476167575, 0.0633895844, 0.0152032152, -0.0219518617, 0.0695589930, 0.0397748873, -0.0112832189, -0.0110710151, -0.0539794900, 0.0678934157, -0.0648003221, -0.0586359501, -0.0078973174, 0.0105913654, -0.0558901355, -0.0684038550, 0.0659000725, 0.0450297669, -0.0194734745, 0.0659105629, 0.0624953955, -0.0136444159, -0.0461630300, -0.0028835312, -0.0185918696, 0.0225998908, -0.0370621793, 0.0412735045, -0.0691471323, 0.0079230592, 0.0533933640, -0.0515324473, 0.0376668274, 0.0248544589, 0.0129921064, -0.0696156472, -0.0020394921, 0.0045017079, -0.0636898950, 0.0358849838, -0.0387368239, -0.0631433502, -0.0317007042, -0.0403546542, 0.0116225109, 0.0391110778, -0.0087093189, 0.0104468390, -0.0110271908, -0.0220557712, 0.0643278062, 0.0635726750, -0.0098439939, -0.0433580428, -0.0425162241, -0.0485677719, -0.0690633059, -0.0708400905, -0.0012192428, -0.0456152111, -0.0021274984, -0.0704324692, 0.0473341271, 0.0133591890, 0.0138229653, -0.0297983512, 0.0109173283, -0.0011690557, -0.0692440569, -0.0366225019, -0.0360540561, 0.0525246710, -0.0627580956, 0.0415218994, 0.0691225827, -0.0598002709, 0.0519010127, 0.0322785154, -0.0476749688, -0.0120133720, 0.0706599206, -0.0174302496, -0.0576709956, 0.0313087925, 0.0192872509, 0.0535101444, 0.0492609292, 0.0353992879, -0.0608757026, -0.0187837891, 0.0098167881, -0.0068385750, 0.0393731818, -0.0682811067, 0.0011922270, 0.0625141412, -0.0540180318, -0.0480222777, -0.0311226062, 0.0377596244, -0.0636081994, -0.0438859016, 0.0150195658, 0.0426899567, -0.0016090348, -0.0677122623, 0.0253044218, -0.0037336946, -0.0632676780, 0.0243002400, 0.0152316913, -0.0369479805, 0.0045858920, 0.0295898467, -0.0122705400, 0.0152438357, -0.0054503977, -0.0082320645, 0.0428470671, -0.0200209990, 0.0376920551, 0.0269397497, -0.0272041969, 0.0218559876, 0.0181988105, -0.0327188596, 0.0217697546, -0.0478736833, -0.0472170897, -0.0273443237, 0.0000617504, -0.0647497177, -0.0036366209, 0.0325046405, -0.0110329725, -0.0451707356, 0.0223833844, -0.0590711497, -0.0344449691, 0.0044007748, 0.0389516950, 0.0196313784, 0.0009073094, -0.0365628153, 0.0028036758, -0.0160623603, -0.0564020611, 0.0162270442, -0.0581436045, -0.0549294725, 0.0247677416, 0.0396695808, -0.0083991736, 0.0205519497, -0.0693909526, 0.0238962173, -0.0596606731, 0.0561987013, 0.0189330876, 0.0688695908, -0.0298892856, -0.0054148287, -0.0114260837, -0.0354427323, -0.0527991131, -0.0025721118, -0.0425925665, 0.0563402921, -0.0203231573, -0.0068476722, 0.0247062594, 0.0715488642, -0.0418244377, -0.0529131740, 0.0277295411, -0.0060601234, -0.0017777830, 0.0640004724, 0.0081450716, 0.0363024473, 0.0227356851, 0.0089616850, 0.0682120174, -0.0557442270, -0.0232613385, 0.0469465703, -0.0061459467, -0.0435729511, 0.0549457967, 0.0640752465, -0.0278751925, 0.0165161118, 0.0494497418, 0.0305109695, 0.0222881809, -0.0341403633, -0.0562145486, -0.0493520051, -0.0596921630, -0.0009115413, -0.0417791866, 0.0623984635, -0.0290882774, -0.0583175123, -0.0575296991, 0.0718228668, 0.0238399878, -0.0595800951, 0.0427244902, -0.0427566469, -0.0598546937, -0.0044773594, 0.0193054527, 0.0116647407, -0.0657415092, 0.0534708500, -0.0493851453, 0.0322554559, -0.0471375622, -0.0319043435, -0.0151338540, -0.0422158688, 0.0721046478, -0.0075009316, -0.0229224935, 0.0159922242, 0.0438806564, 0.0458746627, 0.0252530947, -0.0475429446, 0.0330444574, 0.0623735189, -0.0657578409, -0.0250760764, 0.0451449230, 0.0509657413, -0.0370430276, -0.0397311449, -0.0683614239, 0.0339124501, 0.0381467640, 0.0710997283, 0.0219368935, 0.0075015128, -0.0407422110, -0.0411298871, 0.0614666343, -0.0616215318, -0.0252525620, 0.0585629642, -0.0634697229, 0.0140488893, 0.0293490738, -0.0437047184, -0.0585798398, 0.0336849466, -0.0123867355, -0.0467068702, -0.0450755134, 0.0007492006, 0.0118519440, -0.0274322480, -0.0463303104, -0.0363963433, -0.0460469723, 0.0151524022, 0.0046002641, -0.0430506840, -0.0561616533, 0.0112246498, 0.0467103273, -0.0498715341, 0.0378742516, -0.0084208548, -0.0291028172, 0.0230779871, 0.0395706818, 0.0355722085, -0.0109771714, 0.0711557418, -0.0560635924, 0.0695133060, -0.0321266986, 0.0327241719, -0.0359270051, 0.0406265855, -0.0353273116, 0.0273014829, -0.0502686054, 0.0347054377, -0.0271906890, 0.0271765441, 0.0526504889, -0.0102933906, -0.0000189468, 0.0377274305, 0.0464972928, -0.0106115192, 0.0598243624, 0.0392836779, -0.0490426533, -0.0475575328, -0.0387004837, 0.0661764741, -0.0166679583, 0.0218311399, -0.0676646531, -0.0019419491, 0.0189611912, -0.0647943318, -0.0673487261, 0.0335332528, -0.0647108853, 0.0496176928, -0.0468931459, -0.0342208035, 0.0026961342, -0.0358491987, 0.0572600514, 0.0418555513, 0.0374160111, -0.0113056563, -0.0094222650, -0.0390649848, -0.0272915885, 0.0118873045, 0.0275206044, 0.0695795864, 0.0308507085, 0.0461679175, -0.0584891252, 0.0620861501, -0.0413447432, -0.0421322435, -0.0019170865, 0.0065269992, -0.0699236393, -0.0400107652, 0.0496898741, 0.0620414466, -0.0146701597, -0.0310321152, 0.0312925354, -0.0523424409, 0.0699926615, 0.0165981352, -0.0256886743, 0.0593122095, 0.0417407453, 0.0692353249, 0.0235183835, 0.0500469580, -0.0459556878, 0.0681921244, 0.0566151291, -0.0379553437, -0.0548011437, -0.0545285121, -0.0394752510, 0.0341717154, 0.0242815912, 0.0490691662, 0.0337765515, 0.0100520179, -0.0685189962, 0.0040781870, 0.0246367827, 0.0658741891, -0.0033144280, 0.0706166774, 0.0332523212, -0.0339517817, -0.0599834137, 0.0088079274, 0.0143927038, 0.0186228082, -0.0506010167, -0.0390212089, 0.0034629703, -0.0088726580, -0.0178421363, 0.0645249188, 0.0495781675, 0.0299686044, 0.0404785872, 0.0168460235, -0.0280859880, -0.0310602821, -0.0030027181, -0.0543142743, -0.0000866875, 0.0556191653, 0.0321913958, -0.0606762990, -0.0133473501, 0.0222277194, 0.0013149455, 0.0715544522, -0.0187731907, -0.0056233853, 0.0103663281, 0.0073720217, 0.0439781994, -0.0180016235, -0.0191557929, -0.0245390832, -0.0251283497, -0.0597704351, -0.0052923188, 0.0042456537, 0.0097805038, 0.0229080394, -0.0565548204, 0.0502875149, 0.0266027674, -0.0293434821, 0.0665101558, 0.0078991577, 0.0719774812, 0.0681207180, -0.0673479363, -0.0529066026, 0.0062934086, 0.0570374429, -0.0550256521, -0.0117137246, 0.0581861436, 0.0107419267, 0.0678092986, 0.0290400982, -0.0311384536, 0.0505050570, 0.0596522987, -0.0134046637, 0.0583861172, -0.0009690151, 0.0198315904, -0.0041323677, 0.0591358691, -0.0428824760, 0.0068175420, 0.0400829837, 0.0620653331, -0.0263428092, -0.0498757362, -0.0526396111, 0.0194724053, 0.0413279459, 0.0457976162, -0.0592294298, 0.0537589043, -0.0297567621, 0.0123762712, -0.0189295635, -0.0142983794, -0.0155595727, 0.0197632611, 0.0627291352, -0.0655528754, -0.0366693214, 0.0325252861, 0.0259475112, 0.0283199772, 0.0126477182, 0.0246731415, -0.0150695369, -0.0506725758, 0.0622381270, -0.0567051694, -0.0293458402, 0.0258360654, -0.0419437662, 0.0158489347, 0.0341031998, -0.0536936596, 0.0182983503, -0.0028757676, 0.0409035534, 0.0276863053, 0.0235397220, 0.0450929999, 0.0351646915, 0.0086690933, 0.0068904981, 0.0404826030, 0.0611840636, 0.0139298514, -0.0031003132, 0.0461357012, 0.0428526923, 0.0406370759, -0.0228014626, 0.0526183620, -0.0337795801, 0.0520406216, -0.0171453319, -0.0716445372, -0.0700313896, 0.0302661583, 0.0512256622, 0.0533369482, 0.0255350769, -0.0295911506, -0.0467407480, 0.0175306126, -0.0691794306, 0.0550886542, 0.0219272599, 0.0185651854, 0.0129543394, -0.0379135832, -0.0189642161, 0.0066555962, 0.0578375161, -0.0485849120, 0.0153696686, -0.0445136949, -0.0715858638, -0.0374072529, -0.0448257998, -0.0079684258, 0.0075021014, 0.0160278976, -0.0704523250, -0.0237978660, -0.0325067565, 0.0171846449, 0.0209992304, 0.0507963970, -0.0175526924, 0.0076837987, -0.0284792744, -0.0264646150, -0.0079254285, 0.0539852679, 0.0355737209, -0.0203616507, 0.0542490631, -0.0119342916, -0.0478041917, 0.0617506057, 0.0575558990, -0.0100994222, -0.0319530554, -0.0043257698, -0.0132679939, 0.0337092951, 0.0049824715, -0.0529748276, -0.0320599750, -0.0086607784, 0.0139294788, -0.0504821539, -0.0292059332, 0.0429407731, 0.0109983832, 0.0506688952, -0.0022875369, 0.0102483258, 0.0603094101, -0.0554881282, 0.0436891317, -0.0170734413, 0.0079544410, 0.0617060065, 0.0581177920, -0.0617222041, -0.0468961746, -0.0339514017, 0.0181477070, 0.0216619894, -0.0165314935, 0.0590608567, 0.0069171339, 0.0056352466, -0.0250917710, -0.0582491495, -0.0415638462, -0.0286905169, -0.0573607832, 0.0667772442, -0.0362319537, -0.0371435657, -0.0471049398, 0.0033385009, 0.0061703995, -0.0590963215, 0.0611209124, -0.0181917176, 0.0008336306, -0.0171878114, -0.0623753928, 0.0683878809, 0.0067583546, -0.0536268428, 0.0053040907, 0.0009533018, -0.0139149353, -0.0616214611, -0.0044995919, -0.0274941400, -0.0217781663, -0.0495149679, -0.0287397094, -0.0585562326, 0.0366757363, -0.0103769787, 0.0266198516, 0.0182588771, -0.0185369812, 0.0594653487, -0.0606436916, 0.0102763399, 0.0226131529, 0.0642017871, 0.0447103977, -0.0215459839, -0.0233341716, -0.0423286371, -0.0256726034, 0.0212349594, 0.0031954795, 0.0395667180, 0.0520730391, -0.0327218175, 0.0336107686, 0.0689003170, -0.0230873823, 0.0210892409, -0.0645213574, 0.0622422993, 0.0283826590, 0.0402392522, 0.0106600747, -0.0044188052, 0.0269579589, 0.0405556262, -0.0552373976, -0.0678760484, 0.0159424171, -0.0585162938, -0.0450143665, -0.0478722230, -0.0441439077, 0.0044888183, 0.0374463275, -0.0136473589, -0.0515451506, 0.0433670282, 0.0258074701, 0.0586188287, 0.0154325590, -0.0433736332, -0.0669029579, 0.0391315520, -0.0070423633, -0.0571327992, -0.0677903816, 0.0616103113, -0.0520942882, 0.0132624358, 0.0638203621, -0.0595989712, 0.0416032672, 0.0116452053, -0.0112560503, 0.0343907848, -0.0605024770, -0.0064780787, 0.0124945343, 0.0030583665, 0.0711570829, 0.0250147879, -0.0528982915, -0.0504643992, -0.0062388629, -0.0077224672, -0.0607851632, -0.0210279487, 0.0125820264, -0.0086807385, 0.0029021502, 0.0559036434, 0.0341459513, 0.0130921602, 0.0380022153, -0.0139252096, 0.0361083969, -0.0277146399, 0.0641743839, 0.0063502342, 0.0398603678, 0.0398238376, 0.0000679791, 0.0075354502, -0.0655687451, 0.0697056949, -0.0497962236, -0.0507646352, -0.0448618457, -0.0411308147, -0.0677772313, 0.0071432814, -0.0213328302, 0.0215103850, 0.0363923684, 0.0575958639, -0.0424648970, 0.0081429034, 0.0409318954, -0.0563580319, 0.0639526993, -0.0510999858, 0.0359490290, -0.0449342877, -0.0341225378, -0.0439067036, 0.0448420271, 0.0332473144, -0.0023612306, -0.0503349006, -0.0366006345, 0.0142153427, -0.0241351649, 0.0487832651, 0.0284969434, 0.0076764673, 0.0539922416, -0.0625295267, -0.0243476778, 0.0344447941, 0.0015341192, 0.0058100075, 0.0030064732, -0.0565145053, -0.0094717145, -0.0348055772, -0.0473895669, -0.0716391355, 0.0054847077, 0.0223296136, 0.0136315674, -0.0295069441, -0.0513222590, -0.0701164380, 0.0400077552, 0.0168817937, 0.0688959360, 0.0467127860, 0.0454051197, 0.0105897486, -0.0320098847, 0.0236805677, 0.0529731214, -0.0396625623, 0.0660549551, -0.0288858972, -0.0044854432, -0.0688318461, 0.0279237479, 0.0611452758, -0.0643067062, -0.0107612461, -0.0069234148, -0.0048615932, 0.0359568894, 0.0239996985, 0.0704469085, 0.0321151018, -0.0097588226, -0.0625036135, -0.0082854703, 0.0330572724, 0.0363500565, -0.0033831000, 0.0493393391, -0.0147434734, -0.0703823492, -0.0210106559, -0.0135352425, 0.0641514808, 0.0340281278, 0.0576174855, -0.0548915491, -0.0631046370, -0.0548221208, -0.0713627487, -0.0460762382, 0.0021558702, -0.0714196190, 0.0465473831, -0.0439977422, 0.0437795147, 0.0176937804, -0.0582760274, -0.0598122962, -0.0230783485, -0.0381028876, -0.0535547324, -0.0055455640, -0.0639268383, 0.0129755884, -0.0305280201, 0.0256383494, 0.0650436282, -0.0323648192, 0.0057216063, -0.0110350884, 0.0644960403, 0.0497536510, -0.0030442178, -0.0014043823, 0.0092497543, 0.0182024240, 0.0172818080, 0.0093086660, 0.0505514294, -0.0155108981, -0.0406645574, 0.0322766900, -0.0664446130, 0.0094228834, -0.0502696931, -0.0136784352, -0.0063337684, 0.0473504066, -0.0147020929, 0.0407702178, -0.0044761375, -0.0652325302, 0.0038450211, -0.0110616200, 0.0442262441, -0.0022382885, -0.0148216933, 0.0152225718, -0.0489996523, -0.0708984360, -0.0433943495, 0.0057914779, -0.0469121411, -0.0282783210, 0.0076426789, -0.0152475685, -0.0196640156, -0.0341677032, -0.0592473261, 0.0241422206, -0.0291816033, -0.0167092681, -0.0480502918, -0.0564594939, 0.0538405776, -0.0211330801, 0.0651952922, 0.0045867562, 0.0019431338, 0.0231357515, -0.0220308080, 0.0334740952, 0.0124866664, -0.0302384906, -0.0487625152, -0.0219031163, 0.0141107962, -0.0471953601, -0.0388794132, 0.0082295686, -0.0003011450, -0.0495004952, -0.0136889480, -0.0712926537, -0.0022834614, 0.0719360262, 0.0165650472, 0.0399286076, -0.0538255610, -0.0598790757, -0.0641189516, 0.0475010648, 0.0423764512, -0.0505167916, -0.0282096006, 0.0518156514, 0.0029168949, 0.0643159151, 0.0386187211, -0.0204655938, 0.0486133024, 0.0586524308, -0.0189757459, 0.0451395735, 0.0447699130, 0.0039239675, -0.0200348310, 0.0144246072, -0.0714899078, -0.0600459576, -0.0326651931, -0.0520490035, 0.0659977794, -0.0383291356, -0.0714857057, 0.0318199471, -0.0237575695, -0.0050132871, -0.0656928197, 0.0642086715, -0.0393437259, -0.0166562572, -0.0566244721, -0.0619627684, -0.0404578559, -0.0561661422, 0.0583757907, 0.0419197306, 0.0290570632, -0.0100382529, -0.0594860651, -0.0670294985, -0.0147860423, 0.0619306266, -0.0625024289, 0.0321575031, 0.0076219440, -0.0064046457, 0.0021861419, -0.0543420799, 0.0702564865, 0.0490358248, 0.0174661800, -0.0156337507, -0.0183661059, 0.0069799572, 0.0210441425, -0.0023204163, -0.0234478898, -0.0589571074, 0.0003859550, 0.0646195859, -0.0439110026, 0.0106730163, -0.0055388361, 0.0550670922, 0.0342677608, -0.0459273346, -0.0164867565, -0.0116346963, -0.0150000565, 0.0269152150, -0.0707774758, -0.0078798532, 0.0560226589, 0.0391353890, -0.0672912225, -0.0024646595, -0.0507849380, 0.0229489580, -0.0644950792, -0.0240952261, 0.0365910828, 0.0033794865, 0.0662111789, 0.0541616529, 0.0184110329, 0.0284301862, 0.0711141378, 0.0351696163, -0.0134243146, 0.0549738109, -0.0429829285, 0.0241679400, 0.0207219198, -0.0320940092, 0.0404316336, 0.0132094771, -0.0529673398, -0.0183230042, 0.0499374196, -0.0327618904, -0.0662456602, 0.0115782768, 0.0640978217, 0.0246884003, -0.0393928513, -0.0139040612, -0.0290200375, 0.0425307229, -0.0438931622, -0.0222087204, 0.0119066089, -0.0167658627, -0.0424800366, -0.0569627136, -0.0402032696, 0.0329260379, 0.0080942065, -0.0313696191, -0.0354450531, -0.0493351445, 0.0232395679, 0.0383285359, -0.0719847232, 0.0221782625, 0.0359296054, -0.0028856322, 0.0116986483, -0.0611120164, -0.0375716947, -0.0592937320, 0.0063696280, 0.0324590728, 0.0280436426, -0.0368121341, 0.0288418829, -0.0141751133, -0.0546928644, -0.0404315144, 0.0719895363, -0.0687834099, 0.0272389203, 0.0209323317, 0.0523161665, -0.0357647985, 0.0110345557, -0.0161819123, 0.0497474596, 0.0391349420, -0.0145472884, -0.0104909874, -0.0495875441, -0.0070819408, -0.0640094504, -0.0064431876, 0.0686661452, 0.0122843012, 0.0090292022, 0.0006244183, -0.0197677203, -0.0341088064, -0.0334735289, -0.0591363981, -0.0401360989, -0.0698395893, -0.0270340256, 0.0197494850, -0.0552558601, 0.0395245850, -0.0415364392, -0.0166995116, 0.0193337053, -0.0590328127, 0.0626061857, -0.0339356065, -0.0242035091, -0.0006339028, 0.0245265216, -0.0520662442, -0.0317861177, 0.0143821612, 0.0136231706, 0.0695083886, -0.0228983872, -0.0720671415, 0.0706405193, 0.0359874517, -0.0537152365, -0.0474104546, 0.0460602343, 0.0164591745, 0.0020568818, -0.0620598979, 0.0133178905, 0.0162341818, -0.0580569021, -0.0601310804, -0.0360306390, 0.0268590674, 0.0278946534, 0.0043118671, 0.0547344089, 0.0617291629, -0.0072068200, -0.0140312873, 0.0259536505, 0.0069006681, -0.0232425146, 0.0640020818, -0.0379372612, -0.0715328157, -0.0504528694, 0.0637149960, 0.0569367707, -0.0479473993, -0.0476981625, -0.0105242655, -0.0107140690, 0.0161046013, 0.0202575177, 0.0128202513, -0.0636592656, 0.0334594175, -0.0609367155, -0.0243454091, -0.0197805390, -0.0612527803, -0.0535031818, 0.0396612361, -0.0206856132, -0.0141462088, 0.0648361444, -0.0065915883, -0.0180869997, 0.0566689521, 0.0447482690, -0.0275931470, 0.0380396545, -0.0679986253, 0.0239148512, 0.0663860440, -0.0210306682, 0.0437446535, -0.0683297962, 0.0641101003, -0.0687464178, 0.0682688504, -0.0654153302, 0.0068171322, -0.0116593689, 0.0489688218, -0.0610333644, 0.0001661479, -0.0551419333, -0.0540240891, -0.0574881285, 0.0715669096, -0.0195483379, 0.0246635228, 0.0564502031, -0.0368269309, 0.0695775002, -0.0212362483, -0.0269369483, -0.0176253356, -0.0270167142, -0.0535609946, 0.0391694456, 0.0222391412, -0.0260777287, 0.0238618553, -0.0452145785, 0.0412649587, 0.0534137040, -0.0482420921, 0.0097835436, 0.0152242705, 0.0456779599, -0.0018739328, 0.0662291348, -0.0328168832, -0.0018187463, -0.0228386968, -0.0512115657, -0.0459091291, 0.0122565851, 0.0714386702, 0.0498873517, 0.0136326626, -0.0685591623, 0.0530654192, -0.0658103004, 0.0300534517, -0.0402763970, 0.0373189673, -0.0511299595, 0.0197344944, -0.0656263158, -0.0042297766, -0.0066859201, -0.0359042734, 0.0016818866, -0.0240637399, -0.0591134094, 0.0566343069, -0.0150597468, 0.0257512704, 0.0140655413, 0.0438888744, 0.0557923019, 0.0178158656, -0.0405233279, 0.0258966163, -0.0032632425, -0.0189916417, 0.0485364273, 0.0523294657, 0.0362773463, 0.0535006076, 0.0454179049, -0.0129598975, -0.0255237855, 0.0538163483, -0.0402287208, 0.0655568838, 0.0670626163, -0.0239082128, -0.0293348804, -0.0614311919, -0.0216201060, 0.0455224887, 0.0468324423, -0.0154299065, 0.0190667138, -0.0182919279, 0.0118317604, -0.0101290159, -0.0204954818, -0.0560623705, 0.0039634183, 0.0001544282, -0.0541874468, 0.0322684497, 0.0467748865, -0.0300626568, -0.0402329341, 0.0395943895, 0.0117773190, 0.0695697516, 0.0219491944, -0.0011616722, 0.0570296496, 0.0180192441, 0.0296869427, -0.0707235336, 0.0268921405, 0.0278545320, 0.0245905444, 0.0579531789, 0.0042092130, 0.0280762985, 0.0139797330, 0.0492900088, 0.0222111121, -0.0585603602, -0.0031400248, 0.0223467126, -0.0359098837, -0.0020607412, 0.0241524726, -0.0641199797, 0.0249825418, 0.0078970566, 0.0316980034, -0.0475048833, -0.0273356363, 0.0085486472, -0.0598282479, 0.0237208158, -0.0476987287, -0.0204590373, 0.0130884796, -0.0687335283, -0.0527984276, 0.0057678893, 0.0080644935, -0.0259606391, 0.0685503632, 0.0113619417, 0.0180789828, 0.0546748191, -0.0640416071, -0.0329952277, 0.0196604878, -0.0659936219, 0.0507275388, -0.0546558052, -0.0260019861, 0.0245483071, 0.0446566269, -0.0102113485, 0.0497838855, -0.0077294633, -0.0436477289, 0.0720499009, -0.0297582261, 0.0256214142, 0.0076530874, 0.0212909803, -0.0490491055, 0.0404606611, 0.0350246131, 0.0201551020, 0.0330187678, -0.0408991314, -0.0535293892, -0.0704305917, -0.0345297605, 0.0203775838, 0.0007324591, -0.0351984687, 0.0419979990, 0.0392321423, 0.0421105102, 0.0399312526, 0.0718938261, 0.0391533524, 0.0106703788, -0.0121988580, 0.0685312003, 0.0395481065, -0.0227380395, -0.0569608063, 0.0525119230, 0.0112065822, -0.0452646315, -0.0565824024, 0.0201007128, 0.0352086350, 0.0600251406, 0.0142865628, 0.0030915216, 0.0645095855, -0.0684791356, -0.0067650825, 0.0376593620, -0.0717990324, -0.0570198223, -0.0385028869, 0.0438090041, 0.0057280585, -0.0279245414, 0.0470126271, -0.0345305689, -0.0659860000, 0.0321271643, -0.0378373079, -0.0324346088, -0.0086035505, 0.0209445134, 0.0056977049, 0.0315394476, -0.0170921274, 0.0699948072, -0.0311547108, 0.0058079585, 0.0060379058, 0.0646968335, 0.0586225390, 0.0277606845, -0.0135306641, -0.0258674659, 0.0094342232, -0.0603012852, -0.0200551711, -0.0394372270, 0.0512486324, 0.0314167142, 0.0130883083, 0.0235803425, -0.0559309684, 0.0251271650, 0.0513458997, 0.0637053251, 0.0385657921, 0.0346234143, -0.0579737946, -0.0326471590, -0.0404907204, 0.0567540973, 0.0677054077, -0.0470273383, 0.0036307499, -0.0450350642, -0.0496945009, -0.0138101839, 0.0220927000, -0.0375877656, 0.0081726685, -0.0530589148, -0.0467419028, 0.0656984448, -0.0015748963, 0.0584926754, 0.0236924961, 0.0289600417, -0.0402609482, -0.0064919144, -0.0064065382, 0.0273394063, -0.0259437598, -0.0317134559, -0.0339908227, 0.0403859019, -0.0153714046, -0.0479203686, -0.0404627249, 0.0136549622, -0.0279868990, -0.0553322360, 0.0660320371, -0.0454976745, 0.0475474522, 0.0246221721, 0.0424021408, -0.0181342661, -0.0012074411, 0.0399540514, -0.0460894555, 0.0565684587, -0.0469412208, 0.0719241053, -0.0678693354, 0.0430807471, 0.0205518305, -0.0056658536, 0.0546282679, 0.0086837336, 0.0536275208, -0.0014580190, 0.0231976733, 0.0384642705, 0.0468644798, 0.0372418985, -0.0502318032, 0.0612714738, 0.0251136050, 0.0152109340, 0.0333145633, 0.0631348193, -0.0438501984, -0.0175289810, -0.0646574721, 0.0623412430, 0.0507459268, -0.0678131059, 0.0304466709, -0.0235804655, 0.0286999792, -0.0146506280, 0.0597970933, -0.0327388868, -0.0045263097, 0.0026556700, 0.0131744742, 0.0400701463, 0.0514965057, -0.0512442440, -0.0041524991, -0.0281399153, -0.0068656877, -0.0328276530, -0.0244441032, -0.0062679052, -0.0096649081, 0.0281383991, 0.0430565551, -0.0237061046, -0.0233149715, 0.0317687392, 0.0144951865, 0.0151483417, -0.0432685167, 0.0308513120, 0.0469074994, -0.0265019871, -0.0196055323, 0.0062902719, 0.0367957056, 0.0099347532, 0.0620241016, 0.0522522926, -0.0060723722, -0.0528911166, -0.0103983991, 0.0281825885, 0.0182141066, 0.0007299259, -0.0032101274, -0.0116212741, 0.0713184923, 0.0073492602, 0.0346330181, 0.0720748901, 0.0514631271, 0.0045708939, 0.0271343365, -0.0124686882, -0.0449944399, 0.0166401863, 0.0681150556, -0.0471140929, -0.0179647841, -0.0702655166, -0.0418603830, -0.0270334072, -0.0200514346, 0.0091906637, -0.0272078253, 0.0150827989, -0.0600864440, -0.0168700963, 0.0581300855, -0.0269227847, 0.0312810093, 0.0244123936, 0.0587123036, -0.0721198991, -0.0238845013, 0.0032640472, -0.0060935840, -0.0706367269, 0.0232188180, 0.0170598179, 0.0628717244, -0.0275270045, 0.0536537915, 0.0466510206, -0.0579587556, -0.0288868956, 0.0391288325, -0.0102017485, 0.0597545207, 0.0129063874, 0.0524874181, 0.0543938726, -0.0567622408, 0.0116919205, -0.0531681217, -0.0449999124, -0.0477359667, -0.0066527948, 0.0108908638, 0.0579492301, 0.0055223033, -0.0319566652, 0.0662757009, 0.0175857097, 0.0665419400, 0.0487779155, -0.0383416452, -0.0659001023, -0.0297012031, -0.0574817285, -0.0370361619, -0.0363486633, -0.0368281715, -0.0102032982, 0.0616995394, -0.0507409051, 0.0079630613, -0.0394816883, 0.0028165430, -0.0082955733, 0.0305127576, 0.0184222311, -0.0358995087, 0.0586155355, 0.0622993261, 0.0194012597, -0.0657760650, -0.0410104245, -0.0135307163, -0.0296334960, -0.0657602698, 0.0678443015, -0.0438483916, -0.0582474098, -0.0408215821, 0.0064836890, 0.0647893101, -0.0234961361, 0.0056272596, -0.0319130495, -0.0219866373, 0.0099707693, -0.0513711236, -0.0578908101, -0.0309360549, 0.0141664222, 0.0118359774, 0.0247501731, -0.0087549165, 0.0409542769, 0.0092875883, 0.0697211772, 0.0600838959, -0.0127423890, 0.0074691325, -0.0651870370, 0.0668621510, -0.0099198222, 0.0285892040, -0.0705957562, -0.0490582250, 0.0648879260, 0.0061242655, -0.0431705788, -0.0031808019, -0.0543484800, 0.0064545944, 0.0257498249, 0.0059982985, 0.0077294484, -0.0387271717, 0.0364563763, 0.0074666366, -0.0496477671, -0.0632408708, -0.0641734451, -0.0060041845, 0.0049751401, -0.0305477753, -0.0424658246, -0.0158686675, 0.0543287098, -0.0067257360, 0.0403221175, 0.0376023352, 0.0537757725, 0.0034938231, -0.0062541738, -0.0373795666, 0.0176950023, 0.0213958025, 0.0608037114, 0.0231292993, 0.0016666949, -0.0490839630, 0.0250849202, -0.0479023010, -0.0284646824, -0.0112210549, 0.0379242375, 0.0137038678, -0.0235173702, 0.0182880238, 0.0489650518, 0.0662630200, 0.0340425968, -0.0679450110, 0.0244616345, -0.0434579104, -0.0212119035, 0.0204564705, -0.0669381320, -0.0385321714, 0.0384518653, -0.0486160032, -0.0301748589, 0.0058499947, -0.0636874661, -0.0341506004, 0.0270699188, -0.0188684464, -0.0114620961, -0.0483438335, 0.0619605631, -0.0067164600, -0.0243267380, 0.0335344225, 0.0093996525, -0.0001121312, -0.0243660025, -0.0623673946, -0.0046225265, -0.0436281338, -0.0114373378, -0.0187043846, -0.0173418783, -0.0043090433, -0.0274898224, 0.0205021203, 0.0152189583, -0.0275027789, -0.0097758546, 0.0406592414, -0.0285875537, -0.0504675992, 0.0176049992, -0.0315069258, 0.0275238529, 0.0271515101, 0.0371484682, -0.0629568473, 0.0070827305, -0.0353062339, -0.0098191984, 0.0175318196, -0.0538586155, 0.0406688452, -0.0371717662, -0.0476101004, -0.0581240952, -0.0559296943, -0.0507084355, 0.0053614229, 0.0272713676, 0.0000570714, -0.0240347981, 0.0096783489, -0.0622631907, -0.0647122115, -0.0332278572, -0.0052044988, -0.0409072861, -0.0059057474, 0.0107531399, -0.0396316238, -0.0107808970, 0.0279309452, -0.0396003425, 0.0494684279, -0.0348247476, 0.0129170343, 0.0001918674, 0.0653556585, -0.0404510088, 0.0504334122, -0.0121928006, -0.0459642783, 0.0314425752, -0.0624342747, 0.0170744061, -0.0440690108, -0.0487339199, -0.0315718800, -0.0051847845, 0.0202898160, -0.0619819537, -0.0104232095, 0.0422858968, -0.0315587856, 0.0495962352, 0.0542833954, -0.0543569997, 0.0357996970, 0.0054343417, 0.0425439253, -0.0667977259, -0.0430149660, 0.0226083398, -0.0295816548, 0.0511755571, 0.0595000535, 0.0110446513, 0.0471325219, -0.0672096834, -0.0711287409, 0.0625160336, -0.0185872093, 0.0009139702, 0.0300274864, 0.0559902042, 0.0682056546, -0.0243130587, -0.0490961671, -0.0250143223, 0.0286511704, -0.0207749829, -0.0374744609, -0.0295322873, -0.0150181055, 0.0171517506, 0.0377068147, 0.0405384153, -0.0241365582, -0.0221567415, 0.0124599487, 0.0100937784, 0.0045858622, 0.0322936550, 0.0251628980, 0.0463099554, 0.0548186451, 0.0225187466, -0.0618865788, 0.0174297690, -0.0267764963, -0.0584571920, -0.0520905927, 0.0463197753, 0.0179507956, 0.0211906880, -0.0583184399, -0.0282462500, -0.0717263222, -0.0017024130, 0.0197799355, 0.0116982013, 0.0233557001, -0.0289577320, -0.0424702466, -0.0648938417, -0.0598874874, -0.0371986926, 0.0196748227, -0.0696771070, -0.0329356417, -0.0260471366, 0.0075611398, 0.0606150478, 0.0263400748, -0.0516467169, 0.0668946952, -0.0577948503, 0.0175812170, 0.0551708639, -0.0655188262, -0.0638998747, -0.0355653092, -0.0141750947, -0.0637966767, 0.0684352219, -0.0256839283, 0.0087390840, -0.0089411736, 0.0113341510, -0.0649976954, -0.0275092125, 0.0234945044, -0.0195860565, 0.0205352083, -0.0396708362, -0.0094039589, -0.0542650633, -0.0430878513, -0.0453112945, 0.0676274747, -0.0406996757, -0.0341081508, 0.0325376540, 0.0291778520, 0.0622002333, -0.0350550711, 0.0641017258, -0.0303150229, -0.0419884995, 0.0153896436, -0.0159345344, -0.0130430721, -0.0293785855, -0.0670084655, 0.0303818733, -0.0367005691, 0.0636605024, 0.0011835769, 0.0191096291, 0.0184708387, -0.0710052848, -0.0467710495, 0.0106675252, -0.0141700022, 0.0034605637, 0.0369548127, 0.0655269772, -0.0018603727, 0.0186445713, -0.0174978562, 0.0442484766, 0.0375266820, -0.0070300475, -0.0257982798, -0.0607402362, 0.0157915503, 0.0715123862, 0.0483983457, 0.0353580043, 0.0058755651, -0.0100310072, 0.0636713058, 0.0434959680, 0.0506067500, -0.0215012468, 0.0659138262, 0.0285966396, -0.0197147243, 0.0693136603, 0.0626237690, -0.0215394795, -0.0562630668, 0.0456283018, 0.0387831107, -0.0581125990, -0.0111960359, -0.0467138030, -0.0391953401, -0.0358341597, 0.0236916840, 0.0030340701, 0.0468282253, -0.0038857162, 0.0625019819, 0.0169904232, -0.0384389274, -0.0131927840, 0.0011941046, -0.0413982198, -0.0045101196, 0.0348611176, -0.0461203530, 0.0707642287, -0.0358293243, -0.0379687287, 0.0622585416, 0.0689201206, -0.0526345894, -0.0124519132, -0.0253297687, 0.0307607874, -0.0184379928, -0.0044727102, -0.0137091130, 0.0303693116, -0.0111883618, 0.0457348153, -0.0145079009, 0.0074285641, -0.0575724915, 0.0301512703, -0.0421376303, -0.0619532168, 0.0558454692, -0.0108890235, -0.0254905447, 0.0116672814, -0.0513795689, -0.0360074975, 0.0262550041, 0.0477144420, 0.0039522350, 0.0365940630, 0.0713401735, 0.0236655176, 0.0180707201, 0.0385743082, -0.0371930152, -0.0557273850, 0.0505950823, 0.0474812090, 0.0100403205, -0.0615629591, 0.0559564978, 0.0450282171, 0.0055913851, 0.0284763873, 0.0178101510, 0.0005626976, 0.0532495081, -0.0679811835, -0.0123492256, -0.0092615262, -0.0215748027, -0.0448824614, -0.0451261699, 0.0334115326, -0.0598291755, 0.0600900352, -0.0075273067, 0.0359191895, -0.0193039551, 0.0306433588, -0.0187364370, -0.0450595468, 0.0500192344, 0.0246065632, 0.0275859684, -0.0003030226, -0.0557266101, 0.0657765269, 0.0456124097, 0.0696430802, -0.0052490830, -0.0226426646, 0.0153806284, 0.0228776187, 0.0659717172, -0.0002154559, -0.0646341071, -0.0274032243, 0.0578333735, -0.0358975120, 0.0177328959, -0.0145090893, -0.0139332451, -0.0219052695, 0.0265163407, -0.0143164285, -0.0497700013, 0.0215212032, -0.0330551378, 0.0008484274, -0.0507555306, -0.0700167790, 0.0650069565, 0.0138782188, 0.0359431431, 0.0499625728, 0.0144448206, 0.0176448524, 0.0631271750, 0.0557854474, -0.0020899400, 0.0640723854, 0.0008230656, 0.0520004630, 0.0363215953, -0.0301977098, -0.0118752755, -0.0270275213, -0.0336908475, 0.0021220967, -0.0600420386, -0.0683020949, -0.0566923171, -0.0437191539, -0.0114523061, -0.0562649593, -0.0447762087, -0.0643638149, 0.0661984831, -0.0150778107, 0.0365923718, 0.0583346933, 0.0389011130, -0.0381481089, 0.0063736066, 0.0715236664, 0.0209993199, 0.0135389268, -0.0147222243, 0.0282820240, 0.0562707484, -0.0146698989, -0.0345201753, -0.0504289195, -0.0012060627, -0.0621129088, 0.0535561591, -0.0522108637, 0.0676224232, 0.0121931955, 0.0482668355, 0.0121477023, 0.0361705273, -0.0515813828, -0.0241010077, -0.0112203844, 0.0362812132, 0.0104179829, -0.0228041969, 0.0138298124, 0.0344922841, -0.0125650428, -0.0698035210, 0.0489079058, 0.0227870420, 0.0721448958, -0.0444924422, -0.0293204784, -0.0285875201, 0.0356505290, 0.0064657778, -0.0097525418, 0.0198580548, 0.0012004524, -0.0235792100, 0.0282664821, -0.0454939231, -0.0016515180, 0.0019866154, -0.0043069124, -0.0457678512, 0.0332857594, 0.0548627824, -0.0707109198, 0.0398276374, -0.0206234120, -0.0497485623, -0.0514251143, 0.0629535317, -0.0652458817, 0.0185369104, -0.0700485930, 0.0037302598, -0.0053451285, 0.0056079552, 0.0212513432, -0.0615394898, 0.0467111170, -0.0396742113, -0.0565047637, 0.0516606048, 0.0172990486, 0.0484838039, 0.0404305682, 0.0609652996, 0.0098857880, 0.0567032993, -0.0354504399, -0.0452360362, 0.0230877250, 0.0662583262, 0.0498599708, -0.0694930553, -0.0219900608, 0.0140322670, 0.0162554011, -0.0099310055, 0.0195891336, -0.0720284954, -0.0125335567, -0.0156915449, -0.0209432617, -0.0156028122, -0.0469173193, -0.0191052929, -0.0491442755, 0.0659523010, 0.0312709063, 0.0044867024, -0.0084464401, -0.0455891788, 0.0636204779, 0.0681819618, -0.0030646622, -0.0161555149, -0.0317199416, -0.0124458373, 0.0596461594, -0.0436290614, -0.0111682639, -0.0711076632, 0.0703063011, -0.0090738684, -0.0239915922, 0.0582133234, 0.0396186188, -0.0610714927, -0.0468664393, 0.0264993012, -0.0297214389, -0.0532142892, 0.0439851806, 0.0590173006, -0.0292920880, 0.0299423188, 0.0402882397, 0.0152922049, -0.0636172816, 0.0111754388, 0.0543461442, 0.0440507010, 0.0198606327, -0.0664562285, -0.0533219799, -0.0531097576, -0.0719384402, 0.0066690892, 0.0218798742, 0.0514340624, 0.0032364354, 0.0366282836, -0.0416889898, 0.0545303375, -0.0446772389, -0.0717057586, 0.0182302594, 0.0018334910, -0.0484866463, 0.0093410537, 0.0504257530, 0.0255485997, -0.0298548043, -0.0283754878, -0.0465117991, 0.0224612206, -0.0348811485, 0.0168738961, -0.0370777510, 0.0644454956, 0.0670088232, -0.0236802436, 0.0565727651, -0.0273517072, -0.0569625944, 0.0382065549, -0.0454664081, 0.0561961830, -0.0714959428, -0.0458526611, -0.0630644709, -0.0235807225, 0.0446783900, 0.0718276948, 0.0199517608, -0.0649933815, 0.0648073554, -0.0066081583, 0.0106588006, -0.0188283734, 0.0145107582, 0.0236255452, -0.0355491191, 0.0013003200, 0.0222150162, 0.0124159530, -0.0615681745, 0.0017452911, 0.0622571707, 0.0338632911, 0.0293824524, -0.0371437185, -0.0428295322, 0.0019070357, 0.0232125223, -0.0142093711, -0.0679564178, -0.0605732314, 0.0668403655, 0.0514148995, -0.0220601447, -0.0062138587, -0.0472431406, 0.0358034819, 0.0668504387, -0.0629714057, -0.0617798790, 0.0357012376, -0.0616544485, -0.0146169737, -0.0226898603, -0.0563592538, 0.0426580384, -0.0721574053, -0.0452653021, 0.0257286280, -0.0419430062, 0.0143990219, -0.0532420762, -0.0056979433, -0.0280106924, -0.0351863541, -0.0361023359, -0.0466619954, 0.0327494517, 0.0500250310, -0.0709117502, 0.0345529690, -0.0024192184, 0.0041088462, 0.0296400860, -0.0074367672, -0.0197608359, -0.0458762646, 0.0157809481, 0.0077980831, -0.0237988979, -0.0024770647, -0.0229003988, -0.0563072376, 0.0575463772, -0.0228653327, -0.0584053323, 0.0261227936, -0.0279786028, 0.0286365226, 0.0172808841, 0.0290289819, -0.0517724082, 0.0265555307, -0.0120400265, 0.0017731190, 0.0057145134, 0.0185727850, 0.0203847736, -0.0110938288, 0.0501369759, 0.0342353582, 0.0227430314, 0.0353051126, 0.0675025880, -0.0291028693, -0.0133320689, 0.0309620351, 0.0557052940, 0.0495057255, 0.0212721080, 0.0507675409, -0.0451798551, 0.0459115207, -0.0691382885, 0.0502538458, -0.0573909804, 0.0200419575, -0.0322905555, 0.0397673622, -0.0200337991, 0.0648394227, -0.0533612669, -0.0408093333, 0.0387474224, -0.0216362998, -0.0514344573, 0.0632746816, -0.0165868960, 0.0475558490, 0.0227412730, -0.0265567042, 0.0650985390, 0.0482172295, -0.0167874210, 0.0339988396, 0.0427653715, -0.0309390314, -0.0517021418, -0.0655708760, 0.0034072772, -0.0526983514, 0.0648626983, -0.0623234808, -0.0296319462, -0.0491266884, -0.0177648962, 0.0311639011, -0.0415914282, -0.0444192663, 0.0147786066, -0.0554155707, -0.0444333032, -0.0537356921, 0.0243077949, -0.0420360267, 0.0330420807, 0.0369232371, -0.0207455941, 0.0073755160, 0.0597044230, 0.0556895435, 0.0020846054, 0.0259086043, -0.0307168961, 0.0607776940, -0.0328901485, 0.0230700895, -0.0335721560, 0.0607553422, -0.0484857708, 0.0280217081, 0.0366736427, -0.0514588244, 0.0074099749, 0.0266192630, -0.0257314667, -0.0320133604, -0.0629854798, -0.0529029891, 0.0510971993, -0.0196711905, 0.0634932220, -0.0709167570, -0.0317109786, -0.0300426297, -0.0406487770, 0.0633504987, 0.0063006133, 0.0064476579, -0.0208443925, 0.0688921511, 0.0456559211, 0.0714793950, -0.0404183678, -0.0531319901, -0.0647040159, -0.0545197874, 0.0449250937, -0.0214398541, -0.0319708437, 0.0353633240, -0.0527630337, 0.0405158922, -0.0681195855, -0.0083142072, -0.0612293296, 0.0680520833, -0.0258806981, -0.0528268665, -0.0026171580, 0.0508682132, -0.0326131918, -0.0410579965, 0.0302372351, 0.0292683914, -0.0102656856, -0.0605083294, -0.0296829976, -0.0111685060, 0.0710264295, 0.0582399070, 0.0518455878, 0.0587690920, 0.0720117241, -0.0198067799, 0.0680358410, -0.0659140050, 0.0016176924, -0.0418079719, 0.0279455483, 0.0556501895, -0.0072606802, -0.0282268412, 0.0493011102, -0.0282109417, -0.0184219740, -0.0359811708, -0.0423967242, -0.0148877688, 0.0410711095, -0.0299588330, 0.0180713609, -0.0615598261, 0.0238782912, -0.0259602964, 0.0237979665, 0.0366609767, 0.0690235794, -0.0306223109, 0.0450272709, -0.0523062870, -0.0637824833, -0.0543255284, 0.0116069242, -0.0625015870, 0.0563210696, -0.0306577235, 0.0315606818, 0.0576393753, -0.0396747589, 0.0251622647, 0.0244681388, -0.0539685786, -0.0628377274, 0.0326727480, -0.0549782850, 0.0046113059, -0.0065045133, 0.0589255542, 0.0566046685, -0.0246712789, -0.0478108153, -0.0173483305, -0.0377192535, -0.0510307476, 0.0705688447, 0.0084996223, 0.0066652671, 0.0550324619, -0.0419389158, 0.0595893413, -0.0712231025, -0.0251566209, -0.0100835413, -0.0449534208, 0.0173356161, 0.0392186195, -0.0370067395, 0.0526520535, -0.0523815528, -0.0703641623, 0.0628006160, -0.0352278389, 0.0366852880, -0.0405041091, 0.0030841753, -0.0154899918, 0.0255756453, -0.0174849331, 0.0181126371, -0.0168930665, 0.0041156262, -0.0312026665, -0.0641871393, 0.0143073797, 0.0010489151, 0.0547967106, 0.0343686417, -0.0641766936, 0.0719703287, 0.0412797332, 0.0674360096, 0.0542653054, -0.0232472122, 0.0476595536, 0.0646564960, 0.0326998308, -0.0283002257, -0.0204177946, 0.0513791218, 0.0499245152, 0.0445277318, -0.0602143593, 0.0537500232, 0.0131266266, -0.0500900075, 0.0667076260, -0.0114276335, -0.0291922726, 0.0171616226, 0.0646056980, -0.0570321940, -0.0614311770, -0.0039105639, -0.0707588196, -0.0160791017, 0.0038000122, 0.0046630353, -0.0100046471, -0.0567496307, 0.0394124463, 0.0589095652, 0.0375630558, 0.0284222364, 0.0084294528, 0.0190180019, 0.0420937017, -0.0421940163, -0.0143254809, 0.0192346647, 0.0436844826, -0.0553143434, -0.0217696652, 0.0339301676, -0.0695205331, 0.0659696162, 0.0344088823, -0.0488284826, -0.0654290766, 0.0538648069, -0.0350745656, 0.0236358866, 0.0212420672, -0.0148519799, 0.0081454664, -0.0038992390, -0.0492063686, 0.0474548638, 0.0341498926, -0.0005671754, 0.0649736971, 0.0699532926, 0.0189196020, 0.0074205920, 0.0239771083, -0.0282925703, -0.0473726355, -0.0533839762, -0.0110368580, -0.0019834638, -0.0081413016, -0.0356727131, -0.0107160807, 0.0405915305, -0.0226805881, 0.0220595896, -0.0135983042, 0.0081822723, -0.0409314968, 0.0035444424, 0.0085598454, -0.0277650729, 0.0415045023, 0.0445956290, 0.0106928721, -0.0265341438, 0.0381303132, -0.0032916144, 0.0144745931, 0.0232128128, 0.0110283792, 0.0062034503, -0.0018144101, 0.0659895539, 0.0023284554, -0.0622220859, -0.0061717406, -0.0020656064, -0.0425442010, 0.0654440820, 0.0472370014, -0.0669969916, 0.0006828904, -0.0642813444, 0.0616658330, 0.0583330840, 0.0508562773, -0.0401022360, 0.0624401718, -0.0671836957, -0.0684533045, -0.0321018361, -0.0294812210, 0.0654318333, 0.0365757868, -0.0069119930, -0.0502411947, 0.0038303807, -0.0062143058, -0.0285097994, -0.0648339242, 0.0253533944, -0.0010099486, -0.0450529903, -0.0247048326, 0.0373018458, -0.0559381619, -0.0594087392, 0.0221609697, 0.0493048280, -0.0346897952, -0.0267917588, -0.0343242809, -0.0210029148, -0.0120513663, 0.0503647029, 0.0640842766, -0.0575902462, -0.0356513932, -0.0081551373, 0.0503727049, 0.0031357110, -0.0114896446, -0.0025070533, -0.0618862845, -0.0619229861, -0.0335608535, 0.0592826158, 0.0035370439, 0.0289446712, -0.0542757660, -0.0454555191, 0.0298019499, -0.0097263716, 0.0070709288, 0.0315277278, 0.0664575249, 0.0477626324, -0.0330356285, 0.0561876595, -0.0693529919, -0.0032027811, 0.0424950719, 0.0240939334, -0.0008355752, -0.0424465872, 0.0638424605, -0.0384194180, 0.0037831292, -0.0247770809, 0.0687579811, -0.0700946599, 0.0197919309, 0.0567763448, -0.0099967159, -0.0123629719, 0.0666888207, -0.0379793122, -0.0667411312, 0.0627773702, 0.0129489154, -0.0388493203, -0.0147169083, -0.0197272860, 0.0210510716, 0.0240460485, -0.0652506799, 0.0088508725, 0.0399362296, 0.0516158119, -0.0185527429, -0.0498410091, -0.0260917358, -0.0341481566, 0.0324130803, 0.0345092714, -0.0658041760, -0.0363306664, -0.0367151611, -0.0657770783, 0.0492376387, -0.0536707379, 0.0421905890, -0.0325901881, 0.0384045839, 0.0259727165, -0.0563405827, 0.0179043189, -0.0542872250, -0.0010571629, 0.0171233416, -0.0566016361, -0.0021781549, 0.0142757520, 0.0320355445, -0.0276475549, 0.0275805667, 0.0008829832, 0.0215030164, -0.0437586233, 0.0659484565, 0.0475237742, 0.0496183261, -0.0333850384, 0.0238800645, -0.0343492329, -0.0367197543, -0.0431351177, 0.0464875400, 0.0473938882, -0.0627740473, 0.0640571564, 0.0544129163, 0.0050019473, 0.0328613967, 0.0225504562, -0.0250165090, -0.0304351076, 0.0535473675, 0.0281541944, -0.0218652636, -0.0032753199, 0.0539344251, -0.0124728680, 0.0683493465, -0.0658106953, 0.0696426630, 0.0242045075, -0.0262402259, 0.0050224885, 0.0303852782, 0.0112289488, 0.0630531758, 0.0442874432, 0.0708474815, -0.0447144061, -0.0489931330, -0.0536276549, -0.0345812254, 0.0094456449, -0.0035506040, -0.0502384789, 0.0160509348, -0.0357401781, 0.0629835576, 0.0574910641, -0.0588885397, 0.0615682453, -0.0185200348, 0.0191694573, -0.0143756717, 0.0353809595, 0.0058699921, 0.0209700316, 0.0158243626, -0.0599280447, -0.0571521223, 0.0641476512, 0.0179814920, 0.0240402371, -0.0220856592, -0.0615141802, -0.0128076896, -0.0100658163, -0.0210734941, -0.0287983157, 0.0099441335, 0.0379940718, 0.0229924545, -0.0383440368, -0.0053002015, 0.0468629152, -0.0704625621, 0.0325093195, -0.0008118972, 0.0005268082, 0.0496399179, 0.0626716167, -0.0263625458, -0.0129838809, 0.0121701434, 0.0329160243, 0.0123936832, -0.0530463383, 0.0337816626, 0.0008194745, -0.0255181603, -0.0323586613, 0.0286281779, 0.0671398938, 0.0339378268, 0.0066872910, -0.0709617212, -0.0301546268, 0.0613908619, 0.0160876215, -0.0382782221, 0.0313720778, -0.0465273187, -0.0435318947, 0.0546014756, 0.0092735514, -0.0484014899, -0.0029378012, -0.0132277645, -0.0094037354, 0.0595701188, 0.0708075166, -0.0270374157, -0.0260909088, 0.0438351780, 0.0575369745, 0.0229996294, -0.0601080917, 0.0533986837, -0.0554747246, 0.0046554804, 0.0217399001, 0.0539639741, -0.0048751682, -0.0045566261, 0.0354022980, -0.0548875928, 0.0153686702, -0.0422740765, 0.0363156125, 0.0063983947, 0.0468229279, -0.0538732223, -0.0687228069, 0.0338995457, -0.0063004941, -0.0460052453, -0.0385374203, 0.0682740659, 0.0091460869, -0.0437502116, -0.0091490448, 0.0312333107, 0.0356394351, 0.0430201292, 0.0129084662, -0.0523949191, -0.0124096349, 0.0374400094, -0.0050294250, 0.0061974451, 0.0637975335, 0.0202547312, -0.0343714803, -0.0463102274, -0.0188764110, 0.0098453164, -0.0239603631, 0.0034792870, -0.0286917724, 0.0692390501, 0.0674863309, 0.0166369006, 0.0136522949, 0.0182032660, 0.0074645579, 0.0558366328, -0.0321141928, -0.0583589599, 0.0165584534, -0.0146121718, -0.0477926098, 0.0143320858, 0.0150010362, 0.0217334479, -0.0634906963, -0.0684989020, 0.0329041854, 0.0517139062, 0.0283444971, -0.0379977226, -0.0112380534, -0.0693940967, 0.0354719982, -0.0699252114, -0.0350790583, -0.0532206371, -0.0185072832, 0.0007863864, 0.0300185382, 0.0198709890, 0.0176311880, 0.0225644484, 0.0203680992, -0.0227633156, -0.0506283566, 0.0038588718, -0.0471976325, -0.0607144088, -0.0587597489, -0.0703283548, 0.0446898863, 0.0720171183, -0.0092655495, -0.0651814640, -0.0340006649, -0.0237240344, -0.0137081668, -0.0040189251, -0.0082686618, -0.0034117848, 0.0453145429, -0.0375281610, 0.0327747986, -0.0621708259, -0.0350923240, -0.0278475434, 0.0698168278, -0.0631375834, 0.0555454791, -0.0017431080, 0.0302654505, -0.0711900145, -0.0119748302, -0.0163813680, 0.0500585884, -0.0113976412, 0.0003658086, 0.0031050816, -0.0309525728, 0.0676995516, 0.0176001117, -0.0188443214, -0.0478000939, -0.0331087187, 0.0152828917, -0.0442050770, -0.0651534349, -0.0136552751, 0.0217579156, 0.0706081986, -0.0477286205, -0.0375045724, -0.0711555853, -0.0043940470, 0.0227145329, 0.0445880964, -0.0066624805, -0.0526291505, 0.0612317771, 0.0571828932, -0.0044643357, 0.0191513896, -0.0701929405, -0.0403813906, 0.0037025735, 0.0114364102, -0.0446087420, 0.0048844814, 0.0427249521, 0.0003821850, 0.0660208911, 0.0702584684, -0.0121462233, 0.0221924782, -0.0442803204, 0.0436872393, -0.0613111779, -0.0202036425, 0.0573744923, 0.0111596584, 0.0165811181, 0.0024135038, -0.0687312409, -0.0213861354, -0.0050699487, 0.0281161517, -0.0132013001, -0.0426592603, 0.0239568353, -0.0420742594, -0.0349568389, 0.0685682744, 0.0686462820, -0.0063550919, -0.0598476566, -0.0650523752, 0.0071545690, 0.0134287328, 0.0088686869, 0.0034494326, -0.0365799516, -0.0405170470, 0.0672671795, 0.0427152440, -0.0047343150, -0.0110777244, -0.0638598576, 0.0153883845, 0.0632805675, 0.0492702723, 0.0492900833, -0.0340204686, -0.0598749816, 0.0064033195, -0.0231765620, 0.0447461158, -0.0073621944, -0.0228973031, 0.0672827512, -0.0032347962, 0.0701497495, 0.0585537404, -0.0380788334, -0.0233406238, -0.0157430619, 0.0222299844, 0.0117448345, -0.0214234740, 0.0589734912, 0.0718682259, 0.0137049183, 0.0528326184, -0.0062938184, -0.0177125745, -0.0448844060, -0.0597698316, 0.0314145312, -0.0368019305, 0.0024122670, -0.0516077131, -0.0151240453, 0.0602036566, 0.0082777292, 0.0186489448, -0.0420002714, 0.0506600365, 0.0458185375, -0.0437493175, 0.0097270235, -0.0080836937, -0.0043562427, 0.0609891415, 0.0673348904, -0.0553702116, -0.0147444904, 0.0666119307, -0.0400393642, 0.0430009738, 0.0062222257, -0.0249366872, 0.0640521199, -0.0009703040, -0.0473828912, 0.0083315149, -0.0638726950, 0.0319610685, -0.0209207349, -0.0642027482, 0.0454867631, 0.0677094609, -0.0361788720, 0.0316627994, 0.0213343129, -0.0130594857, 0.0005816817, 0.0704327226, -0.0166218281, 0.0492791533, -0.0407523960, 0.0502029136, -0.0611216873, -0.0222623162, 0.0680196434, -0.0104203373, -0.0471142828, -0.0007522777, -0.0297141783, -0.0615634397, -0.0097355582, 0.0230591446, 0.0336419120, -0.0042503700, -0.0453504734, 0.0486405417, -0.0462531000, 0.0252123997, 0.0199292228, 0.0062805191, -0.0199024640, -0.0423630327, 0.0031347796, -0.0353309922, -0.0569708012, -0.0675513819, -0.0657531768, -0.0320243239, 0.0564382225, 0.0566463768, 0.0353902206, -0.0124608576, -0.0144718029, -0.0496316105, 0.0625862926, -0.0553208813, -0.0165629275, 0.0053144321, 0.0348288268, -0.0505360290, 0.0502604023, 0.0198417753, -0.0119161904, 0.0322901756, 0.0068774745, -0.0087499768, 0.0654459894, -0.0144556798, 0.0390593559, 0.0571754724, -0.0538174734, 0.0432137176, 0.0346246734, -0.0335512497, -0.0635036156, -0.0676280856, -0.0383678488, 0.0597347766, -0.0712048784, 0.0040191188, -0.0241465010, -0.0161771439, 0.0461896956, 0.0176685750, 0.0682691336, 0.0707669556, -0.0262556784, 0.0624057949, 0.0016713440, -0.0633121952, -0.0409526974, 0.0598283112, -0.0112025402, -0.0118255131, -0.0005132854, -0.0472041331, 0.0069370419, 0.0479384363, 0.0508263707, 0.0016266555, 0.0355169773, 0.0080616176, 0.0109951720, -0.0371446647, 0.0648274124, 0.0451472625, -0.0487159565, 0.0488616899, -0.0124894381, -0.0290639289, 0.0141301155, -0.0694421753, 0.0187239498, 0.0292825177, -0.0281444378, 0.0546146780, -0.0253349654, -0.0008427501, 0.0420491025, 0.0430249423, 0.0312538370, 0.0244641975, 0.0409592018, 0.0323155895, -0.0082357153, 0.0559316427, 0.0307740867, 0.0243191496, -0.0665361881, 0.0632365346, 0.0351741388, -0.0413548425, 0.0690909326, 0.0676240623, -0.0120479055, 0.0023450032, 0.0298405215, 0.0516821817, 0.0023145527, 0.0153492764, 0.0226606280, 0.0216949210, 0.0582519770, 0.0519763082, -0.0593512692, 0.0144418329, 0.0589342713, 0.0387594849, 0.0423654392, -0.0225329213, -0.0034435093, 0.0371202826, 0.0030992851, 0.0494023710, 0.0118635893, 0.0339980870, -0.0640751272, -0.0271633826, -0.0508005619, 0.0113710910, -0.0223809034, 0.0264397711, 0.0083557591, -0.0093135238, 0.0270232037, 0.0646102577, -0.0657205582, 0.0220162645, -0.0652517825, -0.0719738156, 0.0078411326, 0.0601233542, 0.0249714479, 0.0266007707, -0.0505699441, 0.0099553689, 0.0352082625, -0.0349482894, -0.0099293366, 0.0469788685, 0.0208476409, -0.0535702705, 0.0139928609, -0.0582816005, 0.0500371307, 0.0436774939, -0.0148679987, -0.0713764429, 0.0417129397, 0.0520738289, 0.0387810469, 0.0173411369, 0.0013386011, 0.0454599932, -0.0125874467, 0.0098855644, -0.0352613591, 0.0335553959, 0.0049035922, -0.0486474223, 0.0053529367, -0.0058670491, -0.0537111051, 0.0296759978, 0.0146324262, -0.0400805399, -0.0059534386, 0.0718590617, 0.0153421536, -0.0454047099, 0.0360357687, 0.0641060919, 0.0312086716, -0.0148228295, 0.0080777407, -0.0080488548, -0.0160580948, 0.0666252971, 0.0634010285, 0.0121371523, 0.0528187156, 0.0707431436, -0.0363567173, -0.0076118931, 0.0316259935, 0.0194360316, -0.0679217130, 0.0322392806, 0.0421073958, -0.0045318529, -0.0652056038, -0.0682285577, 0.0376199260, -0.0620174669, 0.0378070623, -0.0716932863, 0.0645404309, 0.0411332399, -0.0065143183, -0.0628050715, 0.0138430148, 0.0682467371, 0.0671667308, -0.0437843837, -0.0089790449, 0.0333628058, 0.0224710330, 0.0125609636, -0.0098552294, -0.0702703372, -0.0220106393, 0.0461699814, -0.0472141989, 0.0695782900, -0.0601306483, -0.0438966528, -0.0647056550, 0.0542203486, -0.0505735204, -0.0356414318, 0.0343180671, 0.0138996243, -0.0485501550, -0.0336508416, 0.0608325601, 0.0662651658, 0.0569578260, 0.0266501680, 0.0236936808, -0.0380783007, 0.0376506671, -0.0231420472, 0.0524753109, 0.0377229527, -0.0183222480, 0.0332723185, 0.0281855464, 0.0577378571, 0.0250845775, 0.0453234389, 0.0029309690, -0.0590366684, 0.0060144067, 0.0616988838, 0.0503083020, -0.0691940412, -0.0423129797, 0.0403173864, -0.0307435133, -0.0135117061, -0.0468616262, -0.0296123140, -0.0069703385, -0.0313499533, -0.0287133157, -0.0288402289, 0.0122621432, -0.0480527505, 0.0571702868, 0.0105444789, 0.0133653656, -0.0478620194, 0.0086605027, -0.0091901124, 0.0334983096, -0.0379990824, -0.0415074639, -0.0618092194, -0.0017278269, 0.0497525036, -0.0476241559, -0.0521388203, -0.0281855464, 0.0308649540, -0.0045765862, -0.0329006426, 0.0643352270, 0.0078280568, -0.0557284504, -0.0018967614, 0.0041398555, 0.0137920305, -0.0097752549, -0.0341989696, -0.0082772300, 0.0184490606, 0.0140362754, -0.0398368798, 0.0683714002, 0.0235556215, 0.0655039102, -0.0549977124, 0.0547242910, -0.0056193098, -0.0442811474, -0.0358580239, 0.0136431083, -0.0306207463, -0.0432324372, 0.0421975404, -0.0502580777, -0.0593017489, 0.0172517002, -0.0060317963, 0.0252722651, -0.0224101022, -0.0554549359, 0.0466711298, 0.0019042119, 0.0680748671, 0.0194750205, -0.0286303833, -0.0211054459, -0.0511761755, -0.0016881675, -0.0386873223, 0.0282356292, 0.0246167704, 0.0160432085, -0.0037436932, -0.0018282309, -0.0576329529, -0.0352956839, 0.0210771114, 0.0721391737, 0.0608063638, 0.0430198163, -0.0028005764, -0.0154010691, 0.0378514379, -0.0360802263, -0.0175842494, -0.0447723195, -0.0702537969, 0.0009277835, -0.0375786461, 0.0156788155, -0.0128067248, 0.0122922361, -0.0643633828, -0.0414051861, 0.0090645403, -0.0346750505, 0.0470208824, 0.0690744668, -0.0056761056, -0.0094376281, 0.0690457225, -0.0684456304, -0.0206194706, -0.0420199372, -0.0608189553, 0.0193726942, 0.0039082021, -0.0003778040, -0.0031637698, -0.0446420684, -0.0577566698, -0.0429025367, 0.0599927455, 0.0647306591, 0.0370060652, -0.0074760169, -0.0403826982, 0.0008548647, 0.0679073632, 0.0453284308, 0.0679323971, -0.0418304950, -0.0412228853, 0.0534462631, 0.0681907833, 0.0550855845, -0.0063823983, -0.0553351976, -0.0447151810, 0.0414032787, -0.0189279616, -0.0413142517, 0.0154795796, -0.0369649790, -0.0174502097, 0.0495456830, 0.0340884998, -0.0300040692, 0.0602038056, 0.0166699365, 0.0372919664, 0.0235753879, -0.0485469364, -0.0452877209, 0.0623554289, 0.0370777696, 0.0470939279, 0.0060457364, -0.0029469207, 0.0470797867, -0.0068918392, 0.0138418600, -0.0203713886, 0.0672595650, -0.0599284247, -0.0695248321, -0.0167503767, -0.0286327228, -0.0589864589, -0.0623686314, -0.0100136138, -0.0015777573, 0.0040628016, -0.0631033629, -0.0678175986, 0.0158711821, -0.0347076394, 0.0339728072, 0.0255701914, -0.0440836176, -0.0328336246, 0.0053514913, -0.0160095021, -0.0383770913, 0.0644563735, -0.0547379293, 0.0323138908, -0.0191322714, 0.0587847382, 0.0223935694, 0.0348524973, -0.0373142846, 0.0417188928, -0.0249016732, 0.0530616790, -0.0485894904, 0.0066726878, -0.0107111409, 0.0038978308, -0.0040346906, -0.0172438882, 0.0557883233, -0.0049000531, 0.0419138595, -0.0315338187, -0.0571379103, 0.0542113334, 0.0179286003, 0.0665629059, -0.0599556938, -0.0017029494, -0.0615786165, -0.0123057961, -0.0550506562, 0.0417167097, 0.0599526614, -0.0206960030, -0.0227402784, -0.0680978373, -0.0113012716, 0.0269146487, -0.0127239972, -0.0045537353, 0.0268410742, 0.0248324871, 0.0259451866, -0.0599759445, 0.0339958444, 0.0386323258, -0.0203296281, 0.0524674952, -0.0100694820, 0.0345442817, -0.0580033213, 0.0244766250, -0.0530898869, 0.0234850869, 0.0406554565, 0.0266943872, -0.0033173561, -0.0185606405, -0.0529449880, -0.0342918821, 0.0481109619, -0.0223848969, -0.0520619228, -0.0667458847, -0.0688205212, -0.0625998154, 0.0105729550, 0.0278780013, 0.0590871722, 0.0267143995, 0.0299426615, 0.0162535235, 0.0336513370, -0.0457080379, 0.0518259406, -0.0579091497, -0.0422887728, -0.0611449480, -0.0317050405, 0.0704536289, 0.0612813532, 0.0524056926, -0.0492695197, 0.0475739688, 0.0054125041, -0.0258010663, 0.0333974957, 0.0044906214, -0.0710632876, -0.0280610062, -0.0645196512, -0.0236189552, -0.0149618760, 0.0669948757, -0.0197540931, -0.0588375404, -0.0654873401, 0.0458754078, 0.0023866072, -0.0579288192, 0.0684064925, 0.0226159468, -0.0254770368, -0.0352778584, -0.0704484358, -0.0112853721, -0.0076635480, 0.0141166672, 0.0387279987, 0.0235046670, 0.0327725261, 0.0374790356, -0.0534171015, 0.0711143166, 0.0471854806, 0.0513680279, -0.0008481741, 0.0699521899, -0.0337805785, -0.0474783704, 0.0528638661, -0.0641029626, -0.0610334165, 0.0326550901, -0.0066489056, -0.0664823651, 0.0365674123, -0.0263986625, -0.0190679729, -0.0646951422, 0.0707970858, -0.0337183438, -0.0371111631, -0.0208421908, -0.0505731404, -0.0254981481, -0.0000439659, 0.0261139125, 0.0101321340, 0.0436428413, -0.0531524830, -0.0013778359, -0.0209389068, -0.0636666790, 0.0185266212, -0.0260369666, 0.0463111773, 0.0290450528, 0.0285757706, 0.0135629475, 0.0217108876, -0.0283700675, 0.0598361045, -0.0654750541, -0.0542588346, -0.0218530633, 0.0397057682, -0.0382200107, -0.0507217050, -0.0230078027, -0.0561667979, 0.0566236228, -0.0504221730, -0.0699361861, -0.0251201428, 0.0398003981, 0.0118711591, -0.0637485310, -0.0426682048, -0.0057470351, 0.0632047951, -0.0595198758, 0.0531086177, -0.0681492686, -0.0459861308, -0.0379852839, -0.0212893672, 0.0416633338, -0.0310826525, 0.0295588374, -0.0228540115, 0.0572051704, 0.0370213985, 0.0631732047, -0.0039540604, 0.0140894949, -0.0164485574, -0.0278657302, -0.0584619753, -0.0172717459, 0.0155433118, -0.0123371817, -0.0657515079, 0.0103708729, -0.0691892728, -0.0493173376, 0.0142816529, -0.0206722431, -0.0183675699, -0.0679037869, -0.0005948097, 0.0197161213, -0.0704115629, 0.0617649108, 0.0364483371, -0.0635924041, -0.0142288990, -0.0225591622, -0.0417439304, -0.0058380738, -0.0611911975, 0.0636274368, -0.0101889633, -0.0606952757, 0.0404674262, -0.0023540407, 0.0706507117, 0.0717924237, 0.0101884827, -0.0280061513, -0.0363224261, -0.0110406801, 0.0702728331, -0.0368067846, -0.0394454338, 0.0567369610, -0.0082650334, -0.0080711991, -0.0552148372, 0.0383068845, -0.0144271888, -0.0359027274, 0.0108742416, -0.0455359221, -0.0633832365, -0.0358027071, 0.0307036489, -0.0322343446, 0.0279840231, 0.0114327595, 0.0248853788, 0.0238396078, 0.0043871775, -0.0075894073, 0.0105925053, -0.0112380534, -0.0307510681, -0.0233522393, 0.0116093010, 0.0156908408, 0.0198886618, -0.0287528224, -0.0391890071, -0.0339340940, 0.0718553364, -0.0061665922, 0.0365423560, -0.0309524164, -0.0163677931, -0.0529142618, -0.0483780056, -0.0322703384, -0.0358730108, 0.0554126650, 0.0011138394, -0.0406138487, 0.0677901059, -0.0539053306, 0.0514079779, 0.0212781280, 0.0663213432, -0.0291783698, -0.0278392993, 0.0678069443, 0.0179694816, -0.0047471747, -0.0198860653, 0.0032358989, 0.0027289987, -0.0058322772, -0.0664898530, 0.0288240239, -0.0089533702, -0.0434773862, -0.0209361538, -0.0333217867, 0.0132623985, -0.0200700536, -0.0056977198, -0.0252639018, -0.0040899366, 0.0167285576, 0.0242773071, 0.0657500774, -0.0438686758, -0.0652054846, 0.0279472023, 0.0624066293, -0.0149832442, 0.0444777310, -0.0599648505, 0.0080806315, 0.0705645829, 0.0365190059, -0.0630662143, 0.0691926181, 0.0121816844, 0.0246930942, -0.0041865185, -0.0230776928, 0.0425650552, 0.0472570956, 0.0088856816, -0.0117553100, -0.0401810594, 0.0401445255, -0.0333752818, -0.0496032387, 0.0475870296, 0.0444955379, -0.0311259590, 0.0033676997, -0.0013096258, 0.0045479015, 0.0381821916, -0.0393246263, 0.0646765530, -0.0548715368, 0.0229301825, -0.0459295213, -0.0269201174, -0.0219630487, 0.0366055369, 0.0708291978, -0.0015344992, 0.0506750047, -0.0155429691, 0.0560697168, -0.0277932212, 0.0115955994, 0.0018005967, -0.0023363009, 0.0593080521, 0.0408969820, 0.0233807638, -0.0581386834, 0.0638725609, -0.0713429973, -0.0545354448, 0.0145004541, -0.0171999261, -0.0710062683, -0.0078685954, -0.0111277103, 0.0525446460, -0.0058668107, 0.0368627533, 0.0058172867, -0.0638339594, -0.0144455619, -0.0007182285, 0.0408033580, -0.0472398885, 0.0495927930, 0.0318323672, -0.0072598681, 0.0707652420, 0.0701580495, -0.0247997604, 0.0287108719, -0.0482881367, -0.0164969265, 0.0527988598, -0.0050487295, -0.0566925742, -0.0112594254, 0.0437146127, 0.0175678357, -0.0439604744, -0.0245409422, -0.0120455846, 0.0439840779, -0.0392814726, 0.0472498834, -0.0137289539, 0.0440996736, 0.0564224124, -0.0166400149, -0.0636715814, 0.0344648957, 0.0300114378, -0.0569541976, 0.0250710696, -0.0632461011, -0.0443021208, -0.0380582362, 0.0571932644, 0.0448089167, 0.0252934620, 0.0101668537, 0.0393556133, 0.0306299329, 0.0361075178, 0.0452993363, 0.0585143119, -0.0438773148, -0.0626489073, -0.0418424383, 0.0509507209, 0.0653665960, 0.0187884346, -0.0554962158, 0.0538075268, 0.0325737074, -0.0049880967, 0.0280896723, -0.0469771326, -0.0372089669, -0.0655356869, 0.0448769704, -0.0135851055, -0.0571160913, -0.0434522144, 0.0323919356, -0.0658992603, -0.0693697333, 0.0531068742, 0.0403523818, -0.0090080202, -0.0147007667, -0.0071370676, -0.0137200579, -0.0499461070, 0.0454042405, 0.0218951851, 0.0523809642, -0.0163138323, 0.0399238765, -0.0089452490, -0.0692418739, -0.0355258882, 0.0256667063, -0.0093492940, 0.0242236182, 0.0111781955, 0.0397567824, -0.0296616107, -0.0298161246, 0.0461411253, 0.0519335642, 0.0566287041, -0.0716190711, -0.0423036516, -0.0347072966, -0.0123966970, 0.0433720499, 0.0438631848, 0.0496150255, -0.0328787901, -0.0327353776, 0.0196626931, 0.0179016516, 0.0643115640, 0.0187787488, -0.0497202910, 0.0590697080, -0.0447930545, -0.0595166385, 0.0093882978, 0.0225397721, -0.0594161898, 0.0026944652, -0.0490282513, -0.0700256228, -0.0629876629, 0.0367291346, 0.0556444824, -0.0147262700, 0.0514167398, 0.0032162145, 0.0529573560, 0.0087710023, -0.0509423241, 0.0043661520, -0.0144464746, 0.0110257119, -0.0577188134, -0.0564865991, -0.0353322662, 0.0713395178, 0.0050179660, -0.0501331240, -0.0606843345, -0.0316332914, 0.0395436510, -0.0695921630, 0.0426635966, -0.0589862540, -0.0063989982, 0.0096416101, 0.0530996770, 0.0042624846, 0.0578074604, -0.0621908717, -0.0474921837, -0.0591998026, 0.0061258674, -0.0056350008, -0.0645290837, 0.0411661267, 0.0196854398, 0.0692180246, -0.0051524192, -0.0410503596, -0.0351653472, 0.0120234564, -0.0449751168, 0.0083028153, 0.0551604480, -0.0414721221, 0.0652801841, 0.0708027482, 0.0276483074, 0.0422328338, 0.0272685811, -0.0362168476, -0.0494301580, -0.0062623322, -0.0059408098, 0.0566599518, 0.0171993375, -0.0176708810, -0.0029082745, -0.0669227839, -0.0071928874, -0.0604744330, 0.0599283129, 0.0013336465, -0.0508252308, -0.0638128668, 0.0565821826, 0.0591216087, -0.0267408974, 0.0049034581, 0.0121523142, -0.0666410252, -0.0184855871, -0.0163675845, 0.0508607104, 0.0387086943, -0.0142431818, 0.0323156416, 0.0652571023, 0.0047277957, -0.0319833010, 0.0128232092, -0.0551975816, 0.0473781750, 0.0066259876, -0.0370234996, 0.0687747449, 0.0633770227, -0.0655172095, -0.0193689801, 0.0643729568, 0.0219127014, 0.0498925596, -0.0387165546, 0.0103854239, 0.0536180288, 0.0147292465, -0.0691332817, -0.0564630926, 0.0459494069, 0.0624677986, 0.0335395336, 0.0427046344, 0.0159275159, -0.0620089322, 0.0547539443, -0.0393335931, 0.0207563788, -0.0224607065, -0.0041170046, 0.0381680652, 0.0529202521, 0.0025965273, -0.0370953865, -0.0407531001, -0.0084945485, 0.0622044504, -0.0205593668, -0.0201259404, 0.0081003159, 0.0305835605, 0.0068011656, -0.0503767133, 0.0399966091, 0.0658562332, -0.0589257739, -0.0632243752, -0.0444681793, -0.0362981446, 0.0565427989, -0.0005626306, 0.0236561745, 0.0452861562, -0.0022390634, 0.0354026034, 0.0620740205, -0.0503753573, 0.0005623251, -0.0690016747, -0.0501854643, 0.0004316196, 0.0521095321, 0.0326438546, 0.0649546236, 0.0548525602, 0.0292093754, -0.0209212862, -0.0682395548, -0.0218112022, -0.0192044526, -0.0417372026, 0.0423365012, -0.0033631772, -0.0521046147, 0.0172517523, 0.0426018089, 0.0560906827, -0.0687237903, 0.0321225375, -0.0552528650, 0.0346201435, 0.0201740339, -0.0164861009, -0.0310994275, 0.0569859743, 0.0683333129, 0.0485485867, -0.0098926686, -0.0406194925, -0.0017454177, -0.0529615767, 0.0379756838, -0.0378543958, -0.0395576544, -0.0159953944, -0.0141022280, 0.0009966791, 0.0437703952, 0.0362113565, -0.0199960321, 0.0041554421, -0.0239093453, -0.0498813763, 0.0703918636, 0.0226143971, -0.0617986172, 0.0712408125, -0.0128918961, 0.0309756249, 0.0042806193, -0.0091454461, -0.0319907703, 0.0704543591, 0.0710623562, -0.0696093366, -0.0491797179, 0.0577885509, 0.0501593947, -0.0126615874, -0.0019635037, 0.0238412470, 0.0061469972, -0.0020115972, 0.0541451424, -0.0283072814, -0.0094158277, 0.0451736748, 0.0670267791, -0.0592137724, 0.0155222192, 0.0566136688, 0.0397798568, 0.0705065727, -0.0691048279, -0.0553224646, 0.0181954205, -0.0719096884, -0.0127828605, 0.0654019266, 0.0315357968, -0.0356434099, 0.0238610655, 0.0690660477, -0.0039528757, 0.0260691792, -0.0099391975, -0.0554598235, -0.0165143199, 0.0445539579, 0.0559630990, 0.0468143895, 0.0690096468, 0.0202598721, 0.0290349051, -0.0176335089, -0.0183062106, 0.0361527205, 0.0070029795, 0.0425887108, -0.0264498703, -0.0652857348, 0.0020219758, 0.0161115006, -0.0223506726, -0.0424160659, -0.0378378779, -0.0276609734, -0.0525315702, -0.0709325075, 0.0194521174, -0.0554865785, -0.0259528123, -0.0399786755, -0.0607290007, -0.0700341240, 0.0002803281, 0.0115969107, 0.0568407923, -0.0689406767, -0.0552593507, -0.0612848029, -0.0104955994, -0.0401022881, -0.0191673711, 0.0580055565, 0.0527716205, -0.0430416353, 0.0375096500, 0.0311665982, -0.0262742266, 0.0455010086, -0.0552187636, 0.0246748924, -0.0157828778, -0.0601378083, -0.0273395590, -0.0023770258, -0.0450386070, -0.0438502505, -0.0714367852, -0.0358736292, -0.0139365643, 0.0565138310, -0.0179551467, -0.0208412074, -0.0166186616, -0.0282119736, -0.0297597721, -0.0259552039, -0.0078396872, -0.0049090162, -0.0599034056, -0.0540840700, -0.0666207373, 0.0168199614, -0.0476047844, -0.0393983573, -0.0608806908, -0.0678332075, -0.0664089993, 0.0012563393, 0.0464148745, 0.0316412225, -0.0505002737, -0.0346814357, 0.0200018808, 0.0686063915, -0.0004059821, -0.0422909185, -0.0118475221, -0.0265545174, 0.0441825539, 0.0141832009, 0.0473513007, 0.0186389312, 0.0380046219, -0.0358764865, 0.0013184696, 0.0107493252, -0.0251623169, -0.0451313332, -0.0597147867, -0.0050960109, 0.0002117380, 0.0683081001, -0.0203832611, -0.0129905418, -0.0085361674, -0.0202538855, 0.0684690326, -0.0116834939, -0.0358458944, -0.0555043705, -0.0446943082, -0.0495584644, -0.0436786860, -0.0268066786, 0.0586925745, -0.0252958387, -0.0272226930, -0.0557668209, -0.0382910594, 0.0010349303, -0.0207020082, -0.0393145084, -0.0011148006, 0.0143438056, -0.0603041425, 0.0609699190, -0.0202567093, 0.0077950880, 0.0521078631, -0.0242776163, -0.0392485745, 0.0087178200, -0.0184191167, 0.0101045519, 0.0508639291, 0.0126579031, 0.0148016512, -0.0386257730, -0.0441766717, 0.0278581232, -0.0238203555, 0.0287480727, 0.0684709400, 0.0009076893, 0.0337991640, -0.0222346149, -0.0633502007, -0.0249259509, 0.0299526379, 0.0622727871, 0.0291141868, 0.0171078891, -0.0714038014, 0.0473972932, -0.0529477596, 0.0583949834, 0.0537727028, -0.0608094595, 0.0088313147, 0.0495680496, 0.0431228876, -0.0514619574, -0.0599432886, -0.0050271377, 0.0546405017, 0.0683484375, 0.0528846532, 0.0676165819, -0.0708709881, 0.0542172343, 0.0678568184, -0.0519068763, 0.0630569160, -0.0073484629, 0.0037030056, -0.0453271568, 0.0547707230, -0.0502515733, 0.0216633826, 0.0531121343, -0.0655981675, -0.0448933840, 0.0194198787, -0.0398117751, 0.0220686793, 0.0700260103, -0.0232819170, -0.0270794332, 0.0456572473, 0.0508605614, 0.0113384351, 0.0211850628, 0.0055554956, 0.0647940934, 0.0306017473, -0.0286423042, -0.0008813143, -0.0333545804, 0.0198663473, -0.0390042439, -0.0065346733, 0.0560788214, -0.0231737047, 0.0605207831, -0.0349648744, 0.0466492474, -0.0026286393, 0.0020395070, 0.0059099272, -0.0719869658, 0.0695580542, 0.0177628994, -0.0097337514, -0.0481409691, 0.0026938170, -0.0251365937, -0.0702724531, -0.0286653973, -0.0522741824, 0.0258149505, 0.0414087176, 0.0327104107, -0.0141399615, -0.0690413341, 0.0383630171, -0.0025783777, -0.0372099653, -0.0089716464, -0.0108811408, -0.0589729697, 0.0586090535, 0.0315810516, 0.0328843817, 0.0223272368, -0.0594417900, 0.0077899992, -0.0141012110, -0.0012865067, -0.0081677288, -0.0686426982, -0.0188288018, -0.0246897750, 0.0437133387, -0.0550003089, 0.0484582186, 0.0497549623, 0.0567912459, 0.0011778101, -0.0447895117, 0.0529865772, 0.0338775888, 0.0502485260, 0.0013197958, 0.0266325176, 0.0622703731, -0.0550800115, -0.0654672757, -0.0485487580, 0.0097799674, 0.0149015635, -0.0467022061, -0.0650124922, 0.0382574871, -0.0701275244, 0.0697195679, 0.0009376481, -0.0702291727, 0.0559506565, 0.0694303513, 0.0268835574, 0.0573693365, 0.0234571770, -0.0132049508, 0.0013938546, -0.0309994929, 0.0501692370, 0.0644450486, 0.0719704926, -0.0205952451, 0.0251069590, -0.0684000701, -0.0342860483, -0.0077934042, 0.0234488174, 0.0033620372, -0.0119438060, -0.0223928280, -0.0080654025, 0.0037423000, -0.0335726216, -0.0432412289, -0.0427153185, 0.0169903859, -0.0404663906, -0.0654280782, -0.0059505701, 0.0336946994, -0.0249138027, 0.0138779730, -0.0188098922, -0.0071084574, -0.0155035332, 0.0637078881, -0.0182389505, 0.0720590353, 0.0483699143, 0.0282508433, 0.0503486693, 0.0099540800, 0.0500855967, -0.0470900387, -0.0508105233, -0.0544026271, 0.0654212683, -0.0489727594, 0.0267534256, 0.0309071317, -0.0687717646, 0.0367384776, 0.0544171333, -0.0617794506, -0.0679835379, 0.0241226554, -0.0374410786, 0.0440723822, -0.0644224510, -0.0487215966, -0.0259327814, -0.0423336104, -0.0450942367, 0.0289288461, -0.0208251029, -0.0218330882, 0.0014218688, 0.0120977536, -0.0166479982, 0.0138914660, 0.0246242583, -0.0462754518, 0.0236708671, -0.0152419433, -0.0416035280, -0.0373924375, 0.0380112156, 0.0262890384, 0.0686031878, -0.0046006590, -0.0641537756, -0.0659697875, 0.0654623657, -0.0683361664, -0.0677162334, -0.0047468096, 0.0521922484, -0.0341589786, 0.0120603666, 0.0502704456, -0.0055188909, -0.0477649234, -0.0341528021, 0.0142421350, 0.0044267178, 0.0572671741, -0.0002727211, -0.0087920502, -0.0602710545, -0.0171838030, 0.0518944040, 0.0233316422, 0.0685879737, 0.0152324811, 0.0537064970, -0.0608321354, 0.0537252128, 0.0429118797, -0.0691290721, 0.0109671578, 0.0201532841, -0.0390689932, 0.0314184651, -0.0132907927, -0.0701982901, -0.0248263255, 0.0229892731, -0.0313336402, 0.0109972358, -0.0018926188, -0.0186456405, -0.0346115418, -0.0409455374, 0.0450269282, 0.0230176598, -0.0660119429, 0.0445648283, -0.0163896792, -0.0191696621, 0.0383654386, 0.0618390292, 0.0607642978, -0.0699397326, 0.0712015033, 0.0197707117, 0.0230264515, -0.0549049154, 0.0281882435, -0.0511915572, -0.0264647678, 0.0123341009, 0.0698511153, -0.0562649779, 0.0444724336, -0.0250734091, -0.0641308576, -0.0339052565, 0.0132818595, -0.0148693062, 0.0711517334, 0.0441715270, 0.0693192333, -0.0721058622, 0.0698099136, 0.0510224551, 0.0239601210, -0.0602917522, 0.0711833686, 0.0533455908, 0.0513518825, -0.0013995171, -0.0042497888, -0.0286381245, 0.0095718578, -0.0672210157, -0.0517171770, 0.0204043537, -0.0471128188, 0.0315764248, -0.0687031075, -0.0699718222, 0.0193354115, 0.0718077719, -0.0567021742, 0.0177988112, 0.0296151042, 0.0366424620, 0.0706767291, -0.0342169814, -0.0573881269, -0.0397753641, -0.0716681108, -0.0176928043, -0.0201299824, -0.0537449494, -0.0650437400, 0.0574082285, 0.0591465682, 0.0431051254, 0.0539930165, 0.0377053022, 0.0093817264, -0.0674626455, 0.0004350841, -0.0465631969, -0.0012625530, 0.0368489772, 0.0312431678, 0.0519532114, 0.0302720740, 0.0005867407, 0.0600049198, -0.0448833182, -0.0436206646, -0.0280890688, -0.0537822880, -0.0661393031, -0.0273917802, -0.0315968804, 0.0601761788, 0.0323925763, -0.0208913125, 0.0317288190, 0.0611672252, 0.0042812750, -0.0384125337, -0.0543253571, 0.0109675154, 0.0135876536, 0.0512428507, 0.0182071030, -0.0229402669, 0.0624413043, 0.0573810190, 0.0335055143, 0.0365752205, 0.0635592788, -0.0118164979, -0.0210851096, -0.0306464881, -0.0359852314, -0.0460581705, -0.0396614075, -0.0520791635, 0.0099806488, 0.0696245283, 0.0469266474, 0.0165745914, 0.0321253911, -0.0718576238, -0.0022743046, 0.0605994314, 0.0533384681, 0.0153739154, 0.0197423398, -0.0284531899, 0.0660899282, -0.0201224461, -0.0705806315, -0.0562840775, -0.0277650394, -0.0546325743, -0.0363754705, 0.0164832994, 0.0548480004, -0.0295337513, -0.0008248910, -0.0257501528, -0.0621918701, -0.0148879923, 0.0365455747, -0.0486180335, 0.0248928294, -0.0294713601, -0.0002598539, 0.0181403384, -0.0460940152, -0.0110431910, -0.0621179529, 0.0278367028, 0.0460881814, -0.0547273979, -0.0338426568, 0.0371722803, -0.0509132594, -0.0135791525, 0.0220193490, -0.0129207522, 0.0047728419, -0.0718158633, 0.0614063591, 0.0657290667, 0.0113046244, 0.0291229486, 0.0312992483, -0.0063455775, -0.0456114933, -0.0511260852, 0.0114325359, -0.0243761055, 0.0036016554, -0.0469699576, -0.0546804592, -0.0431286134, 0.0133612528, 0.0426439121, -0.0540261529, 0.0515065715, 0.0135098323, -0.0227314159, 0.0137234628, 0.0073151886, -0.0247827955, 0.0421072915, -0.0626515225, 0.0438347980, 0.0505784452, -0.0432378054, 0.0330789164, 0.0120578185, -0.0163385421, -0.0484569669, -0.0701936483, -0.0224291496, 0.0299198627, 0.0166760981, 0.0438371375, -0.0170764178, -0.0692119673, 0.0104157105, 0.0553145707, 0.0445936844, 0.0246823952, 0.0228657797, -0.0192089602, -0.0194558538, 0.0066411495, 0.0336002186, 0.0044302791, -0.0507355370, -0.0126171783, -0.0365579613, 0.0053167194, 0.0505734682, 0.0682559758, -0.0421362370, -0.0321628340, 0.0301606283, 0.0304057524, -0.0701638982, 0.0595736802, 0.0277743489, 0.0645985156, 0.0234058052, -0.0514011830, 0.0464047268, 0.0634104908, -0.0366957672, 0.0578335524, 0.0471432582, -0.0065024272, 0.0651369244, 0.0720142573, -0.0344374329, 0.0258827806, 0.0419173688, 0.0235436633, -0.0138362162, 0.0195310116, -0.0407665409, -0.0234170556, -0.0476247445, -0.0224428475, 0.0480180606, -0.0475865118, 0.0240980014, -0.0045199096, 0.0180031061, -0.0468946435, -0.0395465568, -0.0528134815, 0.0048541799, -0.0454917029, 0.0546292067, -0.0012263358, 0.0456318632, -0.0189116858, 0.0376422256, 0.0326786488, 0.0192962289, 0.0093557239, 0.0448124334, 0.0170391649, 0.0168992803, -0.0072244629, -0.0066557378, 0.0552835613, 0.0546397567, -0.0216811225, 0.0653592199, -0.0414221361, 0.0398116186, -0.0132091641, -0.0047334060, -0.0209848322, -0.0544139519, -0.0573614724, -0.0020218343, 0.0602124929, 0.0232698917, 0.0253346562, 0.0713955611, -0.0338260531, -0.0095890835, -0.0586263835, 0.0721159130, -0.0008042231, -0.0082264543, -0.0413517654, 0.0701274127, -0.0087829977, 0.0459925830, 0.0162501186, 0.0626453608, -0.0634479895, -0.0402510688, -0.0379730836, 0.0180974081, 0.0367795974, 0.0274469629, -0.0369679555, 0.0114439949, 0.0219317153, -0.0257775486, 0.0502727032, -0.0203571767, -0.0619171038, 0.0066235289, -0.0520023033, -0.0137737058, -0.0572252832, -0.0378725119, -0.0556288585, -0.0612782463, 0.0639218390, -0.0123401731, -0.0660693422, 0.0236609206, 0.0093285590, 0.0320030004, -0.0361382999, -0.0690034777, 0.0459775254, 0.0206367597, 0.0454699546, -0.0262671895, -0.0369986184, -0.0516286343, 0.0676386803, -0.0001600012, -0.0091740787, -0.0606268123, -0.0598242395, -0.0277289040, -0.0530888699, 0.0006073490, 0.0343402326, 0.0122762844, 0.0615301281, -0.0050310269, 0.0437721163, 0.0615089983, 0.0132785961, 0.0454637408, -0.0191778168, -0.0460789390, -0.0483887233, 0.0200665444, 0.0339253023, -0.0021923706, -0.0542566665, 0.0280470476, 0.0061461180, -0.0108621456, -0.0298258811, 0.0413046032, 0.0284406617, 0.0089790300, 0.0622006655, 0.0353263468, 0.0256659612, 0.0445809662, 0.0404288992, -0.0547707938, -0.0506783277, 0.0124486908, 0.0146143585, 0.0432537869, -0.0685958937, -0.0431619585, -0.0703374892, 0.0046925545, 0.0124099627, 0.0163679942, -0.0062388256, 0.0658011138, -0.0108746886, -0.0268886313, -0.0364238210, 0.0507776067, 0.0627459437, 0.0010475740, 0.0347167626, 0.0289765224, 0.0228128508, -0.0682365373, 0.0635237098, 0.0563312918, 0.0552567393, -0.0449906364, 0.0582294613, 0.0411612019, -0.0253641121, 0.0603645593, 0.0461908504, 0.0323311314, -0.0137590282, -0.0695265532, 0.0162996203, 0.0412199423, -0.0345176980, 0.0490022898, 0.0284121335, -0.0706556886, 0.0135169700, -0.0091896355, 0.0378369614, 0.0306376293, -0.0402619094, 0.0650252998, 0.0548622459, -0.0381325856, -0.0156882592, 0.0461052135, 0.0468178540, -0.0290640518, -0.0190961212, -0.0427657291, 0.0008699521, -0.0385385901, 0.0658537000, -0.0281893648, -0.0170973949, -0.0353483707, -0.0305562057, -0.0551159009, 0.0176425949, -0.0083838627, 0.0212616324, 0.0226547122, -0.0438655280, -0.0705414861, 0.0426201299, 0.0675546229, -0.0177542455, -0.0060641989, 0.0388051495, -0.0350382254, 0.0099726617, 0.0635685921, -0.0582777634, 0.0539603680, 0.0651882291, -0.0175542757, -0.0131547228, 0.0601247102, 0.0365956947, -0.0281310529, 0.0450800955, -0.0291458853, -0.0681603700, -0.0698919445, 0.0438524336, -0.0415925495, -0.0246260613, -0.0164907984, -0.0280080959, -0.0287596360, 0.0224808380, -0.0535122156, -0.0083214715, 0.0633099228, -0.0185480975, -0.0674882680, -0.0062122792, -0.0120026879, -0.0290375017, 0.0429969132, -0.0238230750, 0.0273010358, -0.0644387677, 0.0014470741, 0.0330536738, -0.0273874439, -0.0620538220, -0.0490151718, -0.0151854381, -0.0700286329, -0.0310986899, -0.0276269391, 0.0397121459, 0.0069576427, -0.0109590702, -0.0048435777, 0.0143532157, -0.0335512161, 0.0249390602, -0.0277934633, 0.0072114021, -0.0194630995, -0.0030592605, 0.0388171449, -0.0250196233, 0.0551153123, 0.0678664297, -0.0257145725, -0.0363107398, 0.0603718162, 0.0227476582, 0.0419188142, 0.0279975310, 0.0430068970, -0.0224730261, 0.0477821678, -0.0597174913, 0.0635075718, 0.0017108098, -0.0358245075, -0.0383755229, 0.0558637977, -0.0467890799, -0.0248782709, 0.0436978713, 0.0375398248, 0.0165909603, 0.0692438930, 0.0613210499, 0.0170484409, -0.0149644725, 0.0507115349, -0.0440988839, 0.0489326492, -0.0507477187, 0.0054310933, -0.0529413596, -0.0330827050, -0.0573048815, 0.0160607919, 0.0284848139, -0.0415871814, -0.0496045426, -0.0090264156, -0.0560372844, -0.0534803160, 0.0065247118, -0.0586443618, -0.0547233745, 0.0083233118, 0.0017129257, 0.0561573803, -0.0079383999, -0.0604453012, 0.0006387532, 0.0203542337, -0.0341421366, -0.0245250612, 0.0288830921, 0.0149078295, -0.0347376987, 0.0141349882, 0.0643692613, 0.0120424181, 0.0709227026, -0.0497994423, 0.0647182763, -0.0237485021, 0.0137069449, 0.0026300326, 0.0140093789, 0.0342647284, -0.0550364107, 0.0569787621, 0.0054562315, 0.0449727923, 0.0663405806, 0.0527644604, 0.0207047462, -0.0468204841, 0.0694306940, 0.0571017116, -0.0226960219, 0.0233975053, 0.0490643159, 0.0208529457, 0.0116046891, -0.0407796837, -0.0655834675, 0.0057822540, -0.0343605876, -0.0515861660, 0.0542750508, 0.0412286147, 0.0627031773, -0.0077390000, 0.0486841723, -0.0433759019, 0.0097450018, 0.0152748451, 0.0661401600, 0.0222142413, 0.0113045722, -0.0550657436, 0.0578176677, -0.0135630146, 0.0116017610, 0.0028263703, 0.0478674397, -0.0557139441, -0.0653304681, -0.0585562997, 0.0593064874, -0.0251399316, 0.0010010526, -0.0039072409, 0.0004829168, 0.0291658416, -0.0191717409, 0.0022940785, -0.0177208669, 0.0051918328, -0.0435864404, 0.0129482150, -0.0621709116, -0.0080154166, -0.0134882368, 0.0255782977, 0.0602940172, -0.0146303959, 0.0570937693, -0.0686103851, 0.0339633748, 0.0191491321, 0.0030936226, -0.0350436307, 0.0579319894, 0.0575556755, 0.0280835629, 0.0378537923, 0.0047489926, -0.0652532429, 0.0637302250, 0.0388662815, 0.0158679262, -0.0479054675, -0.0644233972, -0.0560785457, -0.0035851747, 0.0640592277, -0.0192602873, 0.0237025470, 0.0194690526, -0.0028222278, -0.0563897565, 0.0528225675, 0.0360972434, 0.0706069618, 0.0529075265, 0.0642449558, -0.0034141093, 0.0218603238, -0.0579841882, -0.0201730840, 0.0521643907, -0.0073077902, -0.0425001308, 0.0506274998, 0.0365465060, -0.0403696932, -0.0694054216, -0.0001626685, -0.0374596454, -0.0274905451, -0.0638257861, -0.0296892114, -0.0014524087, -0.0316954926, 0.0192899853, -0.0380008556, -0.0486672074, -0.0564054698, 0.0451667458, -0.0353257805, 0.0450942516, -0.0546996631, 0.0194918513, 0.0135346577, 0.0051047355, -0.0456366502, -0.0317169987, -0.0648959577, -0.0382934846, 0.0518112928, -0.0301332884, -0.0626209974, -0.0180622600, 0.0341086313, 0.0607167184, 0.0554608405, 0.0558577478, 0.0132881626, -0.0663076714, 0.0282777548, 0.0359826013, 0.0027286038, 0.0443339050, -0.0360666327, -0.0333530009, 0.0713633150, 0.0077577531, -0.0687965229, 0.0625817627, -0.0334651843, 0.0579129159, -0.0126154236, 0.0324604213, 0.0218637139, 0.0427941754, -0.0079767928, 0.0115630105, 0.0605943054, -0.0230602622, 0.0495298505, -0.0150676593, 0.0587664098, 0.0224367902, -0.0485916212, 0.0219012275, 0.0249601230, 0.0515372157, -0.0350361802, -0.0384564959, 0.0198900774, -0.0028948188, -0.0684719235, 0.0184872374, -0.0292861685, -0.0552509539, -0.0517487861, 0.0711532086, -0.0323447064, 0.0232087225, 0.0459320694, 0.0266047120, -0.0603351966, -0.0050397515, -0.0442665406, 0.0591599345, 0.0481723025, 0.0366154164, 0.0388552397, 0.0328527763, -0.0538835973, 0.0672165453, -0.0621661134, -0.0322741605, 0.0330706760, -0.0690638572, 0.0114663616, 0.0708821267, 0.0075520352, -0.0455915332, -0.0368124098, -0.0720583722, 0.0179285631, 0.0504758209, -0.0585128367, -0.0521170013, -0.0559026301, -0.0318830051, 0.0386226773, 0.0132233799, -0.0187710412, -0.0332785659, -0.0303064883, 0.0139872879, -0.0483190194, 0.0684542507, 0.0432912856, 0.0305411816, -0.0088012144, 0.0226996318, -0.0540244505, 0.0719125867, -0.0692901015, -0.0645105168, 0.0119157955, -0.0171850584, 0.0318784639, 0.0501257256, -0.0642490312, 0.0593861789, 0.0382670388, -0.0565794930, -0.0291808322, 0.0332025662, 0.0164195672, -0.0010238662, -0.0509454384, -0.0017095581, 0.0174272582, 0.0076299310, -0.0314486139, -0.0592910275, 0.0077117234, 0.0291137099, -0.0655358285, -0.0530023202, -0.0512490608, -0.0312041454, 0.0420223325, 0.0296178237, -0.0188397989, 0.0347048491, -0.0123290569, 0.0369690731, -0.0163687542, -0.0245470852, -0.0502541885, -0.0561283082, 0.0548347533, -0.0544219688, 0.0579962879, -0.0383845046, -0.0715907887, -0.0074906796, 0.0442011356, -0.0115757473, -0.0404950231, 0.0397683606, 0.0425762907, -0.0582631044, 0.0131434724, 0.0638806373, -0.0020268261, 0.0539315939, 0.0516452193, 0.0341483951, -0.0611238703, -0.0668876097, -0.0201828405, -0.0072150975, 0.0235217884, 0.0535925925, -0.0236170627, -0.0350424945, 0.0617060512, 0.0560401231, -0.0526992306, -0.0653963313, -0.0144841559, 0.0090188459, -0.0068115890, -0.0223945491, 0.0017566308, -0.0156451575, 0.0718027800, 0.0142966434, 0.0559062064, -0.0541220270, -0.0571811832, -0.0257761031, 0.0513257533, 0.0229371861, 0.0098926872, -0.0700211823, -0.0475005284, 0.0389029160, -0.0305981897, 0.0691504925, -0.0047722086, 0.0270203650, -0.0372787714, -0.0461275503, -0.0692791641, -0.0426049195, -0.0055257753, -0.0601050630, -0.0673925355, 0.0263563544, 0.0374295712, 0.0520979166, -0.0076020509, -0.0241186805, -0.0000772402, -0.0580133013, 0.0656818897, 0.0302692205, 0.0476856008, 0.0476346388, -0.0625364482, -0.0261070654, 0.0702407062, 0.0567819923, 0.0179989561, 0.0287019089, 0.0017814636, 0.0673791319, -0.0393393040, -0.0541545153, -0.0078316927, -0.0377611704, 0.0708957016, -0.0582015216, 0.0683621466, -0.0638754666, 0.0255596936, 0.0252371654, -0.0165773146, -0.0168909170, 0.0319535732, 0.0597273111, -0.0473614335, -0.0679989159, -0.0406744517, 0.0371155366, -0.0379558094, 0.0101388246, 0.0548883975, -0.0556886867, -0.0046509206, -0.0137031078, 0.0377781689, -0.0030777529, 0.0211631209, 0.0128013715, -0.0211424753, -0.0492739603, 0.0230382085, 0.0095932633, -0.0458551720, -0.0666494071, 0.0452970490, -0.0665569082, 0.0156496838, 0.0047036037, 0.0278702751, -0.0436792858, 0.0225297362, -0.0263423286, 0.0477847084, -0.0633656681, -0.0702269226, 0.0691166967, -0.0033990890, -0.0531885289, -0.0285480134, 0.0207685605, 0.0450534225, -0.0532827154, -0.0101789497, 0.0648862571, 0.0349068418, 0.0020571053, 0.0291405171, 0.0499829501, 0.0004373193, -0.0105381496, -0.0287577249, -0.0334755071, 0.0480540916, -0.0183040611, -0.0192985870, 0.0239528939, 0.0057478622, -0.0613797121, 0.0509348214, 0.0094557628, 0.0321108848, 0.0650233477, -0.0292909183, 0.0185296834, 0.0320674926, 0.0008179024, -0.0113012716, 0.0534478277, 0.0277842581, 0.0372999385, 0.0625329167, -0.0002946258, -0.0115654916, 0.0706365258, 0.0249144435, -0.0304113105, 0.0573154837, -0.0100236088, 0.0612776726, 0.0545540601, 0.0189600512, 0.0216517299, -0.0449221060, -0.0654857233, -0.0159999877, 0.0258438960, -0.0066048726, -0.0476785675, 0.0270818621, -0.0108824670, 0.0238235071, -0.0674457550, 0.0368738398, 0.0452044457, 0.0402315408, 0.0021695197, -0.0533069968, 0.0515056774, -0.0662127435, 0.0233408511, -0.0073667020, 0.0118931681, -0.0239232853, -0.0335694887, -0.0302180983, -0.0708674490, -0.0277438574, 0.0003411993, -0.0655480251, -0.0649565756, 0.0350262001, -0.0212744810, 0.0695391595, -0.0193804204, 0.0458906665, -0.0249139071, -0.0659885108, 0.0193109065, 0.0483125523, -0.0175571144, 0.0495591015, -0.0391375087, -0.0165512450, 0.0222945139, 0.0673685670, 0.0563457906, -0.0173831582, -0.0219083987, -0.0237463675, 0.0671244115, -0.0253964439, 0.0086327344, 0.0653854907, -0.0666522831, 0.0467868969, 0.0321533158, -0.0327367857, -0.0198434629, 0.0029386282, -0.0534474999, -0.0183927231, -0.0586884804, -0.0161647201, 0.0261957794, -0.0518461540, -0.0333541334, 0.0129852220, 0.0436665714, 0.0194602907, 0.0569169670, 0.0474517643, -0.0489410982, 0.0441458225, 0.0367587805, 0.0284212753, 0.0361923426, 0.0486241430, 0.0486285463, 0.0057089925, -0.0450399518, 0.0142643973, -0.0400357321, -0.0283972360, 0.0539263934, 0.0132069290, -0.0629460961, -0.0210284814, 0.0189347044, -0.0297055207, -0.0033277795, 0.0555115938, -0.0384840630, 0.0308262631, -0.0279468410, -0.0324527435, -0.0179476812, -0.0519264564, 0.0715534836, 0.0331501737, -0.0047444552, -0.0309293419, 0.0449757203, 0.0595133901, 0.0269080549, 0.0059528202, 0.0624799430, 0.0108869746, -0.0678250641, 0.0697069615, 0.0715230256, 0.0399968326, -0.0424808115, 0.0559279472, 0.0225054249, -0.0600133874, -0.0690532550, -0.0155057162, 0.0523839444, 0.0347779766, 0.0233141929, -0.0667140707, -0.0707016438, -0.0325477049, 0.0352303162, 0.0566400886, 0.0678531975, 0.0636066794, 0.0513897240, -0.0153602026, 0.0463692322, 0.0082973093, -0.0492928848, 0.0321069956, -0.0421685651, -0.0622336827, 0.0003901348, -0.0254290327, 0.0166375041, 0.0364798084, -0.0106500089, -0.0375532322, -0.0331811234, -0.0442913696, 0.0681124628, -0.0366260670, 0.0277452692, -0.0146972574, -0.0247967988, 0.0409035385, 0.0414498076, -0.0439232364, 0.0198589340, 0.0118867159, -0.0646535903, -0.0130623430, -0.0591342635, -0.0239879973, -0.0315622613, 0.0079869628, 0.0284372941, -0.0229899772, 0.0018336996, 0.0625719726, -0.0574088767, 0.0178791657, 0.0310675427, -0.0297561958, -0.0309419893, 0.0452915430, 0.0014351532, 0.0324716717, -0.0355684571, -0.0331525281, -0.0613890365, -0.0627566352, 0.0290855393, 0.0167137757, 0.0198823139, -0.0714560226, -0.0303729735, -0.0477974266, 0.0426571593, 0.0387300104, 0.0619099885, -0.0019097850, 0.0091836601, 0.0131857842, -0.0360144116, 0.0117753744, 0.0573398620, 0.0387980938, 0.0492988005, 0.0378255248, 0.0666782111, 0.0384016261, -0.0110561140, 0.0360347331, -0.0500403121, -0.0558510609, -0.0012294650, -0.0560946874, 0.0141385496, 0.0606968552, -0.0261842012, -0.0233281143, -0.0577867776, -0.0545052662, 0.0421740562, 0.0348053053, 0.0269904733, -0.0010875314, -0.0406209230, 0.0076144785, 0.0041351020, 0.0713222921, 0.0110607073, 0.0184741244, -0.0484906882, -0.0219610706, -0.0543533489, 0.0513883457, -0.0416632667, 0.0257718489, 0.0486312807, -0.0436867028, -0.0358496606, 0.0703728944, -0.0677686781, -0.0197524056, 0.0300988108, -0.0122087859, -0.0708123669, -0.0477573536, -0.0498489961, -0.0154499002, -0.0533667877, 0.0547882468, 0.0152253211, 0.0195381716, 0.0215451047, -0.0283168480, -0.0185191035, -0.0366350971, 0.0291339085, 0.0390859395, 0.0225197449, -0.0023719147, 0.0428133234, -0.0244088992, -0.0205742680, 0.0441750214, 0.0397941694, 0.0420575142, -0.0673974901, -0.0503198989, -0.0013537258, -0.0625444651, -0.0594198890, 0.0127357170, 0.0561951548, 0.0406390429, 0.0155287236, -0.0232244134, -0.0665992871, -0.0031048059, -0.0259125493, 0.0077930465, 0.0409495309, 0.0182655528, 0.0402219370, 0.0147410110, 0.0003579259, 0.0188597366, 0.0010429323, -0.0318101905, -0.0165374987, 0.0699129254, 0.0004334152, 0.0481221080, -0.0227588601, 0.0153320357, -0.0309928507, 0.0651840419, 0.0366218686, -0.0062147379, -0.0153045580, 0.0382937416, 0.0418582857, 0.0156124160, 0.0500702485, 0.0411910564, 0.0112868473, -0.0526880324, 0.0303489342, -0.0661159083, 0.0715423375, -0.0408525877, -0.0396697707, -0.0695509166, 0.0555644482, -0.0080362186, 0.0672750771, -0.0055353120, -0.0223027691, 0.0515527502, -0.0311700776, 0.0679572970, -0.0211107470, -0.0042306185, -0.0693479851, -0.0520707518, -0.0166343711, 0.0387857780, -0.0517965332, -0.0080779493, 0.0356316417, -0.0699105486, -0.0465122834, 0.0279770046, -0.0479596145, 0.0018790364, -0.0060633719, -0.0354896188, 0.0150867105, -0.0381980911, 0.0363915935, -0.0685931593, 0.0276823267, -0.0235984288, 0.0338209644, -0.0666194707, 0.0502289981, 0.0181707293, 0.0486199930, -0.0028217286, -0.0517740101, 0.0705186725, -0.0150615349, -0.0059041828, -0.0255655795, 0.0131320655, 0.0257668942, -0.0149852075, 0.0254189298, -0.0631602481, -0.0517386869, -0.0380115062, 0.0524922386, -0.0622205026, 0.0240919068, -0.0221731216, -0.0210420229, -0.0043281764, 0.0277783722, -0.0574088395, 0.0402074158, 0.0201794356, 0.0277186334, 0.0667915940, 0.0299590603, -0.0612572208, -0.0170844719, -0.0236960575, -0.0465606153, -0.0406710953, -0.0677385852, -0.0450205058, -0.0067702457, 0.0577079356, -0.0488218777, -0.0615969598, -0.0001319721, 0.0703734756, 0.0423071161, 0.0486165360, 0.0200992674, -0.0417992473, -0.0618698709, 0.0295741186, 0.0412973240, -0.0687795207, 0.0665257722, 0.0599850714, -0.0629141256, -0.0084088966, 0.0496734530, 0.0502284095, -0.0419289693, 0.0295283273, -0.0358920246, 0.0362719893, -0.0218714066, -0.0395492911, -0.0022408590, 0.0212382823, 0.0065233856, 0.0303584188, 0.0253879577, -0.0394829623, -0.0232195258, 0.0560394228, 0.0328223184, 0.0455797166, 0.0583331138, -0.0618587546, -0.0275820829, -0.0681481659, 0.0331062227, -0.0416549742, -0.0566881523, -0.0275907703, -0.0373781398, 0.0044584796, -0.0706908926, 0.0700041056, -0.0274481662, -0.0193712339, 0.0440907404, -0.0654162392, 0.0266826227, -0.0243040770, -0.0538936816, 0.0626538843, -0.0099049732, 0.0508408546, -0.0174007751, -0.0611832514, -0.0480689108, -0.0306900702, -0.0523494631, 0.0352595523, -0.0219404213, -0.0501099974, 0.0306841508, 0.0650324523, -0.0557780713, -0.0309702754, 0.0582336187, 0.0560032129, -0.0303376168, 0.0420635715, 0.0354221836, 0.0053973794, -0.0597488396, -0.0262761191, -0.0390015095, 0.0615426600, -0.0573801249, 0.0322620794, 0.0425486565, -0.0462343134, -0.0341419280, -0.0057704523, -0.0037009344, -0.0683845803, -0.0271900855, -0.0362538919, -0.0100819729, -0.0282408111, -0.0706892610, -0.0714575574, 0.0033370256, 0.0619778633, -0.0024285614, -0.0372005329, -0.0666593537, 0.0187740847, 0.0376163945, -0.0454771146, -0.0562396683, 0.0258184671, 0.0343564227, 0.0080671236, 0.0435315520, 0.0425791293, 0.0157629848, 0.0013984814, -0.0470921211, -0.0222544707, 0.0283235386, 0.0511045605, 0.0410266817, -0.0133796297, 0.0461736917, 0.0203267932, -0.0064014643, 0.0319351405, -0.0348532386, -0.0478700548, -0.0679970607, 0.0074394345, 0.0657204986, 0.0141788274, -0.0107799694, -0.0313431397, -0.0597884133, -0.0143739842, -0.0185294114, 0.0604111999, -0.0033466443, -0.0238569863, 0.0123193562, -0.0085698962, -0.0310425609, -0.0045410544, 0.0503753349, 0.0569105744, -0.0161163211, 0.0090941936, 0.0014519095, 0.0501707196, 0.0318570212, -0.0296812430, -0.0542574413, 0.0163942575, -0.0136769377, -0.0342972837, -0.0318980627, -0.0625210628, -0.0546399727, -0.0373668671, 0.0052631870, 0.0306757241, 0.0093515441, -0.0655304790, 0.0405969396, 0.0408430248, -0.0014226437, -0.0557604358, -0.0573029704, 0.0614262223, -0.0100799948, 0.0371936709, -0.0225879140, -0.0113129690, 0.0182024762, 0.0277201459, -0.0242273882, -0.0196995661, -0.0600396954, -0.0512421615, -0.0306657404, 0.0346673056, 0.0104112029, 0.0587666631, -0.0383661799, -0.0045802668, 0.0458098650, -0.0324388072, 0.0402719453, -0.0100129768, -0.0077082664, -0.0500745364, -0.0125496797, -0.0288688801, -0.0287414826, -0.0196138769, 0.0659796447, -0.0272476412, 0.0269208625, 0.0373225287, -0.0168407261, -0.0700278431, 0.0519939438, 0.0634610355, 0.0524104089, 0.0399067178, -0.0030281991, 0.0478361920, -0.0059181303, -0.0274894424, -0.0150045305, -0.0473789349, -0.0098259933, -0.0001592934, -0.0694121122, 0.0494959876, -0.0361800082, 0.0047541931, 0.0488881916, -0.0464529693, -0.0586829558, 0.0080241784, 0.0254889429, -0.0378823206, -0.0465044007, -0.0395696461, -0.0510837957, 0.0364861935, 0.0612077117, 0.0560021400, 0.0647768080, -0.0099786669, 0.0202666670, 0.0444968119, -0.0352403484, -0.0566346236, 0.0127730146, -0.0483572185, 0.0683282316, 0.0682616085, 0.0603803098, -0.0316076018, -0.0206629150, 0.0145662501, 0.0223409534, -0.0560276359, -0.0045129582, 0.0368505716, -0.0099974386, 0.0140939876, -0.0173444413, -0.0462264344, 0.0146354213, -0.0049035251, -0.0077980533, -0.0361836031, -0.0255969986, 0.0515280291, 0.0148021132, 0.0165426061, -0.0067510083, -0.0504217781, -0.0242582075, 0.0031631887, -0.0318186730, -0.0278263092, 0.0156097636, 0.0069172382, -0.0432895795, 0.0511618555, 0.0285921991, -0.0196769908, 0.0164195150, 0.0426780805, 0.0434872806, -0.0560054891, -0.0428302549, 0.0275347456, 0.0524007902, 0.0032677650, -0.0510767400, 0.0023984984, 0.0230368301, -0.0427041650, -0.0046932101, 0.0558681637, 0.0135688111, 0.0015995055, 0.0700282753, 0.0054763407, -0.0558411703, -0.0503717065, -0.0024013594, 0.0448333696, 0.0071681440, 0.0256375372, -0.0578516461, 0.0291764960, -0.0551276878, 0.0683583468, -0.0155399069, 0.0140520856, 0.0290244967, -0.0360224992, -0.0319671296, -0.0053477287, 0.0701723099, -0.0435009748, 0.0274212062, 0.0692065358, -0.0274742693, 0.0502276197, 0.0610044599, -0.0488983616, 0.0688348860, -0.0305345580, 0.0147676468, -0.0560495555, 0.0716232955, 0.0336056203, 0.0325652882, 0.0422954261, 0.0664114952, -0.0034512356, -0.0293583311, 0.0356517211, -0.0308297686, 0.0486882553, 0.0138620287, 0.0177200064, -0.0243941694, 0.0604747385, -0.0364235975, 0.0586119294, -0.0342671908, 0.0594099015, -0.0446537174, 0.0136484429, 0.0342256725, 0.0043402389, -0.0689418092, 0.0239083841, 0.0297528207, -0.0385047607, 0.0148533583, -0.0665008798, -0.0247278549, -0.0036416575, 0.0411273763, -0.0609902442, 0.0345267355, 0.0612557381, 0.0325734615, -0.0526544973, 0.0249364972, -0.0467071608, 0.0111361593, 0.0316967294, -0.0511255860, -0.0173362195, -0.0080441907, 0.0430442989, -0.0402525850, -0.0013298094, 0.0014869571, 0.0475813150, -0.0610299408, -0.0044867694, -0.0157527328, 0.0011399761, 0.0614304245, 0.0244151801, -0.0499746352, 0.0431889743, 0.0093950406, 0.0115658343, -0.0062467903, 0.0226695910, -0.0625263453, 0.0264531225, 0.0219408497, -0.0153018907, 0.0163766891, 0.0721335709, -0.0472899936, 0.0096207410, -0.0650797188, -0.0337931365, -0.0054993331, 0.0654097497, 0.0119877011, -0.0185015388, 0.0188381299, 0.0238635242, 0.0326592550, -0.0710644051, -0.0014910176, 0.0431782901, -0.0366969742, 0.0519324616, -0.0278771706, 0.0298872218, 0.0048632994, 0.0394067168, -0.0539246202, 0.0298314393, -0.0411411077, -0.0147240311, -0.0705974996, -0.0458671115, -0.0307145379, 0.0132605806, 0.0342156589, -0.0187105425, -0.0599531978, -0.0117562748, -0.0397716165, 0.0438579768, 0.0406897813, -0.0553553998, -0.0522687435, -0.0523675457, 0.0465887785, 0.0369738415, 0.0673672706, 0.0038256496, 0.0168425813, -0.0058986023, 0.0015105680, -0.0540218689, 0.0165458620, 0.0427603275, 0.0156552047, -0.0232504271, -0.0651095361, -0.0576074868, 0.0238989219, -0.0370211937, -0.0700594336, 0.0027512461, 0.0676055700, 0.0703953058, -0.0319787413, -0.0585998669, -0.0143665522, -0.0193148293, -0.0020984188, -0.0697723329, 0.0677254051, -0.0159919336, -0.0687629506, 0.0181293488, 0.0267889574, -0.0479189754, 0.0236714855, 0.0241291225, 0.0423605368, -0.0081100389, 0.0311365277, 0.0464918241, -0.0383047871, -0.0108937882, -0.0142899156, -0.0497240052, -0.0401344299, 0.0267750323, 0.0585832447, -0.0701738372, 0.0022105053, 0.0702895373, -0.0578544699, -0.0330100767, 0.0572880208, -0.0605308525, -0.0177568793, 0.0390789732, -0.0647442117, 0.0410019904, -0.0492043570, 0.0174144581, 0.0132583082, 0.0305195749, 0.0165656134, 0.0702788979, -0.0076374114, -0.0286457799, 0.0491165891, 0.0661137700, -0.0251863003, -0.0146370716, -0.0201265775, 0.0407712013, 0.0150066987, -0.0032226145, -0.0302196480, 0.0287623852, -0.0157945082, 0.0304097086, -0.0325941443, -0.0560316443, 0.0546802729, -0.0096226856, -0.0232947171, -0.0148712322, 0.0135430694, 0.0533080250, 0.0220735297, 0.0168787539, 0.0260354355, 0.0683510602, -0.0019641221, -0.0276092850, -0.0174649209, -0.0289876722, 0.0531881452, 0.0135449991, 0.0260269716, -0.0546692424, 0.0134402439, -0.0704005137, -0.0055651814, 0.0255676806, -0.0412896313, 0.0041446015, 0.0641513318, 0.0130811632, 0.0250956565, 0.0703693926, 0.0035470799, -0.0716065839, -0.0441313311, 0.0022312179, 0.0334652737, -0.0506123565, -0.0160098299, -0.0634756908, 0.0391392261, 0.0627979338, 0.0460080653, 0.0432968214, 0.0364975706, -0.0332136266, 0.0039579123, -0.0251574479, 0.0226098150, 0.0043574497, 0.0685791075, -0.0213713907, 0.0011640266, 0.0677502602, -0.0308920220, -0.0348909050, 0.0385347530, -0.0005501211, 0.0603398085, 0.0429309979, -0.0461889058, 0.0713059455, 0.0442034304, 0.0134081766, 0.0137603506, 0.0123987123, -0.0035851002, -0.0430149511, 0.0599740297, -0.0609271489, -0.0369713120, 0.0420469716, -0.0642964840, -0.0372107551, -0.0041572824, -0.0330570824, -0.0371750332, 0.0499907210, 0.0524121746, 0.0310551226, 0.0661647469, -0.0706712231, 0.0262263045, 0.0322848633, -0.0306373350, -0.0172132105, -0.0089482293, -0.0049368516, -0.0500085317, 0.0568194836, 0.0551617891, 0.0338615701, 0.0639358014, -0.0383526906, -0.0518773496, 0.0262311921, -0.0502172485, -0.0201754607, -0.0479543656, -0.0215189159, -0.0153643340, -0.0118178576, -0.0338711850, 0.0114730746, 0.0681840777, 0.0673110187, -0.0089842603, 0.0029627308, -0.0392072797, -0.0458152518, 0.0372894928, 0.0009206757, 0.0144853964, 0.0115465671, -0.0607240126, 0.0412727818, -0.0094392449, -0.0403034128, 0.0578061491, -0.0208327621, -0.0581195168, 0.0506697744, 0.0035914332, -0.0569253266, 0.0012319759, 0.0675456822, -0.0080669895, -0.0308071785, 0.0332312435, -0.0069987625, 0.0357402638, 0.0573922396, 0.0701483935, 0.0534862578, 0.0069459602, -0.0631120875, -0.0499391407, -0.0552722067, -0.0127286576, 0.0259301811, 0.0449377596, 0.0092822537, -0.0320302248, 0.0467783287, 0.0406152084, -0.0444569290, 0.0457251072, -0.0377834365, -0.0453290865, -0.0439856797, -0.0138980746, -0.0672919601, 0.0201283470, 0.0583663434, 0.0093425661, -0.0709095001, -0.0205308385, 0.0146670118, 0.0097519755, -0.0686174855, 0.0252333060, -0.0347778425, 0.0474744290, 0.0145963058, 0.0691641718, -0.0447489731, 0.0352349281, -0.0389086641, 0.0029452667, -0.0629892647, -0.0635556132, -0.0124003440, 0.0486870483, -0.0620832294, -0.0025850683, -0.0478550866, 0.0383355692, -0.0455491729, 0.0013920963, 0.0000860989, -0.0430494621, 0.0654699802, -0.0094984695, -0.0386767723, 0.0040976331, 0.0023475215, 0.0177489445, 0.0478997678, -0.0631107911, 0.0191166997, -0.0288579017, 0.0096320957, 0.0720352679, -0.0609157234, -0.0048405528, -0.0343776718, 0.0438577309, -0.0719393492, 0.0283325538, 0.0335628167, 0.0458957925, 0.0222319290, -0.0022002459, 0.0455991253, -0.0489068925, 0.0668221414, -0.0720111057, -0.0648866445, -0.0269102082, -0.0123721100, -0.0537377745, 0.0409630388, -0.0645082295, 0.0588365942, -0.0173528567, -0.0719052181, 0.0444019362, 0.0623786151, 0.0403577983, -0.0404129662, 0.0321480855, 0.0529346764, -0.0334827006, 0.0295187831, -0.0309357271, 0.0519434586, -0.0640565902, -0.0109173432, -0.0512600392, -0.0338675901, -0.0661518499, 0.0182050169, 0.0447561443, -0.0300441608, -0.0053316578, 0.0535809696, -0.0118816420, 0.0373719633, 0.0296495184, -0.0544026457, -0.0198380612, -0.0031575114, -0.0339889117, -0.0659384206, 0.0183665156, -0.0272662416, 0.0251234770, -0.0285285711, 0.0257420465, 0.0713607371, 0.0198696181, 0.0662558824, -0.0585818514, -0.0251528360, 0.0480550379, 0.0426238850, 0.0349405259, -0.0694618225, 0.0502548590, -0.0478402190, 0.0307383314, -0.0197619200, 0.0701779574, -0.0697779208, 0.0370717123, -0.0047334731, -0.0617208108, 0.0493477359, 0.0354010388, 0.0719875693, -0.0576455146, -0.0265628099, 0.0047689900, -0.0044964403, -0.0377398171, 0.0654306859, -0.0066720322, -0.0261136889, -0.0533015579, 0.0363826454, 0.0487358123, 0.0373683125, -0.0672897249, -0.0206921324, 0.0557798892, -0.0649260357, 0.0055855364, -0.0525949076, -0.0224371515, -0.0038455948, 0.0054630935, 0.0179985762, 0.0545053184, -0.0066331998, 0.0103646591, 0.0135480613, -0.0675637871, -0.0697611421, -0.0319967419, 0.0068998933, 0.0314799994, -0.0691333041, 0.0478051901, -0.0290547237, 0.0306532979, 0.0016288608, -0.0314108804, -0.0256618150, -0.0572974980, 0.0494215190, -0.0339414403, 0.0274768323, -0.0204841085, 0.0627161860, 0.0294536725, -0.0349746309, 0.0109331906, 0.0343901291, -0.0475716107, -0.0620006919, 0.0647081435, -0.0094445497, -0.0446130075, -0.0331981070, 0.0259780511, -0.0628492758, -0.0393397510, -0.0106936954, 0.0661224574, -0.0138514973, 0.0219888538, 0.0080865994, -0.0468326807, 0.0694077462, 0.0272483826, -0.0262360461, 0.0587916672, 0.0183122158, 0.0464714840, -0.0561694317, -0.0056519508, 0.0099744871, -0.0307206288, -0.0298314057, 0.0035733506, -0.0165728554, 0.0536013693, -0.0304198451, 0.0144484341, 0.0679380745, -0.0007112920, -0.0691415071, 0.0659601539, 0.0330098197, -0.0697921515, 0.0172966421, -0.0494069457, 0.0394066349, 0.0199657977, -0.0606914237, -0.0387554765, 0.0414315313, 0.0515122637, 0.0433350354, -0.0334966555, 0.0094125569, -0.0502008498, -0.0353575423, -0.0499439240, -0.0357016884, -0.0395027809, 0.0116370544, -0.0586765036, -0.0158881992, 0.0083519071, 0.0133545399, -0.0694834143, 0.0105680898, 0.0004250631, 0.0472254530, -0.0405367129, 0.0631090850, 0.0052338690, 0.0094063506, -0.0405890569, 0.0455506146, -0.0697074980, -0.0409973264, -0.0501499698, 0.0426603109, -0.0530965775, 0.0403637737, -0.0186519362, -0.0647531450, 0.0583871305, 0.0635948926, -0.0408536047, 0.0328420699, 0.0593449324, -0.0414055325, -0.0694309175, 0.0158649385, -0.0248132832, -0.0192492567, 0.0440282002, 0.0277334824, 0.0101738051, 0.0647459030, 0.0204598159, -0.0102405995, -0.0322263241, -0.0306156352, 0.0530646145, -0.0116583370, 0.0358910635, 0.0683095306, 0.0640962571, 0.0467413515, -0.0627862513, -0.0301180631, -0.0599133000, -0.0239367560, -0.0634805784, -0.0182016306, 0.0119355321, 0.0309058204, -0.0710640848, -0.0682093054, 0.0229100510, -0.0715810433, 0.0218173265, -0.0246432163, 0.0254168287, 0.0165893584, 0.0073654503, -0.0327162780, 0.0403157696, -0.0489632636, -0.0152541772, -0.0071093515, -0.0098159797, 0.0693285614, -0.0144646615, -0.0580441505, 0.0713655651, -0.0456838459, 0.0606035143, -0.0567699000, -0.0394264720, -0.0365933739, -0.0322629586, -0.0667980015, 0.0044129714, -0.0050411448, -0.0409279354, -0.0589142628, 0.0674698800, 0.0121441558, 0.0593896061, -0.0009278730, 0.0079567283, 0.0524331182, 0.0590005666, -0.0092933401, -0.0235436596, 0.0529160649, 0.0567361265, 0.0214088112, 0.0427679718, 0.0226597488, 0.0372030661, -0.0129442550, -0.0124827288, -0.0430916883, -0.0289559253, 0.0648056120, -0.0333708264, -0.0251545571, -0.0544018224, 0.0115042850, -0.0410518907, -0.0312623903, 0.0097782463, 0.0487809777, 0.0620300472, -0.0052469820, 0.0691899657, -0.0231864713, -0.0225755610, 0.0634335876, -0.0658636242, -0.0161806196, 0.0068151876, 0.0165755227, -0.0184028745, -0.0060253441, -0.0441880450, 0.0034801289, -0.0635760352, -0.0071982890, -0.0585273951, -0.0605760030, 0.0129686743, 0.0677828491, -0.0222610459, -0.0369555168, -0.0538961738, -0.0592996329, -0.0484443866, -0.0508832708, 0.0522962064, 0.0338919908, -0.0669001341, 0.0317596197, 0.0515104234, 0.0483393446, 0.0696115047, -0.0257007368, -0.0488326326, -0.0069242790, -0.0267902464, 0.0348510072, -0.0263249502, -0.0216029175, 0.0330949873, 0.0289287195, -0.0693644509, -0.0699554533, 0.0481033251, 0.0410159081, 0.0564676076, 0.0492515191, -0.0029151887, 0.0634914488, 0.0486781374, 0.0595082939, -0.0216511488, 0.0163133368, 0.0539191365, 0.0003299117, 0.0098391920, -0.0193403140, -0.0688093081, 0.0114553049, 0.0705657452, 0.0233749375, -0.0707071200, 0.0610892028, 0.0630687624, 0.0161597654, 0.0129523799, 0.0558004230, -0.0441081561, 0.0518139303, 0.0615305454, -0.0219140276, 0.0420463830, 0.0128815398, 0.0525781140, -0.0274590068, 0.0309240595, 0.0273049921, 0.0129821077, -0.0097035542, -0.0468266755, 0.0572261065, -0.0286289193, -0.0324400626, 0.0595046580, -0.0125964284, 0.0065147132, -0.0474234819, 0.0479739159, -0.0636249706, 0.0272993818, 0.0450420007, 0.0013223588, 0.0278240591, -0.0593148246, 0.0080229938, -0.0120373592, -0.0437030829, -0.0053327531, 0.0556401759, 0.0347249135, -0.0596293248, -0.0336717293, 0.0012002811, 0.0220532939, -0.0530753806, -0.0191204511, -0.0508227386, 0.0296245292, -0.0719576105, 0.0612831265, -0.0603621267, -0.0372278057, 0.0468116552, -0.0266584978, -0.0669630766, 0.0504185781, -0.0113852210, 0.0608993173, 0.0024922788, 0.0396937877, 0.0508038998, -0.0699764863, -0.0501368940, 0.0606493652, 0.0394974649, 0.0054795444, -0.0688401908, -0.0244972184, 0.0586168617, -0.0237820707, -0.0145880654, 0.0414765924, -0.0623221062, 0.0349482745, -0.0358286686, -0.0460821390, -0.0508905128, -0.0426026136, 0.0430130884, -0.0489355102, 0.0080110505, -0.0228587091, 0.0093460083, 0.0215174034, -0.0094401389, -0.0169693083, -0.0572815314, 0.0295898467, 0.0600066483, 0.0007499754, -0.0695616528, 0.0639962703, 0.0149727017, 0.0282961279, -0.0382367708, 0.0646357089, -0.0405884348, -0.0235492848, -0.0223145746, 0.0461907461, -0.0137469657, 0.0242854282, -0.0028936863, -0.0472737513, 0.0397221968, 0.0458343998, -0.0477446914, -0.0288898721, 0.0671862513, 0.0160064027, -0.0575663298, 0.0071259364, -0.0707156658, 0.0701444000, 0.0692793727, 0.0153280422, -0.0288867578, -0.0167868361, 0.0409547240, 0.0461075008, 0.0200530365, -0.0655680224, 0.0656097829, 0.0655756742, 0.0245250612, 0.0487918556, -0.0060466826, 0.0432630107, 0.0577573925, -0.0066447780, -0.0287518241, -0.0516920239, 0.0438785553, 0.0090488866, -0.0235028975, 0.0693060160, -0.0462267399, 0.0009576902, 0.0704186708, -0.0226126574, 0.0533904582, -0.0273753479, 0.0284801722, -0.0672700778, -0.0525902808, 0.0300423577, -0.0688411519, 0.0401218534, -0.0149325393, 0.0231064782, 0.0406081527, -0.0214177594, 0.0111827031, -0.0235138237, 0.0364209861, 0.0133335665, 0.0244634300, 0.0428845212, -0.0605046637, 0.0455672219, -0.0126780905, 0.0195660293, 0.0620027930, -0.0078407228, -0.0660757273, -0.0321295559, 0.0259461179, 0.0443424210, -0.0021429360, -0.0605890453, -0.0457994938, -0.0606891178, 0.0497592315, 0.0071748868, 0.0524231568, -0.0208665021, 0.0209580734, 0.0091123059, -0.0206814632, 0.0578931421, 0.0350351259, -0.0494834110, 0.0489186645, 0.0390197635, 0.0126350895, -0.0249342956, -0.0465430468, -0.0196655318, 0.0345340595, 0.0668385029, 0.0370402262, -0.0365492404, 0.0466391295, 0.0499487743, -0.0203724913, -0.0033548474, -0.0340664089, -0.0591520183, 0.0711974502, 0.0297890455, -0.0270338021, 0.0487392172, 0.0408485606, 0.0147498921, 0.0511796996, -0.0127852857, -0.0259507112, -0.0324818045, 0.0325047746, -0.0043831840, -0.0128310733, -0.0389667526, 0.0342082605, -0.0499413759, 0.0409461558, 0.0027310327, 0.0642368197, 0.0600109547, 0.0134652480, 0.0033349767, -0.0504596680, 0.0213438570, -0.0595862903, -0.0331623703, -0.0518731885, -0.0476001203, -0.0399725325, -0.0224261209, -0.0401637815, 0.0585215390, 0.0594116449, -0.0327971652, -0.0449557230, -0.0516809933, -0.0157175288, 0.0338070765, -0.0093486533, 0.0086893961, -0.0526482984, -0.0128855817, -0.0544866137, -0.0058050901, 0.0059830174, -0.0047710687, -0.0517330244, -0.0435496718, -0.0108456463, -0.0409233421, 0.0258666947, 0.0713502914, -0.0080900639, 0.0011472851, -0.0588870049, 0.0326163918, 0.0047870725, -0.0377106182, -0.0619264282, 0.0604938567, -0.0196469314, 0.0031991452, -0.0485461950, -0.0183723345, -0.0644643009, -0.0277372338, -0.0703941509, -0.0389828049, 0.0714140981, 0.0444191769, 0.0470254943, 0.0627966672, -0.0006953254, -0.0143030770, 0.0489320531, -0.0457557365, -0.0711818933, -0.0264281556, -0.0296140015, 0.0716073662, 0.0529271364, -0.0027761459, 0.0661990345, -0.0104616843, 0.0658450872, -0.0628048480, 0.0593149513, 0.0570865870, 0.0714269131, 0.0128350258, 0.0067535862, 0.0298191532, -0.0027956069, 0.0501059517, -0.0357194431, -0.0106531046, -0.0391643159, 0.0359132737, 0.0362433419, 0.0127288997, 0.0138270631, -0.0082311556, 0.0092010424, -0.0256674960, -0.0413066298, 0.0328115821, 0.0273228660, -0.0239529312, 0.0715147555, 0.0346592590, 0.0524933711, -0.0721125156, -0.0394573398, -0.0314296857, 0.0483197272, -0.0127386898, -0.0118912086, -0.0178131796, 0.0170136690, 0.0132327899, 0.0319027454, -0.0524326339, 0.0373917148, 0.0480143651, -0.0250850245, -0.0413384810, -0.0544076338, -0.0417751260, 0.0635945499, -0.0243984386, -0.0715948120, -0.0597859025, 0.0413201749, 0.0247972310, -0.0673765317, 0.0653876960, 0.0664393157, 0.0390927047, -0.0571872406, 0.0295208618, -0.0359315462, -0.0576164201, -0.0374425091, 0.0583799332, -0.0416618213, 0.0637965202, 0.0101351067, 0.0652864426, -0.0354081988, 0.0188470408, 0.0429539382, -0.0698721632, -0.0417101197, 0.0029419959, 0.0358998030, 0.0571400672, 0.0636163354, -0.0016471520, -0.0653027818, -0.0344737694, 0.0707458854, 0.0344515219, 0.0048636273, 0.0547720790, -0.0190076269, 0.0567094982, 0.0289431214, -0.0714703202, 0.0219466984, -0.0381760336, 0.0633860826, 0.0045329481, 0.0564109385, -0.0141518004, 0.0246251300, -0.0399028324, -0.0685905814, 0.0271613672, 0.0465040952, 0.0173275620, -0.0169027895, -0.0121691935, 0.0221127421, -0.0610891990, 0.0077901185, -0.0340721570, -0.0168675333, 0.0661308914, 0.0418166071, 0.0242373720, 0.0006193072, -0.0424517989, -0.0512656830, 0.0557963103, -0.0019618869, 0.0642482042, -0.0027810484, -0.0005626827, 0.0614757091, -0.0653044209, 0.0397241265, 0.0608421713, -0.0125367232, -0.0513848364, 0.0069745332, 0.0524476245, -0.0313303359, -0.0395291597, 0.0574776083, -0.0157282986, -0.0052451938, -0.0652366579, -0.0680276379, 0.0401275977, -0.0112716071, 0.0299453810, -0.0112544000, -0.0201326832, -0.0042462796, -0.0376752242, 0.0423798412, -0.0706102625, -0.0625647008, -0.0440332890, -0.0400714353, -0.0612381399, -0.0100909062, -0.0719052330, 0.0356088206, 0.0262234882, -0.0218310915, -0.0357791670, 0.0209119469, -0.0213261694, 0.0686666965, -0.0539258942, -0.0084682778, -0.0123052970, 0.0033159927, -0.0267049521, 0.0405171663, -0.0420638137, 0.0519915521, -0.0314432457, -0.0264177807, -0.0408587642, 0.0582401901, 0.0108478814, -0.0586396120, -0.0292490385, -0.0614801981, -0.0334627256, 0.0314998031, -0.0127127953, -0.0210660622, 0.0599372685, -0.0095365867, -0.0590563193, 0.0361129567, 0.0417214781, 0.0697858036, 0.0068504289, -0.0370560028, -0.0417187735, 0.0628851950, -0.0581887364, 0.0184751749, 0.0325493217, 0.0382688940, -0.0584682897, -0.0635433421, 0.0389679894, 0.0549411923, 0.0239366889, -0.0198900066, -0.0546867922, -0.0680195987, -0.0288665220, 0.0108149648, -0.0375320837, -0.0429115891, -0.0345377438, -0.0271219313, -0.0187261477, -0.0411993638, -0.0066604018, -0.0042505413, 0.0379236862, -0.0203818828, -0.0141035356, -0.0310997888, 0.0050456151, -0.0233112201, -0.0627423525, -0.0524183549, 0.0280884504, -0.0194196180, -0.0513621047, -0.0685920566, 0.0095445365, -0.0677424595, 0.0659078807, -0.0102772675, 0.0174418315, 0.0382001549, -0.0009695962, -0.0450758412, 0.0612420589, 0.0035827085, -0.0409242697, 0.0558753759, 0.0001168624, -0.0124134198, 0.0541770309, -0.0175748877, 0.0107079446, 0.0210073516, 0.0439103022, -0.0646059588, 0.0066147521, -0.0414934382, -0.0010027364, 0.0577877909, -0.0041811988, -0.0558595955, 0.0399505273, -0.0660611689, -0.0234765708, -0.0566399582, -0.0655144602, 0.0444538519, -0.0333046503, -0.0211595595, 0.0569512546, 0.0288328007, -0.0482543595, -0.0239957571, 0.0462637022, 0.0035092086, 0.0483044460, -0.0519965217, -0.0102189705, 0.0234172419, -0.0447547734, 0.0175845772, 0.0361852720, 0.0712350905, -0.0186684057, 0.0302284062, 0.0077209324, -0.0023553446, 0.0234150589, -0.0600223690, -0.0657227561, -0.0588209704, -0.0617973432, -0.0288724564, 0.0134262890, 0.0195821822, 0.0225433707, -0.0589709207, -0.0371122323, 0.0544407517, -0.0093144998, -0.0529509261, -0.0665798560, 0.0585376620, -0.0273154713, -0.0276261643, -0.0709453076, 0.0338136479, -0.0249707922, -0.0142659619, 0.0655681789, 0.0341760814, 0.0416830182, -0.0138827078, -0.0118636601, 0.0388024151, 0.0199587792, -0.0420768037, 0.0627614558, 0.0323017091, 0.0304170400, -0.0482215807, -0.0041320100, 0.0182891786, 0.0718029588, 0.0066559613, 0.0356638506, -0.0206722096, -0.0176601782, 0.0296167508, -0.0427860841, -0.0003816560, -0.0544156730, -0.0385350436, -0.0050156415, 0.0055158287, 0.0036167130, -0.0094805062, 0.0078848749, -0.0041846931, 0.0316577554, 0.0651992559, -0.0615228526, 0.0216455907, 0.0322740078, 0.0224814415, 0.0131240785, 0.0583492517, 0.0465775803, 0.0615674406, -0.0089658499, -0.0264544301, -0.0609139353, 0.0447358936, 0.0447971821, -0.0551295653, -0.0283884257, 0.0009870455, -0.0025308877, 0.0698263794, 0.0604760647, 0.0122123659, -0.0701834038, -0.0692780912, 0.0007917508, 0.0649085790, 0.0685476810, 0.0307278931, 0.0059631318, -0.0247756205, 0.0046132877, 0.0081484765, -0.0218146406, 0.0702641457, -0.0120017938, 0.0538782179, 0.0498734638, 0.0024685636, 0.0119970068, -0.0504054502, 0.0275547430, 0.0100594684, 0.0447260886, -0.0472065061, 0.0233220607, 0.0419581011, 0.0061676577, 0.0148434639, 0.0317000672, 0.0324103162, 0.0052980185, -0.0369360372, -0.0576215647, 0.0356423929, 0.0153387785, -0.0710221827, -0.0451579317, -0.0215071291, 0.0094797686, -0.0491649210, 0.0691196024, -0.0623278692, -0.0528356284, 0.0397706479, 0.0659600049, 0.0311816931, -0.0508310497, 0.0092415139, 0.0513380319, -0.0440393314, -0.0066902563, -0.0703423917, 0.0311475396, -0.0049760640, 0.0327128321, 0.0400963873, -0.0017521605, 0.0216685086, 0.0671348125, -0.0489687324, -0.0395997241, -0.0224255025, -0.0664642975, -0.0543091148, 0.0412640795, -0.0396073125, -0.0609548017, -0.0250301696, 0.0383965299, -0.0266783871, 0.0610323995, 0.0464705378, 0.0016721860, 0.0350768194, 0.0128764436, 0.0310157165, -0.0716884509, -0.0473608486, 0.0642823726, -0.0315985344, 0.0643325150, -0.0553192273, -0.0389884487, 0.0085481107, -0.0410891585, 0.0441210940, -0.0663726628, 0.0516008437, -0.0395238772, 0.0144426003, -0.0179358758, 0.0340586156, 0.0242703706, 0.0207024366, -0.0099395923, 0.0551651865, -0.0612468421, -0.0343408845, 0.0415702984, -0.0493516438, -0.0192042626, -0.0567365885, 0.0136997327, 0.0197679624, -0.0116118640, 0.0591059476, -0.0717029572, 0.0499885380, -0.0526113249, 0.0545023531, 0.0586830527, -0.0471967347, 0.0160497129, 0.0275160074, 0.0212601125, -0.0098069459, 0.0672257990, -0.0082080811, -0.0211178698, -0.0515719876, 0.0147526488, -0.0416082069, -0.0003206581, -0.0160551853, -0.0311533026, -0.0460243970, 0.0080952048, -0.0043182820, 0.0333437771, 0.0087349042, -0.0591118596, -0.0087931976, -0.0665995926, 0.0159406587, 0.0111215860, 0.0021016225, 0.0628533512, -0.0218521506, -0.0644702539, -0.0587946773, 0.0484578237, 0.0239491761, 0.0593653321, 0.0186612830, -0.0350073911, 0.0714232326, 0.0074260682, 0.0510683730, 0.0176444203, -0.0236484297, -0.0376655720, 0.0223550797, 0.0297089815, -0.0132434405, -0.0544770807, 0.0130309388, 0.0286550373, -0.0463155098, 0.0651108921, -0.0704205260, 0.0004110113, 0.0315802619, -0.0459974334, 0.0348105505, -0.0037377551, 0.0721382797, 0.0386596844, -0.0380655862, 0.0205887407, 0.0559812635, 0.0312023908, -0.0150549635, -0.0663283840, -0.0435916707, -0.0025898665, 0.0375126600, -0.0253087431, -0.0485301614, -0.0062926486, 0.0685256720, 0.0310731530, -0.0387944467, -0.0527987033, -0.0567102954, -0.0046301484, 0.0144008100, 0.0075474754, -0.0563639849, 0.0311998427, -0.0567100719, -0.0383283421, -0.0434396192, -0.0564480051, -0.0092821494, 0.0249321833, 0.0228298381, -0.0643143654, 0.0361514091, -0.0670575574, 0.0284241810, 0.0432361737, -0.0195577852, -0.0184425712, 0.0616181642, 0.0121865571, -0.0057467893, 0.0370831043, -0.0443043932, 0.0720426589, -0.0385391377, -0.0374887399, 0.0269139782, 0.0660749227, 0.0711887032, -0.0171514712, -0.0303285494, 0.0151382387, 0.0535379201, 0.0615131408, 0.0568183810, -0.0242999308, 0.0557372272, -0.0419409275, -0.0224624984, 0.0619457662, 0.0373130962, -0.0596057698, -0.0504116602, -0.0134332255, 0.0540005565, -0.0278540291, -0.0563188195, -0.0262418091, 0.0285303593, 0.0482023284, 0.0018146560, -0.0371665694, -0.0558843240, -0.0135073178, 0.0416583940, -0.0415638164, -0.0036342144, -0.0033566207, 0.0536550730, 0.0372211859, -0.0318223871, 0.0461203754, -0.0255232193, 0.0180776939, -0.0239434317, -0.0028815717, 0.0098938569, -0.0047332346, 0.0011622757, 0.0681624264, 0.0426013097, 0.0209727660, -0.0200024508, -0.0106507465, -0.0217744671, 0.0652110726, -0.0696357116, -0.0500803664, -0.0107482746, -0.0014726743, 0.0306459740, -0.0476007573, 0.0461480767, 0.0374457091, -0.0025280118, 0.0440636948, -0.0148801804, -0.0425828770, -0.0704711974, 0.0708182603, 0.0496822819, -0.0604631975, -0.0062787980, -0.0466859788, -0.0171550363, -0.0695489943, 0.0085029453, 0.0047444552, -0.0145328529, 0.0493880734, -0.0695775375, 0.0476261750, -0.0612885505, 0.0700853467, 0.0223770514, -0.0012403727, 0.0502200127, 0.0517449155, -0.0720643029, 0.0363343656, 0.0717960447, 0.0281752720, 0.0717714727, -0.0271313600, 0.0438386202, -0.0116625875, 0.0046117753, -0.0632647425, 0.0107935071, 0.0485442728, 0.0714612752, -0.0134066939, -0.0472743362, -0.0403840058, -0.0706305504, 0.0470580533, 0.0563015938, 0.0437459275, 0.0590697676, -0.0181615576, -0.0275075100, -0.0455582067, -0.0384918563, -0.0495269261, -0.0002306327, 0.0663985014, -0.0381716453, 0.0671839714, -0.0375103541, 0.0430084094, 0.0033030212, -0.0441342592, 0.0592269301, 0.0294552743, 0.0095210150, -0.0668019429, -0.0671638623, 0.0021074563, -0.0528450720, 0.0595430732, -0.0719227642, 0.0353618413, 0.0694048405, 0.0374901369, -0.0367664881, 0.0064324513, -0.0578499958, -0.0038456768, -0.0255718082, -0.0488418862, -0.0516451150, 0.0189733729, -0.0138357691, -0.0065516010, -0.0609093420, -0.0506784283, 0.0433522314, -0.0112293288, 0.0366246179, -0.0049694926, 0.0022730827, -0.0173878372, 0.0348855332, 0.0117560178, 0.0426339284, -0.0538339242, 0.0024404302, 0.0124692544, -0.0014831722, -0.0431151763, -0.0547186211, 0.0042539313, 0.0584565997, 0.0499251485, 0.0352229029, -0.0017928556, -0.0515774265, 0.0201852992, -0.0573738068, 0.0309310108, 0.0187672004, 0.0205993876, 0.0535294563, 0.0618574470, -0.0512047894, 0.0708930343, -0.0673705637, 0.0125401467, 0.0518434346, 0.0281624049, -0.0721525550, -0.0276710577, -0.0445564017, -0.0385024361, -0.0558621772, 0.0033318400, -0.0087622479, -0.0586245582, 0.0369330794, -0.0544351488, 0.0719340295, -0.0646310598, 0.0618457645, -0.0618237220, -0.0148409642, 0.0284478739, 0.0709846914, 0.0368237346, 0.0559768230, 0.0644333661, -0.0177894682, -0.0601282232, -0.0027724430, -0.0555359796, 0.0281288847, -0.0087792426, 0.0212685466, -0.0521164350, 0.0500139371, 0.0605216175, 0.0103501901, 0.0701543391, -0.0604993142, -0.0287808329, -0.0083258227, 0.0650250614, 0.0451845005, -0.0364471376, -0.0453426279, 0.0017596260, -0.0612361431, 0.0246163383, 0.0015705302, 0.0507364795, -0.0528929085, 0.0160891861, -0.0034283549, -0.0340645351, 0.0443933830, -0.0184272565, 0.0663428456, 0.0119959116, -0.0331590474, -0.0127344243, 0.0294395313, 0.0498823076, -0.0612256452, 0.0499662757, -0.0243196338, 0.0634882301, 0.0562854409, 0.0001685172, 0.0357732996, 0.0056198761, 0.0365396515, 0.0093940645, 0.0474256501, 0.0161530748, 0.0174938291, 0.0174013749, -0.0209627561, -0.0535996780, 0.0638189167, -0.0334803089, 0.0425383970, -0.0310230479, -0.0717902780, 0.0503674224, -0.0695637539, -0.0616801344, -0.0275446065, 0.0211257339, -0.0039669275, 0.0545371473, 0.0080725998, -0.0070670545, -0.0415417552, -0.0088763088, -0.0685587972, 0.0657791197, 0.0712420344, -0.0112718977, -0.0158107504, -0.0126591623, 0.0155930594, 0.0287134051, -0.0021819249, 0.0119958371, -0.0367618576, 0.0163918138, 0.0212446675, -0.0092571378, -0.0473067015, 0.0491731465, -0.0603957139, -0.0046402514, -0.0138571896, -0.0109415017, 0.0603329688, -0.0157362819, -0.0166152008, 0.0125662982, -0.0518636219, -0.0103653818, -0.0676456541, -0.0306747071, -0.0277649015, 0.0667482466, -0.0210091248, 0.0336763933, 0.0416376144, -0.0266617835, 0.0081163198, -0.0399807058, 0.0078191087, 0.0698079467, 0.0405646935, -0.0118451305, -0.0208094455, -0.0359786749, -0.0307201669, 0.0449497178, -0.0645790845, 0.0485358909, 0.0067328364, 0.0114773959, -0.0466339290, 0.0492439121, 0.0283463523, 0.0198320895, 0.0545581430, 0.0498486161, -0.0647085756, 0.0013497025, 0.0521503985, 0.0333723724, 0.0213951021, -0.0577354506, 0.0629465729, 0.0261701271, 0.0590401888, -0.0416698046, 0.0184594169, -0.0405001678, 0.0352926552, 0.0325401202, -0.0500918292, -0.0342345163, 0.0208537504, 0.0405876935, -0.0570118725, -0.0396119729, 0.0167429596, 0.0487078354, -0.0386248976, -0.0223526508, 0.0555168092, -0.0262010470, -0.0439877138, -0.0394865908, -0.0635665208, 0.0125169009, -0.0646088645, -0.0102845468, -0.0614394024, 0.0483734310, 0.0711150914, -0.0047977045, -0.0186253041, -0.0052246451, -0.0438003503, 0.0501216501, -0.0668234006, 0.0461532176, 0.0479297116, -0.0384945236, 0.0359168202, 0.0431341380, -0.0197398104, 0.0440968648, -0.0060671419, -0.0450273901, 0.0470272675, -0.0256115906, 0.0715138167, -0.0709541142, 0.0477124974, -0.0681393743, -0.0131263323, 0.0591642410, -0.0196971893, 0.0345692858, -0.0479089394, -0.0214619972, -0.0532928519, 0.0205082148, -0.0672702491, -0.0166891553, -0.0678234845, -0.0561053194, 0.0120285675, -0.0066816136, 0.0367676020, -0.0717512891, -0.0096377060, 0.0640030801, -0.0462708101, -0.0693003759, 0.0413090065, 0.0457847640, 0.0540794432, -0.0576187223, 0.0200176239, -0.0264343657, -0.0061811134, 0.0011870191, -0.0342730060, -0.0391757935, -0.0309340246, -0.0316251516, -0.0619945154, 0.0306973681, -0.0334470831, 0.0219206661, 0.0000806153, 0.0226124004, -0.0252598412, 0.0573092550, 0.0627814531, 0.0099179819, -0.0636703297, 0.0356155187, -0.0310586840, -0.0200658888, 0.0312931910, 0.0381612182, -0.0491395742, 0.0502006561, -0.0197619721, 0.0130651966, 0.0579265058, -0.0438867286, 0.0131746456, 0.0700993538, -0.0171739943, 0.0267266706, 0.0410633832, -0.0669043213, -0.0602489412, 0.0099340528, 0.0227316543, -0.0623080134, 0.0114316270, -0.0258817822, 0.0701118410, -0.0328788944, 0.0519786105, 0.0357057452, 0.0510918498, -0.0033459216, -0.0031744391, -0.0573864728, -0.0158958212, -0.0454770960, -0.0304322839, -0.0065752938, 0.0370625407, -0.0643601120, 0.0537908077, 0.0105478391, 0.0362986773, 0.0212029591, -0.0399608351, -0.0511671938, -0.0403396674, -0.0703716129, -0.0273350514, 0.0259691551, -0.0385712795, 0.0203733295, -0.0120584704, -0.0384450704, -0.0549306422, -0.0703249127, 0.0710116923, -0.0398637392, -0.0306845121, 0.0405418426, -0.0131760240, 0.0292099118, -0.0536339171, 0.0613390803, -0.0317763276, -0.0460228324, 0.0204665586, 0.0072242692, 0.0226867124, 0.0705170631, 0.0126053244, -0.0574360453, -0.0651244223, 0.0568604916, 0.0516864434, 0.0061863959, -0.0719386265, 0.0421810746, -0.0497050658, -0.0302408300, -0.0180389434, 0.0102268830, -0.0384036042, -0.0246697143, -0.0422809049, -0.0057649091, 0.0601820946, -0.0532741658, 0.0113170967, 0.0704448968, -0.0106862448, 0.0688514411, 0.0265800357, 0.0082977787, -0.0379861593, -0.0585937053, 0.0292567983, 0.0005448535, 0.0071207359, 0.0639037192, 0.0548124313, 0.0116350576, 0.0027673393, 0.0555650741, 0.0301819295, -0.0647423565, 0.0069814399, -0.0154742636, -0.0215672329, -0.0493685752, -0.0715806484, 0.0499568433, -0.0619720742, -0.0139121301, 0.0172106251, -0.0719086379, -0.0543315485, -0.0437264144, 0.0084289759, 0.0005659387, 0.0287040919, 0.0026521385, 0.0529873371, -0.0668273568, 0.0305212066, -0.0551160052, -0.0026514158, -0.0384142399, -0.0128931366, 0.0077439919, -0.0659453720, -0.0533934049, 0.0583461225, 0.0411475897, -0.0318074711, -0.0398178995, -0.0214290656, -0.0203510337, -0.0638922006, -0.0379358493, -0.0084023401, -0.0280514732, -0.0003996044, -0.0209075734, 0.0355148241, -0.0099409521, 0.0222841501, 0.0616967976, -0.0697836354, 0.0357257947, -0.0197227076, 0.0434107780, -0.0284122229, 0.0043151900, 0.0394409224, 0.0540912896, 0.0601096600, 0.0700197369, -0.0496741608, 0.0359601751, 0.0387663841, 0.0176746175, -0.0516905077, -0.0538312569, -0.0111271925, 0.0043435767, -0.0661472529, -0.0436429642, -0.0085971132, 0.0526290089, 0.0282469541, -0.0359977931, -0.0561675578, -0.0135718584, 0.0287582949, -0.0111088008, -0.0441308320, -0.0267025977, 0.0650021434, 0.0242659152, 0.0486932769, -0.0417584553, 0.0005558357, 0.0210496113, -0.0339991003, -0.0058925822, 0.0467830598, -0.0127011649, 0.0684350729, -0.0620405413, 0.0641929209, 0.0344087332, -0.0599794909, -0.0688166320, -0.0409286767, -0.0714200437, 0.0403744206, -0.0189337432, -0.0585327595, -0.0106180236, -0.0534392074, 0.0482537746, -0.0401134007, 0.0280156136, -0.0582660101, -0.0401907973, 0.0626254231, 0.0343095511, 0.0705003887, 0.0579090863, 0.0208334476, -0.0561053380, -0.0104561970, -0.0240418203, 0.0057681128, 0.0580265820, 0.0009887964, -0.0398638248, -0.0403399058, 0.0644100606, 0.0458533838, 0.0330744609, 0.0718123913, -0.0157635882, -0.0588796586, 0.0409272462, -0.0714937449, -0.0258845873, 0.0419388413, -0.0653366297, 0.0097399801, 0.0119891465, -0.0260715857, 0.0054515302, 0.0283450335, 0.0116829053, 0.0099271536, 0.0459526628, 0.0039666891, -0.0575934649, 0.0083671212, -0.0572915785, 0.0610518903, 0.0040482283, -0.0686274022, -0.0287676528, 0.0021592975, -0.0167229325, -0.0354157500, -0.0294206701, 0.0502899066, 0.0520426035, 0.0074677542, 0.0455077887, -0.0399581157, 0.0562201440, 0.0297240689, -0.0051553920, 0.0546396673, -0.0568563268, 0.0018835664, 0.0154510662, -0.0392865315, 0.0621169508, -0.0266583934, -0.0402749032, 0.0329335257, 0.0479373112, -0.0701997206, 0.0102742538, -0.0666223392, 0.0700765699, -0.0423026234, 0.0180343986, 0.0072702616, -0.0638370216, 0.0274490267, 0.0335851312, -0.0249658003, 0.0610354394, -0.0041752830, 0.0567298383, -0.0100291856, -0.0546987355, -0.0612312704, 0.0123584643, -0.0595203564, -0.0572869852, -0.0148264617, 0.0034561455, 0.0117445886, -0.0140077993, 0.0350803956, -0.0106042549, -0.0242021829, 0.0671549290, 0.0573865175, -0.0623261146, -0.0411638319, -0.0178214200, -0.0583147928, 0.0547166318, -0.0433556512, 0.0458225980, 0.0072742924, 0.0555878580, -0.0472325906, 0.0344261229, 0.0302850157, -0.0291176848, 0.0245364681, -0.0215123780, -0.0306713693, 0.0034924820, -0.0606748685, -0.0488376915, 0.0376327038, 0.0592110902, 0.0232400522, -0.0136539340, 0.0614302307, 0.0354219452, -0.0026143715, -0.0102885030, -0.0641885325, -0.0023937821, 0.0069675371, -0.0682449564, -0.0014846846, -0.0429959893, -0.0420025066, -0.0681251287, -0.0458759367, 0.0614100248, 0.0561585277, 0.0543138981, -0.0676914230, -0.0488056354, -0.0217029378, -0.0664852411, 0.0567067116, 0.0027374178, 0.0360603333, 0.0436843485, 0.0331881419, 0.0581031144, 0.0410348400, -0.0533068404, -0.0485931039, -0.0209998004, -0.0360276774, 0.0057610422, 0.0237262398, 0.0334636196, -0.0632593855, -0.0252617002, -0.0236467421, -0.0059545562, -0.0340223461, 0.0690877587, 0.0070217028, 0.0624404103, -0.0151221529, -0.0504170805, -0.0347631648, -0.0590562671, -0.0342716649, 0.0106842145, 0.0207368881, 0.0303612053, -0.0180435367, -0.0550620481, -0.0632827729, -0.0430358052, -0.0666076988, 0.0532475710, 0.0070553720, 0.0162789524, 0.0372137129, -0.0707606822, 0.0673625022, 0.0551923960, -0.0540191680, 0.0055758506, -0.0678026825, -0.0269469954, 0.0391566083, 0.0691288412, 0.0078489855, 0.0392295420, -0.0615685880, 0.0256305858, 0.0486957729, -0.0309310108, -0.0145089328, 0.0557311475, 0.0046291873, -0.0051942095, -0.0286592692, -0.0082647726, -0.0345128626, -0.0213491917, -0.0261391029, 0.0461478680, 0.0519701317, 0.0117394105, -0.0140487514, 0.0051947981, -0.0459517501, -0.0209680535, 0.0298888534, -0.0514473319, -0.0222152397, 0.0465531275, -0.0625588000, 0.0026663169, -0.0003805161, 0.0576553941, 0.0480283052, -0.0603235662, 0.0382377207, -0.0013071895, -0.0474545062, 0.0351846889, -0.0030921921, 0.0307183787, -0.0654396564, 0.0026775375, -0.0701141506, -0.0307899192, -0.0224494711, 0.0495876446, -0.0446657799, 0.0230210871, -0.0236790739, -0.0431280136, -0.0280025378, 0.0039865151, -0.0575772077, -0.0003793687, 0.0325276628, -0.0172059983, -0.0493347645, 0.0477639809, -0.0706325993, 0.0052385852, 0.0641688108, 0.0198857561, 0.0684139729, 0.0476763099, -0.0564232096, -0.0110204257, -0.0386873558, -0.0134787895, 0.0621696115, 0.0690326244, -0.0220768861, -0.0094489157, 0.0111602321, -0.0589697361, -0.0437998846, 0.0391032472, 0.0719992518, 0.0386015996, -0.0145079531, 0.0445231050, 0.0486357063, -0.0389094725, -0.0493605919, -0.0282976776, 0.0097710863, -0.0621025525, -0.0026854649, 0.0240486190, 0.0208645090, 0.0448916107, -0.0154165700, -0.0363950506, -0.0551834702, 0.0703276694, -0.0701932162, 0.0716668367, 0.0225908756, -0.0512163863, -0.0110461675, -0.0462376513, 0.0674222261, 0.0590602010, -0.0252254456, -0.0441685319, 0.0639587939, 0.0151963606, 0.0321060047, -0.0046889633, -0.0290432498, -0.0031053722, -0.0538109355, -0.0355970040, 0.0129033923, 0.0519630909, 0.0042352155, 0.0336444750, -0.0413633771, -0.0219817683, 0.0030901134, -0.0421314687, -0.0569681153, 0.0176827163, 0.0335405320, 0.0619781315, -0.0245870724, 0.0352204219, 0.0616339296, -0.0484253764, -0.0250509232, -0.0376149155, 0.0671250969, -0.0530096516, -0.0356401056, -0.0533018336, 0.0505306795, 0.0036038905, -0.0607403219, -0.0606308915, -0.0459534526, -0.0405402929, -0.0086031705, -0.0133328773, 0.0684701502, -0.0691254362, -0.0270822048, 0.0187596679, -0.0294025168, -0.0104015656, -0.0646849871, 0.0301927403, 0.0509799197, 0.0200912505, 0.0241799504, 0.0453683883, 0.0607802123, -0.0404166803, -0.0355140865, -0.0066717044, -0.0198561773, 0.0693813711, -0.0372569896, 0.0006902367, 0.0078905374, -0.0609013923, -0.0270376727, 0.0073644668, -0.0659360662, -0.0220488198, 0.0298225284, 0.0415858552, -0.0033988133, 0.0332119092, 0.0422943830, -0.0087465718, -0.0255429558, -0.0658990890, -0.0416778065, -0.0235071667, -0.0322063826, 0.0216483250, 0.0135812685, 0.0671939999, 0.0266433060, -0.0641025901, -0.0117625371, 0.0329153687, -0.0041310936, 0.0581890643, 0.0238385573, -0.0226465538, 0.0584231168, 0.0639304817, 0.0688559711, -0.0108764619, 0.0494678020, -0.0112531446, 0.0591161400, -0.0481338650, -0.0211479627, 0.0233642161, -0.0200013146, -0.0644135401, 0.0275289491, 0.0144573003, -0.0429642238, 0.0634361506, 0.0151531100, -0.0216244757, 0.0274937451, -0.0432240590, -0.0209464245, 0.0136600584, 0.0148086026, 0.0251149982, 0.0662563890, -0.0017638579, -0.0344923548, 0.0544629544, -0.0500456803, 0.0343637168, -0.0275722928, -0.0182253905, -0.0641518310, -0.0034509599, -0.0127028152, -0.0595772229, 0.0596261770, 0.0198466107, 0.0005726591, -0.0535957702, -0.0519781634, -0.0293029100, -0.0716628432, -0.0064293146, 0.0691666454, 0.0530987084, -0.0138697512, 0.0589121580, 0.0544409156, 0.0540247709, 0.0042690709, 0.0308165699, -0.0401283726, 0.0101589411, -0.0698483139, 0.0440411866, 0.0369274020, -0.0218102895, -0.0500791669, -0.0607551895, -0.0424156152, 0.0428937823, -0.0049785078, 0.0236106291, -0.0348408706, -0.0703323632, 0.0671899319, -0.0030935034, 0.0586051494, 0.0432668850, -0.0638376772, 0.0492340028, 0.0324233025, -0.0637672171, 0.0367688090, 0.0674850196, 0.0645359457, -0.0553582013, -0.0275487714, -0.0440573469, 0.0716221333, -0.0560791492, -0.0406728685, -0.0656802431, -0.0496396422, 0.0135080218, -0.0075327083, -0.0704754516, -0.0215377063, -0.0649714395, -0.0475135744, 0.0363151953, -0.0147913769, -0.0189278424, 0.0345116928, 0.0200359002, 0.0497422144, 0.0053731203, 0.0318727717, 0.0041309446, 0.0108636245, 0.0645944178, -0.0079155043, 0.0508993417, 0.0422835723, -0.0141491853, -0.0167568624, -0.0010372028, -0.0268235207, 0.0341909155, 0.0383464471, 0.0073824301, -0.0688156858, 0.0203003958, -0.0094010308, -0.0412331074, 0.0265810862, 0.0426170304, 0.0105362758, 0.0254710466, 0.0569742918, 0.0469166115, 0.0190767273, 0.0164082274, 0.0168306604, 0.0000344440, -0.0526278615, 0.0422556847, 0.0406424105, -0.0246134996, -0.0321533866, -0.0697017983, 0.0435694754, -0.0564418957, -0.0502256937, -0.0285340250, 0.0326177180, -0.0588984340, -0.0041775703, -0.0203890763, -0.0573218614, 0.0681965798, 0.0644479543, -0.0208408311, 0.0654986501, 0.0097946823, 0.0423522294, -0.0418152846, 0.0356659666, 0.0443938002, 0.0553935319, 0.0650320798, 0.0691864341, -0.0710180178, -0.0506220609, -0.0547024682, -0.0099730939, 0.0156269222, 0.0627264082, -0.0036278963, -0.0615570918, -0.0497437119, 0.0470178947, 0.0692289472, 0.0499558672, -0.0262988470, 0.0012141839, 0.0376527533, -0.0317077935, -0.0468416959, 0.0067099556, 0.0561188608, -0.0039205402, -0.0006165877, -0.0172117800, 0.0081287548, -0.0402389243, -0.0075973049, -0.0555233136, -0.0324241109, -0.0176668726, 0.0547658503, 0.0303121880, 0.0114250332, -0.0635245070, -0.0569064841, 0.0295976698, -0.0363085382, -0.0684528723, -0.0331318639, -0.0583120361, 0.0285716876, 0.0151435062, 0.0671949834, 0.0667313933, -0.0182178207, 0.0706847906, 0.0665838271, 0.0011900440, 0.0426630974, -0.0583895892, -0.0418910086, 0.0108814538, -0.0702817589, 0.0009671226, -0.0583571009, 0.0636504740, -0.0225348137, 0.0162114725, -0.0473816171, 0.0583216846, 0.0384945422, 0.0112641230, -0.0183633193, 0.0062775910, 0.0625138879, 0.0616056770, 0.0268270671, 0.0148580149, 0.0317414179, -0.0406792872, -0.0509031937, -0.0700542405, 0.0697452128, 0.0105285347, -0.0686587319, -0.0294841975, -0.0266572908, -0.0394796580, 0.0261602849, -0.0343550295, -0.0656424686, -0.0609284416, 0.0220396295, 0.0113097206, -0.0066405982, -0.0145913027, 0.0610008389, 0.0077856481, -0.0288817510, 0.0022248328, -0.0165674724, -0.0080306679, -0.0493963808, -0.0612169206, 0.0692741573, -0.0687007681, -0.0424274728, -0.0204804093, -0.0489802808, 0.0636075139, 0.0589723885, 0.0606057793, 0.0053127781, 0.0684028268, -0.0359042063, -0.0387713388, -0.0289528444, -0.0284132212, -0.0205174722, 0.0195090920, 0.0592531562, 0.0250242651, -0.0401132815, 0.0388664752, 0.0562499464, 0.0295506790, 0.0001277253, 0.0131202266, -0.0383940898, 0.0106301382, 0.0202567279, -0.0305186957, -0.0703610256, 0.0092081130, 0.0033463165, -0.0259369649, -0.0161049999, 0.0045448393, -0.0652902722, -0.0701235831, -0.0174450129, 0.0194558576, -0.0485240184, -0.0129616335, 0.0077738911, 0.0523131713, 0.0077689886, 0.0227839649, 0.0333891511, 0.0112443715, -0.0533850081, 0.0460994691, 0.0534566194, -0.0098150186, -0.0428718403, 0.0619266480, -0.0424669608, -0.0078653097, 0.0664386302, -0.0242578089, -0.0007869154, 0.0666566342, -0.0511597618, 0.0472578183, 0.0345118120, 0.0397926271, -0.0153661221, -0.0243570581, 0.0481516048, -0.0220097639, 0.0363370478, 0.0010011494, 0.0455006659, -0.0546038225, -0.0251471214, 0.0154741406, -0.0035248324, -0.0676180422, -0.0459864885, -0.0636336282, -0.0624134354, 0.0029820725, -0.0447321460, -0.0387952216, -0.0382883921, 0.0199453905, 0.0521508679, 0.0167081505, 0.0148789957, 0.0008204877, 0.0080302507, 0.0379113629, -0.0203478150, -0.0489970744, 0.0311111435, -0.0048300177, -0.0417956188, -0.0063195899, -0.0208969414, -0.0212759264, 0.0138055906, 0.0146025047, 0.0337545425, 0.0636948496, -0.0350655504, 0.0116229579, -0.0298611894, -0.0499696285, 0.0596064180, 0.0432672277, -0.0408122055, -0.0329507664, -0.0008479133, -0.0668644160, 0.0217481777, 0.0060094818, -0.0293762423, -0.0430197343, -0.0336564854, 0.0485030413, 0.0474590659, -0.0661988705, 0.0254979283, -0.0152094066, 0.0516767800, 0.0055032372, 0.0167922527, 0.0172395036, -0.0015779957, 0.0229681730, -0.0084507242, -0.0554078445, 0.0185358301, 0.0521887168, 0.0270828605, -0.0629149526, -0.0495145395, -0.0502631180, -0.0299294628, -0.0189770348, 0.0442386642, 0.0435643792, -0.0111096948, -0.0112559311, -0.0171741843, -0.0076154247, 0.0241639838, -0.0335108340, -0.0116247497, 0.0571624786, 0.0319733396, 0.0567132533, -0.0330826007, -0.0654998124, -0.0057606772, 0.0654742867, 0.0402956381, -0.0092056394, 0.0273266733, 0.0537656546, -0.0392486453, -0.0699992105, 0.0072297230, -0.0373492315, -0.0455935150, -0.0491785482, -0.0317028724, 0.0240116194, 0.0091526955, 0.0062604398, 0.0415574163, -0.0401744694, 0.0562453866, -0.0683813691, -0.0155936927, 0.0518029854, -0.0325869545, -0.0697700381, 0.0217412263, 0.0241134837, 0.0701902062, -0.0524898842, -0.0172455758, 0.0565381646, 0.0067635328, -0.0314083174, 0.0373187438, 0.0442288220, 0.0516613573, -0.0582139269, 0.0270958617, 0.0676733553, 0.0006543770, -0.0334671475, 0.0654990226, 0.0603120327, -0.0529416203, 0.0271291956, 0.0019283742, 0.0404662862, -0.0087957606, -0.0615394711, 0.0177075118, 0.0012078881, 0.0121792406, -0.0101201050, 0.0194846913, 0.0109644383, -0.0023902431, -0.0622943677, -0.0198909342, -0.0406161733, -0.0065045804, 0.0697458088, -0.0317377150, 0.0280158892, -0.0639401078, -0.0059511736, 0.0603386760, 0.0424578562, -0.0317442045, -0.0448367447, 0.0234593451, 0.0607449710, -0.0687094256, 0.0333797708, 0.0430022329, 0.0131603703, 0.0721077025, 0.0337357745, 0.0297519639, 0.0582844913, -0.0200767480, 0.0405924469, 0.0415345132, -0.0677399784, 0.0714175552, 0.0410611778, 0.0182890370, -0.0460467301, -0.0337795094, -0.0613352172, 0.0260045305, 0.0641056895, 0.0717064589, 0.0316298977, 0.0208534449, 0.0009078979, -0.0076000243, 0.0644300431, 0.0467508286, -0.0221454687, -0.0277107023, -0.0491409190, -0.0086352602, -0.0278541483, -0.0694442913, 0.0590990186, 0.0203691199, -0.0158762746, 0.0266786441, -0.0309066810, -0.0189587101, -0.0374457426, -0.0190913379, -0.0103880055, -0.0667005628, 0.0290395692, -0.0171547607, 0.0442186520, -0.0651741326, 0.0251340643, -0.0643032491, 0.0297014266, -0.0600402802, 0.0602123141, -0.0649216622, 0.0606590360, -0.0202780440, 0.0265607983, 0.0227037296, -0.0070807189, -0.0019460917, -0.0319093317, 0.0523194149, 0.0130952597, 0.0633313805, -0.0470852032, 0.0047388598, -0.0110904910, 0.0103131607, 0.0288236588, -0.0188846551, 0.0409089252, -0.0687813088, -0.0288117006, -0.0653106272, 0.0291133821, 0.0676634461, -0.0134344809, 0.0247471258, -0.0374482386, -0.0161052719, 0.0405772999, -0.0258070566, -0.0294894092, -0.0353843831, 0.0177164599, 0.0205835775, -0.0174561813, 0.0708263218, 0.0221119896, -0.0322750881, -0.0276291780, -0.0525063798, 0.0665300041, 0.0143701658, 0.0618129224, 0.0117619857, -0.0182808489, -0.0017735139, -0.0171863660, -0.0310922004, 0.0518219844, 0.0036141649, 0.0491862744, -0.0554906912, 0.0425301045, -0.0004679263, -0.0437668674, 0.0274501070, -0.0327890441, 0.0417985767, 0.0401333272, -0.0119941533, -0.0137792304, 0.0180340409, -0.0212873518, -0.0316996723, 0.0640790612, -0.0408933684, 0.0064124912, -0.0502950549, -0.0322677568, -0.0669284239, 0.0240455866, -0.0714595690, 0.0507661626, -0.0066707060, -0.0285974145, 0.0373480991, 0.0539075434, 0.0029650703, -0.0115687773, 0.0095718727, 0.0085291639, -0.0070492625, -0.0300602987, 0.0325338170, 0.0479080305, -0.0681369677, -0.0354786068, 0.0060449615, -0.0459436104, -0.0169589855, -0.0233004987, -0.0246511139, 0.0631448328, 0.0337966159, 0.0218601003, -0.0243154354, -0.0265793651, -0.0137100406, -0.0319839902, -0.0278964080, 0.0689574033, 0.0364695936, -0.0270197280, 0.0233813375, 0.0611305684, 0.0153622851, -0.0317083783, 0.0115492493, 0.0590790510, 0.0032090247, 0.0135167092, -0.0543932691, 0.0479711443, -0.0406339467, 0.0057166815, 0.0227657408, 0.0425788015, -0.0650149211, 0.0201635212, -0.0008413047, -0.0574670844, 0.0623538345, 0.0129335374, 0.0633841157, 0.0517751276, -0.0217054524, 0.0257374570, 0.0625055283, -0.0246285237, -0.0245521590, 0.0343301520, -0.0171988606, -0.0449857675, 0.0663936734, -0.0605564192, 0.0362583473, 0.0227451473, 0.0501093790, -0.0621012785, 0.0647774488, -0.0578497201, -0.0518674925, -0.0687244758, -0.0268325210, 0.0536750108, 0.0402476266, -0.0045629963, -0.0616404936, -0.0133847743, -0.0456205793, 0.0065549910, -0.0230760574, -0.0309965871, 0.0034179762, -0.0284665413, -0.0288710818, -0.0353270508, 0.0601885617, -0.0079011694, -0.0157784894, 0.0606138110, 0.0112398267, 0.0032573417, 0.0516552031, 0.0342485383, -0.0168104097, -0.0430547968, 0.0274714977, 0.0704269409, -0.0392398871, -0.0179305263, 0.0654137880, -0.0153297484, 0.0403920934, 0.0220940039, 0.0306599066, 0.0521822646, -0.0470148474, 0.0315720737, 0.0265804157, 0.0036691576, -0.0687606111, -0.0341938399, -0.0606281906, 0.0681550950, -0.0099424832, 0.0393528491, -0.0574257560, -0.0199940540, 0.0238044411, 0.0572223812, 0.0271483809, -0.0251150504, -0.0439145342, 0.0505035073, -0.0298188590, 0.0554056764, 0.0330559164, 0.0529939085, -0.0284872241, -0.0334340222, 0.0343836099, -0.0505081378, -0.0712285191, -0.0443303734, -0.0164072290, 0.0074489191, 0.0702950656, 0.0008412898, 0.0272505134, -0.0352220424, -0.0128487609, 0.0636333525, -0.0585964099, -0.0130655952, -0.0705182254, -0.0003624558, 0.0036642328, -0.0186305679, -0.0033331364, 0.0233809575, -0.0600884259, 0.0322152451, -0.0498645678, -0.0265921988, 0.0356964394, 0.0419774577, 0.0012046173, 0.0511238873, 0.0310954675, -0.0565797351, 0.0644825399, -0.0289825946, 0.0563897043, -0.0507910438, 0.0247450471, -0.0023095980, 0.0072120056, 0.0070347562, 0.0235937685, -0.0487195514, -0.0213350989, -0.0262280256, 0.0462663323, -0.0390303992, 0.0117744952, 0.0268473327, 0.0331201255, -0.0093621314, 0.0682007521, -0.0248730406, 0.0085897371, -0.0384500772, -0.0474915504, -0.0523632951, 0.0605969280, -0.0390590467, 0.0702686310, 0.0009416863, -0.0393459983, -0.0657748729, 0.0207726061, -0.0385124162, 0.0711892992, 0.0592383146, 0.0533660352, -0.0304162651, 0.0167752877, 0.0687488019, -0.0592639819, 0.0401382521, -0.0367295444, -0.0213589482, -0.0459485501, 0.0090606064, -0.0491774641, -0.0236224495, -0.0102255978, -0.0224269815, -0.0602495819, -0.0150719956, -0.0061036870, 0.0449165627, -0.0027641878, 0.0317641795, 0.0591346025, 0.0592494607, 0.0080836266, 0.0474357456, 0.0365907401, 0.0275888443, 0.0554763973, -0.0420807973, 0.0618045926, 0.0604898036, -0.0403467380, -0.0095797032, -0.0497219078, -0.0408718251, 0.0417827964, 0.0440292656, -0.0414561033, 0.0522242188, -0.0267933756, -0.0451184437, -0.0363802388, -0.0138140023, -0.0614679120, 0.0223188922, -0.0033898801, 0.0435786098, -0.0653976053, -0.0050149336, -0.0220675580, -0.0655334368, -0.0139239170, -0.0397128053, 0.0271527991, -0.0583888143, 0.0456500202, -0.0226222239, 0.0476326942, -0.0717878863, 0.0624022484, 0.0452088788, 0.0267508253, -0.0186789706, 0.0548889637, 0.0257095620, -0.0103938393, 0.0614564568, 0.0358828530, -0.0250315815, 0.0050054193, 0.0708839297, -0.0126146860, -0.0316467471, 0.0109690651, 0.0337120816, -0.0262375250, 0.0072422698, -0.0625154525, -0.0428451039, 0.0064513609, -0.0627994761, -0.0605039075, -0.0312773436, -0.0519538857, 0.0336234644, -0.0582709834, 0.0672953576, 0.0145861432, 0.0493102148, 0.0318596438, 0.0498820841, -0.0700833350, 0.0287381113, -0.0088587180, 0.0701744258, -0.0224464424, 0.0537749380, 0.0591990501, 0.0149045065, 0.0546441823, -0.0021973252, 0.0113032162, -0.0069119036, 0.0162008554, -0.0395811759, 0.0411181897, -0.0523123294, 0.0065455288, 0.0643828511, 0.0421658158, 0.0255274326, 0.0469234437, -0.0600363091, 0.0319907665, -0.0203240179, 0.0704559535, -0.0128201805, 0.0404286608, -0.0145920068, 0.0517617762, 0.0426420718, 0.0110219568, 0.0599240512, -0.0521777943, -0.0690355152, 0.0032624006, -0.0412032008, -0.0679064840, -0.0049694255, -0.0199441873, -0.0102782473, 0.0414987206, -0.0570563860, -0.0006036013, -0.0612550676, 0.0141330957, -0.0414858349, 0.0168585032, 0.0169813037, 0.0178773925, 0.0555302799, -0.0307124928, 0.0497660413, -0.0640744045, 0.0553222448, 0.0430645347, 0.0023316219, -0.0545410737, 0.0633377433, -0.0630711839, -0.0421870463, -0.0033174232, 0.0215807408, 0.0606008768, -0.0323323868, 0.0047830492, 0.0576982498, -0.0668087378, 0.0273647979, -0.0670629293, 0.0434616283, 0.0010036156, -0.0103843771, 0.0605555922, 0.0014599934, -0.0623208135, 0.0423481315, 0.0385662243, 0.0712886900, -0.0580848120, 0.0339879468, 0.0473619699, -0.0003796071, 0.0531566292, -0.0089802295, 0.0302313343, 0.0311166719, 0.0617214441, 0.0237577036, -0.0478681959, 0.0586367249, -0.0568836331, -0.0208812132, 0.0518135354, 0.0646802187, -0.0219061449, 0.0071615353, 0.0601419657, -0.0204867758, 0.0709675550, -0.0459223986, -0.0007985830, -0.0234943815, -0.0331727974, -0.0400687866, 0.0146764889, -0.0470930673, -0.0069831759, -0.0349830985, -0.0538686141, -0.0403289124, 0.0323714986, -0.0155812688, -0.0682185441, 0.0615719557, -0.0192282312, -0.0017933547, 0.0703133941, 0.0245065317, 0.0703430772, -0.0494983643, 0.0379809290, -0.0011957437, -0.0365753397, 0.0158552304, 0.0683575869, -0.0567799136, -0.0321403779, 0.0635523796, -0.0232618898, 0.0347152799, -0.0381263942, -0.0290706940, 0.0376701280, -0.0601290651, -0.0006693453, -0.0434517153, 0.0286615267, 0.0431014076, 0.0448023453, 0.0473630354, 0.0378493369, 0.0132067055, -0.0011182576, 0.0582841784, -0.0337418132, -0.0495999157, -0.0383525193, -0.0335163400, 0.0204081237, -0.0088038668, -0.0549272671, 0.0036801174, -0.0699230731, 0.0253556147, -0.0512698814, -0.0264402665, -0.0521601364, 0.0633291900, -0.0029176846, 0.0625369251, -0.0307635926, -0.0600748658, 0.0577013493, -0.0484254435, 0.0157095939, 0.0025162399, -0.0097127073, -0.0519860089, -0.0094019622, -0.0499366783, 0.0237354562, -0.0708296597, -0.0641214252, 0.0280648246, 0.0347892866, 0.0438852161, -0.0659837797, -0.0705331638, -0.0189319700, 0.0667469352, -0.0020684972, 0.0676704496, 0.0060355812, 0.0663153976, -0.0356233977, 0.0338861421, -0.0527085401, -0.0381948054, 0.0115326643, -0.0025724769, 0.0661538839, -0.0247109421, 0.0039834455, -0.0483408049, 0.0269761458, 0.0335808992, -0.0075256079, 0.0066841617, -0.0396185629, 0.0221190900, 0.0260209143, 0.0707610548, 0.0145818740, 0.0714444518, 0.0227569863, 0.0355855599, 0.0622516274, -0.0717703179, 0.0476588830, -0.0060995743, 0.0669196844, -0.0411238149, 0.0017052740, 0.0450603217, -0.0073352307, -0.0021632910, 0.0438375324, 0.0398426428, 0.0241601318, -0.0148307122, 0.0005562454, -0.0051113963, 0.0131992400, 0.0526932627, -0.0624091700, -0.0623737760, 0.0214882717, -0.0419913605, -0.0174234211, -0.0135930404, -0.0243428461, -0.0512108952, -0.0023403764, -0.0351889729, -0.0442385301, 0.0690719634, -0.0376786478, 0.0704797208, 0.0625838041, -0.0435629189, 0.0060198233, -0.0379214659, -0.0315714851, -0.0200087465, 0.0572426170, -0.0486718193, -0.0520143323, 0.0698868930, -0.0351987779, 0.0362141430, 0.0440661535, -0.0154355653, -0.0458664410, -0.0105522946, -0.0172224827, 0.0718488693, 0.0663282424, -0.0700584054, 0.0226171464, -0.0407257266, 0.0130185708, 0.0694039762, 0.0076196715, 0.0637564063, -0.0426084623, 0.0700869858, -0.0134440474, 0.0128573105, 0.0530671030, 0.0538171828, -0.0696663409, -0.0318004005, 0.0266684741, -0.0122366585, -0.0602043271, 0.0381279737, -0.0071387216, -0.0153660178, 0.0246426985, 0.0003799722, -0.0171625353, 0.0414474308, -0.0556537881, -0.0422929153, -0.0021389052, -0.0496208370, -0.0189334340, -0.0150023103, 0.0376010463, -0.0155608132, -0.0687128827, 0.0304735303, 0.0537732542, 0.0550883859, -0.0687049478, -0.0464017317, -0.0230198801, 0.0115012079, -0.0694593489, -0.0368539132, -0.0573409945, 0.0040800795, 0.0211079046, -0.0094812661, -0.0645950884, 0.0135175735, 0.0098202452, -0.0100366883, -0.0268925019, 0.0283563510, -0.0105567686, -0.0324298441, -0.0160713270, -0.0337425359, -0.0665886477, 0.0519630387, 0.0642825663, 0.0415439233, 0.0684584975, 0.0323224217, 0.0515338778, -0.0599869415, 0.0504141897, 0.0439098328, -0.0697842538, -0.0451239347, 0.0061643422, 0.0101425424, -0.0595050938, 0.0126374513, -0.0601868443, 0.0164017379, 0.0592580736, 0.0521968231, 0.0535968244, -0.0243748650, 0.0311449915, 0.0119140595, -0.0286658108, 0.0702010989, -0.0545804724, -0.0283193253, 0.0345665142, -0.0633076727, 0.0424039364, 0.0019159988, 0.0348831117, -0.0434914455, 0.0265223607, -0.0655837432, -0.0325846821, 0.0097734481, 0.0683769286, -0.0283715129, 0.0083335638, 0.0189501941, 0.0717744678, 0.0610467643, 0.0564142466, 0.0028354228, -0.0173014104, -0.0465890393, -0.0290970542, -0.0343600884, -0.0536061972, 0.0113708526, -0.0507721864, 0.0347535089, 0.0703599751, -0.0097736865, 0.0643440634, -0.0013160333, 0.0385782346, -0.0204649903, -0.0075947940, -0.0697927326, 0.0540994853, -0.0072212964, -0.0538159236, 0.0656600595, 0.0622461289, -0.0025826395, 0.0389623269, 0.0236793682, -0.0713996217, -0.0276873671, -0.0148064494, -0.0539934784, 0.0058511496, 0.0157381743, 0.0090225264, 0.0650076568, 0.0348277390, -0.0378590226, 0.0260449499, -0.0132655501, 0.0439831838, -0.0539586544, 0.0500131473, -0.0670859292, -0.0626032054, -0.0053628981, -0.0194659904, 0.0629035980, 0.0206805021, -0.0678262040, -0.0627751127, 0.0555102527, -0.0134228170, -0.0017146319, 0.0160865858, -0.0332891122, -0.0249888562, 0.0517070293, -0.0638008863, 0.0015804023, 0.0405178592, 0.0274908915, 0.0414965376, -0.0571796857, 0.0231176838, 0.0613712668, -0.0078397915, 0.0205642879, -0.0269740783, 0.0637511611, 0.0584831536, -0.0206889659, 0.0348740593, 0.0287584513, 0.0020086020, -0.0712411031, -0.0565974563, 0.0572620928, 0.0212602019, 0.0214170218, -0.0400759429, -0.0599051267, 0.0413507149, 0.0008808598, -0.0034641623, -0.0625869110, 0.0516715646, -0.0544522181, 0.0334626064, 0.0720563382, -0.0517808571, -0.0580576584, -0.0257604271, -0.0223152973, 0.0400937498, 0.0322544202, 0.0074040443, -0.0455018207, 0.0445466414, 0.0570177436, 0.0572374016, -0.0455983132, -0.0263646282, -0.0491146259, -0.0043051019, -0.0605865344, 0.0092312768, 0.0231473818, 0.0592481494, -0.0691407174, 0.0598174185, -0.0131969303, 0.0348181725, -0.0189447403, 0.0409121364, 0.0432671085, -0.0034392253, -0.0526324734, -0.0079402104, -0.0413499400, -0.0521718562, 0.0678042173, -0.0687287599, -0.0482368432, 0.0225233063, -0.0224347934, -0.0473965332, 0.0025939494, -0.0707511157, 0.0583440661, -0.0692354590, -0.0040018559, -0.0246328227, 0.0469377115, -0.0121879987, 0.0306434110, 0.0017362759, -0.0013836473, -0.0148144178, 0.0571886003, -0.0220622756, -0.0100818723, 0.0017580464, -0.0709460974, -0.0468023643, 0.0131105706, -0.0618524402, 0.0166671127, 0.0111488029, -0.0623778887, 0.0081863329, 0.0079417601, -0.0074723139, 0.0694986135, -0.0503030345, -0.0482804440, -0.0720639750, 0.0185125470, 0.0600441247, -0.0239018612, -0.0047139451, -0.0525490567, -0.0053601116, -0.0116147026, 0.0370756313, 0.0163160712, 0.0460164323, -0.0160772800, -0.0046777949, -0.0535738990, 0.0332865342, -0.0026659071, 0.0471903309, 0.0058333948, -0.0063926876, -0.0041035861, -0.0431986451, 0.0218465254, -0.0399095230, -0.0713729709, -0.0087016076, -0.0267662443, 0.0234704986, 0.0225188136, 0.0618179142, 0.0586637259, -0.0562349558, -0.0645322129, 0.0294787064, -0.0236089751, 0.0034784228, -0.0629785955, 0.0093024746, -0.0191196427, 0.0647168905, 0.0000098795, 0.0353667140, -0.0355574116, 0.0014804527, -0.0471348949, -0.0175777078, 0.0647948235, 0.0461278781, 0.0209775493, -0.0688992962, 0.0474334061, 0.0629339814, -0.0027579442, 0.0271321684, -0.0398661643, -0.0270726532, 0.0202930123, 0.0226423889, -0.0129027702, 0.0373259187, 0.0093477815, 0.0604451299, 0.0685127228, 0.0413823724, -0.0534430817, 0.0573758334, -0.0513420105, 0.0042975321, -0.0472035334, -0.0719565451, -0.0223316438, -0.0574431345, -0.0361683741, 0.0440745652, -0.0511730947, 0.0673474073, 0.0591682941, -0.0016274676, 0.0343553573, -0.0111936778, 0.0569087416, 0.0605535656, 0.0239036828, -0.0122705922, 0.0687311143, 0.0457651988, -0.0049128309, 0.0004761517, 0.0718482286, 0.0480492264, 0.0437395126, -0.0401500016, 0.0720241964, -0.0292009115, 0.0087925419, -0.0094953030, 0.0127970874, 0.0674759299, -0.0422548577, -0.0154465623, -0.0069245845, 0.0596047044, 0.0360993966, -0.0693148449, 0.0719142258, -0.0455295742, 0.0624837875, -0.0435973853, 0.0469056368, 0.0474280939, 0.0708860457, -0.0332791656, -0.0052727088, -0.0186349899, 0.0409242511, 0.0050608963, -0.0313507095, -0.0574278533, 0.0488673896, 0.0514970720, -0.0083423927, 0.0201125890, 0.0265641212, -0.0017228425, 0.0439298451, 0.0368966162, 0.0505468845, -0.0259021036, 0.0445691347, -0.0560926199, 0.0356596187, -0.0185777768, 0.0142712444, -0.0200787261, 0.0483107418, 0.0423261449, 0.0617562234, 0.0591657013, 0.0327324867, 0.0021416768, -0.0410984829, -0.0514634326, -0.0103991739, -0.0658987239, 0.0285753906, 0.0311401412, 0.0701133758, 0.0127123147, -0.0179037005, -0.0414514542, 0.0469071493, -0.0476043373, -0.0622572191, 0.0051354021, 0.0045541003, -0.0075496808, 0.0077591315, 0.0167612508, -0.0550102554, 0.0681051016, 0.0301294178, -0.0007337108, -0.0323398709, -0.0281985365, 0.0551897883, 0.0247047320, 0.0181370527, -0.0238472670, -0.0084770992, -0.0614756048, -0.0087277144, 0.0177563280, 0.0225456357, 0.0444064811, 0.0365286767, -0.0375084430, 0.0272105262, -0.0691170916, 0.0158874094, 0.0521741956, 0.0625291616, -0.0654324666, -0.0529128835, -0.0648540929, 0.0169408694, -0.0648785979, -0.0417917818, 0.0144500062, 0.0425975248, 0.0425344929, 0.0327967480, 0.0244343132, -0.0063082203, 0.0051264688, 0.0201177523, 0.0717342943, 0.0423042402, 0.0334634110, 0.0374415293, -0.0320482403, -0.0692246705, -0.0457842648, -0.0594921708, 0.0106170103, 0.0115042329, -0.0618668087, 0.0363868251, 0.0512208939, 0.0204445496, 0.0699180365, 0.0429224148, 0.0592278540, 0.0446176529, -0.0114965439, -0.0454892255, -0.0719365329, 0.0282709599, -0.0256415829, -0.0434970856, 0.0273199454, -0.0052483082, 0.0596723109, 0.0399276912, 0.0481205955, 0.0128910393, 0.0169615149, 0.0351843610, -0.0679343417, 0.0596974939, 0.0447473377, 0.0471903682, -0.0458746478, 0.0239188969, -0.0263038538, -0.0708284080, -0.0317758434, 0.0096620843, -0.0434360579, 0.0286149681, 0.0692143291, -0.0720775574, 0.0366228968, 0.0001695678, 0.0451894701, -0.0110606886, -0.0112909973, -0.0158336870, 0.0463140309, -0.0514313951, -0.0320729651, -0.0110375658, -0.0275795199, -0.0428312011, 0.0461689979, -0.0324367583, 0.0121408924, -0.0323895812, 0.0359654278, 0.0087841004, -0.0398152322, -0.0466603413, -0.0078934059, -0.0518363640, -0.0467920080, 0.0683013052, 0.0026533753, 0.0005754158, 0.0556549579, 0.0009339303, 0.0640978664, 0.0476749837, 0.0119386986, 0.0214973241, 0.0660919994, 0.0461272523, -0.0135220103, -0.0209110677, 0.0628635436, 0.0216788650, 0.0322739333, 0.0075170696, -0.0383065939, -0.0538937002, -0.0381984524, -0.0550730228, -0.0406756215, -0.0291235521, 0.0162916034, -0.0260345079, 0.0440833792, -0.0268364102, -0.0582732186, -0.0144660398, 0.0047621951, 0.0417951047, -0.0276001506, 0.0229478404, -0.0140603483, 0.0251762718, 0.0691181719, -0.0362763964, -0.0253086574, 0.0125394613, -0.0636118799, -0.0326834992, -0.0550285429, 0.0555215180, 0.0680573732, 0.0225480795, 0.0304094180, 0.0680015832, -0.0230443813, 0.0563562363, 0.0206364691, 0.0401069671, 0.0031163171, -0.0218342394, -0.0042587817, 0.0362928808, -0.0413123071, 0.0313275531, 0.0467086956, -0.0363483205, 0.0075465143, 0.0557643175, -0.0419988409, 0.0073646605, -0.0530451462, -0.0060298890, 0.0481839851, 0.0523422137, -0.0380481891, -0.0689468011, -0.0628110915, 0.0258589163, 0.0558466166, 0.0502215624, 0.0610693097, 0.0565427542, -0.0554202124, 0.0039068088, -0.0468361229, 0.0684618354, 0.0343852118, 0.0178926066, -0.0149740055, -0.0130419545, -0.0137755461, -0.0047267303, -0.0053974539, -0.0019141734, -0.0674617365, 0.0099679679, -0.0574315190, -0.0469064489, -0.0600842759, 0.0618218184, -0.0112689212, 0.0039393008, 0.0162413567, 0.0300911143, 0.0580892712, 0.0442054719, -0.0582182817, -0.0212223455, 0.0715131909, -0.0277691670, -0.0679498166, -0.0663149133, -0.0004365966, 0.0181379840, -0.0537739918, -0.0267410018, -0.0209306143, 0.0201466531, -0.0399697125, 0.0571312308, 0.0552512705, 0.0553885251, -0.0635363758, -0.0179795288, -0.0332438573, -0.0045411438, 0.0234062523, -0.0532530695, -0.0255309790, 0.0501247942, 0.0185922161, 0.0649938881, -0.0190067850, 0.0636769682, 0.0255820975, 0.0008239970, 0.0479508042, 0.0122007132, 0.0363894403, -0.0011510551, 0.0671276450, -0.0697164610, 0.0678785890, 0.0654391646, -0.0649007037, -0.0442389771, 0.0659247041, 0.0549711138, -0.0717162713, -0.0278799422, 0.0058571026, -0.0514303446, -0.0450579301, 0.0688707083, 0.0495469198, -0.0308895111, -0.0036621913, -0.0695333853, 0.0574538410, 0.0391114056, -0.0010855347, 0.0227233469, -0.0533922538, -0.0144036487, -0.0673602894, 0.0138296112, -0.0029573664, -0.0665426254, -0.0660185367, 0.0402283072, -0.0472109467, -0.0541896299, 0.0479349419, -0.0399055332, 0.0130201206, -0.0032300130, -0.0483691767, 0.0586680621, -0.0621322170, -0.0719111189, 0.0260288641, 0.0585178882, 0.0297842100, 0.0117161646, 0.0466918275, 0.0217064843, 0.0385098159, -0.0110967904, -0.0255076475, 0.0478764549, 0.0208850875, -0.0617379993, -0.0310620889, -0.0065344870, 0.0279306695, 0.0510025620, 0.0464915857, 0.0060911253, -0.0141991675, 0.0612399429, -0.0511329845, 0.0148086026, -0.0445384867, 0.0064121485, -0.0192634016, 0.0371675640, -0.0285221860, -0.0457949340, -0.0395837054, -0.0276332721, 0.0576583296, 0.0334362760, -0.0710111409, 0.0022740811, 0.0573626906, -0.0427491441, 0.0394044146, -0.0183785446, 0.0696688294, -0.0170220472, -0.0598552451, 0.0268988311, -0.0493041575, -0.0541923344, 0.0612052977, 0.0571975410, 0.0235467777, 0.0706747919, 0.0313998833, 0.0669290125, -0.0701329932, -0.0336273909, -0.0290376395, -0.0596274994, 0.0305697098, -0.0115963928, -0.0379651338, -0.0048961937, 0.0517153740, -0.0528045520, -0.0480325669, -0.0388263986, -0.0107936300, -0.0024083778, -0.0217924453, -0.0156834610, 0.0493690223, 0.0435879230, 0.0487814620, 0.0180804431, 0.0575297922, -0.0454307050, -0.0359772481, 0.0142224282, -0.0688987300, 0.0631694347, -0.0433355570, 0.0382666439, -0.0212463662, 0.0218520314, -0.0674731135, 0.0077144429, 0.0323040262, -0.0126059279, -0.0187259950, -0.0404058769, -0.0371858403, 0.0443408191, -0.0548279695, 0.0549773276, -0.0500777885, 0.0547066629, 0.0233672783, 0.0313520730, 0.0459462628, -0.0203301460, -0.0676264167, 0.0560916960, -0.0577473268, -0.0329316668, 0.0150725842, 0.0071672797, -0.0520846024, -0.0060009137, 0.0589768440, 0.0640659481, 0.0390746370, 0.0044483840, 0.0501217172, -0.0378918350, 0.0060366318, 0.0345161706, 0.0135684013, 0.0158876479, -0.0065167472, 0.0093202144, 0.0507574379, 0.0255053416, -0.0422336087, -0.0565580875, -0.0688786805, 0.0638960302, 0.0000348762, 0.0105020851, -0.0372710116, -0.0125914030, -0.0048770607, -0.0299995802, -0.0635322332, -0.0441517569, 0.0272889212, -0.0639254153, 0.0151667520, -0.0085709244, -0.0558003038, 0.0206601992, 0.0559998602, 0.0303078815, 0.0040018782, -0.0234251954, -0.0042615533, -0.0062613115, -0.0054301471, 0.0642179847, -0.0472002961, -0.0521717183, -0.0595827475, 0.0272385553, 0.0414986685, 0.0288532898, 0.0716388673, -0.0288449638, -0.0516052991, 0.0617483407, 0.0458073020, 0.0094999149, 0.0436800644, 0.0416871458, -0.0601779334, 0.0315287411, -0.0424858034, 0.0555581897, -0.0020384192, -0.0360364728, -0.0363280326, -0.0318341926, -0.0244815089, -0.0314241648, -0.0313592777, 0.0381775126, 0.0203434825, -0.0515419319, -0.0603120215, -0.0244221501, -0.0562165082, -0.0542484447, 0.0494457632, 0.0507541746, -0.0603384525, 0.0411840379, 0.0410986021, -0.0586150773, 0.0670564473, -0.0012070760, -0.0225724615, 0.0536036491, 0.0507047921, 0.0645053834, -0.0720775723, 0.0053150877, 0.0109576955, 0.0716420412, -0.0624988824, 0.0276287124, -0.0688090473, 0.0332122669, 0.0587622374, -0.0656843185, 0.0138086155, -0.0570114926, -0.0112460218, -0.0403065085, 0.0028644800, 0.0562004894, -0.0526596755, -0.0154983029, 0.0584172308, -0.0670485049, 0.0217808634, -0.0452646464, 0.0025212020, -0.0285032764, -0.0061408505, 0.0419337824, 0.0659280568, 0.0593833029, -0.0302621983, 0.0527016744, -0.0692079067, 0.0127354041, 0.0381523222, -0.0204211324, -0.0202309340, -0.0577492192, -0.0368380137, -0.0693321377, 0.0480569005, -0.0430558994, -0.0232446119, 0.0671367049, 0.0458811373, -0.0119846053, 0.0165834874, -0.0113832429, 0.0162984505, -0.0437889434, -0.0318938456, -0.0293188766, 0.0156934187, 0.0451200306, -0.0342510678, -0.0305227563, 0.0124634206, 0.0037564486, 0.0313065052, -0.0262763090, 0.0708951354, 0.0206603184, 0.0174673125, 0.0282154307, -0.0214027055, -0.0259961523, -0.0418813750, -0.0672776476, -0.0546288937, -0.0629227459, -0.0209718756, -0.0453702956, -0.0197798498, -0.0137543492, -0.0251803994, -0.0137368143, -0.0322793387, 0.0040820763, 0.0038921684, -0.0507859662, 0.0434975699, 0.0703991652, -0.0255364664, -0.0362267382, 0.0004653111, 0.0134468377, 0.0539151430, -0.0099284574, -0.0646613613, 0.0487316623, 0.0037836507, -0.0582023300, 0.0481908470, -0.0177715048, 0.0153123662, 0.0687105954, -0.0365413912, -0.0121850930, -0.0365343392, 0.0357538536, -0.0320903435, -0.0367753990, -0.0570591725, -0.0480129048, -0.0386609621, -0.0469726399, 0.0358248129, 0.0402386338, 0.0404762700, -0.0721134469, 0.0408290848, -0.0073474497, 0.0370427370, -0.0554562099, -0.0307047814, -0.0372698084, 0.0581651479, 0.0691362768, 0.0110518783, -0.0419564471, -0.0278555937, -0.0170953646, -0.0273224376, 0.0651861131, -0.0575138852, -0.0151555315, -0.0447544605, -0.0688225031, -0.0340293460, 0.0045341402, -0.0158594288, 0.0141801909, 0.0575927198, 0.0643021911, 0.0354758352, -0.0098128319, 0.0708737820, -0.0170578547, -0.0462119132, -0.0033428073, -0.0529956818, 0.0289586782, 0.0378159210, 0.0097191930, 0.0691471547, 0.0423835590, -0.0602377243, 0.0281495526, -0.0582110547, -0.0458407700, 0.0102133602, -0.0688043684, -0.0185819604, -0.0110233016, 0.0704709589, 0.0077000260, 0.0695505440, 0.0385347158, 0.0288709402, -0.0313221142, 0.0153269097, 0.0013326481, -0.0616076812, -0.0075079203, -0.0561668500, 0.0549833924, -0.0398122035, 0.0327713341, 0.0204002112, 0.0498721525, 0.0132751167, -0.0031871572, -0.0229731314, -0.0523954704, -0.0508448631, -0.0264465138, 0.0493296385, -0.0030075014, -0.0012598857, -0.0079818815, -0.0004482120, -0.0593047589, 0.0527691096, -0.0488439351, -0.0312514640, 0.0634603947, 0.0174424648, 0.0437639728, -0.0552500598, -0.0688079819, -0.0360998437, 0.0714853108, 0.0606417060, 0.0693136454, -0.0270642750, 0.0639720708, 0.0135512426, -0.0247988477, 0.0270378143, 0.0028057545, -0.0715716034, 0.0655092746, 0.0567388088, -0.0483087301, -0.0111831985, 0.0290863514, -0.0238447711, -0.0714034587, -0.0061044246, -0.0634300411, -0.0330837704, 0.0710977763, -0.0491053015, 0.0104751065, -0.0677772313, 0.0175822675, 0.0187959224, -0.0331523903, -0.0558176301, 0.0369844586, -0.0012523308, -0.0402304418, -0.0145790838, -0.0582493916, 0.0123917386, 0.0150069222, -0.0605081394, 0.0548842996, 0.0372095704, 0.0013136417, -0.0557435900, 0.0372261405, 0.0279657543, -0.0061307549, -0.0212816224, 0.0228632018, -0.0601041168, 0.0720613003, 0.0058837011, -0.0438447967, -0.0659624040, 0.0482097119, 0.0577919185, 0.0083158463, 0.0463407040, -0.0138180815, -0.0573234111, -0.0714355856, 0.0185979307, -0.0211085081, 0.0621612817, 0.0389193669, 0.0505549759, -0.0296154134, -0.0404501297, 0.0283885971, 0.0345913097, -0.0178428441, 0.0547538847, -0.0294512287, -0.0318271369, -0.0341310725, -0.0529078767, 0.0531852841, -0.0251296908, 0.0094694644, 0.0021749213, 0.0450197980, 0.0428299978, 0.0613744408, -0.0420312956, 0.0209466293, 0.0324437767, -0.0672706068, -0.0091912374, 0.0610820800, -0.0328872055, -0.0601610169, 0.0560224354, -0.0670667142, -0.0315786786, 0.0118383840, 0.0716430545, -0.0589179620, 0.0137044638, 0.0270650834, 0.0717945844, 0.0494561568, 0.0648317933, 0.0681612790, -0.0045721829, -0.0482287034, -0.0329284668, 0.0357498974, -0.0690067634, 0.0326329842, 0.0044263229, 0.0297922269, 0.0614018291, -0.0558235832, -0.0173417926, -0.0663943216, -0.0577100217, -0.0188356675, 0.0543980747, 0.0409907028, 0.0088462979, -0.0172740333, -0.0582096092, 0.0522035137, 0.0309029669, -0.0425108522, 0.0356125608, 0.0639476478, -0.0333437920, 0.0539170951, 0.0631588101, -0.0687312260, -0.0686531067, 0.0589186847, -0.0188405700, -0.0339507833, -0.0095703080, -0.0639807135, 0.0718808472, -0.0009826943, -0.0146579929, 0.0210136175, -0.0566838495, 0.0455125049, -0.0577382073, -0.0671027079, -0.0569935143, -0.0319348164, 0.0146642029, -0.0257468671, -0.0709098801, 0.0433064625, -0.0055920929, 0.0621433556, -0.0442380644, 0.0135344863, 0.0549290180, 0.0152945444, -0.0488345250, 0.0549177229, -0.0145735629, 0.0453151986, 0.0502846092, -0.0247905031, 0.0281803161, 0.0280689225, -0.0534998104, -0.0644863248, 0.0076311827, -0.0450849794, -0.0418333188, 0.0544287711, 0.0582281798, -0.0650069043, -0.0379505418, 0.0276642069, -0.0522890985, 0.0086626038, 0.0466107726, 0.0122672394, 0.0078806952, -0.0646378621, -0.0457060263, -0.0423251763, 0.0134159997, 0.0623616576, 0.0139917806, -0.0720979646, -0.0425898992, 0.0155232176, -0.0615721643, 0.0305986851, -0.0027664229, 0.0437201858, -0.0061403736, -0.0213229023, -0.0450677872, 0.0432106182, 0.0284942240, -0.0107576512, 0.0304304287, -0.0486266874, -0.0529024228, 0.0596460104, -0.0221457109, -0.0101655982, 0.0386627689, 0.0685610473, 0.0128710419, 0.0111625716, 0.0438130647, -0.0559947006, -0.0718935356, -0.0641000420, -0.0270804986, -0.0260327011, 0.0092753395, -0.0431235731, -0.0411019437, -0.0197676495, -0.0306906551, -0.0312080868, -0.0584892482, 0.0209518299, 0.0108703375, 0.0299704149, 0.0353164226, -0.0304705873, -0.0656948686, -0.0108774602, -0.0428560674, -0.0059739873, 0.0617759079, -0.0155304782, -0.0511583462, -0.0074760318, -0.0036026686, -0.0444186442, -0.0286110751, 0.0693221092, 0.0337375626, -0.0494528711, 0.0040065050, -0.0307604447, 0.0570990592, 0.0620569885, -0.0224743187, -0.0689091235, 0.0507151261, -0.0356529057, 0.0305105373, 0.0020221099, 0.0477262810, -0.0686364174, -0.0065264106, 0.0380308777, 0.0005935356, 0.0632043481, -0.0525307469, -0.0223627165, 0.0313082114, -0.0115184151, 0.0347755551, -0.0604822449, -0.0688005835, -0.0383985788, 0.0417946726, 0.0690588951, -0.0345634855, 0.0407911986, 0.0125125796, -0.0308162123, -0.0300976560, 0.0273466632, 0.0043393970, -0.0543863699, -0.0301384851, 0.0268057808, 0.0370844454, 0.0481444597, 0.0617529154, -0.0595652126, -0.0708582923, 0.0186774880, -0.0717585683, -0.0259882398, 0.0602797121, -0.0156891905, 0.0430935845, 0.0085972026, 0.0382868275, 0.0118924826, -0.0235001259, 0.0230558962, -0.0185991153, -0.0525226071, -0.0088301450, 0.0562518388, -0.0683209896, -0.0284646340, 0.0412995741, 0.0607689470, 0.0631532222, 0.0436713398, -0.0627118647, 0.0448828042, 0.0021460503, -0.0702794343, 0.0123813152, -0.0377261378, 0.0511607230, 0.0175896883, -0.0657537803, 0.0427502617, -0.0637299865, 0.0625098646, -0.0642792434, -0.0619518086, -0.0072778314, 0.0389221907, -0.0599338785, -0.0138977990, -0.0617949367, -0.0094929487, -0.0671052411, 0.0715212524, -0.0093491003, -0.0335762352, 0.0351621807, 0.0096642375, -0.0292585678, -0.0090627894, -0.0671902895, -0.0584409311, -0.0362168476, 0.0007250905, 0.0239201710, -0.0485822111, 0.0514390916, -0.0717564002, 0.0622545630, -0.0132929087, -0.0356943905, -0.0329434015, -0.0489143953, -0.0026701018, 0.0343114957, 0.0374325588, 0.0478131846, -0.0470897481, -0.0482549593, 0.0625759810, 0.0597082376, -0.0478023291, 0.0340114906, 0.0233745053, 0.0401253924, 0.0288992971, 0.0151689574, 0.0556391925, -0.0114838816, 0.0352062955, 0.0408595949, -0.0180615708, -0.0119635761, 0.0661966950, 0.0450662598, -0.0505305566, -0.0547804125, 0.0076874644, -0.0372981131, -0.0548698679, 0.0681679249, -0.0108269230, 0.0096317008, 0.0489158407, -0.0120362751, 0.0531828403, -0.0555143319, 0.0376834348, -0.0337582082, -0.0358103812, 0.0538118631, 0.0207623318, -0.0238483176, -0.0442298204, -0.0599528737, -0.0269868970, -0.0322248973, -0.0311300196, 0.0587974787, -0.0548804849, -0.0648613721, 0.0123076886, 0.0269139260, -0.0251095779, -0.0101388432, 0.0415356681, -0.0562235452, 0.0392563194, -0.0706521273, -0.0489044338, -0.0626862273, 0.0620492995, 0.0125572979, 0.0134290084, 0.0060564354, -0.0482696556, -0.0415952839, -0.0044075325, -0.0551137514, -0.0590485409, -0.0597198829, -0.0057743266, -0.0030833855, -0.0708111972, -0.0272333436, 0.0540422052, -0.0580529794, 0.0415847525, 0.0263372734, 0.0124354288, -0.0360685103, 0.0019597709, 0.0387091190, -0.0137069970, -0.0696907565, 0.0170950741, 0.0479705036, -0.0210307203, -0.0464085788, -0.0153038017, 0.0383581445, -0.0256077535, 0.0584801286, 0.0059262216, 0.0426988006, -0.0270643942, -0.0668720379, -0.0442400947, 0.0683565885, 0.0075779110, -0.0629609972, 0.0057074055, -0.0658291280, 0.0711843371, 0.0331043527, 0.0122421682, -0.0491799936, -0.0512583703, -0.0042488202, 0.0069045052, 0.0688140243, 0.0379907712, 0.0109318495, 0.0179738849, -0.0432741977, 0.0635446906, -0.0626945198, -0.0032797232, -0.0634384006, -0.0316496864, -0.0440107509, -0.0428326651, 0.0611588955, 0.0281277671, 0.0499368832, 0.0526080057, 0.0709942877, -0.0417158157, -0.0688972473, -0.0050318167, -0.0054084435, 0.0466607213, 0.0043611825, 0.0228885263, -0.0660880655, -0.0426534079, 0.0645758659, 0.0653511882, -0.0188242942, 0.0656962991, 0.0323347598, 0.0367799103, -0.0058851317, -0.0099928789, -0.0316168740, 0.0422760397, 0.0058288351, 0.0302400738, 0.0379866585, 0.0296914130, 0.0365464687, -0.0195370503, 0.0029593110, -0.0173027515, -0.0388669893, 0.0177417397, 0.0239509195, 0.0377832651, -0.0218246393, 0.0041285530, -0.0516459793, 0.0432865545, 0.0707423836, 0.0237703174, -0.0688095093, -0.0430978313, 0.0586763322, 0.0606571883, -0.0079981610, -0.0105783455, -0.0051567182, 0.0643955320, -0.0407385789, -0.0541766211, 0.0163728818, -0.0455281287, 0.0623705238, -0.0265081972, 0.0046009347, -0.0702717453, -0.0575022362, -0.0012713447, -0.0631950051, -0.0668180436, 0.0313429683, 0.0085194260, 0.0706265420, 0.0305364355, 0.0368159860, 0.0268840566, 0.0543672144, -0.0126741491, -0.0435394682, 0.0412821621, 0.0294531733, -0.0663784593, 0.0164319202, -0.0038397238, -0.0023168921, 0.0719350278, -0.0436465256, 0.0399491489, 0.0326386392, 0.0052675456, 0.0115836784, -0.0063342676, 0.0150642172, -0.0501727685, -0.0397307314, 0.0042852461, -0.0608450398, 0.0470579490, -0.0251248740, -0.0434616432, -0.0483898446, 0.0068770796, 0.0007546395, 0.0644381642, -0.0351454578, -0.0439714193, 0.0155456886, 0.0250384435, 0.0057241991, 0.0475814492, 0.0662619174, 0.0156147704, -0.0617229268, 0.0368436575, -0.0600345507, 0.0436826944, 0.0297211483, -0.0394431278, 0.0249771401, -0.0116500966, -0.0485091507, 0.0321120396, 0.0279784352, -0.0621741824, -0.0507347099, -0.0288117528, 0.0460732654, 0.0710516274, 0.0444831029, -0.0052081794, 0.0019330308, -0.0214754529, -0.0120429695, 0.0390565023, -0.0040172264, 0.0270301178, -0.0559503585, -0.0463300645, 0.0059087202, 0.0592869073, 0.0409483910, 0.0034597591, -0.0473640673, 0.0304889604, -0.0376381092, 0.0225320309, -0.0189455487, 0.0197422877, -0.0412688963, 0.0185387582, -0.0599556416, -0.0123390369, -0.0379147530, -0.0469280742, 0.0567343533, -0.0600912273, 0.0649272501, -0.0201605260, -0.0299102589, 0.0257732943, 0.0454005748, 0.0026025474, 0.0033299476, 0.0229205340, -0.0254566148, 0.0579743832, 0.0662894845, 0.0700782388, -0.0304747000, -0.0163416378, -0.0700201690, 0.0362915397, -0.0110577494, 0.0523127764, -0.0112440921, -0.0052644312, -0.0647670627, 0.0261936635, 0.0352416560, 0.0093313083, 0.0626495183, -0.0479303300, 0.0031118393, -0.0244532414, 0.0439184010, -0.0278053172, -0.0523521602, 0.0355666876, -0.0047482178, 0.0066734925, -0.0694222972, -0.0589211956, -0.0470011495, 0.0488039851, 0.0153233632, 0.0632293522, 0.0076943487, 0.0061927810, -0.0555362552, 0.0535775721, 0.0043984130, 0.0011940747, -0.0408203788, 0.0718621016, -0.0596024841, -0.0224324018, -0.0658144355, 0.0126956403, 0.0694207996, 0.0215493217, 0.0211763903, 0.0020668805, -0.0035966635, 0.0618807375, -0.0064921901, -0.0510534421, 0.0287514627, 0.0603221953, 0.0435314476, 0.0626357496, 0.0237232745, -0.0523206592, -0.0360003561, 0.0376453847, 0.0267066061, 0.0175565630, 0.0100069195, 0.0645123720, -0.0141570307, -0.0664965659, 0.0121158063, 0.0218505710, -0.0143527165, 0.0178256184, 0.0124091208, 0.0422037914, -0.0347447023, -0.0609601513, -0.0320079774, -0.0239651315, 0.0219795108, -0.0148598924, -0.0169446357, 0.0112254918, -0.0156432651, 0.0594100505, 0.0216220021, -0.0447000712, 0.0530907661, -0.0162648447, -0.0413636863, 0.0584328026, 0.0532626063, 0.0204697549, -0.0341495350, -0.0627761781, 0.0409351587, -0.0506154187, 0.0028868020, 0.0431763604, -0.0090142637, 0.0201153383, 0.0136517659, -0.0065369084, -0.0190491974, -0.0069287494, -0.0527339354, -0.0645414889, -0.0276090801, 0.0521778092, 0.0603532642, -0.0557439327, -0.0525517911, -0.0316178203, 0.0499121770, -0.0428392515, -0.0091551691, 0.0404290855, -0.0315315314, 0.0051673874, -0.0386687219, -0.0180294104, -0.0544555038, 0.0251799151, 0.0462894440, -0.0273047164, 0.0042004734, 0.0676255524, 0.0038572550, -0.0541054383, 0.0173236728, 0.0516782552, 0.0478148535, -0.0507556349, -0.0084847435, 0.0629423559, -0.0704340488, -0.0025752634, -0.0035133362, -0.0173123516, 0.0250123814, 0.0516994372, -0.0270096101, -0.0468170755, 0.0597625673, 0.0163438916, 0.0477524325, -0.0542274863, -0.0120520890, 0.0510441512, -0.0470994674, 0.0689667761, -0.0163689628, 0.0692097396, 0.0619246513, -0.0155976005, 0.0550935864, 0.0490775779, 0.0254855528, -0.0570022538, -0.0179008469, -0.0553095080, -0.0576641336, -0.0147331692, -0.0490463339, -0.0193786658, -0.0655908361, 0.0038772523, -0.0628492907, -0.0649892315, 0.0333293900, -0.0570200272, -0.0589958206, 0.0311335623, -0.0634210780, 0.0421493649, -0.0072819814, 0.0351135880, 0.0107675120, -0.0427970663, 0.0622710139, 0.0549266040, -0.0381447189, -0.0284871198, 0.0460250974, 0.0708886832, 0.0137098208, -0.0114819035, 0.0440333411, -0.0472631007, 0.0050686002, -0.0433251970, 0.0692226440, 0.0241889656, 0.0260462090, 0.0463328734, -0.0452684686, -0.0420523360, -0.0671841949, -0.0630788580, 0.0541507602, -0.0698621497, 0.0070413351, -0.0658790395, -0.0131932497, -0.0430923104, 0.0509006828, -0.0233680531, 0.0335796773, 0.0281070322, -0.0720490068, 0.0483849198, 0.0477006957, 0.0160742477, -0.0454645157, 0.0484385565, 0.0267817825, 0.0326455235, 0.0435942858, 0.0408069193, -0.0530808493, -0.0145271234, 0.0563179255, 0.0407842770, 0.0043439046, -0.0695692226, 0.0444661379, 0.0563034117, 0.0454509035, -0.0416971967, -0.0526924506, -0.0591800474, -0.0670238659, 0.0221130848, 0.0584917217, -0.0293072462, -0.0028407052, 0.0714077652, -0.0589177534, 0.0061211884, 0.0209265500, -0.0063064620, 0.0294434726, 0.0457079336, 0.0219789818, -0.0512948111, 0.0157499760, -0.0243789963, -0.0228073299, -0.0340668932, -0.0487123057, -0.0518260598, -0.0142045207, 0.0576496571, 0.0658182204, 0.0317065865, -0.0461399034, 0.0335430801, 0.0007183477, -0.0403076448, -0.0295362100, -0.0101047903, -0.0147099569, 0.0695815086, -0.0151414238, 0.0411938950, 0.0565130711, -0.0501145571, 0.0472844020, 0.0209696889, 0.0269060135, 0.0277726054, 0.0338777453, -0.0640036315, 0.0266406685, 0.0403578356, 0.0247176662, -0.0217035413, 0.0335524902, -0.0020136088, 0.0204589888, -0.0676293820, 0.0637108684, 0.0302079841, 0.0064327270, 0.0004203022, -0.0582350753, -0.0274191722, -0.0661216155, 0.0605552495, 0.0109093264, -0.0593743250, -0.0532140471, -0.0454431809, -0.0162007175, -0.0276473798, 0.0003576726, -0.0106438324, -0.0284026191, 0.0266324431, 0.0059735700, 0.0385323092, 0.0084684491, -0.0122617818, -0.0475242436, 0.0445566773, -0.0028317720, 0.0349583700, 0.0118296742, -0.0592280030, 0.0453551188, -0.0500666574, 0.0309193432, 0.0209084004, -0.0569452830, -0.0352682248, 0.0174473226, 0.0589112043, -0.0698894039, 0.0364640355, -0.0503580458, 0.0439462438, 0.0137972757, 0.0103644654, -0.0716499090, -0.0493905991, -0.0031978413, -0.0478521585, 0.0007587671, 0.0713096559, -0.0535635948, -0.0589536652, -0.0300626904, -0.0645163134, -0.0397438593, -0.0063337162, 0.0165604874, -0.0143862367, 0.0660704970, -0.0562082492, 0.0040457174, -0.0313560963, -0.0419781096, 0.0112787634, -0.0528453663, 0.0143772513, -0.0077678561, 0.0412905738, -0.0058906227, 0.0324060619, 0.0105585083, 0.0457684845, 0.0343283117, 0.0505796969, -0.0072578192, -0.0135727189, 0.0189409852, -0.0115733184, 0.0570336580, -0.0137124173, 0.0391239002, 0.0714007914, -0.0671227351, 0.0167918801, 0.0070491061, -0.0592770912, -0.0023465902, -0.0048642457, 0.0670442283, 0.0649162382, -0.0060828701, 0.0629407912, -0.0319454819, -0.0046663508, -0.0271295384, -0.0637808964, 0.0626437068, 0.0603798181, -0.0439088047, -0.0573469847, -0.0440175645, 0.0417096242, -0.0579267181, 0.0705497265, 0.0141287744, -0.0413099676, -0.0548549332, -0.0066691935, 0.0111963302, -0.0067051202, 0.0013617650, 0.0162032619, -0.0429614857, 0.0107781067, 0.0243234187, -0.0074985027, -0.0426523238, 0.0683380961, -0.0577713437, -0.0640477836, -0.0220026225, 0.0374961719, -0.0593211763, -0.0302577950, 0.0536924750, -0.0102072544, -0.0331858546, -0.0107420608, -0.0259037912, -0.0374343358, -0.0455049686, -0.0051646829, -0.0456754155, 0.0469508022, -0.0493017286, -0.0459329635, -0.0387057140, -0.0415876433, -0.0243609101, 0.0294614136, 0.0037946254, 0.0613583177, 0.0577872396, 0.0579271019, 0.0549233109, -0.0305317566, -0.0687491372, -0.0392937772, -0.0341687202, -0.0444997400, -0.0369191766, 0.0203731954, -0.0676722080, 0.0560553670, -0.0303732678, -0.0481358916, 0.0052144304, -0.0110637546, -0.0546818376, 0.0231316388, 0.0562342852, -0.0498372428, 0.0469106808, -0.0584659316, -0.0130362399, 0.0017721727, 0.0130004883, -0.0608543307, -0.0225937292, -0.0060754865, 0.0288220271, 0.0164755359, 0.0644882619, 0.0359873623, -0.0042088702, -0.0254802220, 0.0690028220, 0.0674431324, 0.0706981719, 0.0197186992, -0.0553215370, 0.0360053107, 0.0543330610, -0.0567072183, -0.0661918521, -0.0552365705, -0.0005079508, -0.0617110729, 0.0004287139, -0.0134842768, 0.0203252584, -0.0423798934, 0.0220360532, -0.0089059025, -0.0034984201, -0.0294222198, -0.0277346335, 0.0306919143, 0.0156369656, -0.0579305552, 0.0378346443, 0.0072989836, -0.0325515270, 0.0333904400, 0.0338129923, -0.0518078208, -0.0637105554, 0.0264502466, 0.0572192967, 0.0612268150, -0.0128662251, 0.0067343041, 0.0250795707, -0.0250545703, -0.0307249129, -0.0503992885, -0.0710410774, -0.0232972987, 0.0122766644, -0.0140431076, -0.0230678879, 0.0084313303, -0.0295117944, 0.0689519197, -0.0137361288, -0.0114856176, -0.0062039346, 0.0059931874, 0.0098860785, -0.0686221197, 0.0079307631, 0.0177867338, -0.0609903820, 0.0098893493, -0.0686405599, -0.0682824999, -0.0570574179, -0.0616664402, -0.0410307422, -0.0050104782, 0.0066685230, -0.0388473049, 0.0165810436, 0.0032671839, -0.0591610372, 0.0039917231, 0.0307562128, -0.0584046431, -0.0338329040, 0.0525682047, -0.0273289755, -0.0049550235, 0.0142305344, -0.0097561702, 0.0428527296, 0.0240183324, 0.0650960207, -0.0225080065, -0.0358291008, -0.0646863654, -0.0412973911, 0.0080102608, -0.0274738185, -0.0428548455, -0.0565185137, 0.0430774391, 0.0694736242, 0.0575760156, -0.0311744995, 0.0586594641, 0.0116132200, 0.0519758761, -0.0490411893, 0.0494328588, 0.0190945044, 0.0013007522, -0.0345176831, -0.0145485960, 0.0574248135, -0.0346161202, -0.0524996035, 0.0337646604, -0.0559569821, 0.0048858896, 0.0042599216, -0.0498255789, -0.0532047041, 0.0536921024, 0.0601033121, 0.0211742520, -0.0675452575, -0.0614192709, 0.0490146428, 0.0546250045, -0.0427865013, -0.0570804924, -0.0372782201, 0.0659006685, 0.0076803938, -0.0295088515, 0.0421763808, 0.0159014091, 0.0543929636, -0.0387921408, -0.0246592537, 0.0388751477, 0.0438716337, 0.0578100979, -0.0500300601, 0.0141091943, -0.0641477033, 0.0188225880, -0.0551671609, 0.0161749050, 0.0127873346, 0.0037181452, -0.0276076347, -0.0257101320, -0.0185692944, -0.0225109830, 0.0207619891, -0.0718850493, 0.0030347258, -0.0020968392, -0.0597131364, 0.0504897982, 0.0530392677, 0.0090211183, 0.0096362755, -0.0330010615, -0.0457709134, -0.0492081419, -0.0693127289, -0.0249241628, -0.0250315107, 0.0268079862, 0.0634576976, -0.0591162145, -0.0141418539, -0.0373298414, -0.0692942664, 0.0713911057, -0.0669840351, 0.0668530762, -0.0308489539, 0.0348169506, 0.0711053908, 0.0470835865, -0.0429854058, -0.0150648542, -0.0461152643, 0.0698968917, 0.0515740737, 0.0354105011, 0.0479982570, 0.0389470831, -0.0602611937, -0.0136919059, 0.0147549659, -0.0419444703, 0.0206656530, -0.0125236958, -0.0211502537, -0.0299052894, -0.0467874631, 0.0295329913, 0.0608994663, 0.0115088299, -0.0399755798, 0.0429049656, 0.0671108067, 0.0676674545, 0.0088459402, 0.0387555584, 0.0340706632, 0.0444914475, 0.0378811508, -0.0380939059, 0.0216136202, -0.0067835599, -0.0652619526, -0.0015414506, -0.0163172036, 0.0563506484, 0.0157159939, -0.0628045201, -0.0551841259, -0.0128836185, 0.0532936305, -0.0189071260, 0.0194191337, 0.0207698718, -0.0000058338, -0.0191070624, 0.0028432533, -0.0607238561, -0.0134167261, 0.0326915532, -0.0031708628, -0.0446303003, -0.0149096213, 0.0390041396, 0.0064726099, 0.0401899889, -0.0300768018, -0.0308504179, 0.0509052426, 0.0498940423, -0.0356208682, -0.0665038601, 0.0614454448, -0.0076843724, 0.0656469613, 0.0623413622, -0.0300213434, -0.0507458970, -0.0050388053, -0.0370124690, -0.0270361416, 0.0128123686, 0.0228121802, -0.0469821207, -0.0011517406, -0.0503634997, -0.0367372856, 0.0406618416, -0.0048405826, 0.0608155727, 0.0439819619, -0.0687290877, 0.0586986095, -0.0660478398, -0.0099940673, 0.0084712878, -0.0202811062, -0.0641750619, 0.0032982752, 0.0572240651, 0.0258235931, 0.0091013983, -0.0590683632, -0.0490755662, -0.0403083339, 0.0305828229, -0.0423230454, -0.0247260146, 0.0671817064, -0.0715663880, 0.0636977702, 0.0526579022, 0.0475942567, -0.0484490171, -0.0062275380, -0.0465616658, 0.0626689792, 0.0684471428, 0.0364169031, 0.0584627092, 0.0145034641, 0.0487043411, -0.0252906941, -0.0424820147, 0.0520932600, -0.0557839572, -0.0490157418, -0.0715206191, -0.0271044858, -0.0027971566, 0.0396578833, -0.0064897835, -0.0028820857, 0.0356597528, -0.0462102927, 0.0274016410, 0.0702897608, 0.0651533008, -0.0263356864, 0.0318633914, -0.0460797995, 0.0511410534, 0.0223612338, -0.0694329143, 0.0087624490, -0.0285745487, -0.0243890435, 0.0542610586, 0.0463465825, -0.0540205240, -0.0267804377, -0.0473445058, -0.0504242033, -0.0489399992, -0.0359583907, -0.0710071772, -0.0412220284, 0.0257368162, -0.0196913928, 0.0229767933, -0.0346178561, 0.0145509541, 0.0021091774, 0.0508464798, -0.0157373138, -0.0089848787, 0.0669193864, 0.0011242330, -0.0613023005, -0.0000654906, 0.0071897060, 0.0008790940, -0.0114932768, -0.0677586347, -0.0352729224, -0.0337498300, -0.0309373438, -0.0394981727, 0.0639297366, 0.0127876624, -0.0203586370, -0.0702227205, 0.0513458103, -0.0399729796, 0.0047926307, -0.0088253245, 0.0630222559, 0.0201301724, -0.0591592640, -0.0705493838, 0.0320715159, 0.0357823521, 0.0134306997, 0.0281498730, -0.0228829011, -0.0406772904, -0.0385735855, 0.0207928941, -0.0238246396, 0.0108311027, -0.0663578287, 0.0209420696, 0.0025028363, 0.0630186200, -0.0436108932, 0.0050593987, -0.0553063415, 0.0498258844, 0.0715648085, -0.0205613300, -0.0001767278, -0.0506300256, 0.0476572141, 0.0051939860, -0.0229927301, -0.0542422831, -0.0388652347, 0.0672675073, -0.0693784729, 0.0233214051, 0.0280319452, 0.0001849160, -0.0491598286, -0.0398725122, -0.0245796219, 0.0103790089, 0.0686475337, 0.0283325762, 0.0224506557, -0.0314560980, 0.0599291772, -0.0168288872, -0.0283596553, -0.0403156132, 0.0306862891, 0.0432371497, 0.0061678663, -0.0047390833, -0.0666447803, -0.0322213694, -0.0322827622, 0.0484905317, 0.0646442473, 0.0099285990, -0.0125585385, 0.0458448827, -0.0004864931, 0.0691216141, 0.0635991096, -0.0223961845, -0.0500490703, 0.0622593760, 0.0594249666, 0.0411571041, 0.0295061171, -0.0301310867, -0.0578063428, -0.0162161328, -0.0596457385, 0.0246443003, 0.0015614629, 0.0301906541, -0.0316805206, 0.0234135315, 0.0190368295, -0.0237286463, 0.0037889630, -0.0179828852, -0.0680692792, -0.0250384286, -0.0639148504, -0.0522759035, 0.0453360900, -0.0258402973, -0.0716739818, 0.0571826994, -0.0008359179, -0.0213769302, 0.0314181745, -0.0214830749, 0.0075706169, -0.0584888160, -0.0412499160, 0.0123342872, -0.0580814891, -0.0460076369, 0.0316419601, 0.0531210750, 0.0309413895, -0.0517472364, 0.0411364213, -0.0718034729, 0.0078460574, 0.0191366076, 0.0654276609, -0.0568114184, 0.0268069357, 0.0134822130, -0.0272017531, 0.0164560452, -0.0260332152, -0.0607869327, 0.0090615824, 0.0219450817, 0.0333181769, 0.0629131049, 0.0422362015, -0.0070333630, -0.0455328971, 0.0558523685, -0.0318098441, 0.0541293621, 0.0113247707, -0.0347993486, 0.0377634093, 0.0643640310, -0.0193962157, 0.0252738968, 0.0281232223, 0.0070971996, -0.0386597402, -0.0475147441, -0.0534780100, 0.0205869004, 0.0408916101, -0.0365198329, -0.0547601953, -0.0373853296, -0.0379000083, -0.0597574599, -0.0439153090, 0.0237886086, -0.0215842314, 0.0504313633, 0.0319309980, -0.0009499639, -0.0629247576, 0.0657903254, -0.0700551197, -0.0030212328, -0.0466196164, -0.0002886355, -0.0469816402, 0.0663511306, 0.0491203740, 0.0487813726, 0.0401245728, 0.0228851214, 0.0562651306, 0.0222930312, -0.0625054911, -0.0528265908, -0.0205735974, 0.0144280642, -0.0005805120, -0.0311479680, 0.0023387074, -0.0152815692, -0.0111155286, -0.0397203565, 0.0360601619, 0.0249980316, 0.0402661785, 0.0487978905, 0.0585314929, 0.0649067909, -0.0373735949, 0.0030258819, -0.0047008842, -0.0711628422, -0.0099001527, -0.0577885509, 0.0485846028, 0.0333622545, 0.0319731310, 0.0294471830, 0.0585057288, -0.0521647669, 0.0081427842, 0.0148474723, 0.0292745158, 0.0143581703, -0.0440034866, -0.0260746479, -0.0099759139, -0.0467426777, -0.0597115196, 0.0082016960, -0.0309576653, -0.0579527169, 0.0126271099, -0.0153364055, -0.0574805923, 0.0202570707, 0.0577185452, 0.0502784476, 0.0666955709, 0.0362939686, -0.0604439080, 0.0091636181, -0.0653783232, 0.0123187527, -0.0385062732, 0.0130148381, -0.0575555265, -0.0420534909, -0.0544089265, -0.0132091828, -0.0561308563, -0.0148166381, 0.0613884479, 0.0077160597, -0.0268247426, -0.0152881257, -0.0532575101, -0.0513623804, 0.0157096162, -0.0188881978, 0.0547403246, -0.0593644306, -0.0189411268, -0.0054733157, -0.0240986533, -0.0444773212, -0.0067359507, -0.0231491700, -0.0447454602, -0.0531848446, -0.0161281414, 0.0442919880, -0.0284780525, -0.0621447414, 0.0519351289, -0.0203322433, 0.0055072084, 0.0437147990, -0.0138669312, -0.0210874490, -0.0100374110, -0.0453661308, -0.0071469769, 0.0054556578, -0.0649194568, -0.0510344654, -0.0027982369, -0.0197913796, -0.0407779999, -0.0194407292, -0.0549850464, -0.0558736548, -0.0300085098, -0.0198745355, -0.0330462269, -0.0422497615, -0.0403325073, -0.0491974428, 0.0627259463, -0.0048581362, 0.0279434994, -0.0521341935, -0.0078754127, -0.0459505804, 0.0333928466, 0.0366582423, 0.0229825750, 0.0156715885, 0.0549972951, -0.0017994568, -0.0020862222, 0.0076974481, -0.0637834594, -0.0338897184, -0.0332212150, -0.0590324700, 0.0426026806, 0.0614770502, 0.0658505261, 0.0148443058, -0.0087571889, 0.0339242667, 0.0081923008, -0.0679938272, -0.0328988694, 0.0444908738, 0.0462867394, -0.0179294236, 0.0229456872, 0.0008171648, 0.0099722296, -0.0419733599, 0.0588977039, -0.0187806748, -0.0291435793, 0.0632142425, -0.0475499630, 0.0391524956, -0.0287308842, -0.0281242393, 0.0350690782, 0.0603732914, -0.0249212198, 0.0259066969, 0.0198730901, -0.0390201770, 0.0154526383, 0.0267727971, -0.0153132975, 0.0013193488, -0.0115420893, -0.0527839214, -0.0668788329, 0.0354430079, -0.0268973559, -0.0121371038, 0.0702047646, 0.0105297714, -0.0569478832, -0.0098242909, -0.0618893467, -0.0062721372, 0.0051008686, -0.0607682653, -0.0134173110, 0.0465596020, -0.0085908696, 0.0666235685, -0.0323996618, -0.0590532534, -0.0595896468, -0.0580804944, 0.0046923012, -0.0711838752, 0.0665142685, -0.0715680718, -0.0569629222, -0.0130992159, 0.0393721834, -0.0501130447, -0.0404425785, -0.0645145774, -0.0099256895, 0.0297877192, 0.0076714605, -0.0064172894, 0.0478975996, -0.0352669172, 0.0434865057, 0.0225788951, 0.0586650819, -0.0190569423, 0.0413509533, 0.0676188469, 0.0015443787, -0.0614862703, 0.0327585191, 0.0695597380, 0.0148620456, -0.0066429526, 0.0204404369, -0.0013773367, 0.0668300092, 0.0656583607, -0.0188258961, 0.0224163830, -0.0244263969, -0.0261955075, 0.0477709472, 0.0417017415, 0.0366177857, -0.0101090930, -0.0684053525, -0.0265105218, -0.0118998438, -0.0120145939, -0.0306798145, -0.0282491744, 0.0505823791, -0.0421098918, 0.0650603920, -0.0394011289, -0.0414483771, -0.0393373780, -0.0208232962, -0.0642168745, 0.0366753116, -0.0140549280, -0.0324244723, -0.0564460605, -0.0540204048, 0.0679454952, -0.0161216371, -0.0422914028, 0.0620064884, -0.0324256085, -0.0157658421, 0.0219443291, 0.0352430195, -0.0085117742, 0.0114274472, 0.0703183264, 0.0148992762, 0.0284521580, -0.0245817564, -0.0159767754, 0.0536125302, -0.0373102427, 0.0467061996, -0.0278474391, 0.0228880793, 0.0487974808, 0.0344054624, -0.0212506354, 0.0654163659, -0.0313771218, -0.0667085275, -0.0144311115, 0.0472319052, -0.0436452031, -0.0626893789, 0.0278516412, -0.0054633841, -0.0174796507, 0.0114578828, -0.0065216646, -0.0478100218, -0.0613052435, -0.0346764624, -0.0446642116, -0.0534995198, -0.0302190967, 0.0592149049, 0.0700405985, -0.0295005254, 0.0260171965, -0.0045511872, 0.0097457096, -0.0375131406, -0.0664156377, -0.0576300994, -0.0037883297, 0.0356082767, 0.0595435351, 0.0079251006, 0.0305423513, 0.0611332655, -0.0681920946, 0.0295499042, -0.0488883778, -0.0621731840, -0.0070626885, -0.0510873385, 0.0624422431, 0.0309102237, 0.0112665966, 0.0149001405, 0.0139502436, -0.0126514360, -0.0248577110, -0.0329210311, 0.0359133109, 0.0170106888, 0.0644101202, 0.0554489344, -0.0710076243, -0.0655520335, -0.0712308660, 0.0671624839, 0.0196254924, -0.0301402584, 0.0405002013, -0.0396160521, -0.0550942197, 0.0373670757, -0.0321155675, 0.0502912179, -0.0570416376, 0.0038203821, -0.0378093980, -0.0600711145, -0.0461752638, -0.0214038901, 0.0353531018, 0.0270877630, -0.0597127080, -0.0617347807, -0.0169016533, 0.0145220459, -0.0221866630, -0.0378246456, 0.0353147835, -0.0159065053, 0.0290121362, 0.0239066482, -0.0091535673, -0.0698408931, -0.0025380626, -0.0506490581, 0.0001186058, 0.0677845776, -0.0521790832, 0.0057402551, 0.0316749662, -0.0035853982, -0.0663915873, 0.0100178793, 0.0541779101, 0.0622328520, -0.0120735429, -0.0048752204, -0.0331014432, 0.0139982477, 0.0052618682, 0.0165509731, -0.0293330550, 0.0715500414, -0.0609281994, -0.0356955454, -0.0258861519, -0.0022642538, -0.0206784718, -0.0216540731, 0.0304530039, 0.0050681382, 0.0690568686, -0.0404680595, -0.0233985595, 0.0197681487, 0.0509201586, -0.0526537038, -0.0099714249, -0.0160929710, -0.0112860948, 0.0176227912, 0.0530859977, 0.0186917186, -0.0647065490, 0.0562029630, 0.0163233802, 0.0715416819, 0.0545184314, -0.0543264896, -0.0261780098, 0.0555022359, 0.0717543215, -0.0340604223, 0.0703897178, 0.0402299240, 0.0685037524, 0.0480357856, 0.0389782637, -0.0389680788, -0.0201024376, 0.0219882727, 0.0706073046, 0.0075435340, -0.0311221741, -0.0086076111, 0.0103097856, 0.0510170013, 0.0585544407, -0.0534339435, -0.0287136622, -0.0507119820, 0.0172825009, 0.0573698878, -0.0063948035, -0.0163836032, -0.0407268107, -0.0446770154, -0.0431215428, -0.0416189283, -0.0495766699, 0.0479945093, 0.0591654032, 0.0452682301, 0.0563655645, -0.0392330885, -0.0319961198, -0.0347394384, 0.0665125102, 0.0671229362, -0.0475269929, 0.0137754753, 0.0065268800, -0.0264399573, 0.0091165602, 0.0682573318, 0.0149018094, 0.0577493757, 0.0524878874, -0.0712057576, 0.0693136007, 0.0201072544, 0.0253530666, 0.0610575527, -0.0294831134, -0.0380993970, -0.0560797341, 0.0692316294, -0.0276151896, -0.0661727041, 0.0471670702, 0.0571785569, 0.0347857028, -0.0378806666, -0.0298115835, -0.0256646909, 0.0249368250, 0.0553257316, -0.0288418494, -0.0678525940, -0.0228569023, 0.0243801624, -0.0312898494, 0.0586667508, -0.0209207870, 0.0562993288, -0.0209714249, 0.0150615349, -0.0430694744, 0.0689854324, -0.0440511853, 0.0624197870, -0.0473872088, 0.0046325922, -0.0303310603, 0.0302558839, -0.0416707695, -0.0241647586, 0.0298385993, 0.0688514113, 0.0403529704, 0.0067411512, 0.0153622329, -0.0451046973, 0.0498784035, -0.0504109189, -0.0041393936, -0.0363797918, -0.0294754729, -0.0432145447, -0.0047556534, -0.0012826994, 0.0211580098, 0.0362731591, -0.0162172019, -0.0260582529, 0.0449648649, 0.0260745659, -0.0595093258, 0.0362934694, -0.0661221370, 0.0444664434, 0.0144290999, -0.0470755324, -0.0453238189, -0.0548572205, -0.0017717928, 0.0335132256, 0.0511448234, 0.0307456478, 0.0497652888, -0.0254822671, -0.0341904834, -0.0230132900, -0.0493909605, -0.0314798430, -0.0686713830, 0.0280034691, 0.0109014139, 0.0243697688, -0.0667023808, -0.0664276853, 0.0165050775, -0.0695202723, -0.0711740628, 0.0272918120, -0.0571840405, 0.0021524131, -0.0306376778, 0.0523717403, -0.0619826056, -0.0628666505, 0.0315275192, -0.0700905249, -0.0075460151, -0.0290062875, -0.0106970146, 0.0691833943, 0.0365070179, 0.0208707526, -0.0483021736, 0.0127214342, 0.0033246651, -0.0251339078, 0.0584665686, -0.0253149718, 0.0247477591, 0.0143012851, -0.0278715119, 0.0215302035, -0.0664702505, -0.0312282518, -0.0083650500, 0.0405418426, 0.0564028174, 0.0433563590, 0.0472751781, -0.0467623919, 0.0264556333, -0.0568329245, -0.0044589490, -0.0138433240, -0.0646674037, 0.0322838947, 0.0336279422, -0.0055647120, 0.0454494804, -0.0677748919, -0.0249491632, -0.0287285596, -0.0007800311, 0.0574407727, -0.0394163206, -0.0237259604, 0.0036765710, 0.0704186112, 0.0551943928, 0.0436908975, -0.0246806070, 0.0681838393, -0.0009622350, 0.0435939804, -0.0073467940, -0.0013713837, -0.0290186778, 0.0251472965, 0.0299999416, -0.0335063599, 0.0043721050, 0.0106597617, -0.0380124189, 0.0224041194, 0.0632495135, 0.0122770965, -0.0380010605, -0.0112270750, -0.0087517127, 0.0301419795, 0.0479987785, 0.0475514084, 0.0109216124, -0.0716028139, 0.0666845441, -0.0198115259, -0.0423242524, -0.0044378713, -0.0237144493, 0.0060801804, -0.0668741539, 0.0453350544, 0.0642855316, 0.0299111232, 0.0716642439, 0.0484924614, 0.0495274439, 0.0122435093, 0.0446710959, 0.0622245818, 0.0184256211, -0.0640506893, 0.0716986358, -0.0524255820, 0.0553649664, 0.0060854480, 0.0459567904, 0.0169905424, -0.0062468946, 0.0127123147, 0.0468781963, -0.0600952394, 0.0291493610, 0.0025517195, 0.0320624039, -0.0287293009, -0.0345542617, -0.0622714497, 0.0075436532, 0.0298577845, -0.0454241000, -0.0038799495, 0.0027519539, 0.0330774412, -0.0105103254, -0.0179908350, 0.0037276447, -0.0249356404, 0.0488968641, -0.0002840757, -0.0205479935, 0.0265641883, 0.0513168573, -0.0691277757, 0.0476202890, 0.0188905224, -0.0355593041, -0.0624032505, -0.0450832397, -0.0305737555, 0.0406365618, -0.0653179735, -0.0341636278, -0.0063854083, -0.0146407001, 0.0320166796, 0.0349166617, -0.0380879380, 0.0116766766, -0.0262544714, 0.0045295432, 0.0652478486, -0.0275643431, -0.0230719298, 0.0524353385, -0.0373568013, 0.0598500520, 0.0362746269, 0.0656998605, -0.0606434867, 0.0115851760, 0.0471219048, 0.0353603661, 0.0098209679, 0.0031009167, -0.0399154425, -0.0626297221, -0.0204888731, -0.0382432416, 0.0103384182, 0.0268999189, 0.0206812769, 0.0542602688, -0.0533203483, 0.0332837254, -0.0314198621, -0.0289115682, -0.0720430389, -0.0366354771, -0.0337393507, -0.0081928149, -0.0399275571, -0.0346272700, -0.0422367379, -0.0161946937, 0.0261191279, -0.0405016989, -0.0395436995, 0.0445321202, -0.0495990217, -0.0100058205, -0.0576750413, 0.0404976010, 0.0012417659, 0.0551494062, 0.0029279441, 0.0305926800, 0.0396816805, -0.0511330739, 0.0659099668, 0.0717738718, -0.0045113042, 0.0511285812, -0.0172677003, 0.0479589775, 0.0505467653, 0.0552386194, -0.0671859533, 0.0108829662, 0.0241859555, 0.0268369764, 0.0586212426, 0.0279848129, -0.0484250784, 0.0398346409, -0.0526623242, 0.0047614872, -0.0152413249, 0.0146352947, -0.0334394276, 0.0312432870, -0.0463078693, -0.0202906914, -0.0591885149, 0.0556851029, 0.0063501000, 0.0520490184, 0.0113850161, -0.0681445226, 0.0509847701, 0.0115592256, -0.0613689572, -0.0673848242, 0.0281125531, -0.0644147992, -0.0264031030, 0.0276281461, 0.0549571216, -0.0440427549, -0.0523700044, 0.0199838132, 0.0181067884, -0.0481176525, 0.0243170038, 0.0366650000, -0.0001406297, 0.0570821166, -0.0026264489, -0.0708071217, -0.0450058803, 0.0639528185, 0.0003208444, -0.0299040824, 0.0245458484, 0.0179266706, 0.0148224011, 0.0075247809, 0.0615183115, 0.0216560513, -0.0119002573, -0.0280077159, 0.0572926998, 0.0669857562, 0.0504789874, 0.0230993554, 0.0451446995, 0.0434356257, 0.0202639550, -0.0420344099, 0.0243166909, -0.0013365373, -0.0155625492, -0.0572487712, -0.0219296850, 0.0522495434, -0.0591083318, -0.0517119989, -0.0635961890, 0.0368025675, -0.0550396256, 0.0408167467, -0.0398204289, 0.0508986861, -0.0569600463, 0.0399667695, -0.0118816569, 0.0529042631, 0.0316206813, 0.0566232949, -0.0520535968, -0.0516711697, 0.0152573586, -0.0109583810, -0.0544941314, 0.0583063662, 0.0059425533, -0.0420343205, -0.0563043132, -0.0556074716, -0.0083467662, 0.0443455353, 0.0066497177, 0.0310512483, 0.0008640364, -0.0013860762, 0.0373644978, -0.0283759162, -0.0685885474, 0.0408210158, -0.0540250838, 0.0103280097, 0.0109249651, -0.0472697392, -0.0273238681, 0.0428982005, -0.0351957344, -0.0704377145, -0.0073673725, 0.0397687778, -0.0090616867, 0.0706890970, -0.0593314655, -0.0055548027, 0.0090868920, 0.0584055185, 0.0701509565, -0.0435182005, 0.0100497156, 0.0409266800, -0.0112120025, 0.0033984482, 0.0521934181, 0.0415572599, 0.0223837122, -0.0493506119, -0.0647807047, -0.0719033405, 0.0709524602, 0.0296949372, 0.0267880931, -0.0468866229, 0.0229161978, 0.0256138295, 0.0462410077, -0.0084447190, 0.0078620613, 0.0459138453, -0.0331511162, 0.0648155212, -0.0586713254, -0.0128880925, 0.0519955084, -0.0440152064, 0.0365319103, 0.0053514391, -0.0242062621, 0.0464868546, -0.0294100009, 0.0235288292, 0.0324466676, -0.0447467193, 0.0675711185, -0.0088259950, 0.0558859259, -0.0102316514, -0.0085913688, 0.0664686710, -0.0402681231, 0.0172335282, -0.0368140787, -0.0246316381, -0.0631621554, 0.0484241024, 0.0671967715, 0.0128781348, -0.0278656967, -0.0003713444, 0.0195014849, 0.0014864728, 0.0675126314, 0.0612139255, -0.0400147401, -0.0065160915, 0.0021968409, 0.0326109380, -0.0021579862, 0.0458187312, -0.0239875503, 0.0345918909, 0.0520492792, -0.0039370060, 0.0080568343, -0.0532739908, 0.0265105218, 0.0000680685, -0.0643791109, 0.0522382706, 0.0413023084, -0.0525928438, -0.0498934910, 0.0562019646, -0.0667628273, -0.0288867205, -0.0507993549, 0.0637096316, -0.0053488463, -0.0650069341, 0.0169293061, 0.0496598110, -0.0002245456, 0.0638058335, -0.0112051740, -0.0442117229, -0.0540610105, 0.0131350532, 0.0093920529, -0.0413524508, -0.0620091222, -0.0146757327, 0.0001239926, 0.0129533932, -0.0585722849, -0.0328683294, -0.0197684616, -0.0319204815, 0.0117731392, 0.0326885208, -0.0677728802, -0.0052829981, -0.0233405381, -0.0690347925, 0.0069986954, -0.0688430294, -0.0175600909, 0.0082013682, 0.0583192706, -0.0403251275, 0.0280534029, 0.0452393219, 0.0088221058, -0.0155817531, 0.0558703691, -0.0161548629, 0.0649641901, -0.0392223522, 0.0368185565, 0.0290046558, 0.0178871304, 0.0055280104, -0.0330918059, -0.0091106221, 0.0209847242, 0.0196238384, -0.0599904880, 0.0217515454, -0.0597565472, -0.0646261796, 0.0509780943, -0.0088822916, -0.0680587441, -0.0236648098, -0.0038636550, -0.0637374818, -0.0066499710, 0.0091334060, -0.0680552050, 0.0031065792, 0.0487660244, -0.0159349479, 0.0491541699, -0.0423610546, -0.0166134313, -0.0037196055, -0.0153896250, 0.0177912265, 0.0311705768, -0.0253573507, 0.0251138657, 0.0390817747, -0.0119029097, 0.0247100964, 0.0017138049, 0.0321022123, 0.0459225029, -0.0111984462, 0.0493735448, 0.0154013261, 0.0391335487, -0.0081759170, 0.0016498491, -0.0129342414, 0.0149414539, -0.0714558735, 0.0010767728, -0.0656179711, -0.0626806840, -0.0717139691, -0.0524222441, 0.0050324723, 0.0591268241, -0.0271103866, 0.0205086619, -0.0694217011, -0.0204205997, 0.0340879187, -0.0472713076, 0.0121425241, -0.0136253536, -0.0033369735, 0.0286713019, 0.0323822349, 0.0155787095, -0.0075169131, -0.0114981122, 0.0097920448, -0.0673046559, -0.0111320801, 0.0186486840, 0.0242162570, -0.0028251633, 0.0400936306, 0.0101083517, 0.0086262822, -0.0472458079, 0.0312200785, -0.0021575093, -0.0538277104, -0.0377356857, 0.0235058889, 0.0659928471, -0.0249347612, -0.0690117031, -0.0012004897, 0.0340673551, -0.0314800516, 0.0223192349, 0.0116537735, -0.0528344400, 0.0439513028, -0.0132509582, 0.0571892709, -0.0469938368, 0.0121301040, 0.0123447329, -0.0198587924, 0.0198365301, 0.0244912133, -0.0068712160, -0.0001003817, 0.0335387737, 0.0044654012, 0.0233396962, -0.0228877887, -0.0027034283, -0.0146412700, -0.0695349127, 0.0475581586, -0.0477195345, 0.0680866241, 0.0253399909, 0.0480342060, 0.0083085671, -0.0388767123, 0.0480643138, -0.0219473541, 0.0550819635, -0.0075974613, -0.0399022810, 0.0515006557, -0.0164681897, -0.0183762051, -0.0591726303, 0.0311327726, -0.0109040774, -0.0428677313, -0.0610160716, -0.0046799779, 0.0373185873, 0.0534845442, 0.0137673244, 0.0100520551, -0.0014262348, 0.0424379483, 0.0609703362, -0.0605501905, -0.0075049400, 0.0710566789, -0.0391593762, 0.0141210705, 0.0171907693, 0.0313867927, -0.0462820604, 0.0096939728, 0.0297603384, 0.0119975954, -0.0645105690, 0.0111642405, 0.0501949117, -0.0303011723, -0.0215227529, 0.0425614566, -0.0708723143, -0.0623062253, 0.0118921921, -0.0101064071, 0.0666303486, 0.0469495803, 0.0535703897, -0.0352136269, 0.0094174445, -0.0366011001, 0.0223808214, -0.0634905249, 0.0534833968, 0.0710538775, -0.0078959242, -0.0679679140, -0.0479482263, 0.0267028213, 0.0304345191, 0.0282844156, 0.0572132766, 0.0534592569, -0.0706174523, 0.0542510748, -0.0642757490, 0.0572515279, 0.0509249121, -0.0494744107, -0.0026246086, 0.0118764788, -0.0558700040, -0.0658372343, -0.0277459919, 0.0446605682, -0.0240715183, 0.0084036812, -0.0464052260, -0.0547885671, 0.0538313836, 0.0414572060, -0.0268544778, -0.0701025054, -0.0719198734, -0.0572241135, -0.0236438364, 0.0457130969, -0.0379307382, 0.0058840513, 0.0415240824, 0.0632036328, 0.0506197736, -0.0292929634, 0.0267014578, -0.0364230312, 0.0134933442, -0.0587732382, -0.0614609085, 0.0090149716, -0.0394906178, 0.0103127807, -0.0683870092, -0.0095532537, 0.0130816996, -0.0184442066, -0.0005434453, -0.0673111081, -0.0637722239, -0.0150521062, -0.0363654420, 0.0261963829, 0.0366659015, 0.0314707607, -0.0671083555, 0.0553700924, 0.0408709794, 0.0121654570, -0.0106333531, -0.0536247641, 0.0373369828, -0.0411818661, -0.0127656721, -0.0064256042, 0.0674384236, 0.0146007314, 0.0405164137, 0.0610697269, 0.0703898668, 0.0401703566, 0.0405291095, -0.0329804309, -0.0406623557, 0.0629114062, 0.0583417267, -0.0598825514, 0.0626223981, 0.0557172000, 0.0382235199, -0.0369128771, 0.0427014306, 0.0356509760, 0.0328743011, -0.0572364517, -0.0588882267, -0.0429232568, -0.0385933407, 0.0513280705, -0.0002088174, -0.0579231903, -0.0319547057, -0.0166098177, -0.0566605702, 0.0186234117, 0.0196529701, 0.0100895762, -0.0526651293, 0.0570857525, 0.0583956242, -0.0668833628, 0.0377327129, -0.0161652043, -0.0262269601, 0.0525104403, -0.0172849074, -0.0151554123, 0.0484096482, -0.0266116075, -0.0453955717, 0.0089949593, 0.0453465134, 0.0653060973, -0.0686899796, -0.0130502805, 0.0598608404, 0.0018855780, -0.0552430563, -0.0269776583, 0.0053710416, 0.0051283985, 0.0489697158, -0.0003165975, 0.0639301986, 0.0089686215, 0.0121190175, -0.0335630700, -0.0066338852, 0.0681551546, 0.0516312644, 0.0712835789, -0.0281879716, 0.0668073744, 0.0362414867, -0.0698462278, -0.0610601380, -0.0174693614, 0.0302783251, 0.0224826112, 0.0626787245, 0.0716112107, -0.0120853633, 0.0262698382, 0.0665069371, 0.0462760031, -0.0210145302, -0.0395094939, 0.0621598512, 0.0602452159, -0.0359567367, -0.0316741541, -0.0285040885, -0.0433371216, -0.0178888701, 0.0288594365, -0.0066248998, -0.0386763588, 0.0053882822, -0.0131394789, -0.0396034382, -0.0003868714, 0.0354846641, 0.0062615871, -0.0024574324, -0.0660586432, 0.0429773703, -0.0169587620, -0.0237743966, 0.0020869076, -0.0244704634, 0.0069096014, 0.0685952753, -0.0050752312, -0.0214193761, 0.0574958324, 0.0414426327, 0.0696113855, -0.0101983584, 0.0215983763, 0.0691960603, -0.0690618455, -0.0683338270, -0.0339963809, -0.0051081628, 0.0211041570, 0.0309748352, 0.0707332194, 0.0102683678, 0.0190873295, -0.0412193947, -0.0381789766, 0.0325102285, 0.0543414801, -0.0539306067, 0.0394682139, 0.0658727288, 0.0316990018, 0.0372246057, -0.0518899821, 0.0589199215, 0.0436041653, -0.0602197424, 0.0430138484, 0.0111909956, 0.0137817785, -0.0031611249, -0.0337251388, 0.0291419774, 0.0667128563, -0.0579810552, -0.0427113250, 0.0440428406, -0.0349892750, -0.0428329036, 0.0157884210, -0.0640425012, 0.0287712663, -0.0301799364, 0.0468142182, 0.0413302034, 0.0577391386, -0.0454954207, 0.0038069785, -0.0202731043, 0.0180937946, -0.0213261694, -0.0316537321, 0.0263842270, -0.0642968267, -0.0637542307, -0.0275439881, -0.0658461750, -0.0357350335, -0.0237794220, 0.0240454152, 0.0265741348, -0.0574185103, -0.0158351846, 0.0693968982, -0.0541930571, 0.0512323901, 0.0379466340, 0.0318127200, 0.0536864847, -0.0327473171, 0.0366524607, 0.0463839024, 0.0584567040, 0.0467594713, -0.0295109004, 0.0474446118, 0.0637825131, -0.0443774685, -0.0691885203, -0.0480492786, -0.0485541970, -0.0029336214, 0.0342292488, 0.0630808175, 0.0365785733, -0.0183760524, -0.0576746464, 0.0313685909, 0.0375174433, 0.0245218053, 0.0042640343, 0.0281388983, -0.0108107515, -0.0269676596, -0.0078699887, -0.0498359874, 0.0304282382, -0.0637897775, -0.0483428538, -0.0065436512, -0.0682951957, -0.0200026035, 0.0105440319, 0.0443055630, -0.0044163465, 0.0520604625, -0.0520957522, 0.0693522841, 0.0098651424, -0.0388120152, 0.0654875338, -0.0365836509, 0.0629740953, 0.0152963176, -0.0166737214, -0.0230833702, 0.0151328519, 0.0610557348, -0.0669186339, 0.0125946403, 0.0030547529, 0.0493126065, 0.0129854307, 0.0267288685, -0.0312463529, -0.0649041831, -0.0681527629, -0.0222039707, -0.0059540644, 0.0140068159, 0.0045329332, 0.0454610586, -0.0086131543, 0.0672135055, -0.0626971349, -0.0098348744, -0.0466802865, -0.0038065985, 0.0369119123, -0.0270696767, -0.0300822370, -0.0115964450, -0.0401212983, 0.0660118759, 0.0281470865, -0.0241742060, 0.0394717082, -0.0052463636, -0.0444245785, -0.0413139239, 0.0401929319, -0.0205880702, 0.0085921064, 0.0512017086, -0.0240462050, -0.0358271748, -0.0712614208, 0.0430397093, 0.0064300224, -0.0543833077, -0.0644477978, 0.0628070533, 0.0315329432, -0.0056776404, 0.0187881812, 0.0479291752, 0.0521029457, -0.0696868449, -0.0364979133, 0.0615195632, 0.0182929635, 0.0418766066, 0.0675514787, -0.0685363412, -0.0459749624, 0.0695948154, 0.0026956201, 0.0507096946, -0.0046146661, 0.0370750502, -0.0406036451, -0.0144934505, 0.0069034770, -0.0399107635, 0.0663185418, 0.0661990494, -0.0716969296, -0.0067565516, -0.0147741884, -0.0122208819, 0.0571620911, 0.0433693156, 0.0224545971, 0.0141562074, 0.0421584472, -0.0676991493, -0.0535968542, -0.0519837365, 0.0528576672, -0.0194534101, -0.0355191603, 0.0332099944, -0.0039442554, 0.0711578578, -0.0077665821, -0.0061816871, -0.0633837730, 0.0264298767, 0.0260723233, -0.0625978038, -0.0504781120, 0.0123895928, -0.0221961439, -0.0241977088, -0.0719225258, -0.0054816082, 0.0301216617, 0.0320873633, 0.0606824309, -0.0006799623, -0.0341695622, -0.0585037842, -0.0417294949, 0.0555417240, 0.0260575786, -0.0173360631, 0.0342549086, -0.0000469759, -0.0307727493, -0.0585879087, 0.0140243545, -0.0424855947, 0.0324620530, -0.0523647740, -0.0679688752, 0.0068591833, -0.0622988790, 0.0058673099, -0.0301852003, 0.0407889262, 0.0343543217, -0.0612738244, -0.0522063375, 0.0473960042, -0.0182812773, -0.0623604581, -0.0379747190, -0.0539551452, 0.0261766985, 0.0419441089, 0.0120189339, -0.0672839954, -0.0262388997, 0.0504478812, 0.0338120833, -0.0368635990, -0.0717360899, -0.0056913346, -0.0086759701, 0.0411665887, -0.0563135371, -0.0421879739, 0.0220926479, -0.0059177056, 0.0675641000, 0.0582233518, -0.0490238108, -0.0097152218, -0.0041281730, 0.0048705786, 0.0546341389, 0.0164921582, 0.0197315514, 0.0472589508, 0.0256905854, -0.0524867997, 0.0312653854, -0.0436490215, -0.0158861168, -0.0405236185, -0.0055864602, -0.0247103199, 0.0552435219, -0.0547413006, 0.0048134997, 0.0477158353, -0.0419599712, -0.0379636548, -0.0201837197, -0.0011569411, -0.0248593986, -0.0171682164, -0.0483159423, 0.0420612991, 0.0682194382, 0.0396333784, -0.0407226272, -0.0516498685, 0.0075764135, -0.0576715656, 0.0396660194, 0.0260650143, 0.0580827296, 0.0182997063, 0.0043522492, -0.0320158228, 0.0144601390, 0.0692969859, -0.0575177930, -0.0069083273, -0.0576084331, -0.0406541303, 0.0123782307, -0.0088184252, 0.0273195505, -0.0679880977, 0.0331607163, -0.0330045372, 0.0417660400, 0.0393670425, -0.0308258981, -0.0412162617, -0.0709600151, -0.0566575415, -0.0033565015, 0.0159352198, 0.0078490674, -0.0156204998, 0.0652901083, 0.0368380845, -0.0691414550, 0.0343655944, -0.0184223875, 0.0313919187, -0.0553695560, -0.0414806902, 0.0662233233, 0.0648174882, 0.0048597381, 0.0309130326, -0.0428078547, 0.0583655387, -0.0187407397, 0.0275925249, -0.0104907788, -0.0701861978, 0.0379797220, -0.0700698122, -0.0437681228, -0.0490594432, -0.0200872943, -0.0611865185, 0.0110324547, 0.0485538021, 0.0312466472, 0.0238166079, -0.0513379127, -0.0406678244, -0.0223087072, -0.0620111674, 0.0337868258, -0.0098562948, -0.0493859537, 0.0072548464, 0.0028723106, -0.0595583841, 0.0168811455, -0.0328262262, 0.0258980095, 0.0014238805, -0.0619701147, 0.0423511416, -0.0558212623, -0.0293447040, 0.0671682954, -0.0511256382, 0.0518526807, 0.0491358936, 0.0133473799, 0.0237598717, 0.0092653409, -0.0009936169, -0.0082454830, -0.0102222227, -0.0585868061, -0.0298058353, -0.0463927165, 0.0299222916, 0.0541142672, 0.0418791175, 0.0532785207, -0.0087927654, -0.0677900165, -0.0608469509, 0.0164547190, 0.0089689121, -0.0178050213, 0.0278798044, 0.0580741465, -0.0679706857, -0.0548822582, -0.0416225195, 0.0411010832, -0.0085758790, -0.0196288973, 0.0486794785, -0.0712222457, 0.0413826108, -0.0067171976, 0.0702631772, 0.0301741734, 0.0684412420, -0.0024138838, 0.0566166192, -0.0674301088, 0.0254462734, 0.0092129856, 0.0496316254, -0.0415315516, 0.0218205974, 0.0189511925, 0.0159874633, -0.0070568845, 0.0500610322, 0.0162083730, 0.0441717356, -0.0443223566, -0.0655736774, -0.0155448616, 0.0677085072, 0.0332603604, -0.0711478218, 0.0602149367, -0.0299621895, 0.0602753609, -0.0526967049, -0.0501409881, 0.0616889149, 0.0564727485, -0.0619723685, -0.0617491342, 0.0504354388, -0.0259884298, -0.0026927143, -0.0076550990, -0.0715751275, 0.0444185734, -0.0347434469, -0.0528309457, 0.0273749903, 0.0278090164, 0.0103866681, 0.0398092270, -0.0295224637, 0.0043942332, 0.0178504512, 0.0061394796, 0.0491967872, 0.0016024634, -0.0485818684, -0.0384065658, 0.0007822514, 0.0152899697, -0.0047983229, 0.0179559067, -0.0361017026, 0.0141876042, 0.0585916787, 0.0273629576, 0.0152361244, -0.0029178932, 0.0394543782, -0.0019893497, -0.0650144592, 0.0663700402, 0.0649989694, 0.0155040845, 0.0504565835, -0.0443258360, 0.0550668091, 0.0235606432, 0.0053520948, -0.0310996361, -0.0095402673, -0.0460498258, -0.0224437602, 0.0665845424, 0.0370434746, -0.0447686240, 0.0434524044, -0.0409671478, -0.0211120732, 0.0460735038, -0.0316438042, -0.0185510926, -0.0008340254, -0.0083980709, 0.0204450339, 0.0257030055, -0.0354210511, -0.0561446548, -0.0100042000, 0.0322420672, -0.0245372094, 0.0239717215, 0.0011762306, -0.0568762533, 0.0269096196, 0.0287444964, 0.0437960997, 0.0395269245, -0.0130300298, 0.0183513761, 0.0525358915, 0.0105472729, 0.0367625281, -0.0665686578, -0.0216947496, -0.0542048216, -0.0174723715, 0.0193145871, 0.0336977318, -0.0585328490, 0.0452314913, -0.0588886924, 0.0341244638, 0.0278858244, 0.0178479180, 0.0012421459, 0.0366854072, 0.0357238501, -0.0391494483, -0.0610230565, 0.0139173269, -0.0534050725, -0.0428757146, -0.0040528923, 0.0704400986, -0.0381335691, -0.0297392644, 0.0055067316, -0.0274945535, -0.0245469138, -0.0117841996, 0.0625287592, 0.0559041798, -0.0063832402, 0.0700150132, -0.0663855672, 0.0499687716, -0.0169810094, -0.0020378530, 0.0462442562, -0.0667000115, 0.0149847418, -0.0498021245, 0.0278017372, -0.0374441929, -0.0710827336, -0.0614059679, -0.0334032774, -0.0476760343, -0.0595150739, 0.0717681497, 0.0636858493, -0.0450711474, -0.0501065403, 0.0200851113, -0.0450951979, -0.0109523423, -0.0373524167, -0.0131739601, -0.0274266563, -0.0306273885, 0.0449395478, 0.0611213893, 0.0634299666, 0.0521262959, -0.0514451936, -0.0239792205, 0.0585898757, -0.0363060273, -0.0063503087, 0.0593264699, 0.0403586775, -0.0073330179, 0.0048393831, 0.0344831124, -0.0337909013, -0.0142399110, 0.0155294463, -0.0349406302, 0.0674996823, 0.0662563443, 0.0688197464, 0.0721577406, 0.0419358984, 0.0616307557, -0.0668218657, -0.0471128002, 0.0226352140, 0.0561687052, 0.0708585531, 0.0635023564, 0.0299499184, 0.0057208613, 0.0480799004, 0.0720290989, -0.0455279574, -0.0248769820, 0.0148486421, -0.0418131351, 0.0040045083, 0.0154674128, 0.0516675338, 0.0667806715, 0.0505106151, 0.0340652764, -0.0603741035, -0.0413251445, 0.0390356481, -0.0031791553, 0.0388040319, 0.0258284286, -0.0252376273, -0.0094673932, 0.0014680624, -0.0107505284, -0.0386260301, 0.0239387006, 0.0663627982, -0.0017279163, -0.0435145721, -0.0389539860, -0.0091092661, -0.0450990014, 0.0545339435, -0.0172244124, -0.0114355311, 0.0005172417, -0.0135456361, -0.0529340133, 0.0220729113, 0.0108312294, -0.0292061083, 0.0253210962, 0.0020526722, -0.0694107562, -0.0287112333, -0.0086862296, 0.0677428544, 0.0578015149, -0.0229471847, -0.0225427486, -0.0227835849, -0.0348129272, 0.0329856426, -0.0567954518, -0.0568103008, -0.0076694712, -0.0161685422, -0.0659764111, 0.0288762450, 0.0618855506, 0.0279417634, 0.0560597032, -0.0262663811, 0.0507627577, 0.0015876293, -0.0257142782, 0.0500551611, -0.0065123737, 0.0350193828, -0.0098799728, -0.0485420674, 0.0413366556, 0.0266628116, -0.0528120548, 0.0578832030, 0.0438684225, 0.0000399351, -0.0550776720, -0.0661950409, -0.0293267928, 0.0363969430, -0.0269994587, 0.0450925678, -0.0072324052, 0.0388839543, -0.0279614478, 0.0116333514, 0.0184382722, 0.0474438369, 0.0025275648, -0.0129980594, -0.0133032836, -0.0308066085, 0.0172041431, -0.0238094106, 0.0275700912, -0.0622072183, -0.0107336827, -0.0557241812, -0.0487671122, -0.0437058210, -0.0664764345, -0.0059516728, -0.0481615998, -0.0626079589, 0.0472475812, -0.0714587644, -0.0326708518, -0.0639150739, 0.0371342748, -0.0351863913, -0.0427162275, -0.0397559926, 0.0714871287, -0.0184872225, -0.0586097427, -0.0236913264, 0.0391440094, -0.0455956645, 0.0559323132, 0.0485982299, -0.0200263485, -0.0008913577, 0.0408973396, 0.0614115745, -0.0303661451, -0.0469881929, -0.0614712834, -0.0331306942, -0.0257050209, 0.0660937130, -0.0511776023, 0.0316095278, 0.0605596453, -0.0236356109, -0.0571233518, 0.0437421054, 0.0322242230, -0.0239228383, 0.0083044842, 0.0191627815, 0.0311503410, 0.0232094750, -0.0546600521, -0.0600600690, 0.0193767548, 0.0114469901, 0.0323344022, 0.0714061409, 0.0640116185, -0.0475737266, -0.0223225914, 0.0075374246, -0.0611301847, -0.0062060803, -0.0693803877, 0.0024146214, -0.0245003849, -0.0712695941, -0.0338426232, -0.0174869299, -0.0421564728, -0.0691028833, 0.0385687351, -0.0512692630, 0.0090424865, -0.0658680797, 0.0214825049, -0.0140826106, -0.0513183326, 0.0233042836, -0.0368581787, 0.0345423073, -0.0715638250, -0.0276323780, 0.0529407859, -0.0510115437, -0.0089378729, 0.0703499168, -0.0009414479, -0.0111001097, 0.0711369812, 0.0366539359, -0.0048427209, 0.0238757804, 0.0285087153, 0.0386283919, 0.0218380243, -0.0391190983, 0.0349877924, -0.0513853878, -0.0523762852, -0.0223621652, 0.0173311457, -0.0572357960, -0.0417598486, 0.0641773790, 0.0248791352, 0.0264908746, 0.0019617528, -0.0628136396, 0.0021069050, 0.0381163284, -0.0147805884, -0.0211795568, 0.0582748353, 0.0594580173, -0.0418704674, 0.0706420541, -0.0033976436, -0.0105863623, 0.0177413076, -0.0627739429, 0.0325564817, 0.0039916709, -0.0192610770, -0.0438100398, 0.0448482037, -0.0018965006, -0.0280538127, -0.0152632631, 0.0581847280, -0.0542920604, -0.0075291842, 0.0640670508, -0.0000561103, 0.0686395317, 0.0534008443, 0.0359826982, 0.0031651109, -0.0256568603, -0.0275258534, 0.0554956496, -0.0354485288, 0.0102154985, -0.0503832884, 0.0560832918, 0.0416568145, -0.0246993080, 0.0232083797, -0.0482832119, -0.0640762597, 0.0312466770, -0.0356321745, -0.0402228534, 0.0150223225, 0.0560186803, 0.0154246390, -0.0391435288, 0.0563384742, -0.0259569921, -0.0132519566, 0.0677089244, -0.0541043058, 0.0070744008, -0.0113089792, -0.0002225265, 0.0520475209, -0.0654780120, -0.0466457531, 0.0334925577, 0.0282457843, 0.0134486631, -0.0568785071, 0.0532837957, 0.0477062017, 0.0001131520, 0.0209673494, 0.0669400841, -0.0508761480, 0.0150492489, -0.0406056084, 0.0233187005, -0.0043777302, 0.0141092986, -0.0364141166, 0.0175605193, 0.0676258206, -0.0615165718, 0.0362893045, 0.0511187762, 0.0590344667, 0.0122955069, 0.0541641414, -0.0706685409, 0.0570741296, 0.0342549235, 0.0393731818, 0.0107341632, 0.0071275905, -0.0102864727, -0.0467395633, 0.0074008256, -0.0026202202, 0.0554542691, 0.0284901857, 0.0457756221, -0.0673159808, 0.0630413443, -0.0341007896, -0.0329744257, -0.0277922936, -0.0143987983, -0.0568401180, 0.0161862671, 0.0413218215, -0.0375828780, 0.0418294296, -0.0520159826, 0.0649346411, -0.0191392042, -0.0154037699, 0.0004686192, -0.0346132964, 0.0170479044, -0.0195637904, -0.0715142488, 0.0629054010, 0.0168561786, -0.0566305816, 0.0535701960, -0.0014630556, -0.0597467944, 0.0012527257, -0.0567194521, -0.0104048178, 0.0272969007, 0.0276204348, 0.0365246683, 0.0044140741, -0.0522059575, 0.0632008761, 0.0673143864, 0.0507460684, -0.0217152052, 0.0305069610, 0.0163011327, -0.0571801327, -0.0263724066, -0.0598806925, -0.0338261575, -0.0667646229, -0.0466566607, 0.0576110631, -0.0084917098, -0.0100051463, 0.0237279758, 0.0641314536, 0.0231466889, 0.0343182236, -0.0276943892, 0.0342952907, -0.0300335437, -0.0589308813, -0.0494756512, -0.0317576937, 0.0475533381, -0.0499042124, -0.0581280664, 0.0646129847, 0.0037905648, 0.0038611144, 0.0100490227, -0.0021875128, -0.0256302767, 0.0545387715, 0.0616563410, 0.0297457874, 0.0698368847, -0.0398224927, 0.0633838773, 0.0594292283, -0.0573399663, 0.0530080497, 0.0670280606, -0.0143570006, -0.0226733088, -0.0301659480, 0.0061956197, -0.0703668445, 0.0175904259, -0.0084179938, 0.0058495328, -0.0331342556, -0.0274061486, 0.0566917956, 0.0131732225, 0.0393702909, 0.0270355195, 0.0407411605, -0.0066482350, -0.0167209171, 0.0152777508, 0.0119156912, 0.0584673285, -0.0609214716, 0.0039002895, -0.0087545514, -0.0110916793, 0.0609516501, 0.0702853352, -0.0250731520, -0.0608996190, 0.0030360147, 0.0607730895, 0.0325970873, 0.0537147820, 0.0597247779, 0.0683444291, -0.0114171542, 0.0177096128, 0.0556445718, 0.0655876398, 0.0194593668, -0.0587265939, -0.0420548841, 0.0492993370, -0.0311667733, -0.0688104406, -0.0458039306, -0.0154267214, 0.0501378402, 0.0402550623, -0.0297203548, 0.0110436901, 0.0047758222, -0.0137246326, -0.0556033067, 0.0295346603, 0.0231247842, -0.0341325700, -0.0667518377, 0.0019192994, 0.0061729923, 0.0119553730, -0.0575248636, 0.0610664636, -0.0443406478, -0.0718501061, 0.0371376947, 0.0699187368, 0.0270284489, -0.0701042786, -0.0408844203, -0.0554833263, -0.0320732221, 0.0137212947, 0.0296298116, -0.0051401481, 0.0690221488, 0.0602744371, -0.0074528083, 0.0641241670, -0.0596114285, -0.0155062154, -0.0558133274, -0.0493817031, -0.0439483747, -0.0562507510, 0.0358356908, -0.0145980790, -0.0446832962, 0.0528377444, 0.0296964347, 0.0353846624, -0.0697211549, 0.0439417735, -0.0475901924, 0.0156138241, 0.0049206316, -0.0521858782, 0.0076244697, -0.0360407569, -0.0552521944, -0.0177435949, -0.0626477525, 0.0004130378, 0.0115043744, 0.0031459630, 0.0008385181, -0.0057195872, -0.0489093736, 0.0473165587, -0.0099317953, -0.0157110579, -0.0242804028, -0.0237613209, -0.0323620848, -0.0257979520, -0.0599787869, -0.0633970946, -0.0089343265, -0.0420907773, -0.0371520109, -0.0613626949, -0.0579515658, -0.0624239519, -0.0702271312, -0.0094857365, 0.0348805785, 0.0356525257, -0.0658367649, 0.0463953987, -0.0480065867, 0.0501566976, 0.0373728052, -0.0556936413, 0.0119380951, -0.0536816493, 0.0308853984, -0.0264423676, 0.0220559612, 0.0690944791, 0.0555276275, 0.0714468062, 0.0091837868, -0.0586757138, -0.0274473913, -0.0660660267, -0.0447294936, -0.0041330606, -0.0644261390, -0.0638092384, -0.0375599414, 0.0127724484, 0.0637021363, 0.0038001314, -0.0440510139, 0.0157167688, 0.0319751948, -0.0297633521, 0.0191292092, -0.0171781592, -0.0625708923, -0.0645423830, -0.0430245474, 0.0178158656, -0.0654928610, -0.0230594538, 0.0670273751, -0.0465687886, 0.0615491271, 0.0071394071, -0.0588251837, 0.0456851348, -0.0398836955, -0.0621087812, -0.0306930840, -0.0110820793, 0.0363485068, 0.0505697727, 0.0244052336, 0.0310492888, -0.0060306117, -0.0157865435, -0.0218107179, -0.0095346421, 0.0286147892, -0.0555033721, 0.0645672679, 0.0438308716, -0.0353466496, -0.0330727398, -0.0507925414, 0.0692316890, -0.0074864104, -0.0234017745, 0.0013197958, -0.0666829050, 0.0327190831, 0.0269437060, 0.0386871174, 0.0195953846, -0.0390134156, 0.0439395010, -0.0171795525, 0.0245228931, 0.0484268218, 0.0210101232, -0.0447829217, -0.0278827809, -0.0517653376, -0.0455189571, 0.0376499817, 0.0178334638, 0.0551897883, 0.0008631945, -0.0650252625, 0.0378161967, -0.0498614684, -0.0631857961, 0.0351823121, 0.0424553454, 0.0453189015, 0.0608958900, -0.0104702711, 0.0032413229, -0.0384089202, -0.0439145863, -0.0194882713, -0.0474026799, 0.0213504136, 0.0159911439, 0.0588772297, -0.0520377494, -0.0342776179, 0.0478947610, -0.0649576262, -0.0563781261, 0.0640365630, -0.0360633470, 0.0643519610, -0.0044840872, -0.0605298355, 0.0330395997, -0.0707440451, -0.0508668199, -0.0670520663, -0.0106112249, 0.0534960777, 0.0107692108, -0.0503109023, 0.0664392710, -0.0458639786, 0.0478664413, -0.0327151418, -0.0659377649, 0.0399941951, 0.0413875207, -0.0141058564, -0.0211407728, -0.0680279136, 0.0156570971, 0.0018969700, -0.0466332287, 0.0595614910, 0.0572971851, 0.0109681040, -0.0616283454, -0.0650935173, 0.0143540576, -0.0140185542, 0.0510324016, 0.0156891346, -0.0170492828, 0.0141180754, -0.0483887233, -0.0091082975, -0.0573260970, 0.0607377589, 0.0586222112, -0.0407136641, -0.0501545630, 0.0148171186, -0.0209321603, 0.0596686453, -0.0192101113, -0.0695901290, 0.0314445868, -0.0065978393, 0.0287248120, 0.0199855044, -0.0336486213, 0.0064351186, -0.0307045430, -0.0620909184, 0.0198463053, -0.0266901404, -0.0048058257, 0.0719007552, -0.0289562009, 0.0280952826, 0.0130850747, 0.0141633302, 0.0117443204, -0.0419774875, -0.0632129833, 0.0269375145, -0.0422035456, 0.0225805491, -0.0572548956, -0.0005818680, 0.0190225467, -0.0437952057, -0.0162405670, -0.0451692045, -0.0200480446, 0.0475539565, -0.0222383477, 0.0458206758, 0.0685951859, -0.0417079851, -0.0316577591, 0.0661619604, -0.0614801124, -0.0570730083, -0.0076436400, -0.0574451461, -0.0267240703, -0.0403941572, 0.0311232582, -0.0696563721, -0.0278965980, -0.0101231150, -0.0276100077, -0.0304240957, 0.0117069110, -0.0464318916, -0.0626364350, -0.0592877790, 0.0109342933, -0.0235015377, 0.0192119405, -0.0559246689, -0.0289011076, 0.0339020342, 0.0292330831, -0.0706694499, 0.0313148871, 0.0688062757, -0.0062504411, 0.0626821816, -0.0545974076, -0.0569745339, -0.0255603679, -0.0010391474, 0.0309420601, -0.0245993212, -0.0292189941, -0.0287671909, -0.0253135599, 0.0592619479, 0.0106239617, 0.0178430676, 0.0102538988, 0.0643831491, -0.0718993843, -0.0686425269, -0.0660218000, 0.0635881573, -0.0018377602, -0.0435432717, 0.0161095038, 0.0333065242, 0.0128085315, 0.0012136549, 0.0662669539, -0.0379821844, 0.0392217711, -0.0339066312, -0.0121303760, -0.0642417669, -0.0682483613, 0.0170670599, -0.0338499881, -0.0714139417, -0.0313785858, -0.0237140357, -0.0464115366, -0.0443450511, -0.0309587643, 0.0718994439, 0.0339995995, 0.0701768845, -0.0433905981, -0.0505525991, 0.0065893382, -0.0194759332, -0.0519417748, 0.0050419345, 0.0236203298, 0.0113042817, -0.0283619277, -0.0133365095, 0.0442675874, -0.0677081496, -0.0673308969, 0.0162292793, -0.0026945397, 0.0191558599, -0.0068164244, 0.0431001335, -0.0600382499, 0.0503182486, 0.0425625443, 0.0543219000, -0.0360000283, 0.0108750015, -0.0432197042, -0.0405741706, 0.0530684590, -0.0575733520, -0.0270505622, 0.0081665292, 0.0016538426, 0.0695401281, 0.0320066363, -0.0113928579, 0.0375661328, -0.0081470981, 0.0113607198, 0.0497520342, 0.0086495951, 0.0615898669, 0.0423155427, -0.0439601466, -0.0197742768, 0.0716327280, -0.0602272302, -0.0483343340, -0.0359323397, -0.0528681278, -0.0116862804, -0.0007111728, 0.0326767340, 0.0100105330, -0.0174897164, 0.0384784341, -0.0319519192, -0.0497106723, -0.0522470474, -0.0314267091, 0.0660928786, -0.0135835223, -0.0052810833, -0.0132296756, 0.0548454672, -0.0096879303, -0.0013021454, 0.0384532437, -0.0302985571, -0.0486442037, -0.0006573200, 0.0105074197, -0.0465425327, -0.0075421035, 0.0575499237, 0.0188428462, -0.0062543154, -0.0196656846, 0.0388671458, 0.0219810978, -0.0561019331, -0.0297195464, 0.0408075750, 0.0507857800, 0.0168902427, 0.0573110580, -0.0689202845, 0.0199064910, 0.0301238969, 0.0208264291, -0.0334770232, 0.0708007067, 0.0184753463, -0.0374602489, 0.0461593270, 0.0050899759, 0.0117546916, 0.0124319047, 0.0098772347, -0.0016235784, -0.0582223088, 0.0534344614, 0.0012146533, 0.0094265118, 0.0601981431, 0.0130774304, -0.0048414096, -0.0148592554, -0.0482095890, 0.0682466030, -0.0083844289, -0.0429314636, -0.0629902780, 0.0549569279, 0.0546594113, 0.0647822767, 0.0267389566, 0.0719029754, -0.0026748702, 0.0272674263, 0.0614833087, -0.0376989171, 0.0474742725, -0.0329521410, -0.0192240514, 0.0528407097, 0.0621460825, 0.0105625466, 0.0115595683, 0.0598730743, 0.0432713926, -0.0202807114, 0.0567935407, -0.0183550082, 0.0594868660, 0.0714255869, 0.0653543323, 0.0552631170, 0.0207316354, 0.0329547226, -0.0613019727, -0.0368286893, 0.0449302271, 0.0308028385, 0.0536195934, 0.0638255477, 0.0003714859, -0.0590735413, -0.0721572712, 0.0556471497, -0.0025788918, 0.0708454102, 0.0272951350, 0.0620796382, 0.0174627006, -0.0597592667, 0.0386691988, 0.0444505960, 0.0053605437, -0.0053415149, -0.0521680862, -0.0359207429, 0.0552548766, -0.0277637839, -0.0422302000, -0.0442658514, 0.0453625023, 0.0511332601, -0.0509830341, -0.0507420748, -0.0455092192, -0.0259779654, 0.0004877001, -0.0648899674, 0.0218972638, -0.0473322198, -0.0594455265, 0.0086611584, 0.0401185974, -0.0018099770, -0.0352154858, 0.0285795182, 0.0597467571, -0.0695930421, -0.0438116044, -0.0406482816, -0.0128648989, -0.0045702383, 0.0036862791, 0.0438207090, -0.0420641415, 0.0342610627, -0.0585224703, 0.0003043786, 0.0247651264, 0.0199221149, -0.0209987499, 0.0291349441, 0.0549087077, -0.0109468177, 0.0039639175, 0.0195663050, -0.0566984937, -0.0131485648, 0.0685502738, 0.0365211889, 0.0211089030, 0.0595841408, 0.0257490352, 0.0520463735, 0.0402006581, -0.0657026619, -0.0710379481, 0.0005297139, 0.0499275252, 0.0721180886, 0.0062240660, 0.0642438680, 0.0377507806, 0.0241114199, -0.0241274722, -0.0167620592, -0.0251465365, 0.0268092081, -0.0324641019, -0.0669617057, -0.0441157445, -0.0459053814, 0.0276063234, 0.0622939169, -0.0578005277, -0.0215702616, -0.0602043606, 0.0717188418, -0.0316448547, -0.0104154870, 0.0052839741, -0.0403098837, 0.0051201507, -0.0601872243, -0.0242411532, -0.0154636651, 0.0572530329, -0.0078763589, -0.0311776474, -0.0394248031, -0.0279955864, -0.0170991309, -0.0497750267, -0.0326044187, -0.0472883582, 0.0113966092, -0.0305870064, 0.0451588258, -0.0225351416, 0.0411054865, -0.0006815940, 0.0001118779, -0.0222458504, -0.0344325118, -0.0015715435, 0.0318605527, -0.0047215521, -0.0232137963, 0.0013495460, -0.0245358497, 0.0611378103, -0.0708718896, 0.0327899233, 0.0708021075, 0.0441542715, 0.0644276887, -0.0219362751, -0.0089072064, -0.0323080383, -0.0071127936, -0.0431976467, -0.0116245598, 0.0683475733, -0.0533236489, 0.0268836617, 0.0661332905, -0.0548365042, 0.0435417742, 0.0262356177, -0.0038428530, -0.0419503041, 0.0061046481, 0.0040446520, 0.0173255652, 0.0455434099, -0.0457465462, 0.0104276314, -0.0411739200, -0.0611056499, -0.0681946278, -0.0073172227, -0.0712430775, -0.0421285778, -0.0537145957, 0.0465867519, 0.0380563438, -0.0155951045, -0.0557707921, 0.0421776026, 0.0297534615, -0.0331027322, -0.0128368884, 0.0217003226, 0.0313003808, -0.0566794127, -0.0536601730, 0.0068703517, 0.0450814143, 0.0549906194, -0.0620733351, 0.0419442505, -0.0435454547, 0.0170773789, -0.0030992478, -0.0667743236, -0.0001421794, 0.0294948816, 0.0715558678, 0.0205005035, 0.0192179382, 0.0596608520, -0.0655200854, 0.0340182334, 0.0681166798, 0.0406413600, -0.0209364630, 0.0036766604, -0.0043456405, -0.0551469922, 0.0479008555, 0.0181645006, 0.0416841358, -0.0514893830, 0.0709840357, 0.0705409050, 0.0553838015, -0.0316254608, 0.0515456274, -0.0362831950, -0.0583460890, 0.0061868131, 0.0185007825, 0.0653408170, 0.0407221839, -0.0378423668, 0.0141428709, -0.0238674842, 0.0715562999, -0.0511467531, 0.0706712455, 0.0208364055, 0.0289599150, -0.0312439799, -0.0350525603, 0.0302976593, 0.0087856129, -0.0647284314, -0.0187945776, 0.0574238002, -0.0025284290, -0.0562343337, -0.0436981283, -0.0319520719, 0.0472944528, 0.0416738316, -0.0047534332, -0.0565375090, -0.0371172056, -0.0324337147, 0.0670376122, 0.0332188606, -0.0287108198, -0.0014842600, -0.0015202165, -0.0265892223, 0.0350099057, 0.0131607652, 0.0615350902, 0.0713870674, -0.0368780680, -0.0590401255, 0.0327264667, 0.0034752935, 0.0559671074, -0.0092970356, 0.0331839472, 0.0433089361, -0.0554728657, -0.0506976321, -0.0107937865, 0.0568430573, 0.0702749789, -0.0337918140, 0.0406507403, 0.0258143991, 0.0185950026, -0.0200388059, -0.0156953298, -0.0692896917, -0.0271999799, 0.0643638819, -0.0568300337, -0.0086299255, -0.0240978263, 0.0115079209, 0.0662882775, 0.0192664638, -0.0344329588, -0.0714120492, 0.0019285977, 0.0718545467, 0.0662135631, -0.0650069192, 0.0204883739, -0.0031969622, -0.0431051105, -0.0467637889, 0.0323496088, 0.0342202038, 0.0312146917, -0.0672225133, -0.0686335936, -0.0138429962, 0.0154781714, -0.0327182040, -0.0349076800, 0.0392236933, 0.0215965509, -0.0080249831, -0.0363035835, -0.0206381902, 0.0397638232, 0.0623424500, -0.0164140239, -0.0018241480, 0.0372032374, 0.0066724122, 0.0343471989, -0.0445192158, 0.0629859269, -0.0142691471, 0.0382794291, -0.0500379726, -0.0079836249, 0.0633801967, 0.0606970340, -0.0568048805, -0.0466452688, -0.0521553382, 0.0706204772, -0.0169290118, -0.0082256645, -0.0118118525, 0.0616458058, -0.0182291269, -0.0465954393, -0.0124942735, -0.0620385967, 0.0633918196, -0.0454665124, 0.0692078769, -0.0190360695, -0.0224457383, -0.0670794100, 0.0494060516, 0.0103434399, 0.0114418119, -0.0039390400, -0.0392464772, -0.0254845582, -0.0692288280, 0.0432371348, 0.0316438377, -0.0362344310, 0.0527766123, 0.0473974794, -0.0595609471, 0.0062642545, -0.0134600699, 0.0505202711, 0.0570076257, 0.0414756685, 0.0205293447, 0.0026898757, -0.0079277381, -0.0687852204, -0.0182381421, 0.0476828143, -0.0407884419, -0.0007404387, 0.0718639195, 0.0170795023, -0.0000788569, 0.0403152481, -0.0035834014, -0.0440995842, 0.0405699015, 0.0511185676, 0.0297559574, -0.0470573828, 0.0458428860, -0.0710360184, -0.0407995582, -0.0007233396, 0.0017774850, 0.0216118470, 0.0125827342, -0.0105506256, -0.0167212114, 0.0259410068, 0.0226319283, -0.0483609699, 0.0667600334, 0.0491890088, -0.0003578439, 0.0329376683, -0.0423997194, 0.0108178407, 0.0047215372, -0.0573087335, -0.0346020460, -0.0387452878, 0.0206047967, -0.0084971264, -0.0087836832, 0.0032413378, 0.0171217546, 0.0266706124, 0.0071743205, 0.0452814773, 0.0173306465, -0.0044673756, -0.0549382456, 0.0705545843, -0.0059307665, -0.0282581560, 0.0167017877, -0.0338805653, 0.0320058465, 0.0428026393, -0.0311946310, 0.0637745261, 0.0473459139, 0.0626973212, -0.0420218110, -0.0084860474, 0.0057943165, 0.0679045469, 0.0144776702, -0.0595223345, -0.0211874023, 0.0288227499, -0.0193001702, -0.0515695140, 0.0230757147, -0.0663157925, 0.0638522208, 0.0618490875, -0.0568522327, 0.0367786139, -0.0543632433, -0.0315851308, 0.0546975583, 0.0106272474, -0.0249459445, 0.0498422012, 0.0672031194, 0.0454536453, -0.0413026884, 0.0082208663, -0.0208344795, -0.0616854168, 0.0106481984, -0.0688569695, -0.0117920488, -0.0420810543, -0.0168193914, -0.0684698895, -0.0246052593, -0.0255977400, 0.0578444898, -0.0149852410, -0.0156056359, -0.0040232465, -0.0060090199, -0.0085651278, -0.0198906586, 0.0497746319, -0.0703293011, 0.0609484017, 0.0408769324, 0.0629107803, 0.0312753990, -0.0631778315, -0.0440890715, 0.0255896375, 0.0497219414, 0.0039907098, 0.0164921209, -0.0163557455, 0.0469051078, 0.0603197813, 0.0475106314, 0.0663658231, -0.0372092910, 0.0058998615, -0.0330426134, 0.0618974566, -0.0119278729, -0.0040872544, 0.0152473152, 0.0046021864, -0.0446242765, -0.0295220166, 0.0071904585, 0.0702938586, 0.0568109006, -0.0115244724, 0.0004914105, -0.0485602915, 0.0055491254, 0.0259659588, 0.0375973508, 0.0689225942, 0.0328396112, -0.0137408413, -0.0598846674, 0.0220186561, 0.0504656881, -0.0522219762, -0.0545948409, 0.0571286827, 0.0503549501, 0.0192249268, 0.0173290595, -0.0289712399, -0.0166128613, -0.0528761670, -0.0550335199, 0.0494438857, -0.0370216407, -0.0291024223, 0.0297908336, -0.0197603740, -0.0371940136, -0.0175438970, 0.0570005178, 0.0530288517, -0.0489597693, -0.0661500394, 0.0105469748, 0.0014551580, -0.0154977515, 0.0271377936, 0.0048773214, -0.0040200949, 0.0262389034, 0.0328251049, -0.0458549820, -0.0654034615, -0.0481942073, 0.0245441571, 0.0562834442, -0.0570358075, -0.0531030819, -0.0094551817, -0.0199183263, 0.0118073747, 0.0320414603, 0.0452065617, -0.0577074066, 0.0039526001, 0.0690251738, 0.0187371075, 0.0162453502, -0.0601783991, -0.0007196888, -0.0712867975, -0.0394817404, 0.0407737345, 0.0286121964, 0.0571270585, 0.0302964747, -0.0702141374, 0.0177179053, -0.0268251933, 0.0706319660, 0.0601306558, 0.0433067530, -0.0624452531, 0.0279738903, -0.0254734419, 0.0174266398, -0.0026322156, -0.0418026559, -0.0689376965, 0.0585170537, -0.0135790519, 0.0613171905, -0.0592798442, 0.0559127629, -0.0404550508, 0.0363205001, 0.0109621808, -0.0651961043, 0.0362986475, 0.0459966734, 0.0100975782, -0.0573042259, 0.0509909168, -0.0059300959, -0.0150720291, -0.0048981234, 0.0238632485, -0.0028733462, 0.0016932636, 0.0609472394, 0.0057728067, 0.0569566637, -0.0151886567, -0.0398021750, -0.0710684508, 0.0216705054, 0.0517824590, -0.0312335677, -0.0042312518, 0.0495436862, -0.0565428436, 0.0072087124, -0.0092367306, 0.0327241942, -0.0352719761, 0.0169612244, -0.0417717882, 0.0432196185, -0.0551034100, 0.0051261783, -0.0650258437, -0.0286415145, -0.0312781148, -0.0609226599, 0.0318278223, 0.0075570270, -0.0000480041, 0.0547495633, 0.0074847043, 0.0449245274, 0.0216121376, 0.0494235307, -0.0527486317, 0.0690073818, -0.0143657960, 0.0609878153, -0.0437748507, -0.0604768246, -0.0305410139, 0.0695163161, -0.0556543581, 0.0513205007, -0.0102144293, -0.0257011317, 0.0110818893, 0.0251088738, -0.0025775880, -0.0073922575, -0.0528124496, -0.0297699422, 0.0162636936, -0.0537086092, 0.0689524561, -0.0539042130, 0.0605325699, -0.0677376091, 0.0374617651, -0.0165926106, 0.0371702015, 0.0025747940, 0.0266169757, 0.0365992561, -0.0019741058, 0.0147491544, 0.0620135814, -0.0578223616, -0.0113883354, 0.0643425584, -0.0031358600, -0.0007058084, -0.0161522627, -0.0144383721, 0.0594314039, -0.0121339709, -0.0489508733, 0.0323901847, 0.0074000508, 0.0232883021, 0.0523328707, -0.0595586933, -0.0374889821, -0.0464000255, -0.0690154880, -0.0010184944, 0.0515793040, -0.0721546561, 0.0088812932, 0.0488653257, -0.0432358272, -0.0454387255, -0.0251315497, 0.0291485488, -0.0163545758, 0.0562242121, -0.0698937923, -0.0532210469, -0.0463040695, 0.0258902311, 0.0298480242, 0.0581285506, -0.0446407646, -0.0303702205, 0.0423716530, 0.0214728713, 0.0312169492, 0.0422523990, 0.0516094640, -0.0256147385, 0.0434249416, -0.0707328245, 0.0278127864, 0.0528402328, -0.0448933840, -0.0539051406, 0.0437941402, 0.0681969523, -0.0470792502, 0.0096226186, 0.0235102996, -0.0461295098, 0.0521750748, -0.0578268692, 0.0222505629, 0.0243502930, 0.0535639226, 0.0456466973, -0.0563692674, -0.0651760250, -0.0462816805, 0.0152047053, -0.0249103792, 0.0523228943, -0.0575296283, 0.0326260999, -0.0059662610, -0.0306004770, 0.0660295784, 0.0458665788, -0.0675600916, -0.0602410100, -0.0334595069, -0.0020577610, 0.0073558614, 0.0031977519, -0.0059310198, 0.0164235234, -0.0658011511, 0.0236091837, 0.0044245720, 0.0660941601, 0.0721192062, 0.0685587078, 0.0075526536, 0.0019780472, 0.0405687839, 0.0059218481, -0.0681209117, -0.0253319703, -0.0194119625, 0.0455397442, -0.0054894909, 0.0136906505, -0.0473283976, -0.0672769397, -0.0407285467, 0.0014599934, 0.0528727472, 0.0407856405, -0.0611253493, -0.0342618898, -0.0477841273, 0.0060405061, 0.0353047028, -0.0130367726, -0.0544448011, -0.0287677385, 0.0159030780, -0.0632854402, -0.0415259451, 0.0555482656, 0.0081798807, 0.0340168402, -0.0367902666, -0.0083040744, 0.0564874858, 0.0215987861, -0.0658848435, 0.0566875190, 0.0712994188, 0.0570418984, 0.0523202270, 0.0612885356, 0.0064477772, 0.0251559317, -0.0050038546, 0.0663545281, 0.0023715198, -0.0290124826, -0.0225057378, 0.0258111507, 0.0155928880, -0.0277097188, 0.0370199010, 0.0623641908, 0.0121204108, -0.0652810857, -0.0602724105, 0.0589977503, -0.0134448074, 0.0195956901, 0.0013264939, -0.0243539773, -0.0648019910, -0.0482120290, -0.0707523376, -0.0612048097, 0.0650577843, 0.0659228563, 0.0479041934, -0.0384931453, -0.0090430155, 0.0342203006, 0.0375325456, 0.0056402683, 0.0467348322, 0.0062144250, 0.0193561092, 0.0584940314, -0.0140571967, 0.0488175228, -0.0487468764, 0.0229578689, -0.0054338574, 0.0202030391, 0.0639382899, -0.0122529194, 0.0217142776, 0.0560834110, 0.0531601608, 0.0298316479, 0.0433679223, 0.0042117089, -0.0507755578, 0.0202393830, -0.0580542684, 0.0707695186, 0.0335395485, -0.0706753060, 0.0517309457, -0.0016122237, -0.0088473484, 0.0020338446, -0.0185357258, -0.0554056913, 0.0567716062, 0.0425589606, -0.0509326681, -0.0124909207, -0.0322687551, 0.0482163653, 0.0502130464, 0.0401263759, 0.0264018625, 0.0154191181, 0.0233348981, -0.0364496484, -0.0591533966, -0.0343441553, 0.0254277065, 0.0036476329, 0.0162990317, 0.0097196922, 0.0676768869, 0.0271021649, -0.0131812207, 0.0312620997, 0.0483164042, -0.0272732973, 0.0091971532, 0.0282566398, 0.0246839449, -0.0646848530, 0.0499242544, -0.0528352335, -0.0401233993, 0.0272781998, -0.0133400187, -0.0694551319, -0.0703011528, -0.0450524241, -0.0681106895, 0.0609003901, 0.0258826613, -0.0024806783, 0.0569177121, 0.0576547086, 0.0668618679, -0.0284237154, 0.0358097404, -0.0500438735, 0.0681271106, 0.0376250818, 0.0710077286, -0.0398795865, 0.0375753418, 0.0245498866, 0.0706554502, -0.0136839077, -0.0645819902, -0.0570571758, -0.0594945475, 0.0503336638, 0.0192469209, 0.0473715514, 0.0380814523, 0.0411720946, 0.0350793302, -0.0673476085, 0.0273174122, -0.0476575382, 0.0490442887, -0.0365279019, 0.0284743905, 0.0376038179, -0.0287472829, 0.0021427646, 0.0423442796, 0.0345163941, -0.0300418548, 0.0662380010, 0.0297613889, 0.0198971629, 0.0680754185, 0.0076965317, 0.0327645242, 0.0575100332, -0.0152145177, -0.0089557990, 0.0605455637, 0.0081342608, 0.0299385861, 0.0197007507, 0.0384014547, -0.0534396917, 0.0590399951, 0.0645185858, -0.0292923450, -0.0364653058, -0.0543269739, -0.0439915136, -0.0019102693, -0.0144878924, -0.0667883977, -0.0357271023, -0.0003048256, -0.0568274707, 0.0367018729, -0.0662187338, -0.0400445946, -0.0447142869, -0.0006329864, 0.0073034689, 0.0043584481, -0.0070757270, 0.0234930590, 0.0223730206, 0.0340461954, -0.0585905574, -0.0095332488, 0.0481835753, 0.0447005183, -0.0655223206, -0.0335936807, -0.0226046219, 0.0105061308, 0.0010159165, 0.0079699457, -0.0363032036, 0.0526181236, 0.0600072443, -0.0308010019, -0.0664898306, -0.0406724885, 0.0446441844, 0.0714463890, 0.0341093242, -0.0115373395, -0.0398806706, -0.0545842275, -0.0404601283, 0.0131693184, -0.0072421506, 0.0383932814, 0.0602394044, 0.0073811784, -0.0095225796, 0.0631219894, 0.0509161875, 0.0085367039, 0.0012759194, -0.0509468839, 0.0098882318, -0.0540495887, 0.0016950145, 0.0062966198, 0.0235339180, 0.0629191250, 0.0296204016, -0.0076482520, -0.0164346211, -0.0197097696, -0.0650328845, -0.0044477284, 0.0566751957, -0.0383464955, -0.0660473034, 0.0024553537, -0.0200987011, 0.0647369325, 0.0703634024, -0.0171180256, -0.0482191369, -0.0100052170, 0.0104576051, 0.0601287782, 0.0382745713, -0.0684857890, 0.0200544819, 0.0252902284, -0.0589633174, 0.0116459280, -0.0354746506, 0.0476148501, -0.0580044053, 0.0387400612, 0.0272816941, -0.0070278272, -0.0547848493, 0.0343986973, 0.0637795478, 0.0282382667, 0.0208154991, 0.0075518414, -0.0691006631, 0.0262781978, 0.0197003558, 0.0641229898, -0.0565309376, -0.0264128223, -0.0287432559, 0.0488486513, 0.0060171410, 0.0260749608, -0.0239293911, 0.0041180179, 0.0032711923, -0.0095805451, 0.0029383153, -0.0099938586, -0.0242110938, -0.0546165891, -0.0494994149, -0.0278313532, -0.0296426341, 0.0670571178, -0.0362517387, -0.0588807426, -0.0582649447, 0.0710068941, -0.0448449664, 0.0078952834, 0.0162046254, 0.0718286186, 0.0207863227, -0.0065589696, -0.0173749477, 0.0002795681, -0.0053799525, -0.0576661788, -0.0452345908, 0.0345942676, -0.0443892926, 0.0627037585, -0.0318526551, -0.0515444949, -0.0272960439, -0.0432765186, -0.0399565659, 0.0460958332, -0.0061446875, 0.0510734692, 0.0674181879, -0.0382988341, 0.0473191738, 0.0054982454, -0.0246615224, -0.0369842835, 0.0719705671, 0.0646535456, 0.0524339452, -0.0696573257, 0.0424236506, 0.0288212895, 0.0562710017, 0.0213063285, 0.0012287423, 0.0354995653, -0.0006412268, 0.0094746724, -0.0395283327, -0.0567915626, -0.0299361907, 0.0125138238, -0.0538230315, 0.0307102725, 0.0214518309, -0.0583366603, 0.0590337962, -0.0091407672, 0.0039568096, 0.0194056109, 0.0649391711, 0.0720833838, -0.0446766540, -0.0673737600, 0.0458597615, -0.0176924430, 0.0715748370, -0.0132014379, 0.0184386671, 0.0055805445, 0.0245886892, 0.0517144054, -0.0433709472, -0.0363594703, -0.0216717944, 0.0604805052, -0.0359979309, 0.0034748465, -0.0716568083, -0.0663493648, 0.0110209584, -0.0158073977, -0.0327067114, 0.0460243598, 0.0372056291, 0.0252024904, -0.0711423159, -0.0563794002, -0.0266344585, 0.0065323189, -0.0159141980, -0.0233163983, 0.0233004987, -0.0062072873, -0.0069130212, 0.0067458451, -0.0519717783, 0.0288465098, -0.0053716600, 0.0565997064, -0.0566486120, -0.0145694837, 0.0646947622, -0.0691580996, 0.0585915148, 0.0530027747, -0.0593140349, -0.0000850335, 0.0621908158, -0.0267177895, 0.0307138860, -0.0208862051, -0.0457415581, 0.0295300484, 0.0434278995, -0.0387939140, -0.0309339873, 0.0506008789, 0.0024328977, 0.0349861607, 0.0543755740, 0.0066495761, 0.0411467999, 0.0547266304, -0.0021785870, 0.0617685765, -0.0685490966, -0.0556248501, -0.0013240501, 0.0403790176, 0.0298325568, 0.0173767582, -0.0719594508, -0.0045000017, -0.0020388216, 0.0564010292, 0.0087905675, -0.0178909674, 0.0195597112, 0.0112204850, -0.0540198535, 0.0518271774, 0.0696353912, -0.0040286705, 0.0042227730, 0.0158176199, -0.0105715655, 0.0677487701, -0.0136063583, -0.0399760790, 0.0111652538, -0.0445600301, 0.0418702438, 0.0384328887, -0.0174883753, -0.0116457939, 0.0637124777, -0.0274464972, 0.0181683525, -0.0237269066, 0.0072986707, -0.0457274467, 0.0127283186, -0.0045140088, -0.0643149614, -0.0581116527, 0.0578946769, -0.0400024541, 0.0045487285, 0.0391012207, 0.0473914966, 0.0171844214, -0.0574773401, 0.0305363461, 0.0265610069, 0.0156963319, 0.0616882592, 0.0376382321, 0.0077155828, -0.0130207017, -0.0299577154, 0.0201967582, 0.0476390049, -0.0267381631, -0.0513860583, 0.0273337588, -0.0030223876, 0.0091951415, 0.0132586882, -0.0315441452, -0.0673163757, -0.0570429489, 0.0175492838, -0.0033984482, -0.0115512945, 0.0664575398, 0.0444063246, 0.0258347765, 0.0035560280, -0.0517248511, -0.0516024083, -0.0298285484, 0.0079270303, -0.0683715940, -0.0290992558, 0.0594714582, -0.0239042193, 0.0453574210, -0.0407956876, 0.0322178751, -0.0544332191, -0.0163715072, -0.0211574435, -0.0650899410, 0.0692912787, -0.0044526681, 0.0270373449, 0.0237874091, -0.0029515624, -0.0115147308, -0.0708593279, -0.0290148742, -0.0313143358, 0.0150212720, 0.0411549360, 0.0558178723, 0.0580245703, 0.0686438680, -0.0286548659, 0.0389468819, 0.0289099514, -0.0180511437, 0.0141797215, 0.0720306188, 0.0399055630, 0.0545280427, -0.0473200530, -0.0198805258, -0.0214316100, -0.0099560395, -0.0570563525, -0.0133081526, -0.0506895781, 0.0461237654, -0.0493976697, 0.0074624270, 0.0648937225, 0.0450102314, 0.0468790010, 0.0659771711, -0.0409332700, -0.0653115436, 0.0149978176, 0.0432247967, -0.0224909224, 0.0129549056, 0.0621001720, -0.0333675891, -0.0148630403, -0.0126419403, 0.0009215772, -0.0344022624, 0.0620434433, 0.0320514739, -0.0239665769, -0.0263095684, 0.0164622888, -0.0362383537, -0.0027067512, -0.0119588636, -0.0005477443, -0.0134431720, -0.0480579808, -0.0285028294, -0.0468001813, 0.0643589497, 0.0242923573, 0.0549531579, 0.0264137536, -0.0324101597, -0.0635406226, 0.0158061609, -0.0698142275, -0.0301691666, -0.0565045625, 0.0308921784, 0.0191252679, 0.0474235862, 0.0214408189, -0.0658814162, 0.0397572145, 0.0167757198, 0.0289163515, 0.0141098127, -0.0213390402, 0.0338950828, -0.0268115997, 0.0131999105, -0.0704569891, 0.0329839066, 0.0682450682, 0.0334880203, -0.0543282256, 0.0153572261, 0.0289775357, -0.0194113068, -0.0054793730, 0.0458520204, -0.0082685277, -0.0721334368, 0.0646070987, -0.0366124883, -0.0256763212, 0.0061810613, 0.0385632291, 0.0143793523, -0.0003789514, 0.0148370266, 0.0022190884, -0.0294682123, 0.0661500841, -0.0298383385, 0.0095386133, 0.0097561404, -0.0531589687, 0.0302259102, -0.0224784650, -0.0200834051, -0.0593461767, -0.0602250248, 0.0378171951, -0.0685892329, 0.0342809930, -0.0046426430, 0.0286952704, -0.0616763309, 0.0480075851, -0.0702265576, -0.0039241388, 0.0005155727, 0.0116593540, -0.0215073377, 0.0528499633, 0.0417182595, 0.0045952052, 0.0674265772, 0.0023252517, -0.0394209996, -0.0240800157, 0.0021982342, -0.0591669902, -0.0345037803, 0.0218107402, 0.0394254923, -0.0184949487, -0.0680603087, -0.0684045404, 0.0023644641, -0.0417986661, 0.0096229240, -0.0459455550, 0.0493335575, -0.0033728480, -0.0392424688, -0.0005248114, -0.0417346396, 0.0422683135, -0.0125547908, 0.0441766232, 0.0081653222, -0.0715766400, 0.0718937069, 0.0295345932, -0.0588295013, -0.0045920387, -0.0171406679, 0.0461636484, 0.0701827705, 0.0613885522, 0.0470327958, -0.0058464184, 0.0550920516, 0.0527644232, 0.0493156686, -0.0714668334, 0.0257360935, 0.0527794138, -0.0713997409, 0.0070755035, -0.0191719495, 0.0286448672, -0.0352965966, 0.0522311851, -0.0529339761, 0.0203958079, -0.0371330343, -0.0550249517, 0.0558754504, 0.0656910688, -0.0523891374, -0.0234747492, -0.0294328518, -0.0626935214, 0.0460627973, 0.0695168525, 0.0709743351, -0.0104262754, 0.0431570560, 0.0155643895, -0.0219912156, -0.0689750016, 0.0700928867, 0.0357419699, -0.0281808637, -0.0586407855, -0.0331792496, -0.0456265137, -0.0352068320, -0.0258928277, -0.0479800925, -0.0395125374, 0.0651667714, -0.0595344678, 0.0272304714, -0.0204699114, 0.0557520390, 0.0534641743, 0.0209110156, 0.0621877611, 0.0330852643, 0.0308344662, 0.0077843890, -0.0018333197, -0.0621944666, 0.0397449657, 0.0427879989, 0.0594685525, 0.0596416295, -0.0579865947, -0.0454577543, -0.0206410289, -0.0484647416, 0.0663152933, -0.0120040663, 0.0269504860, -0.0279627405, 0.0624670237, -0.0330685265, -0.0121929571, -0.0191102140, -0.0074908510, -0.0412778631, -0.0308642685, -0.0443455875, 0.0015036687, -0.0639440641, 0.0149030313, 0.0290901214, -0.0638917908, 0.0344811007, -0.0720565468, 0.0327534750, 0.0504923910, 0.0345112979, -0.0641839057, 0.0628915131, -0.0683639497, 0.0120102912, 0.0354814604, -0.0638963655, -0.0535115078, 0.0496345162, -0.0707330331, 0.0465029702, -0.0434395336, 0.0294798762, 0.0518194512, 0.0316355973, -0.0241837353, 0.0246726051, -0.0696411282, -0.0171053261, 0.0448641703, -0.0286135375, -0.0623734482, -0.0553294681, 0.0375441983, 0.0167153105, 0.0396608561, 0.0071595535, -0.0196905844, -0.0336584821, 0.0309271216, -0.0585305244, -0.0109054558, -0.0354890153, -0.0324270539, 0.0523295328, 0.0087799355, 0.0674419254, -0.0062409788, -0.0476409718, -0.0618653446, -0.0455624051, -0.0697871298, 0.0079555959, -0.0260102116, -0.0059540123, 0.0651784986, -0.0135564245, 0.0093237087, -0.0163615644, -0.0400824659, 0.0372930691, -0.0143171698, 0.0514073074, 0.0064519793, 0.0186869353, 0.0460650548, -0.0620866008, -0.0004338250, 0.0642477572, -0.0154351890, -0.0487081781, 0.0276739299, -0.0272178575, -0.0043920800, -0.0398107953, -0.0661703274, -0.0086632371, 0.0458999425, 0.0252493471, -0.0010512769, -0.0168060213, 0.0691883862, 0.0237499103, 0.0006253645, -0.0441050082, 0.0062971190, 0.0620502234, 0.0203355849, 0.0295028463, 0.0005473346, 0.0414546430, 0.0032250285, -0.0479152389, -0.0676413551, -0.0634352192, -0.0434203967, -0.0459053293, 0.0272072107, -0.0282927565, -0.0076677501, 0.0300973803, 0.0281471759, 0.0512176752, 0.0196450874, -0.0197351500, 0.0588083416, -0.0478259027, 0.0102030188, 0.0503693298, 0.0340228081, -0.0653515980, -0.0073062032, -0.0365936309, 0.0086133778, -0.0573960580, 0.0535600781, 0.0715519786, -0.0398483910, -0.0317271873, -0.0560381301, -0.0446994193, 0.0368736982, -0.0565587096, 0.0155521408, 0.0485607684, 0.0453283116, -0.0471727327, 0.0300333053, -0.0128659680, 0.0267993659, -0.0437314883, -0.0640908703, -0.0040241927, 0.0047846809, -0.0386714898, -0.0447624475, 0.0481583327, -0.0396266691, -0.0108587556, 0.0218708068, -0.0394784175, 0.0592972785, 0.0501441881, -0.0366391428, 0.0555707067, -0.0434604362, -0.0635638684, -0.0618717112, 0.0428810120, 0.0704111308, 0.0602330416, -0.0540829524, 0.0352024809, -0.0255753025, -0.0455967337, -0.0626717731, -0.0554120392, 0.0344752818, 0.0633566678, -0.0643753558, 0.0169768780, 0.0580421239, -0.0290342681, -0.0177597031, 0.0003568232, 0.0541631132, 0.0208155736, -0.0388285145, -0.0045087412, -0.0246160291, 0.0264038965, 0.0003979802, -0.0314747319, -0.0282504819, -0.0624393150, -0.0262129903, 0.0703837872, -0.0229191370, 0.0535049736, -0.0306004770, 0.0501680523, 0.0516294092, -0.0030991435, 0.0596968979, -0.0555246025, 0.0098999292, 0.0117254406, -0.0019128844, 0.0574591756, -0.0278391130, 0.0480072275, 0.0344839543, -0.0080058873, -0.0363040119, 0.0706408173, -0.0025273934, -0.0666343644, -0.0347624086, -0.0011416599, -0.0202232413, 0.0282277167, 0.0290666297, -0.0638274252, 0.0187207609, -0.0044605806, -0.0321220048, 0.0662451386, 0.0122788697, 0.0085425526, 0.0292659998, 0.0242942199, -0.0029414445, 0.0654022247, -0.0306250304, 0.0302858576, 0.0071531236, 0.0104394853, -0.0018077195, -0.0068599060, 0.0069582760, -0.0598197468, 0.0347945467, -0.0399249047, 0.0473247841, -0.0622009039, -0.0703108385, 0.0240936428, 0.0707435459, 0.0558955520, 0.0383325592, 0.0197688043, 0.0678813010, 0.0384649485, 0.0550045222, -0.0066757798, 0.0245654434, -0.0075546354, 0.0014976263, 0.0281802267, 0.0457892194, -0.0238355324, -0.0266226567, -0.0451275110, -0.0706664622, 0.0515554026, -0.0709569752, -0.0144427940, 0.0256758779, -0.0386281833, 0.0335493237, -0.0490680672, -0.0262243971, 0.0633557141, -0.0663679764, -0.0151064433, 0.0389282778, -0.0250486508, 0.0479753762, 0.0458871052, -0.0476117358, -0.0409493893, 0.0103040710, -0.0294386670, -0.0008315668, 0.0505754799, 0.0507360846, -0.0012022778, 0.0457399413, 0.0639471114, 0.0720466226, -0.0484616794, 0.0285749733, 0.0669962317, 0.0607043505, 0.0610380620, 0.0718622357, 0.0718809068, 0.0386968181, -0.0346916541, 0.0310215205, 0.0195661783, -0.0345704891, 0.0718176216, 0.0266685113, -0.0228802003, 0.0189153329, 0.0056049600, -0.0029960275, 0.0696191639, 0.0342090130, 0.0021423697, -0.0322083607, -0.0227998458, 0.0281908438, 0.0634474158, 0.0690718293, 0.0402778983, -0.0427164696, 0.0630860180, 0.0721274167, -0.0055358633, 0.0237690136, -0.0154254511, 0.0067001432, 0.0547586977, -0.0586506091, -0.0533679426, -0.0559539720, 0.0119253770, 0.0195677280, -0.0520451814, 0.0002681613, -0.0163752064, 0.0168595836, 0.0679280311, 0.0246178061, 0.0627727360, 0.0063681528, -0.0287649855, 0.0603432357, -0.0550797172, 0.0544004142, -0.0496543050, 0.0396308526, -0.0330060832, 0.0045026317, 0.0509799197, 0.0541126430, -0.0536658689, 0.0291516855, 0.0603083521, 0.0099891797, -0.0294004343, -0.0706341267, -0.0174911618, 0.0410707444, -0.0107876435, -0.0294411629, -0.0021769330, 0.0430289730, -0.0571640953, -0.0507982001, 0.0349770039, 0.0402232856, 0.0475159287, -0.0629693419, 0.0126857311, 0.0210485458, 0.0626958162, -0.0150550976, -0.0662164912, 0.0356824473, 0.0050706342, 0.0581374913, 0.0354479104, 0.0463808924, -0.0674070194, -0.0618198514, -0.0325502008, 0.0284416974, 0.0623994619, 0.0046017617, -0.0247154646, 0.0265133232, 0.0627556145, -0.0090410709, -0.0480485037, -0.0441056266, 0.0388364494, -0.0243575908, 0.0339570642, -0.0016088635, -0.0481019802, -0.0169710629, 0.0518141389, -0.0243247598, -0.0626198277, -0.0336504988, 0.0495124906, 0.0509142578, -0.0695349500, -0.0648234114, -0.0325953327, 0.0027870387, 0.0038397759, -0.0513439700, 0.0226376429, 0.0341389850, -0.0213781521, -0.0672899857, 0.0543905795, -0.0259707756, 0.0053280964, -0.0384719670, -0.0659050420, 0.0485614091, 0.0367038921, -0.0565653332, 0.0380202979, -0.0002579093, -0.0590375289, -0.0412278399, -0.0182190612, 0.0110816285, 0.0447797552, -0.0112595260, 0.0439709872, -0.0316540748, 0.0125444829, 0.0040158480, 0.0692061186, -0.0368113779, -0.0568821542, 0.0584570765, 0.0474332199, 0.0436610505, -0.0035292208, 0.0419190377, -0.0114319511, 0.0303204581, -0.0484620035, 0.0321763232, -0.0636171773, -0.0538037792, 0.0645143688, -0.0513214990, -0.0275299661, -0.0466251373, -0.0699430183, 0.0225039497, -0.0097380541, -0.0077604726, -0.0229851417, 0.0000480562, 0.0090027228, -0.0530197322, -0.0184049048, 0.0698855072, -0.0200824924, 0.0302043557, 0.0644025505, -0.0489270426, -0.0391908810, 0.0151612610, -0.0163523220, 0.0093748122, -0.0519734845, 0.0468208790, -0.0601404570, -0.0062193796, -0.0487060957, 0.0420912430, 0.0532328337, -0.0367566794, 0.0394981876, -0.0461599156, -0.0667770579, 0.0009878501, 0.0427810252, 0.0212860256, -0.0138690136, 0.0706608891, -0.0067578703, -0.0332946852, -0.0267136581, 0.0569561422, -0.0364855565, -0.0041104481, -0.0276753232, -0.0162361115, -0.0397138372, -0.0365153439, 0.0399625748, -0.0592925102, 0.0033405349, 0.0695686787, -0.0155152157, 0.0229252800, -0.0112665296, 0.0603407621, -0.0543648265, 0.0381771177, 0.0351027474, 0.0305329561, -0.0710793063, 0.0702699423, -0.0361569002, 0.0651141852, 0.0302730054, 0.0713721663, -0.0566559061, 0.0658883750, 0.0132127777, 0.0315385833, -0.0654397085, 0.0252585337, -0.0285696946, -0.0483281054, -0.0353882052, 0.0080979392, -0.0294125490, -0.0657243207, -0.0090375990, 0.0048065484, 0.0085889101, -0.0275167488, -0.0269925222, 0.0491857231, -0.0432268456, -0.0591481663, -0.0594505332, 0.0308940858, 0.0058546439, -0.0031581819, 0.0024361834, 0.0478814617, 0.0529078543, -0.0708644167, -0.0424852148, -0.0376202688, 0.0102847666, 0.0670285374, -0.0043880194, -0.0296907946, -0.0575460643, 0.0647773892, 0.0584120750, -0.0635839328, -0.0368136317, 0.0399924442, -0.0623935983, -0.0069423988, 0.0681954473, -0.0369489267, -0.0691995323, 0.0542486161, 0.0205800310, 0.0528632551, -0.0001292378, 0.0669241250, 0.0472530723, 0.0279217362, -0.0349036567, -0.0566230603, 0.0159673840, -0.0353628919, -0.0554612502, 0.0367645100, -0.0037231147, 0.0304014310, 0.0522989258, 0.0231202990, -0.0354366414, 0.0421573967, -0.0484295040, 0.0676831901, -0.0329622924, -0.0565489344, -0.0603436977, 0.0272454545, 0.0405729488, -0.0213769451, -0.0673897937, 0.0492060632, 0.0366533697, -0.0185432285, -0.0658546239, 0.0553082377, 0.0227225050, -0.0664178282, 0.0232490003, -0.0243807659, -0.0241534524, -0.0368524492, -0.0343577825, -0.0634305403, 0.0507903546, 0.0434624180, -0.0481931567, 0.0494923070, 0.0238345489, 0.0196307600, 0.0419218764, -0.0596165210, -0.0020401627, -0.0068715364, 0.0302439108, 0.0660643429, -0.0015182421, -0.0051650777, 0.0171523839, -0.0330297425, 0.0559746027, 0.0530309826, -0.0313704982, -0.0131411813, 0.0297291949, 0.0099045411, -0.0018700212, -0.0466905385, 0.0580396205, 0.0629652292, -0.0157789364, -0.0142563097, 0.0669324845, 0.0124845877, 0.0046753138, 0.0267742798, -0.0134589151, -0.0258275494, 0.0474136397, -0.0088045225, -0.0526001565, -0.0267661400, 0.0506938472, -0.0400331691, -0.0236134157, -0.0199872404, -0.0435395166, -0.0617842861, -0.0166560858, -0.0091625676, 0.0046987161, 0.0348655954, -0.0404877253, -0.0587537959, -0.0285967104, -0.0345706940, 0.0438002124, 0.0207443014, 0.0455663130, 0.0664507300, -0.0651684701, 0.0596392304, -0.0480728000, -0.0370285586, -0.0345568620, 0.0710280538, 0.0169652998, 0.0234270021, 0.0050972700, 0.0592305958, 0.0349685550, 0.0703986734, 0.0345114022, -0.0191340968, -0.0002661794, -0.0274187773, -0.0532342270, -0.0705398396, 0.0027732179, 0.0253183246, 0.0161358640, 0.0323406458, 0.0700802505, 0.0661508143, 0.0572530031, 0.0530544370, -0.0720355734, -0.0617173016, -0.0472875834, -0.0580646098, 0.0218060762, -0.0357698239, -0.0301889181, -0.0573020577, -0.0134534948, -0.0658909306, 0.0708410293, -0.0070257410, -0.0139201842, 0.0578412265, 0.0691320747, -0.0112008527, -0.0511899590, 0.0254320949, -0.0020943284, -0.0022073016, -0.0156075805, 0.0009537488, -0.0025775135, -0.0634868890, 0.0003613532, 0.0451290756, -0.0152065679, -0.0261118338, -0.0195435397, -0.0229676254, -0.0328310430, 0.0474744961, -0.0434869193, 0.0286751390, -0.0390520953, -0.0575565398, -0.0457902700, 0.0454158559, 0.0433702767, 0.0604261309, -0.0617601275, -0.0235241130, 0.0504044890, 0.0653089583, -0.0313279293, -0.0610643029, -0.0348016545, 0.0642036796, 0.0217910036, 0.0634582192, 0.0284787267, 0.0352965295, -0.0579707995, -0.0245195366, 0.0086487532, -0.0666167811, 0.0091980994, 0.0358726829, 0.0719490051, -0.0406554900, -0.0156520903, 0.0208869576, 0.0059762225, 0.0559505820, 0.0050143674, 0.0582762659, 0.0539640486, -0.0637344047, 0.0449557602, 0.0097927526, -0.0691901520, -0.0267363898, 0.0602848381, 0.0666576028, 0.0574982464, 0.0131765902, 0.0405378342, 0.0238653645, -0.0168268904, 0.0131519511, -0.0592427328, 0.0707852989, -0.0603343397, 0.0541442782, -0.0031779334, 0.0699832290, -0.0540466607, -0.0711053759, 0.0216863006, 0.0596668571, -0.0577918738, 0.0353214741, 0.0413751602, -0.0058849752, -0.0363541543, 0.0092362985, 0.0567167550, -0.0170154572, 0.0167761520, 0.0682950765, -0.0609333292, 0.0162337720, 0.0072333738, 0.0356638879, -0.0448324233, -0.0374574587, 0.0490081683, 0.0388332158, 0.0230494067, -0.0528606623, 0.0280640349, -0.0232673064, -0.0360601135, -0.0336561054, 0.0646942407, -0.0104714222, -0.0314968079, 0.0468518659, -0.0421296954, -0.0314685218, 0.0547097474, 0.0307019278, 0.0711177886, 0.0204162821, 0.0255917683, -0.0113102868, -0.0667792782, -0.0131816007, -0.0438139588, 0.0288314372, 0.0650943667, 0.0152631104, 0.0275093168, -0.0249088295, -0.0652116910, 0.0290622413, -0.0074170679, 0.0372148529, 0.0389030203, 0.0571607351, 0.0150235966, 0.0018744618, 0.0320534185, 0.0254239589, -0.0297997966, -0.0684225559, 0.0322117880, -0.0064246878, -0.0676965341, -0.0280862823, -0.0014212653, -0.0238059349, 0.0406738818, -0.0652606264, -0.0049550608, 0.0413669422, -0.0228553712, 0.0300429761, -0.0286413245, -0.0201843195, 0.0057718083, 0.0078775585, 0.0333533436, 0.0013330132, -0.0598543324, 0.0335379839, -0.0151247866, 0.0028042272, -0.0298017934, -0.0657104701, 0.0460030064, -0.0386582240, 0.0621348619, 0.0148187503, 0.0346529782, -0.0475160703, 0.0259413719, -0.0304777622, -0.0209877379, -0.0274022594, -0.0521084666, -0.0383169353, -0.0618864223, 0.0144285262, -0.0436613224, -0.0252997950, -0.0081024468, 0.0367153510, -0.0052914768, 0.0624510944, 0.0308750942, -0.0105857588, 0.0656682849, -0.0406466983, -0.0320692845, 0.0252351984, -0.0394141003, -0.0265393928, 0.0267043188, -0.0350453332, 0.0563423932, 0.0655602813, 0.0602886677, 0.0245083869, -0.0417710990, 0.0474015921, -0.0592421107, 0.0371469036, 0.0378809944, 0.0613888651, 0.0345627591, 0.0648392886, 0.0657135397, -0.0468470007, 0.0303597599, -0.0351881795, 0.0042446777, 0.0419435427, 0.0034179613, -0.0427069366, -0.0213462487, 0.0104057789, 0.0030331761, 0.0619515777, 0.0442657992, 0.0704698414, 0.0404768512, -0.0442134216, 0.0611526370, 0.0203580856, -0.0506752804, 0.0657943040, 0.0264668688, -0.0286434740, 0.0523223430, -0.0706585944, -0.0527984612, 0.0263449103, -0.0704733878, 0.0455846712, -0.0638632998, 0.0275226012, 0.0166228935, -0.0236306377, -0.0564996377, 0.0581798106, 0.0202109218, 0.0285279900, -0.0654155910, 0.0640926659, 0.0154884458, -0.0432685874, 0.0542817414, 0.0322727636, 0.0025563166, -0.0457840562, 0.0016799644, -0.0651644096, -0.0477554612, -0.0443954170, 0.0650636852, 0.0592043847, 0.0541567206, 0.0698255002, 0.0687098801, 0.0302687213, 0.0101482347, 0.0436197892, -0.0495498441, -0.0072612613, -0.0360973999, -0.0438260213, -0.0576972738, -0.0644334480, 0.0516301841, -0.0305870920, 0.0632581711, -0.0295593031, 0.0527137220, 0.0123606995, 0.0441928953, 0.0615498722, 0.0221449733, -0.0241934247, -0.0311780795, -0.0264254548, 0.0563274771, 0.0411745533, 0.0377533063, 0.0172354579, -0.0181668885, 0.0422633886, 0.0261055827, 0.0703665763, -0.0621109493, 0.0610921234, 0.0541951656, 0.0494731218, -0.0020547509, 0.0289069042, 0.0523455366, 0.0059171692, -0.0358755589, -0.0349729955, 0.0150251761, -0.0709557533, 0.0020774603, -0.0139581934, 0.0242657438, -0.0487499386, -0.0372796655, -0.0378639959, 0.0606669486, -0.0035782754, 0.0005923137, -0.0461119562, 0.0202328935, 0.0336607844, 0.0608792305, 0.0505847931, 0.0682001710, -0.0205408894, 0.0357152075, 0.0614361316, 0.0100412816, 0.0243913159, 0.0239226446, 0.0152120739, -0.0383722894, -0.0451625101, -0.0553039834, -0.0036295131, -0.0009997413, 0.0013719872, 0.0651053637, -0.0110752992, 0.0308763608, -0.0044115782, 0.0339488536, 0.0168957189, 0.0678255856, 0.0465647951, -0.0420705751, -0.0033052415, -0.0635435134, -0.0706041902, -0.0147824660, -0.0624649860, -0.0523120537, 0.0636488646, -0.0526232123, 0.0648363531, 0.0187110230, -0.0185677819, 0.0188151076, 0.0449649841, 0.0339502171, -0.0702689067, 0.0374022946, -0.0294335410, -0.0407064892, 0.0719154328, 0.0621253550, 0.0682059973, 0.0301991403, -0.0025831610, -0.0095334351, 0.0434272140, -0.0624281988, 0.0301528051, -0.0567272976, -0.0103417747, 0.0069103539, 0.0034783706, 0.0285296068, -0.0713935643, 0.0718579888, 0.0064696670, 0.0354294479, 0.0149400905, 0.0397029445, 0.0224897191, 0.0635845214, 0.0307614803, 0.0685173273, -0.0132099912, -0.0101454817, 0.0160558075, -0.0434100255, 0.0448337123, 0.0653913766, 0.0367783606, -0.0522584729, -0.0582450032, 0.0338291526, 0.0090995729, -0.0432236120, -0.0428423174, -0.0023167208, -0.0420712456, 0.0494110584, -0.0477700345, -0.0647276640, -0.0666718632, 0.0114592910, -0.0345818102, 0.0263474882, 0.0603036880, 0.0338813215, -0.0281161331, -0.0628268048, -0.0636567324, -0.0252484865, 0.0102162734, -0.0056029111, 0.0487957895, 0.0378295332, -0.0381358229, -0.0133729167, -0.0591557696, 0.0315471068, -0.0691160783, 0.0327853635, -0.0116174184, -0.0394376405, 0.0684781820, -0.0396596193, 0.0056233406, 0.0584892780, 0.0454452485, -0.0456817485, 0.0652383864, -0.0061572865, -0.0101908408, -0.0679787844, -0.0343489200, -0.0103892125, 0.0270435438, 0.0550823659, -0.0088354051, 0.0103063658, 0.0227513388, -0.0575427562, -0.0389829949, 0.0132352635, 0.0018552914, 0.0196791738, 0.0265971050, 0.0479535609, 0.0457979962, -0.0627185032, 0.0344240963, 0.0703657418, 0.0633697361, -0.0672625750, 0.0539182872, 0.0244124457, -0.0559902638, -0.0027504414, 0.0109016001, -0.0718339309, 0.0721145421, -0.0060777739, 0.0591338277, -0.0088471398, -0.0523809120, -0.0659446120, 0.0448121056, -0.0402746424, 0.0401057452, -0.0610245727, 0.0152174234, 0.0016239360, -0.0454740487, 0.0305709690, 0.0580479056, -0.0488013327, 0.0286932513, 0.0049779415, -0.0415562615, -0.0199274831, -0.0365573615, 0.0161576644, -0.0102018155, -0.0383141823, -0.0181857310, 0.0532596111, -0.0445086174, -0.0710578561, -0.0518121049, 0.0234970301, -0.0401299894, 0.0534531772, -0.0130804256, 0.0173064172, -0.0290332511, -0.0327219553, 0.0260005072, 0.0245053619, 0.0417436063, 0.0648305565, -0.0127221383, -0.0119525306, 0.0110493675, 0.0046186224, 0.0319409072, -0.0223541819, -0.0540259480, 0.0228513405, 0.0207071677, -0.0000448897, 0.0094214380, 0.0158082247, -0.0146864355, -0.0243418477, -0.0201423019, -0.0475808010, 0.0065706521, -0.0716296732, 0.0015325397, 0.0194035470, -0.0617313758, 0.0101982579, -0.0166876242, -0.0411440134, 0.0044845194, -0.0164710805, 0.0423433855, -0.0615601204, 0.0463155434, -0.0299445204, -0.0548555702, -0.0005108714, 0.0582158417, 0.0152284876, -0.0376936868, 0.0067712590, -0.0670246631, -0.0544643141, -0.0232109576, 0.0460922420, -0.0146475658, -0.0555795617, 0.0365341976, 0.0643473864, -0.0708260462, -0.0176381208, 0.0038391873, -0.0393004194, 0.0399744064, -0.0170758516, -0.0709284917, 0.0573282689, -0.0159105659, 0.0578526855, 0.0579550415, -0.0242688209, -0.0555612892, -0.0524352193, 0.0671913177, -0.0466612875, -0.0055149049, -0.0178131945, 0.0545436740, -0.0455008224, -0.0518217906, -0.0657726899, 0.0082629696, -0.0413267091, -0.0548988804, 0.0698688924, -0.0405314639, -0.0403046869, -0.0166003183, -0.0439566709, -0.0145616382, 0.0699690282, 0.0092809498, -0.0564687550, 0.0419015437, 0.0389425978, 0.0551242530, -0.0035338253, 0.0253814533, 0.0310401022, -0.0536801666, 0.0410061181, 0.0460435972, -0.0134903528, -0.0639021471, 0.0626329780, 0.0451515540, 0.0486374944, -0.0585839339, -0.0187034719, -0.0318018794, 0.0128220245, 0.0531537384, -0.0563931465, 0.0069397092, -0.0632827058, -0.0313135460, -0.0477655604, -0.0030298680, 0.0021376833, -0.0565314889, 0.0351550579, 0.0288066640, 0.0386303365, 0.0493463427, 0.0228858069, -0.0659788400, -0.0708940476, -0.0188093074, -0.0718121603, 0.0504030064, -0.0350307748, 0.0120054036, 0.0346145183, 0.0106263533, -0.0477582812, 0.0461938083, 0.0283091217, -0.0555290096, 0.0547951162, 0.0463755950, 0.0027739108, -0.0655207559, 0.0646153837, -0.0095426589, 0.0660451353, -0.0053666160, 0.0169104263, 0.0335976407, -0.0240642913, -0.0241610780, 0.0705518275, 0.0004282519, 0.0651362836, 0.0216621906, 0.0203040242, 0.0429625735, 0.0481210425, -0.0396692902, 0.0698801279, 0.0196178034, 0.0553001463, 0.0709723383, 0.0269060284, -0.0656223372, -0.0102273673, -0.0237214714, 0.0049475357, 0.0228868425, 0.0634460896, 0.0532620400, 0.0170816630, 0.0050810426, 0.0686566532, -0.0635410771, -0.0624677911, -0.0585198067, -0.0566768795, -0.0211625881, 0.0367229879, -0.0519602671, -0.0119137131, -0.0132316537, 0.0376007184, 0.0556639880, 0.0103843734, 0.0208457485, 0.0011006221, -0.0719733387, 0.0315880179, 0.0674651414, 0.0240129456, 0.0225293934, -0.0504874736, -0.0273560584, -0.0587405637, 0.0257662907, 0.0422377512, 0.0446543694, -0.0542472377, 0.0252386257, 0.0219526738, -0.0592937656, -0.0028836206, -0.0250925794, 0.0263068825, 0.0179905221, 0.0162777156, 0.0247245878, -0.0029676184, 0.0257490501, -0.0642217547, 0.0308919176, 0.0267842561, -0.0205810480, -0.0024695247, -0.0136031732, 0.0238206834, -0.0487734079, 0.0432538614, 0.0107702464, -0.0284322686, 0.0650260746, -0.0189172588, 0.0148368701, -0.0004803687, -0.0681176260, 0.0348435864, 0.0062436238, 0.0257887989, 0.0414327681, -0.0373778120, 0.0721328110, 0.0188366473, 0.0630613416, -0.0536968932, 0.0081864148, -0.0098985024, 0.0606692135, -0.0679637492, -0.0230465829, -0.0227739662, -0.0545259491, -0.0059184432, 0.0145415738, -0.0288416408, -0.0568963327, 0.0709655285, -0.0339143388, 0.0622185022, 0.0030951351, -0.0083249807, 0.0234236643, 0.0345806554, -0.0434374660, 0.0023389682, -0.0238258615, 0.0544584990, -0.0688432902, 0.0214642882, -0.0299977027, 0.0377214253, -0.0674582273, 0.0254547521, -0.0051433146, 0.0175193474, -0.0568707809, -0.0579899512, 0.0701942742, 0.0581111163, 0.0243877023, 0.0170879960, 0.0228847414, 0.0017354861, -0.0571397841, -0.0372623578, 0.0649472624, -0.0507653728, 0.0672756433, 0.0670397878, -0.0055127516, 0.0136523843, -0.0275834426, -0.0698294863, -0.0000221804, 0.0364317223, -0.0080380291, -0.0049876124, 0.0375719517, -0.0374447107, -0.0646807551, -0.0607244074, 0.0296867341, -0.0053221211, -0.0641727373, -0.0041697770, 0.0633012801, 0.0129825249, -0.0670647696, 0.0361356288, 0.0275719687, -0.0088477060, 0.0280967280, 0.0266135558, 0.0436902493, 0.0429523364, 0.0602203310, 0.0318290442, 0.0169279128, -0.0353432447, 0.0558293462, 0.0242518038, 0.0578625351, 0.0639043152, -0.0240546390, 0.0640724003, -0.0420485362, -0.0274863988, 0.0430942848, -0.0366223641, 0.0082298145, -0.0659207851, 0.0170828402, 0.0575786233, -0.0399977751, -0.0008207634, 0.0572474450, 0.0694743842, 0.0674186051, 0.0208331943, -0.0444164276, 0.0166441947, 0.0534641296, 0.0328310430, -0.0036387518, -0.0402640626, 0.0171679556, -0.0378998034, 0.0361412913, 0.0363975987, 0.0581939816, -0.0028924420, 0.0395195037, -0.0141147897, 0.0592843592, -0.0457655266, 0.0169599652, -0.0495977998, -0.0321632624, 0.0445490852, 0.0092687309, -0.0156185925, 0.0224716514, -0.0201891400, -0.0171317384, -0.0303311646, -0.0387978368, 0.0044822767, -0.0237242244, -0.0034175962, 0.0574980229, -0.0352729745, 0.0608422160, -0.0467552021, 0.0172935799, -0.0613704398, -0.0654290766, -0.0564561933, 0.0713042468, 0.0247072205, 0.0209281519, -0.0669158623, 0.0073734671, 0.0459786281, 0.0076009557, 0.0554338247, -0.0704397336, 0.0251976922, 0.0226870775, 0.0393498018, -0.0241654105, -0.0349304117, 0.0621794462, 0.0280966908, 0.0633423924, -0.0023530051, -0.0166789852, -0.0601120815, 0.0612291694, 0.0151104331, 0.0510474518, 0.0161663890, 0.0045896471, 0.0112716779, 0.0244090408, -0.0124514662, -0.0056502819, 0.0364574268, -0.0377990417, -0.0136734955, -0.0386037678, -0.0504681319, 0.0160019845, -0.0310802758, 0.0093013719, 0.0555634499, 0.0351132303, -0.0373446569, 0.0415578634, -0.0571424365, -0.0414463282, -0.0337506570, 0.0421194285, 0.0274830237, -0.0259817354, -0.0555325709, -0.0552674755, 0.0352243483, 0.0631063879, -0.0412119627, -0.0445532873, -0.0580513962, -0.0032283664, -0.0323833004, 0.0604031831, -0.0714544952, -0.0266173892, -0.0049791336, 0.0526991114, 0.0582952052, 0.0014696494, -0.0060461164, 0.0387160704, -0.0516595691, -0.0474457629, 0.0686996430, -0.0291027837, -0.0125555284, 0.0328113735, -0.0315287784, -0.0282440111, -0.0011836067, 0.0093129501, -0.0386770293, 0.0599426478, -0.0716697946, -0.0251122788, 0.0203776658, 0.0234013125, 0.0294198245, 0.0514652058, 0.0199503154, 0.0114237815, 0.0577348173, -0.0577515922, -0.0134964585, 0.0654160380, 0.0434830487, -0.0066066459, -0.0269568898, 0.0134163126, -0.0030746087, -0.0192545243, 0.0640635490, -0.0248315223, -0.0523275733, 0.0054631829, 0.0465747789, -0.0476904362, 0.0288103223, 0.0161422491, 0.0077263713, -0.0490799397, -0.0631190538, -0.0594881810, 0.0301747918, -0.0341798700, 0.0658722222, 0.0480909348, 0.0029756203, -0.0545002595, 0.0219956860, -0.0707213506, 0.0159808546, -0.0633225515, 0.0633921176, 0.0097253174, 0.0011581630, -0.0619430840, -0.0497538075, 0.0010634884, 0.0360568464, 0.0465373322, -0.0126934387, 0.0627587289, 0.0005451292, -0.0355545022, 0.0593905002, 0.0262156054, 0.0314101577, 0.0434935763, -0.0300740488, 0.0182345957, -0.0265469812, 0.0569544137, -0.0619248264, 0.0453321636, 0.0247620791, -0.0356300212, 0.0561514646, -0.0264357924, 0.0045587644, -0.0347377323, 0.0532567054, -0.0158330351, 0.0573513657, -0.0268698782, 0.0150305256, -0.0102017485, 0.0376010835, -0.0408406481, -0.0343900286, -0.0643183589, -0.0346898995, 0.0376517922, -0.0529938564, 0.0600792021, -0.0563110746, -0.0133107156, -0.0567861274, 0.0641747117, 0.0201007873, 0.0565339178, 0.0068149492, 0.0663595796, 0.0282843634, -0.0363786705, -0.0229974277, -0.0588127971, -0.0274738185, -0.0241253041, -0.0061427802, -0.0084639043, -0.0236978307, 0.0474174619, 0.0365791246, -0.0554873347, -0.0088961646, 0.0222732648, -0.0583590455, 0.0691821873, 0.0187758207, 0.0479926690, -0.0563780740, -0.0295123272, 0.0560037345, -0.0114441514, -0.0639358908, 0.0191937312, -0.0575861186, -0.0334171280, 0.0073368326, -0.0028683394, 0.0652857870, -0.0378541201, -0.0180919915, -0.0013696477, -0.0196621083, -0.0660193115, -0.0146637745, 0.0472300127, 0.0693454593, 0.0259838328, 0.0568072349, 0.0231518894, 0.0700351894, -0.0231443010, -0.0311112665, 0.0123052821, 0.0058524609, 0.0567809343, -0.0058295056, 0.0444406196, 0.0220127776, 0.0209849477, -0.0063034743, 0.0035371184, 0.0470974743, 0.0496961996, 0.0490877703, 0.0601375699, 0.0411818698, -0.0564765818, 0.0063871294, 0.0136848316, 0.0709541738, 0.0163184628, -0.0435433909, -0.0351931341, -0.0278700329, -0.0474330820, 0.0166446269, -0.0612170771, -0.0593426675, 0.0375870913, -0.0235582665, 0.0178393349, -0.0273221806, 0.0297475234, -0.0191763006, 0.0394380316, 0.0345807076, -0.0073806047, -0.0554345623, 0.0162440762, 0.0481432378, 0.0090761259, 0.0202573240, 0.0344384089, -0.0659348741, 0.0342794582, 0.0195456222, 0.0132108182, 0.0158760473, 0.0708609670, -0.0573066697, -0.0051775202, 0.0655465573, 0.0577805489, 0.0221989676, 0.0351413786, -0.0358257107, -0.0612221174, -0.0391360112, -0.0409848541, -0.0484889150, 0.0067906901, -0.0633233786, 0.0339270383, -0.0619912259, -0.0425189398, 0.0152236223, 0.0245385692, 0.0358823016, 0.0164925009, 0.0699229836, 0.0699129105, -0.0131047741, 0.0651562810, 0.0291137621, 0.0121462569, 0.0611858517, -0.0201349035, 0.0247274414, -0.0357279107, 0.0092399642, -0.0567855760, -0.0683174953, 0.0545040220, 0.0014731064, 0.0442337096, -0.0291592553, 0.0383414552, -0.0661157668, 0.0317529812, 0.0716341734, -0.0599589311, 0.0615396053, 0.0383554250, -0.0328574553, 0.0035637021, 0.0388317332, -0.0529438183, -0.0681272969, -0.0688180625, -0.0579636432, -0.0715597421, -0.0193896629, -0.0511769503, 0.0259829238, 0.0051131472, -0.0716001838, -0.0310686976, 0.0573369563, -0.0598825663, 0.0498115346, -0.0160192400, -0.0356354751, 0.0236506835, -0.0593867302, -0.0111401491, 0.0375627130, 0.0631590039, 0.0186999440, -0.0703399181, 0.0057843029, 0.0076785162, -0.0375164598, 0.0697018057, -0.0546758845, 0.0270752832, -0.0110807344, 0.0180842802, 0.0353319943, 0.0315901190, 0.0106024295, 0.0162684619, -0.0011584684, 0.0662046224, 0.0636003315, 0.0048020259, 0.0582111776, 0.0166271776, 0.0612079203, -0.0603937879, -0.0500653833, -0.0034513623, -0.0525366813, -0.0295365192, -0.0282867365, 0.0305560827, 0.0005561411, 0.0390443504, 0.0013635382, 0.0717126578, -0.0474047773, 0.0622971356, -0.0110180341, -0.0455961451, 0.0108760521, -0.0292822979, 0.0239391476, 0.0692611039, 0.0712845176, 0.0242896602, -0.0139244497, 0.0232615098, 0.0578519404, -0.0212287493, -0.0582147017, -0.0632384866, -0.0304524004, -0.0067729652, -0.0216869526, 0.0591029972, -0.0616620183, 0.0428175926, -0.0194952749, 0.0482704267, -0.0374497361, 0.0552146882, -0.0485185124, 0.0080129951, -0.0707817450, -0.0298758671, -0.0116874315, 0.0346412063, 0.0473672003, 0.0675205290, -0.0668273866, 0.0432956889, -0.0609555580, 0.0330674425, -0.0255423337, 0.0001817197, 0.0669767112, -0.0050962046, -0.0677832216, 0.0610466897, 0.0012780353, -0.0122235492, -0.0294266567, -0.0644937903, 0.0130321458, -0.0519694574, -0.0421724394, 0.0298356041, 0.0550609082, 0.0583209991, -0.0038976073, 0.0265261754, -0.0552890003, 0.0263149515, -0.0600515530, 0.0690439343, 0.0665616691, -0.0632990673, 0.0084145367, -0.0038135201, -0.0651105717, 0.0406818464, -0.0495994017, 0.0000043511, -0.0560129881, 0.0551871806, -0.0645319745, 0.0481698737, 0.0271622837, 0.0200829431, -0.0413997322, -0.0101621039, -0.0017904639, -0.0708067939, 0.0648525655, 0.0686508864, 0.0692993104, -0.0172220021, -0.0570437573, 0.0317223147, 0.0039902478, -0.0036059767, 0.0453562364, 0.0256295875, 0.0098588392, -0.0178515501, -0.0151671469, 0.0295331627, -0.0341007523, -0.0564681664, 0.0640006214, -0.0143397115, -0.0154592432, -0.0597004890, -0.0200087130, -0.0380333737, -0.0299175046, -0.0534449071, 0.0128118843, 0.0103478953, -0.0030622035, -0.0210642368, 0.0002601072, 0.0419678912, 0.0720040798, -0.0226305500, -0.0431925692, 0.0068239495, 0.0695061833, -0.0590049215, -0.0338344164, -0.0204483196, -0.0018841848, 0.0486448407, 0.0274893567, -0.0257198699, -0.0086151287, 0.0446137637, 0.0631957203, 0.0067248866, 0.0194031373, -0.0405911542, 0.0128382817, -0.0072579458, -0.0119030289, 0.0288419873, 0.0205745772, 0.0143028051, -0.0262520127, -0.0237947702, 0.0037680045, 0.0601321161, -0.0470395535, -0.0143214352, 0.0077571720, 0.0628761053, -0.0061936602, -0.0698937178, 0.0023122132, 0.0461123884, -0.0633676872, 0.0176840127, 0.0690633059, 0.0480829701, -0.0623663440, -0.0580121987, -0.0657968149, -0.0357424840, -0.0253425874, -0.0021739751, 0.0321809724, -0.0264952928, 0.0565851778, 0.0228575915, 0.0711082220, 0.0606271774, -0.0623050369, -0.0056816489, -0.0627721548, 0.0522663221, -0.0693570226, -0.0448505953, 0.0581205189, -0.0265951753, 0.0548154116, 0.0136778802, 0.0570601374, 0.0388091058, 0.0161907375, 0.0473653078, 0.0140969604, -0.0662899315, 0.0055550635, -0.0090031996, 0.0412853137, -0.0321961641, 0.0039116666, -0.0173122995, 0.0314057395, 0.0360827595, 0.0234185383, 0.0367944613, -0.0425577909, -0.0584858395, 0.0599211603, 0.0196503699, 0.0666700751, -0.0307807848, -0.0627295524, -0.0355360396, -0.0112473108, -0.0311343931, -0.0200532787, -0.0048847869, -0.0453583188, -0.0126376040, 0.0394912362, 0.0328997970, 0.0450498238, 0.0657451302, -0.0539587550, 0.0449121445, -0.0603614561, -0.0647190884, 0.0581597835, -0.0197634175, 0.0459916666, 0.0657987744, -0.0646960139, -0.0410262346, 0.0596709251, -0.0252375416, 0.0614276975, -0.0597061850, -0.0595887154, 0.0216853172, 0.0414174423, -0.0372010693, -0.0101199485, -0.0293155387, 0.0334060788, 0.0422695652, -0.0152269378, -0.0520262383, 0.0349550322, -0.0295734294, -0.0369613655, -0.0582795702, 0.0385792479, -0.0659455284, 0.0594050884, 0.0107142404, -0.0647175908, -0.0053608716, 0.0298123360, 0.0713188350, -0.0658966452, 0.0385929644, 0.0506018251, 0.0123046935, -0.0113105252, -0.0516841933, 0.0022752881, 0.0702975541, 0.0188081339, -0.0521570928, 0.0327664167, -0.0304846093, -0.0073570535, -0.0175678171, -0.0009372979, 0.0067374706, -0.0399323739, -0.0543318912, -0.0258429125, -0.0568468459, -0.0109381825, -0.0260583535, -0.0271494612, -0.0047679767, -0.0640114620, 0.0180428997, -0.0404042602, 0.0198019445, 0.0258784592, 0.0479949713, 0.0419279709, -0.0255478919, 0.0643637776, -0.0491753668, -0.0507771932, 0.0261941999, -0.0113860629, 0.0399372801, 0.0476778969, -0.0358708091, 0.0459282622, 0.0001320615, -0.0708508268, -0.0198583305, -0.0138679631, -0.0418005213, 0.0179275647, 0.0209566802, -0.0275137238, 0.0721163154, -0.0225782953, -0.0433761440, 0.0493217558, 0.0294316113, -0.0074947923, -0.0545193553, -0.0077646226, 0.0449795052, 0.0346221253, -0.0482946746, 0.0570329726, 0.0005709752, -0.0015733838, 0.0102637634, -0.0510104746, -0.0080935359, 0.0697743148, -0.0390386246, -0.0370709524, -0.0721680075, -0.0188282356, 0.0665302873, 0.0248606354, -0.0002615005, -0.0025707707, 0.0213447735, 0.0679894686, -0.0342019945, 0.0156964138, 0.0570316017, 0.0430814996, 0.0212463364, 0.0434002131, 0.0548771173, -0.0566148683, 0.0310673863, 0.0236937329, 0.0302679986, 0.0692762733, 0.0265216157, 0.0642209947, -0.0417971164, 0.0007263497, 0.0499250144, 0.0658671409, -0.0172941312, -0.0049338415, 0.0071572363, 0.0511225909, -0.0164602399, 0.0505342036, -0.0329805836, 0.0706598312, 0.0269375518, 0.0595669001, 0.0241461918, -0.0017550513, 0.0415171310, 0.0351916924, 0.0434570834, -0.0025015697, -0.0000808686, -0.0189419352, -0.0462982170, -0.0331367142, -0.0419692993, 0.0131957754, 0.0700870901, 0.0700811893, 0.0124608800, 0.0467157811, -0.0195342116, 0.0200559795, -0.0090322793, -0.0313643031, 0.0485709235, 0.0034663081, -0.0522156805, 0.0550133586, -0.0681862980, -0.0446704403, 0.0121430382, 0.0503411815, 0.0360398963, -0.0377132520, 0.0494637266, 0.0585970283, 0.0689439774, -0.0491979942, -0.0479612499, 0.0038159415, -0.0138298832, -0.0672907531, -0.0196347162, -0.0109353252, 0.0407198593, 0.0530949980, -0.0206139795, -0.0054701120, -0.0226672031, 0.0134480894, 0.0194368735, 0.0190376714, -0.0113925338, 0.0027763844, 0.0407998860, -0.0023297071, 0.0001222193, 0.0565997213, 0.0471872538, 0.0645813942, -0.0673059151, 0.0367553011, -0.0245484263, -0.0513818786, -0.0005017072, -0.0314202569, -0.0619254969, 0.0490811244, -0.0386797152, 0.0397611037, -0.0574117154, 0.0309180021, 0.0548603386, 0.0435466394, 0.0264330581, -0.0153316930, -0.0442512259, -0.0663542971, 0.0019379854, -0.0216151327, 0.0223235413, 0.0478860214, 0.0593267083, 0.0355023667, -0.0698468685, 0.0572996438, -0.0105025172, 0.0025667101, 0.0571374595, -0.0299597643, -0.0171181597, 0.0204826444, -0.0693844110, 0.0446246937, -0.0084716454, 0.0721333474, -0.0520963371, -0.0321762711, 0.0092650354, 0.0395690426, 0.0668922812, -0.0415271968, 0.0087829083, -0.0334475636, -0.0089853108, 0.0515042990, -0.0088309869, 0.0001742691, -0.0187996551, -0.0441188402, -0.0197618529, 0.0560401231, -0.0240946598, -0.0524108186, -0.0165279321, -0.0039202496, -0.0324377902, -0.0292739868, 0.0083555877, 0.0586070865, 0.0389876068, 0.0640163124, 0.0430345833, -0.0468581989, 0.0536680073, -0.0103889890, 0.0417851582, 0.0021511763, -0.0568795912, -0.0004605129, -0.0458174348, -0.0696635842, -0.0184115134, -0.0135567151, -0.0597941093, -0.0517540686, -0.0586507991, 0.0676788688, -0.0331256501, 0.0379655510, -0.0351327583, 0.0687244684, -0.0072872937, 0.0190999210, 0.0442793593, -0.0485280603, -0.0353480428, -0.0092152730, -0.0482492484, -0.0479385704, 0.0306302458, 0.0291679800, 0.0700623095, 0.0384423360, -0.0274060778, -0.0218616836, -0.0705940202, -0.0027884841, 0.0108955577, -0.0536995605, -0.0314652510, 0.0635606200, -0.0721673891, 0.0322549045, -0.0166874006, -0.0554266833, 0.0645615011, -0.0391749144, -0.0532158352, -0.0554464683, 0.0074038357, 0.0234428272, -0.0301303305, -0.0231230855, 0.0035444126, -0.0428804457, -0.0538775921, 0.0393562689, -0.0265793465, 0.0510098785, -0.0597233400, -0.0454598218, -0.0518351272, 0.0685983598, 0.0371676162, 0.0028183907, 0.0445330143, -0.0575609133, -0.0225274004, 0.0205529854, -0.0180493183, -0.0395399667, 0.0039283335, 0.0619567931, 0.0354736671, 0.0600377619, 0.0349004194, 0.0280115381, -0.0005264655, -0.0436251387, 0.0188494176, -0.0391769297, -0.0183637142, -0.0544590130, -0.0597821847, 0.0103520453, 0.0597675294, -0.0720384121, -0.0673011839, -0.0696646348, 0.0448070616, -0.0165279135, -0.0070010498, -0.0467950329, -0.0048751682, -0.0247428231, -0.0682969540, -0.0185253695, -0.0200937986, -0.0028682873, -0.0524076000, 0.0441845506, -0.0303399377, 0.0421221927, 0.0251207128, 0.0575779080, -0.0485305563, -0.0284439176, 0.0106286407, 0.0704535991, -0.0499662384, 0.0224687234, 0.0361728519, 0.0081927627, 0.0085334852, 0.0293661058, -0.0075761378, 0.0097256154, -0.0337339155, -0.0657448173, -0.0287835710, -0.0576948822, 0.0192413777, -0.0298623927, -0.0190003328, 0.0643810481, 0.0469755977, -0.0370447151, -0.0215085931, -0.0205688849, 0.0330911875, -0.0442423150, 0.0090323836, -0.0306095108, -0.0270209834, 0.0535871983, 0.0408062190, 0.0427408144, 0.0334904939, 0.0130478516, 0.0714321584, 0.0607275218, 0.0459100753, -0.0081741810, 0.0269890651, 0.0400433391, -0.0214460492, -0.0488899983, 0.0577777922, 0.0641288310, -0.0665542930, -0.0359496996, 0.0027882457, -0.0684684440, 0.0512655601, 0.0197311938, -0.0580712333, -0.0669959933, 0.0527219474, -0.0045529827, -0.0328133740, -0.0081444681, -0.0374166295, 0.0706271976, -0.0187816396, -0.0144678615, -0.0702997595, -0.0128032304, 0.0207205415, -0.0614313819, -0.0365407206, -0.0627707765, -0.0029862002, 0.0518233776, 0.0206258371, 0.0271274373, -0.0183706470, -0.0176963806, -0.0231977068, -0.0357881486, -0.0039466470, 0.0059997812, -0.0428550839, -0.0028702617, -0.0248033218, 0.0275058225, 0.0560020059, -0.0481919199, 0.0676727146, -0.0315061882, 0.0456938446, -0.0154629946, 0.0301799178, -0.0085454136, -0.0658995882, 0.0693065673, -0.0051398575, -0.0286474004, -0.0523604900, 0.0367306247, -0.0267160498, 0.0710484982, 0.0568975210, 0.0225929394, -0.0268351212, 0.0280882791, 0.0303576589, -0.0595762245, -0.0709821805, 0.0595005304, 0.0222223476, 0.0258107185, 0.0289625525, 0.0278729051, 0.0375641063, -0.0414471179, 0.0380861089, -0.0616137013, 0.0524039194, -0.0608984306, -0.0528811552, 0.0033019409, -0.0157858729, 0.0196289346, -0.0680006593, -0.0119890943, -0.0096078515, 0.0004275292, -0.0399773344, 0.0432035327, 0.0313021019, 0.0634709448, 0.0061400756, -0.0286545232, 0.0514867306, 0.0444730893, -0.0496810265, 0.0492055118, -0.0103702322, 0.0069038495, 0.0429518148, 0.0524698570, -0.0667044818, 0.0241127759, -0.0686308891, 0.0121091604, 0.0272517204, 0.0193250850, 0.0042534024, -0.0440272689, 0.0241188481, -0.0171132237, 0.0496183932, -0.0544148609, -0.0064516515, -0.0230590254, 0.0578459203, 0.0358636677, -0.0249682628, 0.0309411660, 0.0078845993, 0.0086828023, -0.0605912656, -0.0153409503, 0.0691573918, 0.0299275368, 0.0578821152, -0.0451916419, 0.0054639205, -0.0019698516, -0.0105190501, -0.0161981881, -0.0695420206, 0.0208048150, -0.0343063697, -0.0420965403, -0.0541744232, 0.0005149320, 0.0553429723, 0.0616384596, -0.0555269942, -0.0561718568, -0.0570722856, -0.0313687064, 0.0167203471, 0.0498538092, -0.0303570591, -0.0513383970, 0.0193580538, -0.0569565371, 0.0498524904, -0.0233056620, 0.0408261567, -0.0613026768, 0.0268939808, 0.0446955264, -0.0385815538, 0.0255176798, -0.0152852349, -0.0676935092, -0.0680913702, -0.0569900721, -0.0595782548, -0.0580386966, 0.0711886585, -0.0021966845, 0.0571762174, 0.0475646257, -0.0134785138, -0.0021332949, -0.0689425319, 0.0642051548, -0.0327583812, -0.0289021917, -0.0638193712, -0.0480100624, -0.0035727173, 0.0686279684, 0.0671187341, 0.0192819014, 0.0266972780, 0.0050433129, 0.0544499159, 0.0199858993, -0.0333305635, -0.0240231156, -0.0027699545, -0.0405468494, 0.0388962403, -0.0690693259, -0.0337069184, -0.0204108618, -0.0381025635, 0.0118846670, 0.0518555194, 0.0287414119, -0.0524180792, -0.0469609573, 0.0318287537, -0.0390962996, 0.0070659742, -0.0258080028, -0.0425502360, 0.0333132669, -0.0094085187, -0.0539997220, -0.0712236539, 0.0680502355, 0.0027722046, -0.0188122503, -0.0156362280, 0.0443134084, -0.0621936619, 0.0111805871, -0.0562858321, -0.0205597468, -0.0612608492, 0.0243234709, -0.0359597318, 0.0351176187, 0.0555954427, -0.0504848063, 0.0542578995, 0.0361170694, -0.0388501622, 0.0055803359, -0.0224434137, -0.0643709749, 0.0087313056, 0.0475874916, -0.0544422381, 0.0450984165, 0.0657103509, 0.0000833124, -0.0452066809, -0.0412421599, -0.0419083014, -0.0214381479, -0.0514765307, -0.0509190261, 0.0107195601, -0.0339281894, -0.0481890440, 0.0122828409, -0.0206832886, -0.0397579707, 0.0464784727, -0.0167580135, -0.0488017797, -0.0409649983, 0.0186433867, -0.0643362328, -0.0221412033, 0.0484684259, -0.0304193273, 0.0372878239, -0.0062948689, -0.0431437194, 0.0270098299, -0.0036779344, 0.0535552502, -0.0004462823, 0.0603958219, -0.0232052617, -0.0355610251, -0.0342207514, -0.0677580684, 0.0129842758, -0.0483009890, 0.0395107642, 0.0479259416, -0.0076975822, -0.0653879195, 0.0603802651, -0.0582220331, 0.0328393206, 0.0187122673, 0.0400768593, 0.0624448061, 0.0404194146, -0.0669325218, 0.0179016739, 0.0606025755, 0.0434149802, 0.0377702862, 0.0635306835, -0.0577162169, -0.0225345902, 0.0602296591, -0.0160470977, -0.0073483437, -0.0707889199, -0.0195155963, -0.0698291436, -0.0563428178, 0.0201179236, 0.0652505457, -0.0235795341, -0.0272406563, 0.0696073174, -0.0354719646, 0.0480388328, 0.0361465737, -0.0515715107, -0.0448462404, 0.0437918827, -0.0086425021, 0.0381534770, -0.0462914705, 0.0639675111, -0.0687337890, -0.0555519462, 0.0057341605, 0.0078841373, 0.0012815297, -0.0077514052, -0.0048498586, 0.0325602666, -0.0587873124, -0.0039852187, 0.0597818941, -0.0592618287, 0.0603208244, 0.0584450811, -0.0415959880, -0.0281834304, -0.0321876295, 0.0242387950, -0.0051458403, -0.0672183707, -0.0339686275, 0.0499307737, 0.0557238013, -0.0470121950, 0.0364138559, -0.0712752566, -0.0517768674, 0.0093839094, 0.0658576190, 0.0330999270, 0.0106762648, 0.0599132478, -0.0353747830, 0.0389505923, 0.0269455984, -0.0501932092, -0.0641328022, 0.0665142387, 0.0677606612, -0.0285404958, -0.0199467540, -0.0071018115, -0.0511736944, 0.0700524002, -0.0603818819, 0.0161364004, 0.0636195391, -0.0074130222, 0.0398111865, 0.0513758212, -0.0302648842, 0.0310162902, 0.0369834229, -0.0044972152, -0.0013594106, 0.0041673481, 0.0307009965, 0.0246237367, 0.0181776583, -0.0602950230, 0.0242247432, 0.0631750673, 0.0709454715, 0.0470509827, -0.0214231983, -0.0236530565, 0.0302027538, -0.0682538003, 0.0006899759, -0.0719734728, -0.0562104508, 0.0342706665, -0.0411640257, 0.0606222600, 0.0161144137, -0.0510259122, -0.0441153497, 0.0175750405, -0.0543145686, 0.0197955072, 0.0590034276, 0.0672665685, -0.0168135576, 0.0176563263, 0.0068547651, -0.0108277686, -0.0415772013, 0.0026807189, -0.0566900969, -0.0540876836, 0.0503652021, -0.0455305055, -0.0301408097, 0.0256206393, 0.0133286938, 0.0701763034, -0.0040122196, -0.0249213055, -0.0475842059, 0.0307985023, -0.0011665747, -0.0579902269, -0.0512579903, -0.0384445712, 0.0408351272, -0.0002001449, 0.0659915656, -0.0257172212, 0.0222928599, -0.0314055458, -0.0149260685, 0.0477951244, 0.0055589154, -0.0364332497, -0.0069866702, 0.0333281681, -0.0411066227, 0.0401800796, 0.0391997620, 0.0136867315, -0.0307981260, 0.0580216050, 0.0013509914, -0.0127033144, -0.0433240272, -0.0691147521, 0.0368606895, 0.0224907696, 0.0465931371, -0.0249285847, -0.0415933393, 0.0510651097, 0.0173843428, 0.0537250191, 0.0184857100, 0.0262901932, 0.0066554993, -0.0446393862, -0.0088922903, -0.0624130592, 0.0644652098, -0.0428511947, -0.0499291942, 0.0010807514, 0.0669527203, -0.0608940460, 0.0444363132, 0.0173516348, -0.0536632687, -0.0429555178, 0.0156546235, -0.0329815149, 0.0351944119, -0.0033130199, -0.0421320349, -0.0484326184, -0.0463973098, 0.0287182555, -0.0361117683, -0.0260495618, -0.0714811981, -0.0170622915, -0.0358218402, 0.0634903461, -0.0082836300, 0.0272927731, 0.0720534176, -0.0219183266, 0.0376299396, 0.0183231905, -0.0427633077, -0.0095035285, -0.0708436519, -0.0154901817, 0.0586270541, 0.0302697867, 0.0081650466, -0.0702288002, 0.0461216792, 0.0105989724, -0.0629695132, -0.0050820559, -0.0390401036, -0.0267022848, 0.0083252713, 0.0162016824, 0.0477434471, -0.0597326495, -0.0205658711, -0.0016614273, -0.0075605661, -0.0684374273, -0.0601299256, -0.0214306116, -0.0601743199, -0.0675629973, -0.0382992998, 0.0510086194, -0.0572481155, -0.0485162735, 0.0438841134, 0.0410599113, 0.0417193919, 0.0102241486, -0.0246132091, -0.0516163819, -0.0415589437, -0.0481539257, 0.0599444360, 0.0648348182, -0.0471647680, -0.0157332532, -0.0679084510, -0.0238237455, 0.0009144843, 0.0144233331, -0.0328501239, -0.0044117495, 0.0458620042, -0.0608500838, 0.0449307039, -0.0653964579, -0.0607446246, -0.0423358828, 0.0102017671, -0.0664027557, 0.0048459694, -0.0677650496, 0.0714523941, -0.0678260624, 0.0289122015, -0.0308557153, 0.0550856888, -0.0095810965, 0.0579200089, -0.0660160407, 0.0495810583, -0.0083418041, 0.0157817081, -0.0706542432, 0.0432624295, 0.0646280497, -0.0051126182, 0.0565562695, -0.0657982379, -0.0551518798, -0.0047755614, -0.0466119573, 0.0578090996, 0.0621406883, 0.0193735734, -0.0195982382, 0.0038032979, 0.0034656748, -0.0456890613, -0.0514633507, 0.0030553043, 0.0259893760, 0.0562773347, -0.0601393208, -0.0063465238, 0.0574794859, -0.0028400645, 0.0520783886, 0.0166186467, 0.0684650391, 0.0220743567, 0.0681839436, -0.0259876177, -0.0419686139, -0.0251657404, -0.0633832887, 0.0167084411, -0.0131407194, 0.0649185181, 0.0128464028, -0.0279656462, 0.0299596936, 0.0671387613, -0.0422666594, -0.0610906780, -0.0627027452, -0.0441082567, -0.0185948834, -0.0397641286, 0.0567985177, -0.0144004151, 0.0101140141, -0.0063644126, 0.0039624572, -0.0279346742, -0.0590193048, 0.0650700182, -0.0638416335, 0.0143055543, 0.0448588505, -0.0564221069, 0.0636754036, -0.0689415857, -0.0011110827, -0.0214813389, 0.0686896890, 0.0719452649, -0.0623230338, 0.0064753592, 0.0439856946, 0.0083200559, -0.0001661479, -0.0530060232, 0.0456914380, 0.0509880930, 0.0020498782, 0.0087643415, -0.0191972256, 0.0279649049, -0.0229359642, -0.0552754924, 0.0268496796, 0.0487855747, 0.0690814257, 0.0334275365, -0.0694969073, -0.0561665222, 0.0558628887, -0.0674147978, -0.0108598918, 0.0502596274, -0.0226396546, -0.0692781284, 0.0220196024, 0.0341203660, -0.0691850036, 0.0666434467, -0.0430911705, 0.0280652866, -0.0567978099, 0.0443923399, 0.0484653413, 0.0457592607, -0.0426785462, -0.0179420561, 0.0437852070, 0.0700109303, -0.0214300789, 0.0253480747, 0.0403362215, 0.0171212927, 0.0401007384, 0.0353382677, 0.0163830742, -0.0469472781, 0.0432164893, 0.0423045158, 0.0189003497, 0.0406452715, -0.0427001566, 0.0425997078, 0.0250794515, 0.0223817974, -0.0355087183, 0.0117365718, -0.0283210091, -0.0650343448, -0.0485203192, -0.0641973466, 0.0490921736, 0.0033237413, -0.0203416906, -0.0177105926, -0.0517425239, 0.0488211215, -0.0439746529, 0.0363877043, 0.0688746274, 0.0395253599, -0.0619243979, -0.0002888441, -0.0501972511, 0.0714509040, -0.0148693062, 0.0660048574, 0.0424860790, 0.0548065305, -0.0624204390, 0.0670607090, -0.0721636713, -0.0323475115, 0.0529883951, 0.0245470852, 0.0041354671, 0.0715454519, 0.0086737201, -0.0192558467, 0.0640998632, 0.0671296418, 0.0094261393, -0.0377406590, 0.0386531278, 0.0593012869, 0.0429044142, -0.0566270687, 0.0367679149, -0.0629344657, 0.0082333237, 0.0614425987, -0.0632972121, -0.0621491820, -0.0426951163, 0.0680955052, -0.0138327740, -0.0315350592, -0.0622127056, -0.0588848740, -0.0609124564, -0.0438004732, -0.0081725344, 0.0071813762, 0.0284219459, -0.0165024474, -0.0505689271, 0.0467598140, -0.0222542323, -0.0677347481, -0.0699086040, -0.0321984179, 0.0666511506, 0.0026212707, 0.0692474842, -0.0692332536, -0.0019759610, 0.0294049978, 0.0079135597, -0.0277492255, 0.0371381268, -0.0667530894, -0.0686011240, 0.0030398518, -0.0239050984, 0.0098051429, -0.0249063373, 0.0522072986, -0.0593053959, -0.0653348565, 0.0499207452, -0.0625695661, 0.0389594361, -0.0718657747, 0.0440384671, -0.0315977782, 0.0572642088, -0.0026524141, -0.0164158493, -0.0517933518, -0.0289425924, -0.0079128891, 0.0440238640, -0.0253479555, -0.0511788949, 0.0289214104, -0.0445068255, 0.0682725310, -0.0262108222, -0.0099125095, -0.0646109134, -0.0323685184, -0.0540968180, -0.0067850798, -0.0548713133, -0.0708795935, -0.0004721433, 0.0234619156, 0.0677471012, 0.0454292297, 0.0650918037, 0.0499568433, 0.0524203703, -0.0102213994, 0.0092602298, 0.0259175375, 0.0665905625, -0.0111058913, -0.0518356264, 0.0229371339, -0.0202745870, -0.0542499200, -0.0029256865, 0.0599356294, 0.0363784805, -0.0218646079, -0.0709593445, 0.0470588282, 0.0449963138, -0.0010620430, -0.0344593190, 0.0200045630, 0.0178933069, -0.0643259957, -0.0314016752, -0.0332049914, -0.0338698775, 0.0552372485, -0.0438366383, -0.0542251766, -0.0541056991, 0.0113802478, -0.0099485032, -0.0444814116, -0.0111053586, 0.0432268828, -0.0041221678, -0.0667230487, 0.0547662526, -0.0402605161, -0.0555712506, -0.0367032513, 0.0576567054, -0.0555568486, 0.0004241541, -0.0582814813, 0.0141915828, 0.0528147072, -0.0173873380, -0.0476103574, -0.0011019856, -0.0681112781, 0.0269840956, 0.0477229580, 0.0179013610, -0.0381830521, -0.0632092655, -0.0333565958, -0.0383552015, -0.0694838166, 0.0405696779, 0.0161591843, -0.0409126058, 0.0239963084, -0.0297154337, -0.0292806439, -0.0377481282, -0.0214370489, -0.0182815865, -0.0108597726, 0.0271088704, -0.0285055302, 0.0306524932, 0.0279325619, -0.0276663601, -0.0154510885, 0.0204917267, 0.0694760382, -0.0148549899, -0.0394117944, -0.0114799738, 0.0211785436, 0.0225279182, -0.0567424558, -0.0408882909, -0.0605332106, -0.0715918839, -0.0505984016, 0.0471812636, 0.0384028479, -0.0655236617, -0.0241361111, 0.0226061195, 0.0169277713, 0.0458470359, -0.0605366156, 0.0505591854, -0.0405701622, -0.0709173605, 0.0518961772, 0.0098735914, -0.0072601140, -0.0468451902, 0.0697544664, 0.0333544761, 0.0099445283, -0.0399421826, 0.0165290162, -0.0516077951, 0.0314404741, 0.0394542441, 0.0405233130, -0.0128207654, -0.0464950241, -0.0169115998, -0.0219143182, -0.0148031972, 0.0106328502, 0.0380936638, 0.0336944088, -0.0273109265, 0.0670975745, 0.0067864731, 0.0409596115, 0.0464277640, 0.0114745200, 0.0185244009, -0.0496476963, -0.0007908940, -0.0633234158, -0.0666609854, 0.0492494702, 0.0303688124, -0.0406571068, 0.0354609191, 0.0317868069, -0.0153667070, 0.0178108215, -0.0306061730, 0.0168500170, 0.0201549977, -0.0466159508, 0.0399898589, -0.0453771614, 0.0359656364, -0.0193479173, -0.0233359262, 0.0488242880, -0.0649598762, -0.0563556738, 0.0001783967, -0.0407336242, -0.0446798354, 0.0397198945, -0.0584075004, -0.0289935395, -0.0152990520, -0.0573419258, 0.0132890567, -0.0625495240, 0.0426001400, 0.0044217110, 0.0226581544, 0.0636155754, 0.0077392906, -0.0717508420, 0.0059666932, 0.0711172372, 0.0292546451, -0.0390639007, 0.0172602013, 0.0552356541, -0.0194872059, 0.0657490641, -0.0189184994, 0.0499792844, -0.0285701938, 0.0330213979, 0.0138697848, 0.0311731920, 0.0280749425, -0.0520862713, -0.0328749530, 0.0308305919, -0.0292077400, -0.0066562667, -0.0371275954, -0.0276479311, 0.0132462606, 0.0014880970, -0.0212130919, 0.0112462118, 0.0103918090, -0.0626081824, 0.0509311557, 0.0448684916, -0.0378175192, 0.0718760341, 0.0556857586, 0.0512530506, 0.0685917288, -0.0668578073, 0.0530381799, -0.0098571219, 0.0459170118, -0.0417972021, -0.0102774575, 0.0378046334, -0.0038586333, 0.0565202832, -0.0526791364, 0.0461714789, -0.0710847452, -0.0452459455, -0.0213730596, 0.0407099798, -0.0367662460, -0.0446287841, 0.0098904148, -0.0389874168, -0.0701038763, 0.0530258119, -0.0464984998, 0.0447002649, 0.0564208329, 0.0707485974, 0.0151526630, 0.0487798080, 0.0555775315, -0.0205520540, -0.0382675715, -0.0290678181, 0.0397869125, 0.0105237290, -0.0421201289, -0.0152474493, -0.0563962981, -0.0259535685, 0.0402167961, 0.0520616174, -0.0547119156, -0.0616574213, 0.0588593334, 0.0571098775, -0.0293677971, 0.0366402119, 0.0168191344, -0.0396520644, -0.0618988983, 0.0036401823, -0.0010621846, -0.0520316437, -0.0476454943, -0.0481751785, 0.0590302199, -0.0380402580, -0.0361818150, 0.0409741327, -0.0533155799, 0.0706106275, -0.0314379632, 0.0544853359, -0.0349455513, -0.0648294911, 0.0114916041, -0.0045136958, -0.0624795109, 0.0424621403, 0.0472177640, 0.0600802451, 0.0461371168, -0.0237125903, -0.0170733221, 0.0380729511, 0.0717451572, 0.0347452536, 0.0026437417, -0.0495321043, -0.0198268928, -0.0017927289, 0.0184035301, 0.0642490685, -0.0641766116, 0.0571911782, -0.0016942099, 0.0188203231, -0.0092776120, -0.0354208089, -0.0417869613, -0.0378526226, -0.0551854335, -0.0523053780, 0.0474063754, -0.0536814034, -0.0143703558, 0.0386744514, 0.0467924550, 0.0478070825, -0.0031929165, -0.0227045380, 0.0708589405, 0.0289172456, 0.0222697333, 0.0306964517, 0.0342264771, 0.0220581815, -0.0447225943, -0.0452193432, -0.0194665045, 0.0558885485, 0.0573322177, 0.0604663938, -0.0658929273, -0.0160144567, -0.0479727238, -0.0182963870, 0.0457972512, -0.0447454453, 0.0653832704, -0.0674419478, 0.0026141480, -0.0597965866, -0.0226612650, 0.0050076768, -0.0049722493, 0.0108931512, -0.0444845259, 0.0419105068, 0.0465653464, 0.0581000596, -0.0188683756, 0.0114081204, -0.0498296395, -0.0717898980, 0.0534823239, -0.0003766641, -0.0533443689, 0.0562883466, 0.0342305899, 0.0472500548, -0.0631555170, 0.0721143782, 0.0108073801, -0.0501331091, 0.0098662898, 0.0541533232, -0.0667938888, -0.0128077418, 0.0692672580, -0.0505079813, -0.0586703420, 0.0097831860, -0.0148521513, -0.0499150306, -0.0488476381, 0.0574541986, -0.0315173715, 0.0244520158, 0.0386510640, 0.0311503783, 0.0429619849, -0.0190190524, 0.0060517415, 0.0236879364, -0.0335973799, -0.0408387557, -0.0048422515, -0.0678749979, 0.0264601558, 0.0201323405, 0.0692062676, -0.0090382546, 0.0379232690, 0.0521335006, 0.0047738925, 0.0461938605, -0.0143115781, -0.0304510407, -0.0561584532, 0.0162845105, 0.0171208307, -0.0719675049, 0.0207081661, 0.0217934474, 0.0714255422, -0.0424160287, 0.0114684626, -0.0003451779, -0.0314496309, -0.0408164896, -0.0134040080, 0.0604928136, 0.0230631232, -0.0583035201, -0.0540622547, 0.0039173961, 0.0480436310, 0.0239222497, 0.0525426567, -0.0643506348, -0.0057582706, -0.0525700636, -0.0583332181, 0.0050845519, 0.0625176877, 0.0660778582, -0.0319831297, -0.0043976083, 0.0667137653, -0.0692996532, 0.0625638217, 0.0682117641, 0.0706443340, 0.0305548608, -0.0475259610, -0.0099338442, 0.0010558516, 0.0585548431, -0.0223561972, -0.0338170044, -0.0152221210, 0.0529080480, 0.0510344282, -0.0648131594, -0.0163765140, -0.0621403903, -0.0661850721, -0.0129403509, 0.0489276648, 0.0293826461, -0.0353851430, -0.0034243464, 0.0710074604, 0.0344327167, 0.0459416881, 0.0305475518, 0.0076768994, 0.0095520541, -0.0160920061, -0.0125955008, -0.0227794908, 0.0115021393, 0.0532485098, -0.0469031781, 0.0039121136, 0.0339324251, -0.0640853494, 0.0268870667, -0.0502578169, -0.0525308326, 0.0185663328, -0.0137236714, -0.0117783174, -0.0319984779, -0.0225410275, 0.0580317825, -0.0584236570, 0.0586991459, -0.0040556490, -0.0700171962, -0.0306305028, -0.0652853847, 0.0517633408, -0.0227276459, -0.0007729083, -0.0380858183, -0.0514140725, -0.0698807836, -0.0587010905, -0.0109742284, -0.0376694612, 0.0312578306, 0.0655403137, -0.0695328861, -0.0444613323, 0.0572730899, -0.0225474089, -0.0703645200, -0.0653258562, -0.0589947179, 0.0175943151, 0.0066454485, 0.0230220482, -0.0075135753, 0.0200654268, -0.0029655918, 0.0591315329, 0.0513570458, 0.0577096492, -0.0080606341, 0.0382968560, 0.0323444456, -0.0180641003, -0.0270207413, -0.0590366349, -0.0277318992, 0.0372388735, 0.0301861838, 0.0281300396, 0.0557758361, -0.0343400091, 0.0719744265, 0.0481994003, -0.0024909005, -0.0285624005, 0.0554716140, 0.0091338009, -0.0393769518, -0.0253493153, 0.0558160990, -0.0424622297, 0.0356725752, 0.0062511787, -0.0271741040, 0.0270580426, -0.0568742752, 0.0545217097, -0.0112800561, -0.0656170920, -0.0159793049, 0.0230393261, -0.0678387806, 0.0707011670, -0.0362907834, -0.0538392402, -0.0595953576, -0.0370151177, -0.0316064134, -0.0259983391, 0.0560141653, -0.0187095962, 0.0439913943, 0.0316444412, -0.0207543336, -0.0337300077, -0.0717195719, 0.0404640138, 0.0412275493, 0.0175430551, 0.0123608708, 0.0342162102, -0.0334607102, -0.0613983124, 0.0191583708, -0.0578719005, 0.0585406274, 0.0244001970, 0.0133255124, 0.0327264667, -0.0035789460, -0.0274986476, -0.0689240918, -0.0477483049, 0.0180223063, 0.0416386649, 0.0608682930, 0.0095228329, -0.0418540537, 0.0233084634, 0.0415729135, 0.0434135348, -0.0719403997, 0.0204250887, 0.0495902970, -0.0048795715, 0.0126752853, -0.0500990227, -0.0705248341, -0.0644213557, -0.0694608092, 0.0119380057, 0.0580741912, 0.0471564531, -0.0231345259, 0.0638434291, -0.0469634533, 0.0630380809, 0.0092307255, 0.0689725578, 0.0587929040, -0.0174619108, 0.0497259721, 0.0353862569, 0.0364808440, -0.0330025554, 0.0543518513, 0.0719614178, -0.0580306612, 0.0572378635, 0.0212634727, -0.0348273963, 0.0009246916, -0.0359175056, 0.0328654870, 0.0250850916, 0.0222558305, -0.0007082522, -0.0166851282, 0.0514094085, 0.0245957077, -0.0353939347, -0.0040705279, -0.0155393891, -0.0140780360, -0.0681314617, -0.0244190358, 0.0072307587, 0.0652787685, 0.0674560368, -0.0179915577, -0.0139629431, -0.0017211363, 0.0167653412, 0.0324346423, 0.0680468529, -0.0312821418, 0.0392105505, -0.0058636069, -0.0490667596, -0.0223220922, -0.0168252215, 0.0560574979, -0.0550986268, 0.0721143186, 0.0426311120, 0.0441153124, 0.0379401520, 0.0133480877, 0.0322081372, -0.0492752641, 0.0199880973, -0.0187209547, -0.0219014660, 0.0013905317, -0.0516907498, 0.0257617310, 0.0447332785, -0.0710070431, -0.0103169270, -0.0426459387, -0.0390070155, -0.0057407692, 0.0695683360, -0.0355800539, 0.0419294313, 0.0678713024, -0.0655556619, -0.0455597565, 0.0577380806, 0.0624700934, 0.0481320545, -0.0100003481, 0.0680903494, 0.0049874261, 0.0136309415, -0.0606970340, 0.0136485994, 0.0444468781, 0.0337485373, 0.0692697465, 0.0167500451, 0.0091623589, 0.0096857101, 0.0147584304, 0.0206614360, -0.0150850564, -0.0236682333, -0.0303014144, 0.0262192860, 0.0397691578, -0.0486964583, -0.0508888625, -0.0402359813, -0.0268083103, 0.0548890978, 0.0678631067, -0.0438937806, 0.0440483317, -0.0503316149, -0.0100575425, -0.0554806776, -0.0393342450, 0.0682329983, 0.0666598380, -0.0641564056, -0.0433339179, -0.0531549230, -0.0277813338, 0.0584571511, -0.0266592689, -0.0342966318, -0.0277129374, 0.0451999009, -0.0438617431, -0.0383929722, 0.0086746812, -0.0681523830, 0.0659307688, -0.0108306073, 0.0522252321, 0.0545382649, -0.0419521257, -0.0412687436, -0.0042761639, 0.0433949530, -0.0686991885, 0.0166936144, 0.0291175097, 0.0281210542, -0.0319314077, -0.0596400425, -0.0259120315, 0.0330385342, -0.0010046437, -0.0286576897, 0.0302796289, -0.0091669187, -0.0621281192, 0.0629910380, 0.0235526040, 0.0113655329, 0.0696696639, 0.0351818129, -0.0414460711, 0.0681933165, -0.0597014353, -0.0391356833, -0.0436784104, 0.0526307151, 0.0488450751, -0.0135322325, 0.0258707032, -0.0717660636, -0.0128604770, 0.0244237110, -0.0328083150, -0.0056948438, 0.0381201282, -0.0405209698, 0.0442854986, 0.0290990993, 0.0425653309, 0.0433118120, 0.0688534975, -0.0544918254, 0.0177513734, -0.0437739044, 0.0697308034, 0.0452989414, -0.0163435973, -0.0491228700, 0.0255429521, -0.0605877861, -0.0654059723, -0.0697288513, 0.0503422320, 0.0637485981, 0.0071201175, -0.0173957869, -0.0535024591, 0.0199435726, 0.0343677104, -0.0147629865, -0.0698595643, -0.0220192783, -0.0044761226, 0.0117680132, -0.0367843471, 0.0291765779, 0.0409139097, 0.0333677083, -0.0140300281, 0.0508765578, -0.0009666905, -0.0442402661, -0.0615539253, 0.0534216911, -0.0185790360, -0.0125732496, 0.0149690136, -0.0403687954, -0.0444646701, 0.0128365234, 0.0375581160, -0.0661274195, -0.0483277291, -0.0519206263, -0.0219577476, 0.0388057679, -0.0691920295, -0.0186289847, 0.0208472461, 0.0426931754, -0.0308180861, 0.0321388617, 0.0003890023, 0.0535316318, 0.0310079753, 0.0000278726, -0.0091112927, -0.0228550769, 0.0315367654, 0.0714348257, 0.0125336424, 0.0616376698, 0.0117873177, -0.0306164809, 0.0117973611, 0.0177280903, -0.0503735840, 0.0617442876, 0.0680032074, -0.0045193434, 0.0322073475, 0.0371492058, -0.0706025064, 0.0682251453, 0.0471247062, 0.0408046544, 0.0034247562, -0.0047168359, -0.0104422569, 0.0103903785, 0.0170456916, -0.0630444437, 0.0463090092, -0.0171627440, -0.0434151851, 0.0651500970, 0.0578608215, 0.0552956611, -0.0510636121, -0.0604000315, -0.0241163559, -0.0374909788, -0.0338548757, 0.0544822812, 0.0246180445, 0.0132861286, 0.0397101194, 0.0637383759, 0.0209563896, 0.0544004589, -0.0500963703, 0.0029702485, 0.0004180968, 0.0432491452, 0.0488025174, -0.0664145425, -0.0155782066, 0.0138342902, 0.0386246741, 0.0024044737, -0.0628880262, 0.0234941542, 0.0701873600, -0.0171260759, 0.0492888764, -0.0052097961, -0.0633911192, -0.0411637649, -0.0034898669, -0.0574021488, 0.0173582956, -0.0333144739, -0.0701165795, -0.0521072112, 0.0017777979, 0.0500987321, 0.0151319429, -0.0475811958, 0.0302875787, 0.0636153221, 0.0596249402, 0.0364531428, 0.0052749440, -0.0572394431, 0.0114890262, -0.0275344029, -0.0596640110, -0.0100656450, -0.0060709119, 0.0550196469, 0.0369820446, 0.0644626170, 0.0355012640, -0.0110621527, 0.0455125049, 0.0316915885, -0.0683074445, -0.0526265167, 0.0610055774, -0.0205138735, -0.0400219858, -0.0369534492, -0.0124201141, -0.0146432146, -0.0213384889, -0.0401083268, -0.0242830701, 0.0617262721, 0.0316318944, -0.0101461522, -0.0308248140, 0.0673610866, 0.0440996885, 0.0019051284, -0.0231858864, -0.0095089674, 0.0259441063, -0.0172101818, -0.0653399155, 0.0265467912, 0.0127117634, 0.0104944780, 0.0646826327, -0.0013036728, -0.0545483828, -0.0011338666, 0.0692678392, 0.0694311857, 0.0543711782, -0.0299290158, -0.0428491980, 0.0269796550, 0.0583090931, 0.0194180012, -0.0550834686, -0.0534236208, 0.0008534864, 0.0175625682, 0.0224355683, -0.0027780756, -0.0610808022, 0.0201290920, 0.0328872725, 0.0394959524, -0.0296541788, 0.0427372530, -0.0690857768, -0.0497279987, -0.0197055712, 0.0061454847, -0.0256622992, -0.0158238821, 0.0044542477, -0.0045632869, 0.0009048134, -0.0096017420, 0.0193824023, 0.0219519660, -0.0067199543, 0.0336758941, 0.0660207868, -0.0007881746, 0.0702486336, 0.0557617396, -0.0434352830, -0.0139736086, 0.0616723001, -0.0452624969, 0.0004205406, 0.0456688255, -0.0647333562, 0.0700394064, -0.0117699355, 0.0267291963, -0.0174697228, 0.0344275236, 0.0425904840, -0.0445961952, 0.0599564314, 0.0666356087, -0.0265572369, 0.0234859511, -0.0292597227, -0.0682777688, -0.0073861852, 0.0094829723, 0.0009302646, 0.0386603400, 0.0418830439, -0.0629297793, 0.0494483411, -0.0089745894, 0.0670764744, -0.0641120374, 0.0318016410, 0.0390685126, -0.0371232778, -0.0231032297, 0.0456026867, 0.0610223860, -0.0697717443, 0.0316110626, 0.0165920109, -0.0440469347, -0.0512045845, 0.0331245661, 0.0161028653, -0.0224909559, -0.0317337401, -0.0164074525, -0.0044253245, -0.0196266808, -0.0329154767, 0.0697215647, 0.0486018956, -0.0601934008, -0.0437475294, -0.0541284271, 0.0535543561, -0.0369476341, 0.0679238439, -0.0515636429, -0.0311726406, 0.0666026324, 0.0353168845, -0.0379484110, -0.0235554986, 0.0244899616, 0.0307264253, -0.0674267039, -0.0663199052, 0.0409444198, 0.0579193681, -0.0161155276, 0.0092828423, -0.0142288506, 0.0192444026, 0.0521346927, 0.0601920485, 0.0699421614, -0.0078029037, 0.0250234455, -0.0538545027, 0.0126904771, 0.0184342265, 0.0366813689, 0.0125930533, 0.0516134053, 0.0456641316, -0.0012353137, 0.0193504468, -0.0048980713, -0.0633688718, 0.0265618786, 0.0706173033, -0.0687816888, -0.0345927514, 0.0651135594, 0.0519511700, 0.0287803188, -0.0721445233, 0.0687472969, 0.0460501686, 0.0572611988, -0.0559731573, 0.0593136102, 0.0331135541, -0.0021140128, 0.0306258947, -0.0700433999, 0.0084489509, 0.0084414184, 0.0530992448, -0.0008506626, 0.0115880296, -0.0476059020, -0.0418948308, -0.0595041662, -0.0511385612, 0.0373518094, -0.0462586954, 0.0073082373, -0.0577329583, -0.0337605141, 0.0309539512, -0.0372348428, -0.0452458560, -0.0681274533, 0.0116036683, -0.0448125675, 0.0365974680, -0.0521653183, -0.0556840561, -0.0348495059, 0.0713167638, -0.0338889249, 0.0323613584, 0.0017741993, -0.0580457188, 0.0699994862, -0.0655463710, 0.0709177852, -0.0113934949, -0.0237295739, 0.0361382142, -0.0200074054, -0.0618705228, 0.0425053984, -0.0378131866, 0.0005199388, -0.0710614324, -0.0218027011, 0.0143573955, -0.0126321130, -0.0509466082, 0.0180340558, -0.0151356235, 0.0429193825, -0.0701887608, 0.0171801224, -0.0200326480, -0.0521991476, 0.0259481296, -0.0243117511, 0.0502702743, 0.0094608217, 0.0464174077, -0.0106323026, 0.0292292684, -0.0614822283, -0.0328230932, -0.0082668588, -0.0348520540, -0.0339773148, 0.0287686512, 0.0513579771, -0.0012665987, -0.0121074580, -0.0233744532, -0.0167573616, -0.0442426577, 0.0255249366, 0.0151052698, 0.0440525413, 0.0000291467, 0.0362082273, -0.0593982078, -0.0386186689, 0.0266129151, 0.0193437561, 0.0276261792, 0.0562875122, 0.0483238548, -0.0325537622, -0.0296361819, -0.0323876515, 0.0165112615, -0.0519804880, 0.0347702727, -0.0333735272, -0.0547666103, 0.0116127878, 0.0204247981, 0.0314326137, -0.0087420270, 0.0029489696, -0.0029106289, 0.0565391332, -0.0343602784, 0.0230110213, 0.0300421789, -0.0304193795, 0.0015483126, -0.0142742395, 0.0580126196, 0.0533020198, -0.0710830763, -0.0284269676, -0.0332111306, 0.0450129509, 0.0042996705, 0.0683003366, -0.0445179790, -0.0188917071, 0.0654957145, 0.0242230743, 0.0565148294, 0.0133798867, -0.0372490920, -0.0465636253, 0.0586570948, -0.0027152523, 0.0045814365, 0.0086315945, 0.0415574461, 0.0374408588, -0.0316399820, 0.0539203584, -0.0335963331, -0.0010058507, 0.0706143379, -0.0706526935, -0.0337602571, -0.0652007163, -0.0298301131, -0.0271855630, -0.0330372453, 0.0600056350, -0.0615243465, 0.0044991374, -0.0675898567, 0.0649075806, -0.0273012742, -0.0427624807, -0.0489282645, -0.0664158463, 0.0298455507, 0.0073411539, -0.0519353375, 0.0398131683, 0.0656673312, -0.0670206547, 0.0144633874, 0.0606316775, -0.0656742007, 0.0474228784, -0.0292643867, 0.0447085351, -0.0330275223, 0.0002328008, 0.0192217454, 0.0104694963, 0.0542604625, -0.0551755577, 0.0335330144, 0.0684672743, -0.0252569318, 0.0362486765, -0.0256908089, -0.0445226394, -0.0529959388, 0.0144727305, 0.0407318845, -0.0148332752, 0.0249185562, 0.0444660634, -0.0684377849, -0.0446139537, 0.0360185802, 0.0555392504, -0.0043819621, -0.0001481101, 0.0238885432, -0.0225789659, 0.0473562181, -0.0587870553, 0.0517556667, -0.0590746403, -0.0721084550, 0.0336514786, -0.0384192802, -0.0549114719, 0.0715464205, -0.0702704713, -0.0233907998, 0.0382989570, -0.0530257076, 0.0225293785, -0.0423061475, -0.0540696345, -0.0280123278, -0.0062541366, -0.0556155741, -0.0036150068, -0.0388845392, 0.0216554627, -0.0214566812, -0.0394952111, 0.0114810094, -0.0310285911, -0.0689522400, 0.0062402338, 0.0279515758, -0.0252699740, -0.0261766650, -0.0365387239, -0.0359705538, 0.0118158758, -0.0262854956, 0.0015521049, -0.0185519010, -0.0022565499, -0.0523949862, -0.0261114538, -0.0265496150, 0.0545246601, -0.0366736576, -0.0042578578, 0.0069459379, 0.0383791029, -0.0495392978, -0.0487537570, -0.0281797647, 0.0666832477, -0.0211223103, -0.0116419569, -0.0085849985, -0.0430137441, -0.0710814744, 0.0701535046, 0.0491791666, 0.0644787252, -0.0577991344, 0.0429011658, 0.0562438071, 0.0288889930, 0.0335439071, -0.0510723516, -0.0522563756, 0.0619148165, 0.0640392601, 0.0473671332, -0.0329313241, 0.0113053471, 0.0420162007, 0.0554317236, -0.0646242499, 0.0056501105, 0.0555362850, 0.0011729226, -0.0715610385, -0.0615258440, 0.0106521249, -0.0261630565, 0.0231474116, -0.0068710372, 0.0670993328, 0.0341120586, -0.0520193726, -0.0615016893, 0.0450333282, -0.0022332519, 0.0161741525, -0.0064529628, -0.0019412413, -0.0506970137, 0.0515154004, -0.0172868706, -0.0222678259, 0.0130579695, -0.0521045960, 0.0280199349, -0.0189824887, 0.0211879686, -0.0005489364, -0.0436102375, 0.0632101595, -0.0668139532, 0.0368542224, 0.0111763552, -0.0294485092, 0.0298514813, -0.0222611465, 0.0304970518, 0.0275916532, 0.0282485858, 0.0207572952, -0.0029475763, -0.0526703447, -0.0329348482, -0.0133381598, 0.0361656547, 0.0418400988, 0.0198924467, -0.0119331218, -0.0137410499, -0.0041804984, 0.0719390810, -0.0637827069, -0.0166140497, 0.0263228491, -0.0226422697, 0.0066407993, -0.0099863410, -0.0253437236, 0.0676463991, 0.0238904059, -0.0114492774, 0.0448398367, -0.0354786068, -0.0080488324, -0.0094804242, -0.0569853075, 0.0172111988, -0.0332556628, -0.0167295896, -0.0359207578, -0.0503715873, -0.0135493167, 0.0147689208, -0.0698020309, -0.0371828452, 0.0162052587, -0.0123957694, -0.0122270063, -0.0044487640, -0.0107326843, 0.0237696692, 0.0092437640, 0.0177987069, 0.0532676727, 0.0135186762, 0.0103858709, 0.0181579292, -0.0585358739, -0.0398660079, 0.0147153288, -0.0313682966, -0.0364376381, -0.0694311634, -0.0089169145, -0.0082980841, 0.0411117300, -0.0354662016, -0.0110900104, 0.0363699496, 0.0211471245, 0.0464613661, 0.0455772504, 0.0273551494, -0.0319654755, -0.0435820520, -0.0124615133, -0.0096358135, 0.0210330412, 0.0601788163, -0.0318311974, 0.0443505421, 0.0569928885, -0.0407034941, -0.0155109838, 0.0308460966, -0.0250690579, -0.0089130774, -0.0014682710, 0.0034869760, -0.0309395306, 0.0361715779, -0.0340542458, 0.0373641327, -0.0668981597, -0.0657010749, 0.0375381932, 0.0426092595, -0.0555475429, -0.0455612838, 0.0048769563, 0.0628347397, -0.0191549845, 0.0280053914, -0.0044169649, -0.0667946264, -0.0631321296, 0.0455532670, 0.0125441179, -0.0243916586, -0.0397663675, 0.0647165626, -0.0079304874, -0.0245593004, 0.0056512281, 0.0301335156, 0.0603591502, 0.0269889757, 0.0247828290, 0.0325944573, 0.0621674508, 0.0706309378, -0.0094925165, 0.0450403094, 0.0707448870, -0.0667640716, -0.0660373271, -0.0617852323, 0.0258881003, 0.0357247964, 0.0586208403, -0.0055922791, 0.0048874542, -0.0324671268, 0.0146427006, -0.0600546300, 0.0643974841, 0.0406781137, 0.0421495885, -0.0478018820, -0.0056356415, -0.0653080493, -0.0668094456, 0.0659623593, 0.0143068433, 0.0071756616, 0.0177587867, 0.0474898294, -0.0589107163, 0.0641284436, 0.0433583185, -0.0439488925, 0.0406311229, 0.0395382121, -0.0536754876, -0.0434864722, 0.0675748140, -0.0412922651, 0.0552865565, 0.0122499466, 0.0057579279, -0.0075923502, 0.0350116268, 0.0546059459, 0.0287942365, -0.0235025696, -0.0637474656, 0.0348666757, 0.0572590232, 0.0302439630, -0.0414078534, -0.0113054849, -0.0112566873, 0.0505875126, -0.0210962780, 0.0509513244, 0.0125416294, -0.0168568827, 0.0588342547, -0.0050842240, 0.0313577130, -0.0712063238, 0.0488536060, -0.0005860999, 0.0158210099, -0.0271666348, -0.0691111758, 0.0443309620, -0.0700227171, 0.0615902841, -0.0720954984, 0.0378391296, -0.0057593510, -0.0471387319, -0.0460506529, 0.0418772772, 0.0240760967, -0.0497915260, -0.0049529076, -0.0178943239, 0.0005553216, -0.0719866902, 0.0281404480, 0.0580241829, -0.0475822240, -0.0332589149, -0.0263660736, -0.0182530768, 0.0359298289, -0.0393564403, -0.0481538251, -0.0129417442, -0.0323109478, -0.0247981586, -0.0530344285, -0.0579145700, 0.0678374320, -0.0193341374, -0.0331158079, 0.0634810179, -0.0677258521, -0.0214835070, 0.0046836287, 0.0623432398, -0.0003220662, 0.0446473882, 0.0622103810, -0.0331189074, -0.0008111745, 0.0632327497, 0.0659433901, -0.0104839318, -0.0024454594, 0.0619095713, 0.0188453346, 0.0334143192, -0.0274165571, 0.0483338386, 0.0141528174, -0.0619461797, 0.0072843730, -0.0718916878, -0.0278520696, -0.0501673482, -0.0711130127, 0.0060490370, -0.0149788596, 0.0055322275, 0.0225919262, -0.0315861627, 0.0098333955, -0.0207338408, -0.0698935986, -0.0224550627, -0.0495061949, -0.0255849920, -0.0281275958, 0.0366778597, -0.0028201565, -0.0397388712, 0.0637547672, -0.0384206735, -0.0311491527, -0.0365034528, 0.0338634625, 0.0521455333, 0.0511112586, 0.0167813823, 0.0586301535, -0.0618332215, 0.0625016689, -0.0188447535, 0.0201703832, -0.0136637911, -0.0568054318, -0.0683740675, -0.0051069930, 0.0284421295, 0.0194601938, -0.0407687947, 0.0254603103, 0.0119901970, 0.0100068003, 0.0614006966, -0.0500007719, -0.0008409098, 0.0088872984, -0.0039519072, 0.0217758417, -0.0259256437, -0.0584423095, -0.0131872445, 0.0714578629, -0.0269756615, -0.0259453952, 0.0633718669, 0.0299414024, 0.0464536771, 0.0303421766, 0.0598302633, -0.0350394137, 0.0211780220, -0.0307204239, -0.0338681228, -0.0017983392, 0.0390106142, 0.0083706975, 0.0634488463, 0.0176252350, 0.0422006771, -0.0520285778, 0.0497157648, 0.0234996304, -0.0631210506, 0.0635045767, -0.0596125498, -0.0059040561, -0.0601354167, -0.0050953776, 0.0026895255, -0.0014436692, -0.0402963758, -0.0187562779, -0.0582469292, 0.0441010296, -0.0437930897, 0.0636496842, -0.0424406864, -0.0365437679, -0.0062741712, 0.0007677972, 0.0031272620, -0.0285527110, -0.0249323174, -0.0443441756, 0.0391468033, 0.0365568772, 0.0099079832, 0.0297303647, -0.0278546475, -0.0232352354, -0.0042950362, -0.0223044045, -0.0123393834, 0.0715402961, -0.0146053582, 0.0520195439, 0.0300573260, -0.0037536919, -0.0260500796, 0.0024209395, 0.0251197666, -0.0006585419, 0.0040146634, 0.0265425220, 0.0536724478, -0.0627900138, -0.0032621548, -0.0256218128, -0.0079509988, 0.0113737062, 0.0256980211, -0.0025878251, 0.0201974139, 0.0498426780, 0.0412489399, -0.0337605327, 0.0112128630, -0.0696746856, -0.0248814747, 0.0129828528, -0.0310194530, -0.0322433598, -0.0511922985, -0.0573241189, 0.0139435828, -0.0652268380, 0.0190248713, 0.0343502089, 0.0075314417, 0.0694256872, -0.0189228691, 0.0187120736, 0.0057436600, -0.0140888914, -0.0428534672, -0.0045818537, 0.0619943440, 0.0503870249, -0.0451490879, 0.0033878833, -0.0410716087, -0.0173249133, -0.0634708181, -0.0629252717, -0.0241982266, -0.0450227112, -0.0427297875, -0.0330026075, 0.0482299924, -0.0040991604, -0.0380301923, 0.0320632234, -0.0034865290, -0.0371293016, 0.0680265427, 0.0484551787, 0.0271975547, 0.0524017140, 0.0445004404, -0.0486687757, 0.0615534335, 0.0290944204, 0.0716246516, 0.0641550273, -0.0439111069, -0.0565038696, -0.0378965661, 0.0256298482, -0.0388181396, 0.0073382631, -0.0160832144, 0.0401276127, -0.0033672675, 0.0010945871, -0.0492962375, 0.0241256133, -0.0014709383, 0.0472789630, -0.0665869787, 0.0494696796, -0.0450867489, -0.0056823716, 0.0612632185, -0.0551593155, 0.0166819096, 0.0131796375, -0.0160034113, -0.0550593287, 0.0672542453, -0.0202762894, -0.0675261915, 0.0664036274, 0.0637507737, 0.0533258170, -0.0264225788, -0.0544016138, -0.0344220139, -0.0159523264, -0.0027710348, 0.0093733445, 0.0483844876, 0.0323195308, 0.0116256252, 0.0171590596, -0.0163538530, -0.0700525865, -0.0715476871, -0.0304203592, -0.0406311750, -0.0159197189, -0.0112866461, 0.0403727517, 0.0572148710, 0.0588231087, 0.0223445967, 0.0361775309, 0.0680716187, 0.0416028574, -0.0053327382, 0.0627422482, -0.0100558363, 0.0022269711, -0.0417653359, -0.0288340189, 0.0298957527, -0.0173651576, -0.0403378233, 0.0593341291, 0.0582862496, -0.0678553507, -0.0490708202, -0.0604023710, 0.0347408801, 0.0527512655, 0.0081801042, -0.0658658072, -0.0538496673, -0.0561034605, 0.0252483115, -0.0331661887, -0.0531950668, 0.0687289834, -0.0578331500, -0.0272545256, -0.0039847940, 0.0606264025, -0.0118916035, 0.0051256567, 0.0518550724, 0.0622426122, 0.0049639717, -0.0159494169, -0.0107802600, -0.0207099244, -0.0195645466, -0.0173255689, -0.0032045320, -0.0147008561, -0.0161701404, -0.0394409783, 0.0432669669, -0.0233192183, -0.0392666943, 0.0560133010, 0.0610262007, -0.0049402416, 0.0291105062, -0.0207361802, 0.0214986131, 0.0446457341, 0.0613922030, -0.0460846350, 0.0498362631, 0.0607463270, 0.0380610079, -0.0416348055, 0.0072122291, 0.0043779016, 0.0149458870, 0.0590673685, -0.0492135659, 0.0102251694, -0.0290525928, 0.0302617028, 0.0705768615, -0.0160753876, -0.0701623634, 0.0201583207, -0.0713274926, 0.0045830384, 0.0318041667, 0.0244831443, 0.0707328618, 0.0392277390, -0.0710251778, -0.0083906725, 0.0211143792, -0.0267167576, -0.0342665873, -0.0169275142, 0.0365658626, -0.0368687958, 0.0034218356, 0.0652378947, -0.0567751825, -0.0594069511, 0.0668635368, 0.0151167139, 0.0248121470, 0.0470057428, -0.0702063441, 0.0091191903, 0.0293490067, 0.0148768052, 0.0301625580, 0.0288952217, -0.0401171371, -0.0286652409, 0.0676247627, 0.0184349641, 0.0705951452, -0.0300664417, -0.0547116548, 0.0603411049, 0.0097443536, -0.0225089528, 0.0312065557, -0.0651467592, -0.0709567145, -0.0679475442, -0.0373413004, 0.0331734866, 0.0148169100, 0.0449030921, 0.0379645005, 0.0393352285, 0.0367471799, 0.0472735465, -0.0461447388, 0.0481589362, 0.0360154137, 0.0677106231, 0.0689800829, -0.0202037655, 0.0564354956, 0.0168138817, 0.0116512626, -0.0165422633, 0.0617101640, -0.0540691167, -0.0350074619, -0.0410099924, 0.0501971170, -0.0083007365, 0.0304934531, 0.0398121029, -0.0297123864, -0.0418701917, 0.0365181789, 0.0562768579, 0.0544421673, -0.0508426800, 0.0183640420, 0.0139021352, -0.0398975983, -0.0655663311, 0.0054401606, -0.0090048909, -0.0433881879, -0.0008940622, 0.0307958573, 0.0368508473, -0.0160298236, -0.0516434163, 0.0648465604, 0.0464986414, -0.0381889381, -0.0387331061, -0.0295306519, -0.0262367167, -0.0112983100, -0.0649282038, 0.0619874597, 0.0152809322, -0.0681233034, -0.0166246295, -0.0590826944, 0.0585848093, 0.0130276233, 0.0234574080, -0.0440600142, 0.0213426724, 0.0011574179, 0.0341644362, -0.0718373880, -0.0685899258, -0.0617151484, 0.0152799040, 0.0640764534, -0.0314971693, 0.0311972275, 0.0716193020, -0.0505477637, -0.0470249653, 0.0033404082, -0.0018166527, -0.0524465553, -0.0049011856, -0.0190638080, -0.0135642365, 0.0596034974, -0.0251878835, -0.0040091053, 0.0182256848, 0.0588014424, 0.0184283033, -0.0198676214, 0.0240676478, -0.0510300770, 0.0425908267, -0.0619178414, -0.0383271389, 0.0042856783, 0.0317489654, 0.0089881644, -0.0708444789, 0.0598537475, -0.0202067569, -0.0015196651, 0.0012849867, -0.0363868289, 0.0282236263, 0.0330405980, 0.0369077697, 0.0361708552, 0.0581342578, -0.0526052341, 0.0097494796, 0.0293098763, 0.0062812716, -0.0078119338, 0.0386438370, 0.0650535077, 0.0130932257, -0.0083268583, 0.0441812500, -0.0483451225, -0.0518359020, -0.0629833639, 0.0081986338, -0.0599135235, 0.0617640465, 0.0071542040, -0.0003943369, -0.0286919624, 0.0557170063, -0.0267758258, -0.0675550848, 0.0666378736, 0.0271516144, -0.0639792681, -0.0648844987, -0.0081088170, 0.0110417306, -0.0151788145, -0.0302359611, 0.0197458863, -0.0113522187, 0.0677533895, 0.0117170587, -0.0111936256, -0.0643782839, 0.0341981575, 0.0202419609, 0.0116600022, 0.0005183071, -0.0172559656, 0.0617122352, 0.0704446733, -0.0180042386, 0.0370200425, 0.0189243630, -0.0483908914, -0.0272681005, 0.0448789001, -0.0576824397, 0.0630535781, 0.0212988779, -0.0228388347, -0.0104329661, 0.0338648856, 0.0167591125, -0.0303340182, 0.0491466448, 0.0107990652, -0.0666693151, 0.0055319220, 0.0635885447, -0.0186387077, 0.0265149623, -0.0697502047, 0.0073843896, -0.0238759667, -0.0590786338, -0.0197058804, -0.0001938492, -0.0118273906, 0.0648306608, -0.0345253907, 0.0356785133, -0.0624901578, 0.0234472007, -0.0661076456, 0.0460243821, -0.0114635080, -0.0437181555, -0.0613169074, 0.0718562007, -0.0583330467, -0.0636680424, -0.0647504926, 0.0588004738, 0.0317143649, 0.0007812008, -0.0163107514, 0.0358319879, -0.0382608958, 0.0624683648, -0.0313406289, -0.0336393639, -0.0205122419, -0.0413793623, 0.0448448658, 0.0036091432, -0.0630699843, 0.0291033536, -0.0021188110, 0.0180089548, -0.0315997191, -0.0665223002, -0.0044030249, -0.0709480569, 0.0478320122, 0.0443845093, -0.0006255209, -0.0526640117, -0.0065681040, 0.0483712777, 0.0635441393, -0.0164928660, -0.0545871481, 0.0664402992, 0.0220545158, -0.0196874514, 0.0708186775, -0.0667562410, 0.0009501725, -0.0019305870, 0.0663294494, -0.0698627979, -0.0173006356, 0.0268807858, 0.0023845136, 0.0620345324, 0.0639280826, -0.0540182032, 0.0654694736, 0.0019515306, -0.0049612522, 0.0407238156, -0.0284384973, -0.0363148004, 0.0671484619, -0.0063726902, -0.0028307438, 0.0679665208, -0.0331775621, 0.0326414779, 0.0205961019, -0.0332669504, 0.0253636837, -0.0312150903, -0.0479200743, -0.0554815531, -0.0037339404, -0.0299999937, -0.0113688745, -0.0318034776, -0.0092710704, 0.0196320117, -0.0158238299, -0.0225496627, 0.0144446865, -0.0258508287, 0.0389333367, -0.0437458232, 0.0716460049, -0.0340808965, 0.0376763567, 0.0306098238, 0.0540197492, -0.0173023045, 0.0072372779, -0.0398678854, -0.0593794882, -0.0570353754, -0.0311062932, 0.0644140095, 0.0610056072, 0.0168755502, -0.0108981431, 0.0341679826, -0.0568142049, 0.0370051712, 0.0669482797, -0.0685120001, -0.0119823515, 0.0207341537, 0.0506990403, 0.0523425788, 0.0182453543, -0.0486796647, -0.0336797982, -0.0525300428, -0.0104083605, -0.0429975167, -0.0211456083, 0.0658171624, 0.0075280145, -0.0380596146, -0.0353459977, -0.0080297887, -0.0396246202, 0.0398331657, -0.0615608096, -0.0370870754, -0.0446442030, 0.0209978223, 0.0413501114, 0.0107148588, 0.0633397996, -0.0412685350, 0.0183701664, 0.0248666406, 0.0367302150, -0.0463921800, 0.0360100046, 0.0280008167, -0.0569517016, 0.0518831015, -0.0638388321, 0.0608678907, -0.0198631138, -0.0680325925, 0.0033222213, -0.0418885350, -0.0358817689, 0.0514165312, 0.0199292675, -0.0668214858, -0.0367238335, 0.0345842838, -0.0539156348, -0.0218612552, 0.0393087119, -0.0681611747, 0.0395006835, -0.0362504497, -0.0470242761, -0.0260078199, -0.0422007255, -0.0363697596, -0.0328274630, 0.0426787734, 0.0020704269, 0.0007987395, -0.0475157425, 0.0230001286, 0.0236275941, 0.0183307454, -0.0014272556, 0.0427545309, 0.0083599910, -0.0623872504, 0.0017703325, -0.0198062435, 0.0219687447, -0.0589141771, 0.0127689242, 0.0264936239, -0.0350822397, -0.0088602901, -0.0259311311, -0.0686399117, -0.0474701971, 0.0334145129, -0.0035942569, -0.0541617721, 0.0264548063, 0.0512707606, -0.0362299047, -0.0361355618, -0.0690124929, 0.0388832688, -0.0001824573, -0.0286138803, 0.0134759694, -0.0664364398, 0.0291442648, 0.0328691006, -0.0246643275, 0.0028082877, -0.0004379526, -0.0077377409, 0.0673651099, -0.0541602746, 0.0521956161, 0.0631617904, 0.0473892763, -0.0470181480, -0.0017834902, 0.0106007159, -0.0311731063, -0.0369578712, 0.0428662673, 0.0680987388, -0.0382392667, -0.0427491441, -0.0669709593, 0.0666449815, 0.0140039995, 0.0596065074, -0.0337469205, -0.0180064254, 0.0210329741, -0.0431323312, -0.0221251473, 0.0221819654, -0.0561903566, 0.0262221619, -0.0267104767, 0.0563634336, -0.0389017649, -0.0691386536, 0.0709868968, 0.0373607576, 0.0680559725, -0.0084717646, 0.0276584998, -0.0525977984, 0.0321644321, -0.0044494644, -0.0286559835, 0.0482762456, 0.0617425293, 0.0434080139, -0.0038929284, 0.0356198177, 0.0453573018, -0.0584396236, 0.0635353774, -0.0644117519, 0.0149050951, -0.0270927325, -0.0566556305, -0.0473072343, -0.0197606310, 0.0030777752, 0.0040373206, 0.0310059637, 0.0183465108, 0.0544149131, -0.0068630576, -0.0711751133, 0.0448004901, 0.0291073918, -0.0244668685, -0.0394008681, 0.0420630723, 0.0147835985, 0.0320016816, 0.0157081857, 0.0447356030, 0.0066089034, -0.0569781996, 0.0452159867, 0.0439610556, -0.0695649236, 0.0306132957, -0.0640848279, 0.0265247151, -0.0626107752, 0.0607373565, -0.0044105947, -0.0135496445, 0.0605888069, 0.0065203235, -0.0153636113, 0.0695379078, 0.0285994783, 0.0335559323, 0.0170421079, -0.0064326376, 0.0516070202, -0.0553159416, 0.0527060479, -0.0006069690, -0.0257920846, -0.0692023709, -0.0606924221, 0.0350985005, 0.0544596016, -0.0387360156, -0.0123090632, -0.0298724920, 0.0229054913, 0.0070104972, -0.0293603279, 0.0650565624, -0.0313506946, -0.0419339389, 0.0453956425, 0.0651673079, 0.0301523060, 0.0315636918, 0.0443807021, -0.0308289453, -0.0599475726, -0.0700007081, -0.0372571610, 0.0617022216, 0.0329105854, -0.0334861763, -0.0571339875, -0.0144556463, -0.0134586059, 0.0252994299, 0.0461056083, -0.0306547619, 0.0681207180, 0.0279213935, 0.0385678932, -0.0475090481, 0.0208751708, -0.0508098826, 0.0276505500, -0.0603336170, -0.0343956724, 0.0125464797, -0.0635415018, 0.0575218350, 0.0622696131, 0.0696968734, 0.0472229421, 0.0209071115, -0.0668490157, -0.0003478602, 0.0129782185, -0.0462885648, -0.0038615242, 0.0346973017, 0.0539569110, -0.0122532658, -0.0703215376, -0.0638221726, 0.0093592703, 0.0236963332, 0.0443742722, -0.0646895170, -0.0236381926, 0.0290866792, -0.0501141287, -0.0139517933, -0.0266598724, -0.0670701712, 0.0035081059, -0.0130504370, 0.0571447462, 0.0246191472, -0.0243792720, -0.0543396696, -0.0359543785, 0.0717164129, 0.0042633265, 0.0347524658, -0.0268974416, 0.0273508281, -0.0304569751, -0.0479138270, -0.0131600052, 0.0616133362, -0.0103581548, -0.0720208585, 0.0568458438, -0.0539140888, -0.0658355430, -0.0416999012, 0.0369523987, -0.0119259655, 0.0700501800, 0.0490813702, -0.0220392719, -0.0148165002, -0.0164328665, 0.0227291808, -0.0217629895, -0.0354644619, -0.0565767922, -0.0591788962, 0.0487147197, -0.0093344748, 0.0052925423, -0.0472761430, 0.0339955017, 0.0639691055, 0.0577338934, -0.0034413934, -0.0230068564, -0.0601490587, -0.0677768886, -0.0591934025, 0.0109244883, 0.0644305348, -0.0475144312, -0.0089899749, 0.0284150615, -0.0194949470, -0.0670806691, -0.0068036616, -0.0213489346, 0.0393524468, 0.0488824248, 0.0464880541, -0.0582911335, 0.0647860616, 0.0635044277, 0.0193591565, 0.0449479446, -0.0209919550, -0.0477602109, 0.0653345883, 0.0477647185, 0.0552982092, -0.0407276861, 0.0171823949, -0.0256819129, -0.0219746269, -0.0479037464, -0.0479775257, -0.0034522042, 0.0453106090, 0.0387711525, 0.0222663283, -0.0135425888, -0.0554738268, 0.0407410562, 0.0261857137, 0.0649566650, -0.0142217614, 0.0694303215, -0.0251897611, 0.0240901187, -0.0654432252, 0.0314792767, -0.0603944920, -0.0133209713, -0.0330878831, -0.0468576998, 0.0388111547, 0.0512164012, 0.0296651050, 0.0425602198, 0.0343798101, 0.0338136107, 0.0706153363, -0.0118334629, -0.0620931238, 0.0127665848, 0.0489193350, 0.0423526093, -0.0188263953, 0.0382952541, 0.0139246583, 0.0283710659, -0.0122829787, 0.0228618756, 0.0266389325, -0.0535669476, -0.0002373755, 0.0681323558, -0.0245501660, -0.0432477854, -0.0682421997, -0.0518857464, -0.0431488678, -0.0338669866, 0.0013442114, 0.0374225155, -0.0280308239, -0.0617253035, -0.0435585305, 0.0294957235, -0.0692136586, -0.0053341687, 0.0115196183, 0.0331711620, -0.0174270160, -0.0532122217, 0.0245017260, -0.0600333661, 0.0319296345, 0.0451143831, -0.0483847670, -0.0198519789, 0.0676795691, 0.0313622728, 0.0371112302, -0.0077393427, -0.0136595257, 0.0392789617, -0.0538500808, -0.0006630793, -0.0453173667, -0.0104622021, 0.0474580675, 0.0238310099, -0.0610291995, 0.0358655751, -0.0659544915, 0.0185840279, 0.0215107948, -0.0228580199, 0.0509905666, -0.0386648327, -0.0312278569, -0.0058509111, 0.0667582601, 0.0162365735, 0.0096397549, 0.0142101943, -0.0167780071, 0.0655658841, -0.0419609696, -0.0126509033, -0.0301765651, -0.0599752925, -0.0069257766, -0.0168735906, 0.0141812190, 0.0239761770, 0.0122586489, 0.0286243930, 0.0336653143, 0.0098743141, 0.0513354540, -0.0078260452, -0.0187093541, -0.0081210658, 0.0672067106, -0.0438861586, -0.0275963657, 0.0526245758, 0.0697752535, 0.0495173782, -0.0387673490, -0.0400591679, -0.0386362523, -0.0077766329, -0.0708177239, -0.0702536926, 0.0237902105, -0.0568879172, -0.0157432184, -0.0115209594, -0.0099853612, -0.0211443491, -0.0552640483, 0.0083772689, -0.0419689901, 0.0537818074, -0.0095553398, -0.0355889164, 0.0553597808, -0.0188382640, -0.0126738213, -0.0325085968, -0.0104758441, 0.0388008505, 0.0198743120, 0.0120099336, 0.0098982826, -0.0275995806, 0.0195590779, 0.0609356016, 0.0033546090, -0.0374067873, -0.0005731806, -0.0341525637, -0.0290412530, 0.0247526690, 0.0456630290, 0.0313829556, 0.0128987134, -0.0015416890, 0.0514562950, 0.0600618124, -0.0656284168, 0.0415285230, 0.0086743534, -0.0646621212, -0.0499792621, 0.0652897209, 0.0702746809, 0.0503582358, -0.0483702943, -0.0386298522, 0.0026195198, 0.0192184895, 0.0573469847, -0.0489586517, 0.0668507665, 0.0191803649, -0.0227172896, 0.0146407858, 0.0145571604, 0.0316364914, 0.0665165782, -0.0477096923, -0.0097518191, 0.0116039291, -0.0223504826, 0.0503674373, 0.0445138961, 0.0018656701, -0.0366739146, 0.0154437050, 0.0591544062, -0.0697047785, 0.0064433068, -0.0581728891, 0.0652107745, 0.0171257630, -0.0279021896, 0.0396829993, 0.0382312164, -0.0668761358, -0.0531756058, -0.0345854238, -0.0620164499, -0.0085939690, 0.0517851412, -0.0562621206, 0.0647319853, 0.0219955146, 0.0446471125, 0.0114374235, -0.0480157956, -0.0381336026, -0.0311519764, -0.0311872512, 0.0357274637, 0.0085042492, 0.0377059728, -0.0495747402, 0.0428827852, -0.0273174644, 0.0648930967, -0.0202944241, 0.0209020674, 0.0450001881, -0.0199886858, 0.0224464610, -0.0027922168, 0.0433233753, -0.0424561352, -0.0552312210, 0.0670775324, -0.0579583794, -0.0544078574, -0.0054690167, 0.0251726732, 0.0263185129, -0.0680120140, -0.0256890357, -0.0455343425, -0.0416060388, 0.0691068769, -0.0038942695, 0.0033297241, -0.0682737082, 0.0229732022, 0.0651268661, -0.0706509054, -0.0402802862, 0.0211098716, -0.0261711925, 0.0608424991, 0.0397311077, -0.0154571272, 0.0620689243, -0.0655538961, 0.0531757921, 0.0637072474, 0.0053790212, 0.0317059383, 0.0311532840, -0.0008565858, 0.0237221941, -0.0086087435, -0.0050412416, -0.0584170669, -0.0188450441, 0.0331467465, 0.0204150379, -0.0664062798, -0.0685060620, -0.0112522505, -0.0194116347, -0.0264552012, 0.0109906420, -0.0424838588, 0.0536094904, -0.0577302389, 0.0407792553, 0.0292933583, -0.0230490789, -0.0525524244, -0.0148325339, -0.0313782729, -0.0657998249, -0.0218745023, 0.0037234426, 0.0706804097, 0.0257540569, -0.0689523593, 0.0334099010, -0.0624626465, -0.0378127024, 0.0621085912, 0.0606970936, -0.0034711137, 0.0649104714, 0.0618658960, 0.0106357932, 0.0605255812, -0.0631991327, 0.0605505407, 0.0625514835, -0.0533558615, -0.0395363346, 0.0318537578, -0.0365500823, -0.0137238950, -0.0275483429, 0.0658109784, -0.0279206522, -0.0533217043, 0.0584597588, -0.0144171044, 0.0267268941, -0.0383986644, -0.0017774552, -0.0402162261, 0.0005714744, -0.0371937566, 0.0135739222, 0.0437730774, 0.0714675635, -0.0208800249, -0.0175502636, -0.0692464188, -0.0429306552, -0.0102950074, 0.0010863245, -0.0225358978, 0.0225279853, -0.0504986718, -0.0577248186, -0.0126897059, -0.0132914111, 0.0347931758, -0.0195245594, 0.0694299191, 0.0109434798, 0.0698987693, -0.0415352508, 0.0435267836, -0.0673771128, -0.0126355886, -0.0174710304, -0.0447070077, 0.0496120453, -0.0257601514, 0.0133564845, -0.0235905461, -0.0128114559, -0.0461285636, -0.0539140552, -0.0680467859, -0.0110951029, -0.0378986485, 0.0609100610, -0.0473475978, -0.0121675767, 0.0463347435, -0.0582692809, -0.0406441838, 0.0245317742, -0.0102776811, -0.0699269995, 0.0187883303, 0.0697992444, -0.0502070412, -0.0434880704, 0.0197901949, 0.0339088514, 0.0118971989, 0.0030324012, 0.0662563145, 0.0402560607, -0.0194656290, 0.0284616053, 0.0467943326, 0.0576195866, -0.0665282384, 0.0538694263, -0.0083606318, -0.0217676014, -0.0718390420, 0.0104749128, -0.0017019361, 0.0137194172, 0.0613320321, -0.0535566248, 0.0534204990, -0.0717384666, 0.0533610284, 0.0059045553, 0.0314078704, -0.0238621496, -0.0608772188, -0.0075658858, -0.0198033899, 0.0559160709, 0.0138206482, -0.0097742714, -0.0623404644, -0.0157372132, 0.0578521788, 0.0669562966, 0.0696000606, -0.0069132671, 0.0193896070, -0.0412398502, -0.0239743367, -0.0493150130, -0.0144471303, -0.0570325889, 0.0221667513, 0.0602148622, 0.0629732013, -0.0064145699, -0.0150793269, -0.0575458035, 0.0157877281, -0.0371701308, 0.0676028281, -0.0087835118, -0.0385211259, -0.0069830194, 0.0063702166, 0.0116062686, 0.0267391279, -0.0611865371, 0.0121663883, -0.0067113340, -0.0659214705, -0.0359079242, 0.0583876818, 0.0656288713, -0.0237048492, -0.0285131708, 0.0541536510, -0.0492726341, 0.0011782944, -0.0252047814, 0.0030920729, -0.0444430932, -0.0179983005, -0.0596040115, -0.0659024566, 0.0092148930, -0.0086867958, -0.0246258043, 0.0520841181, -0.0071870536, 0.0413215309, 0.0384901688, 0.0034536496, 0.0581350327, 0.0670176893, -0.0452447385, -0.0603916533, 0.0278789625, 0.0348088965, -0.0599869266, 0.0141824409, -0.0271008387, 0.0352577791, 0.0651129633, -0.0064148307, -0.0343953967, -0.0255975164, -0.0359824784, 0.0705963820, -0.0620288402, 0.0605427921, -0.0015794411, -0.0413955525, 0.0436902791, 0.0003162846, -0.0674976259, 0.0012892932, 0.0264983550, -0.0578038320, 0.0393343344, 0.0541540682, -0.0564067438, -0.0517355017, 0.0600543022, 0.0510400236, -0.0382424332, 0.0652007163, 0.0593068600, 0.0070853308, -0.0060612708, 0.0599482656, -0.0558365397, -0.0030697733, 0.0592610091, -0.0431383699, -0.0658581033, -0.0211329274, 0.0100395754, 0.0589461178, -0.0615972169, 0.0167558268, 0.0282010138, 0.0088283718, -0.0629185960, -0.0125878602, 0.0598127097, -0.0609280802, -0.0473393574, 0.0697649866, 0.0123531669, 0.0483226851, -0.0431377515, -0.0002031550, 0.0084881783, 0.0307616815, 0.0216005966, 0.0126352310, 0.0046074390, 0.0233205929, 0.0519502386, -0.0536015853, -0.0616397522, 0.0538002104, -0.0618596487, -0.0112428367, 0.0327269286, 0.0237188712, 0.0638588369, -0.0467682779, -0.0077996701, -0.0526359305, 0.0047190562, -0.0697722286, -0.0555077419, 0.0404782295, -0.0278245211, 0.0192868859, -0.0429827049, -0.0273841396, -0.0453917533, 0.0139817968, -0.0055483654, 0.0533003807, 0.0113521814, 0.0158926547, -0.0296258405, -0.0206462443, 0.0103335679, -0.0348312147, -0.0280200541, 0.0006527081, 0.0601417720, 0.0677713156, -0.0454449020, -0.0564713329, 0.0084449276, 0.0445597693, 0.0703354329, -0.0035732985, 0.0635058582, -0.0634854138, 0.0067034513, -0.0070532188, 0.0681320727, 0.0354245976, -0.0494425297, 0.0423109978, 0.0498512462, -0.0409071483, -0.0318105333, -0.0415822268, -0.0652076304, 0.0389188305, -0.0547684543, 0.0630549788, -0.0492394567, 0.0308044106, -0.0116721876, 0.0624241084, -0.0715305954, -0.0296421163, -0.0334579572, 0.0464683026, -0.0553157181, 0.0533702821, 0.0453532115, 0.0066247508, 0.0039734319, 0.0371979699, 0.0720935017, 0.0078602359, -0.0717367977, 0.0259802565, -0.0668541417, 0.0616326779, -0.0646258146, 0.0042263716, 0.0668571144, 0.0258028731, -0.0463794470, 0.0258947238, -0.0525679961, 0.0114948899, -0.0381154828, -0.0433750786, 0.0577466190, -0.0155540854, 0.0255241990, 0.0718884766, 0.0076370314, -0.0480945818, 0.0019974336, 0.0225041732, 0.0484938025, -0.0352096371, -0.0093860626, 0.0595391393, -0.0665987507, 0.0107168928, 0.0261745676, -0.0719500706, -0.0473004207, 0.0520970449, 0.0186213255, 0.0296955258, -0.0234633237, 0.0525219887, 0.0078959912, 0.0281824321, -0.0618546605, -0.0326515138, 0.0678632855, 0.0216673389, 0.0052325428, -0.0238122344, 0.0027654916, -0.0274056643, -0.0024415180, -0.0111284330, -0.0675843656, -0.0389647558, 0.0430427045, -0.0357471630, 0.0553272665, 0.0027733594, 0.0017772838, -0.0288474225, 0.0052570477, 0.0058947876, -0.0147180595, 0.0140560791, 0.0439316332, 0.0117223412, 0.0067560300, 0.0354217067, -0.0607873835, -0.0450176857, -0.0707893446, 0.0625120103, -0.0656603500, -0.0378865711, 0.0343568549, 0.0338349640, -0.0572286397, -0.0301836692, -0.0573698878, -0.0182804018, -0.0202538334, -0.0535609797, -0.0647635385, -0.0504420474, 0.0369845629, 0.0132319108, -0.0335280560, -0.0651771277, 0.0642701387, 0.0581261963, -0.0293021537, 0.0649422556, 0.0495446175, -0.0246876255, 0.0606467426, -0.0015503615, 0.0295560360, -0.0069350153, -0.0076279864, -0.0232786834, 0.0551704168, -0.0681735650, -0.0327253118, 0.0640939176, 0.0691137761, 0.0164895803, 0.0153717324, 0.0151160583, 0.0039827600, 0.0360338390, -0.0243300088, -0.0374878980, -0.0278661586, -0.0130045637, 0.0479475036, 0.0020207539, -0.0318982862, -0.0505546294, 0.0705247819, -0.0664998516, 0.0336197838, 0.0185197741, 0.0371262357, 0.0606191903, 0.0157488585, 0.0629969686, 0.0442863777, -0.0701575130, 0.0635176748, 0.0324864686, 0.0594999343, 0.0265214816, 0.0104001388, -0.0417086929, -0.0155132525, -0.0626255721, -0.0092420131, 0.0391757265, -0.0027561858, -0.0172099583, 0.0588292331, 0.0303540826, 0.0233294070, -0.0419337153, 0.0075563043, -0.0354149416, 0.0050734580, 0.0581195205, 0.0394886062, -0.0138342045, 0.0560297519, -0.0549199060, -0.0520908833, -0.0389322005, -0.0594413616, 0.0165271536, -0.0176057741, -0.0493116230, -0.0145902522, -0.0201093853, -0.0353292711, 0.0469082221, 0.0131082460, -0.0070158839, 0.0685091466, 0.0091316849, 0.0074236542, -0.0377034768, -0.0347515866, 0.0134571791, -0.0362589657, -0.0570411421, 0.0455607325, 0.0443347991, -0.0127142929, 0.0582019389, -0.0482576452, 0.0654475093, -0.0015785098, -0.0442381352, -0.0444394499, -0.0364153199, -0.0144023597, 0.0097656846, 0.0015490204, 0.0625191480, 0.0221195891, 0.0110398009, -0.0130095370, -0.0649717674, -0.0451759323, 0.0128976405, -0.0197685808, 0.0040245876, 0.0061187968, 0.0716674775, -0.0440740362, 0.0120844021, -0.0028650016, 0.0653171092, 0.0390908942, 0.0219741613, 0.0567912757, -0.0189715810, -0.0350810513, -0.0702013001, 0.0157343224, -0.0622289479, 0.0229900628, 0.0061310306, -0.0191250257, -0.0641299114, 0.0388490930, 0.0057057217, 0.0596718788, 0.0341000110, -0.0372567661, -0.0720889270, -0.0542653203, 0.0020619631, -0.0577881895, -0.0581887364, 0.0178128332, -0.0166895166, 0.0107414573, 0.0016057342, 0.0427400395, 0.0579483062, 0.0485311747, 0.0096743703, 0.0335657224, 0.0151989758, -0.0220879838, 0.0536773354, -0.0183006525, 0.0010958388, -0.0025068820, 0.0659781396, 0.0265657529, -0.0546388552, 0.0262353420, -0.0361126959, 0.0153422728, -0.0549478829, -0.0237278529, 0.0308246389, -0.0177800395, 0.0534815937, -0.0556104481, -0.0652638450, -0.0245206878, 0.0018422380, -0.0442507789, -0.0457865857, -0.0243706666, -0.0432515703, 0.0194814950, 0.0540449768, 0.0134192035, -0.0695843846, 0.0631752461, -0.0581942424, 0.0109731629, -0.0039539263, -0.0171581507, -0.0333863460, 0.0381774083, -0.0360890701, 0.0485689789, -0.0086510256, -0.0038881972, 0.0611819923, 0.0338315740, -0.0693122968, -0.0398858637, -0.0607904270, -0.0016692951, -0.0219177268, 0.0145867914, -0.0075964928, -0.0395164788, -0.0122759938, 0.0255601779, -0.0417348109, 0.0529120117, 0.0083885416, -0.0237677917, 0.0538253039, -0.0603858531, 0.0413650274, 0.0434559286, -0.0279216319, -0.0621775724, -0.0033643320, 0.0416222811, 0.0301753059, 0.0575854629, 0.0214938149, -0.0677250102, 0.0495218858, 0.0685203969, 0.0273604840, 0.0564160198, 0.0709538460, -0.0485773757, -0.0512269139, -0.0088930279, -0.0304570459, 0.0409443304, -0.0354315452, -0.0332519636, 0.0350741521, -0.0164658166, -0.0188094974, -0.0239404887, 0.0055300072, 0.0652242899, -0.0328933634, 0.0129771903, -0.0584198721, 0.0011360869, 0.0189681426, 0.0595726222, -0.0520249158, -0.0264788605, 0.0056921095, 0.0142311752, 0.0512495413, -0.0141733401, -0.0348016731, -0.0027315468, 0.0166909248, 0.0562779456, -0.0312288217, -0.0703331679, 0.0266607478, -0.0280639641, 0.0020258650, 0.0561102182, 0.0686005801, -0.0604825728, 0.0499885380, 0.0442859679, -0.0037659630, -0.0136500783, -0.0660804063, 0.0586523116, 0.0344110876, 0.0508337691, -0.0492560267, 0.0509932861, -0.0155211687, -0.0211208463, -0.0275102817, -0.0506607071, 0.0467580557, 0.0472735465, -0.0609361492, -0.0067667663, 0.0125254318, 0.0466919690, -0.0494538322, -0.0577759035, -0.0253178626, -0.0707468092, 0.0610394329, -0.0482330918, -0.0606797896, -0.0211776122, -0.0055163130, -0.0206103846, -0.0093351305, 0.0627414733, -0.0610644221, -0.0133705623, 0.0550768077, 0.0293321609, -0.0123015456, -0.0076689720, 0.0067702085, -0.0452824906, 0.0247288495, -0.0513137579, -0.0380664468, 0.0489432663, -0.0537389293, 0.0715521127, -0.0596923158, 0.0365150496, -0.0594265983, 0.0400750339, 0.0447226465, 0.0293587446, 0.0587180704, 0.0132656544, -0.0473307371, 0.0672890842, 0.0395302102, 0.0478265733, 0.0593113303, 0.0619204640, 0.0338511094, 0.0158224851, -0.0001212731, -0.0518586338, 0.0647444576, -0.0409437828, -0.0388299450, 0.0132493600, 0.0159541294, -0.0238080695, 0.0360924751, 0.0524584427, 0.0166285858, -0.0386308990, -0.0212272517, 0.0619427711, -0.0287923291, 0.0200859681, 0.0704630911, 0.0407424197, -0.0064126998, 0.0022718981, -0.0159753487, -0.0630190000, 0.0202849060, 0.0149267763, 0.0275865421, 0.0403250754, 0.0038533881, 0.0349181965, -0.0165793076, -0.0331924111, -0.0083312765, -0.0717045888, -0.0587761998, -0.0315287113, 0.0182509273, -0.0301283002, -0.0673827603, 0.0153972507, -0.0569575354, 0.0085602403, -0.0236566551, -0.0222884044, -0.0365432836, 0.0575559437, -0.0614770837, 0.0468960702, -0.0127296932, 0.0394280925, 0.0024364367, 0.0176032633, 0.0682791620, -0.0061766580, -0.0697921142, -0.0193671882, 0.0061904266, -0.0368199125, -0.0083560199, 0.0012293607, -0.0425834656, 0.0474330783, 0.0523873642, -0.0638284534, -0.0326504447, 0.0445905849, -0.0015443265, -0.0623690262, 0.0392191336, 0.0683971792, -0.0178731605, -0.0365981571, -0.0336401723, 0.0657757223, 0.0405247062, 0.0178175643, 0.0382745042, 0.0586676747, 0.0329586491, 0.0226964504, -0.0021901280, 0.0619978309, 0.0049654841, -0.0234850198, 0.0405631736, -0.0260280706, 0.0212723315, 0.0251244754, 0.0432349816, -0.0661808401, 0.0149769634, -0.0182517357, 0.0349349529, 0.0338555425, -0.0287439451, -0.0608365759, 0.0227399170, 0.0525329337, 0.0017585754, 0.0517716184, 0.0236485004, -0.0720677152, -0.0092716366, 0.0598046333, 0.0357532203, 0.0071260035, -0.0709597096, -0.0318512619, -0.0099894889, 0.0339561999, -0.0027172118, -0.0411131606, -0.0010739341, 0.0502164736, -0.0534380041, 0.0425792113, -0.0447070412, 0.0165223926, -0.0237069838, 0.0485567972, -0.0386018381, -0.0324479267, 0.0575111955, 0.0322539955, 0.0335618481, 0.0529435128, -0.0099534616, -0.0041819438, 0.0611453801, -0.0422244705, 0.0118475705, 0.0140954852, -0.0149204955, 0.0373551175, -0.0172438361, -0.0560349450, -0.0297133848, 0.0399344191, -0.0475952849, 0.0266987085, 0.0494929627, -0.0264387541, -0.0415591523, 0.0559603870, -0.0649990365, 0.0260069594, 0.0373794138, -0.0572216511, 0.0374324396, -0.0160962902, -0.0266839787, 0.0256121606, -0.0212256350, 0.0330212936, -0.0056533068, -0.0414131060, -0.0291593224, 0.0557979345, 0.0508738235, -0.0442613102, 0.0684539527, 0.0451859459, -0.0269213244, -0.0097317547, 0.0328379273, 0.0353051499, 0.0254722536, -0.0299543776, -0.0395199023, -0.0222439915, 0.0120221972, -0.0051054955, -0.0014920682, 0.0695560277, -0.0493784025, 0.0252816603, 0.0242837742, 0.0326006189, -0.0424715355, 0.0529161990, -0.0108036771, -0.0024754480, -0.0614773072, 0.0433234051, -0.0357042514, 0.0098571703, 0.0552991480, -0.0126641355, -0.0289422125, 0.0169682950, 0.0430268049, -0.0239617415, 0.0317351520, 0.0553854108, -0.0564442165, 0.0223912969, 0.0305101946, 0.0491335392, -0.0456425026, 0.0228085890, -0.0345170461, -0.0459163040, 0.0556511134, -0.0136135817, -0.0301151201, -0.0706384629, -0.0174296126, 0.0158783719, 0.0516380817, 0.0687278956, -0.0327214226, -0.0310836136, 0.0027499422, -0.0542515367, -0.0285707265, -0.0574496202, 0.0328475237, -0.0581171922, 0.0570468307, 0.0273715109, 0.0062348023, 0.0025728717, -0.0407519825, 0.0086848661, 0.0510107353, 0.0116984770, 0.0655509233, 0.0351636931, -0.0672879890, -0.0243142992, -0.0461458713, -0.0523490123, 0.0126287565, -0.0029909685, -0.0601135269, -0.0413739607, 0.0551977009, -0.0438253693, -0.0121634305, -0.0110278614, -0.0609892830, 0.0119274929, -0.0706112981, 0.0480477437, -0.0617657527, 0.0394989625, -0.0627703816, -0.0698376819, -0.0638475567, -0.0603048801, -0.0280558094, -0.0275438167, 0.0299487337, 0.0125304386, -0.0323060602, 0.0202099383, -0.0674092397, -0.0112152025, -0.0364299305, -0.0171111226, -0.0657415465, -0.0310079753, 0.0040519610, -0.0384977236, 0.0164925009, 0.0264482871, 0.0081538931, -0.0459329784, 0.0095216855, -0.0361752585, 0.0044191852, 0.0586124957, 0.0165618137, 0.0199579522, -0.0296026617, -0.0431657098, 0.0120327994, 0.0082642958, 0.0144653693, 0.0090334192, -0.0304539464, 0.0419119820, -0.0002466366, -0.0019830316, 0.0223214552, 0.0697337538, 0.0504622161, -0.0415575355, 0.0499503389, -0.0271644853, -0.0098577738, -0.0500479192, 0.0195384622, 0.0315685272, -0.0434091836, -0.0515416376, -0.0046494231, -0.0114499517, 0.0080511570, 0.0140740946, -0.0265329741, 0.0168370977, 0.0133536458, 0.0398381874, -0.0299087800, 0.0087415799, -0.0352981463, -0.0132660829, -0.0127203315, 0.0471826568, 0.0041347593, 0.0238815770, 0.0665097535, 0.0245682001, -0.0661311299, -0.0517756268, -0.0716167316, 0.0117394477, 0.0346914157, -0.0419891216, 0.0591717958, -0.0415105969, -0.0178433247, 0.0713105351, 0.0014477447, -0.0202751197, 0.0385367125, -0.0070967898, -0.0187960938, -0.0271750651, -0.0192730017, -0.0662706941, -0.0401057117, 0.0367442593, -0.0482527427, -0.0574640557, 0.0634203404, 0.0636588335, -0.0138819851, -0.0027121902, -0.0379657038, 0.0177073777, 0.0649380833, 0.0298882350, 0.0342428759, -0.0269924030, -0.0395157561, -0.0142943524, -0.0003661513, 0.0228330567, 0.0120961368, 0.0406729728, -0.0525465421, 0.0128287002, -0.0126086809, -0.0603268184, -0.0644306093, 0.0514182821, -0.0653095767, -0.0676975995, 0.0469435081, -0.0349698812, -0.0045806170, 0.0703459233, 0.0108406171, 0.0642954409, 0.0587622374, 0.0359153897, -0.0685183108, 0.0169761777, 0.0246816203, 0.0362259969, -0.0600236431, -0.0532966703, -0.0586110502, -0.0083795786, 0.0406992659, 0.0059081540, 0.0607843250, -0.0678270459, -0.0010101348, 0.0190029964, -0.0369815677, 0.0024935305, -0.0672880560, -0.0502209626, -0.0519073941, 0.0435938761, 0.0025702864, -0.0612595938, -0.0263482146, -0.0437186547, -0.0563119501, -0.0139911436, -0.0010798872, -0.0380059294, 0.0526532009, 0.0013691112, -0.0356992260, -0.0219442062, 0.0078076199, -0.0400347710, 0.0061225817, -0.0033285767, -0.0173548162, 0.0442609861, -0.0244559757, -0.0477648750, -0.0638159290, -0.0145013109, 0.0122129470, -0.0022257119, 0.0008848533, 0.0206165612, -0.0032998025, 0.0704857111, 0.0441341028, 0.0486381799, -0.0483513325, 0.0696921796, 0.0101287737, -0.0478406474, 0.0581714958, -0.0174433962, -0.0182312094, 0.0630916804, 0.0703006536, 0.0414995477, 0.0070520863, -0.0707817078, 0.0356272832, 0.0379102081, -0.0081251115, 0.0468147695, 0.0719839334, -0.0351746567, 0.0322819874, 0.0664756149, -0.0708622709, 0.0684063286, -0.0584777370, -0.0493802764, -0.0203661397, -0.0089418963, -0.0527382195, -0.0140977725, -0.0660105199, 0.0060103238, -0.0518312044, 0.0209664404, 0.0054584667, 0.0439155474, -0.0323413685, -0.0136482529, 0.0137336329, -0.0242966115, 0.0484721437, -0.0198502243, -0.0020813867, -0.0439895838, -0.0455098376, 0.0584220439, 0.0389261097, 0.0594161600, 0.0362014771, -0.0612290353, 0.0607525706, 0.0518387780, -0.0391618200, -0.0418766588, -0.0562726706, 0.0419770405, -0.0431825556, 0.0604212582, 0.0126316845, 0.0556780994, -0.0496881008, -0.0582370199, 0.0146916807, 0.0617474169, -0.0623249263, -0.0547330752, 0.0014644340, -0.0414008014, 0.0703343898, 0.0388192907, -0.0534388795, -0.0265346430, -0.0472400784, -0.0153488107, 0.0227508917, -0.0531465635, 0.0116169751, 0.0470154807, 0.0701521039, -0.0212528892, -0.0174973719, 0.0392891839, 0.0407851040, -0.0243266895, -0.0482923687, -0.0370127596, -0.0513795540, -0.0098732784, -0.0010139570, -0.0074207634, -0.0139588974, 0.0220293105, 0.0044434592, 0.0317774639, -0.0591136143, -0.0219229385, 0.0082692802, -0.0707073584, -0.0364596620, 0.0657334924, -0.0122628845, 0.0551888347, 0.0679137856, -0.0073510110, 0.0086392537, -0.0032214820, 0.0660271943, 0.0139404386, 0.0081697926, -0.0410714373, 0.0454965010, 0.0133936852, 0.0661596060, -0.0493547767, -0.0120460466, -0.0576783270, -0.0290660299, -0.0534113348, 0.0273844674, -0.0144386999, -0.0599560402, 0.0706683546, 0.0662784576, 0.0596225411, 0.0000673085, -0.0545399524, -0.0315738954, -0.0565734208, -0.0006812662, 0.0031119287, -0.0288529992, -0.0265085064, -0.0106139258, -0.0557877570, 0.0078149140, -0.0510868207, -0.0705803260, -0.0625730231, 0.0697756708, 0.0294144750, 0.0373117402, -0.0178505182, 0.0222160667, -0.0111314766, -0.0475941524, -0.0384439714, -0.0441266522, 0.0459013209, 0.0709001422, -0.0665512607, -0.0337952040, 0.0304287076, -0.0631436408, -0.0236779563, -0.0567881204, -0.0691915974, 0.0679817200, 0.0626944155, -0.0295338370, -0.0059570372, 0.0497919768, -0.0375210904, -0.0115184300, -0.0661720335, 0.0035412610, -0.0204323493, -0.0039365590, 0.0528180227, 0.0652498007, -0.0460353568, -0.0223347396, 0.0588676035, -0.0574002378, -0.0484135896, -0.0073307976, -0.0474971235, -0.0044588447, 0.0709259361, 0.0600000322, 0.0054181665, -0.0136726685, 0.0663859099, 0.0148540586, 0.0564499944, 0.0463656485, 0.0550600290, 0.0489826873, 0.0101423338, -0.0454035550, -0.0017402843, 0.0078500807, -0.0464379191, 0.0411879718, -0.0369271263, 0.0270318389, 0.0070086047, -0.0016066656, -0.0363498665, -0.0321154147, 0.0158801824, -0.0013550892, 0.0438241959, 0.0566098392, -0.0136144795, -0.0170324557, -0.0423124805, -0.0494536757, -0.0096837655, -0.0000469536, 0.0003082156, 0.0644857883, -0.0114408806, 0.0328336209, 0.0525143296, -0.0415099040, 0.0141558945, -0.0191942304, -0.0122497715, 0.0275198966, 0.0434571728, 0.0436353236, 0.0166964829, -0.0010593310, -0.0163978003, -0.0439108834, 0.0255771428, -0.0673030391, 0.0140242800, 0.0666982681, 0.0218086913, -0.0649749637, 0.0292439610, -0.0046487302, 0.0369565859, 0.0178043172, 0.0527816340, -0.0636451915, 0.0462298021, 0.0067341775, -0.0704785287, -0.0537446886, 0.0720850676, 0.0230148882, 0.0289892554, -0.0305654109, 0.0300178006, -0.0220750421, 0.0432937592, -0.0058680996, -0.0018927008, 0.0313666910, 0.0459716097, -0.0402534455, 0.0520815253, -0.0648607835, -0.0098803490, -0.0404198654, 0.0638250858, -0.0050241277, -0.0088617504, 0.0288458243, -0.0254868791, 0.0616556853, 0.0492464975, -0.0604485720, 0.0624786466, 0.0551906824, -0.0106318556, -0.0548606291, 0.0100353435, 0.0489723608, 0.0084830746, 0.0244934708, -0.0327066742, 0.0456050262, -0.0141453296, -0.0179625303, 0.0396194234, -0.0667776614, -0.0490567088, -0.0500790626, 0.0664712638, 0.0558211505, -0.0483153537, -0.0539715737, 0.0623155832, -0.0259176753, -0.0672227070, 0.0624641627, -0.0338223018, 0.0352204740, -0.0662626624, 0.0400466397, 0.0088883713, -0.0324147344, 0.0354457274, 0.0626886636, 0.0132945627, -0.0477952734, -0.0386565886, 0.0246775746, -0.0513574928, -0.0105814599, -0.0381064862, 0.0529745966, 0.0675834864, -0.0492863134, 0.0131341293, -0.0382144563, -0.0454556048, -0.0548608005, -0.0112677328, 0.0486054420, 0.0249468535, -0.0246965736, -0.0341272354, -0.0622464493, -0.0569719002, -0.0078997388, -0.0638499111, -0.0214075744, 0.0395595282, -0.0050461516, 0.0367154703, 0.0413254723, 0.0352168977, 0.0305948704, -0.0296032131, 0.0298331752, 0.0233679637, -0.0395152047, -0.0343830064, 0.0537369698, 0.0231926143, -0.0104076378, 0.0578498542, -0.0329458974, -0.0230441056, 0.0123451278, 0.0502570122, 0.0453224778, 0.0277328268, 0.0340552106, -0.0368732177, 0.0282697901, -0.0477406979, 0.0558783710, -0.0628164783, 0.0244945362, -0.0613458306, 0.0159320235, -0.0082552284, -0.0321636088, 0.0264070109, 0.0432873219, 0.0304482207, 0.0304260924, 0.0084579512, 0.0120697916, -0.0311743282, 0.0210770592, -0.0365660675, -0.0224171057, 0.0256486684, -0.0146781094, -0.0231991708, -0.0720551535, 0.0290475637, 0.0508745313, 0.0011178479, -0.0701221004, 0.0280402750, -0.0282834321, -0.0095303357, -0.0316103026, -0.0117722265, 0.0394120887, -0.0593092330, -0.0039206818, 0.0305949003, 0.0244583189, -0.0657862499, -0.0089178085, -0.0336874723, -0.0697587878, 0.0144950673, -0.0003412887, -0.0194194131, -0.0023444742, -0.0279151313, -0.0124203898, -0.0525498614, 0.0399214476, -0.0410602018, 0.0483108312, 0.0491982847, -0.0422034413, -0.0482317135, 0.0601600409, -0.0372314900, -0.0077887625, 0.0381103531, 0.0165850073, 0.0274404436, -0.0330584422, 0.0201066136, 0.0483035892, 0.0625479370, 0.0012403205, 0.0337771550, -0.0594035611, -0.0317630097, 0.0598380715, 0.0502361059, 0.0246646181, 0.0078587756, 0.0643608421, 0.0423807055, 0.0365939736, 0.0695856214, 0.0463583544, 0.0607677847, -0.0118258931, -0.0611905791, -0.0642436966, 0.0660374612, -0.0490778908, 0.0008015260, 0.0208823979, -0.0631089881, -0.0687733442, 0.0329336077, -0.0077789500, 0.0562372208, 0.0470225736, -0.0214017741, -0.0054890737, 0.0709233284, -0.0627706796, 0.0230671614, -0.0297357365, -0.0244067833, 0.0224107057, 0.0455496907, 0.0526785478, 0.0662824810, -0.0172816031, 0.0577302426, 0.0368076414, 0.0443339720, 0.0642226487, 0.0295675993, 0.0701364279, 0.0262825042, 0.0016747117, 0.0315481201, -0.0311030746, -0.0403598845, 0.0311511829, -0.0587582365, -0.0517747700, 0.0226789191, -0.0276309475, 0.0194131508, 0.0135004520, 0.0678111166, 0.0522085428, 0.0378099158, -0.0535815060, 0.0275280699, 0.0063672066, -0.0705638602, -0.0210859850, -0.0509947687, 0.0602832735, 0.0130454302, 0.0580067337, -0.0721020401, 0.0571604371, 0.0666355193, -0.0299708284, 0.0285923034, -0.0398733057, -0.0648030564, 0.0127746165, -0.0643503442, -0.0512588844, -0.0691601261, -0.0523185916, -0.0581414886, -0.0081577525, -0.0062157884, 0.0043116584, 0.0266209170, -0.0436975770, -0.0394527279, 0.0328564420, 0.0625231415, -0.0507094860, -0.0545191839, 0.0199049264, -0.0711090788, 0.0558191538, 0.0385676324, 0.0518472269, -0.0628742725, 0.0260984451, -0.0371757746, -0.0340088904, 0.0497021899, 0.0518275425, -0.0052581131, -0.0445601344, 0.0575403124, -0.0276429057, 0.0604739785, 0.0715999603, 0.0448771417, 0.0487190336, -0.0375006981, 0.0510185435, 0.0676952451, 0.0041151792, 0.0365033671, 0.0499297976, -0.0526844487, 0.0335427672, 0.0527867228, -0.0492493361, 0.0418780893, -0.0179111362, -0.0544613712, 0.0142469332, 0.0157304704, 0.0683891773, -0.0404691435, 0.0461123511, -0.0516850203, -0.0370105915, -0.0087093189, -0.0271666534, -0.0446795113, -0.0518911332, -0.0311098546, -0.0646148175, 0.0638500005, 0.0671377033, -0.0260713287, -0.0361690484, 0.0383450687, 0.0048525259, 0.0382850692, -0.0058090314, -0.0548710749, -0.0707261637, -0.0016091913, -0.0342232808, 0.0615893751, 0.0661070794, -0.0381772369, -0.0653627664, -0.0262098908, 0.0339081809, -0.0458944514, -0.0559919812, -0.0052212253, -0.0167738460, -0.0124776699, 0.0349385813, 0.0074552819, 0.0050359443, -0.0423982739, -0.0321093909, 0.0721339583, 0.0460712984, -0.0235367790, 0.0310707465, -0.0618812777, -0.0591686592, -0.0247284584, -0.0213439278, 0.0457618088, 0.0455126092, 0.0005309358, 0.0481790453, -0.0082841516, -0.0435351133, 0.0119417459, 0.0404514596, -0.0450172871, 0.0069531351, -0.0588631593, 0.0434228927, -0.0602902211, -0.0425403938, 0.0602660775, -0.0498186275, 0.0585611761, -0.0441595502, -0.0021589547, 0.0001388043, -0.0094781518, -0.0365080312, 0.0286956280, 0.0332071558, 0.0610367060, -0.0639147460, -0.0646156967, 0.0143948421, -0.0637439042, 0.0072769076, -0.0188317113, -0.0141060799, 0.0623962134, 0.0063213333, 0.0150498673, 0.0207772553, -0.0514496528, 0.0348313674, 0.0688486099, 0.0330907553, -0.0145492330, 0.0289726183, -0.0695278645, 0.0098464713, -0.0313853808, 0.0221251696, 0.0198145360, 0.0680142790, -0.0521150231, 0.0325612798, -0.0199194811, 0.0119731799, 0.0559292436, -0.0588775612, -0.0447068512, 0.0002857298, -0.0517559424, -0.0340129137, 0.0152722448, 0.0254403204, -0.0097579770, -0.0602951758, 0.0076782107, -0.0579026826, -0.0188164301, 0.0539599806, -0.0380387791, 0.0705529302, 0.0526608452, 0.0604454726, -0.0260344371, -0.0572062545, -0.0614358224, 0.0311644822, 0.0675653070, 0.0639226735, -0.0455992781, 0.0440973341, 0.0136839896, -0.0674709976, -0.0452301316, -0.0459614210, 0.0122237056, 0.0280064121, -0.0287308507, -0.0317875110, 0.0389716029, -0.0603997223, -0.0175630338, -0.0678464025, 0.0707513392, -0.0449647084, 0.0031158328, 0.0707263201, -0.0286764428, 0.0022535026, -0.0060962737, 0.0682108700, -0.0394790359, -0.0663622320, -0.0340970531, -0.0585398525, 0.0061026067, 0.0251621455, 0.0190147161, 0.0423085392, 0.0483786762, -0.0024051219, 0.0637788177, -0.0107351802, -0.0572358668, -0.0190994255, 0.0296468660, 0.0337332115, 0.0666033477, 0.0183132291, 0.0050495937, 0.0607445687, -0.0088740885, 0.0605879277, -0.0220845938, 0.0663182139, 0.0473700538, 0.0289126188, 0.0598971397, -0.0141014010, -0.0195158534, 0.0312787667, -0.0220194310, 0.0499442294, 0.0486784279, -0.0126907006, -0.0692475364, 0.0191661716, -0.0585869104, 0.0218569711, -0.0402042679, -0.0662138239, 0.0719774514, 0.0292583108, 0.0292643681, 0.0423264727, 0.0557596087, -0.0685820282, -0.0425558127, 0.0208531991, -0.0024090111, 0.0558125824, -0.0606943294, 0.0474589765, 0.0699657053, -0.0572166629, 0.0221958980, 0.0590988547, 0.0275653750, -0.0216467083, -0.0459022149, 0.0675865859, -0.0268707350, 0.0072011128, 0.0079840198, 0.0367379263, 0.0586510450, 0.0149814934, 0.0009465069, 0.0154286325, -0.0014453158, 0.0679455996, -0.0138192847, -0.0181575641, 0.0268880650, -0.0248753801, -0.0231570825, -0.0458957106, 0.0702923536, -0.0032926276, 0.0282254815, 0.0443374515, -0.0338812880, 0.0197120607, -0.0381094255, 0.0573722124, 0.0587084889, -0.0054803491, 0.0502209142, 0.0237172395, 0.0496597216, -0.0324676633, -0.0132034160, -0.0637357309, -0.0025001764, -0.0469134487, -0.0633601323, -0.0133665502, -0.0296750478, -0.0306559838, 0.0296538025, 0.0318473727, -0.0414354540, -0.0157268010, 0.0597170144, 0.0628733188, 0.0660873801, -0.0470894873, -0.0366112329, 0.0653875768, 0.0696969330, -0.0695939660, 0.0221116766, 0.0384150296, 0.0171766430, -0.0025518462, -0.0374516621, 0.0403663516, 0.0198621005, -0.0317301787, 0.0607514679, -0.0184904896, -0.0454418063, 0.0288705826, -0.0348246098, 0.0081524476, -0.0306742080, 0.0182810053, -0.0352425016, -0.0313081928, 0.0194844007, -0.0653389022, -0.0147456415, -0.0568517521, -0.0277821235, 0.0158789754, 0.0665128082, 0.0001431778, 0.0091596097, 0.0081049278, -0.0582067184, -0.0595102236, 0.0574924052, 0.0619774908, -0.0647091493, -0.0127838589, -0.0602619499, -0.0709912628, 0.0208736435, -0.0281675979, -0.0005776510, 0.0569728017, -0.0106044970, -0.0310947821, 0.0517214090, -0.0341169983, -0.0528319627, 0.0632040352, -0.0467759185, 0.0441562310, -0.0682698712, 0.0425426140, -0.0563868508, 0.0541148931, -0.0056540817, 0.0586029738, 0.0114469230, -0.0712641031, -0.0301560350, -0.0591546334, -0.0683417767, -0.0278501920, 0.0681214929, -0.0649758279, -0.0708130598, 0.0005578101, 0.0622151047, 0.0600044727, 0.0670968890, 0.0479582027, -0.0381755009, 0.0138530806, -0.0413047895, -0.0036962405, 0.0590803772, -0.0417078994, -0.0001853332, 0.0636717379, 0.0613574237, -0.0281856470, -0.0685933307, -0.0063610449, -0.0356642641, -0.0286559835, -0.0132746510, 0.0219900608, 0.0530363321, 0.0192052424, 0.0213721991, 0.0079480931, -0.0700342953, 0.0433191583, 0.0389468968, 0.0545602590, 0.0400330797, -0.0234005712, 0.0282491744, -0.0124825910, -0.0174436197, -0.0001762286, -0.0665434822, 0.0304094180, -0.0663291439, -0.0623246506, 0.0163462311, -0.0181603879, 0.0655042827, 0.0547683984, 0.0322235003, -0.0579572767, -0.0058327392, 0.0597815514, 0.0269230753, 0.0555369407, -0.0314671956, 0.0644306242, 0.0513893068, -0.0000729561, 0.0622785687, -0.0381390378, 0.0560764968, 0.0601041168, -0.0564990863, 0.0279096738, -0.0193628184, 0.0539851189, -0.0442348458, 0.0682586282, 0.0291022509, 0.0146877095, -0.0678531826, -0.0590254143, -0.0263931043, -0.0697437823, -0.0080234408, 0.0267116502, 0.0331405178, 0.0584811121, 0.0643118620, -0.0668234825, 0.0217289180, 0.0285440907, 0.0696866214, 0.0246425122, -0.0012584403, -0.0126523823, 0.0517142192, 0.0628212839, -0.0512934178, -0.0534463525, 0.0702375621, -0.0264126323, -0.0056914389, -0.0153515153, -0.0355508551, 0.0408977717, 0.0226294026, -0.0605271012, 0.0559860170, 0.0715575665, 0.0286093205, 0.0135262981, 0.0065714270, 0.0654229224, -0.0338282213, -0.0612216890, -0.0015647337, 0.0340232924, -0.0125607923, 0.0368839726, -0.0327468514, -0.0242703706, -0.0518396012, -0.0685163289, 0.0085628927, -0.0615949482, 0.0097873658, 0.0459916890, -0.0451969579, 0.0514678732, 0.0712692887, -0.0585930012, -0.0243414156, -0.0631096736, -0.0438055135, 0.0240318701, -0.0237660520, -0.0527666286, -0.0329745449, 0.0646987557, -0.0030344129, 0.0275707245, -0.0714355633, -0.0472713076, -0.0410440601, -0.0321227424, 0.0243214220, -0.0415774435, -0.0596231297, -0.0283577964, 0.0534254462, 0.0514314622, -0.0601396151, -0.0111454651, -0.0220992342, -0.0149559043, -0.0539341345, -0.0515726283, 0.0426051617, 0.0262459889, -0.0479916707, -0.0698755682, 0.0615789890, -0.0371854976, -0.0438309088, 0.0102531463, -0.0700531900, -0.0488852337, -0.0429604910, 0.0581754744, 0.0516943410, -0.0676262975, 0.0676031262, 0.0242525265, 0.0672780424, -0.0447431393, -0.0194455460, -0.0287817977, -0.0550879762, -0.0630263984, -0.0313468911, -0.0249530859, -0.0667936131, -0.0175898038, 0.0193360820, 0.0259382352, 0.0295014679, -0.0717280433, -0.0015763417, -0.0281307250, 0.0424358994, 0.0348638222, -0.0702378154, 0.0524165854, 0.0492306128, 0.0624604076, 0.0710892379, -0.0713783205, -0.0412794948, 0.0440333411, 0.0488069281, 0.0069348961, -0.0458391868, -0.0481902659, -0.0602202266, -0.0190409571, -0.0516716838, 0.0496370494, -0.0216250271, 0.0459181145, 0.0715675950, -0.0315752178, 0.0137059316, 0.0292972699, -0.0119701512, -0.0082479492, -0.0384836495, -0.0221621245, -0.0053075328, -0.0502517596, 0.0302574858, -0.0488418378, 0.0240332857, -0.0320496000, 0.0446788594, -0.0623725206, 0.0658650547, -0.0331285074, 0.0476021543, 0.0622128993, -0.0612503886, -0.0340186097, 0.0462204963, -0.0457822159, 0.0376386419, 0.0425772667, 0.0463922992, -0.0323567502, -0.0369021595, 0.0068585128, -0.0006347448, 0.0536533296, 0.0456581563, 0.0268873274, 0.0114260688, -0.0326372497, -0.0213581584, 0.0494728982, -0.0073968992, 0.0452794954, -0.0092842728, 0.0124586076, -0.0564900897, 0.0469527170, 0.0546160042, -0.0111115016, 0.0443812758, 0.0607081056, 0.0474603698, -0.0402130783, 0.0589079410, -0.0107846484, -0.0447778963, -0.0705027431, 0.0406199247, -0.0688482299, -0.0339395478, -0.0081057027, 0.0567522347, 0.0013616607, -0.0384384990, -0.0381895415, -0.0504274741, -0.0670789778, 0.0225947425, -0.0210301690, 0.0177662745, -0.0244836621, 0.0673575103, -0.0373421088, -0.0150011405, -0.0610354133, 0.0022167489, -0.0522539318, -0.0420452803, -0.0401159488, -0.0275990665, -0.0059414133, -0.0690308586, -0.0234382190, -0.0167290382, -0.0068817958, 0.0001830608, -0.0668314844, -0.0665345341, -0.0630190149, -0.0255709663, -0.0119308680, 0.0314120874, 0.0388708636, 0.0216356814, -0.0035033226, 0.0272844285, -0.0138651058, 0.0711454600, -0.0642861277, -0.0312289745, 0.0394178331, -0.0360874534, 0.0239582658, -0.0669741109, -0.0075743198, 0.0193958357, 0.0545292795, 0.0521478206, 0.0388662294, -0.0425669812, 0.0581985861, -0.0384980142, 0.0325956419, -0.0390753746, 0.0026108250, -0.0179560445, 0.0091880709, 0.0683191419, 0.0420237929, -0.0273108743, 0.0495293140, -0.0281633325, -0.0298996978, 0.0094395056, 0.0543418676, 0.0383023769, 0.0139711872, 0.0476789623, -0.0631587654, -0.0412528068, 0.0070353299, -0.0375942513, 0.0308147669, 0.0493396372, 0.0018781126, 0.0020093918, -0.0050177947, -0.0448359326, -0.0685406625, -0.0107937343, -0.0452717692, -0.0598900355, 0.0688347667, -0.0043253601, 0.0232837424, 0.0419319645, 0.0644658208, -0.0628416687, 0.0061727911, -0.0411042646, -0.0411443561, -0.0195575804, 0.0504748747, -0.0266247354, 0.0242833123, -0.0474617332, 0.0027118102, 0.0030559376, -0.0574745871, -0.0015590712, -0.0659370124, -0.0633688867, 0.0677869320, 0.0063781813, -0.0132710896, 0.0721111298, 0.0676779449, 0.0282102153, -0.0459743775, -0.0384716727, -0.0686312169, -0.0173163116, 0.0012541190, -0.0219850019, -0.0263189971, 0.0029021129, -0.0351493098, -0.0661859885, 0.0398493037, 0.0666303188, 0.0357139707, 0.0378181934, 0.0438702628, 0.0262190625, -0.0674105138, -0.0070903674, -0.0435311049, -0.0555485934, 0.0629342496, 0.0488663390, 0.0197943226, -0.0715591088, 0.0347225890, 0.0172742382, -0.0444730856, -0.0582283959, -0.0162407570, 0.0218733996, -0.0091985837, 0.0312610641, 0.0448591486, 0.0222572386, -0.0630931258, -0.0296947509, -0.0493170433, 0.0498559326, 0.0348522961, 0.0609580874, 0.0125547573, -0.0082286075, -0.0639922768, 0.0523864180, 0.0332603455, -0.0484783351, -0.0069009140, -0.0003437698, -0.0665779114, -0.0385585465, -0.0012498200, -0.0305979140, -0.0414777845, 0.0436892137, 0.0347569734, 0.0042067394, -0.0028332397, -0.0183058679, -0.0642852858, 0.0093046948, -0.0496494845, -0.0574621111, -0.0227353908, 0.0217342898, 0.0073253885, -0.0413127206, -0.0301984511, 0.0110868290, -0.0563995503, 0.0651998520, 0.0702068061, 0.0331020281, 0.0003750324, 0.0135239586, -0.0472854525, 0.0527253821, 0.0185255259, -0.0312462486, -0.0482081436, 0.0202001706, 0.0176880211, -0.0382781178, 0.0198753104, 0.0415646434, 0.0593879670, -0.0066779330, 0.0219100714, 0.0410704017, -0.0160434507, -0.0479969345, 0.0369573236, -0.0364409424, 0.0002279505, -0.0220562182, 0.0514344573, 0.0181506500, -0.0245771967, -0.0328927450, 0.0212653801, -0.0377756059, 0.0136028454, -0.0378559269, 0.0171877816, -0.0136909448, 0.0063011125, 0.0141478404, 0.0579545945, -0.0151201412, 0.0040347576, -0.0293395929, -0.0407387167, 0.0136778504, 0.0139412284, 0.0265586451, -0.0589385927, -0.0641663000, -0.0342689119, -0.0524825007, -0.0697166845, -0.0607116073, -0.0704719946, -0.0672906563, 0.0482096225, -0.0536278412, -0.0318586752, 0.0252013057, -0.0631292015, -0.0024717450, 0.0468594357, -0.0499327555, 0.0276679099, -0.0577426255, 0.0363331586, 0.0623113513, 0.0139381960, -0.0444531441, -0.0631831810, -0.0129073635, -0.0572967082, 0.0583727807, 0.0060616732, -0.0207334794, 0.0051338300, -0.0007240623, 0.0210800022, 0.0396737084, 0.0130480453, 0.0602511913, -0.0482012630, -0.0285439193, -0.0378675908, -0.0022766441, -0.0715493858, 0.0191474780, -0.0683887452, -0.0366526321, 0.0484637618, 0.0297657251, 0.0181666836, 0.0213746950, 0.0332985073, -0.0284830593, 0.0314665809, 0.0468441099, 0.0222756341, 0.0511670411, 0.0140788257, 0.0174127147, -0.0305369347, -0.0074560419, 0.0679996610, -0.0136572868, 0.0323528126, -0.0496970452, 0.0702139288, 0.0648280084, 0.0427296832, 0.0063454881, 0.0374832526, 0.0431073159, -0.0093561411, -0.0089982152, 0.0316665992, -0.0246044174, -0.0020317137, 0.0717039704, -0.0618602186, 0.0364195853, -0.0024370626, 0.0613327920, 0.0643368661, 0.0313925371, 0.0422335714, -0.0152618513, -0.0619361997, -0.0533997379, -0.0009790435, 0.0628234595, -0.0180862956, -0.0192826539, 0.0319768339, 0.0151124969, 0.0009154826, 0.0628024489, -0.0124921575, 0.0622887909, 0.0244285315, 0.0676520020, -0.0681489930, 0.0413967222, -0.0034758747, -0.0721653104, -0.0282901265, 0.0202842057, -0.0715774521, -0.0110932104, 0.0686960816, -0.0681426302, 0.0649774969, 0.0270775557, 0.0294373780, -0.0380084440, 0.0397636294, -0.0149221644, -0.0551019460, -0.0055226088, 0.0247825682, 0.0585928410, -0.0140144043, -0.0323466994, 0.0101254210, 0.0627237558, -0.0266354382, 0.0129378065, -0.0354664065, 0.0712589324, 0.0374323204, -0.0137515254, -0.0206523165, -0.0119820386, 0.0572793335, -0.0286815353, 0.0448871776, -0.0413707234, -0.0515207648, 0.0718914866, -0.0539261661, 0.0264748856, -0.0155874640, 0.0477310121, 0.0516512617, -0.0276261307, -0.0408698618, 0.0580601543, -0.0444030724, 0.0179840550, -0.0536383726, 0.0419358537, 0.0700456947, -0.0231339745, 0.0315985531, -0.0676116347, 0.0432453230, -0.0629871860, -0.0198150389, 0.0154284239, -0.0563628823, -0.0121749416, 0.0666326284, 0.0516067967, -0.0527157150, 0.0656291395, -0.0299135484, 0.0379269868, 0.0508972257, -0.0709047839, 0.0263225734, 0.0067895651, 0.0590232313, 0.0079285800, 0.0492359996, 0.0023333579, 0.0494502187, 0.0147570297, 0.0203175992, -0.0653202832, -0.0329813771, -0.0125819072, -0.0133408457, -0.0543353334, 0.0365668237, -0.0108058974, 0.0550906807, -0.0233266018, 0.0082520396, 0.0097372457, 0.0295420438, 0.0400991216, 0.0674129725, -0.0351300910, 0.0566677302, -0.0186977945, 0.0271105096, 0.0041124970, 0.0228207484, -0.0597990826, 0.0191462263, -0.0573912412, -0.0065529495, -0.0532023609, -0.0365906879, -0.0260182992, -0.0527520031, -0.0027919933, -0.0376491211, -0.0032870546, -0.0299480446, 0.0282325894, -0.0671970025, 0.0397032723, -0.0247564353, 0.0250543803, 0.0626181215, -0.0005467534, -0.0245707929, 0.0312863067, 0.0175707266, 0.0361953899, 0.0617082119, -0.0394616090, 0.0334796235, -0.0346559510, 0.0043660477, -0.0365255624, -0.0470372513, 0.0359858125, -0.0718217492, -0.0479361117, -0.0285807066, 0.0486110821, -0.0086394623, 0.0434954390, 0.0470796302, 0.0283142179, 0.0444090068, -0.0664353743, -0.0597031415, 0.0178523064, 0.0560982078, -0.0048226193, -0.0701424405, -0.0629890412, -0.0059471801, 0.0182664096, 0.0092913210, -0.0224105157, -0.0134873241, 0.0176997334, 0.0554622859, -0.0071308762, -0.0257052444, 0.0643718392, 0.0379375368, -0.0126067698, 0.0481766537, -0.0518713966, 0.0645470768, -0.0355330296, 0.0417259857, 0.0441583470, 0.0434199721, 0.0158407614, -0.0128920004, -0.0647906885, 0.0516439825, -0.0309426934, 0.0569069535, 0.0348091722, 0.0538228899, -0.0709251761, 0.0215175599, -0.0645928979, -0.0071264878, -0.0601815134, 0.0091151297, -0.0662830323, -0.0458114669, -0.0086876228, -0.0413918532, -0.0195906311, 0.0495854616, 0.0674289465, -0.0459735692, 0.0668540597, -0.0080033541, 0.0573337823, -0.0473194867, -0.0092908442, 0.0306629688, 0.0100457370, 0.0398972929, -0.0105418488, -0.0276174769, 0.0428926274, 0.0248682275, -0.0693387613, -0.0165169202, 0.0374212041, -0.0610204265, 0.0684776306, 0.0131766647, -0.0351452157, 0.0094732642, 0.0446473509, 0.0637956113, -0.0269479938, -0.0472571626, -0.0364325456, 0.0303800479, 0.0454620942, 0.0052019209, -0.0368850194, 0.0720103234, 0.0718074888, -0.0351089090, 0.0457342789, 0.0583585650, 0.0525523052, 0.0086412355, 0.0618418902, 0.0490584299, 0.0038875267, 0.0548265725, -0.0366338417, -0.0196360387, 0.0174014643, 0.0507684350, -0.0444662720, 0.0478663594, 0.0170847774, -0.0648323447, 0.0448269174, -0.0496858284, 0.0340261608, 0.0026720166, -0.0120683983, 0.0143438056, -0.0444535911, -0.0107579455, -0.0350763053, 0.0107787997, -0.0661714971, -0.0369886570, -0.0403875001, -0.0259395801, 0.0522848368, -0.0353507809, 0.0382732302, -0.0337237790, 0.0223578289, -0.0460009426, 0.0501118898, 0.0610794425, 0.0106361732, 0.0210832357, 0.0207620785, -0.0457249209, -0.0458538607, 0.0356976762, -0.0045312643, 0.0676679313, 0.0087112486, -0.0145381354, -0.0343241617, 0.0491577312, 0.0590142310, 0.0447191522, 0.0014274418, -0.0637205541, -0.0635382533, -0.0422338322, -0.0330650657, -0.0024209172, 0.0040146410, 0.0202856809, -0.0362427421, 0.0635170639, -0.0116941594, 0.0139298886, 0.0274398178, -0.0251673572, -0.0177866481, 0.0456803367, 0.0644586086, 0.0680708736, -0.0387178957, 0.0609476268, 0.0350565687, -0.0001910254, -0.0031594187, -0.0082468614, 0.0441249982, 0.0317314863, -0.0263288580, 0.0581999272, -0.0252671540, -0.0595851019, -0.0460976586, -0.0404104516, -0.0196426623, 0.0512614176, -0.0000790656, -0.0491036475, 0.0194848627, 0.0445128828, -0.0285271779, 0.0038710386, -0.0178327784, -0.0207375735, 0.0358750224, -0.0522184521, 0.0314489752, 0.0177123472, -0.0614450090, 0.0411849841, 0.0346591845, 0.0625257045, -0.0142642930, -0.0041234568, 0.0116948113, 0.0152928904, -0.0363282040, 0.0235976055, -0.0532907844, 0.0507802591, -0.0401727296, 0.0534420162, -0.0117026791, 0.0202426314, -0.0137475356, -0.0423999578, -0.0171588548, -0.0522443280, -0.0332850665, -0.0531551689, 0.0261803344, -0.0675117522, -0.0414727256, 0.0169578344, -0.0072887093, -0.0416907296, 0.0500857532, -0.0003900677, 0.0240831152, 0.0287410691, 0.0490303338, -0.0525524952, -0.0644747615, 0.0453463420, 0.0457186922, -0.0363671258, 0.0001767129, -0.0429425761, 0.0040128753, 0.0557100028, -0.0350322202, 0.0135907009, 0.0580886304, 0.0666654110, 0.0591901094, -0.0125267766, -0.0592104532, -0.0591774173, 0.0340772644, -0.0256654657, 0.0656026602, 0.0249218196, 0.0147399157, -0.0173366815, -0.0309249200, 0.0094101131, 0.0358762592, 0.0690520853, 0.0098281130, 0.0102469847, 0.0169477984, 0.0209560990, -0.0091289505, 0.0121688470, 0.0483538955, -0.0382282734, -0.0387370475, 0.0703153908, -0.0073252395, -0.0534022152, 0.0062060133, -0.0252087899, 0.0623437613, 0.0698096454, 0.0035264790, 0.0569566041, -0.0472290814, -0.0272213668, 0.0256022140, 0.0087327361, 0.0327362716, -0.0207580514, 0.0166387036, 0.0282688960, -0.0337035432, -0.0340019725, -0.0686852336, -0.0557055138, -0.0223212689, 0.0097051039, 0.0223252401, 0.0365432501, 0.0357149839, 0.0098169819, 0.0668637604, -0.0308833495, -0.0155217536, -0.0578717105, -0.0188233480, -0.0349146165, 0.0021744370, 0.0001596063, -0.0283081755, 0.0646723658, 0.0421963930, -0.0273714773, 0.0563193262, -0.0576051660, 0.0457489714, 0.0547118634, 0.0543221086, 0.0352826416, -0.0525312982, -0.0061130449, -0.0666701049, -0.0017911643, 0.0401801094, 0.0097133070, 0.0098537281, -0.0603101999, 0.0231530219, 0.0206113458, -0.0163150355, -0.0416406579, -0.0228777044, -0.0067527443, -0.0584985726, 0.0179277211, 0.0224497467, -0.0435689613, -0.0128665678, 0.0416560769, -0.0607343540, 0.0122884884, 0.0505753085, -0.0533908233, -0.0562459677, -0.0418317169, 0.0220238194, 0.0590041280, -0.0179780684, -0.0144452006, -0.0391679108, 0.0719516873, 0.0514039844, -0.0399533473, -0.0276964866, -0.0231619030, -0.0149627030, -0.0029137954, -0.0572186410, 0.0254442394, 0.0163607746, 0.0113739669, 0.0644189268, -0.0342005491, 0.0178125054, -0.0479526110, -0.0612869710, -0.0083451420, 0.0702767819, -0.0581595376, 0.0456330851, -0.0277099274, 0.0130779669, -0.0687945932, 0.0482952073, -0.0161944889, 0.0350966603, -0.0259961523, -0.0401404165, 0.0618092716, 0.0147052929, 0.0571147949, -0.0443357266, 0.0030155405, 0.0191697329, 0.0219825283, 0.0032089725, -0.0366499647, -0.0020592064, -0.0006234199, -0.0624204576, 0.0138212815, 0.0281573460, -0.0470735729, 0.0036262646, 0.0327565894, -0.0224569924, -0.0210676454, -0.0031491145, 0.0050312132, 0.0690638721, -0.0308092944, 0.0430549681, -0.0188120604, 0.0108546242, -0.0582482368, 0.0674305558, 0.0701089650, -0.0110291839, 0.0190352127, -0.0537700020, 0.0189013258, 0.0423680916, 0.0640224218, 0.0170337781, -0.0192592032, 0.0222010836, 0.0119800791, 0.0498850271, 0.0204156637, -0.0078086853, -0.0453666151, 0.0457875654, 0.0260905474, -0.0082653388, -0.0238906443, 0.0360254049, -0.0500774272, 0.0378018618, 0.0185030028, -0.0042558238, -0.0189880989, 0.0620077401, 0.0143742412, 0.0198430642, -0.0494450927, 0.0621312857, 0.0685991645, -0.0108694769, 0.0164958388, 0.0026725307, 0.0093585849, -0.0409513526, -0.0005725622, -0.0364579931, 0.0087965056, -0.0305555351, 0.0335629880, 0.0527044311, -0.0621825457, -0.0405780263, 0.0497071296, -0.0564803332, 0.0086353272, -0.0096702948, -0.0280385502, 0.0086302236, 0.0620435327, 0.0167370886, 0.0195865035, 0.0186674222, 0.0090283751, 0.0167272985, -0.0026470497, -0.0614952520, 0.0224690512, 0.0607071519, 0.0214141607, -0.0280498043, 0.0351723135, 0.0643453151, -0.0418352969, -0.0418530367, 0.0455220714, 0.0530060232, -0.0700506568, -0.0142698362, 0.0549754500, 0.0556961000, 0.0721570700, -0.0189091377, -0.0069397613, -0.0276214182, -0.0615922101, -0.0129461996, -0.0659472793, 0.0116701573, 0.0649321079, -0.0582799315, 0.0710703433, 0.0396802351, -0.0067436621, -0.0308884941, -0.0056951940, -0.0378475450, -0.0083241165, 0.0373671949, -0.0174396448, 0.0477165058, -0.0310394466, -0.0299947597, 0.0485886782, -0.0289606750, -0.0673352852, -0.0171426274, -0.0303894244, -0.0019786134, -0.0311462656, 0.0639554709, -0.0328919888, 0.0161110535, 0.0656677932, -0.0158991069, 0.0108440295, 0.0017878115, 0.0674670488, -0.0421558507, -0.0463098846, 0.0605508834, -0.0439456068, 0.0190149099, -0.0660681054, 0.0119741410, 0.0349009857, 0.0155982152, 0.0051612630, -0.0531841218, 0.0245078504, -0.0698602349, -0.0385007523, -0.0570803881, 0.0235321298, -0.0672166795, -0.0378357433, -0.0559808500, 0.0327057317, 0.0210723951, -0.0174588822, -0.0197557285, -0.0458341092, -0.0300084390, -0.0265594721, 0.0272752792, -0.0634944960, 0.0690462738, -0.0098071545, 0.0592222661, 0.0061877593, -0.0165696740, -0.0205108970, -0.0462305769, -0.0262481757, -0.0392669514, -0.0566039272, 0.0525511354, 0.0266211554, -0.0471255332, 0.0301414430, -0.0142976046, -0.0223354287, -0.0695580393, 0.0619516820, 0.0214287564, 0.0363772810, -0.0294516422, -0.0510213673, -0.0024883673, -0.0294690393, 0.0528568029, 0.0315814167, -0.0242007188, -0.0210085921, -0.0447264500, 0.0104327798, 0.0314243883, 0.0685903877, 0.0260244608, 0.0376367494, 0.0253167227, -0.0167459697, 0.0691075325, -0.0496499017, 0.0502638221, -0.0257828981, -0.0311633497, 0.0614620447, 0.0588991046, -0.0358043388, -0.0583478101, -0.0615548380, 0.0152738988, 0.0096617267, 0.0581509024, -0.0213574357, -0.0079415515, 0.0538582504, -0.0221503563, -0.0626718774, -0.0491342098, 0.0344760045, -0.0657240674, -0.0310745463, -0.0567734279, 0.0203985199, -0.0071144253, 0.0141594410, 0.0153156072, -0.0542719439, -0.0024584681, 0.0447951034, -0.0010314733, 0.0022044629, -0.0255289301, -0.0022733212, 0.0256974697, 0.0235925913, 0.0413386673, 0.0016651824, -0.0282884911, -0.0253093801, 0.0308985114, 0.0281340778, -0.0123348236, -0.0280196741, 0.0285989791, -0.0458743200, 0.0350687355, -0.0252137966, 0.0586695075, -0.0707706288, -0.0381534919, -0.0237908624, -0.0028223619, -0.0367242619, 0.0721636415, -0.0589103401, -0.0454690754, -0.0269353800, -0.0132445246, -0.0685619265, 0.0532035977, -0.0645659715, -0.0073799714, 0.0331150666, 0.0382573828, -0.0625544637, 0.0201296881, -0.0353039801, 0.0681222528, -0.0310419239, 0.0323177427, -0.0438872799, -0.0498640686, 0.0042821541, -0.0504246354, -0.0532534122, -0.0480053648, 0.0128483996, -0.0308617577, 0.0571954250, -0.0720590055, -0.0591225959, -0.0715781748, -0.0006145760, -0.0617547408, -0.0040913001, 0.0561701208, -0.0485576913, -0.0592067689, 0.0160276070, -0.0011925921, 0.0128535107, 0.0253018588, -0.0144117177, 0.0704977810, 0.0707909614, 0.0360876620, 0.0015224889, 0.0605237335, -0.0484255105, -0.0489811562, 0.0600142479, -0.0501488000, -0.0231914967, 0.0435354784, 0.0720987320, -0.0529933944, 0.0475823134, 0.0293257087, 0.0532510728, -0.0517813563, -0.0335627981, 0.0720030516, -0.0049287155, -0.0074475259, 0.0262602046, -0.0026490763, -0.0055849478, -0.0241407193, 0.0659696013, -0.0067976713, 0.0010721087, 0.0470429808, -0.0113555714, -0.0401552320, -0.0128777027, 0.0261075273, 0.0111849234, 0.0170402676, 0.0348432064, -0.0708112195, -0.0494665839, -0.0156414397, -0.0309723951, 0.0435034037, -0.0328145064, 0.0088096112, 0.0494335815, -0.0515557304, -0.0253938958, 0.0221833587, 0.0008683205, -0.0254175030, -0.0032177493, -0.0205200873, 0.0275252536, 0.0012903735, -0.0391000509, -0.0376606174, -0.0374846645, 0.0051688850, 0.0566449314, 0.0269550681, 0.0612226874, -0.0454355925, 0.0209749863, -0.0331527703, -0.0496469066, 0.0700831413, -0.0570551455, -0.0246340968, -0.0620776564, 0.0311893001, 0.0443542227, 0.0657486022, -0.0265151151, -0.0598758757, 0.0329795703, -0.0122244954, -0.0267295577, 0.0612045676, 0.0459748432, 0.0089030638, -0.0318428129, 0.0272177905, 0.0250711739, -0.0242484845, 0.0032855049, -0.0316356979, 0.0333108231, -0.0199895948, -0.0192511342, -0.0051771253, -0.0400795564, -0.0240620710, -0.0522632897, -0.0303951353, 0.0188535079, 0.0074596852, 0.0090949312, -0.0699078813, -0.0700530484, 0.0600772649, 0.0218055397, -0.0568309985, 0.0323537886, -0.0627713501, -0.0333184153, 0.0536703467, 0.0609730631, 0.0014968365, 0.0699426383, -0.0005091503, 0.0075500384, -0.0401166715, -0.0658126399, 0.0284875706, -0.0632836148, 0.0638327450, 0.0163369924, 0.0151875392, 0.0554179251, -0.0205101594, -0.0325220339, 0.0698926300, -0.0081798434, -0.0202178918, 0.0393607616, 0.0006486624, 0.0658784509, 0.0543204695, 0.0148608536, 0.0607670397, 0.0495458171, -0.0619638860, 0.0617127717, 0.0696337223, 0.0331034362, -0.0504360273, 0.0395575315, 0.0397449657, -0.0697217584, -0.0494114384, 0.0396059379, 0.0693821013, -0.0473248735, -0.0337517746, 0.0443685055, -0.0679262727, -0.0140382722, -0.0163581558, 0.0491161719, 0.0685937554, 0.0191813409, 0.0527865514, 0.0606984496, 0.0254430920, 0.0083987787, 0.0203316733, -0.0455628708, -0.0400546081, -0.0555714220, 0.0177059844, -0.0458937138, 0.0453886539, 0.0211066827, -0.0194757432, -0.0721139461, 0.0380453840, -0.0695325211, -0.0585029088, -0.0453934558, -0.0240926296, 0.0592561513, 0.0423125476, -0.0403400958, -0.0353340544, 0.0128212273, 0.0122366920, 0.0541806221, 0.0146998242, 0.0451626629, 0.0297205448, 0.0319534317, 0.0200132057, -0.0640814900, -0.0277455598, -0.0551213212, 0.0438718796, -0.0011548772, 0.0424544141, 0.0165208578, 0.0562899262, 0.0005159006, -0.0372565240, 0.0326185599, -0.0155260041, -0.0212830007, 0.0553158969, 0.0009045601, 0.0393744931, -0.0136854388, -0.0719421059, -0.0114945509, 0.0552179664, 0.0711552203, 0.0352007225, -0.0067174360, 0.0113147572, 0.0680650920, -0.0525891110, -0.0107005946, 0.0037888810, -0.0318259671, 0.0353235751, -0.0117598884, 0.0502701402, -0.0092331469, 0.0310059115, -0.0194628388, -0.0082008690, 0.0201594606, -0.0609864593, -0.0631877780, -0.0451825932, -0.0526889935, 0.0231954530, -0.0256136917, 0.0582315773, 0.0109885111, -0.0478810668, 0.0286955088, 0.0191612095, -0.0562959686, -0.0363674015, -0.0680327639, 0.0343137830, 0.0275571868, 0.0572112203, 0.0126769915, -0.0532435402, 0.0408067703, 0.0376744121, 0.0287372842, -0.0619893149, -0.0244595744, 0.0396449044, -0.0243158638, 0.0703803301, -0.0261910520, -0.0023561716, -0.0153019093, 0.0185197592, -0.0407279618, 0.0079321936, -0.0097428896, -0.0478526242, 0.0363641307, -0.0333762094, 0.0165290982, -0.0293904059, 0.0472387150, 0.0197297111, -0.0262407959, -0.0169704109, 0.0117001832, 0.0339536071, -0.0008387268, -0.0698039383, 0.0703831166, 0.0160323530, -0.0614646748, -0.0503246821, 0.0714208931, -0.0507392511, 0.0615753084, 0.0290964991, -0.0072782636, -0.0139900409, -0.0375219323, -0.0709904209, -0.0686229616, 0.0405597538, 0.0536767095, 0.0231589079, 0.0092065632, 0.0542079508, 0.0511852279, 0.0598162711, -0.0392699987, -0.0125080571, -0.0392793752, 0.0069696531, -0.0570430011, 0.0163445473, 0.0719074011, 0.0554435402, 0.0079133138, -0.0716237724, 0.0120011568, 0.0502454638, 0.0325206593, 0.0011056140, 0.0042150840, 0.0367851704, 0.0380933583, -0.0509983450, 0.0653375536, 0.0559206307, 0.0373324007, -0.0022934228, -0.0118994489, 0.0680352896, -0.0506661609, -0.0521670580, 0.0173881501, -0.0302339643, -0.0018733069, 0.0603307784, -0.0068293810, 0.0147755966, -0.0199446343, -0.0071755797, 0.0218501240, -0.0150666796, -0.0222718678, -0.0381427221, -0.0355115384, -0.0106936097, -0.0217974521, 0.0194989070, 0.0517738238, -0.0327665359, -0.0074831918, 0.0610270649, 0.0166883990, 0.0370606482, 0.0624413639, 0.0712185055, 0.0213995054, 0.0230201557, 0.0179839656, 0.0607710779, -0.0133368187, 0.0689240396, 0.0696327835, 0.0159428418, -0.0263850875, 0.0356750488, -0.0267675854, 0.0210257098, -0.0513973981, 0.0497041196, 0.0545244515, 0.0369614884, -0.0236888975, -0.0014640912, 0.0690029263, 0.0055165514, -0.0478233732, -0.0610598959, -0.0685182288, 0.0232121423, 0.0484930500, -0.0370030552, 0.0041564107, 0.0687108785, 0.0243201479, 0.0448023155, -0.0288593993, 0.0053479001, 0.0165092945, 0.0191175267, -0.0147872642, -0.0423072651, 0.0430029929, 0.0026307181, -0.0416532680, -0.0458559468, -0.0601697788, -0.0143705420, 0.0367229059, -0.0518393591, -0.0557580963, -0.0180851445, 0.0237928405, -0.0289172307, 0.0521940514, 0.0083951801, 0.0668138713, -0.0299946070, 0.0331103057, 0.0477868244, 0.0475377291, 0.0038758591, 0.0652269274, 0.0565092713, -0.0379810333, 0.0253519118, -0.0416220054, 0.0507388413, 0.0186821520, 0.0006391853, 0.0224576294, -0.0630430207, -0.0691418722, -0.0576895997, 0.0314660296, 0.0405663624, -0.0493263863, 0.0102798790, -0.0405597873, -0.0718631819, 0.0636313856, 0.0472049266, 0.0099407434, -0.0178217478, 0.0120893195, 0.0435595810, 0.0710006952, -0.0250217207, 0.0687020272, -0.0436765850, 0.0323600397, 0.0703196824, -0.0241188332, 0.0487648919, -0.0035176352, -0.0719643533, -0.0235532448, -0.0596497804, 0.0402422249, 0.0043954700, 0.0592142791, 0.0632997006, -0.0103849284, -0.0220472738, 0.0140704438, -0.0411401093, -0.0232820548, -0.0615538396, 0.0496687591, 0.0656113476, -0.0112694912, 0.0625126958, 0.0032625869, -0.0505760834, 0.0198868215, 0.0194375291, 0.0647320151, 0.0415143967, -0.0239757448, -0.0083720535, 0.0207156911, -0.0106704161, 0.0348192081, 0.0350257009, -0.0526753813, -0.0203174278, -0.0528055131, 0.0495772064, 0.0441484004, -0.0555394031, 0.0061860383, 0.0628444850, 0.0640861839, 0.0336281955, -0.0665831268, 0.0421572998, -0.0388341099, 0.0109560415, 0.0543446094, -0.0590790287, 0.0089099109, 0.0714363605, -0.0052096769, 0.0645445436, -0.0578544177, 0.0501171052, -0.0577077679, -0.0379073545, 0.0449689403, 0.0526552349, -0.0136252306, 0.0019955635, 0.0104246885, 0.0008500442, -0.0535280257, -0.0309815481, -0.0073100626, -0.0091652870, -0.0588396192, -0.0346159823, -0.0275269188, -0.0458063930, 0.0599573851, -0.0348141491, 0.0474763215, -0.0425359905, -0.0702373162, -0.0105802864, -0.0458448306, 0.0453581139, -0.0549693406, -0.0166281052, -0.0667556077, 0.0655509233, 0.0269117728, 0.0290170088, -0.0337464213, -0.0693492219, 0.0130642503, 0.0663722157, 0.0230586305, 0.0571776628, 0.0413359478, -0.0194551311, 0.0024241880, -0.0385097340, 0.0367121622, -0.0542709827, 0.0058769062, 0.0321331695, -0.0456223004, -0.0430054851, -0.0167667195, 0.0274281576, 0.0288553685, -0.0615745224, 0.0411319360, -0.0633108839, -0.0530680865, -0.0284390822, -0.0508006811, 0.0191861764, 0.0477093160, -0.0466128737, -0.0383432955, -0.0048377663, -0.0144300424, -0.0110751428, 0.0326928422, 0.0593668073, 0.0327687040, -0.0528055131, -0.0035165548, 0.0403297544, -0.0385762863, 0.0666995347, -0.0054471418, 0.0242005140, 0.0545774102, 0.0513709486, -0.0262485184, -0.0615351200, -0.0198098235, -0.0153576061, -0.0038302243, 0.0640024394, -0.0082066134, -0.0674292371, -0.0570416227, 0.0084661916, -0.0029293001, 0.0134509131, -0.0595077798, -0.0155096911, 0.0507604703, 0.0121590570, -0.0536761917, -0.0453127548, 0.0136356428, 0.0154152960, -0.0068281963, 0.0650529414, -0.0501169153, -0.0281061530, 0.0496316478, -0.0429947302, 0.0151498392, 0.0573741198, -0.0607387908, -0.0155373961, -0.0699007064, -0.0575220250, -0.0711181462, 0.0159631521, 0.0117950216, 0.0023374185, 0.0237327740, 0.0644929707, 0.0084303543, 0.0510275289, 0.0186276585, -0.0707181096, 0.0486803576, -0.0404934920, -0.0269001238, -0.0628847331, 0.0184021220, 0.0010668263, -0.0687733963, 0.0447985977, 0.0248087570, 0.0533908308, 0.0491647646, 0.0036929399, 0.0290293097, -0.0328072459, 0.0267937928, -0.0006672964, 0.0414694399, 0.0560313463, 0.0509946793, -0.0016989782, 0.0381392315, -0.0159866698, -0.0616177805, -0.0012652203, -0.0089287311, -0.0188400708, -0.0714835748, -0.0628080145, -0.0553558618, 0.0402903333, 0.0681830645, -0.0685632750, 0.0265902728, 0.0037702248, 0.0066332668, -0.0087143257, 0.0387155190, 0.0371077061, 0.0064728186, 0.0277683064, 0.0699338615, -0.0543521941, 0.0360109881, -0.0156656504, -0.0360640027, -0.0305644833, 0.0145763829, 0.0080683455, -0.0041298047, 0.0452105850, 0.0609136671, 0.0273919702, -0.0703072771, 0.0337598100, -0.0510809869, -0.0153870955, 0.0292973891, -0.0449162722, 0.0619508475, 0.0114240721, 0.0607350022, -0.0445459373, -0.0188290775, -0.0139537528, -0.0027628094, 0.0240562186, 0.0667677373, 0.0398365185, -0.0045139715, 0.0363875479, -0.0273009986, -0.0627728403, 0.0405668914, -0.0593363866, -0.0259498172, -0.0013656169, 0.0586469918, -0.0525797680, 0.0378128737, -0.0678988099, 0.0660028905, -0.0056707039, 0.0334532410, -0.0038702115, -0.0421706997, 0.0328523964, -0.0194444656, 0.0114339516, -0.0657013506, 0.0229916796, 0.0253572986, -0.0497995615, 0.0455666184, 0.0043392107, 0.0322997943, -0.0628371760, -0.0324553065, -0.0145639591, -0.0403418504, 0.0199570954, 0.0455043837, -0.0392847247, -0.0205396339, -0.0199096724, -0.0229377374, 0.0426558033, 0.0502786413, 0.0292989537, 0.0693080276, -0.0426758789, -0.0034924820, -0.0417653359, -0.0216641054, -0.0715749189, -0.0398076437, 0.0047876090, 0.0271820873, 0.0249457061, -0.0574769787, -0.0393059403, 0.0201841816, 0.0607656389, 0.0302768797, -0.0103129186, 0.0211859718, -0.0413064584, -0.0066993013, 0.0571838468, 0.0634514838, -0.0567213595, -0.0132263526, -0.0288793743, -0.0061141476, -0.0125881173, 0.0560026616, -0.0318382867, -0.0396057293, -0.0244676955, 0.0329597965, 0.0350424573, 0.0185323358, 0.0159113407, 0.0171492547, 0.0523550361, 0.0368952602, -0.0235600248, 0.0689510107, -0.0128823109, -0.0380062759, 0.0149016902, -0.0479618311, -0.0357813686, 0.0516934693, 0.0432152152, 0.0016329512, -0.0095986128, 0.0260108113, 0.0293787718, -0.0444024019, 0.0685467869, -0.0223798901, 0.0507224053, -0.0122472942, 0.0506856069, -0.0107822381, 0.0189729407, 0.0399140120, 0.0629303902, 0.0684494227, -0.0206097849, 0.0617365688, 0.0574368238, 0.0714025795, 0.0015386268, 0.0298099145, -0.0192222595, 0.0637562275, 0.0050597265, 0.0010463223, -0.0291076861, 0.0075522587, 0.0361699611, -0.0234224424, 0.0197270811, -0.0440624729, -0.0635631830, 0.0227801278, 0.0059385896, 0.0665318072, 0.0043983832, 0.0416723192, 0.0720111728, 0.0056863949, 0.0555376410, 0.0378512442, -0.0714689121, -0.0255978778, -0.0489514582, 0.0139292330, 0.0669371188, -0.0052746981, -0.0302072950, 0.0706143528, -0.0382209085, 0.0301953554, 0.0128678232, -0.0676355883, 0.0238584653, 0.0352078825, 0.0375820175, 0.0461446717, 0.0479688868, 0.0711701363, 0.0372021347, -0.0655399933, -0.0024693236, -0.0010881126, 0.0282796994, 0.0350678712, -0.0537269190, 0.0171681494, -0.0060038418, 0.0022953674, -0.0144788735, -0.0000151247, -0.0253605843, -0.0507713780, -0.0491465628, 0.0717584640, -0.0232143141, 0.0634493977, -0.0282455422, 0.0013802648, 0.0042850971, 0.0615502000, -0.0107089765, 0.0434491858, -0.0691055283, -0.0552870035, -0.0160057172, 0.0593467504, 0.0369831696, -0.0052365735, -0.0323641673, 0.0647566319, 0.0372166932, -0.0024360791, 0.0003683046, 0.0628417432, 0.0364947841, -0.0695654750, 0.0160422102, -0.0269964971, 0.0514982268, 0.0309130996, -0.0279250219, 0.0036965832, 0.0687424242, 0.0097952634, 0.0310229138, 0.0095859170, 0.0128218308, -0.0627644658, 0.0598343909, -0.0402708910, -0.0470206961, -0.0721162856, 0.0412092432, -0.0026725084, -0.0086891353, 0.0109189600, 0.0182577893, 0.0247960091, 0.0542062372, 0.0370548964, 0.0466063172, -0.0346341357, -0.0653022155, 0.0015496239, 0.0380408391, -0.0715518296, 0.0256444216, -0.0546922460, -0.0544445962, -0.0438974127, -0.0466268584, -0.0686521456, -0.0385481380, 0.0300345570, -0.0132205226, -0.0532016903, 0.0119257718, -0.0508391187, 0.0236287937, 0.0407333001, 0.0001169369, -0.0720658004, -0.0630204231, -0.0117924102, -0.0527881384, -0.0584743470, 0.0501729026, 0.0542026460, 0.0334566534, -0.0247005485, -0.0360996686, -0.0496139377, 0.0621729642, 0.0229772925, 0.0708427727, -0.0593487248, 0.0238476768, -0.0244559236, 0.0665379465, -0.0126364864, 0.0186672509, 0.0249304622, 0.0637289286, 0.0048908964, -0.0156055987, 0.0262016505, 0.0418604165, -0.0224528089, 0.0661618859, -0.0578270927, 0.0513591319, 0.0202251524, 0.0640619844, 0.0133957714, -0.0632888451, 0.0036809966, -0.0272678100, -0.0342573337, 0.0654771924, -0.0424536243, -0.0324937142, -0.0057378635, 0.0298261419, -0.0374660119, 0.0274452269, 0.0616356283, 0.0275752693, 0.0365983471, 0.0409478247, -0.0211347155, 0.0641177744, -0.0687334239, -0.0644701645, 0.0296820328, 0.0340820327, 0.0476702899, -0.0235274844, 0.0648372471, 0.0183350518, -0.0299101584, 0.0667571723, 0.0473363996, -0.0688435286, 0.0096314773, 0.0409619361, 0.0658749491, -0.0058843419, 0.0134170726, 0.0125957057, -0.0306262001, 0.0314894095, -0.0574408807, 0.0580260009, 0.0045658499, 0.0634375066, -0.0631226003, 0.0344738364, 0.0529923290, 0.0313548371, 0.0608811527, -0.0608901568, 0.0197151229, -0.0590525493, -0.0530520491, -0.0617632084, 0.0137101635, 0.0513364896, -0.0079588294, -0.0213444270, 0.0654257238, -0.0323489904, 0.0164045095, -0.0159697384, -0.0464652404, -0.0534421876, 0.0634604245, 0.0678083450, -0.0410949066, -0.0182828084, -0.0686339885, 0.0581101179, -0.0485614762, -0.0484846681, 0.0403594896, 0.0626437068, 0.0183891132, 0.0132788867, 0.0210615695, -0.0410939418, 0.0289158002, -0.0642607138, -0.0057324618, 0.0340266079, 0.0692999959, -0.0220765062, 0.0423193276, 0.0218949094, -0.0084526017, -0.0107195228, -0.0454952829, -0.0038751140, -0.0073718801, -0.0169952922, -0.0171959177, -0.0351638682, 0.0336901248, 0.0604296327, 0.0679699630, -0.0254566297, -0.0298389047, -0.0143462643, -0.0225848705, 0.0403062999, 0.0712574422, 0.0604047328, -0.0713149309, -0.0006277263, -0.0173499323, -0.0240659080, -0.0560706332, 0.0704332441, 0.0527593642, 0.0156911835, 0.0219503492, -0.0589543879, -0.0304608122, 0.0360779390, -0.0473515764, -0.0473774374, -0.0529091507, 0.0414488614, -0.0242614076, 0.0202464163, 0.0489561558, -0.0594012700, 0.0123077706, -0.0502205864, -0.0394252166, 0.0094961151, 0.0181743577, 0.0252326727, -0.0001403689, -0.0154699609, 0.0701587200, 0.0220584720, 0.0316656902, 0.0603710711, 0.0120900273, 0.0667776465, -0.0363566317, -0.0068935305, -0.0255791396, -0.0702869520, 0.0283229873, -0.0578166321, -0.0048875958, 0.0185238346, 0.0245473757, 0.0275832713, -0.0012844875, 0.0692222416, -0.0006227344, -0.0412960649, 0.0132976398, 0.0569878072, -0.0674169660, -0.0201534368, 0.0321706310, 0.0594280660, -0.0430608019, -0.0385091156, 0.0116132572, -0.0465982631, -0.0154341720, 0.0502599031, 0.0261350945, 0.0104747787, 0.0539748073, -0.0596510395, 0.0092500821, 0.0359353647, 0.0468043610, -0.0214446895, 0.0646752715, 0.0327868611, 0.0300596431, -0.0655455142, -0.0651852116, -0.0381293520, -0.0300036930, -0.0051502958, -0.0172974877, 0.0405357182, -0.0284197070, 0.0015704930, 0.0044435635, -0.0643437877, -0.0154331587, -0.0361677036, 0.0007037222, 0.0637095124, -0.0283814035, -0.0649873391, -0.0026752129, 0.0273696333, 0.0378800109, 0.0291397572, -0.0064483285, -0.0568021797, -0.0642170981, -0.0115187056, 0.0521059558, -0.0143717490, -0.0091690347, 0.0319824070, 0.0120770186, -0.0710332841, 0.0511911958, 0.0677390695, 0.0687779188, -0.0609792508, -0.0383530706, -0.0014248937, -0.0184378400, 0.0039779097, -0.0599079803, -0.0326862521, 0.0058307052, 0.0369706079, 0.0312248245, 0.0422161743, 0.0654821396, 0.0146790370, -0.0176997371, 0.0368450657, 0.0663792044, 0.0220100060, -0.0503966063, -0.0323103629, -0.0279583707, 0.0085588172, 0.0169496760, -0.0360737219, 0.0369848013, 0.0523778498, 0.0040237829, 0.0512728021, -0.0423095897, 0.0602082610, 0.0224456489, 0.0355639532, 0.0310334042, 0.0466873944, 0.0454558805, -0.0357645936, 0.0472904593, -0.0100905262, -0.0502265915, -0.0508570820, -0.0151447430, 0.0484633148, 0.0496374443, -0.0103728659, 0.0195932612, 0.0378117934, 0.0060457885, -0.0017789304, 0.0679766685, -0.0620579347, -0.0425886065, -0.0095693469, -0.0355561227, -0.0579027161, -0.0194829889, 0.0097543448, 0.0130567178, -0.0527041033, -0.0021108463, 0.0185546353, 0.0003810525, -0.0557524189, 0.0099472627, -0.0119190812, -0.0706786588, -0.0675010160, 0.0329458416, -0.0514296442, -0.0425031111, -0.0586907677, 0.0668108314, 0.0496560261, 0.0555088818, -0.0658607855, -0.0221189186, -0.0532721691, 0.0285240635, 0.0531677604, -0.0355976559, 0.0461338982, -0.0516668856, -0.0106527805, 0.0548785627, 0.0650746971, 0.0376899391, -0.0112321861, 0.0274002999, 0.0601153076, -0.0046495274, 0.0265698507, 0.0285366401, 0.0079567134, -0.0149691887, 0.0416985080, -0.0550331548, -0.0477790013, 0.0371902958, 0.0413430929, 0.0227980018, -0.0173865296, 0.0540063083, 0.0551579148, -0.0289170071, -0.0425767377, 0.0134430006, 0.0048710406, -0.0464107990, -0.0100329369, -0.0369338691, 0.0347897485, -0.0338752121, -0.0656055808, 0.0451487824, 0.0251219124, -0.0059285983, 0.0231329799, 0.0533304065, 0.0156270713, 0.0395946503, 0.0018436611, -0.0720541030, -0.0352931917, 0.0302204713, -0.0046450198, 0.0141052902, 0.0555959046, -0.0445754454, -0.0509104058, -0.0237538889, 0.0654834062, -0.0373731330, 0.0507385805, 0.0708115846, 0.0213474557, -0.0198678114, 0.0588007867, -0.0507658534, -0.0408138745, -0.0583923236, -0.0719177425, 0.0128344595, 0.0180103481, 0.0707408637, 0.0626854897, 0.0100807324, 0.0059508458, -0.0662098005, 0.0375444070, 0.0397925377, -0.0491339862, 0.0635073185, -0.0060813054, 0.0174905583, -0.0143838786, 0.0441155359, 0.0020751059, -0.0466395766, 0.0232730359, -0.0681590289, 0.0155102238, -0.0294623263, 0.0067307875, -0.0213949606, -0.0661041737, 0.0657420903, 0.0282817781, -0.0014891252, 0.0624521524, 0.0629512519, -0.0352613740, -0.0322778225, -0.0008241832, -0.0420295373, 0.0720987320, 0.0419120342, 0.0609413683, -0.0151847340, -0.0476926751, -0.0147727951, -0.0499707460, 0.0513718650, -0.0234223194, -0.0451777726, 0.0261985660, 0.0335607156, 0.0065511391, 0.0339381844, 0.0169013962, -0.0156347491, -0.0302750356, -0.0603496879, -0.0564397089, -0.0689274818, -0.0348850377, -0.0658652782, 0.0435010642, 0.0275447592, -0.0294218585, -0.0252616145, 0.0327717364, -0.0097761154, -0.0603354387, -0.0029009283, 0.0251299515, -0.0236415118, -0.0287713036, -0.0676817223, -0.0111054257, 0.0492807403, 0.0657923669, 0.0322859660, 0.0033750683, 0.0719093382, 0.0349987522, 0.0256871283, 0.0213142484, 0.0367607251, 0.0713652223, -0.0368719101, 0.0521076620, -0.0017297938, 0.0072676986, -0.0072336793, -0.0277350321, 0.0715742111, -0.0029786453, 0.0345023349, -0.0390719511, -0.0208933800, -0.0706155077, 0.0574167073, 0.0708818138, 0.0327877700, -0.0102147050, 0.0335950926, -0.0461283214, -0.0070488825, -0.0014569312, -0.0689829662, 0.0118181184, 0.0014856309, 0.0172346309, 0.0208722353, -0.0015257224, -0.0383333676, -0.0715921596, -0.0400189571, 0.0542921126, 0.0372817814, -0.0402516574, 0.0574439615, 0.0351534560, -0.0523311533, -0.0410423726, -0.0463743061, -0.0433647372, -0.0494524911, -0.0162477419, -0.0024876148, 0.0046373084, -0.0352007747, -0.0630622730, -0.0109637827, -0.0077112094, -0.0640251935, -0.0617613830, 0.0067991689, -0.0369188823, -0.0355276801, 0.0605435967, -0.0647545382, -0.0595743656, -0.0002509728, -0.0077432990, -0.0252995528, 0.0365203321, -0.0240112767, -0.0379700400, 0.0000894070, -0.0180039108, -0.0207090639, -0.0262925327, 0.0218501389, -0.0361782163, 0.0500305742, -0.0468583368, 0.0414496511, 0.0551092029, 0.0145780370, -0.0065999180, 0.0312628001, 0.0656759143, 0.0458333045, -0.0154287890, 0.0594374537, 0.0657688081, 0.0001152977, 0.0463596284, -0.0557926632, 0.0044642836, 0.0144531652, -0.0253062472, 0.0598660260, -0.0350334272, -0.0488277450, 0.0414901525, 0.0287326574, 0.0080137327, -0.0330182314, 0.0547668189, 0.0068488270, -0.0075715780, -0.0362141095, -0.0247975588, -0.0045902655, -0.0531932786, 0.0556139797, 0.0615230799, 0.0146168023, -0.0174391307, 0.0608754307, 0.0386929438, 0.0362900943, -0.0295477398, -0.0248717517, 0.0635707676, -0.0147314481, 0.0568574965, -0.0180549473, -0.0069175810, -0.0694070756, -0.0361791626, -0.0205660611, 0.0384442285, -0.0717933029, -0.0688313618, 0.0715314746, 0.0194333643, -0.0401987098, -0.0092849582, -0.0408766605, -0.0656694695, 0.0509672388, 0.0484387949, 0.0364670232, -0.0348515548, -0.0413699001, 0.0448350236, 0.0099876001, -0.0675482675, -0.0598183349, 0.0233594850, 0.0091725513, 0.0542884767, -0.0268555433, 0.0601680279, -0.0054144710, -0.0351674631, -0.0358505212, 0.0418830588, 0.0491459742, -0.0531300083, 0.0655199736, 0.0521890596, -0.0218102038, -0.0606387556, -0.0219503678, 0.0243920907, 0.0543523729, -0.0605561808, -0.0662140995, -0.0101585425, -0.0159296989, -0.0441922098, 0.0201834962, 0.0039939433, 0.0378134623, -0.0366611667, -0.0166543461, 0.0133503973, -0.0077273175, -0.0541117378, -0.0324648395, -0.0288178623, -0.0509969369, 0.0015455261, 0.0636466593, -0.0255401321, -0.0169119611, 0.0114471316, -0.0470406190, 0.0049798712, 0.0277839452, 0.0472046658, -0.0445256010, -0.0104381293, 0.0534060001, -0.0420884043, -0.0055361167, 0.0102502182, -0.0010242090, 0.0605014861, 0.0535022020, -0.0671846643, 0.0049503595, -0.0651114658, -0.0595501736, 0.0156598166, 0.0033961460, -0.0690702572, -0.0460763946, 0.0242776871, -0.0131402686, 0.0199191868, 0.0152387768, -0.0606205836, 0.0151573420, -0.0138959587, 0.0261759087, 0.0256297439, 0.0311196446, 0.0644783527, -0.0645941570, 0.0618366003, -0.0355514586, -0.0427221991, 0.0426657945, -0.0167390518, -0.0492708459, -0.0504843742, -0.0223218687, 0.0458612069, -0.0166487545, 0.0517327487, 0.0523290560, -0.0112246163, -0.0144021846, 0.0020365790, 0.0348735303, 0.0254007578, -0.0306686834, -0.0496826246, 0.0206781775, -0.0283459760, -0.0108106807, -0.0056794807, 0.0501480401, 0.0350894853, 0.0279539824, 0.0343156457, 0.0184624791, 0.0154857039, -0.0432669520, -0.0313338488, -0.0200089030, 0.0651063174, -0.0602259375, -0.0234681405, -0.0222552121, -0.0700645447, 0.0429699346, 0.0379258320, 0.0664177984, 0.0144536495, 0.0116685256, 0.0672973990, -0.0449994653, 0.0022509247, -0.0409473777, -0.0108875595, -0.0687569156, 0.0710380375, 0.0234627053, -0.0632668361, -0.0556572154, -0.0298203751, -0.0151514709, 0.0214510038, 0.0104377344, 0.0604626536, 0.0563917160, 0.0333681554, -0.0371417738, 0.0141623989, -0.0546457022, 0.0262951478, 0.0538538545, -0.0461590514, -0.0012333691, -0.0642869845, 0.0244295299, 0.0269351751, -0.0554907098, 0.0677304417, -0.0048807263, -0.0228394382, -0.0690503344, -0.0044372529, -0.0206720866, -0.0105504021, 0.0316089094, -0.0248453394, -0.0165171437, 0.0037628487, 0.0165965483, -0.0158819184, 0.0201209858, -0.0548771806, 0.0384060815, 0.0566496402, 0.0474755988, 0.0097697824, -0.0447641984, -0.0219603628, 0.0198690817, -0.0034146085, 0.0603195876, -0.0510722473, 0.0464217588, 0.0020384192, -0.0628579631, -0.0034589991, -0.0157572590, -0.0142204687, 0.0127687156, -0.0358823873, 0.0264807194, -0.0016407967, 0.0593733490, 0.0374496654, 0.0378712937, 0.0276244283, -0.0190645978, 0.0632307678, 0.0463084057, -0.0051601231, 0.0305168703, -0.0127337351, -0.0574503243, -0.0474241003, 0.0002836809, -0.0180882588, -0.0270067528, -0.0625191852, -0.0589084812, -0.0359912701, -0.0703127831, 0.0163495317, -0.0505417064, 0.0513583571, -0.0068470240, -0.0090047866, -0.0673095435, -0.0537487715, -0.0411490723, 0.0470992625, -0.0091214478, -0.0138014071, 0.0566277504, 0.0270740464, 0.0666046143, 0.0488608330, 0.0419258848, -0.0366789065, 0.0182934254, -0.0364320800, 0.0257574692, 0.0642863065, 0.0513365194, -0.0610574558, 0.0125974268, 0.0193420723, 0.0419383794, 0.0590725392, -0.0025086924, 0.0250180364, -0.0206904449, 0.0412948579, -0.0384960026, 0.0713522136, 0.0613799244, -0.0395001844, -0.0041605532, 0.0653804541, 0.0684858263, 0.0262463838, -0.0508000776, -0.0392397307, 0.0293013304, 0.0218452662, -0.0427102074, 0.0124494135, 0.0476955101, 0.0699796975, -0.0355748422, -0.0326970927, 0.0629412085, 0.0220784843, 0.0679155886, 0.0607472360, 0.0541463643, 0.0277881622, -0.0081279799, -0.0598203167, -0.0411020443, 0.0468823537, 0.0721369535, -0.0612870380, -0.0321535580, 0.0187711269, -0.0323200822, -0.0600193404, 0.0715283751, -0.0101498030, -0.0406166539, 0.0224012956, 0.0694467127, 0.0535033345, 0.0610187352, 0.0125746801, -0.0255861953, -0.0432169512, 0.0181810483, -0.0571563914, 0.0530421585, -0.0603778698, 0.0179605857, 0.0708481222, -0.0437375307, 0.0101000071, 0.0429861248, -0.0216373317, 0.0403895676, 0.0081779361, 0.0482413843, 0.0503955185, -0.0013867840, 0.0506250709, -0.0579612702, -0.0213823318, 0.0146968290, -0.0559000298, -0.0372068658, 0.0483061522, 0.0243455321, -0.0127280392, 0.0182295889, 0.0242402628, -0.0689740404, -0.0613512024, 0.0414007455, -0.0484976582, -0.0363149904, -0.0337399356, -0.0676145628, 0.0552259386, -0.0323917829, 0.0042131394, 0.0621557236, -0.0260269716, -0.0199288242, 0.0455166847, -0.0497569069, -0.0589035079, -0.0015200451, -0.0377242453, 0.0236921683, -0.0578893274, 0.0003328919, -0.0187565014, -0.0601555295, 0.0264870897, 0.0009900033, 0.0690571070, -0.0257025771, 0.0444968790, -0.0094119385, -0.0056388602, 0.0720007867, 0.0643250644, -0.0616741292, -0.0142714866, 0.0649453551, -0.0537682101, -0.0008016974, -0.0208997279, -0.0383913703, 0.0706998557, 0.0028189197, -0.0349005759, 0.0169075876, 0.0492809936, -0.0459806062, -0.0154716298, -0.0224650949, 0.0404036939, 0.0641430914, 0.0568406880, 0.0423332974, 0.0631617010, 0.0278695524, 0.0150308535, -0.0480938926, -0.0058503896, 0.0012032911, 0.0598375350, 0.0286403820, 0.0625530779, -0.0348213390, -0.0375338905, 0.0011811629, -0.0439121723, 0.0668279231, -0.0596685708, -0.0397721492, -0.0277803876, 0.0123844147, -0.0721596107, 0.0704233348, -0.0035811439, 0.0281511173, -0.0179582462, -0.0673558861, 0.0031597763, 0.0395117104, 0.0361783206, 0.0101668537, 0.0575817525, -0.0048442483, 0.0651945025, -0.0219778977, -0.0507872589, -0.0207860470, 0.0077535734, 0.0114012212, -0.0166618153, 0.0283752978, 0.0190542042, 0.0191492885, -0.0058899820, 0.0408219919, 0.0684649199, -0.0318080373, -0.0192610621, 0.0267665014, 0.0135325789, -0.0014280081, -0.0677803606, 0.0600090474, -0.0523959324, -0.0407201685, 0.0113901570, 0.0114140213, 0.0618337691, 0.0123376772, 0.0050544739, 0.0522796884, 0.0061763003, -0.0375614911, 0.0525362194, 0.0248825252, 0.0238926932, 0.0544430315, 0.0542739630, -0.0375595801, -0.0303830244, 0.0588191748, 0.0696489364, 0.0581872016, 0.0565656275, -0.0515717156, -0.0135008283, -0.0128521845, -0.0334489606, 0.0660402477, 0.0606512427, 0.0200409591, 0.0532581955, -0.0381348394, -0.0160962567, -0.0097800381, 0.0079831034, -0.0593107119, 0.0262089595, 0.0045904890, 0.0666471869, -0.0333851390, 0.0277811587, 0.0342593938, 0.0418367907, 0.0165313408, -0.0094867200, -0.0458577685, -0.0364206396, -0.0161599033, -0.0018929914, -0.0140706375, -0.0584695116, -0.0526663661, -0.0470623709, -0.0525259636, -0.0056189150, 0.0154374912, 0.0649469942, 0.0581991971, -0.0579879396, -0.0305208117, -0.0574950613, -0.0261985511, -0.0250936970, 0.0213666260, 0.0456910357, 0.0122594386, -0.0303538404, 0.0625800043, -0.0698827952, 0.0462127179, 0.0589930564, -0.0479221568, -0.0017236695, 0.0422398672, -0.0030943081, 0.0254836977, -0.0677320659, -0.0421452671, -0.0607336834, 0.0675836653, -0.0615540147, -0.0106391013, 0.0264550969, 0.0271684229, 0.0231419578, 0.0665155351, -0.0386641435, -0.0562119335, 0.0076187402, -0.0304140113, -0.0277706459, -0.0533064790, -0.0281077214, -0.0542906523, -0.0551101379, 0.0012850240, 0.0697400719, 0.0025708601, -0.0126342811, 0.0599678010, -0.0230843537, 0.0360590145, 0.0346979871, 0.0701926649, -0.0417279452, -0.0612752363, 0.0355302393, 0.0352311954, -0.0662768334, -0.0705284327, -0.0507263653, -0.0474455729, -0.0048810914, 0.0165551379, -0.0484346487, -0.0104646459, -0.0133249797, -0.0590558536, -0.0563756824, -0.0460976250, -0.0706145316, -0.0215314254, -0.0584762208, 0.0484848022, -0.0397362374, 0.0371546075, -0.0618662387, 0.0161652341, 0.0481629595, -0.0347497948, 0.0053134337, -0.0072885677, -0.0500660688, -0.0481215604, -0.0309402011, 0.0313718393, -0.0589640401, -0.0022766590, 0.0394641906, -0.0004668608, 0.0624198765, 0.0425014049, -0.0554171503, 0.0077394620, 0.0189924836, 0.0545637012, -0.0545388684, -0.0697679594, 0.0477851406, -0.0580519475, -0.0182110406, 0.0600092709, -0.0666894466, 0.0661637783, -0.0583351813, 0.0029806942, -0.0620970130, 0.0704687685, -0.0691219792, -0.0455823615, 0.0448219776, 0.0051108599, -0.0421469882, -0.0351857692, 0.0523442626, -0.0686618462, -0.0501889735, 0.0116902217, -0.0509046242, 0.0299455002, 0.0444066674, -0.0698402449, -0.0021897033, -0.0220791548, 0.0712096989, 0.0080075413, 0.0628326237, 0.0210789666, 0.0695025325, 0.0237666368, 0.0442205295, 0.0177183896, -0.0467682444, 0.0375174731, 0.0491662771, -0.0054035261, -0.0125074014, 0.0250761136, -0.0048530102, -0.0049515292, -0.0518881753, -0.0041040480, -0.0718579292, -0.0223203562, -0.0573521964, -0.0097514056, 0.0283862725, 0.0573369712, 0.0248234496, 0.0188368186, 0.0643835962, 0.0352107361, -0.0428995453, -0.0386826731, -0.0262019075, -0.0488137379, -0.0653568655, -0.0378273465, 0.0422845185, 0.0015773624, -0.0629806072, 0.0056190714, -0.0295339227, 0.0006192923, -0.0188164487, 0.0415101498, 0.0164564401, 0.0441373363, 0.0236854255, 0.0619401038, -0.0253582448, -0.0395780951, 0.0306528360, 0.0331996530, -0.0554759800, -0.0341568291, 0.0266860947, 0.0416951180, 0.0604664534, -0.0072750300, 0.0532120168, 0.0240931287, 0.0165061802, 0.0182877481, -0.0174054727, -0.0184235759, -0.0463321134, -0.0689395741, 0.0050958395, -0.0568244085, -0.0195597820, -0.0061843693, -0.0683968142, -0.0411350131, 0.0077758580, 0.0543900579, -0.0052237883, 0.0061358288, -0.0490827411, -0.0564674623, 0.0057538673, -0.0565020666, -0.0593048111, 0.0353115499, -0.0346999317, -0.0230004527, -0.0380018167, 0.0387719274, -0.0349502340, 0.0242327601, -0.0342315584, -0.0173115954, 0.0028212592, -0.0371213667, 0.0105896145, -0.0196064264, -0.0658555925, 0.0529440641, -0.0650643706, 0.0464379340, 0.0357092917, 0.0012902021, 0.0030973926, 0.0244142711, 0.0450481400, -0.0281126089, -0.0659710243, 0.0113865435, -0.0154421069, -0.0287172385, 0.0198214725, -0.0459676310, -0.0131674036, -0.0682276636, -0.0055039600, -0.0054100975, 0.0556624383, 0.0188598260, -0.0437170379, 0.0266836211, 0.0456496924, 0.0155983418, -0.0673385039, 0.0662232041, -0.0633123294, -0.0050060600, 0.0555129200, -0.0142753571, 0.0646311045, -0.0721646547, 0.0422762632, 0.0076299980, -0.0306611285, -0.0682989955, -0.0645562708, 0.0552371591, -0.0415493250, -0.0159479566, -0.0125888735, 0.0609809309, 0.0587042570, -0.0552606061, -0.0064943209, -0.0343638584, 0.0324482843, -0.0451095663, 0.0237419605, 0.0642107427, 0.0505220219, 0.0314155966, 0.0318360478, 0.0404985473, 0.0705196410, 0.0325582400, 0.0109858736, 0.0491073132, 0.0250252336, 0.0591617525, -0.0581202209, 0.0456388369, -0.0713486597, 0.0048503727, 0.0399143770, -0.0454083048, 0.0119117722, 0.0632256567, 0.0139886811, 0.0708667189, 0.0108874217, 0.0401702151, 0.0651416332, -0.0461146757, 0.0456027016, 0.0034469366, -0.0670882016, -0.0380318612, -0.0238289088, 0.0210682675, -0.0495779254, -0.0353916101, 0.0176199004, -0.0518892072, 0.0406902134, -0.0594673268, 0.0701213330, 0.0688708127, -0.0156666301, -0.0461674854, 0.0595353395, -0.0567652732, -0.0514633320, -0.0248118043, 0.0697875470, 0.0041268319, 0.0153174773, -0.0062551200, 0.0271871611, 0.0525613055, -0.0090472549, -0.0684669316, -0.0546540841, -0.0704043880, -0.0368579365, -0.0415372998, 0.0559410453, -0.0290607139, -0.0618588924, -0.0281143114, -0.0057184547, -0.0328772590, 0.0244431570, -0.0569966435, 0.0377201140, 0.0656352788, -0.0237981752, 0.0720920861, 0.0404933020, -0.0474550538, -0.0354701765, -0.0470182002, 0.0458483249, 0.0361619890, -0.0180452429, -0.0353067480, -0.0697894469, -0.0467286855, -0.0107728802, -0.0147125907, -0.0007847622, 0.0591799915, 0.0318664908, -0.0350887775, 0.0210226476, -0.0289245434, -0.0333442762, 0.0450290069, 0.0402163118, -0.0013820827, 0.0066991821, -0.0174631849, -0.0656963438, -0.0547500625, -0.0200625174, -0.0033222064, 0.0414601639, -0.0180787779, -0.0042346418, -0.0546035990, -0.0148693062, -0.0239977688, 0.0668938458, -0.0412030816, -0.0218997262, 0.0650554895, 0.0665249676, 0.0470735878, -0.0043542832, -0.0135469101, 0.0021141991, -0.0136774518, 0.0267076716, 0.0721155107, 0.0562431067, -0.0414512306, -0.0639598221, 0.0300674438, -0.0296382271, 0.0310844257, -0.0566648729, 0.0463066697, -0.0552931614, 0.0378304049, -0.0220835097, 0.0636396557, -0.0108952150, 0.0130683854, 0.0049956292, 0.0254820958, 0.0337934271, -0.0036001578, 0.0346519053, 0.0434614196, 0.0176984444, -0.0655222535, -0.0303754359, 0.0165127888, -0.0106339194, -0.0402991101, 0.0600786507, -0.0497853979, 0.0065017939, -0.0557766445, -0.0128033347, 0.0712548494, 0.0201981217, -0.0468519703, 0.0577318519, -0.0644749179, 0.0375200734, -0.0597085059, 0.0562317669, 0.0099168643, -0.0427191556, 0.0092157573, 0.0704513490, -0.0071135983, 0.0307493806, 0.0232533514, -0.0555378348, -0.0671629161, -0.0436846204, -0.0157710724, 0.0529816747, 0.0172954351, 0.0718253553, -0.0099901780, 0.0505631939, -0.0072386861, -0.0398135632, 0.0313287526, 0.0679344088, 0.0121861398, 0.0638448000, -0.0130288079, 0.0119910389, -0.0471641980, 0.0675320029, -0.0628058314, 0.0071101710, -0.0373277925, 0.0086509734, -0.0462952778, -0.0469514951, 0.0164423808, 0.0641319603, -0.0042822883, -0.0685002804, 0.0350687653, 0.0340727791, 0.0091452450, 0.0543054789, 0.0483606234, -0.0603151880, -0.0618670136, -0.0427587256, -0.0712732747, -0.0320194699, 0.0568613708, -0.0525877178, -0.0450877175, 0.0231303945, 0.0137697831, -0.0596776754, 0.0266568810, -0.0709027052, -0.0446706861, -0.0432073697, 0.0442085043, 0.0253811255, -0.0407809429, 0.0560871959, 0.0352329686, -0.0461275280, 0.0192444399, 0.0564253032, -0.0167770274, 0.0662067235, 0.0355579257, 0.0571329743, -0.0214549601, -0.0145571455, -0.0158556961, 0.0085432902, 0.0031079501, -0.0083293840, 0.0527603179, -0.0569359250, 0.0459591001, -0.0214609466, 0.0093915015, 0.0592938364, 0.0138248280, 0.0227474198, -0.0042163059, -0.0176659077, -0.0119592585, -0.0314723775, -0.0576492846, 0.0438196212, 0.0124507248, 0.0554964840, -0.0466253981, -0.0456279255, -0.0052811503, -0.0480049849, -0.0211767666, -0.0708615482, 0.0450862870, -0.0396087393, -0.0693145022, 0.0025340021, -0.0039912462, -0.0203655213, 0.0625367165, 0.0112827718, 0.0292773619, 0.0006850734, -0.0508551560, -0.0535963029, -0.0011518970, 0.0672854036, 0.0703706294, -0.0457406454, -0.0668210760, -0.0704883933, 0.0632180721, 0.0719548315, 0.0481815264, 0.0023130029, 0.0663134158, 0.0535652936, 0.0557927340, -0.0250607617, 0.0383371189, 0.0298978239, -0.0025871694, 0.0257888660, 0.0609281808, -0.0323501937, 0.0149538219, 0.0057612807, 0.0558936745, 0.0657840967, 0.0176490322, 0.0235175267, -0.0539840832, -0.0383875333, 0.0216244087, 0.0671411604, -0.0660856739, 0.0459979698, -0.0655026212, 0.0490245521, 0.0614355057, -0.0468183681, -0.0711845458, -0.0555708036, -0.0380842537, 0.0554193705, 0.0059365779, -0.0581139587, -0.0680852085, -0.0454802103, -0.0656941459, -0.0019738302, -0.0521649718, -0.0444600433, -0.0315495469, 0.0614964366, 0.0612700880, -0.0087567046, 0.0567185283, -0.0707883835, 0.0450124517, -0.0367411934, -0.0406233296, -0.0274772272, 0.0146845579, 0.0214049444, 0.0129540116, -0.0104654543, 0.0652287751, -0.0022898912, -0.0575219542, 0.0520294234, -0.0540679842, -0.0293359980, -0.0275835954, 0.0583484173, 0.0690396875, -0.0428118445, 0.0694378614, 0.0538143218, -0.0345025584, 0.0008053631, -0.0393324047, -0.0434184372, -0.0204367898, 0.0304481164, -0.0006201863, -0.0048571751, -0.0408405960, -0.0008054674, -0.0186874010, 0.0386098772, -0.0356233306, 0.0606315285, -0.0159962177, -0.0233767219, 0.0015105158, -0.0661839396, 0.0230730623, -0.0135148354, -0.0265217572, -0.0155815296, 0.0346621647, -0.0191973634, 0.0105484203, 0.0716142952, -0.0207363032, 0.0440609604, -0.0301480889, 0.0218205974, -0.0319563411, -0.0196547955, -0.0599430129, -0.0354722403, 0.0638384670, -0.0717764422, -0.0337630622, -0.0182643123, 0.0609530658, 0.0626891553, -0.0363169685, -0.0465237424, 0.0324802399, -0.0585409515, -0.0318171903, 0.0318561494, 0.0368029624, -0.0166070126, -0.0333813541, 0.0018558949, 0.0315337032, -0.0123585835, -0.0590853617, 0.0709576607, 0.0579486936, -0.0139035806, 0.0028921142, 0.0124261528, 0.0399214998, 0.0471070185, 0.0654331446, 0.0096860230, 0.0331199765, 0.0677605420, 0.0713969171, 0.0326814875, -0.0201445222, -0.0446449071, -0.0020570382, -0.0151426978, -0.0130682103, -0.0287464038, -0.0231803656, -0.0505106486, 0.0180325434, -0.0706967413, -0.0647028312, 0.0400485322, -0.0004900545, 0.0580357015, -0.0477617085, -0.0234269127, -0.0091908872, -0.0228736773, 0.0117025748, -0.0341278017, 0.0493467078, 0.0479851812, 0.0251995474, -0.0568838045, -0.0418678857, 0.0556327850, -0.0292043351, -0.0531736314, -0.0553975850, 0.0357756391, -0.0412263460, 0.0533495992, -0.0628691837, -0.0143261328, 0.0343569219, -0.0574452132, -0.0213302672, -0.0078722313, -0.0668594465, 0.0630823821, 0.0288470611, 0.0499809310, 0.0305722728, -0.0494754091, -0.0341082215, 0.0521072447, 0.0127192661, 0.0526970103, -0.0511255711, -0.0089719594, 0.0357165709, -0.0041196346, 0.0471220091, -0.0398112945, 0.0327571779, 0.0676889569, -0.0332148485, -0.0172225200, 0.0224253982, -0.0235002153, -0.0390735008, 0.0716129839, 0.0481992662, -0.0465242751, -0.0108223483, 0.0033502877, 0.0104075894, -0.0003583953, -0.0185879804, -0.0430771336, 0.0347718522, -0.0446435325, -0.0186610073, -0.0176722743, -0.0094568804, -0.0512648039, -0.0329089537, -0.0310863853, -0.0321587212, -0.0588969365, -0.0398812704, -0.0355904996, 0.0236032978, 0.0305454880, -0.0407299586, 0.0624978393, -0.0447634086, -0.0126824938, -0.0151273161, -0.0652885735, 0.0455464199, 0.0681734830, -0.0245734975, -0.0335224830, -0.0353546850, -0.0115253329, 0.0155635998, 0.0534044653, 0.0370952860, 0.0030975640, -0.0584586374, 0.0433414578, -0.0621844530, 0.0456977636, 0.0194466114, 0.0549391955, 0.0535708070, 0.0641383827, -0.0716950074, 0.0559308827, 0.0641072989, -0.0010010004, 0.0376172736, -0.0113989860, 0.0614546090, -0.0214555264, -0.0695854649, -0.0015893877, 0.0265263021, -0.0529000312, -0.0552192107, 0.0621612370, 0.0036486313, -0.0549086854, 0.0595119894, -0.0342864282, -0.0118343756, 0.0599890351, 0.0563769192, 0.0063011646, -0.0368137024, 0.0504594222, 0.0212489292, -0.0701357648, 0.0088732764, 0.0642482042, 0.0672049820, 0.0318385437, -0.0709609836, 0.0636832267, -0.0603177510, 0.0578797609, 0.0359019861, -0.0718231052, -0.0594802499, 0.0080180690, 0.0481631681, 0.0457945019, 0.0520398319, -0.0498022437, -0.0310914777, 0.0265389457, 0.0004914328, -0.0197288692, -0.0010257959, -0.0125314407, -0.0173576586, -0.0449412912, -0.0469145328, -0.0149741098, -0.0360302441, -0.0409727581, 0.0038399324, 0.0644425452, 0.0538133830, 0.0639648139, 0.0612294078, -0.0188774280, 0.0346842408, -0.0195079222, -0.0227434412, 0.0673705488, -0.0378628075, 0.0003034323, -0.0711572692, -0.0287079662, -0.0173926540, 0.0210042372, 0.0401331186, -0.0026061311, -0.0620696358, -0.0491210110, -0.0176841654, -0.0179447718, 0.0146412700, -0.0102718994, 0.0558019727, -0.0344546214, -0.0464204028, -0.0187589265, -0.0148058310, -0.0687299818, -0.0335642770, -0.0137527138, -0.0603101626, -0.0091850907, 0.0340320468, -0.0461742654, 0.0254987553, -0.0131788291, -0.0155788623, -0.0370744616, -0.0582277961, 0.0375149101, 0.0078535751, 0.0054555908, -0.0542978756, -0.0338501446, 0.0060489550, 0.0106712207, 0.0606016666, -0.0654038861, 0.0589632541, -0.0542346425, -0.0524424613, -0.0506915897, -0.0623274557, 0.0539575964, 0.0091069043, 0.0478234068, -0.0341626443, 0.0227727592, -0.0182234645, 0.0000290275, 0.0552435219, 0.0638470054, 0.0596143305, 0.0258446857, -0.0647926629, -0.0301082879, 0.0686970800, 0.0030242130, -0.0096844546, -0.0340569988, 0.0353265330, 0.0611320585, -0.0369307399, 0.0140254870, 0.0651072264, 0.0526109487, -0.0081181079, 0.0060413480, 0.0530990958, 0.0577945262, 0.0034940615, 0.0419581309, 0.0387854800, 0.0089639574, -0.0126669742, -0.0184770525, 0.0443471000, 0.0141423866, -0.0375891589, -0.0406577252, 0.0244261399, 0.0148022547, -0.0303239003, -0.0688996390, -0.0687787160, 0.0060484186, 0.0600105524, 0.0581429452, 0.0584006011, -0.0595672280, 0.0136097297, 0.0285104737, -0.0298190825, 0.0346494839, -0.0548869707, -0.0583730526, 0.0672661215, -0.0222889520, 0.0001815632, 0.0487634987, 0.0664843917, 0.0076712593, -0.0658396780, 0.0555284470, -0.0108789578, -0.0695068836, -0.0199581608, 0.0276287124, 0.0452290475, 0.0654192865, 0.0207804367, -0.0418917164, -0.0205332488, -0.0267132297, 0.0107426792, -0.0451496765, 0.0364343151, -0.0010974929, 0.0368283987, 0.0682052374, 0.0053418428, -0.0597590432, -0.0223867707, 0.0279380679, 0.0087972283, -0.0544810221, 0.0668924451, -0.0317938775, 0.0379003882, 0.0303932130, 0.0472603664, 0.0208291113, -0.0537272096, -0.0308328308, 0.0174747780, -0.0011907518, 0.0527890697, 0.0247087553, -0.0679564700, 0.0109386966, 0.0473488197, -0.0448096618, -0.0141796395, 0.0414347127, -0.0680886656, 0.0178337917, 0.0115854815, -0.0090037510, 0.0164785460, -0.0078092664, -0.0661230609, 0.0298724547, 0.0140988380, -0.0154222138, 0.0629724711, 0.0365525931, -0.0626253337, 0.0556479245, 0.0255190581, -0.0109555237, -0.0586321801, -0.0618192665, -0.0672262162, 0.0518505797, -0.0013731867, 0.0266519934, 0.0187903941, 0.0647581965, 0.0228797346, 0.0694360584, -0.0676201358, 0.0187172517, -0.0517946929, 0.0690839887, -0.0223230049, 0.0052109510, -0.0322032161, -0.0222073607, -0.0364122950, 0.0206577852, -0.0106596276, -0.0275595412, -0.0061471015, -0.0255418383, 0.0460123345, 0.0250158384, -0.0522094369, 0.0050535277, -0.0101665780, 0.0008393303, 0.0145004168, -0.0073338896, 0.0257395357, -0.0379135162, -0.0354172662, 0.0242917612, -0.0504674241, -0.0041423291, -0.0016272739, 0.0150853992, -0.0244699307, 0.0201835260, -0.0260028131, 0.0637828708, -0.0249713920, 0.0097282305, -0.0585219897, -0.0579256006, -0.0555563495, 0.0024336204, -0.0324281044, 0.0287979394, 0.0106320083, 0.0267269239, -0.0358596072, -0.0657159761, -0.0322125256, -0.0484516844, -0.0610867739, -0.0651845783, -0.0517566130, -0.0597039126, -0.0353112407, 0.0181316510, 0.0426337719, -0.0517092124, -0.0466544777, 0.0140879974, 0.0648678988, 0.0260698348, 0.0706053972, 0.0025057271, -0.0179751441, 0.0514128655, -0.0423521250, -0.0510330498, 0.0278435871, 0.0575861186, -0.0428016745, 0.0631766766, -0.0147522166, -0.0200094022, 0.0461406410, -0.0499050170, 0.0342668667, -0.0582144447, -0.0311558992, 0.0188360959, 0.0251219869, 0.0558967590, -0.0584056601, -0.0228867903, 0.0513279885, 0.0191782787, -0.0505145565, -0.0533033833, -0.0708624050, -0.0214662664, 0.0593693852, 0.0543718785, 0.0656028688, -0.0237482265, -0.0549270809, -0.0490732118, 0.0449814796, 0.0623519570, 0.0706808567, 0.0111477524, -0.0046165586, 0.0559384674, 0.0487698317, 0.0068114698, 0.0415613353, 0.0361574292, 0.0169837624, 0.0486696512, -0.0378988571, 0.0216358304, 0.0007575080, 0.0204905793, 0.0686360896, 0.0014551282, -0.0520873219, -0.0350305364, 0.0154617205, -0.0546397865, -0.0003749952, -0.0623550899, -0.0363939181, -0.0076303557, -0.0429153070, -0.0339755788, -0.0385016128, -0.0208640583, 0.0486611500, 0.0121615529, -0.0208562650, -0.0212283172, -0.0413858816, -0.0380274914, -0.0232687034, -0.0358487517, 0.0698317885, -0.0503406525, 0.0699720979, 0.0250536203, 0.0102017298, 0.0185793936, 0.0676846653, 0.0058451816, 0.0641075820, 0.0350402072, -0.0465683043, 0.0693557560, 0.0258470252, -0.0596502461, 0.0364661664, 0.0214526355, -0.0559768379, 0.0034427568, -0.0089293048, 0.0469303951, 0.0527954698, 0.0565962940, 0.0466133356, -0.0621900819, -0.0435062051, 0.0232257396, -0.0027655140, -0.0688172206, -0.0394814126, -0.0390267856, 0.0647589862, -0.0679117665, 0.0390915498, 0.0718013793, 0.0697167665, 0.0441351160, -0.0679670870, 0.0510011688, -0.0432102382, -0.0126604363, 0.0241138935, -0.0253764838, -0.0650978535, 0.0653605312, -0.0286373682, 0.0535817146, -0.0531359985, 0.0154616311, 0.0172614753, 0.0628755540, 0.0533296764, -0.0133770630, -0.0093869045, 0.0044817254, 0.0475624576, 0.0178593248, -0.0487052202, 0.0204034820, -0.0495612025, -0.0109392293, 0.0574354529, -0.0364767648, -0.0370524749, -0.0694491416, 0.0318999365, 0.0036172420, -0.0098363012, 0.0224129930, -0.0107679926, 0.0266285539, 0.0143669471, 0.0341377333, 0.0437903181, -0.0670172125, -0.0492606759, 0.0572938472, -0.0299770907, 0.0143110976, 0.0655374825, -0.0673714355, -0.0101977922, -0.0019902810, -0.0444620401, -0.0562400110, 0.0279305652, -0.0257769115, 0.0335882306, 0.0707713962, 0.0680555403, -0.0077618808, 0.0691690743, -0.0365733616, 0.0085763782, 0.0168878883, -0.0379841663, -0.0244348831, -0.0393306166, -0.0232380927, -0.0190182440, -0.0443519205, -0.0120723397, 0.0343240947, 0.0303029642, -0.0119566955, -0.0524247885, -0.0525799245, 0.0201848745, 0.0642367750, -0.0438502841, 0.0447882861, -0.0637470037, 0.0716856718, -0.0368533619, -0.0714221969, -0.0591840744, 0.0375074819, 0.0663098842, -0.0023134500, 0.0335329399, -0.0382657796, 0.0293782428, 0.0226929411, -0.0343846940, -0.0270514041, -0.0159450993, 0.0241865069, 0.0647337884, 0.0282065570, -0.0406831391, 0.0514283702, -0.0707021803, -0.0079256371, 0.0192635357, -0.0421591029, -0.0461782888, 0.0144489333, -0.0108870082, 0.0598530620, 0.0644919276, 0.0410423949, 0.0443059579, 0.0350914598, -0.0501152463, 0.0698718876, -0.0689061806, 0.0716511011, 0.0378463417, 0.0083848089, 0.0248342082, 0.0370009392, -0.0247416012, -0.0431201458, 0.0193058699, -0.0098407231, 0.0209120438, 0.0623023808, -0.0655780658, -0.0605719090, -0.0181840286, 0.0361605659, 0.0252829641, 0.0266565830, 0.0461754650, -0.0700893775, -0.0607570820, -0.0106012449, 0.0061065778, -0.0494329259, 0.0254264846, 0.0174102411, -0.0043668449, -0.0635463372, 0.0680030435, -0.0302440114, -0.0351690128, 0.0212933943, 0.0251258016, -0.0278391801, 0.0064553842, 0.0114625767, -0.0207467638, -0.0650299415, 0.0611703694, -0.0272920690, 0.0103492960, 0.0684621334, 0.0065858439, -0.0157634355, -0.0524823442, 0.0176222771, -0.0615196861, 0.0167159587, -0.0468744263, 0.0297286659, 0.0535448045, 0.0160240456, 0.0025579482, -0.0304656141, -0.0490120575, 0.0220391527, 0.0227646381, 0.0020096153, 0.0341606289, 0.0152432844, 0.0179398507, 0.0510739163, -0.0611222349, -0.0238670707, -0.0387554057, 0.0311381742, -0.0011439696, -0.0069525465, 0.0066690370, -0.0093243271, 0.0397806689, 0.0249071941, 0.0456234664, -0.0229991637, 0.0071793273, -0.0299671106, -0.0095804632, -0.0491179973, -0.0445955433, -0.0552495606, -0.0676188469, 0.0392490402, 0.0709193796, -0.0332499854, 0.0552354008, -0.0299483575, -0.0090538263, -0.0703085810, 0.0287100971, 0.0337994844, 0.0344700739, 0.0051455498, -0.0409748927, -0.0700988024, -0.0622817054, 0.0559147298, -0.0559656918, -0.0429883450, -0.0492198765, -0.0382937938, -0.0577363484, 0.0481058359, -0.0171576515, 0.0395593196, 0.0351347700, -0.0560062118, -0.0369864181, 0.0609607697, -0.0431333482, 0.0317847952, 0.0020169690, -0.0042319223, 0.0191961750, -0.0410714000, -0.0166864544, -0.0600546151, -0.0036905929, 0.0276199207, 0.0284998864, 0.0465569124, 0.0228595361, 0.0030068830, -0.0245475322, -0.0366464034, 0.0711719692, -0.0218465589, -0.0125688277, 0.0139979050, 0.0276605263, -0.0572111756, -0.0676223040, 0.0289654061, 0.0570591092, 0.0697162002, 0.0125869662, 0.0495260134, 0.0002819449, -0.0580376461, 0.0454691947, 0.0573760271, -0.0547226518, 0.0487105846, -0.0046260878, 0.0214878246, -0.0411537364, -0.0408293270, -0.0662357509, -0.0682354420, -0.0290105380, -0.0061495751, -0.0262230188, -0.0506630987, 0.0302511007, -0.0622993261, 0.0027298629, -0.0709769502, 0.0243081376, 0.0430094600, -0.0172258057, -0.0653783381, -0.0043813810, 0.0032796413, 0.0114622340, 0.0519755110, -0.0692476034, 0.0325157568, 0.0610250384, -0.0452758148, 0.0204306468, -0.0433464646, -0.0336783528, 0.0440162942, 0.0512841418, -0.0573264584, -0.0111532621, 0.0369494110, -0.0692615435, -0.0046993345, -0.0500290617, -0.0070012584, -0.0284812711, -0.0700681582, -0.0265368633, -0.0281697847, 0.0393532738, -0.0174026191, -0.0012909248, 0.0427655950, 0.0167327374, 0.0591399074, 0.0366378352, 0.0136125833, -0.0622185245, 0.0707154572, -0.0378386676, 0.0550793260, -0.0128976442, 0.0668392926, -0.0063474700, -0.0288056284, -0.0365875587, -0.0420686491, -0.0279534124, 0.0516008809, 0.0386380926, -0.0385177843, 0.0128817782, 0.0146998242, -0.0591180548, -0.0015191510, 0.0361129567, 0.0420658290, -0.0000880957, 0.0260461569, -0.0424387418, 0.0063113719, -0.0654494837, 0.0501106530, -0.0014830902, -0.0059724748, -0.0681140795, -0.0180598311, -0.0312038697, -0.0055574402, -0.0462747812, -0.0199795142, -0.0642674789, -0.0503329784, 0.0543269217, 0.0196554139, -0.0440406725, 0.0326821208, 0.0645368248, -0.0437293053, -0.0426418781, 0.0616344661, 0.0081153736, -0.0549985543, 0.0076910779, 0.0648304820, 0.0694551766, -0.0189518631, 0.0075591952, -0.0429787971, 0.0565220267, -0.0571596399, 0.0279661790, -0.0135900974, 0.0020883009, -0.0181256793, -0.0244020335, -0.0607754067, 0.0571697354, 0.0379828587, -0.0268136971, -0.0429150313, 0.0576585233, 0.0398399085, 0.0366294011, 0.0279367715, 0.0167028829, -0.0497556999, -0.0099511556, -0.0432785302, -0.0510208532, 0.0704756528, 0.0362475216, 0.0019815564, -0.0616940223, -0.0202112310, 0.0491411388, -0.0173203535, -0.0049848780, 0.0639718771, 0.0679264069, 0.0008135661, 0.0159083828, 0.0523877591, -0.0087214336, -0.0315291211, 0.0522271916, 0.0569545627, 0.0585046262, -0.0344958305, 0.0213971138, 0.0668416470, -0.0216476358, -0.0231255293, 0.0249873474, -0.0495291278, -0.0703283548, -0.0144593790, 0.0432390943, 0.0670399368, -0.0390370749, -0.0486160219, 0.0010808855, 0.0064234510, 0.0192374885, 0.0474810004, -0.0717509910, -0.0605055429, 0.0085767955, -0.0420676172, 0.0278930366, -0.0582752675, 0.0171314776, -0.0468821153, 0.0331059992, -0.0049240217, -0.0178375766, -0.0679050609, -0.0637985021, -0.0622382089, -0.0237841196, -0.0375658274, 0.0150923133, -0.0330716558, -0.0703675821, -0.0101063736, -0.0000260696, 0.0692809224, 0.0279674381, -0.0078425631, -0.0123713166, 0.0041546375, -0.0706313550, 0.0508775562, 0.0461377650, -0.0417023450, -0.0433212556, 0.0218207315, 0.0221345127, -0.0573828444, -0.0575553179, 0.0313853100, -0.0387483872, 0.0221233964, 0.0143748969, 0.0492637530, 0.0433510542, -0.0150183104, 0.0346087068, -0.0024534091, 0.0427692384, -0.0369945578, -0.0075969249, -0.0038352683, -0.0672262311, 0.0426453874, 0.0692977607, 0.0225545689, 0.0215684399, 0.0165815428, -0.0208466128, -0.0456531160, 0.0364741161, 0.0420963541, -0.0538466051, 0.0145632029, -0.0278696194, -0.0708512217, 0.0574062616, -0.0500105992, -0.0223158970, -0.0648465529, 0.0650474280, 0.0016734898, -0.0066029653, 0.0201343372, -0.0369562730, 0.0474412218, 0.0666798502, 0.0095985234, -0.0162781961, -0.0460071899, 0.0396937728, 0.0621718317, 0.0298902318, 0.0323315561, -0.0686118081, -0.0327045433, 0.0692295730, 0.0475331396, 0.0643302947, -0.0313390605, 0.0200172663, 0.0015858114, -0.0601844527, -0.0379596986, 0.0088026971, 0.0543666035, 0.0074608773, 0.0650554746, 0.0433179736, -0.0200946257, -0.0133576058, -0.0064670891, 0.0634264797, 0.0576242954, 0.0471990258, -0.0213573128, -0.0015889257, -0.0600059889, -0.0544405356, 0.0279013664, -0.0446774624, 0.0593212247, -0.0559372306, 0.0071059391, -0.0660119653, 0.0099779442, 0.0208901986, -0.0073219314, 0.0341282338, -0.0135447420, 0.0646660626, -0.0379028805, -0.0464063585, 0.0674476922, -0.0012715161, -0.0348512605, -0.0006444305, 0.0631426126, -0.0210095905, -0.0626034141, 0.0671727061, 0.0306703672, -0.0237284563, -0.0577802919, -0.0011176094, 0.0439464524, 0.0696324110, -0.0678129345, -0.0405840650, 0.0125495568, 0.0698147714, -0.0209127702, 0.0243945867, -0.0697157532, 0.0012631193, -0.0634257570, -0.0316933766, -0.0532234237, 0.0687279254, 0.0211430639, -0.0474005118, -0.0246176645, 0.0381281152, -0.0080361739, 0.0687891543, -0.0099612698, -0.0701027587, -0.0145776570, 0.0383874997, 0.0482249334, -0.0613572933, -0.0010279641, -0.0667894185, -0.0681559443, -0.0356367491, -0.0590977520, 0.0603675842, 0.0396621823, 0.0509037822, -0.0041363463, -0.0217714719, 0.0561992228, 0.0312722698, 0.0426333100, -0.0412958078, 0.0703882724, 0.0625204146, -0.0715866759, -0.0073735490, -0.0023256838, -0.0394718982, -0.0660760552, -0.0700027570, 0.0657011420, 0.0059038699, -0.0018494427, 0.0108134896, 0.0479242057, -0.0082283318, 0.0517424569, -0.0215757154, -0.0234724097, -0.0379777625, 0.0132972300, -0.0279563554, -0.0544527322, 0.0720462501, 0.0719166100, 0.0335667729, 0.0126456022, 0.0421093777, 0.0033318400, -0.0175986663, -0.0112310350, -0.0307827257, 0.0581093282, -0.0605515540, 0.0244310126, -0.0373293757, 0.0149182379, -0.0354240797, -0.0223731622, 0.0344528332, -0.0289320946, -0.0059066936, 0.0285048410, -0.0591937266, 0.0077513531, -0.0540756211, 0.0228377357, 0.0395832881, -0.0366179794, -0.0255843699, -0.0437871702, 0.0290878490, 0.0661169142, -0.0399397910, 0.0338596404, 0.0599221438, -0.0317510664, 0.0066582635, -0.0566233024, -0.0633288845, 0.0382690877, -0.0587680601, -0.0532945022, 0.0056172460, 0.0111006126, -0.0286217108, -0.0185097605, -0.0413405448, -0.0563453324, 0.0219292715, -0.0422108434, -0.0162020065, 0.0181083530, 0.0084811822, -0.0363678150, 0.0477287397, 0.0696500838, 0.0507497117, 0.0651218891, 0.0689569265, 0.0501301810, 0.0428874493, 0.0427727848, -0.0548067391, -0.0149372704, 0.0684319884, -0.0116747692, 0.0259949490, 0.0206961557, -0.0279591270, -0.0027669221, -0.0013253912, -0.0241416171, -0.0047379658, -0.0133841038, 0.0023089722, -0.0128845833, 0.0526039973, -0.0237148292, -0.0490945987, 0.0330447778, 0.0711675584, 0.0588226169, 0.0476226136, -0.0572782084, -0.0327370800, -0.0552465841, 0.0119893700, 0.0394783467, -0.0163573995, -0.0053800941, -0.0373969972, 0.0264191031, -0.0499877818, 0.0251758397, 0.0345368832, -0.0360237546, 0.0704612583, -0.0240231156, -0.0099300779, 0.0450804383, 0.0318912640, 0.0435431525, -0.0101318024, -0.0241841339, -0.0040250868, 0.0433932990, 0.0146554485, -0.0066023991, -0.0131386183, -0.0026609153, 0.0167007670, -0.0707687661, -0.0119890422, -0.0716292784, 0.0201584622, -0.0621902011, -0.0054928064, 0.0344170555, -0.0628905669, -0.0121047720, -0.0257833637, 0.0384093150, 0.0619621426, -0.0344180577, -0.0414319113, -0.0579613224, -0.0262590311, 0.0356137305, -0.0620354116, -0.0443482697, -0.0586726665, 0.0667683929, 0.0538157076, 0.0193089992, 0.0547272414, 0.0179483518, -0.0295316167, 0.0510626808, 0.0633429438, -0.0560830012, 0.0124901757, 0.0488678515, -0.0416933969, -0.0160502493, 0.0462749377, 0.0001576990, -0.0170596242, 0.0533062369, -0.0635671914, 0.0665879101, 0.0610461086, -0.0400583930, 0.0148196444, -0.0011917502, -0.0588801950, -0.0479306877, 0.0575304180, -0.0236507170, -0.0652368814, -0.0691659451, -0.0554142781, -0.0608297102, 0.0601202846, 0.0234430358, 0.0350290388, -0.0275774561, -0.0139870122, 0.0052027777, 0.0179642141, -0.0315670967, 0.0514460057, -0.0618314482, 0.0290302932, 0.0610928535, -0.0195864327, -0.0135974772, 0.0164847597, 0.0454420969, 0.0721018314, -0.0411668457, -0.0249797218, -0.0671860203, -0.0516920909, -0.0287533030, 0.0390694588, -0.0558293834, -0.0648025945, 0.0341518894, -0.0025720820, -0.0296465196, 0.0203431025, -0.0117691122, 0.0596436113, -0.0140403695, -0.0452324376, -0.0329113454, 0.0711463094, -0.0599480048, 0.0194531679, 0.0295241326, 0.0580354333, 0.0039560422, 0.0203764290, 0.0617328882, -0.0660969466, 0.0359115675, 0.0093983114, -0.0661158338, -0.0293567143, -0.0106722042, -0.0206530243, 0.0197313800, -0.0642260090, 0.0548669249, 0.0155919567, 0.0554712117, 0.0165916085, 0.0614248812, -0.0261918083, 0.0091384798, -0.0315364711, -0.0624331534, -0.0540790632, 0.0627372265, 0.0357161388, -0.0302561596, 0.0271270797, -0.0708641931, 0.0491136983, -0.0563973114, -0.0188947879, -0.0042907745, -0.0305116251, -0.0307751745, -0.0376773216, -0.0277102515, 0.0609053373, 0.0309842303, -0.0585088953, -0.0429490134, -0.0172652751, 0.0580115765, -0.0126578882, 0.0098798200, -0.0593984649, 0.0461453572, -0.0013146326, -0.0697991550, 0.0530002266, -0.0659048185, 0.0649215579, 0.0240706876, 0.0405789539, -0.0420627482, -0.0099013932, -0.0287043527, 0.0133187175, 0.0326547325, -0.0286350437, 0.0489044338, 0.0191939250, -0.0579953901, -0.0071533471, 0.0402563214, -0.0581746809, -0.0582702793, 0.0411989018, 0.0633849800, 0.0115790814, -0.0151360892, 0.0514141247, -0.0351635069, -0.0714040101, 0.0059754848, 0.0616111159, 0.0339447930, -0.0429820158, 0.0129606202, 0.0636024028, 0.0050581768, -0.0042162836, -0.0055116713, 0.0332884714, -0.0684635788, -0.0396752246, -0.0100113750, 0.0109006539, -0.0055346191, 0.0095039755, -0.0678027868, -0.0046805143, -0.0098153278, 0.0027550012, -0.0405511670, -0.0353742652, -0.0192160308, -0.0431357548, -0.0175279491, 0.0554498136, -0.0512957759, 0.0589529127, 0.0012888610, 0.0206106603, -0.0627411008, 0.0641615689, 0.0510131121, -0.0582968965, -0.0272007547, 0.0665610135, -0.0441318825, 0.0090535656, 0.0287606195, -0.0706515089, -0.0550763272, 0.0689718574, -0.0515771173, 0.0310521275, 0.0341878012, 0.0375892818, 0.0116325095, -0.0556805134, -0.0433462746, -0.0614335686, -0.0441634059, 0.0264521390, 0.0347100347, -0.0071442798, 0.0700271726, 0.0377501398, -0.0564524941, 0.0703129023, -0.0006923154, -0.0287021510, 0.0414276272, -0.0122444704, 0.0123588741, -0.0527724959, -0.0394973792, 0.0447803214, -0.0471821800, 0.0287473351, -0.0240430422, -0.0529030263, 0.0658309162, -0.0376727283, 0.0274169222, 0.0537815690, 0.0713343918, 0.0212183744, -0.0558042079, 0.0256088227, -0.0564880744, -0.0633241013, -0.0670585036, 0.0620594770, 0.0130961388, -0.0472192392, -0.0498058423, 0.0423906147, -0.0425135046, 0.0125316307, 0.0576294065, 0.0058254451, -0.0222886950, 0.0625366569, 0.0451912656, 0.0104207993, 0.0375012308, -0.0368883424, 0.0057046190, -0.0290949531, 0.0440993980, 0.0247435495, -0.0211023837, -0.0442401096, 0.0663331151, -0.0237047449, 0.0153788179, 0.0552318841, -0.0234775692, 0.0196355209, -0.0365060009, -0.0362597741, 0.0162952691, -0.0066915452, -0.0265068039, -0.0655439496, 0.0194400623, 0.0532177240, 0.0647489578, -0.0430993438, -0.0188887492, -0.0350057594, -0.0016752854, -0.0300170593, -0.0526759848, 0.0644826591, -0.0235708617, 0.0713030547, 0.0330306515, -0.0051218197, -0.0575985759, 0.0538812578, -0.0366541967, 0.0608331710, -0.0493711047, 0.0133303702, -0.0393850915, 0.0039095283, -0.0130903386, 0.0088122785, 0.0011179671, -0.0157846324, 0.0123457164, 0.0450025424, 0.0449058786, -0.0171660632, -0.0711656362, -0.0146030374, 0.0346483439, -0.0571381338, 0.0638760030, -0.0559354424, -0.0429992042, -0.0626451746, -0.0032792613, 0.0482755750, 0.0281103551, 0.0660058707, 0.0104954988, -0.0442200676, -0.0293387696, 0.0190571323, 0.0631841570, 0.0196893960, 0.0066027269, -0.0424753204, 0.0664049536, -0.0471834540, 0.0347941518, 0.0123599619, 0.0623916537, -0.0295077190, 0.0493419245, 0.0276097134, 0.0109942928, -0.0437465310, -0.0571445860, 0.0341678560, -0.0226901732, 0.0112803653, -0.0543972254, -0.0591971874, -0.0621186905, 0.0155797079, 0.0095825568, -0.0668369532, 0.0496227145, -0.0519328788, -0.0155747309, -0.0177295730, 0.0215774328, 0.0691226721, 0.0208176002, -0.0224983394, -0.0370286256, 0.0428708941, 0.0432092398, -0.0574532151, 0.0159165710, -0.0704275295, -0.0652918220, 0.0278347060, 0.0563975871, 0.0251967087, 0.0608828962, -0.0018941462, -0.0078134537, -0.0710032359, 0.0148496926, 0.0516962186, 0.0571936965, -0.0083878711, 0.0239896849, -0.0187888853, -0.0143418945, -0.0106060281, 0.0329758674, 0.0391933769, -0.0583240837, -0.0158741586, 0.0596011877, -0.0063143075, -0.0531086922, -0.0505544394, 0.0037549660, -0.0641126186, 0.0580278188, 0.0321655720, 0.0665394962, 0.0148845688, -0.0406009443, -0.0164884776, -0.0109554715, 0.0303767920, 0.0349800140, 0.0392345861, -0.0564457327, 0.0387280658, -0.0356745347, 0.0405191481, 0.0186464861, 0.0158916041, -0.0300581157, 0.0410326719, -0.0290747695, 0.0009836853, -0.0339003690, 0.0241741017, -0.0551548898, -0.0481816083, -0.0246727243, 0.0116903409, 0.0012562200, 0.0545172989, -0.0525266863, 0.0544419736, -0.0153753273, 0.0092977583, 0.0266331881, -0.0338741280, 0.0306477100, -0.0361275263, -0.0418912023, 0.0381651223, 0.0454738960, -0.0437536687, 0.0506858453, -0.0420737788, 0.0611574352, 0.0094983876, 0.0331727117, 0.0171892270, -0.0507513508, -0.0532874316, 0.0392508283, 0.0662517697, 0.0326471627, 0.0538975894, -0.0659227297, 0.0320279002, 0.0129576251, -0.0185815133, -0.0650222152, 0.0489789173, -0.0716363639, -0.0423285663, 0.0035024807, -0.0022208765, -0.0067897737, 0.0055802539, 0.0072017983, -0.0512458757, -0.0153732784, 0.0445379168, -0.0253306292, -0.0664425194, -0.0428969301, -0.0488296039, -0.0585846901, -0.0565573126, 0.0072378144, -0.0711933672, -0.0656243190, 0.0290264040, 0.0150360540, -0.0201441422, 0.0383572876, -0.0706248507, 0.0668518692, 0.0323772430, 0.0709123909, -0.0320113674, 0.0248867720, 0.0686478168, 0.0227052644, -0.0463068709, 0.0367554426, 0.0677169263, -0.0042471364, 0.0714650601, 0.0218776688, 0.0056314766, 0.0248045921, -0.0254737511, 0.0096379146, 0.0592271239, -0.0342679471, 0.0063329116, -0.0093544051, 0.0073936507, -0.0320822224, 0.0087590963, -0.0173941851, 0.0314068347, 0.0598640144, -0.0022944883, 0.0562346727, -0.0281232223, 0.0350287482, -0.0401194952, -0.0347583629, 0.0100019127, -0.0256241001, 0.0253316984, -0.0521410741, 0.0287698880, 0.0652447939, -0.0506707542, 0.0156085119, 0.0359674543, -0.0428429693, -0.0175977908, 0.0182535425, 0.0106155947, 0.0402654931, 0.0271831006, 0.0212197006, 0.0167951956, -0.0383441746, 0.0046133026, -0.0101614669, -0.0365166515, 0.0022613481, 0.0624946952, -0.0622764751, -0.0194448084, 0.0296037123, -0.0118992254, -0.0406083949, 0.0138336495, 0.0373300835, 0.0663182735, -0.0503023490, 0.0316787139, -0.0686959699, -0.0213428773, 0.0673107654, 0.0368997157, 0.0393489599, 0.0234241411, 0.0556028783, 0.0376682058, 0.0316365585, -0.0661295354, 0.0326963663, -0.0497848317, -0.0314931087, 0.0083064139, -0.0482757315, -0.0508644655, -0.0017310455, -0.0517212562, -0.0431728661, -0.0024194941, 0.0101267248, 0.0659501851, 0.0152468160, 0.0159613565, -0.0035691708, -0.0212880932, -0.0231792293, 0.0582349300, 0.0587228388, -0.0424128808, -0.0339520909, 0.0649667233, -0.0499860421, 0.0342768058, 0.0518834293, -0.0278343111, 0.0065946579, 0.0277141258, 0.0367565900, -0.0543662719, 0.0004362687, 0.0631899536, -0.0205221511, -0.0474982262, 0.0608465374, 0.0152574256, -0.0247534588, -0.0681049451, 0.0138198212, -0.0337938257, 0.0182768703, 0.0246325135, 0.0409645662, 0.0619185865, -0.0519219860, -0.0618522316, -0.0613808110, 0.0376579463, -0.0178329833, -0.0411711112, 0.0589711964, 0.0248730406, -0.0225047395, 0.0601435602, 0.0345637053, -0.0534509271, -0.0523822531, 0.0614831150, -0.0544407405, -0.0523493402, 0.0407878384, 0.0438600704, -0.0555983335, 0.0449865237, -0.0308415554, 0.0135549456, -0.0655250177, 0.0674510300, 0.0664890110, -0.0261141881, 0.0297014415, -0.0715959966, -0.0472669899, -0.0589008927, -0.0238211825, 0.0503847674, -0.0581970662, 0.0457252264, -0.0069621503, 0.0720638782, 0.0151797757, -0.0091762468, -0.0152679756, 0.0025549233, -0.0698139668, 0.0605313331, -0.0134543888, 0.0658405125, 0.0716232061, 0.0101145804, -0.0505768582, -0.0368435197, 0.0216590092, 0.0043823943, -0.0111506283, 0.0667734742, -0.0008259714, 0.0375775099, 0.0002232194, -0.0363988727, -0.0250026062, -0.0096250251, 0.0293213576, -0.0129770525, -0.0647202954, 0.0234938115, 0.0245844424, 0.0546313077, 0.0139780343, 0.0281807780, 0.0386037305, -0.0202953368, 0.0469831675, -0.0154910386, -0.0336407237, -0.0528859384, 0.0423838347, -0.0429953672, 0.0715046674, 0.0135199949, 0.0412035808, -0.0135678649, 0.0329349861, -0.0497224070, 0.0623674840, -0.0483031049, 0.0201236680, -0.0092942864, -0.0416614264, 0.0584214032, -0.0324653238, -0.0107039325, 0.0592830181, 0.0489916876, 0.0076198429, 0.0184016898, 0.0534208119, 0.0169443563, -0.0486817323, -0.0099454597, 0.0038696453, -0.0371242426, -0.0485255495, -0.0200645477, 0.0237378851, 0.0690047592, 0.0001025870, 0.0267011672, -0.0667991042, -0.0461147986, 0.0563173443, -0.0405699722, 0.0638335347, -0.0189725608, -0.0420899838, 0.0147838742, -0.0184004307, -0.0624964908, -0.0275622606, -0.0059517920, 0.0099796802, -0.0478566177, -0.0086478367, 0.0688263923, 0.0170117244, -0.0502012260, -0.0584497228, -0.0215125494, -0.0039661229, 0.0478016436, -0.0663770661, 0.0207697824, -0.0663587600, 0.0224621221, 0.0704173893, -0.0474412888, -0.0685007572, -0.0419373289, -0.0270574093, 0.0535710752, 0.0358707085, -0.0275355056, -0.0637162551, 0.0096662194, 0.0215373412, -0.0677049831, -0.0139895938, -0.0417135432, 0.0366865098, 0.0507099703, -0.0247694440, 0.0273258463, 0.0147922412, 0.0329185352, -0.0646564439, -0.0477993563, 0.0495398119, -0.0679808185, 0.0556421280, 0.0029351190, -0.0182544366, -0.0658464506, -0.0600910038, -0.0135558397, 0.0658714920, -0.0030359477, 0.0521176383, 0.0506324172, 0.0366298184, -0.0286743082, -0.0410445593, 0.0429950431, 0.0190234408, 0.0158140734, -0.0328054577, 0.0298650116, -0.0380505472, -0.0352964438, -0.0080232322, -0.0557787940, -0.0388759524, -0.0482708775, -0.0596623793, 0.0502439514, -0.0574628860, -0.0212137103, 0.0240385681, 0.0717029572, -0.0696946457, -0.0461734012, -0.0636875853, -0.0582216196, -0.0677576661, -0.0269495435, 0.0334595069, -0.0080294088, -0.0645881519, 0.0101604015, 0.0219023228, 0.0057956055, 0.0472819433, -0.0532993041, -0.0116868317, 0.0294829085, -0.0398990102, 0.0081194341, -0.0458456203, -0.0090767294, 0.0570756793, 0.0189872757, 0.0370433852, 0.0180112571, -0.0611666963, -0.0154376663, 0.0100872368, -0.0379086286, 0.0100456998, -0.0063501894, -0.0213591903, 0.0371580720, -0.0024940148, 0.0310101286, -0.0565300956, 0.0603834838, 0.0309444815, -0.0274997838, 0.0556461960, 0.0314717069, -0.0578870922, -0.0148101151, -0.0562885329, 0.0110837668, 0.0653216541, 0.0384563953, 0.0343613476, 0.0587651283, 0.0274982527, -0.0567923039, 0.0089563131, 0.0294209272, 0.0121985674, -0.0572738238, -0.0718727782, -0.0673573092, 0.0493640527, -0.0098510310, 0.0521361157, -0.0272548869, 0.0499885008, 0.0518043265, -0.0373993181, -0.0265578404, 0.0407830775, 0.0685912967, 0.0466480553, 0.0617898256, 0.0239820629, -0.0712836012, -0.0141283982, 0.0480752215, -0.0301944762, -0.0673532486, -0.0005656779, 0.0157255828, 0.0109618083, 0.0236143917, 0.0476207882, -0.0188481770, -0.0370497368, -0.0243336745, -0.0711215138, 0.0486346036, 0.0341253057, 0.0268996060, 0.0425289720, 0.0695842952, 0.0210206509, -0.0260613672, 0.0518929958, -0.0116737038, -0.0316549204, 0.0715370029, -0.0261885710, 0.0583909303, -0.0243560411, -0.0023032948, -0.0502855405, -0.0124435499, 0.0294746161, -0.0120059922, 0.0521606207, 0.0235247463, -0.0699347034, -0.0198690295, -0.0314274505, 0.0069122016, 0.0111512095, -0.0418489762, 0.0232865438, -0.0494889840, 0.0443565622, -0.0181461908, -0.0012925267, 0.0515885577, 0.0005307272, 0.0191451088, 0.0350030735, 0.0341339111, -0.0287919156, -0.0676473901, -0.0123711117, 0.0198612362, 0.0457110703, -0.0008127242, 0.0485004932, 0.0036755726, -0.0101890676, 0.0007488057, -0.0695904568, -0.0036432967, 0.0064436719, 0.0334379151, 0.0104030818, 0.0308833346, -0.0286282636, 0.0201148242, -0.0023536086, -0.0275836475, -0.0124415718, 0.0087253377, -0.0456849113, -0.0137718469, -0.0041965172, 0.0259046331, -0.0382655226, 0.0024730191, 0.0370852724, -0.0511003807, 0.0543699265, 0.0513138622, -0.0690019503, -0.0462878570, -0.0096243843, 0.0161079764, -0.0030177236, 0.0491448939, -0.0380070508, 0.0074493140, -0.0380134657, -0.0629028529, -0.0506556630, -0.0298242457, -0.0093711093, -0.0259819925, -0.0177137591, 0.0697754025, 0.0018592179, -0.0353270359, -0.0323846415, -0.0559468642, -0.0533110052, -0.0222283863, -0.0030817688, 0.0054712147, 0.0355340764, 0.0260456577, -0.0326542817, 0.0634112358, 0.0584019274, 0.0626869947, 0.0450506359, -0.0707272291, 0.0423235297, -0.0665116161, -0.0050853789, -0.0116155446, -0.0610047504, -0.0396786667, -0.0090763271, 0.0021405444, -0.0142858550, -0.0348991454, 0.0496262237, -0.0711560175, 0.0146422312, 0.0480702370, -0.0471016690, -0.0565542877, -0.0417000018, -0.0288055614, 0.0238952413, -0.0110960491, 0.0584414750, 0.0383335724, 0.0084758475, -0.0055748671, 0.0607086420, -0.0656496957, -0.0644145533, 0.0135430917, 0.0321778581, -0.0553355590, -0.0568779707, -0.0721371919, -0.0085038245, -0.0477071442, -0.0056052729, -0.0282630958, -0.0443076119, 0.0177123845, 0.0263840854, -0.0335993618, 0.0516842306, 0.0269387215, 0.0340409651, -0.0646285489, -0.0300267488, -0.0103534907, -0.0326333083, -0.0257856324, 0.0091589689, 0.0279968977, -0.0488515943, -0.0070950985, -0.0470075533, 0.0618216693, 0.0148841217, -0.0363212898, -0.0626732856, -0.0230558775, 0.0057469979, -0.0476570576, -0.0142769068, -0.0220148042, -0.0429701284, 0.0259989947, 0.0331412926, 0.0130989254, -0.0441183075, 0.0551062077, 0.0034616664, 0.0051999390, 0.0151220635, 0.0437161401, 0.0444420427, -0.0568146706, -0.0437368937, -0.0468484610, 0.0280616954, -0.0297129713, -0.0421161205, -0.0198240206, -0.0259368606, -0.0014388487, -0.0512106195, -0.0095592290, -0.0220586807, 0.0533554256, -0.0271499977, -0.0283550434, 0.0550804436, 0.0492941737, -0.0170064755, -0.0079223514, 0.0624007285, 0.0046524704, 0.0410433188, 0.0533546209, 0.0660716891, -0.0086933151, -0.0278557688, -0.0546616539, -0.0182486884, -0.0496101677, -0.0424471386, -0.0716927499, -0.0244483873, -0.0511058010, -0.0682876781, 0.0561764389, 0.0026057512, 0.0667350739, -0.0332937241, 0.0625345409, -0.0277242586, -0.0258631296, -0.0613996536, 0.0596832335, 0.0362440348, 0.0686014146, -0.0709808916, -0.0221066512, 0.0103057772, 0.0209536552, 0.0402807146, -0.0250694007, 0.0719494820, -0.0060196891, 0.0684144199, -0.0021530315, -0.0283892676, -0.0030720457, -0.0153199583, -0.0070527568, 0.0479182154, -0.0045670718, 0.0170715153, -0.0091382563, -0.0271049663, -0.0519245826, 0.0400449708, 0.0568052977, 0.0158156380, -0.0309635848, -0.0025658160, -0.0063184053, 0.0060495585, 0.0655680895, 0.0187361836, 0.0220008492, -0.0179390274, -0.0463269874, -0.0584419817, -0.0273691379, 0.0553718954, 0.0215557590, -0.0102665313, -0.0329711884, 0.0360686108, 0.0646228492, -0.0701157674, -0.0512155779, 0.0577871352, -0.0006422251, 0.0552373230, -0.0318952911, 0.0471598282, 0.0461665913, 0.0257885754, 0.0623242855, -0.0452676266, -0.0671575591, -0.0227096491, -0.0476571247, -0.0721102282, 0.0557612777, 0.0007779002, 0.0204301849, 0.0543081760, -0.0377597585, -0.0720398054, -0.0085530505, 0.0444059297, 0.0645943731, -0.0237079635, 0.0505376086, 0.0463486686, -0.0505108014, 0.0197704360, 0.0630936772, -0.0504424088, -0.0212049857, -0.0471198037, -0.0381324664, -0.0317472816, 0.0102895871, 0.0158861130, 0.0681652129, -0.0385312065, 0.0712909997, 0.0048684105, -0.0235364661, 0.0244956389, -0.0394015051, -0.0438273139, 0.0218995064, 0.0335664302, -0.0216238908, -0.0088300407, -0.0426443927, -0.0282030962, 0.0074008107, 0.0402958766, -0.0507128090, -0.0197052769, -0.0213727839, -0.0425143465, 0.0509841666, -0.0399714150, 0.0170947611, -0.0513392910, 0.0657037646, -0.0304247998, 0.0075165927, -0.0223770663, -0.0712006465, -0.0577872097, -0.0014230907, 0.0070519149, -0.0193268396, 0.0028141215, 0.0184651464, 0.0148170814, -0.0090269670, 0.0328372195, -0.0573789552, 0.0209840238, -0.0074778050, -0.0473756306, -0.0658456460, -0.0236771815, -0.0190193988, 0.0000433251, 0.0447967574, -0.0667909309, 0.0036382005, 0.0309041515, 0.0617072582, 0.0203273743, 0.0355433226, 0.0243303329, 0.0666168332, 0.0312387124, 0.0623106658, 0.0352450088, 0.0210465118, 0.0061114281, -0.0418744572, -0.0510531664, 0.0677491277, -0.0321171507, -0.0058459193, -0.0545038730, -0.0067541748, -0.0590284765, -0.0664230064, 0.0277950466, -0.0221769400, -0.0273764841, -0.0354804657, -0.0278740413, 0.0094099268, -0.0280480832, -0.0010521337, 0.0477491990, -0.0079241022, 0.0291274413, -0.0167472437, -0.0343948454, 0.0101437941, 0.0469156504, 0.0472454652, 0.0487477854, -0.0551357754, -0.0576999225, -0.0307316594, -0.0215568915, 0.0345635712, -0.0521494895, -0.0339304283, 0.0440733284, 0.0102009401, 0.0370309502, -0.0021945909, -0.0366236381, 0.0218615830, 0.0310412347, -0.0695478171, 0.0328617245, 0.0396184921, -0.0281062052, -0.0703674629, 0.0340408385, 0.0027210861, 0.0457934886, -0.0572983064, 0.0122258738, -0.0398707055, 0.0009928793, -0.0539114550, -0.0241776295, -0.0381627157, 0.0232231542, 0.0224807560, -0.0618855804, -0.0118850656, -0.0577866063, -0.0227835327, 0.0123800561, -0.0057090595, -0.0219809748, 0.0644150674, 0.0687584728, -0.0059427395, -0.0182471909, -0.0678835660, -0.0381020270, -0.0060188398, -0.0501832142, 0.0304600224, 0.0523875728, 0.0596503913, 0.0151256770, -0.0059451461, -0.0634974912, -0.0715251416, 0.0416617543, 0.0595930815, -0.0159694292, 0.0182854757, 0.0366236046, -0.0381848253, -0.0449188873, 0.0458929390, -0.0663663596, 0.0483878776, 0.0005346909, -0.0581829399, -0.0410656035, -0.0134714581, 0.0497008115, -0.0444004908, -0.0581732169, 0.0392817631, -0.0115217343, -0.0056849048, 0.0559355468, -0.0522852316, -0.0009611472, 0.0320227221, -0.0312724225, -0.0624481440, -0.0461436696, -0.0417518467, -0.0403845236, 0.0501449779, 0.0001343116, 0.0325541422, 0.0169150904, 0.0089395940, 0.0044851378, 0.0407796502, -0.0657381564, -0.0477162451, 0.0631084740, -0.0604142621, 0.0454107448, -0.0636247993, -0.0365859382, 0.0627374500, -0.0174123049, 0.0272230729, -0.0315575153, -0.0141588189, -0.0248553008, -0.0463511124, 0.0411587730, 0.0625899881, -0.0442671254, 0.0343817845, -0.0341135040, -0.0250108652, -0.0300163552, 0.0554467440, -0.0584754460, 0.0120423287, 0.0013695210, -0.0110071078, -0.0465197861, -0.0096436441, 0.0530432761, -0.0240332149, -0.0333967730, -0.0199558735, 0.0214996636, 0.0207034051, 0.0154071748, 0.0621415526, 0.0629563034, 0.0496914163, 0.0206213146, 0.0529600829, -0.0710574910, 0.0238786489, -0.0513837710, 0.0476903170, -0.0378969461, 0.0427940860, 0.0309504718, -0.0258428790, -0.0295647904, 0.0355265811, -0.0270474963, 0.0278578848, -0.0565188080, 0.0168779269, -0.0635223687, 0.0252412260, 0.0663770288, 0.0068499297, -0.0447609313, -0.0371945649, 0.0099459440, 0.0505543202, 0.0060220435, -0.0367843471, -0.0064667240, -0.0056527779, -0.0535710789, -0.0362236239, -0.0186216384, 0.0311866477, -0.0148660019, -0.0555088259, 0.0011394247, -0.0327374563, 0.0394207388, -0.0546980277, 0.0081960708, -0.0281602331, -0.0235172473, -0.0241643451, 0.0357894078, 0.0684092194, 0.0438623652, -0.0448895842, -0.0577519536, 0.0376681834, 0.0714675635, 0.0161576644, 0.0336004943, -0.0361256339, -0.0612610057, -0.0506333113, 0.0487323031, 0.0302697569, -0.0063375086, -0.0551634282, -0.0476419181, -0.0555535108, 0.0366555080, -0.0551660247, -0.0315446071, 0.0587528497, -0.0633573979, 0.0620835274, 0.0323811844, 0.0152819157, 0.0010852888, -0.0294317864, -0.0063185915, -0.0567473397, -0.0499955788, -0.0345610939, -0.0430281609, 0.0684014559, -0.0037679896, 0.0336267874, -0.0342892855, -0.0179836079, -0.0268657990, -0.0378277414, 0.0052317530, 0.0190585405, -0.0529709384, 0.0636993498, -0.0631050989, -0.0212788880, -0.0705605745, -0.0275862142, -0.0184405595, -0.0711459517, -0.0518725850, 0.0076626390, 0.0182551071, 0.0552420914, 0.0426686034, -0.0531694293, 0.0457063392, 0.0702430606, 0.0221896693, 0.0622078031, 0.0242524967, 0.0563467890, -0.0601396821, 0.0009191483, -0.0196290016, 0.0222591162, 0.0229545981, 0.0287124366, -0.0502885319, 0.0122586861, -0.0561345518, -0.0641919598, 0.0547980517, -0.0646143556, -0.0640827119, -0.0477089696, 0.0132497028, 0.0200507119, -0.0314129442, -0.0533797443, 0.0220109299, -0.0691221356, 0.0539901704, 0.0315208435, -0.0685171261, -0.0687143058, 0.0493706912, -0.0653915852, -0.0542408191, 0.0707945079, 0.0289756134, -0.0638295412, 0.0250616446, 0.0447170585, 0.0697763562, 0.0193593130, 0.0369709656, 0.0509965941, -0.0626367033, 0.0036012977, 0.0070944503, 0.0610994250, 0.0322753638, -0.0627079755, -0.0342178419, -0.0476101190, 0.0336073115, -0.0704974383, -0.0578500107, -0.0518833399, -0.0192938223, -0.0399026573, -0.0085784271, 0.0720741302, -0.0403462723, 0.0558916181, 0.0710602105, -0.0251601823, 0.0441258252, 0.0245039314, -0.0588574819, 0.0297017172, 0.0200995430, -0.0684778392, -0.0169314705, -0.0110031702, 0.0587378591, -0.0049525797, 0.0620784611, -0.0540652275, -0.0099816956, 0.0603851378, -0.0396530963, -0.0657184198, 0.0050388500, -0.0148865096, 0.0381662101, 0.0610674322, 0.0493748710, 0.0356737301, -0.0046003461, -0.0348789655, 0.0285786614, 0.0282770693, 0.0252769440, -0.0428169891, 0.0603591502, 0.0116832703, -0.0565486252, 0.0248674154, -0.0188974217, -0.0265899971, -0.0399827026, -0.0180428326, -0.0445691124, 0.0492603853, 0.0368106887, -0.0639195591, -0.0585798398, 0.0683873892, -0.0283831097, 0.0067217425, 0.0670571923, 0.0492972881, -0.0594779775, 0.0166025534, 0.0117720366, -0.0341620073, -0.0569380075, -0.0549036413, -0.0020816475, 0.0159057304, 0.0128328949, -0.0066905767, -0.0497011580, -0.0242372304, 0.0032781586, 0.0213055089, 0.0345273688, 0.0693342835, -0.0199129581, 0.0500214174, -0.0584070012, 0.0036986172, -0.0532360189, 0.0370371267, -0.0643185973, 0.0007022098, 0.0313624963, -0.0594453886, -0.0116443634, -0.0487164184, -0.0068446770, -0.0071586296, -0.0078414977, -0.0253779441, 0.0200724602, -0.0208696499, -0.0404092669, 0.0363371000, -0.0083152950, -0.0191030875, 0.0709324926, -0.0067329258, -0.0609381460, 0.0646639615, 0.0664753169, -0.0669749677, 0.0172992721, 0.0676595569, 0.0089384541, -0.0023178011, 0.0623076409, 0.0378128886, 0.0633133948, -0.0491218045, 0.0263012946, -0.0277492255, 0.0684883744, -0.0365133807, -0.0357287005, -0.0056850761, -0.0241542980, 0.0113981217, -0.0291406699, 0.0284917876, 0.0479953885, 0.0210713595, 0.0557653010, 0.0238210112, -0.0276723653, 0.0185642391, 0.0103806630, 0.0647281259, -0.0249010213, 0.0583153814, -0.0571195856, -0.0716763213, 0.0357784778, -0.0014668405, 0.0027726218, 0.0191915333, -0.0570288375, 0.0015202388, -0.0422286317, -0.0209140442, -0.0321424790, 0.0469323248, -0.0431670360, -0.0013691783, -0.0410648286, 0.0652982742, -0.0297185145, 0.0561416298, -0.0447748154, 0.0554841906, -0.0601035655, 0.0086842477, -0.0183717161, 0.0172708705, -0.0119624771, -0.0365507528, -0.0560589321, 0.0052244067, -0.0397586226, -0.0394800529, 0.0441061407, 0.0315863863, -0.0529906377, -0.0642089248, 0.0418876037, -0.0642111599, 0.0497665778, -0.0022369474, 0.0392936021, 0.0304912850, 0.0485928431, 0.0204332769, 0.0071803778, 0.0232352540, 0.0470030755, -0.0340869874, -0.0229737833, 0.0142249465, 0.0303330198, 0.0348792374, 0.0256519765, 0.0602820814, 0.0148846880, 0.0242430642, -0.0468803421, -0.0081449673, 0.0213149041, 0.0248858258, -0.0011122525, -0.0062159970, -0.0314416438, -0.0142838769, 0.0096373111, -0.0027682483, -0.0048867688, -0.0550795794, 0.0375754088, 0.0552452803, 0.0404347479, 0.0685365349, -0.0179432593, -0.0670188591, -0.0568373315, 0.0543793887, 0.0116607770, -0.0460752249, 0.0656399131, 0.0277536511, -0.0412512608, -0.0202497728, 0.0322332457, 0.0530488491, 0.0027825311, -0.0663502067, 0.0500183403, 0.0399517864, 0.0148240551, -0.0062011629, 0.0611430705, 0.0196518674, -0.0136987194, -0.0271757729, 0.0436466783, 0.0415469855, 0.0245568752, 0.0005941540, -0.0420615971, 0.0182559341, 0.0111332461, 0.0231956989, 0.0426459089, 0.0118203014, 0.0379773676, -0.0548897609, -0.0084339976, -0.0537698977, -0.0368924886, 0.0288026482, -0.0055781007, -0.0663913637, 0.0370175764, -0.0250125863, -0.0392377004, 0.0126426294, 0.0031794831, 0.0475277156, 0.0401257575, 0.0086037591, -0.0137232579, 0.0407492444, -0.0461106524, 0.0533186942, 0.0604033023, -0.0002865717, -0.0210488029, 0.0457042679, -0.0070790648, 0.0375691801, 0.0710417479, -0.0342565738, 0.0188278928, -0.0467906296, 0.0422061831, -0.0312450789, -0.0720240623, -0.0500711985, 0.0129002556, 0.0057053789, 0.0028208494, -0.0517950729, -0.0297460780, 0.0366132483, -0.0273798741, -0.0179474242, -0.0543361753, 0.0387705639, -0.0364136361, 0.0476871878, 0.0049649850, 0.0592476130, 0.0379538611, 0.0414432287, 0.0659675002, 0.0015373379, -0.0168337226, -0.0268181711, 0.0458404049, -0.0675347447, 0.0653675944, -0.0689435825, 0.0214722008, 0.0124268606, -0.0053657368, -0.0157785937, -0.0192836188, 0.0173416883, 0.0490512401, 0.0157055855, 0.0046559796, -0.0124558024, -0.0469109714, 0.0433553904, -0.0473216698, -0.0655237287, -0.0702214688, -0.0455046073, 0.0517355055, 0.0581972599, -0.0554412380, -0.0705084354, -0.0527395308, 0.0469722077, 0.0216583088, 0.0233920217, 0.0267706960, 0.0400990024, -0.0557457581, -0.0553474650, 0.0565098971, -0.0048588887, 0.0037792251, 0.0054923818, -0.0351289883, -0.0429802425, -0.0235798955, -0.0121551715, 0.0406120420, 0.0564679503, 0.0011817366, 0.0039978325, 0.0430001691, 0.0174844861, -0.0010849684, -0.0201690607, -0.0233625472, 0.0433632061, -0.0254367068, -0.0458172299, -0.0191071853, 0.0630133152, 0.0250439048, -0.0718116611, -0.0650542900, 0.0440181345, -0.0027108341, -0.0582763329, -0.0091063231, 0.0070193112, 0.0169058666, 0.0519296601, 0.0587281436, -0.0422797352, -0.0305317193, 0.0160301179, 0.0625711679, 0.0176270902, 0.0541643202, 0.0292470381, 0.0640290231, -0.0311974362, -0.0484411195, 0.0576174855, -0.0521093979, -0.0398433656, 0.0557016283, -0.0163061060, -0.0140455328, 0.0529373437, -0.0602429360, -0.0468941107, -0.0578803979, 0.0223813504, 0.0505030602, -0.0491651595, 0.0145839751, 0.0136888772, 0.0437615141, 0.0696302801, -0.0567372926, -0.0192820169, -0.0327537879, 0.0035546497, -0.0099437907, -0.0350339748, 0.0374542922, -0.0610635951, 0.0119340196, -0.0047669932, -0.0537392721, 0.0707085282, 0.0393126681, 0.0142368674, 0.0235314593, -0.0418384112, 0.0295777321, 0.0686941296, -0.0401531309, -0.0639008284, 0.0329791531, -0.0204613954, -0.0673308671, -0.0282402262, 0.0048625544, 0.0135175213, 0.0221223235, 0.0596714914, 0.0063605234, -0.0537022091, -0.0604301430, -0.0218697377, 0.0454734266, 0.0612843037, -0.0411258079, -0.0449657068, 0.0291183889, 0.0017876774, -0.0282701142, 0.0217902288, -0.0048623830, -0.0588463135, 0.0542185605, -0.0573831685, 0.0488156304, -0.0180723928, -0.0421705805, -0.0622018166, -0.0394474454, 0.0000531301, 0.0374491811, 0.0086697116, 0.0091651976, 0.0106628984, -0.0293872915, 0.0675821304, -0.0564302430, -0.0027158707, -0.0283032358, -0.0223375447, 0.0359167829, 0.0655460656, 0.0141860247, 0.0658638477, -0.0647896528, -0.0474989489, 0.0501514524, -0.0262367837, -0.0716222227, 0.0337852091, -0.0465638861, -0.0365226567, 0.0327812135, -0.0497338325, 0.0138203725, -0.0714016333, -0.0679705814, 0.0264097601, -0.0620999038, -0.0608703867, 0.0203187540, -0.0390821025, 0.0237561241, 0.0515747741, 0.0113802105, -0.0044673234, 0.0406123325, 0.0592260063, -0.0214442573, -0.0706045330, 0.0366381928, 0.0214892179, -0.0066523105, -0.0148785971, 0.0059306771, 0.0707837343, 0.0510645211, 0.0170148015, 0.0121262148, 0.0405408069, -0.0461845174, 0.0007097423, -0.0215245262, 0.0148117319, 0.0658451915, -0.0412658527, 0.0397816822, 0.0366202295, 0.0534004420, -0.0173778385, 0.0456469208, -0.0420810059, 0.0239362270, 0.0612031370, -0.0192842707, -0.0336334109, 0.0622350574, -0.0445949957, -0.0074748844, 0.0558308959, 0.0635006428, 0.0308656469, -0.0611882918, 0.0394000262, -0.0485170670, -0.0575944297, -0.0350295901, -0.0520179458, -0.0672446415, 0.0125531554, -0.0175537392, -0.0432741977, 0.0506213531, 0.0666785091, -0.0577878132, 0.0206557438, 0.0521095842, 0.0680959523, 0.0613287687, -0.0161216371, 0.0301695466, 0.0692953616, 0.0092213973, -0.0417543575, -0.0031791553, 0.0095708445, 0.0395135507, -0.0206790902, -0.0079544038, 0.0445306227, 0.0671091378, -0.0578648448, 0.0207837895, -0.0578310341, 0.0127785057, -0.0242084265, 0.0505866334, -0.0202151202, -0.0375755653, -0.0372776017, 0.0675688535, 0.0446349606, 0.0247134492, -0.0141570456, 0.0022100359, 0.0466725230, -0.0428034477, 0.0552359819, 0.0232048109, -0.0491358079, -0.0297610797, 0.0690460950, 0.0194311962, 0.0604882091, -0.0259565450, 0.0381247774, 0.0257100090, -0.0174514130, -0.0598372445, 0.0679179877, 0.0528326333, -0.0390287116, 0.0096224099, -0.0520155877, 0.0705786347, 0.0056826472, 0.0354018509, 0.0582685024, -0.0662877262, 0.0649505705, 0.0541494936, -0.0025150552, 0.0456451997, -0.0477920771, 0.0263752416, -0.0429548472, 0.0611110181, -0.0020112693, 0.0006820634, -0.0683206618, 0.0631822497, -0.0570826940, -0.0203074850, 0.0431130752, 0.0440887809, 0.0712801218, -0.0704733506, 0.0234053358, 0.0241805390, 0.0616403669, -0.0028675646, 0.0713889599, -0.0568326488, 0.0046799257, 0.0614643544, 0.0521105006, 0.0240656510, -0.0640323535, 0.0302332044, 0.0427078009, 0.0679567605, -0.0016200319, 0.0718379617, 0.0519481748, 0.0511371344, 0.0703545064, -0.0435119718, -0.0625023097, 0.0602409393, 0.0612876564, -0.0047612116, -0.0680593103, -0.0532257296, -0.0028267875, 0.0454279706, -0.0386865102, 0.0314175561, 0.0433517992, -0.0404675789, 0.0436878353, 0.0445556939, -0.0428273305, -0.0429549515, -0.0521832295, -0.0511268787, -0.0042315274, 0.0604059398, -0.0443939865, 0.0241796598, -0.0614038333, -0.0175019503, -0.0429657213, -0.0462368429, 0.0462675020, -0.0152907073, -0.0620591231, 0.0177015066, 0.0565380901, 0.0179857910, 0.0262964368, 0.0040533394, 0.0580873340, -0.0455215052, -0.0394448154, -0.0035248995, -0.0559555367, -0.0048195422, -0.0093100443, -0.0711754411, 0.0078552812, -0.0080532059, -0.0034640580, -0.0629979223, 0.0227513760, -0.0505592376, 0.0039256364, 0.0199292675, 0.0119527057, 0.0532425791, 0.0095175356, 0.0441893041, 0.0000257418, 0.0081003681, 0.0000761524, 0.0491292328, -0.0417398699, -0.0515763760, 0.0109223351, -0.0240071490, 0.0533767790, -0.0387777388, 0.0472830608, 0.0182309300, -0.0165266246, -0.0009077042, -0.0118655711, 0.0355412364, -0.0317476280, -0.0614506193, -0.0547678173, -0.0642303303, -0.0200551338, -0.0612201244, -0.0393212736, -0.0662851781, -0.0155935921, -0.0493707284, -0.0248358920, 0.0655882061, -0.0173081905, -0.0144892670, -0.0625947267, 0.0273257047, 0.0705545247, 0.0454249233, 0.0130855367, -0.0618716404, 0.0233054012, 0.0132246837, -0.0075992495, 0.0019697174, -0.0281682536, -0.0197382644, 0.0367267579, 0.0652023852, -0.0165821835, -0.0001199618, 0.0068445280, -0.0554773398, 0.0408399105, -0.0074598789, -0.0491662100, -0.0637792647, -0.0213718861, 0.0315687284, 0.0385803655, 0.0650753826, 0.0605132729, -0.0294551514, -0.0669178069, 0.0508590937, 0.0341585129, -0.0138362870, 0.0537298620, 0.0339344740, 0.0067690909, -0.0132836848, -0.0479799360, -0.0599678941, 0.0591508299, 0.0365420803, 0.0686092228, 0.0687728673, -0.0157612339, -0.0612087324, -0.0686235651, 0.0440983102, 0.0420523360, 0.0613681525, -0.0482274815, -0.0132986903, -0.0468415245, -0.0567871407, -0.0537825823, -0.0228236429, 0.0261579454, -0.0193150192, 0.0508670956, 0.0154330581, 0.0180245936, 0.0210571140, -0.0017963275, 0.0202265084, 0.0580163449, 0.0308002084, 0.0318366662, -0.0564155690, 0.0651925951, 0.0356221274, 0.0315604731, -0.0517722368, -0.0190449506, -0.0456445999, 0.0450911596, -0.0521148667, -0.0289679691, -0.0128707513, 0.0098028183, -0.0248168446, 0.0356775820, -0.0347174481, 0.0615034997, -0.0393744223, -0.0325411856, -0.0051838309, 0.0306381732, 0.0262936726, 0.0228600353, 0.0704731345, 0.0448999926, 0.0079210922, 0.0187981203, -0.0440887138, -0.0242481232, -0.0487089343, -0.0475599468, -0.0125781372, 0.0089774802, -0.0161564462, 0.0375447497, 0.0439259261, 0.0377403349, 0.0226817429, 0.0133571029, -0.0624387823, -0.0267248601, -0.0676068515, 0.0549481511, 0.0414792597, -0.0248997100, 0.0013802648, -0.0272432901, 0.0269490257, 0.0179090723, 0.0530901998, -0.0691020861, -0.0127835646, -0.0309826992, 0.0010907650, 0.0416292325, 0.0344547778, 0.0270538628, -0.0256775245, -0.0679065213, 0.0217116475, 0.0635447949, -0.0599874072, 0.0461170897, 0.0499240458, -0.0189681575, 0.0132537782, -0.0508320481, -0.0669496730, -0.0363617055, 0.0390220881, -0.0133164637, -0.0544983298, 0.0035488680, 0.0632812530, 0.0090654567, -0.0231062733, 0.0191179365, -0.0281464346, -0.0518857464, -0.0214003474, -0.0407056473, -0.0479995497, 0.0152988136, -0.0569973662, 0.0583166629, 0.0627010316, 0.0711133927, -0.0300706401, -0.0155052543, 0.0579195917, -0.0182611458, -0.0042443871, 0.0485843271, -0.0393062159, -0.0240614153, 0.0108507350, -0.0281176157, -0.0550591052, -0.0285182483, 0.0042275190, 0.0427301303, 0.0419289470, 0.0514893159, 0.0502411276, -0.0351448879, 0.0179267079, -0.0597432293, 0.0364671797, -0.0519908294, 0.0367682725, 0.0025381446, -0.0589308292, 0.0465121791, -0.0168792345, 0.0372589678, 0.0647536814, -0.0644310936, -0.0606024303, 0.0624645352, 0.0444360226, -0.0031375661, -0.0005940124, 0.0118278340, -0.0488052070, 0.0121678710, 0.0103375763, 0.0609662086, -0.0590941906, -0.0611643046, -0.0649205446, 0.0422349647, 0.0539370626, -0.0124548189, 0.0334389433, 0.0120373443, 0.0648917109, 0.0641435832, -0.0649029911, -0.0491478182, -0.0277611651, -0.0139108598, 0.0470930636, 0.0149687380, -0.0221292451, 0.0274484232, 0.0061447620, 0.0004432872, 0.0090051442, 0.0569731444, -0.0351481736, -0.0131688491, -0.0642110929, -0.0051630512, -0.0404055305, 0.0250553936, -0.0240848847, -0.0186865740, 0.0330396742, 0.0529568940, 0.0309748203, -0.0236066170, 0.0595569313, 0.0697147399, 0.0354443491, 0.0227415189, 0.0334044471, -0.0266682506, -0.0510011017, -0.0137790591, -0.0045857951, 0.0232277364, 0.0557199270, 0.0097831190, -0.0087387040, -0.0122035369, -0.0235150643, 0.0631080568, 0.0490236431, 0.0539536923, -0.0338802189, -0.0121870190, -0.0424883813, 0.0507157519, -0.0466639549, -0.0110784471, -0.0561203957, 0.0391361490, 0.0636080354, -0.0498780236, -0.0576626882, 0.0314831957, -0.0265131555, 0.0183311403, -0.0061679706, -0.0125075243, -0.0477857962, 0.0053410009, 0.0214612409, 0.0567930788, 0.0523930639, -0.0604142770, 0.0472668335, 0.0385358557, 0.0530105084, 0.0505199730, -0.0057254583, -0.0131678693, 0.0070498139, -0.0089006200, 0.0082949698, 0.0249041170, -0.0020229518, 0.0683311224, -0.0050445348, 0.0548963696, 0.0314752012, -0.0326605290, 0.0180267617, -0.0460851490, 0.0292286798, -0.0280995816, -0.0260924585, 0.0390265286, 0.0603612959, 0.0595142245, -0.0652042106, 0.0537905395, 0.0532273948, 0.0233387128, 0.0253076032, 0.0405651703, -0.0124821961, 0.0486325398, -0.0455812104, -0.0660217181, -0.0405986756, 0.0658985376, 0.0510347560, 0.0012414232, 0.0217887834, -0.0076851100, 0.0036911443, 0.0453054979, 0.0237482116, 0.0016785488, -0.0004401878, -0.0152738094, -0.0069402456, -0.0237562284, -0.0651686415, 0.0414497182, 0.0684031248, -0.0212143287, 0.0188201442, -0.0138435811, 0.0225356743, 0.0250120163, -0.0699049756, 0.0508105904, -0.0047910959, 0.0628949255, -0.0011398047, 0.0106836781, -0.0446362533, 0.0033101141, -0.0216836855, -0.0442780182, -0.0142701268, -0.0660801008, -0.0517657697, -0.0594026297, -0.0259090886, 0.0206785947, -0.0169450641, 0.0399765745, -0.0533100069, 0.0597941428, 0.0390194356, 0.0697477609, -0.0311082043, -0.0579239130, -0.0562359840, 0.0046491623, -0.0563656017, -0.0069841892, -0.0446801819, -0.0427090190, -0.0521871671, -0.0418214947, 0.0569462925, -0.0270301700, -0.0171269700, 0.0352831557, -0.0051651299, 0.0686901659, -0.0249196030, 0.0430621803, -0.0160968266, 0.0385594964, -0.0338974595, -0.0161289498, -0.0608111769, 0.0625692010, -0.0440199561, 0.0149336383, -0.0532601401, -0.0690300092, -0.0452108271, 0.0078716427, -0.0326805562, 0.0021852776, -0.0718080178, 0.0196200013, -0.0381979719, -0.0437717885, 0.0499033183, -0.0016856715, -0.0718891770, 0.0259453952, -0.0518667363, -0.0348575599, 0.0223869756, 0.0539056361, 0.0371220410, 0.0050023273, 0.0614911169, -0.0388084538, -0.0468161106, 0.0320835486, -0.0420413949, 0.0615376830, -0.0563130192, 0.0419676453, -0.0145399421, 0.0362737477, -0.0630583689, -0.0067116916, -0.0550732128, 0.0487318188, -0.0065614283, 0.0639259666, 0.0150137842, 0.0096066967, -0.0199825950, 0.0706755668, 0.0431909040, -0.0700981990, 0.0679898709, 0.0595846027, -0.0452644415, -0.0076837316, 0.0572865009, 0.0621893704, -0.0141311511, -0.0207384527, -0.0250225291, -0.0580820926, 0.0572789907, 0.0706071258, -0.0385578759, 0.0078294873, -0.0675763637, 0.0298342779, 0.0162330791, 0.0171482190, -0.0142039508, 0.0253705978, -0.0272042118, 0.0162805542, 0.0350963324, -0.0658238456, 0.0178391263, -0.0212570690, 0.0578551292, 0.0155352280, -0.0513374507, 0.0128062293, -0.0611733198, 0.0336051956, -0.0445562266, -0.0210547410, -0.0420215875, -0.0411761180, -0.0119210780, -0.0349460356, 0.0508651510, 0.0409866795, -0.0207296610, -0.0614457652, -0.0192604773, -0.0295104869, -0.0437034816, -0.0250982568, 0.0238654912, 0.0496179312, -0.0054448694, 0.0523324087, 0.0228167251, -0.0572247319, -0.0635342970, -0.0344498381, 0.0360009074, -0.0039335862, -0.0186906531, 0.0564817041, -0.0695471466, -0.0217318609, -0.0119253434, 0.0099031627, -0.0269499384, 0.0304413214, -0.0378898047, 0.0141126886, -0.0082362965, -0.0367431529, -0.0497292578, 0.0488412008, 0.0337714925, 0.0670275986, 0.0032804310, -0.0143003948, -0.0525599979, -0.0417688452, -0.0649833158, 0.0591012537, 0.0676342249, 0.0119296312, 0.0339309275, -0.0701107457, 0.0018849969, -0.0189123563, 0.0046838671, -0.0506823882, -0.0563850254, -0.0031945556, 0.0075035989, 0.0117159411, 0.0236320868, -0.0711824819, 0.0461779833, -0.0253255703, -0.0211355761, -0.0386616476, -0.0538543463, -0.0449309647, -0.0502709970, -0.0308994390, 0.0047745258, 0.0226677209, 0.0710057318, -0.0214020163, 0.0279593840, -0.0095174164, 0.0580960959, -0.0042928681, 0.0029948056, -0.0671838894, 0.0352222845, 0.0616740286, 0.0333571285, 0.0569019467, -0.0626111180, 0.0256173238, 0.0600915402, 0.0346377268, -0.0586159527, 0.0607838333, 0.0656413883, -0.0021712035, 0.0445609242, 0.0452535003, 0.0209225640, 0.0584755540, -0.0266061015, -0.0322523080, -0.0378933847, 0.0658280700, 0.0002226010, -0.0525242761, -0.0218547694, 0.0227670297, -0.0517276898, 0.0573062599, 0.0458878279, -0.0178077407, -0.0413383767, -0.0618337877, 0.0384921506, 0.0241334587, 0.0620336980, 0.0368338525, 0.0247024223, 0.0427931398, 0.0512733385, -0.0219905451, -0.0281233601, -0.0520741045, 0.0380032435, -0.0632852986, 0.0152556896, -0.0690279454, 0.0558867604, 0.0488751158, 0.0719802529, -0.0401151069, -0.0336188190, 0.0480959564, -0.0494667552, 0.0427896976, -0.0503159240, 0.0540611297, 0.0581644922, -0.0432329029, 0.0665444434, -0.0482508987, 0.0028234124, 0.0341332555, 0.0678397417, 0.0121549442, -0.0089351162, 0.0231129527, 0.0651551932, -0.0216111429, -0.0695435181, -0.0088192672, 0.0437386334, 0.0303772762, -0.0183476768, 0.0109601691, 0.0280777663, -0.0443645641, 0.0204418302, -0.0544115938, 0.0534106940, 0.0576514751, 0.0346888825, -0.0308523625, 0.0266437158, 0.0205152705, -0.0452514514, -0.0472541004, 0.0380635709, -0.0288872719, -0.0661767647, -0.0535714254, 0.0642975569, -0.0363297202, 0.0694716126, 0.0057505071, 0.0097825453, 0.0170964450, -0.0244238861, -0.0111728944, 0.0287486911, 0.0587712824, 0.0339459851, 0.0072861984, -0.0635770857, -0.0456105471, -0.0067215711, -0.0499614216, -0.0166608691, -0.0324724093, -0.0367378034, -0.0602675602, 0.0437226295, 0.0545323491, -0.0144590028, 0.0294065624, -0.0265660472, 0.0346115753, 0.0605840087, -0.0240433328, -0.0213621333, 0.0330108479, 0.0650874972, 0.0413974300, -0.0497364625, -0.0290323906, 0.0348686725, -0.0069976300, 0.0384202972, -0.0369196422, 0.0607144237, 0.0428718254, -0.0160253830, -0.0656263977, -0.0641235411, 0.0668208450, 0.0605062097, 0.0432728529, -0.0010056272, -0.0554527193, -0.0279716514, -0.0337926224, 0.0118587241, 0.0532844067, -0.0262916200, -0.0037261620, 0.0669964105, 0.0188093781, -0.0233450122, 0.0370486006, 0.0221568048, -0.0597459488, 0.0132315010, -0.0417573005, -0.0037431270, 0.0106945187, 0.0286855772, -0.0163902454, 0.0545730591, -0.0357774459, 0.0179131627, -0.0355101787, -0.0032312050, 0.0325587317, 0.0347253308, 0.0591515154, -0.0440316387, -0.0127113312, 0.0206749067, -0.0697304979, 0.0038821548, 0.0664725751, -0.0595878065, 0.0578153431, -0.0069455281, -0.0618332364, -0.0122441612, -0.0610097423, 0.0717804134, 0.0624940693, -0.0388995260, 0.0455545262, -0.0063022971, 0.0702696741, 0.0452094153, -0.0656007975, 0.0398404077, 0.0582247823, -0.0629718155, -0.0652947500, -0.0483761802, -0.0473564938, -0.0375420637, 0.0434218645, -0.0143525787, -0.0183447003, -0.0218546800, 0.0305734128, -0.0060847923, -0.0441873223, -0.0200454481, -0.0138555057, 0.0576153547, -0.0450430289, 0.0006148517, 0.0128130391, -0.0086321980, -0.0065774471, 0.0108120739, -0.0411566421, -0.0505227819, 0.0498277470, 0.0311241224, 0.0463593900, 0.0260094702, 0.0371836349, -0.0219632536, -0.0643015802, 0.0049644858, -0.0382498316, -0.0328783952, 0.0498065278, 0.0672512650, -0.0555439815, -0.0443285704, -0.0429831520, 0.0260325968, -0.0460775457, -0.0671410635, -0.0218676552, 0.0673995167, 0.0163099468, -0.0376352705, -0.0626566336, -0.0530476272, -0.0098651052, 0.0316655189, 0.0673239678, 0.0646080226, 0.0147403628, 0.0082157850, 0.0245935097, 0.0582207590, -0.0165774338, 0.0346941873, 0.0302485526, 0.0655957162, -0.0174463727, -0.0302513428, 0.0521357432, -0.0447129607, 0.0358611718, 0.0187275931, 0.0114221796, -0.0439075641, 0.0664335340, -0.0281133987, 0.0300428346, -0.0252249464, 0.0205716044, 0.0347662270, -0.0617190041, 0.0264067501, -0.0575082079, -0.0094188377, 0.0573941320, -0.0161388591, 0.0290905312, 0.0680461377, -0.0461860150, 0.0623802841, -0.0486985072, 0.0130644590, -0.0540635772, 0.0036554635, 0.0363765880, 0.0024097562, 0.0056611076, 0.0334101245, 0.0697973967, 0.0303286687, -0.0288906805, 0.0358493701, -0.0458902866, -0.0469281599, 0.0305861458, 0.0477725640, 0.0488490611, 0.0168054029, -0.0144008771, -0.0550079495, 0.0450970903, 0.0572534055, -0.0698483139, -0.0678704232, 0.0615139455, 0.0154396445, -0.0073300526, -0.0438413173, 0.0112117454, -0.0466618761, 0.0128855780, -0.0026145428, -0.0122001842, 0.0156200156, -0.0435688719, -0.0352345183, 0.0401019976, -0.0237877667, 0.0136292949, 0.0098124221, 0.0220767781, -0.0033814162, 0.0267207995, -0.0690154359, 0.0245299116, -0.0013293102, 0.0059063807, -0.0506697744, -0.0047996193, -0.0033996552, -0.0501786843, 0.0685617924, -0.0170830265, -0.0253259465, 0.0620267689, 0.0095623061, -0.0526703224, 0.0053574815, 0.0426556095, -0.0449356101, -0.0031532720, -0.0117003545, 0.0098880902, -0.0142054297, -0.0670516938, 0.0701972097, -0.0571248159, -0.0149977840, 0.0373710692, 0.0337460414, -0.0222257376, 0.0321396738, -0.0525477827, 0.0645423532, 0.0411638543, 0.0639553964, 0.0664382875, -0.0319575444, -0.0292767398, 0.0201597512, 0.0109487623, -0.0411225036, 0.0211824998, -0.0528236702, 0.0298543423, -0.0034561604, -0.0446546972, 0.0568408817, 0.0597981364, 0.0200632364, 0.0139455274, -0.0557738058, 0.0037566200, -0.0530709587, -0.0339682475, -0.0524385870, -0.0372320041, -0.0658817068, 0.0058608055, 0.0288306326, 0.0405072719, 0.0232228637, -0.0349903926, 0.0472535193, -0.0329535343, 0.0485911071, 0.0637042820, 0.0251991376, 0.0128313303, -0.0467757285, -0.0005934462, -0.0528710559, 0.0130553916, -0.0249019489, 0.0423145816, 0.0406928584, -0.0303389579, 0.0590089262, 0.0512916148, -0.0258310065, -0.0549605452, 0.0338632688, -0.0569441468, 0.0284645110, 0.0247064680, 0.0442705005, 0.0105084479, 0.0702578425, 0.0198440999, 0.0262663290, 0.0565609485, 0.0572233796, 0.0623426288, 0.0143300593, 0.0512639806, -0.0050533786, 0.0259856731, -0.0087025538, 0.0536620766, 0.0705593675, -0.0392235406, -0.0164780840, 0.0454980507, 0.0646763146, 0.0272437036, 0.0249248147, 0.0228456855, 0.0245507658, -0.0598951802, -0.0031790659, -0.0467224233, 0.0569934994, -0.0376481749, -0.0336050913, 0.0198261216, 0.0218048543, -0.0491835028, -0.0642110184, 0.0551855564, -0.0592123792, -0.0567055643, 0.0155948326, 0.0519099236, -0.0257385559, 0.0320443511, 0.0132375360, 0.0515542179, -0.0080413818, -0.0148757584, 0.0168104768, -0.0241848379, -0.0427794792, -0.0040809885, 0.0467427820, -0.0554465577, -0.0397775173, -0.0499634854, 0.0417953581, -0.0502091572, -0.0425228626, 0.0667542815, -0.0409510769, 0.0533670038, 0.0272928774, -0.0247843787, 0.0587202907, 0.0039953068, -0.0472632200, -0.0437614620, -0.0460214354, 0.0440713838, -0.0255362429, -0.0323254354, -0.0329889990, 0.0516509488, 0.0542527586, -0.0003723949, 0.0339196548, -0.0424052253, -0.0390739292, -0.0386777371, -0.0440384895, -0.0317040421, -0.0132763907, 0.0544911921, 0.0564844310, 0.0433368459, 0.0170222521, 0.0560850054, -0.0112333223, -0.0454383977, -0.0339835621, 0.0445914343, 0.0433620661, 0.0493566692, 0.0076974109, -0.0432541519, 0.0536349267, 0.0706503838, 0.0068418607, -0.0045034587, 0.0521730110, -0.0662819147, -0.0585773587, -0.0614312962, -0.0065733865, 0.0548694432, -0.0226474479, 0.0023999810, 0.0028186962, -0.0557747334, -0.0666937977, -0.0127236359, -0.0215611048, -0.0138779953, 0.0643307269, -0.0446493141, 0.0395888686, -0.0179219916, 0.0456186011, -0.0557999387, 0.0070446730, -0.0331940129, -0.0452371016, -0.0697638616, -0.0184878595, 0.0115896985, -0.0533273332, 0.0297620595, 0.0283893719, 0.0462911129, -0.0606239885, -0.0502894595, -0.0630943775, -0.0412148163, 0.0618428737, -0.0341796279, 0.0380456448, 0.0125949681, 0.0503985658, -0.0458654240, -0.0160533115, 0.0055889264, -0.0198857039, 0.0576814413, 0.0553803146, -0.0306614749, -0.0053776652, 0.0460358188, 0.0153770149, 0.0598592162, 0.0512496829, -0.0006430373, -0.0274959132, -0.0564576909, -0.0056871548, 0.0578537434, -0.0548388436, 0.0243356898, -0.0628811717, 0.0465805084, -0.0525294915, -0.0203550272, 0.0308999047, 0.0328157991, -0.0560877025, -0.0618570521, 0.0468036383, -0.0128723681, 0.0346863866, 0.0582438707, 0.0332418829, 0.0017669052, 0.0512959287, 0.0338934362, 0.0373112261, -0.0335461907, 0.0537133366, -0.0294287242, -0.0108120069, -0.0157475024, -0.0245038457, 0.0434728935, 0.0292366520, -0.0095569566, 0.0480489358, 0.0677619725, -0.0355473794, -0.0530747101, 0.0291086510, -0.0153931528, 0.0693220794, 0.0274568051, -0.0108906925, -0.0310414955, 0.0086842626, 0.0029139370, 0.0588350445, 0.0543742776, 0.0550013632, 0.0466216281, -0.0642342493, 0.0590626150, -0.0291710906, -0.0003971085, -0.0175867938, -0.0697902963, 0.0082056522, 0.0499832407, 0.0053264573, -0.0625276342, -0.0171240456, 0.0280361623, -0.0688647255, 0.0316270068, -0.0246445052, 0.0380267501, -0.0486856885, 0.0104472116, 0.0598616004, -0.0422433987, 0.0573365688, 0.0665435940, 0.0168040916, 0.0069736615, -0.0045416057, 0.0706222206, -0.0363291502, -0.0223497078, 0.0092568249, 0.0385000110, 0.0470969751, -0.0419765599, 0.0330951810, 0.0411322117, 0.0236635059, -0.0546354316, 0.0336595327, -0.0274192952, -0.0041989759, 0.0111619532, -0.0325150639, 0.0679659694, -0.0104839504, 0.0370616093, -0.0323858783, 0.0699529499, 0.0452175364, 0.0503940433, -0.0708716959, 0.0207734853, -0.0679220930, -0.0180028789, -0.0418029651, 0.0155277252, 0.0665111393, 0.0397257432, 0.0645622611, -0.0407136977, 0.0546677113, 0.0353132188, -0.0479235649, -0.0216103159, 0.0006110147, 0.0572760254, -0.0160514675, 0.0202200785, -0.0653133988, -0.0023659766, -0.0014142469, 0.0704759955, -0.0589006171, 0.0236606821, 0.0275379121, 0.0364509225, 0.0327373371, -0.0653822795, -0.0692123994, 0.0698584020, -0.0519396067, -0.0636992678, 0.0044572428, 0.0584624857, 0.0653229654, -0.0441747457, 0.0236211941, -0.0002618954, -0.0707208142, 0.0529983640, 0.0366227478, -0.0120972879, -0.0038398430, -0.0572726354, -0.0613444895, -0.0416157618, 0.0254640654, 0.0369047374, -0.0487076268, -0.0182685293, 0.0071895793, -0.0201307237, -0.0250021257, 0.0538407266, 0.0259930417, -0.0402324200, 0.0610917360, 0.0139924660, 0.0711995810, -0.0321166180, -0.0028337687, -0.0593717620, -0.0136778653, -0.0415901393, -0.0337719396, 0.0670147836, -0.0216465518, 0.0092136562, 0.0656332970, -0.0414519385, -0.0313866697, 0.0720699728, 0.0591827035, -0.0126278289, 0.0079514459, -0.0628245994, -0.0350161865, -0.0010487288, 0.0075506717, 0.0073225349, 0.0571671426, 0.0645814985, -0.0409836657, 0.0067582726, 0.0625725985, 0.0428130850, -0.0546479598, -0.0605018251, -0.0012799129, -0.0239213742, 0.0453488901, -0.0136031732, 0.0614409596, 0.0077351481, 0.0187233239, -0.0433239937, -0.0336396396, 0.0346196815, 0.0247795060, 0.0381692052, -0.0549617857, 0.0147204176, -0.0154219568, -0.0374395475, -0.0130735263, -0.0398946218, -0.0703516826, -0.0048753396, -0.0127885044, 0.0322555900, 0.0222288370, 0.0643614084, 0.0623985529, -0.0054734871, -0.0521307848, 0.0237072930, 0.0616167188, -0.0286215357, 0.0408841968, 0.0692262053, 0.0449071303, -0.0407445654, -0.0380550362, -0.0418606773, -0.0031987205, -0.0518460870, -0.0022673532, -0.0576456711, -0.0033792108, -0.0506397337, -0.0541821271, 0.0276581347, -0.0349258184, 0.0708203912, -0.0190345049, -0.0421368554, 0.0489375740, 0.0439311564, 0.0292364433, 0.0118231922, -0.0538554490, 0.0271976069, 0.0410947502, 0.0071431771, -0.0013502687, 0.0350551233, 0.0297144204, 0.0473810360, -0.0264963955, -0.0489526615, 0.0581663996, -0.0643813834, -0.0042011812, -0.0058749989, -0.0234639943, 0.0509651750, 0.0561568737, 0.0433271900, -0.0137605779, 0.0399805382, 0.0479406193, -0.0620923638, 0.0578837246, 0.0409669727, -0.0709558502, 0.0538250059, -0.0101785883, -0.0178397112, 0.0594582409, -0.0207953900, 0.0353169367, 0.0438214093, 0.0637511462, -0.0099138841, 0.0120128766, 0.0398078710, 0.0388632566, 0.0077837706, -0.0324949324, 0.0497457385, 0.0086375475, -0.0343588479, 0.0690049976, -0.0306046568, 0.0364587680, 0.0501202047, 0.0204476640, -0.0011954457, -0.0057806373, -0.0543783680, 0.0300150812, -0.0031221807, -0.0261742920, 0.0505987480, 0.0541713089, 0.0534473807, -0.0040736645, 0.0603907406, -0.0429105908, -0.0143881813, -0.0163836218, 0.0469262302, -0.0351707488, -0.0630488172, 0.0614681989, 0.0487003624, 0.0500602052, -0.0266261324, -0.0259551667, -0.0038133487, -0.0266435444, -0.0337478667, 0.0471665040, -0.0004740506, -0.0668366775, -0.0587086789, 0.0447877198, 0.0210014209, 0.0218879580, -0.0503351949, -0.0140444487, 0.0214333460, -0.0277057625, -0.0436347052, -0.0156846792, 0.0007803291, 0.0716345757, -0.0190455690, 0.0088875443, 0.0681095570, 0.0624965727, 0.0381041095, 0.0154068321, 0.0181058422, -0.0047625527, -0.0405763909, 0.0213935673, -0.0527012125, 0.0553585440, -0.0546865165, -0.0670232698, -0.0020482838, -0.0333497301, -0.0545385778, -0.0589110255, -0.0704004690, -0.0553050004, -0.0653510466, -0.0654311404, 0.0441188067, -0.0655199438, 0.0344809443, 0.0502521917, -0.0200233720, -0.0412239023, -0.0415158086, 0.0699370354, 0.0043514445, 0.0597181022, -0.0328069888, -0.0607214309, -0.0517484099, -0.0491411090, -0.0433201902, -0.0136120506, -0.0100983381, -0.0400099568, 0.0456876159, -0.0533551387, 0.0516898334, -0.0577741861, 0.0239253119, 0.0457242280, 0.0025751591, 0.0198246539, -0.0580161065, -0.0245946757, -0.0057195723, 0.0144046471, -0.0442567170, 0.0660475791, -0.0402102731, 0.0008727089, 0.0233129412, -0.0161443837, -0.0257745534, -0.0179815069, 0.0715592504, -0.0717252195, -0.0406616665, 0.0311055034, -0.0324006602, -0.0335860774, -0.0173316598, -0.0691040531, 0.0650268495, 0.0018567741, 0.0031866357, 0.0471583307, 0.0175437406, -0.0198582411, 0.0028889850, -0.0153956302, -0.0298941731, -0.0220925771, -0.0632304475, -0.0705463737, 0.0711003989, -0.0053484514, 0.0262757242, -0.0583095960, 0.0201872811, 0.0368003473, -0.0261351466, -0.0174893029, 0.0656202734, -0.0101575293, -0.0058324486, 0.0034672543, -0.0326561593, -0.0620640591, -0.0082470849, 0.0085056946, 0.0456987098, 0.0197909996, -0.0418375507, 0.0562464446, 0.0664220303, 0.0305301175, 0.0011522919, -0.0047748387, 0.0180817693, 0.0378320590, 0.0521660596, 0.0101696923, 0.0658440590, -0.0466726981, 0.0625599325, 0.0627597868, -0.0033610091, -0.0191217922, -0.0390720218, -0.0190115683, 0.0042326823, 0.0697651207, -0.0382998660, -0.0643633679, -0.0533900186, 0.0609209687, 0.0262709409, 0.0332577601, 0.0168389380, -0.0650763139, 0.0173525140, 0.0130304098, -0.0054564700, -0.0654218495, 0.0656806231, -0.0480865091, 0.0629528463, -0.0011588335, -0.0522545129, -0.0457293242, -0.0421841219, 0.0438790694, 0.0695182085, -0.0326700248, -0.0063111931, 0.0706969500, -0.0663501173, -0.0201079920, -0.0058980212, 0.0345891714, 0.0386188924, 0.0099302456, -0.0391465053, -0.0608307272, -0.0198861696, 0.0285076499, -0.0008774772, -0.0047806725, -0.0226240829, -0.0330587700, 0.0720620006, -0.0249687247, 0.0134895444, 0.0095684677, 0.0572388917, 0.0007562861, -0.0336790606, -0.0646790341, -0.0574645549, -0.0473753549, -0.0648715943, -0.0420519933, 0.0587418228, -0.0089060888, -0.0036485642, -0.0258140229, 0.0015850142, 0.0129985586, 0.0456388146, 0.0567849427, 0.0358895808, -0.0196032785, -0.0490999818, 0.0024660677, 0.0426902100, 0.0671196282, 0.0673794746, 0.0623078942, -0.0059004799, -0.0553448498, -0.0642868355, -0.0091671273, 0.0508825853, 0.0564316511, 0.0686995089, 0.0433937982, 0.0666538328, -0.0197979696, -0.0370210186, -0.0385972969, 0.0547177643, 0.0043603033, 0.0524055511, -0.0075925216, -0.0480800569, 0.0554929525, 0.0444953144, 0.0271280929, -0.0624382123, 0.0135578513, 0.0672162920, 0.0133273378, 0.0221757218, 0.0084030256, -0.0042899102, -0.0164237805, 0.0311984494, -0.0403909758, -0.0436406583, 0.0466774628, 0.0689235926, 0.0391003937, 0.0246425793, -0.0561915785, 0.0560033619, -0.0056119785, -0.0444050357, -0.0289908722, -0.0719160736, -0.0487077981, -0.0029776841, -0.0178782344, -0.0179003812, 0.0148617029, -0.0585931540, 0.0524127483, -0.0677846670, 0.0605618805, 0.0568960160, -0.0424819440, -0.0453314595, -0.0175971873, 0.0038943514, 0.0024709553, -0.0476299077, -0.0040652826, 0.0325775743, -0.0289372914, 0.0588434041, 0.0353225470, -0.0038033500, -0.0702980161, 0.0124285296, 0.0594035238, -0.0119965114, 0.0022605583, 0.0305673555, -0.0379568599, 0.0257426724, -0.0509116091, -0.0234756432, 0.0448920429, 0.0001363754, 0.0125061795, -0.0339606069, -0.0199469589, 0.0581460148, -0.0249645114, -0.0517626889, -0.0574696474, 0.0563125163, 0.0225786045, -0.0615223199, 0.0554261655, 0.0000608563, 0.0398560092, -0.0626458973, 0.0661024004, -0.0690463260, -0.0482348800, -0.0120258816, 0.0482544824, 0.0294293612, 0.0161506310, -0.0586973913, 0.0671589673, -0.0295094736, 0.0715847611, 0.0466073975, 0.0551923811, -0.0268772766, -0.0247037299, -0.0084775463, -0.0457041673, -0.0524557605, -0.0452660248, 0.0719070584, 0.0515416414, 0.0012075230, -0.0524730012, 0.0215018466, -0.0006063208, -0.0556131303, 0.0059949979, -0.0094086751, 0.0590517372, 0.0052041560, 0.0097604245, 0.0090941042, 0.0700397044, -0.0670344159, 0.0154821947, 0.0517142490, -0.0376449227, -0.0313095860, 0.0588494688, -0.0164338797, 0.0369456410, 0.0366607010, 0.0349769890, 0.0669881850, -0.0068378150, -0.0134427063, -0.0266898796, 0.0139500722, -0.0219033584, -0.0077406168, 0.0588978976, -0.0493770763, 0.0521138161, 0.0207015127, -0.0345357992, -0.0075827315, -0.0133750848, 0.0046658739, 0.0514502898, -0.0157721750, 0.0531743020, -0.0015274808, 0.0562917292, -0.0232748091, -0.0364996679, -0.0361949578, -0.0086415783, 0.0054837912, -0.0581373572, -0.0483240634, 0.0386128649, -0.0053403974, 0.0147735551, -0.0227969736, -0.0082223415, -0.0503358319, -0.0245286748, 0.0420959219, -0.0341741554, -0.0279916972, -0.0351678059, 0.0025351718, 0.0393097103, 0.0478236973, 0.0090815946, -0.0713362694, 0.0698332340, -0.0052962229, -0.0647916645, -0.0179924853, -0.0486551821, 0.0273785815, -0.0235018320, -0.0499268025, -0.0086383745, -0.0496381484, 0.0040527061, -0.0437745601, -0.0543227717, 0.0165711567, -0.0248798057, 0.0064856708, 0.0280715004, 0.0363133252, 0.0619449168, -0.0426822603, 0.0250909254, -0.0001532882, 0.0218379945, 0.0021237507, -0.0072318241, 0.0050682798, 0.0477074012, -0.0140751451, 0.0478977263, 0.0327290967, 0.0335830823, -0.0015521497, 0.0166707262, -0.0023773909, 0.0298418850, 0.0616153181, 0.0052992180, 0.0498100892, -0.0439914614, 0.0330232754, 0.0019091666, 0.0541584194, 0.0426625088, 0.0206633806, -0.0233869776, -0.0494696647, 0.0183296278, 0.0066883788, -0.0499631763, -0.0080914870, -0.0182905532, -0.0615490563, -0.0372795463, 0.0571751148, -0.0567821860, 0.0589801222, 0.0078481883, -0.0548053086, -0.0489579812, -0.0025846362, -0.0063588098, -0.0595120117, 0.0327880457, -0.0363474935, 0.0048578754, 0.0079443604, 0.0091709495, -0.0577466190, -0.0611169040, -0.0022130683, 0.0243306607, 0.0088797957, -0.0348173119, -0.0591030866, -0.0688897967, -0.0050182045, 0.0372477993, 0.0456364453, -0.0288160034, 0.0017414391, -0.0719477683, 0.0688404441, 0.0404680073, 0.0067560673, 0.0404538810, 0.0173054710, 0.0430096313, -0.0223752595, 0.0505980775, 0.0248476639, -0.0623940267, 0.0441115275, 0.0000392124, 0.0558442622, -0.0108442158, 0.0621136427, 0.0622230619, -0.0692664757, -0.0209783278, -0.0439339578, -0.0448828712, 0.0712047368, 0.0186951607, -0.0340848900, -0.0212712139, 0.0324680209, 0.0504757538, -0.0093168616, 0.0427494198, 0.0468681455, -0.0630906597, 0.0198467001, -0.0225768685, -0.0572106056, 0.0370986238, -0.0699573532, 0.0074660406, 0.0681612641, -0.0416678414, -0.0214652494, -0.0047916695, 0.0239693299, 0.0414864719, -0.0420744494, -0.0701295510, -0.0046957210, -0.0628737584, -0.0098261833, -0.0001075044, -0.0531487837, 0.0510805771, 0.0024632141, 0.0164162293, -0.0180652700, -0.0570692718, 0.0317357033, 0.0117079243, 0.0536824763, -0.0046494380, -0.0147630051, -0.0135052353, -0.0253473707, 0.0199640468, 0.0488653257, 0.0412640795, -0.0536563359, 0.0145029128, 0.0266116410, 0.0341422409, 0.0443625674, -0.0227538869, 0.0408698991, -0.0281127617, -0.0216152556, 0.0718176961, 0.0548501164, 0.0676147938, 0.0051534101, -0.0483963266, -0.0131081976, -0.0518288836, -0.0014152899, 0.0304803774, 0.0645074695, 0.0227871463, -0.0482149720, -0.0228036828, -0.0489646196, 0.0169219077, -0.0276463144, 0.0447819605, 0.0136364996, -0.0395415500, 0.0572735816, -0.0146983601, 0.0285957605, -0.0606969446, 0.0074085146, -0.0669453591, 0.0114946663, -0.0184399225, 0.0351960585, -0.0276168212, -0.0475213826, -0.0406641252, -0.0600451529, -0.0175734237, -0.0216515586, 0.0080819428, 0.0561079085, -0.0578182675, 0.0591968447, -0.0582307205, -0.0661845729, -0.0708610639, 0.0278907120, 0.0548566133, 0.0371799543, -0.0230757147, -0.0213454776, -0.0069941506, -0.0590573326, 0.0477237627, 0.0379249603, -0.0352624767, -0.0667985678, 0.0525147095, -0.0627058074, -0.0560210943, -0.0678239614, -0.0330567211, 0.0408774540, -0.0462373272, 0.0327010304, -0.0135457031, -0.0180090219, 0.0715966076, 0.0043247864, 0.0467768312, -0.0291879214, -0.0302372836, 0.0031515211, -0.0474615768, 0.0191719159, 0.0241926536, 0.0510387123, 0.0120093152, -0.0249282755, 0.0198599473, -0.0601425916, -0.0421790779, 0.0353672951, -0.0126754753, -0.0365498066, 0.0552146435, 0.0051379278, 0.0135624483, -0.0084118396, -0.0357713886, 0.0274622589, -0.0202813484, 0.0465408936, -0.0165462568, 0.0180355906, 0.0162463635, 0.0221771821, 0.0232223123, 0.0711555481, -0.0254805982, 0.0229157805, 0.0288327634, 0.0411497802, 0.0306097195, -0.0206445754, -0.0411874950, 0.0487598851, 0.0717365742, -0.0643871948, 0.0397209078, 0.0531092137, -0.0028148592, -0.0509941131, -0.0212423243, 0.0337668955, 0.0023508891, -0.0508668050, -0.0250397362, 0.0359963104, 0.0424688682, -0.0637096763, 0.0297032818, 0.0227518603, -0.0546681210, -0.0037919432, 0.0273346230, -0.0539004281, 0.0652154386, -0.0398925766, 0.0204801187, 0.0054087043, 0.0260087177, -0.0535037853, -0.0423723757, 0.0271544382, -0.0370673053, 0.0535467267, 0.0069020838, -0.0262128860, 0.0264895782, -0.0253557488, -0.0555316582, -0.0154159851, -0.0103741027, 0.0513907894, 0.0321367830, 0.0674451292, -0.0426559523, 0.0031404719, 0.0533908457, 0.0115633085, 0.0327107683, -0.0516795814, 0.0200700387, 0.0295277610, -0.0604092218, -0.0042766631, -0.0186565332, -0.0106782950, -0.0172028840, -0.0429192632, -0.0240544155, -0.0456159487, 0.0151183307, 0.0393107906, 0.0160786733, 0.0357593074, -0.0245996490, 0.0175453424, 0.0256557912, 0.0652679205, 0.0499824509, 0.0538099557, 0.0378478914, 0.0371004939, -0.0703437030, -0.0483821854, 0.0035992488, 0.0140186399, 0.0257762596, -0.0710176751, -0.0027501434, 0.0459091291, 0.0389149114, 0.0124742091, -0.0169455111, 0.0244135782, 0.0189086571, -0.0288856030, -0.0328546166, -0.0147535764, -0.0676105917, -0.0414195359, -0.0523085073, 0.0662643760, -0.0719393492, 0.0713395774, 0.0111727417, 0.0112232193, 0.0543976426, -0.0153446123, -0.0010168627, -0.0136030540, 0.0453069061, -0.0135342106, 0.0624839962, 0.0638801157, 0.0572522134, 0.0054935291, -0.0070298538, -0.0165203251, -0.0093424469, -0.0120400414, -0.0012892932, 0.0161807090, -0.0289937966, -0.0163549371, -0.0636724830, -0.0716629848, -0.0074626505, -0.0294385813, -0.0506364442, 0.0046250746, 0.0276161358, 0.0504966229, -0.0713372305, 0.0541272759, 0.0566088110, 0.0041068494, 0.0326184928, -0.0508371219, 0.0280457586, 0.0057633072, 0.0159135237, 0.0321200266, 0.0539547503, 0.0334449485, -0.0600577630, -0.0372238681, -0.0075950846, 0.0109975785, 0.0190000236, -0.0242842399, 0.0154543743, -0.0436051451, 0.0232269391, 0.0679070055, -0.0605593473, 0.0542865098, 0.0221373811, -0.0162004605, -0.0168175660, -0.0260139629, -0.0106137022, -0.0505486429, 0.0446831957, -0.0069679841, 0.0373109654, -0.0309827700, 0.0160956234, 0.0710169077, 0.0562420040, 0.0204974785, -0.0084009618, 0.0480096713, -0.0220872425, 0.0578746051, -0.0095145404, 0.0713146925, 0.0290278122, -0.0024257898, 0.0454866588, -0.0589593090, -0.0278825574, -0.0020158440, -0.0497980788, -0.0217977986, -0.0235375501, -0.0719809234, 0.0015499666, -0.0709226951, -0.0482565463, 0.0446486622, -0.0575330555, 0.0204549581, 0.0154159516, -0.0108917244, 0.0074834526, -0.0416805595, -0.0319534838, -0.0395290405, 0.0504193678, 0.0132175088, 0.0469699204, -0.0032706559, 0.0374628454, 0.0616056025, -0.0183844119, -0.0635482147, -0.0531585738, 0.0272473320, 0.0512016714, 0.0002972782, -0.0233639218, 0.0672579557, 0.0002545491, -0.0293363258, -0.0315394141, 0.0701392144, 0.0699945539, 0.0402899235, 0.0187455043, 0.0531212986, -0.0583180785, 0.0307901949, 0.0242517367, 0.0374759212, 0.0584197789, -0.0214332119, 0.0609926730, 0.0021874830, 0.0325776637, -0.0638841540, 0.0109102055, 0.0531280935, 0.0527332127, -0.0555417947, 0.0161427483, -0.0374052897, 0.0685646385, 0.0707840025, -0.0226954892, 0.0583094954, -0.0155812204, 0.0306975245, 0.0452070236, -0.0381952003, 0.0326431841, -0.0614848062, 0.0531111062, 0.0421442538, 0.0414142236, -0.0104987659, -0.0134694800, -0.0154358074, 0.0363280326, 0.0383032262, -0.0228395239, -0.0098209195, -0.0170309767, 0.0385846645, 0.0274022967, -0.0482965671, -0.0053102672, 0.0642700791, -0.0319146998, 0.0244086608, -0.0356016159, -0.0434755795, 0.0270081460, -0.0471044742, -0.0262495168, 0.0073958188, 0.0492800325, -0.0428885147, -0.0142591856, -0.0536483377, -0.0387428813, -0.0464862660, -0.0028479323, 0.0482646003, -0.0456550606, -0.0558884852, -0.0237347893, 0.0333660617, 0.0419971198, 0.0590662956, 0.0493846461, -0.0393498875, -0.0305328555, -0.0128994137, 0.0086464807, -0.0321724191, 0.0713573247, -0.0642536581, -0.0625802875, 0.0611923039, 0.0692730397, 0.0023467094, -0.0144854635, -0.0589538179, -0.0276519395, -0.0061224401, 0.0641551167, -0.0140528269, 0.0031023994, 0.0572946966, -0.0287582763, 0.0516761765, 0.0174833462, 0.0234959498, -0.0288135447, -0.0099720433, -0.0135140605, 0.0175661668, 0.0315022096, -0.0009647459, 0.0445884019, 0.0487629995, 0.0229635090, -0.0147934407, 0.0263506919, 0.0669974387, 0.0165915415, 0.0184252262, 0.0369655266, -0.0413071960, 0.0514428243, -0.0491567627, -0.0604870953, 0.0578623563, 0.0486514121, -0.0164377168, 0.0385463983, 0.0386976823, 0.0496047884, -0.0273073129, 0.0089655891, -0.0417488366, -0.0458763018, 0.0277346522, -0.0628622472, 0.0586276203, -0.0435264073, -0.0553739630, 0.0547724217, -0.0419810005, -0.0271832384, -0.0341889895, -0.0568095781, -0.0110753849, -0.0674099624, 0.0536328554, 0.0600561947, 0.0267722830, 0.0478181243, 0.0449402183, 0.0038146749, 0.0048049986, -0.0657988116, -0.0213392824, 0.0166110396, -0.0332738161, -0.0250804834, 0.0553452224, -0.0201116428, 0.0306647420, -0.0350969695, -0.0347771868, 0.0537844747, 0.0530582070, -0.0486308709, 0.0128389001, -0.0209248997, -0.0711456016, 0.0558611304, 0.0515875071, -0.0559063777, 0.0089162439, -0.0646176934, -0.0557765923, -0.0125060789, -0.0657319129, 0.0659311563, 0.0162300169, 0.0277918950, -0.0432045609, 0.0120170861, 0.0617511421, -0.0481492132, 0.0611195862, -0.0071760714, -0.0506070219, -0.0282975584, -0.0068833604, -0.0712011829, 0.0301870778, -0.0516121686, 0.0359787792, 0.0436853468, 0.0087628290, 0.0014749467, 0.0245254189, 0.0146270394, -0.0328180529, 0.0397827327, -0.0678660870, -0.0630315617, 0.0018857643, -0.0165701210, -0.0523959175, -0.0563728958, -0.0454679765, -0.0252347700, 0.0499169454, -0.0301612504, -0.0284738913, -0.0053271428, 0.0675153881, -0.0416572765, -0.0162419081, -0.0186147392, -0.0002363473, -0.0050079301, -0.0501109622, -0.0396424457, 0.0355376899, -0.0286782831, 0.0430586860, 0.0169232115, 0.0473099723, -0.0324941427, 0.0616036803, 0.0696176142, 0.0322219208, -0.0526270345, -0.0556282215, 0.0455594957, -0.0457442924, -0.0575880632, -0.0687119663, -0.0262018740, -0.0518322885, 0.0265339762, 0.0275438502, 0.0058946162, 0.0657271743, 0.0050798208, -0.0014337078, 0.0212068409, -0.0484328568, 0.0418195352, 0.0327539742, 0.0340914801, -0.0604077913, 0.0125303939, -0.0135900266, 0.0344973579, -0.0147792622, 0.0110069886, 0.0371124744, 0.0153192878, 0.0414371714, -0.0609342232, 0.0583971888, 0.0061083138, 0.0641330779, -0.0223368742, 0.0256513357, 0.0256871805, 0.0711653978, -0.0313170217, 0.0490072444, 0.0183837563, 0.0253201500, -0.0602842346, -0.0692891404, 0.0636323392, -0.0262458697, -0.0021782964, 0.0046591982, -0.0011710674, -0.0366061218, 0.0630085766, -0.0680216327, 0.0635781437, 0.0529448986, -0.0632880703, 0.0432015359, 0.0192215517, -0.0362649374, 0.0515213683, -0.0260531232, 0.0564478189, 0.0642555207, 0.0042060316, -0.0571391992, -0.0334504731, 0.0562122911, -0.0308312140, 0.0166509226, 0.0223605335, 0.0073229820, 0.0003881902, 0.0041144565, 0.0137086511, 0.0247808173, 0.0496242419, 0.0221556053, -0.0286471732, -0.0490772352, 0.0194239542, -0.0369348675, -0.0175095536, 0.0107492208, 0.0547507852, 0.0138961449, 0.0231807753, 0.0420850962, -0.0422990434, -0.0275262482, -0.0327804051, -0.0490828827, -0.0112484135, 0.0256626084, 0.0481293723, -0.0309777111, -0.0691517144, -0.0502980128, 0.0450334251, 0.0393644422, -0.0522883236, -0.0285414755, -0.0190479755, 0.0668469518, 0.0604589432, -0.0324667506, -0.0039617717, -0.0392186865, 0.0477181599, -0.0364679731, 0.0556119382, -0.0311852172, -0.0587167665, 0.0488641858, 0.0002872273, 0.0470179468, -0.0424102619, -0.0383534990, -0.0152799524, 0.0276593044, -0.0014308840, 0.0463032052, -0.0653114244, 0.0691291690, -0.0219343975, 0.0527625158, -0.0024847239, 0.0656498373, 0.0540077537, -0.0277106650, -0.0435149148, -0.0358927473, 0.0713081062, 0.0276479125, 0.0536598116, -0.0287450440, 0.0713833869, 0.0016296133, 0.0059519932, -0.0576270707, -0.0632272661, -0.0135837980, 0.0388045833, 0.0513354391, -0.0483445898, -0.0566369817, -0.0445292480, 0.0601567477, 0.0653801113, 0.0556104332, -0.0632664412, 0.0333177969, -0.0547516271, -0.0538691431, -0.0221317559, -0.0396268740, -0.0709265172, 0.0098390356, -0.0377147831, 0.0278772414, -0.0643170327, 0.0696651042, 0.0327029601, -0.0451385751, 0.0049476251, 0.0390645191, -0.0514251664, -0.0528353862, -0.0709536672, 0.0538849235, 0.0216248930, -0.0681005269, -0.0381464884, 0.0155355185, -0.0443311855, 0.0675555170, 0.0679896325, -0.0326074138, -0.0641140491, 0.0467965975, 0.0386981294, 0.0629037321, -0.0671746284, 0.0161691979, -0.0703835487, -0.0577600077, 0.0461858585, 0.0127593204, 0.0550130755, -0.0520955101, 0.0314265937, 0.0090625659, 0.0499580130, -0.0706277937, -0.0167286098, -0.0425499976, -0.0474895686, 0.0513167009, -0.0094511211, -0.0422937796, -0.0172088556, 0.0552467704, -0.0634306818, 0.0348752663, -0.0030573010, 0.0029386282, -0.0413800329, -0.0059350282, -0.0330633298, -0.0553689748, -0.0249388553, 0.0443369523, -0.0640099496, -0.0695713237, -0.0321943574, -0.0416619927, 0.0508172810, -0.0045417249, 0.0534159392, -0.0413009673, 0.0151955709, 0.0526935160, -0.0207285769, 0.0487710461, 0.0603316873, -0.0274903402, 0.0706318468, 0.0720405579, 0.0496075898, -0.0307155550, 0.0145649090, 0.0635156482, 0.0533754528, -0.0479058623, 0.0265822560, -0.0080554783, -0.0331661887, -0.0114334673, -0.0054609776, 0.0472616181, 0.0476241931, -0.0264527760, -0.0510269254, 0.0574364513, 0.0552128106, 0.0136617273, -0.0081139803, -0.0425305553, 0.0279745758, 0.0195622444, 0.0433644131, -0.0159847103, 0.0292005837, -0.0623762384, 0.0700696111, 0.0109028891, 0.0210398063, 0.0649016798, 0.0202560201, -0.0139943250, -0.0280363299, 0.0325941816, -0.0045331419, -0.0443220139, -0.0437378399, 0.0332607180, 0.0526575074, 0.0173420310, 0.0136025548, 0.0307804421, -0.0675462559, -0.0448925085, 0.0297573507, -0.0318874978, -0.0053523704, -0.0345948711, 0.0443462729, -0.0166620389, -0.0216083564, -0.0568956099, 0.0074031278, 0.0539061874, -0.0692469701, 0.0454050004, 0.0408146158, -0.0439890549, 0.0163144320, -0.0670036003, 0.0131136179, 0.0447998345, 0.0506894886, -0.0581244901, 0.0542836934, 0.0300837532, 0.0087124705, -0.0501350164, -0.0291609392, 0.0667748302, 0.0538993925, 0.0465705246, -0.0482875332, 0.0398021191, -0.0686310828, 0.0267049223, 0.0283137634, 0.0066886544, 0.0437921584, 0.0583005995, -0.0201023147, 0.0643094182, -0.0449091792, -0.0205096602, 0.0553043932, -0.0558465719, 0.0329745412, -0.0133462660, 0.0441578850, -0.0053801239, 0.0472866744, 0.0376800075, 0.0165636539, -0.0456161723, -0.0272144154, -0.0153996237, -0.0712760985, 0.0187003762, -0.0388114490, -0.0195479430, -0.0588010773, 0.0002390966, 0.0317609459, -0.0200226828, -0.0325688682, -0.0219068676, 0.0136505440, -0.0414284542, 0.0345080793, 0.0120101348, 0.0515326932, 0.0281341150, 0.0700051337, 0.0568885207, -0.0574496202, -0.0443303436, -0.0480761677, 0.0600256771, 0.0415540412, 0.0150272399, -0.0655847117, -0.0279174522, -0.0254745074, 0.0469698012, 0.0432185829, -0.0375317410, -0.0611097775, -0.0193217471, -0.0501762405, 0.0596184433, 0.0097420439, 0.0278492123, -0.0650139078, -0.0228247941, -0.0197053999, -0.0067981556, 0.0712159127, -0.0369792432, 0.0129599273, 0.0605433583, -0.0607900992, 0.0010975227, -0.0068939403, 0.0530690700, 0.0630671233, 0.0570906848, 0.0006377921, 0.0254823714, 0.0503114164, -0.0297271684, -0.0000865683, -0.0306168422, 0.0391811430, -0.0708106458, -0.0495987274, -0.0574940816, -0.0713208839, 0.0193385780, -0.0457644761, 0.0596330762, 0.0371602550, -0.0248466283, 0.0140888244, 0.0131538659, -0.0481875986, 0.0081108436, 0.0419791266, -0.0539374202, 0.0484081879, -0.0106654242, -0.0222152583, -0.0517440513, 0.0708941370, 0.0595878959, -0.0284385458, -0.0499447510, 0.0173272341, 0.0114508793, -0.0386627167, -0.0341762565, 0.0480283573, 0.0435864776, -0.0484843031, 0.0324631035, 0.0133979693, -0.0302801132, 0.0458723605, -0.0513918735, 0.0716745257, 0.0201034173, 0.0520484522, 0.0224682987, -0.0019164458, -0.0537380651, -0.0184342414, -0.0546179861, -0.0437399074, -0.0466893874, -0.0413554274, 0.0586494952, -0.0352154337, 0.0647508204, -0.0323789269, -0.0431373715, 0.0279535502, -0.0187773891, 0.0278359801, -0.0547524020, -0.0708296448, 0.0553766340, 0.0110949129, -0.0543555357, 0.0147272870, 0.0098804533, -0.0169421732, 0.0161857158, -0.0372246243, 0.0052546412, 0.0680443794, -0.0287773572, -0.0290664099, -0.0101553090, 0.0312880948, -0.0128359422, -0.0700676441, -0.0132951438, 0.0449808612, -0.0512843356, -0.0284438133, -0.0001112372, -0.0369984619, 0.0380518064, -0.0323203243, -0.0147584267, -0.0434883460, 0.0217638686, 0.0388762131, 0.0241626427, -0.0127778016, -0.0279011577, 0.0281544328, -0.0551456362, 0.0652785450, -0.0665125325, -0.0524509251, -0.0099001527, 0.0090234354, 0.0197110400, 0.0025060549, 0.0421850830, 0.0281387791, 0.0302874595, -0.0156165101, 0.0278415382, 0.0032377914, -0.0594317615, 0.0102636218, -0.0296331160, 0.0337172076, 0.0184062272, 0.0086441264, 0.0555331856, -0.0079916716, -0.0655719638, 0.0119103789, -0.0491133705, 0.0398843884, 0.0390674770, -0.0535045266, 0.0688761920, 0.0521428660, 0.0240781084, 0.0583436787, -0.0054233819, 0.0666861236, 0.0197007731, -0.0424283296, 0.0494156852, -0.0145563036, 0.0685584396, -0.0322998464, 0.0581356585, -0.0206780396, 0.0621608496, -0.0052568242, 0.0054424107, -0.0409370735, -0.0100660771, 0.0298120975, -0.0156579949, 0.0336641595, -0.0685601607, -0.0354857817, 0.0528426319, -0.0495894179, 0.0117400661, 0.0635228902, 0.0085928291, 0.0108653307, 0.0657614470, -0.0233965442, -0.0615336597, 0.0341691300, 0.0160574242, -0.0418188795, 0.0686832517, 0.0473606065, -0.0700945333, 0.0203949288, 0.0521041974, -0.0284459479, 0.0268766358, -0.0573975518, -0.0094620958, -0.0688676834, 0.0401543677, 0.0204437897, -0.0687601641, -0.0623263568, 0.0720756650, -0.0651622564, 0.0079976469, 0.0387208536, -0.0170628615, 0.0399715677, 0.0296377093, -0.0067861304, 0.0182805881, -0.0046536401, 0.0599964708, -0.0262481943, 0.0712300986, 0.0366774425, -0.0202375911, -0.0444711596, 0.0211631581, 0.0225468576, 0.0697545707, 0.0413006097, -0.0650560930, -0.0649529397, 0.0018663555, -0.0301560722, -0.0620962195, 0.0626120120, -0.0343911126, -0.0366838947, -0.0048957467, -0.0498853326, 0.0156441778, -0.0226227231, 0.0056616589, 0.0592618436, -0.0606564768, 0.0662590861, -0.0411737785, 0.0613943040, 0.0071719661, -0.0685050115, 0.0521143004, 0.0097900853, 0.0009322762, 0.0038806424, -0.0303410403, 0.0075861216, 0.0410114229, 0.0624651015, 0.0579523146, 0.0053777322, 0.0538598150, -0.0539359599, -0.0381516516, -0.0157162733, 0.0010812506, -0.0381191820, -0.0087845251, 0.0548185706, 0.0246944427, -0.0004527718, -0.0697814822, -0.0437650234, -0.0683406591, -0.0502905101, -0.0384271592, 0.0507796183, 0.0516281351, -0.0475318655, -0.0031699687, -0.0049261153, 0.0360560492, 0.0007471889, -0.0575257763, -0.0535729900, -0.0657498017, 0.0526703224, -0.0300011449, 0.0160237700, -0.0261862166, -0.0100947432, 0.0135085061, 0.0398247465, 0.0090803206, 0.0637081414, -0.0241513215, -0.0212384351, 0.0100558177, 0.0492068678, 0.0453311354, 0.0233567804, 0.0663888454, -0.0676245764, -0.0088107660, -0.0055830404, -0.0355546065, -0.0594762042, 0.0266518891, 0.0279123113, -0.0270590074, 0.0030227453, 0.0403759405, -0.0254409052, 0.0504938886, -0.0419196934, -0.0290176645, -0.0142352171, -0.0148717836, 0.0247469023, -0.0571964122, 0.0254792050, -0.0407416597, -0.0036777779, -0.0016838685, -0.0528527647, -0.0163806453, -0.0172990710, -0.0664706826, 0.0621606857, 0.0399893969, 0.0399675816, -0.0411463007, -0.0574227795, 0.0110743493, 0.0489061177, 0.0043256134, -0.0050485954, -0.0514576212, 0.0542431325, -0.0513699874, -0.0068957135, 0.0444083884, -0.0581571646, -0.0161252171, -0.0163470916, 0.0699980557, -0.0590447709, -0.0114323124, 0.0065849498, 0.0246182531, 0.0537983924, -0.0041178167, -0.0390099585, -0.0098659322, -0.0646243542, -0.0593698025, -0.0237107351, -0.0418225639, -0.0206329077, 0.0556975454, 0.0308160037, -0.0317160860, 0.0051099360, -0.0392389409, -0.0438378602, -0.0059624389, 0.0498913750, -0.0714623258, 0.0682073236, 0.0278122723, -0.0562235788, -0.0650140643, -0.0365883820, 0.0315357670, -0.0656222701, 0.0449155122, -0.0283986107, 0.0018797442, 0.0120814964, 0.0035029054, -0.0274504870, -0.0713284090, 0.0606133640, -0.0493275225, 0.0248210281, -0.0601283945, -0.0006638244, 0.0693554133, 0.0167665631, -0.0417116657, -0.0673656017, -0.0628438368, -0.0326124206, -0.0670976490, 0.0059275478, -0.0081097633, -0.0478242002, 0.0646289885, 0.0501436740, 0.0119757950, 0.0361325890, 0.0556199104, -0.0701491684, -0.0267305039, 0.0225088522, -0.0259313360, -0.0476318523, 0.0112288445, 0.0371769443, 0.0174655244, 0.0174077302, 0.0688826293, -0.0208311416, 0.0181396380, -0.0705907345, -0.0064990520, -0.0720894113, 0.0372843146, 0.0090711191, 0.0347666070, -0.0430042297, -0.0667759404, 0.0512368754, 0.0145562142, 0.0528174713, 0.0511982813, -0.0024422556, 0.0155060291, -0.0709186047, -0.0304596610, -0.0115709789, 0.0672443509, 0.0592132956, -0.0687521622, 0.0676633269, 0.0430337414, -0.0208235383, -0.0418706387, -0.0693229511, -0.0325415470, -0.0572317168, 0.0588847548, 0.0017110035, 0.0355863497, 0.0651346445, -0.0669913515, 0.0273452699, -0.0373687446, 0.0085030794, 0.0446309745, 0.0623850673, 0.0593325794, 0.0477786884, -0.0662504584, -0.0152083039, 0.0122292787, 0.0133393630, 0.0328787193, 0.0066728741, -0.0641663373, -0.0274471343, 0.0192858726, 0.0147909969, -0.0417056121, 0.0546260029, 0.0300036594, -0.0388641320, 0.0223862901, 0.0310387760, 0.0105923861, 0.0390711278, -0.0429148600, 0.0300517157, -0.0038275793, 0.0355044007, -0.0004561618, 0.0206472054, -0.0533744954, 0.0035436004, 0.0614245534, -0.0443099514, -0.0458053425, 0.0050941408, 0.0139464065, -0.0555779114, -0.0441389009, 0.0150992498, -0.0458040498, -0.0578151345, 0.0087651163, 0.0277099237, 0.0622923523, 0.0264818519, 0.0574233532, -0.0429723449, 0.0567176789, 0.0705588311, -0.0502969287, 0.0676017851, -0.0603505969, 0.0145300329, -0.0426676385, -0.0476978533, -0.0157422535, -0.0440148264, -0.0301121958, 0.0378912166, 0.0195758194, -0.0595693253, -0.0353076421, -0.0138157420, -0.0401634574, 0.0375341699, -0.0318066776, -0.0329232365, -0.0149941035, -0.0660901815, -0.0225635655, 0.0091602430, -0.0173236579, -0.0351653993, -0.0250046551, -0.0192363858, -0.0261388458, -0.0272134542, 0.0425567105, 0.0012216717, 0.0021138564, 0.0525158793, -0.0554780439, -0.0212580152, -0.0402500741, -0.0429528356, 0.0549311191, -0.0093176663, -0.0670884252, -0.0032966733, -0.0365241691, -0.0633241013, 0.0351757258, -0.0342431031, -0.0394004211, 0.0544503182, -0.0385246351, 0.0184329003, -0.0090854838, 0.0259389803, -0.0563883111, 0.0031348318, 0.0552950650, 0.0012562349, -0.0515136942, -0.0074491426, 0.0139794573, -0.0464278013, 0.0598783046, 0.0530939698, -0.0631810278, 0.0673230588, 0.0341595337, 0.0568289012, 0.0159114078, 0.0412599817, 0.0028932542, -0.0596014857, 0.0578737259, -0.0610428639, -0.0058866292, -0.0507913381, -0.0618926696, -0.0543423891, 0.0674001575, -0.0277831405, 0.0057618469, 0.0008514896, 0.0135623738, 0.0662575960, -0.0331440791, 0.0013077185, 0.0151239932, -0.0430304185, 0.0345700756, 0.0017762482, 0.0144946873, 0.0367195308, 0.0331028700, -0.0237864926, 0.0072731003, 0.0447832122, 0.0331331864, 0.0718075633, 0.0636600852, -0.0715509877, 0.0181601942, 0.0104469061, 0.0702905357, -0.0071079880, 0.0350348875, -0.0060974732, 0.0268323645, 0.0445232391, 0.0539324433, 0.0298515707, 0.0011482164, -0.0665403679, -0.0346202143, -0.0323791876, -0.0087822080, -0.0600835532, 0.0702249110, 0.0720447600, -0.0680364147, -0.0695147142, 0.0197489485, 0.0514642447, -0.0368143357, -0.0234245732, 0.0408663899, -0.0065120980, -0.0451162942, 0.0608709604, -0.0337006897, -0.0647401661, 0.0009868741, 0.0714896470, -0.0522182435, 0.0569687486, 0.0361507386, -0.0024856851, -0.0058280379, 0.0055678263, 0.0418749228, 0.0496691018, 0.0138025954, 0.0204969645, -0.0683320165, 0.0247289911, -0.0261112824, 0.0299987048, -0.0517384261, -0.0152315162, 0.0615417659, -0.0714363232, -0.0479798838, -0.0162980035, -0.0637818277, -0.0201330110, -0.0166242532, -0.0471058674, 0.0105617046, -0.0277212150, -0.0400011837, 0.0480889231, -0.0161660984, 0.0205018446, -0.0123410672, 0.0443765596, -0.0559982285, 0.0691384077, 0.0104285479, 0.0479699746, -0.0679941028, 0.0204780996, 0.0600381345, 0.0405584276, -0.0173659176, 0.0169893876, -0.0059601888, 0.0552461594, 0.0007511079, 0.0121840984, -0.0201481692, -0.0285599716, 0.0213396102, -0.0668412372, -0.0325169228, -0.0244195834, -0.0497707427, 0.0253014788, 0.0099461451, -0.0672070682, 0.0267884880, 0.0219411254, -0.0130730458, -0.0673588216, 0.0169732645, 0.0608394891, 0.0328084677, 0.0168635100, -0.0053785220, 0.0317595154, 0.0007907525, 0.0199505538, -0.0258615501, 0.0542425215, -0.0101483390, 0.0334884152, -0.0165746137, 0.0375119671, 0.0446391925, 0.0086475983, -0.0193974562, -0.0025991648, 0.0008767843, 0.0088341832, 0.0398641005, 0.0634348094, -0.0006328002, -0.0661761761, 0.0118957981, -0.0035125762, -0.0614536479, 0.0447618589, -0.0327088088, 0.0236719698, 0.0509916395, 0.0522318035, 0.0325266793, -0.0144692585, -0.0230403058, -0.0636406466, -0.0114603415, 0.0281233415, 0.0172860101, -0.0668678060, -0.0348902158, -0.0608460233, -0.0389127769, -0.0417236462, -0.0047136024, -0.0521851927, 0.0049355775, -0.0196453482, -0.0090471283, -0.0103541277, -0.0645291358, 0.0356609970, 0.0254294798, 0.0171434060, -0.0071187615, 0.0487488732, 0.0314328000, 0.0324170738, -0.0170707218, 0.0018965527, 0.0084650069, -0.0233459249, -0.0353806168, -0.0549633354, 0.0601834506, 0.0212738141, 0.0227447003, -0.0680352747, -0.0340248235, -0.0124540441, 0.0644951463, -0.0510597378, -0.0071710646, -0.0587136522, 0.0650349259, 0.0203706846, -0.0539786816, -0.0391156897, -0.0020046607, 0.0248645768, 0.0231823251, -0.0250516944, -0.0418270901, -0.0260728784, -0.0581488535, 0.0339052528, 0.0549630225, -0.0505906753, 0.0277451277, -0.0714561120, 0.0465693250, -0.0533407182, 0.0616231412, -0.0155812018, 0.0043291077, 0.0705482960, -0.0681013465, -0.0515355319, -0.0296117812, -0.0265549123, 0.0372857079, 0.0686875582, 0.0212986246, -0.0094441026, 0.0424154103, -0.0717841685, 0.0539712161, 0.0663745552, 0.0684773028, 0.0670488328, -0.0084536299, -0.0382484198, -0.0327672064, 0.0631839782, 0.0552344769, 0.0067978650, 0.0005054176, -0.0577619672, -0.0626073554, 0.0360975564, 0.0686614364, -0.0656848699, -0.0182865597, 0.0353784114, -0.0425619222, 0.0574003011, -0.0222195424, 0.0435025096, 0.0542540550, 0.0102314427, 0.0363464430, 0.0213047341, -0.0651896000, 0.0174280629, 0.0373565108, 0.0367576927, -0.0536975451, -0.0220974125, -0.0020508617, 0.0307235569, -0.0470964387, 0.0042745620, 0.0243253782, 0.0626972020, -0.0213573128, 0.0614469200, 0.0530024469, -0.0251118653, -0.0488965511, 0.0653133839, 0.0653526783, -0.0111442804, -0.0030205771, 0.0631852448, -0.0684572086, -0.0224926956, -0.0044987798, -0.0089038685, -0.0626661107, -0.0178683251, -0.0338957235, 0.0026513115, 0.0274815261, 0.0721327811, 0.0052774549, 0.0094576254, -0.0562641844, -0.0045512095, -0.0085108057, 0.0023121759, 0.0626717955, 0.0572581440, -0.0615831614, 0.0480849594, -0.0486050770, 0.0482551306, 0.0588068068, 0.0566312671, -0.0183248445, -0.0048880950, -0.0627590269, 0.0651555210, 0.0417317003, 0.0006301329, 0.0019957870, -0.0452266410, -0.0546407327, 0.0719190985, -0.0450241864, 0.0533971339, 0.0464440733, 0.0143343955, 0.0176039338, -0.0468075275, -0.0122342184, -0.0353447907, 0.0640610009, 0.0630963892, -0.0172337368, -0.0521622375, -0.0238019973, 0.0609934330, 0.0290326998, 0.0686217695, -0.0276531093, -0.0594600141, 0.0068745986, -0.0707298443, 0.0373380110, 0.0138655007, -0.0318900421, -0.0522788279, -0.0578589775, -0.0565216281, -0.0117682517, -0.0484014899, 0.0268722698, -0.0571212173, -0.0113367513, -0.0295277983, -0.0184948780, 0.0681776255, -0.0237946846, -0.0686432272, -0.0216167159, 0.0364566147, 0.0344055295, 0.0482396483, -0.0269607604, 0.0089054182, -0.0477187075, -0.0452736318, 0.0377972871, 0.0049802512, -0.0031021014, 0.0352448225, -0.0421979576, -0.0429174379, 0.0421752259, -0.0517534986, 0.0135318041, -0.0293892846, -0.0508835614, -0.0569038503, 0.0592624098, -0.0210049115, 0.0227247253, -0.0280436613, -0.0098414458, -0.0109573305, -0.0321678929, 0.0014844462, -0.0529740676, -0.0589600317, 0.0237177685, -0.0696436763, 0.0580237657, -0.0067107826, -0.0174736269, 0.0615735203, 0.0716771483, 0.0666674078, 0.0379194543, -0.0406287685, 0.0636336058, 0.0172802806, 0.0306072086, 0.0689259022, 0.0641641617, -0.0673040077, 0.0232603550, 0.0382044241, 0.0322395191, -0.0458016582, 0.0357155204, 0.0187183172, 0.0458609164, -0.0491107553, -0.0706575811, -0.0455106497, 0.0570773035, -0.0393097959, -0.0325759947, 0.0076882243, 0.0347117037, -0.0258372873, -0.0108165480, 0.0063588545, -0.0283859819, -0.0109904706, 0.0247294381, -0.0066531226, 0.0092521086, 0.0617822260, 0.0575928241, -0.0670429841, -0.0626705661, -0.0116568059, 0.0654689670, 0.0475307107, 0.0384190008, 0.0117728636, 0.0284719616, 0.0540800542, 0.0314003825, 0.0068364218, -0.0435371622, 0.0534287095, -0.0612784699, -0.0573017150, -0.0509349927, -0.0569086187, 0.0307207182, -0.0519977808, 0.0465221554, -0.0310167186, 0.0229158178, -0.0593620390, -0.0287600495, -0.0373359993, 0.0542643070, -0.0000258237, 0.0422011018, -0.0563472956, -0.0494952127, 0.0126295164, -0.0660797060, -0.0019535273, 0.0382702351, -0.0583174936, 0.0074079484, -0.0005997643, -0.0370621085, -0.0368637890, -0.0487920940, -0.0354278125, 0.0466020629, 0.0492632911, -0.0148283727, -0.0386501551, 0.0587853342, 0.0706744641, -0.0379504561, 0.0053751320, 0.0201094523, 0.0356069654, -0.0261539035, -0.0621234067, -0.0100115314, 0.0619755983, -0.0554701313, -0.0092639476, 0.0220412016, -0.0560536310, -0.0670124069, -0.0546573848, -0.0202323943, 0.0223881155, 0.0067098513, 0.0647439510, 0.0584933460, 0.0686566979, 0.0368308723, 0.0184368417, -0.0565335676, 0.0691590607, 0.0188937932, 0.0240226015, 0.0623594075, -0.0618713647, 0.0065939501, -0.0356919654, 0.0593162924, -0.0108995028, 0.0675598979, -0.0632441416, 0.0320292935, -0.0334606059, -0.0664237589, 0.0306958556, -0.0137457959, 0.0361548141, -0.0540183559, 0.0111223608, 0.0712242872, 0.0052617788, 0.0296696126, 0.0402148515, 0.0594092011, -0.0580356717, -0.0609461293, -0.0232866295, 0.0396131277, 0.0681307912, -0.0264597796, -0.0024494678, -0.0043848231, 0.0364966244, -0.0664752126, 0.0621071011, -0.0330250636, 0.0321415514, -0.0627109855, -0.0342203043, -0.0251478776, 0.0149683654, 0.0373570099, -0.0484614372, 0.0354929566, -0.0231171139, -0.0059840530, 0.0682944208, -0.0242629200, -0.0269117057, 0.0487016216, -0.0577600934, -0.0062958002, 0.0479300544, -0.0345869549, 0.0463992730, 0.0185453445, -0.0333353952, 0.0006376132, 0.0173141435, -0.0237604417, 0.0400329083, 0.0283323005, -0.0640631318, -0.0419590957, -0.0322524458, 0.0651613176, -0.0642739609, 0.0511234179, -0.0700812563, -0.0690662637, -0.0572408549, 0.0568555593, 0.0544382930, -0.0459909961, 0.0195964277, -0.0672461763, 0.0656110048, 0.0075323656, 0.0150887892, -0.0251402035, -0.0577549823, 0.0453547239, 0.0209050104, 0.0276483595, -0.0241445564, 0.0354297385, 0.0460556075, -0.0376243442, -0.0572681613, -0.0029358417, 0.0342236087, 0.0322216302, 0.0588202327, 0.0240264535, -0.0561356917, -0.0208915025, -0.0330406502, -0.0068036765, 0.0660651773, 0.0566526502, 0.0513763353, -0.0094649866, -0.0046578720, -0.0423126705, -0.0377874970, 0.0371043012, 0.0621633381, -0.0614004135, -0.0359467044, -0.0329982564, -0.0574281476, -0.0498984121, 0.0531067252, -0.0668024942, -0.0692094713, 0.0479348898, -0.0513084233, -0.0506688803, 0.0067067742, -0.0632107779, -0.0277606696, 0.0708235353, -0.0130001232, 0.0598722994, 0.0678167045, 0.0692364722, 0.0344407186, -0.0334037393, -0.0544589609, -0.0516660586, -0.0645897314, -0.0442953929, 0.0416384190, 0.0277096480, -0.0701278150, 0.0553377420, 0.0376157239, -0.0433075093, 0.0193844661, 0.0584268570, 0.0307480544, 0.0336088613, -0.0602426305, 0.0394772291, -0.0446074530, -0.0278760716, -0.0609800778, 0.0238691866, -0.0287758783, -0.0000827610, 0.0540345013, -0.0629906207, 0.0030132979, -0.0262538530, 0.0058897436, -0.0258965455, 0.0587362647, -0.0552060977, 0.0605941415, 0.0193731636, 0.0231165141, -0.0131653063, 0.0135466829, 0.0512081459, 0.0318619087, 0.0608454496, -0.0050862059, 0.0522058010, 0.0306291580, 0.0569585264, -0.0302307643, 0.0581588000, 0.0653166622, -0.0500567108, 0.0075850710, 0.0539072752, -0.0482042357, 0.0213949457, -0.0562432110, -0.0333553739, -0.0272308476, 0.0624120981, 0.0376581401, 0.0557713956, -0.0154847093, -0.0512195677, 0.0043168887, -0.0370810702, -0.0290227048, -0.0508713983, 0.0303757265, 0.0363310948, 0.0358744040, -0.0639779419, -0.0719486102, -0.0452422276, -0.0056656674, 0.0656954646, -0.0346649513, 0.0279043913, 0.0705909878, -0.0357546993, -0.0224994719, 0.0580275357, 0.0599379689, 0.0009410307, -0.0673469156, -0.0170949139, 0.0463389456, 0.0552201569, -0.0656780526, 0.0143329129, -0.0667483956, 0.0534607619, 0.0295744464, -0.0363471843, -0.0182178542, -0.0211548992, -0.0421580374, 0.0092824772, -0.0035118535, -0.0365865268, -0.0154422782, 0.0382560268, -0.0167742223, -0.0206455551, 0.0579196066, -0.0440313816, 0.0348245054, 0.0031812042, 0.0253767595, -0.0182193518, -0.0426265672, 0.0577358305, -0.0511207357, 0.0603286326, 0.0716797411, 0.0401124582, -0.0119575895, 0.0215164870, -0.0188612863, 0.0633395463, -0.0160340220, 0.0690128356, -0.0200104676, 0.0485505685, -0.0024498254, 0.0568459928, -0.0011158511, -0.0638823807, 0.0647794008, 0.0478435904, 0.0595874786, -0.0255121030, 0.0395621285, 0.0553861111, 0.0219104812, -0.0553982593, -0.0443118960, -0.0189544782, -0.0204995759, -0.0536783114, -0.0611131154, -0.0302804559, -0.0151892044, 0.0625703633, -0.0610619970, -0.0631791353, -0.0032857284, -0.0125215985, -0.0503129996, 0.0557510704, -0.0454400331, 0.0061482862, -0.0009935275, 0.0517340600, -0.0115011558, 0.0450804159, -0.0026676431, -0.0026651323, 0.0151671469, 0.0480019599, 0.0159894079, -0.0094170496, 0.0477453619, 0.0006362572, 0.0359590575, 0.0675312728, -0.0708205253, -0.0632383078, 0.0256489292, 0.0302021131, 0.0105616376, -0.0516965985, -0.0306543671, 0.0656531900, 0.0717785209, 0.0618853867, 0.0633989275, 0.0259369314, -0.0256287269, 0.0382964090, -0.0640065596, -0.0221485682, 0.0253223553, 0.0237966627, 0.0252051428, -0.0288118571, 0.0175403208, -0.0564516857, 0.0452316105, 0.0429318398, 0.0116528496, -0.0275190026, 0.0657616407, 0.0410180613, 0.0106994733, -0.0205633938, -0.0041157305, 0.0375807285, 0.0621818900, 0.0590416789, -0.0429214165, -0.0717635006, -0.0646375492, -0.0188080184, 0.0026783645, 0.0199976638, 0.0588041991, -0.0556495562, 0.0581321120, -0.0353062861, -0.0145720989, 0.0423465669, 0.0114736930, -0.0373508856, -0.0358068869, -0.0318532921, -0.0655189827, 0.0199482664, -0.0651362091, -0.0604318976, -0.0433205664, -0.0209076591, 0.0528817624, 0.0588255227, 0.0413615182, 0.0589698255, -0.0653615743, -0.0030021146, -0.0707178563, 0.0108257905, -0.0577464141, 0.0082694739, 0.0355864763, -0.0147542618, 0.0587771982, -0.0196428522, -0.0336905532, 0.0603433400, -0.0567608848, 0.0177261159, 0.0093389153, 0.0220314264, -0.0080784783, -0.0075116307, -0.0590852574, -0.0533197969, -0.0183258094, 0.0432762131, 0.0005760342, -0.0009805411, -0.0431472510, 0.0359290540, 0.0057352111, 0.0474394336, -0.0556368083, 0.0702379644, 0.0561216623, 0.0586675406, -0.0061795712, -0.0604130067, 0.0518353879, -0.0299636871, 0.0617381781, 0.0615881979, -0.0693674460, -0.0064780638, -0.0078961626, 0.0697340965, -0.0160757117, 0.0001161397, -0.0448321477, -0.0264107585, -0.0426124409, 0.0266844258, 0.0445647463, -0.0197688900, 0.0351732075, -0.0503243580, -0.0622132234, -0.0053924769, 0.0230058730, 0.0464355797, -0.0143443383, -0.0366771668, 0.0297072232, 0.0046364963, -0.0518776625, 0.0697444081, 0.0416800976, 0.0502801165, 0.0413789451, 0.0406192169, 0.0171227008, -0.0547675267, -0.0286668763, 0.0228379071, 0.0167153403, -0.0621045157, -0.0114527531, -0.0121592842, -0.0035510883, 0.0453021377, -0.0681127384, 0.0519912392, 0.0125812367, -0.0421984345, -0.0423859358, 0.0570614338, 0.0255839378, 0.0060925558, 0.0027607083, 0.0638648272, -0.0429786444, 0.0375676006, 0.0235656127, 0.0188013613, 0.0180971175, -0.0164634921, -0.0051582307, -0.0241067372, 0.0513853356, 0.0565195680, -0.0520513766, 0.0366000831, -0.0621865876, 0.0368317515, 0.0342580229, 0.0012143254, 0.0092390031, 0.0010946319, -0.0597510599, 0.0705437064, 0.0417420343, -0.0637485981, -0.0087231845, 0.0136063024, 0.0198202506, -0.0578144826, -0.0586294085, -0.0550096184, 0.0056828335, 0.0409585312, 0.0136345252, 0.0219878107, -0.0123460740, -0.0386263579, -0.0349605568, -0.0083827749, -0.0407067649, 0.0434054285, -0.0460992455, 0.0001736432, 0.0571473539, -0.0038319454, 0.0155897737, -0.0358267240, -0.0280995145, -0.0111632422, 0.0091215298, -0.0349831656, -0.0119571947, 0.0497076809, -0.0695039108, 0.0601524115, 0.0318144560, -0.0642807260, 0.0192477405, -0.0313808210, 0.0616751611, -0.0000569522, -0.0317738652, 0.0514402092, -0.0475631431, -0.0227166004, 0.0592419505, 0.0361615643, -0.0619850308, -0.0044601485, -0.0572321489, -0.0036928877, 0.0187983438, 0.0391591340, 0.0142873153, 0.0494140685, -0.0689120144, -0.0651723221, -0.0646718442, 0.0486679822, -0.0600596368, 0.0306595117, 0.0699376017, -0.0287859626, -0.0152272843, 0.0459232405, 0.0059323460, -0.0502730310, -0.0321802124, -0.0250777453, -0.0534565710, 0.0445817634, 0.0578229427, 0.0191922858, -0.0214785486, 0.0421143174, 0.0671803653, -0.0676295683, -0.0148348063, -0.0483454503, 0.0392512605, -0.0041783601, 0.0069164336, 0.0055797696, -0.0705312714, 0.0385037661, 0.0025225580, 0.0705757886, 0.0443097651, 0.0261536986, 0.0548124313, -0.0267414823, 0.0574393272, 0.0421497449, 0.0286121741, 0.0005508289, 0.0521382838, -0.0582280718, 0.0464865565, 0.0271345973, -0.0202025436, 0.0412134901, 0.0208207816, -0.0600592420, -0.0247152783, -0.0413624495, 0.0111629814, -0.0056385472, 0.0433702916, 0.0034918636, -0.0393796526, -0.0101943649, 0.0452666804, 0.0024734512, -0.0632375702, -0.0310202949, -0.0360332876, 0.0419590995, -0.0025335550, 0.0121998936, 0.0521719456, -0.0404083878, 0.0270498693, 0.0453631878, -0.0579024926, 0.0051143020, 0.0404367074, -0.0016558394, 0.0524167195, -0.0044586211, 0.0383322835, -0.0669467673, 0.0073364526, -0.0563150495, 0.0546254069, -0.0029586852, -0.0501580238, 0.0219901800, -0.0357863232, 0.0100578666, -0.0179855525, 0.0168570727, -0.0460097529, 0.0201890841, 0.0168525949, 0.0423743725, 0.0190196559, 0.0222356990, 0.0683776289, -0.0113575347, 0.0045201331, 0.0341525078, 0.0560406893, -0.0570862889, -0.0579010807, -0.0244055428, 0.0678630173, -0.0243126489, -0.0464033149, -0.0343184993, -0.0209614299, 0.0713139176, 0.0560347736, -0.0680278465, -0.0388519838, -0.0473374836, -0.0437198579, 0.0523625910, -0.0307550244, 0.0671492517, -0.0004474372, -0.0016824752, 0.0641505271, 0.0358224213, -0.0302436501, 0.0124039426, -0.0377924852, -0.0339175910, -0.0680761412, 0.0515507907, -0.0656010062, 0.0106057376, -0.0506819412, -0.0097406842, 0.0490385741, -0.0119736791, 0.0629876554, -0.0272932239, -0.0719676539, 0.0343253687, 0.0370961949, 0.0221856087, -0.0176021084, 0.0215316862, -0.0206004381, 0.0151526779, 0.0263952911, -0.0441606008, -0.0456568338, 0.0214392021, -0.0291067921, 0.0446714610, 0.0319565833, -0.0135796182, 0.0635034293, 0.0030966997, 0.0458976850, -0.0125573166, -0.0505686700, 0.0165845901, -0.0284035318, 0.0389379114, 0.0022402033, 0.0492273122, -0.0222717971, -0.0453703478, -0.0550996736, -0.0572021753, -0.0352320895, 0.0191270933, 0.0138621479, 0.0440001190, -0.0718075857, 0.0030603930, -0.0635056496, -0.0105632357, -0.0332382508, 0.0023715198, 0.0162769556, 0.0580059439, 0.0643840432, -0.0669268593, -0.0689981133, -0.0464892089, 0.0613569617, -0.0687162727, 0.0542072356, 0.0418511629, -0.0685348436, -0.0079568624, -0.0078591332, 0.0671452582, 0.0620437264, 0.0540440530, 0.0498555675, 0.0119610503, 0.0025016665, -0.0390249081, -0.0221873149, -0.0105493851, -0.0484263003, 0.0341568962, 0.0256763548, 0.0199958086, -0.0365298986, 0.0700895935, -0.0519857518, 0.0346685499, 0.0691820830, 0.0582687408, 0.0640579164, -0.0433787778, 0.0128570721, -0.0102633126, -0.0636541396, 0.0054949224, 0.0463924408, -0.0050310940, 0.0055896640, 0.0026996285, 0.0543313473, -0.0174514316, -0.0178099945, -0.0649627820, 0.0702253729, 0.0315959379, 0.0235361904, 0.0488561168, 0.0409956425, 0.0718398690, 0.0418547541, -0.0514161512, -0.0627861619, -0.0348460637, -0.0427888557, 0.0182592571, -0.0014133677, 0.0088653937, 0.0593225062, 0.0398896709, -0.0498925783, -0.0369913578, 0.0398229212, 0.0701080412, -0.0541561842, 0.0308331624, -0.0502667837, -0.0671517625, -0.0607365370, -0.0581817701, 0.0370924771, 0.0708762407, 0.0106441900, 0.0522519723, 0.0107781962, 0.0656061620, 0.0679684877, 0.0206576660, 0.0681797862, 0.0315168723, 0.0439973995, -0.0110406466, -0.0032723248, -0.0133222453, 0.0590472370, 0.0539490134, 0.0264512599, -0.0303730965, -0.0099081881, 0.0585650206, 0.0668984503, -0.0179999880, -0.0423112959, -0.0447261930, -0.0332863256, -0.0592290536, -0.0576893389, 0.0367115289, -0.0109263770, -0.0534792654, 0.0341343582, 0.0025303513, 0.0149336234, -0.0083756521, 0.0553371459, -0.0012277439, 0.0700835884, 0.0256587043, 0.0167110413, 0.0235062912, 0.0570110530, 0.0475206822, 0.0208576247, -0.0699254498, 0.0651078671, 0.0390409306, 0.0078217089, -0.0711915269, 0.0045022070, -0.0106755756, 0.0124772936, 0.0540754348, -0.0008928403, -0.0554712638, 0.0130246803, -0.0206328407, -0.0323620476, -0.0427264124, -0.0346288010, 0.0560245514, -0.0541495234, -0.0365714170, 0.0077644959, 0.0635465384, -0.0249307528, 0.0490090176, 0.0028181151, -0.0389105044, -0.0265702084, -0.0227863565, 0.0035759881, -0.0391984545, -0.0361559018, -0.0507574081, 0.0562785417, 0.0668764859, 0.0057739615, -0.0471770316, -0.0644510016, -0.0497951210, -0.0712171495, -0.0238675885, 0.0380251482, -0.0348476470, -0.0049993470, -0.0670669526, 0.0326622352, -0.0552594215, 0.0024638996, -0.0425585136, 0.0563746244, 0.0210931823, 0.0340802595, -0.0379644446, 0.0526113063, 0.0307304710, -0.0501448587, 0.0710706562, 0.0720142126, -0.0219458938, 0.0559238046, -0.0147650875, 0.0222350657, 0.0211321712, 0.0200829431, 0.0337924361, 0.0302401930, 0.0142809153, 0.0088465065, 0.0116639957, -0.0489613712, 0.0459878147, 0.0195213407, -0.0093721449, 0.0092710182, -0.0274613984, -0.0002728254, -0.0330824628, 0.0207727775, -0.0437914059, -0.0646294653, 0.0496649221, -0.0041478872, 0.0214534998, -0.0547528490, -0.0484502204, -0.0538746342, -0.0360778198, 0.0699420124, -0.0518275201, 0.0640402883, -0.0639201626, -0.0167241693, 0.0427843481, 0.0411443412, -0.0707341805, 0.0144745559, -0.0404905155, 0.0493016243, -0.0495851524, 0.0429246128, 0.0100692064, -0.0445849597, 0.0259007290, 0.0687705427, 0.0709008574, 0.0551721603, -0.0318961367, 0.0193525106, 0.0190802068, -0.0030113757, 0.0197548121, -0.0067339242, 0.0664567351, -0.0685000867, -0.0551861227, -0.0127823427, 0.0323970616, 0.0658734292, -0.0138558671, -0.0497045964, -0.0470250696, -0.0611231662, -0.0045421720, -0.0252960771, 0.0614102036, -0.0652115196, 0.0116062686, -0.0706365034, 0.0681036264, 0.0374381691, -0.0075623766, 0.0075572655, 0.0648052543, 0.0654377490, -0.0276336148, -0.0158290416, 0.0193054006, -0.0183401406, -0.0260563083, -0.0178159997, -0.0016990975, -0.0297885090, 0.0511515662, -0.0359254405, -0.0542408377, 0.0640193075, -0.0040834025, -0.0294749215, 0.0336348936, 0.0701429844, 0.0502525195, -0.0116161965, -0.0226574466, 0.0432917476, -0.0465755686, -0.0663466454, -0.0383318886, -0.0348679870, -0.0324742869, -0.0397755392, -0.0550988838, -0.0464686975, -0.0326546617, 0.0220639780, 0.0703028738, 0.0016269684, -0.0430855304, -0.0132580139, -0.0200950541, 0.0565895885, 0.0712221265, -0.0396191850, -0.0141705722, 0.0329807699, 0.0129665881, 0.0587861538, 0.0393969789, -0.0074904561, -0.0631334037, -0.0638396218, 0.0010186881, 0.0013921484, 0.0645118058, -0.0695770532, -0.0215618275, 0.0391592085, -0.0041515008, -0.0100082271, -0.0665645599, -0.0551334843, 0.0435513780, -0.0568422675, 0.0527379960, 0.0141353682, 0.0425199047, 0.0174407810, -0.0236760452, 0.0232183188, 0.0337198079, 0.0302712694, -0.0711819977, 0.0600857884, 0.0649571717, 0.0121777952, 0.0154158324, -0.0291360579, 0.0233683810, 0.0104852542, -0.0246680453, -0.0553035364, 0.0254718959, 0.0268588439, 0.0160107613, -0.0701901317, -0.0587633774, 0.0703791976, -0.0244931243, 0.0174761936, -0.0500561967, 0.0009680688, 0.0387603641, 0.0067194328, -0.0653680116, -0.0189785510, 0.0520391762, 0.0046330765, -0.0504582226, 0.0187456459, -0.0234144218, -0.0393465646, 0.0260776803, -0.0689417794, -0.0581918880, 0.0663976371, 0.0633452088, -0.0490608402, 0.0081922635, -0.0127614364, 0.0304499194, -0.0241052918, 0.0660718530, -0.0515009090, -0.0000744686, 0.0614504665, 0.0365259573, 0.0541815907, -0.0243021846, -0.0336207487, -0.0598422699, -0.0543810502, 0.0577490181, 0.0698688626, 0.0199614093, -0.0620108098, -0.0215496980, 0.0100949109, -0.0331789926, 0.0519018024, -0.0604695976, 0.0228179470, -0.0463782251, -0.0346374214, 0.0242285281, -0.0525974557, -0.0138670504, -0.0445666909, -0.0126611255, -0.0415892601, -0.0039255470, 0.0259230956, 0.0390523896, -0.0035582632, 0.0584695637, -0.0206640847, -0.0618376769, 0.0571985245, 0.0473782644, -0.0592451580, 0.0193427429, 0.0020092204, -0.0653207824, 0.0279211700, 0.0286251009, 0.0433934852, 0.0039018914, 0.0117185265, 0.0456425324, 0.0656048208, 0.0486605316, 0.0093915835, 0.0532283634, -0.0586624816, -0.0181396529, 0.0049518272, -0.0356494300, 0.0313809440, -0.0596387200, -0.0708087534, 0.0288272426, 0.0038514063, 0.0464860052, -0.0506635271, 0.0070723370, -0.0680461675, 0.0226301253, -0.0300602131, -0.0590327606, 0.0562751144, 0.0719555318, -0.0389536396, 0.0097570494, -0.0057630837, 0.0066927299, 0.0594276935, 0.0624344945, -0.0079318658, 0.0410520583, -0.0578148589, -0.0096701570, 0.0339707285, 0.0664764643, 0.0401197001, 0.0318122879, -0.0655775517, -0.0688295886, -0.0124485381, 0.0187400207, 0.0412903503, 0.0227734819, 0.0266123340, -0.0157612488, -0.0556219593, 0.0322106332, 0.0215725973, -0.0053916350, 0.0053610951, -0.0698086172, 0.0260866955, 0.0299263671, 0.0066825598, -0.0028365776, 0.0325584784, 0.0342724398, 0.0454230830, 0.0654068440, -0.0473884307, 0.0510064140, -0.0693736747, -0.0033095405, -0.0605124086, 0.0000119433, 0.0159026533, 0.0555262417, 0.0532179177, -0.0459204540, 0.0467750728, -0.0556473732, 0.0260946602, 0.0026395991, -0.0482109301, 0.0405172035, -0.0041221157, -0.0683198348, 0.0702431500, -0.0227705427, -0.0633262321, 0.0504704341, -0.0273848623, 0.0160297528, -0.0456434488, 0.0031665042, -0.0048850626, 0.0647450089, -0.0052487403, 0.0526548773, 0.0649310201, -0.0166162327, -0.0060378909, 0.0345306024, 0.0497589558, -0.0576048903, 0.0065737516, 0.0424335301, 0.0047794506, -0.0621004030, -0.0181619339, 0.0252911597, -0.0282449052, -0.0544816926, 0.0271074474, -0.0091213584, 0.0601814538, 0.0098056942, -0.0659664348, -0.0308097079, -0.0156809986, -0.0544493794, 0.0640784502, -0.0608969033, -0.0153249986, 0.0659824014, 0.0165396482, 0.0084837228, -0.0144059360, -0.0544246696, 0.0418411493, -0.0094960481, 0.0060064718, -0.0200340748, 0.0007864162, 0.0414132252, 0.0002081767, -0.0473082513, -0.0140721500, -0.0660599843, 0.0679908395, -0.0000256747, 0.0103974864, -0.0027303919, -0.0272441506, -0.0685859844, 0.0382922441, 0.0338247269, 0.0022389442, 0.0327162966, -0.0193911754, -0.0027280226, 0.0557041019, -0.0608478971, -0.0100651309, 0.0233294889, -0.0322018228, -0.0350103006, 0.0196728632, 0.0531048179, 0.0523277819, -0.0474497378, -0.0600438938, -0.0262903646, -0.0573647395, -0.0585006550, 0.0259825438, 0.0324256644, 0.0299879685, -0.0517252833, 0.0691765398, 0.0684148371, -0.0061766058, -0.0409732908, 0.0612144172, 0.0155316144, -0.0251561366, 0.0678678006, -0.0457342640, 0.0307050422, 0.0164374113, 0.0082272440, -0.0136018656, -0.0624355301, 0.0334787965, -0.0422381684, -0.0186383091, 0.0036320761, 0.0000158995, -0.0471669361, 0.0249297172, -0.0422263294, 0.0071562678, -0.0163204409, -0.0140956379, 0.0331522003, -0.0629894212, 0.0251524895, 0.0273985267, 0.0428815484, 0.0132106990, 0.0125392824, -0.0579594299, -0.0632475689, -0.0415831544, 0.0132273883, 0.0341915488, 0.0259233043, -0.0172233284, 0.0290122405, -0.0667921826, 0.0622948110, 0.0200217888, -0.0680059046, 0.0658677518, 0.0580898523, 0.0564136356, 0.0306553170, 0.0675148666, 0.0168304369, -0.0240342319, 0.0713982284, 0.0216568112, -0.0231340602, -0.0663957000, -0.0388196185, -0.0417584032, 0.0253965259, 0.0527249724, 0.0182738602, -0.0652045384, -0.0132962652, -0.0507262275, 0.0551744699, -0.0657266304, 0.0470799729, -0.0669675022, 0.0095649585, 0.0098517165, -0.0542727038, 0.0509194583, -0.0317215770, -0.0685398206, 0.0236498415, 0.0444253534, 0.0152484849, -0.0610377714, -0.0592104197, -0.0637798309, 0.0516968220, 0.0345745683, -0.0291246362, -0.0716095269, 0.0282052979, 0.0325484425, 0.0273579732, 0.0250178874, -0.0590102747, 0.0282880068, -0.0693217814, -0.0714455321, 0.0572326630, 0.0013257712, -0.0123500153, 0.0399717093, -0.0696976334, -0.0382280834, -0.0162377954, -0.0146593712, -0.0616815984, 0.0467785522, 0.0446761549, 0.0045771748, 0.0322535634, 0.0467169359, 0.0418953449, 0.0045027211, 0.0701297373, -0.0552090928, 0.0346200094, -0.0326087698, 0.0680679530, 0.0566727519, 0.0168021172, -0.0415429622, 0.0634698719, 0.0599698722, -0.0417362750, -0.0284384973, 0.0555771589, 0.0235458612, -0.0194899738, -0.0371492952, 0.0274439305, -0.0404280536, -0.0655015483, -0.0275448672, 0.0354547426, -0.0523983948, -0.0108114369, -0.0594083443, 0.0378516242, -0.0649641603, 0.0162875950, -0.0128219686, 0.0198881850, -0.0308423974, 0.0468914956, -0.0119862370, -0.0190913901, 0.0212493613, -0.0540626310, -0.0130727366, -0.0418367237, 0.0109133869, 0.0157456100, -0.0259868279, -0.0116365887, 0.0279714614, -0.0134589151, -0.0195576288, 0.0075432062, -0.0057915300, -0.0005592927, -0.0531564914, -0.0636448786, 0.0185504034, -0.0305988602, -0.0377870314, 0.0646409541, 0.0507218540, 0.0547255427, 0.0342475772, 0.0187371597, -0.0093413293, -0.0336161703, 0.0328300595, -0.0115839019, -0.0642289817, 0.0095970631, -0.0006943271, -0.0118784048, 0.0720128864, -0.0177700594, 0.0686527640, -0.0050580725, 0.0197594985, -0.0369021930, -0.0066937804, 0.0179791376, 0.0593248457, -0.0535103083, -0.0653971434, -0.0644554347, 0.0392223671, 0.0070015341, -0.0003655702, -0.0330377109, 0.0649081618, 0.0667434782, 0.0357624441, -0.0357651785, -0.0398490429, 0.0679021478, 0.0317776501, 0.0574580580, -0.0209397338, -0.0526130795, 0.0580938905, -0.0210653394, 0.0435530916, -0.0312304199, -0.0673811063, -0.0637420416, -0.0400231369, 0.0284873247, 0.0320226550, -0.0203940682, -0.0573477075, -0.0671187937, -0.0554344095, 0.0178621337, -0.0715546161, 0.0191290379, -0.0141112432, 0.0333464444, -0.0038147941, -0.0680917278, -0.0321789905, -0.0237538517, -0.0571132712, 0.0061277971, 0.0313319415, -0.0007884800, -0.0177913941, -0.0028951317, 0.0679392815, -0.0429723263, 0.0698850155, -0.0003417730, 0.0688975006, 0.0040439144, 0.0047916472, 0.0454081297, 0.0546049178, -0.0454143770, -0.0367902145, -0.0320265926, 0.0072337836, -0.0563095436, 0.0350162685, 0.0085838288, -0.0113669634, -0.0481279418, 0.0063298494, 0.0051707923, 0.0247303322, 0.0099313632, -0.0517113097, -0.0677772015, 0.0158916414, 0.0038630068, -0.0132596307, -0.0434533656, -0.0356064662, 0.0064508915, 0.0060170740, -0.0219548047, 0.0392901972, -0.0609508939, -0.0304066464, 0.0721353889, -0.0195338838, -0.0344389454, 0.0556065142, -0.0544621944, -0.0335537978, -0.0351551771, -0.0564196631, 0.0156488717, -0.0001410395, 0.0246199369, 0.0440373868, -0.0547964647, 0.0451093242, -0.0189334676, 0.0668199658, -0.0651843548, -0.0626644641, -0.0625270531, 0.0472771600, 0.0324215144, -0.0379325449, 0.0368720815, -0.0019905046, 0.0190570429, -0.0381854288, -0.0013093874, -0.0257551260, -0.0000476614, -0.0261996016, 0.0186120346, -0.0477182083, -0.0530658476, -0.0208173767, -0.0334279686, 0.0487745777, -0.0713061914, 0.0213743970, -0.0450949073, 0.0377768427, 0.0495335534, 0.0595693290, 0.0269393250, 0.0463696569, -0.0171965025, 0.0433671251, -0.0643408075, -0.0342313163, -0.0600830577, -0.0059500709, -0.0002286211, 0.0093227103, -0.0582606420, 0.0534954965, 0.0193037167, -0.0098013729, 0.0413869172, 0.0046960711, 0.0474799871, 0.0686249286, -0.0551869646, -0.0556006208, 0.0148748457, -0.0042489246, 0.0713223964, -0.0324012265, 0.0231277272, 0.0688309968, 0.0658980757, -0.0201318227, 0.0368453786, -0.0027147382, 0.0528976768, -0.0208540782, -0.0300761648, 0.0613593012, 0.0434844941, -0.0338961184, 0.0285433680, 0.0359229818, -0.0070439279, 0.0451280773, 0.0096928552, -0.0483825132, 0.0445272997, 0.0517004728, 0.0685645044, 0.0088877156, -0.0222300887, -0.0046062171, 0.0540406555, -0.0265062191, -0.0531333834, -0.0235848166, -0.0011913031, -0.0664053857, -0.0464098528, -0.0114029758, 0.0428376049, 0.0179906115, 0.0155500099, -0.0083359405, 0.0382907465, 0.0308027864, 0.0362646803, -0.0487727523, -0.0656974986, 0.0383432433, -0.0626349896, 0.0498157144, -0.0574051440, -0.0342017040, -0.0340387598, 0.0270387083, 0.0217961296, 0.0123672932, 0.0573498011, 0.0375480503, -0.0134028569, 0.0502945334, -0.0348194316, -0.0110324360, -0.0652120337, 0.0485446304, 0.0026443824, 0.0545532405, -0.0594631806, -0.0456041470, -0.0569590479, 0.0282106698, 0.0672781616, -0.0249016397, -0.0069495887, 0.0214108601, -0.0287228823, -0.0681424737, 0.0483618155, -0.0402099304, -0.0694523603, 0.0156842321, -0.0239771232, -0.0158719905, 0.0136077181, 0.0061113983, -0.0188381784, -0.0062473118, -0.0416853428, -0.0244688466, 0.0698458552, 0.0522804782, -0.0616428331, 0.0330574960, -0.0530514978, 0.0573008955, 0.0124452338, 0.0507541373, -0.0274853148, -0.0026307851, -0.0491919182, -0.0593501329, -0.0603652932, 0.0566875637, 0.0341351852, 0.0316107869, -0.0467552543, 0.0608940721, 0.0063011646, 0.0131516457, 0.0306053460, -0.0375415124, 0.0320362300, 0.0431696475, -0.0188175999, -0.0050168261, -0.0543358698, -0.0612973459, 0.0646060407, 0.0320470035, -0.0339220129, 0.0458899438, -0.0459043309, 0.0352887660, 0.0451786369, 0.0285732746, -0.0605618581, 0.0090353936, 0.0291474536, -0.0454982594, -0.0601516217, -0.0394687839, 0.0118067786, -0.0609565750, 0.0156402364, -0.0529478639, -0.0662397891, 0.0154601708, -0.0521497466, -0.0034273714, -0.0677954033, 0.0153062418, 0.0045502782, 0.0350560173, -0.0328651480, -0.0387378745, -0.0050105825, -0.0641123280, 0.0564814359, 0.0425899848, -0.0470317081, 0.0119608417, -0.0140519328, -0.0129810609, 0.0110101700, -0.0236234106, -0.0610140413, 0.0140105188, -0.0091467351, 0.0407136604, -0.0450534075, 0.0511061624, -0.0256075822, 0.0444556549, 0.0457457006, 0.0669929534, -0.0569016822, -0.0076601431, -0.0196636058, -0.0583994128, -0.0454079770, 0.0171357840, 0.0621549338, 0.0117643774, -0.0626461208, 0.0511495247, -0.0611672327, -0.0643532649, -0.0080799088, -0.0561391823, 0.0497075096, 0.0398709327, -0.0423866063, 0.0504806042, 0.0077455863, -0.0359641351, -0.0171209835, -0.0223684125, -0.0565414652, 0.0297485515, 0.0657206029, 0.0327771008, -0.0011047199, -0.0047822520, -0.0387625657, -0.0253740065, 0.0695399940, -0.0258109458, -0.0638221055, -0.0431380272, -0.0483449176, 0.0579185486, -0.0645120814, 0.0418073162, 0.0178852379, 0.0174039453, 0.0231176317, 0.0219752118, -0.0245713629, 0.0521617234, 0.0626391470, -0.0111988932, 0.0242443234, 0.0220289677, 0.0255690590, -0.0145422816, -0.0033312738, 0.0552431196, 0.0537045002, -0.0444105752, 0.0664952546, -0.0691421255, -0.0199020840, -0.0367681198, -0.0450250842, 0.0374682322, 0.0439592004, -0.0248979926, -0.0112226866, -0.0264289789, -0.0294890814, -0.0090280697, -0.0588760115, -0.0180001445, 0.0703424066, -0.0382459238, -0.0071445182, -0.0358388722, 0.0624097586, -0.0258792713, 0.0320821032, 0.0492386669, 0.0203525499, 0.0525347739, 0.0685093105, 0.0492990762, 0.0614341646, -0.0004767403, -0.0666260570, 0.0177374706, 0.0514155850, 0.0570257604, -0.0373341069, -0.0314221680, -0.0157913789, -0.0506932437, 0.0622518808, -0.0564668253, 0.0477728769, 0.0232831389, -0.0189016014, -0.0305768698, -0.0566873252, 0.0535886884, -0.0643245131, 0.0082426146, -0.0565273240, -0.0648559332, -0.0009431168, -0.0246248581, -0.0388424024, 0.0206344575, 0.0592352152, -0.0195213929, 0.0162881464, -0.0157145672, 0.0519140735, 0.0203977153, -0.0300136022, 0.0212201104, -0.0518837720, -0.0118800253, -0.0110735968, -0.0200543106, 0.0502702072, -0.0080682635, 0.0282361805, -0.0034947544, -0.0366425849, 0.0124230385, -0.0213054195, 0.0447824076, -0.0559611842, -0.0080810785, -0.0113989860, -0.0014561787, 0.0031424388, -0.0608657561, 0.0569505543, 0.0452837795, -0.0461494699, 0.0526503474, 0.0411010683, -0.0141006783, -0.0525243804, -0.0280178674, -0.0528930090, 0.0514295250, -0.0689759180, 0.0096447766, -0.0567000769, 0.0458884463, 0.0250327662, 0.0369137079, -0.0256870762, -0.0342008248, -0.0036885515, -0.0024053305, -0.0015663505, -0.0442832634, -0.0321710594, 0.0583673567, 0.0499138087, -0.0031853840, -0.0345794857, 0.0222411528, 0.0362966806, 0.0159855336, 0.0384368822, -0.0066169351, 0.0054153278, 0.0257254466, 0.0697643608, 0.0203549936, 0.0636395663, 0.0326006860, 0.0687791258, -0.0468906835, -0.0093545392, 0.0581909716, 0.0258528590, -0.0401619412, 0.0051509887, 0.0592491776, 0.0234325752, 0.0291701481, 0.0207955614, 0.0249617100, -0.0548218265, -0.0441632159, 0.0439814478, 0.0621360987, 0.0018495619, 0.0392084345, -0.0578972250, 0.0415346995, 0.0485630557, -0.0273357891, -0.0251721404, 0.0011576489, -0.0692499802, 0.0450904146, 0.0058842897, -0.0514537655, -0.0446437038, 0.0448328704, -0.0053867847, -0.0406214558, -0.0365874022, 0.0622293055, -0.0149864815, -0.0246649832, -0.0621107258, -0.0091581121, 0.0676458478, 0.0335274562, 0.0642389655, 0.0475456789, -0.0026936084, 0.0536323339, -0.0312849469, -0.0297640935, -0.0248211138, 0.0029956847, 0.0012256950, 0.0219214261, -0.0443877056, 0.0182624683, -0.0180235282, -0.0179854669, 0.0706513524, 0.0355444402, -0.0177671500, -0.0581243336, -0.0342893861, -0.0452635139, 0.0625207126, 0.0684996396, -0.0064025819, 0.0508049950, -0.0032884628, 0.0520004109, -0.0344193801, -0.0361657068, 0.0464968979, -0.0177590996, -0.0510311052, 0.0071010515, -0.0716372058, -0.0300292596, 0.0434839427, -0.0629751384, -0.0718938261, -0.0079976097, 0.0524216220, -0.0251247026, -0.0030955672, 0.0423170924, -0.0602650307, 0.0194460154, -0.0614521503, 0.0691145808, -0.0568603016, 0.0356582776, -0.0678909346, 0.0325011313, -0.0656901523, 0.0456162468, 0.0227738619, -0.0161858164, 0.0553370267, 0.0086854845, 0.0082898438, 0.0401099250, 0.0076596960, 0.0607820302, 0.0443681106, -0.0240090750, -0.0302779600, 0.0346271694, -0.0521255545, 0.0614069104, 0.0480071381, 0.0211819634, 0.0281504095, -0.0011985302, 0.0489430651, -0.0365316719, 0.0693399012, -0.0183527544, 0.0149342790, -0.0486499369, -0.0238453560, -0.0045705140, 0.0128097683, -0.0607378446, 0.0097661018, 0.0435275957, 0.0327680185, 0.0181443840, 0.0714580417, -0.0146851614, -0.0667442456, -0.0110044591, 0.0670647025, -0.0096444190, -0.0183537155, 0.0334474295, 0.0038911179, 0.0166184679, -0.0238320231, 0.0416689813, 0.0032476336, -0.0662670285, 0.0519559309, -0.0346785262, -0.0055301115, 0.0018781647, -0.0416825376, -0.0378670394, -0.0300552063, 0.0634240657, 0.0554989874, 0.0098258406, -0.0170045830, -0.0277407765, 0.0079674125, -0.0200307183, -0.0690775216, 0.0425820500, 0.0336336866, -0.0447289646, -0.0632741004, -0.0599447526, -0.0182240680, 0.0463353321, -0.0026679039, 0.0391687527, 0.0435142443, 0.0587185621, 0.0363909379, 0.0338988900, 0.0663789362, 0.0097451434, 0.0543946773, 0.0225915983, -0.0639449209, -0.0046136007, -0.0459088385, -0.0129296295, 0.0424589962, -0.0090024769, -0.0370150842, -0.0318700150, -0.0592700019, -0.0118036270, -0.0466371141, -0.0213447884, 0.0444940925, -0.0570744351, 0.0461452380, 0.0705423951, -0.0632639974, -0.0302445106, 0.0079169646, -0.0125209801, -0.0416627824, 0.0029383153, 0.0411180332, 0.0438497365, -0.0161410645, -0.0228698403, 0.0291956663, 0.0012977049, 0.0498064458, 0.0259218067, -0.0428514704, -0.0606569238, 0.0625317097, 0.0112658069, 0.0480886251, -0.0653863028, 0.0148764774, -0.0079410374, 0.0578724295, -0.0265652537, -0.0583416000, -0.0093702525, -0.0203141421, -0.0063778162, 0.0334512666, -0.0447832644, -0.0102157034, -0.0236836523, -0.0407360159, -0.0386561602, 0.0164510906, -0.0637288317, -0.0314774178, 0.0004499108, 0.0190527961, -0.0512030348, 0.0369602293, 0.0153047815, 0.0077604055, -0.0699228868, -0.0244095698, 0.0066519007, 0.0401868075, -0.0002780706, -0.0363824405, 0.0684269965, -0.0074888542, -0.0510057136, -0.0409519561, -0.0632092357, 0.0646287650, 0.0036947578, -0.0479216203, 0.0239094123, 0.0068232790, -0.0685412809, 0.0684960335, 0.0617322475, -0.0146426968, 0.0257396922, -0.0543646738, -0.0421624780, -0.0661089569, 0.0033796951, -0.0449161828, -0.0690371543, -0.0276495144, 0.0323694125, 0.0411209911, 0.0286718830, 0.0418929905, 0.0465991944, 0.0355070457, 0.0618238896, 0.0276491866, 0.0607012361, -0.0353837982, 0.0440073237, 0.0011363924, 0.0194266215, -0.0019550025, -0.0185952075, -0.0161444359, 0.0070950165, -0.0503382608, -0.0590064526, -0.0391915180, -0.0524010956, 0.0572162867, -0.0506261066, 0.0344460160, 0.0388897508, -0.0698415861, 0.0064474344, 0.0721525848, -0.0548874885, -0.0281078406, 0.0342566594, -0.0169299915, 0.0183702558, 0.0536778271, 0.0340126231, 0.0085043907, -0.0074524432, -0.0565716140, 0.0343785882, 0.0445111319, 0.0282420889, 0.0043912753, 0.0398807377, 0.0432247818, 0.0069937184, -0.0543639138, 0.0027832314, 0.0334366560, -0.0699578822, -0.0115531012, 0.0639854968, -0.0282716639, 0.0503952801, -0.0283649899, 0.0008555353, 0.0554064363, -0.0123029388, -0.0344038941, 0.0110149384, 0.0569207370, -0.0576765537, -0.0284289643, 0.0108189061, 0.0210104883, -0.0523480326, -0.0570781343, -0.0540343262, 0.0606631339, 0.0234997123, 0.0292348787, -0.0537354350, 0.0295589268, -0.0632261634, 0.0473632589, -0.0572550669, -0.0028776452, 0.0608634353, -0.0666661114, 0.0482431576, -0.0524234325, -0.0684650391, -0.0690438449, 0.0656556934, 0.0666464269, -0.0191955902, 0.0090346187, 0.0285346434, 0.0012557060, 0.0268482491, -0.0140245222, 0.0710707158, -0.0476506390, 0.0243446529, -0.0480204560, -0.0367694646, -0.0365340449, 0.0506898016, -0.0092933029, 0.0025707036, -0.0687726736, 0.0250335410, -0.0040779114, -0.0409792289, -0.0041676909, -0.0079700425, -0.0714733899, -0.0480182543, 0.0324329734, -0.0223776884, -0.0117002353, -0.0368303731, -0.0354880877, 0.0336047634, -0.0425994322, 0.0382237807, -0.0522310287, -0.0530202016, 0.0635177493, -0.0158825889, 0.0479398593, -0.0563343689, -0.0422834381, -0.0666597784, 0.0364437103, -0.0552664585, -0.0629106313, 0.0282734558, 0.0702131689, -0.0087365732, 0.0686141104, 0.0674359202, -0.0445165336, -0.0697705746, 0.0508616790, 0.0014762729, -0.0063612834, -0.0024185777, 0.0292406082, -0.0266824663, -0.0398558415, 0.0226178542, -0.0391667746, 0.0527203232, -0.0220594220, -0.0460607521, -0.0367238335, 0.0363517106, 0.0623175353, -0.0450963154, 0.0524788871, -0.0280752182, -0.0234789997, 0.0278189778, 0.0313935056, 0.0286770314, 0.0406906232, -0.0337191857, 0.0584493428, 0.0222167075, 0.0571644753, -0.0326750837, -0.0415033847, -0.0245656669, 0.0711442977, -0.0657278821, 0.0281797275, 0.0560823381, -0.0658832043, -0.0034948885, -0.0009284243, -0.0556644239, -0.0581029467, -0.0557266921, -0.0501972511, -0.0462798923, 0.0520769656, -0.0075742677, -0.0609257892, 0.0248875320, 0.0338455662, 0.0050891116, 0.0712975711, -0.0342994183, -0.0517801531, 0.0035560057, -0.0490003228, 0.0209530145, -0.0107917190, 0.0033730045, 0.0618908256, 0.0350805521, -0.0181765780, -0.0628384873, 0.0596838295, 0.0195135102, -0.0364432484, -0.0113874562, -0.0147735849, -0.0097554997, 0.0574896783, -0.0597087145, 0.0397528410, -0.0528599024, -0.0430109911, -0.0555339307, 0.0529491305, -0.0380152389, 0.0186109319, -0.0337777399, -0.0378941223, -0.0044855624, 0.0267705992, 0.0414095595, -0.0282265320, 0.0532084256, -0.0349485464, 0.0334901139, 0.0510219559, -0.0109228343, 0.0080306306, 0.0110787749, 0.0303619280, -0.0269107930, -0.0092100576, 0.0364669412, 0.0707114488, 0.0600230396, -0.0053947344, -0.0082968622, 0.0603283793, -0.0164436214, -0.0510109253, 0.0462935045, 0.0160519853, 0.0567065179, -0.0523535535, -0.0246147215, -0.0696238577, 0.0352895781, -0.0091698095, -0.0587348677, -0.0493270755, -0.0689695850, 0.0357311070, -0.0165367909, 0.0142952800, 0.0454716757, 0.0697445422, -0.0376694426, 0.0385024548, 0.0394872278, -0.0580753461, 0.0040344447, -0.0171322189, -0.0620268956, 0.0639516413, -0.0080261901, 0.0705041289, 0.0522610918, 0.0434244797, -0.0089708343, 0.0485666543, -0.0438615195, -0.0318740085, 0.0326328054, -0.0572162159, 0.0503302068, 0.0196171626, 0.0111008137, 0.0275953114, 0.0407531857, 0.0524762347, -0.0480226241, -0.0106667504, -0.0017240122, -0.0608281791, 0.0553908795, -0.0303337947, -0.0603061020, -0.0705749542, 0.0215040147, -0.0460771173, -0.0433259383, -0.0415008888, -0.0291558281, 0.0693570226, 0.0286996365, 0.0378567651, -0.0668578595, -0.0363665931, -0.0293888226, -0.0644508302, 0.0662955046, 0.0103308782, -0.0546981469, 0.0405303314, 0.0101422817, -0.0461570024, 0.0388112068, -0.0378117748, -0.0220313407, 0.0685601085, -0.0414462760, -0.0290732719, 0.0032029003, -0.0547344014, 0.0700395405, -0.0620459244, -0.0111624300, -0.0478055663, -0.0088166147, 0.0291012377, -0.0139305927, -0.0497596264, -0.0155725293, -0.0429470688, 0.0184256062, 0.0143377334, -0.0412474424, 0.0280444026, 0.0622053593, 0.0425789207, -0.0054120570, -0.0112571530, -0.0306517370, 0.0575242490, 0.0690362453, 0.0502258986, 0.0420582891, 0.0098991916, 0.0177530795, -0.0120022409, 0.0492702574, -0.0153263249, -0.0284363106, -0.0611718595, -0.0160555989, -0.0555571765, 0.0699871629, 0.0288734883, 0.0250102431, 0.0608603358, 0.0190744400, -0.0126625001, -0.0414383970, 0.0689130872, 0.0256409124, 0.0028603524, 0.0097463652, 0.0687401295, 0.0466450825, 0.0254197419, -0.0329890139, 0.0612960905, -0.0063530430, 0.0001417324, 0.0712376982, -0.0305860415, -0.0113331191, 0.0630041212, -0.0515562147, 0.0073610917, -0.0450024568, 0.0074777752, -0.0201435573, -0.0642423555, -0.0219516754, -0.0122425966, 0.0567702651, -0.0320976041, -0.0018126070, -0.0211364180, 0.0553970188, 0.0133075863, -0.0664541647, 0.0152227581, 0.0623706132, -0.0136800520, 0.0229998678, 0.0311070830, 0.0034612343, 0.0311417356, 0.0139503777, 0.0328130648, 0.0462660939, -0.0061466843, -0.0085893348, 0.0547496974, 0.0320906714, -0.0139331743, 0.0123101845, -0.0206021443, 0.0115436390, -0.0129116848, 0.0683012009, 0.0581129640, 0.0117119029, -0.0134760514, -0.0678853393, -0.0636902153, 0.0715797693, -0.0562638938, 0.0247755125, -0.0218300931, -0.0647380725, -0.0275547057, 0.0019217804, -0.0063907430, 0.0442240238, -0.0496871844, 0.0450865626, -0.0149366520, -0.0222118869, 0.0285714865, -0.0466403328, 0.0496615171, 0.0184121504, -0.0634042472, 0.0414471552, -0.0440529734, -0.0183653831, 0.0416266844, -0.0301266834, 0.0561666936, -0.0327881835, -0.0254063196, -0.0657723770, -0.0702460706, 0.0225124806, -0.0070357546, -0.0066057369, 0.0566774905, -0.0265865736, 0.0235853717, -0.0658354759, 0.0433409214, 0.0696846396, -0.0202874914, 0.0461494997, -0.0680690557, 0.0409206897, -0.0137957633, 0.0467696935, 0.0113504454, -0.0164933465, 0.0277287364, -0.0580985397, 0.0279343128, 0.0063562915, -0.0213822462, -0.0609904863, -0.0199511237, -0.0038794205, 0.0058830529, 0.0436600819, -0.0065082461, 0.0453831628, -0.0479880385, 0.0625743270, -0.0040732995, -0.0567932129, 0.0628288388, -0.0574010797, -0.0217789374, 0.0108704194, 0.0268590227, -0.0483815148, -0.0593613684, -0.0477096066, 0.0658663213, -0.0322702527, -0.0531187057, 0.0014242604, -0.0324803591, -0.0403683148, 0.0482139960, 0.0650948137, 0.0211163908, 0.0034668967, 0.0613854080, 0.0042634681, -0.0235226527, -0.0136925615, -0.0115754716, -0.0460591353, -0.0491472855, -0.0135481320, 0.0531575978, -0.0499565005, 0.0287449211, -0.0119686872, 0.0142426118, 0.0698784590, 0.0257198364, 0.0151617453, -0.0537684187, -0.0072349533, -0.0522070974, -0.0632005110, 0.0451997966, -0.0235219449, -0.0416501723, 0.0675459802, -0.0534818098, 0.0102380365, 0.0366752446, -0.0074240714, 0.0139980912, -0.0048877448, 0.0086233392, 0.0401828289, -0.0612391531, 0.0544551909, 0.0583731383, -0.0667151660, 0.0175654441, -0.0237003565, -0.0604928955, -0.0694338456, 0.0139504820, -0.0594533198, 0.0350929424, 0.0687698573, -0.0473451242, 0.0152584761, 0.0510991067, -0.0177768208, -0.0678639710, -0.0479297116, -0.0691564977, -0.0177156031, -0.0555491745, -0.0447874144, -0.0354347825, 0.0117313936, 0.0114770159, -0.0634274930, -0.0159358941, 0.0011962056, 0.0351412743, -0.0446036309, 0.0239024460, -0.0175482705, 0.0255938023, 0.0546974093, 0.0688949078, -0.0164972506, 0.0348843336, -0.0080780536, 0.0699561983, -0.0450247228, 0.0487825945, -0.0565703586, -0.0612931475, 0.0298818201, 0.0080860183, 0.0450744852, 0.0190919712, 0.0107394829, 0.0112982392, 0.0672864765, 0.0233996063, -0.0049392655, -0.0314490460, -0.0559666380, -0.0651587173, -0.0369768701, 0.0254945904, -0.0533783138, -0.0335446782, -0.0654169843, 0.0401114374, 0.0122301057, 0.0483821481, -0.0420433730, 0.0018469840, -0.0127941631, -0.0385655500, 0.0107582882, -0.0713427067, 0.0537312925, 0.0643339306, 0.0284247100, 0.0345084593, 0.0692464858, -0.0317028202, 0.0004093945, 0.0103428587, -0.0521863960, -0.0215426944, -0.0701235458, -0.0154984891, 0.0422860011, 0.0075974241, 0.0469406322, 0.0047512800, -0.0146623105, 0.0548962057, 0.0513211563, -0.0422424152, 0.0663871765, -0.0227998793, 0.0437288210, 0.0405909494, 0.0358528644, -0.0271508396, 0.0391614214, 0.0227304026, 0.0666699708, -0.0076256096, 0.0646087527, -0.0281021111, -0.0516489521, -0.0593775958, 0.0223152414, 0.0370774567, -0.0438265391, 0.0014574677, -0.0313099138, 0.0540857613, -0.0339845084, -0.0034495890, 0.0059744865, 0.0573209226, -0.0449582711, 0.0234355554, 0.0371740535, 0.0420995504, 0.0506589711, 0.0258090869, -0.0436207503, 0.0187918767, 0.0217198506, -0.0536514521, -0.0339754410, -0.0197083242, 0.0436433926, -0.0463490114, 0.0075765550, 0.0490083620, 0.0168649703, -0.0318507962, -0.0688443184, 0.0275152326, -0.0268895775, -0.0127391219, -0.0184941888, 0.0394539684, 0.0649538934, -0.0346903838, -0.0237535425, 0.0461169332, -0.0197022483, -0.0608496703, 0.0435725898, -0.0690381154, 0.0143650547, 0.0067206398, 0.0539753437, 0.0175001398, 0.0328708738, -0.0229132511, -0.0470218658, -0.0346865095, 0.0337851048, 0.0118710771, 0.0614413172, -0.0443348140, 0.0383229256, -0.0275424756, -0.0096024349, -0.0171304829, 0.0415803492, -0.0180594698, -0.0584439412, 0.0326018184, -0.0233784802, -0.0376547650, 0.0017261952, -0.0005245209, 0.0116650462, 0.0718795806, 0.0546942055, -0.0275286920, -0.0137988105, 0.0506128371, -0.0509542823, -0.0665191337, -0.0409046896, 0.0501310229, -0.0540938601, -0.0035090148, -0.0546457916, 0.0167026296, -0.0424839072, -0.0400217436, 0.0293071270, 0.0605963618, 0.0093245655, 0.0274250954, 0.0040830374, 0.0527923703, 0.0344774351, -0.0150283426, 0.0241744816, 0.0025785640, -0.0273183957, 0.0043455213, 0.0516884103, -0.0062305331, -0.0454754755, 0.0183439925, -0.0473845601, -0.0553291403, -0.0436599627, -0.0258196667, 0.0196609721, -0.0663452521, 0.0373084024, -0.0178512409, -0.0222357698, -0.0122179054, 0.0182770640, -0.0297204927, -0.0205613114, -0.0253481269, -0.0472231805, 0.0118719339, -0.0459606797, -0.0100145787, 0.0369288251, 0.0181959346, -0.0155016407, 0.0043581203, 0.0351977125, -0.0191349573, 0.0456698909, -0.0139163136, 0.0577233732, 0.0181086138, 0.0317254290, 0.0237255692, -0.0326716267, 0.0169279650, 0.0365568250, 0.0318687111, -0.0503137931, -0.0443936810, 0.0380398631, 0.0120545998, 0.0603326410, 0.0396573320, -0.0508258343, -0.0467987172, 0.0696317554, -0.0245488063, -0.0156461373, 0.0631898940, -0.0519874208, 0.0521479771, -0.0578566380, -0.0092043430, 0.0482078195, 0.0110729784, -0.0190321133, -0.0705085918, -0.0310769752, 0.0422347263, -0.0360470861, -0.0360308625, -0.0636112913, -0.0664603114, -0.0699012578, 0.0043525398, 0.0000962168, 0.0572884977, 0.0021799654, -0.0532098301, 0.0223400891, -0.0043834075, -0.0224677436, 0.0327318683, -0.0463747680, -0.0110642165, 0.0518152863, 0.0006414726, 0.0385191292, -0.0489870608, -0.0064852908, -0.0369908214, 0.0338283926, -0.0584187694, -0.0505214892, 0.0566713959, 0.0583542138, 0.0453988761, 0.0155656263, 0.0489700437, 0.0506031364, 0.0661083162, 0.0545383543, 0.0323583186, 0.0423986688, -0.0368754044, -0.0123485886, -0.0340723135, -0.0087547600, 0.0062691793, 0.0440464392, 0.0080408156, 0.0702898949, 0.0294834077, 0.0314716399, -0.0442919880, -0.0151247159, -0.0143535621, 0.0297435001, -0.0245974287, 0.0116626695, -0.0657989308, -0.0089359954, -0.0058453158, 0.0462306142, 0.0357801989, -0.0040723532, -0.0476892851, -0.0578878000, 0.0525760353, 0.0294405296, 0.0203935131, -0.0338445157, 0.0071301013, -0.0411962494, 0.0182994977, 0.0375147387, 0.0323069394, 0.0082914978, 0.0691225976, -0.0092573911, 0.0532908887, -0.0457237139, -0.0249598660, -0.0273674689, -0.0121215656, -0.0666028485, 0.0659642965, 0.0452685878, 0.0579351187, -0.0259463228, -0.0441403314, 0.0402899086, 0.0601751208, -0.0097762011, -0.0149167962, -0.0468961373, -0.0536971837, 0.0519552082, 0.0157550722, -0.0369634666, -0.0689741448, 0.0634789616, -0.0249667987, -0.0496447720, -0.0484718978, -0.0243906938, 0.0682121813, 0.0015998855, -0.0484352671, -0.0059426203, 0.0411308333, -0.0370285921, -0.0702109337, -0.0563475341, -0.0009332597, 0.0328650773, 0.0588703305, -0.0542059615, -0.0484608524, 0.0469318405, 0.0532364994, -0.0668483973, 0.0134101361, 0.0203007385, 0.0254823565, -0.0673955232, 0.0010126159, 0.0592269599, 0.0249884129, 0.0222089440, -0.0414521769, 0.0561983585, 0.0515489131, 0.0064551607, -0.0102047771, 0.0530375987, -0.0026609153, 0.0623743832, 0.0426906794, 0.0492028818, -0.0189080536, -0.0650868267, -0.0489773005, 0.0368205309, 0.0601506382, 0.0082060993, -0.0189749859, 0.0088351294, 0.0374856815, -0.0200976357, -0.0477573201, 0.0207976401, 0.0200957060, -0.0325311348, 0.0667401254, 0.0099746585, -0.0612398759, 0.0063047782, 0.0454658791, 0.0189918652, -0.0637280047, -0.0011562333, -0.0534219332, 0.0712621510, -0.0301174596, -0.0247639008, 0.0600265861, 0.0374743417, 0.0713597685, -0.0660476834, -0.0220456198, -0.0361963175, -0.0170293599, -0.0571458600, -0.0471979752, -0.0367213376, -0.0535408296, -0.0208739340, -0.0211135671, -0.0316988118, -0.0403462052, 0.0269251466, 0.0221200213, 0.0343602970, 0.0026274994, 0.0562069118, -0.0373404399, -0.0233823508, -0.0537976548, -0.0563928038, -0.0122056901, -0.0621206686, -0.0617875531, 0.0339182988, -0.0176609866, -0.0538153946, -0.0551836789, -0.0424192287, -0.0390050709, 0.0594241768, -0.0046057031, 0.0204398185, -0.0384709686, 0.0585644245, 0.0057479963, 0.0389490128, 0.0223673433, 0.0660900623, 0.0632051677, 0.0344551504, -0.0468702242, -0.0606021732, -0.0090403184, -0.0711743757, -0.0079423115, 0.0512047336, 0.0499658808, -0.0479554310, -0.0155620836, -0.0703029558, 0.0622097105, 0.0629246235, 0.0433948487, 0.0082732365, 0.0556190014, 0.0037002340, -0.0329404920, -0.0455143973, -0.0180846602, 0.0015130416, -0.0620470606, -0.0299977735, -0.0286833607, -0.0375834294, 0.0495431870, -0.0295271277, -0.0504143275, 0.0508891195, -0.0597343855, 0.0529718101, -0.0279327817, -0.0375554338, 0.0423312187, -0.0580275990, 0.0314469784, 0.0004210249, -0.0533995666, -0.0698683411, 0.0197663084, -0.0248479880, 0.0414320827, -0.0024437159, -0.0301730894, 0.0409725159, -0.0481449440, -0.0671816543, -0.0707050338, 0.0553445220, 0.0172223449, 0.0143423602, 0.0696910471, -0.0536977686, 0.0360859409, -0.0515204072, 0.0204511583, -0.0237068459, -0.0342385583, 0.0259966701, 0.0576496422, -0.0270742700, -0.0552949533, -0.0231623165, 0.0343358293, 0.0020419508, -0.0711871386, 0.0126924887, 0.0139442906, -0.0603877828, -0.0059988350, -0.0548755638, -0.0621209443, -0.0251676664, -0.0622251816, 0.0402471274, -0.0377951711, -0.0061663389, -0.0282459036, -0.0635765567, -0.0441928618, 0.0303475261, 0.0208270624, 0.0392559916, -0.0277459919, -0.0690769181, 0.0591088980, -0.0112998597, -0.0349270217, 0.0415736586, -0.0244409032, -0.0085441023, -0.0147401877, 0.0102855116, -0.0471687391, -0.0719614252, -0.0637766495, 0.0645186305, 0.0491695181, 0.0606306195, 0.0275220349, -0.0123150013, -0.0544252545, 0.0479480326, -0.0322394520, 0.0111292228, -0.0527374297, -0.0269120671, 0.0397851244, -0.0315336995, 0.0015318990, -0.0228384733, 0.0286886245, 0.0068278685, -0.0386345834, -0.0589961484, -0.0328745246, -0.0233264118, 0.0176763386, -0.0149016008, -0.0559471771, -0.0015355125, 0.0106875673, 0.0528876930, -0.0465234146, -0.0367336385, 0.0006012395, -0.0113065541, -0.0368221663, 0.0210974962, 0.0266611800, -0.0543822199, 0.0594785959, -0.0298713073, 0.0437962040, 0.0547440946, 0.0656379312, 0.0586965084, -0.0709630102, 0.0716941953, 0.0541252792, -0.0640637502, -0.0087609366, -0.0009185076, -0.0407403000, 0.0231009722, -0.0412068143, 0.0552196056, 0.0220716894, -0.0022986531, 0.0193722174, 0.0148557499, 0.0144034624, -0.0013710037, -0.0518130176, -0.0043437481, 0.0535213649, -0.0429361425, -0.0169801153, 0.0293625668, 0.0660936683, -0.0526169501, 0.0531303138, 0.0517701730, -0.0372774303, 0.0165100396, 0.0160992369, -0.0461118035, -0.0567877442, -0.0221014731, 0.0544361472, -0.0635790154, 0.0582593381, 0.0046826825, 0.0335685983, -0.0100369640, -0.0434151664, 0.0323342085, -0.0599000156, -0.0311913118, -0.0664305091, 0.0051335767, -0.0293364972, 0.0392051786, 0.0336093903, 0.0697617978, -0.0055951029, -0.0236926340, -0.0387490056, -0.0244500563, -0.0560333468, 0.0690261275, 0.0015322790, 0.0006462708, 0.0306988806, -0.0011878759, 0.0112806410, -0.0686112568, -0.0127573945, -0.0683268756, 0.0044501722, -0.0224846229, -0.0300915800, -0.0509056225, -0.0420988984, -0.0028321370, 0.0326679423, 0.0716473907, 0.0018147379, 0.0487445667, 0.0112695619, 0.0443837866, -0.0464188345, 0.0395341143, -0.0525615811, 0.0334504396, 0.0158392265, -0.0573359355, 0.0239842832, 0.0196584389, 0.0365872160, 0.0615810305, 0.0485094786, 0.0623077601, 0.0377631634, -0.0062631071, 0.0534317046, 0.0501082614, 0.0398880988, 0.0142951980, -0.0552444533, 0.0598241240, 0.0008219108, 0.0280652046, -0.0332344808, 0.0101950020, 0.0268067271, -0.0251800567, 0.0216613337, 0.0110571980, 0.0486443788, -0.0313775502, 0.0376095995, -0.0039646402, -0.0713951662, 0.0262144879, -0.0068078935, 0.0543776155, -0.0361776836, -0.0530647300, 0.0607773364, -0.0407946184, 0.0557402521, 0.0718036145, -0.0380061194, 0.0634663105, -0.0651406273, 0.0220701918, 0.0449834615, 0.0122946799, -0.0548760109, 0.0670953095, 0.0608032346, 0.0071698800, 0.0642905682, -0.0377579853, -0.0710215643, -0.0485633835, -0.0227399170, 0.0210523978, -0.0005088300, -0.0665172115, 0.0590692610, 0.0011268631, 0.0489512011, 0.0625178069, 0.0632915497, 0.0701871365, -0.0349952802, -0.0110799596, 0.0047741681, -0.0556219406, -0.0244153365, -0.0565858409, -0.0180777945, -0.0392564051, 0.0615305305, 0.0123272017, 0.0246265978, 0.0127603561, 0.0315591991, -0.0020551831, -0.0336670652, -0.0630707890, -0.0001709610, 0.0631012321, 0.0343227014, -0.0141237713, -0.0706489235, -0.0282763094, 0.0173336565, 0.0481049418, -0.0090507641, 0.0380331650, 0.0096498877, 0.0268036649, -0.0129695311, -0.0678022355, 0.0453498363, -0.0006312504, -0.0665905103, -0.0275099017, -0.0552749038, 0.0025624782, -0.0018895715, 0.0652692020, -0.0664645433, -0.0086404756, 0.0530457497, 0.0473598167, -0.0018296391, -0.0154825933, -0.0174475946, 0.0109956488, -0.0684555098, -0.0407928638, -0.0627100766, 0.0368648022, -0.0639787540, -0.0605907999, 0.0557013154, -0.0267029926, -0.0224333666, -0.0363499559, 0.0241382271, -0.0250776932, -0.0222380906, 0.0480198339, -0.0681690872, -0.0690608323, -0.0013249442, -0.0298286676, 0.0083716810, 0.0619586706, 0.0605913401, 0.0471308008, -0.0644043386, -0.0153629221, 0.0672131926, 0.0417096242, 0.0214117691, -0.0039594471, -0.0261959359, 0.0496056080, -0.0138602555, -0.0339062884, -0.0470387973, 0.0027474314, 0.0474051759, -0.0145741105, 0.0054523945, 0.0689349920, 0.0306580663, 0.0347262248, -0.0688340515, 0.0534352064, 0.0617694855, -0.0118965060, 0.0101610050, 0.0179865137, -0.0618333742, 0.0464222208, 0.0605227500, 0.0165469646, -0.0713214353, 0.0126131028, 0.0321893841, -0.0105928667, -0.0201893970, -0.0253270827, 0.0596671253, -0.0101709664, 0.0091282278, 0.0212466940, 0.0529855639, -0.0487792045, -0.0482781753, -0.0036641508, -0.0696695074, -0.0610651113, 0.0568092316, 0.0686770231, -0.0308776535, 0.0475870073, -0.0263878927, 0.0197933093, -0.0226231180, 0.0380439237, -0.0030810088, -0.0005906224, -0.0563951097, -0.0439108834, -0.0697046593, -0.0598687008, -0.0552989952, -0.0670227855, -0.0342395753, 0.0394473746, 0.0616840720, -0.0048015788, 0.0273110345, 0.0537160486, 0.0413973108, 0.0574716032, 0.0026643872, 0.0369546935, -0.0532434694, 0.0173118040, -0.0719978213, 0.0148334280, -0.0698233321, 0.0088194236, 0.0055344477, -0.0079287142, -0.0698076859, 0.0713483244, 0.0217690617, 0.0386185646, 0.0695609599, 0.0435710102, 0.0082243755, -0.0713068098, 0.0645306706, -0.0391158611, 0.0402147844, 0.0480146259, -0.0089165866, -0.0693882480, -0.0294189826, 0.0624072552, -0.0223591216, -0.0087453127, 0.0121123269, 0.0195127875, 0.0238650069, -0.0566213205, -0.0159289762, -0.0008382574, -0.0374383256, -0.0055491105, -0.0532161444, -0.0095802024, 0.0250908881, 0.0024861470, -0.0300681293, -0.0027149767, -0.0591687448, -0.0494178906, 0.0255788267, -0.0607343167, 0.0578921735, 0.0195657015, -0.0107492395, 0.0330235511, -0.0127700046, -0.0477336422, 0.0634571016, 0.0118840635, 0.0574052036, -0.0058950409, -0.0563157536, -0.0072124302, 0.0190402195, 0.0154915601, -0.0289976858, 0.0269396156, 0.0170750618, 0.0096219778, 0.0055256411, -0.0058697835, -0.0238306113, 0.0391713157, 0.0357837304, 0.0396108031, -0.0277834833, 0.0038253218, -0.0130605549, -0.0336999670, -0.0003287122, -0.0291797295, 0.0132460892, -0.0381672420, -0.0529473647, -0.0697826743, 0.0290097296, 0.0121779516, -0.0316353031, -0.0549443886, -0.0426652282, -0.0577001795, -0.0233441330, 0.0036607459, 0.0216827020, 0.0640373230, 0.0672046244, -0.0290776975, 0.0242475718, -0.0425199196, -0.0142301731, 0.0584523380, -0.0344043076, 0.0559973866, 0.0471107736, 0.0615889430, 0.0698293746, 0.0351745859, -0.0006283447, -0.0601552203, -0.0192480348, 0.0022691786, 0.0358887538, 0.0151164383, -0.0553420447, 0.0223338977, 0.0377441496, 0.0438963994, -0.0274652690, -0.0110638030, 0.0334588662, 0.0106436908, -0.0203443058, 0.0691546351, 0.0534539223, -0.0588553287, -0.0404901356, -0.0168992803, -0.0250485465, -0.0276157558, 0.0249351040, -0.0527039468, -0.0114359781, 0.0094142631, 0.0424698517, 0.0365184769, 0.0031439513, 0.0134288371, 0.0660289079, 0.0315121710, 0.0268515199, -0.0132196248, 0.0654902607, -0.0283670723, 0.0631904900, -0.0483272113, -0.0397789963, 0.0122232735, -0.0404275060, -0.0590582639, 0.0265576988, 0.0645804703, -0.0438035876, -0.0380088203, -0.0663727596, 0.0061675087, 0.0393776372, 0.0106649399, 0.0685406923, -0.0163583271, -0.0050923154, 0.0070631877, -0.0356865115, -0.0268314220, -0.0201988071, -0.0372311808, 0.0456734747, -0.0653836876, -0.0082642063, 0.0347335041, 0.0164072961, 0.0663066506, -0.0340420119, -0.0515774265, -0.0047361925, 0.0639773458, 0.0721568465, -0.0079740211, -0.0307686701, 0.0648548156, 0.0309779868, 0.0141890496, 0.0390074998, -0.0138680302, -0.0475593768, 0.0685187131, -0.0016803369, -0.0270451754, -0.0393681601, -0.0097487047, 0.0133572966, 0.0330385715, -0.0420026258, 0.0029886961, 0.0070113912, -0.0306431837, -0.0344460346, -0.0142921694, 0.0013370588, -0.0652954206, 0.0469429716, 0.0327618420, 0.0205587298, -0.0078969002, -0.0184974596, 0.0572841018, -0.0633912235, -0.0248848125, -0.0102343373, -0.0599155687, 0.0216690600, -0.0145030171, -0.0716747865, 0.0211598352, -0.0296617150, -0.0615757965, -0.0332823656, -0.0655090511, -0.0102334432, 0.0298994407, -0.0659630746, -0.0551283769, -0.0628367662, 0.0589433461, 0.0459775105, 0.0061618462, 0.0196321309, 0.0156516805, -0.0714460462, 0.0463910773, -0.0360626094, 0.0026171580, -0.0440018885, -0.0042877793, 0.0168653652, 0.0303404927, 0.0261179581, -0.0074363202, 0.0609530210, 0.0707125217, -0.0146907717, -0.0560522228, -0.0529471263, -0.0117336325, -0.0600390956, -0.0622978434, 0.0034602880, 0.0352566987, 0.0466459244, -0.0268853270, 0.0255269185, -0.0231040530, -0.0687897056, -0.0679697171, 0.0181918368, -0.0343154036, -0.0288613960, -0.0680461004, -0.0218319520, 0.0218845382, 0.0406998843, -0.0639964566, 0.0225182623, -0.0627561882, -0.0028455257, -0.0587574616, 0.0505833998, 0.0080223158, 0.0287077725, 0.0466606170, 0.0631106347, 0.0325689912, 0.0497435182, -0.0677879378, -0.0556670055, 0.0184267908, -0.0239362940, -0.0273623243, -0.0585896447, -0.0167135186, -0.0108495504, -0.0126941949, 0.0225555003, -0.0186411142, 0.0452349856, 0.0414755121, 0.0409355387, -0.0534616299, 0.0621670634, -0.0254583322, -0.0051725134, 0.0675105453, 0.0538925081, -0.0496117547, 0.0152812749, -0.0142399110, 0.0466926545, 0.0312215090, 0.0293543711, 0.0358441398, -0.0476975441, 0.0095962584, 0.0306666195, -0.0574810728, 0.0350888819, -0.0697914287, 0.0307713524, -0.0582578033, -0.0110956207, -0.0516409874, -0.0208540969, -0.0385550708, -0.0434825309, -0.0124516375, 0.0540168434, 0.0368109792, 0.0056820437, 0.0663764030, 0.0388470814, 0.0343341082, -0.0100496933, 0.0006896108, -0.0593816377, 0.0279271901, 0.0175049752, 0.0679329336, -0.0308013633, 0.0463621914, -0.0500734374, -0.0547098145, -0.0182205066, 0.0647115856, 0.0275696591, -0.0508432835, -0.0659365281, 0.0247875080, -0.0115199797, -0.0209461004, -0.0306265280, -0.0205477364, -0.0422877558, 0.0028393790, -0.0538052581, 0.0628376752, 0.0360394120, -0.0662382618, 0.0095769465, 0.0144374073, -0.0199268460, -0.0699616149, 0.0316459015, 0.0346556455, 0.0679299384, 0.0451852605, -0.0622551367, -0.0678301901, 0.0304027051, -0.0025632828, 0.0146973282, -0.0425166190, 0.0005224869, -0.0241863690, 0.0360103026, 0.0429775938, -0.0440319665, -0.0170464814, -0.0340245292, 0.0157219842, -0.0526021868, 0.0436388031, 0.0382724404, -0.0082216561, -0.0041549653, -0.0140146986, 0.0639171153, -0.0159969591, -0.0517847463, 0.0001841933, -0.0272304714, -0.0491940863, 0.0266941115, -0.0560906455, -0.0018127933, 0.0076515228, 0.0599067211, -0.0027465001, 0.0334116071, -0.0123635046, -0.0330887623, -0.0037214980, 0.0118528903, -0.0188453048, 0.0013550371, 0.0463926643, -0.0617545694, -0.0447861217, -0.0440883711, -0.0092677549, -0.0622041225, 0.0578268468, 0.0674940199, -0.0263513811, -0.0689622909, 0.0114093423, -0.0614747927, -0.0706458315, 0.0376309156, 0.0616310090, 0.0645598322, 0.0442933515, -0.0168577097, 0.0100190863, -0.0271947682, 0.0119548365, 0.0177615285, -0.0613084249, 0.0607078522, -0.0185182430, 0.0591765344, 0.0041621402, 0.0253497958, 0.0040025339, -0.0012486354, 0.0613537878, 0.0658464581, -0.0273154192, -0.0231981054, -0.0092986003, -0.0417957753, 0.0276209041, -0.0192279220, -0.0086882040, -0.0194808021, 0.0627076477, -0.0163541622, -0.0228335001, 0.0016294122, 0.0073764771, 0.0176934898, -0.0296007171, 0.0554242432, 0.0437916815, -0.0283960477, 0.0554217696, 0.0446774438, 0.0427182093, 0.0576926917, -0.0150332488, -0.0438252650, -0.0610735267, 0.0031726658, 0.0404378474, 0.0304710716, 0.0671154112, -0.0425286293, -0.0122229308, 0.0488829911, -0.0440669470, 0.0348549262, -0.0521338135, 0.0680891722, -0.0220327005, -0.0237814710, 0.0186678171, 0.0262012035, 0.0676377863, 0.0379011780, 0.0380891934, 0.0600574762, 0.0497409403, -0.0362896994, -0.0127052255, -0.0391899534, -0.0302022025, -0.0120158158, 0.0012351424, -0.0576169007, -0.0108660869, 0.0030144528, -0.0030182749, 0.0250893757, -0.0447867587, -0.0320880711, 0.0329545885, 0.0009623691, 0.0516763777, 0.0406877697, -0.0358710140, 0.0019417927, 0.0479682162, -0.0396970585, -0.0684336722, -0.0168129541, 0.0607824028, -0.0673328936, 0.0093312114, -0.0098810717, -0.0446258634, 0.0717546493, 0.0187602192, 0.0373869464, -0.0698396415, -0.0691130161, 0.0517514721, -0.0385288484, 0.0204711184, -0.0098494478, 0.0171301216, -0.0606032759, 0.0236742422, -0.0366072766, -0.0685735270, -0.0108060017, 0.0421976969, 0.0129367858, -0.0268004835, -0.0172175616, 0.0041268468, -0.0200628936, 0.0613074750, 0.0427220240, -0.0702409297, 0.0313173831, -0.0317274258, 0.0264193639, 0.0349533632, -0.0234803744, -0.0362550095, -0.0038320348, 0.0290533304, -0.0448492840, 0.0598031282, 0.0463411808, -0.0076574087, 0.0078247562, -0.0708036795, -0.0027362108, -0.0212662593, -0.0052209124, 0.0091506988, -0.0218062289, -0.0479720011, 0.0373520553, 0.0515405685, 0.0560650676, -0.0573305190, -0.0463972241, 0.0594536811, -0.0128559358, 0.0201681778, -0.0074463189, 0.0633685291, -0.0632659793, -0.0504512340, -0.0273755901, 0.0179216340, -0.0024611130, 0.0667636245, -0.0244644582, -0.0492029302, 0.0026104003, 0.0495961830, -0.0054584965, -0.0119085014, -0.0598383471, 0.0350247025, 0.0453598499, 0.0435279384, 0.0108743832, 0.0604255348, -0.0640371889, -0.0694980249, -0.0075119957, -0.0600004122, 0.0252772868, 0.0304126367, 0.0102139488, -0.0613356829, -0.0479556918, 0.0692208111, -0.0567075945, 0.0352676585, -0.0600864626, -0.0364605747, 0.0307344124, 0.0092455894, -0.0554514974, -0.0180976167, -0.0506816469, -0.0446189418, -0.0637645870, 0.0408268794, -0.0112652741, 0.0123413578, 0.0424698517, 0.0543473810, 0.0079698712, -0.0719593838, 0.0012918040, -0.0085830241, 0.0540280938, -0.0255620703, 0.0564138293, 0.0180154070, 0.0321227461, 0.0519600958, -0.0654894710, -0.0370589793, 0.0542155206, -0.0627736151, -0.0263596214, 0.0546256751, 0.0250138268, 0.0663159788, -0.0666347668, -0.0119964257, 0.0503581315, 0.0063314661, 0.0220377073, 0.0203871131, 0.0404690728, -0.0160910971, 0.0117297396, -0.0246837214, 0.0286288187, -0.0255139619, -0.0622211210, -0.0180538110, 0.0439734161, 0.0061610863, 0.0006980300, -0.0278382525, -0.0282867700, -0.0154863261, -0.0612857640, -0.0367391817, 0.0399973318, -0.0034643859, -0.0541334525, 0.0379130840, 0.0073255450, -0.0147884712, 0.0244906843, -0.0065606013, 0.0249340385, 0.0028151497, 0.0618223995, 0.0110931247, -0.0663931370, -0.0229011215, -0.0413912013, -0.0383611582, -0.0467790514, 0.0689063519, -0.0625003278, -0.0540545285, -0.0503979325, 0.0433383435, -0.0296451449, 0.0564832985, -0.0160811320, -0.0698281974, -0.0444711745, -0.0295161828, -0.0156504065, 0.0542412549, -0.0182566233, 0.0363434851, -0.0201668553, -0.0159347765, 0.0243295953, 0.0229899064, -0.0486007556, -0.0375204682, -0.0490418971, -0.0488975681, -0.0492494218, -0.0577074587, 0.0164378732, -0.0209831633, -0.0672578961, 0.0681044310, 0.0053571537, -0.0260487348, -0.0122774728, 0.0018031225, 0.0587377399, -0.0678656548, 0.0123302266, 0.0292607918, -0.0362677611, -0.0086703300, -0.0589490347, 0.0678197294, 0.0480698869, 0.0049681365, 0.0132415965, -0.0577558763, 0.0246645510, -0.0705913380, -0.0513831303, 0.0311124176, 0.0275859013, -0.0154437907, -0.0275235139, 0.0041792020, -0.0505524427, 0.0585302711, -0.0284116194, 0.0162555724, 0.0595528781, -0.0600743853, 0.0500460416, -0.0009305924, 0.0261701122, 0.0354912356, 0.0069578290, 0.0453113988, -0.0483108982, 0.0399073586, -0.0119833462, 0.0697281957, -0.0239818357, 0.0200737491, 0.0230971053, 0.0197984651, 0.0411865264, 0.0443901345, -0.0492808893, 0.0349749923, 0.0236838385, 0.0094588250, -0.0466120802, -0.0466216803, -0.0517291352, -0.0355352163, 0.0425008014, 0.0249122381, -0.0288041160, 0.0427717343, -0.0697244108, 0.0050160587, -0.0017499030, 0.0160313174, -0.0010076240, -0.0221778341, 0.0603868216, 0.0102683157, -0.0640661120, 0.0054222643, -0.0095849186, 0.0416440964, 0.0186213255, 0.0651229918, 0.0609447360, 0.0591000021, 0.0258405879, 0.0027572364, 0.0309739560, -0.0461448394, -0.0568154790, -0.0369282775, -0.0597085766, 0.0120449290, -0.0691954717, 0.0454700589, -0.0326648317, 0.0197585151, 0.0304185525, 0.0644688308, -0.0676678196, -0.0484032296, -0.0408598147, 0.0165814087, 0.0465531126, 0.0628784448, 0.0514628813, -0.0072090402, -0.0714489743, -0.0577242002, -0.0500884391, -0.0226173215, -0.0143775120, 0.0544247329, -0.0134574361, -0.0302710272, 0.0652249306, 0.0498930439, -0.0513669923, 0.0621896088, -0.0308006555, -0.0633113533, 0.0144202337, -0.0514969006, -0.0305457264, 0.0302572101, 0.0023795739, -0.0709556118, 0.0636676848, -0.0034452826, -0.0066233724, -0.0689719543, 0.0182384849, -0.0022531226, -0.0215939544, -0.0450774580, -0.0002370700, -0.0392671414, -0.0126865916, 0.0163584277, -0.0341471434, 0.0345784575, 0.0062378645, 0.0142076164, -0.0285581164, -0.0229872912, -0.0200499892, 0.0681962371, 0.0471175015, -0.0230662860, 0.0198602378, -0.0251989141, -0.0336168073, -0.0694837421, 0.0615804046, -0.0526102744, -0.0330452286, -0.0383327305, 0.0368635505, 0.0365427211, 0.0260856822, -0.0004075021, -0.0452056453, 0.0192573071, 0.0057363287, -0.0023133978, 0.0540939569, 0.0175195336, -0.0527368113, 0.0150777400, 0.0509125069, -0.0523466542, -0.0375587903, 0.0291717798, 0.0403022766, 0.0499713495, 0.0144502297, -0.0368693806, -0.0386269949, -0.0141425766, -0.0029450953, 0.0227356106, -0.0149078295, 0.0327921882, 0.0583866835, -0.0257160179, 0.0021024272, -0.0638576224, 0.0639806986, 0.0608451664, 0.0334013477, 0.0288414881, -0.0673757195, -0.0126269013, -0.0348634794, 0.0601986498, 0.0403861552, 0.0685243458, -0.0115874112, -0.0400349423, -0.0396423265, 0.0308308676, 0.0712845623, -0.0054693371, -0.0658173040, -0.0474791452, 0.0434364378, 0.0135506615, -0.0223754495, -0.0224797018, 0.0019515455, -0.0165186226, 0.0603354424, 0.0320553780, 0.0200705156, 0.0160292238, -0.0041582659, -0.0615200624, -0.0044275969, -0.0109122843, 0.0381362364, -0.0649820566, 0.0206862465, 0.0138328448, 0.0620841533, 0.0077114478, 0.0566256046, -0.0322722830, 0.0419042259, -0.0247529596, 0.0050888360, 0.0489785895, 0.0524792820, -0.0540751740, 0.0111020058, -0.0022032931, 0.0374001116, -0.0489920825, 0.0418897867, 0.0385866091, -0.0505397618, -0.0479987785, -0.0607898235, 0.0281872153, 0.0677097291, -0.0471059904, 0.0083944574, -0.0174256749, 0.0133142471, -0.0522656664, 0.0224099830, 0.0053340495, -0.0658811405, 0.0384273157, -0.0342348255, 0.0600433797, -0.0580295958, -0.0153057463, 0.0199426711, -0.0231328048, 0.0045443103, 0.0598953515, -0.0411442369, -0.0463459492, 0.0248987153, -0.0048020929, 0.0063948706, -0.0175504014, -0.0005812123, 0.0457090363, -0.0033122599, -0.0051107779, -0.0197488442, 0.0326501504, 0.0468724445, -0.0398595557, 0.0275831297, 0.0340995118, 0.0518587530, 0.0321637988, 0.0548421890, -0.0264465809, -0.0551664904, -0.0109559372, 0.0311819315, -0.0625953078, -0.0190295503, 0.0585331917, 0.0574008375, -0.0436417609, -0.0098351501, 0.0189753696, -0.0610964969, 0.0551090389, 0.0708555281, -0.0588469505, -0.0700518638, -0.0640197545, -0.0020852759, -0.0376326367, -0.0709408298, 0.0154758990, -0.0449184403, 0.0377323478, 0.0278804079, 0.0661179721, 0.0363356546, 0.0134956017, -0.0056862235, 0.0059040561, 0.0111602843, 0.0380644873, 0.0650096834, -0.0461330712, -0.0251833573, -0.0121692978, -0.0622984804, 0.0667029321, 0.0467799455, 0.0141250566, 0.0656526536, 0.0387057289, -0.0256215036, 0.0579709858, 0.0096940249, 0.0234823376, 0.0403964147, -0.0298666582, -0.0487897545, -0.0518212914, -0.0112892762, -0.0047426149, 0.0099033713, -0.0315075964, -0.0495730899, 0.0549599826, 0.0509067923, 0.0350617096, -0.0271888822, 0.0473189726, 0.0492508337, 0.0702163130, 0.0208137333, -0.0502824560, 0.0500517711, -0.0053810030, -0.0585442036, -0.0540263243, 0.0392322093, 0.0608551055, 0.0244662836, -0.0615888909, -0.0633032620, -0.0583162196, 0.0144817159, -0.0647956058, -0.0695957541, 0.0251010582, 0.0186179057, -0.0141964480, 0.0071854666, -0.0585180521, 0.0219803378, -0.0398809090, 0.0598507673, -0.0597830117, 0.0592551380, 0.0111287385, 0.0393512994, -0.0334298760, 0.0282806456, -0.0088672191, 0.0411316901, 0.0689765513, -0.0313147157, 0.0451862067, 0.0306927860, 0.0149533898, 0.0362803340, -0.0714772418, 0.0517399088, -0.0505338460, -0.0269962735, 0.0184201002, -0.0170682110, 0.0518946424, -0.0289927833, 0.0353380442, -0.0435543880, -0.0403805487, 0.0610138178, 0.0158549398, -0.0688627809, 0.0113764480, 0.0391194448, 0.0649269372, -0.0656975806, -0.0432287529, -0.0270605050, 0.0183981061, 0.0609784871, 0.0528834015, 0.0524502397, -0.0061354190, -0.0589354597, 0.0540977120, -0.0110266730, -0.0436759479, 0.0251839235, 0.0501866043, 0.0313179493, 0.0646065623, -0.0240637921, -0.0629801154, -0.0068293139, -0.0089469403, 0.0044611171, -0.0176167339, -0.0113799721, 0.0715179294, -0.0280014724, -0.0044603422, 0.0364032611, 0.0292452499, 0.0510819703, 0.0199686214, -0.0160620511, -0.0675581098, -0.0666957945, -0.0129704438, 0.0119204223, 0.0593455434, -0.0147775933, 0.0278795287, -0.0574509948, 0.0601948053, -0.0054432899, 0.0409530029, -0.0075585246, -0.0073369741, -0.0403632745, -0.0350863710, 0.0036825612, 0.0682037622, -0.0350414440, 0.0061344877, 0.0123424605, -0.0567052364, 0.0580710322, -0.0182857513, -0.0602896884, -0.0006114617, 0.0356742069, 0.0569739789, 0.0394034982, -0.0415590107, 0.0548164546, -0.0467133224, -0.0700680912, -0.0599563308, 0.0166317746, -0.0605329163, -0.0344645642, -0.0708760172, -0.0381106324, -0.0113528185, -0.0688302815, 0.0463779494, -0.0637353510, 0.0422251225, -0.0473570973, 0.0638668388, -0.0562164411, 0.0426884368, -0.0099923462, 0.0392766073, -0.0383903384, -0.0442284122, 0.0358701199, -0.0393954664, 0.0708975196, 0.0413623080, -0.0327380449, -0.0292865485, -0.0316866487, 0.0707849711, 0.0370159596, 0.0421454757, -0.0233166404, -0.0048980862, 0.0231260955, 0.0395815372, 0.0682667941, 0.0082715675, 0.0109189302, 0.0629846305, -0.0553685091, -0.0431283042, 0.0257389024, 0.0673510283, 0.0613634735, -0.0136532597, -0.0533283316, -0.0226404443, -0.0435746387, 0.0410293117, -0.0538795367, -0.0077986568, -0.0676355585, -0.0511110835, 0.0049418807, -0.0428225100, 0.0326647982, -0.0104983188, 0.0580682307, -0.0126749426, -0.0473321155, 0.0214000866, 0.0156161338, -0.0140395276, -0.0263445489, -0.0582706928, -0.0111959837, -0.0393498875, -0.0267840512, -0.0370411873, 0.0701737553, -0.0199028775, 0.0153127834, -0.0530259311, 0.0352847800, -0.0350716077, 0.0374275371, -0.0635450631, -0.0336978510, -0.0474744961, -0.0570181534, 0.0676877797, 0.0482748523, -0.0096214488, 0.0314345360, -0.0523895510, 0.0183657110, 0.0589683056, -0.0339700021, -0.0166168883, 0.0386515632, -0.0313610844, 0.0165467411, 0.0707453340, 0.0143830702, -0.0699336901, 0.0487030819, -0.0348494388, -0.0573152900, 0.0591357648, 0.0676252842, -0.0475948378, -0.0064243451, 0.0409867316, -0.0432308018, -0.0184738860, 0.0297334120, -0.0417799093, -0.0053722933, 0.0353957042, -0.0301507190, -0.0180415399, 0.0715796053, -0.0665441006, 0.0126351938, -0.0147055164, -0.0175934359, 0.0123670176, 0.0465232059, 0.0567345470, 0.0301002339, 0.0711445361, 0.0408518314, 0.0617853403, -0.0689847767, -0.0560481958, 0.0552653223, -0.0254497826, -0.0149149708, -0.0576341227, 0.0623144507, -0.0052810833, -0.0636649579, -0.0502027944, -0.0665843636, -0.0378921442, -0.0501639582, -0.0522135645, -0.0340477228, 0.0077907220, -0.0381341875, 0.0223465636, 0.0128833279, -0.0336387791, 0.0600025952, -0.0114435330, -0.0285006613, 0.0167728662, -0.0306771137, 0.0555251092, -0.0506822467, 0.0479668900, 0.0040071085, 0.0455954075, -0.0318546146, 0.0008804649, -0.0663037971, 0.0149222836, 0.0294871554, 0.0603061914, -0.0551229715, 0.0541803390, 0.0328097045, 0.0345616415, -0.0480762050, -0.0010285079, -0.0224333666, -0.0454141349, 0.0445932746, 0.0437228382, -0.0681011081, 0.0203572959, 0.0522882193, 0.0706356317, -0.0195707418, -0.0502444655, -0.0647000819, 0.0538350940, 0.0270409063, 0.0229948461, -0.0504763387, 0.0569058061, 0.0440387130, 0.0614266694, 0.0554249138, 0.0552525073, 0.0092979148, 0.0234838352, -0.0720954165, 0.0364078358, 0.0610075444, -0.0586299598, -0.0210756473, -0.0660815239, -0.0514768213, -0.0086871535, 0.0298547149, -0.0223567113, -0.0353734419, 0.0078209192, -0.0163020976, -0.0437353253, -0.0280311853, 0.0615832359, -0.0711301044, -0.0607033297, -0.0252685808, -0.0472638048, 0.0134299248, 0.0351102352, -0.0570269972, -0.0344070978, 0.0296634883, 0.0401721969, -0.0439839251, -0.0397688635, 0.0005449280, 0.0293880105, 0.0097998083, 0.0684253573, -0.0243227817, -0.0316349417, 0.0582563877, 0.0016835779, 0.0493781418, -0.0671822727, 0.0644537359, 0.0319847986, -0.0314604342, 0.0571752638, -0.0036504194, -0.0507128239, -0.0442102253, -0.0505262911, -0.0041548610, -0.0383947417, 0.0407221839, 0.0676438361, -0.0226799175, 0.0304336250, -0.0281483606, -0.0351380743, 0.0477340221, -0.0111985989, 0.0319709480, -0.0120790489, -0.0007016957, -0.0408422314, 0.0504419580, -0.0590307303, 0.0630774647, 0.0118633658, 0.0503493920, -0.0141826160, -0.0693343952, -0.0554520264, 0.0539539307, 0.0035352036, -0.0366907939, -0.0150209777, 0.0024565682, -0.0559184067, 0.0696703643, 0.0601814985, -0.0604073443, 0.0653983951, -0.0335762501, 0.0513364524, -0.0198175497, 0.0549787134, -0.0029406697, 0.0199204087, -0.0214669518, 0.0083954930, -0.0060667768, 0.0257826596, 0.0503649637, -0.0298281536, 0.0029252544, 0.0237163752, -0.0235949680, 0.0360117108, 0.0092499256, -0.0543735996, -0.0299955718, -0.0580034591, -0.0374302231, 0.0409770384, 0.0319683999, -0.0286655501, 0.0084675550, -0.0118515119, 0.0477961376, -0.0707175955, 0.0099389181, 0.0524299890, 0.0630349815, 0.0543902814, 0.0606046319, 0.0616752207, -0.0690658689, -0.0141490810, 0.0033573285, -0.0253626853, -0.0194976479, -0.0390256681, 0.0317314714, -0.0521850884, 0.0442379639, 0.0259129629, 0.0190177783, -0.0052692294, -0.0038034171, 0.0199288204, -0.0555770174, 0.0275411308, 0.0600984544, -0.0047725663, -0.0570098422, 0.0212860107, 0.0685493648, -0.0281874202, -0.0334883630, -0.0069626644, 0.0226145983, -0.0318130106, 0.0061293393, 0.0026140139, -0.0474295393, 0.0459297448, -0.0640814602, -0.0350999124, 0.0218863562, 0.0001987666, 0.0531978011, 0.0003169253, 0.0349748060, 0.0443278775, -0.0239544436, 0.0295565352, 0.0571009815, 0.0229190663, 0.0473252833, -0.0498156659, -0.0196674764, -0.0343297198, 0.0487834364, 0.0065991133, -0.0512898229, 0.0254616737, 0.0154762939, 0.0561247319, -0.0181535557, 0.0675408691, 0.0400824472, -0.0261683203, -0.0669084638, 0.0293240771, 0.0419865549, -0.0132105425, 0.0680277050, 0.0645754039, -0.0131713636, -0.0488694534, -0.0662576854, 0.0483263656, -0.0181161501, 0.0331876129, -0.0223731771, 0.0540031940, 0.0466547534, -0.0226145685, 0.0142716765, -0.0211634487, 0.0445270985, 0.0014582723, 0.0367172956, -0.0529790074, 0.0392261520, 0.0497978255, -0.0161247179, -0.0509619899, 0.0418475792, -0.0081512779, 0.0388154238, -0.0683538690, -0.0308834538, 0.0294907317, 0.0430482924, 0.0149017721, 0.0236611962, 0.0355802923, -0.0346926376, -0.0183030628, 0.0390823409, -0.0019643977, -0.0487825274, -0.0313964449, 0.0521607772, -0.0088383108, 0.0490537509, -0.0118854791, 0.0443179682, 0.0373614803, 0.0490478799, 0.0177419931, 0.0130271018, 0.0398056805, -0.0594143495, 0.0482805446, 0.0108697191, 0.0252183750, 0.0500025973, 0.0265791938, -0.0426938757, -0.0534338728, -0.0560540110, -0.0204838663, 0.0199534297, 0.0310195535, 0.0119460598, -0.0127729662, -0.0571544096, -0.0019588247, -0.0333538949, 0.0680754036, -0.0617227033, -0.0556421950, -0.0240429379, 0.0542032272, 0.0105153322, 0.0564527512, -0.0670744404, 0.0582102984, -0.0232900567, -0.0414896533, -0.0083118007, -0.0168244317, 0.0121218562, 0.0426880941, 0.0197916701, 0.0137584060, -0.0023385510, -0.0628769919, -0.0668221265, 0.0143086538, -0.0377326235, -0.0157520249, 0.0444145128, -0.0220972225, 0.0277341157, 0.0407785997, -0.0131352805, 0.0321002379, 0.0349462554, 0.0160853863, 0.0213774592, 0.0026435703, 0.0473726168, -0.0166747347, -0.0668270141, -0.0141227357, -0.0301426165, 0.0067196041, -0.0274669565, 0.0269865692, -0.0545973703, -0.0502616912, 0.0561792105, 0.0317413285, 0.0424693152, 0.0500636101, 0.0455116779, 0.0054117665, 0.0620417297, -0.0287621468, 0.0578368008, 0.0401918963, 0.0032936111, 0.0435189232, 0.0608926713, 0.0694477558, 0.0369780213, 0.0681111217, 0.0288820043, 0.0575540811, 0.0469714552, -0.0578962788, -0.0449369177, -0.0013469532, 0.0444098711, 0.0512445718, -0.0659667626, 0.0239535496, -0.0430350602, 0.0317136422, -0.0306771137, -0.0145978220, -0.0709080026, -0.0384024158, -0.0703009292, -0.0552171767, 0.0214292333, 0.0623803288, 0.0037396029, -0.0214342438, -0.0182988122, -0.0186503194, 0.0424218774, 0.0034422576, -0.0376544558, 0.0496600196, -0.0614124388, 0.0117999762, 0.0119240880, -0.0189132169, 0.0383404419, -0.0359346457, -0.0650160536, 0.0059373677, -0.0380655862, -0.0071750283, -0.0460282154, -0.0706957579, -0.0293776356, 0.0194194615, 0.0276651010, -0.0234563872, 0.0178212151, -0.0031024963, -0.0592644624, 0.0706973374, 0.0557407290, 0.0426460430, 0.0174433067, 0.0383336246, -0.0035497993, -0.0495923087, -0.0051805303, 0.0419347659, -0.0246710740, 0.0049386472, 0.0416610092, -0.0128853768, -0.0517861769, -0.0639479384, -0.0573708490, -0.0530063808, 0.0193327442, 0.0132386014, -0.0224146619, 0.0134384558, -0.0717676505, 0.0689032525, -0.0560529977, -0.0256256647, 0.0216685086, -0.0400464162, -0.0698536113, 0.0098709539, 0.0234805271, -0.0552616045, -0.0019363686, 0.0134888366, -0.0466015637, 0.0105677620, 0.0554590374, -0.0034045950, -0.0501753464, 0.0568520427, 0.0323673487, 0.0621672422, -0.0395568460, -0.0411744341, 0.0718040913, 0.0255038068, 0.0130792037, -0.0554431304, 0.0350163430, -0.0624132305, -0.0025975630, 0.0397349671, -0.0175166093, -0.0085821301, 0.0530267358, 0.0181297064, -0.0551715121, -0.0151820146, -0.0187670998, 0.0099208206, -0.0101363473, 0.0292617902, 0.0305953473, -0.0683171675, 0.0670288801, -0.0068625957, 0.0591273010, 0.0198231265, 0.0670201033, -0.0118132979, -0.0039272159, 0.0439489484, -0.0402710810, -0.0659722164, 0.0708851367, -0.0652085990, 0.0259740427, 0.0701427311, 0.0152286738, -0.0271774046, -0.0494541749, 0.0074239671, 0.0287009627, 0.0425966606, -0.0121805668, -0.0385525599, -0.0702401027, 0.0164166540, 0.0418459624, -0.0419510603, -0.0581324548, -0.0390540734, -0.0440442711, -0.0106531233, 0.0310104340, -0.0210331790, 0.0165808573, 0.0616989285, -0.0602650307, -0.0012915134, -0.0421205238, -0.0612017624, -0.0105184317, 0.0532836318, -0.0031184852, 0.0658243746, 0.0612442344, -0.0668570325, -0.0181720331, 0.0664584786, -0.0397950672, 0.0009997934, 0.0117713138, 0.0095936432, -0.0225264691, -0.0133464560, -0.0569529422, -0.0315467753, -0.0463537090, -0.0566632375, -0.0414949879, -0.0229665563, 0.0720639974, -0.0512811504, -0.0518793836, -0.0435270965, -0.0637516603, -0.0037791580, 0.0653365105, 0.0043082163, -0.0247916728, 0.0546205789, 0.0245263875, -0.0712085441, -0.0717861280, 0.0447074026, 0.0040732846, -0.0332516544, -0.0570150726, -0.0400355943, 0.0454764217, -0.0377437212, 0.0492038429, 0.0217567235, -0.0227860473, 0.0332113877, 0.0206487700, -0.0386274606, 0.0048756152, 0.0360004380, 0.0052767992, -0.0379598364, -0.0031146631, 0.0484894812, -0.0558596104, 0.0128565058, 0.0349246264, -0.0601417646, 0.0369788855, 0.0004874244, -0.0470608547, 0.0102123842, 0.0284546837, 0.0268819034, 0.0023048446, -0.0365349762, 0.0184185877, -0.0574221425, 0.0168214515, 0.0239655077, 0.0639414787, -0.0007872432, 0.0167177543, 0.0038583428, -0.0182457305, 0.0673960447, -0.0555984378, 0.0150040314, -0.0540167578, -0.0611066297, -0.0343938805, -0.0466114059, 0.0129281506, 0.0340137035, 0.0014449731, 0.0302091837, 0.0718327612, 0.0347250849, -0.0570840202, 0.0695078522, 0.0663714409, 0.0482876897, -0.0577535033, -0.0224330723, 0.0501688942, 0.0327404886, 0.0644867122, -0.0676981881, -0.0025711134, -0.0248780474, -0.0355421156, 0.0364707932, -0.0425971448, 0.0152950957, -0.0019363016, -0.0617815666, -0.0130074359, 0.0393948480, 0.0235507339, 0.0379308909, 0.0213817134, -0.0501531363, 0.0269278586, 0.0043449402, -0.0056642517, 0.0018054470, -0.0687711611, 0.0242889747, 0.0535176843, -0.0053471550, -0.0116305649, -0.0632056519, -0.0356551595, -0.0309597813, -0.0280178338, -0.0100772269, 0.0395652950, -0.0286688209, -0.0531827994, -0.0087546930, -0.0463829599, -0.0600267909, -0.0318752825, 0.0192863345, 0.0628724396, 0.0164223537, -0.0635718554, -0.0660451502, -0.0414397381, -0.0206386372, -0.0153825209, -0.0312578119, 0.0627439916, 0.0588858128, -0.0598820336, -0.0345413759, -0.0384136178, 0.0168326199, 0.0577932447, 0.0026338845, -0.0221412554, 0.0407592282, 0.0539774299, -0.0098455399, 0.0433120131, 0.0328245535, -0.0153927915, -0.0051788092, 0.0204431713, -0.0589226931, 0.0343979970, 0.0480680466, -0.0459701121, -0.0335270576, 0.0056555793, 0.0664162189, -0.0033154115, 0.0237107500, 0.0436706170, 0.0158498436, 0.0508513004, 0.0115790665, 0.0270099044, -0.0065339133, 0.0164189786, -0.0129498318, -0.0550265312, -0.0213984549, 0.0028070658, 0.0443511233, -0.0498464145, 0.0157885700, 0.0065281689, 0.0320437327, -0.0657531917, 0.0596019179, -0.0229020156, -0.0493682474, -0.0084455609, 0.0443989113, 0.0583882928, -0.0395416692, 0.0651517659, 0.0158880576, -0.0148324147, 0.0656256080, -0.0452133901, -0.0343526900, -0.0510280281, -0.0431614965, -0.0645425022, -0.0219468549, -0.0112779550, -0.0655759498, -0.0035606548, -0.0496372506, -0.0112402402, 0.0610454828, 0.0033366084, 0.0368192419, 0.0368282422, 0.0016433671, 0.0621535480, 0.0698675662, -0.0344584733, -0.0007625148, -0.0130280852, 0.0062230676, -0.0423705354, -0.0072022825, 0.0440368354, 0.0620146245, -0.0667932034, -0.0175903030, -0.0205985121, 0.0337971151, 0.0374981388, 0.0348671973, -0.0015169308, 0.0537944138, 0.0718080103, -0.0125102066, -0.0329243876, 0.0459169447, 0.0358635485, 0.0595988482, 0.0690377355, 0.0063361824, 0.0520817637, 0.0570050925, 0.0345173180, -0.0299597979, -0.0148776844, -0.0001626015, 0.0323874280, -0.0441612005, 0.0279044285, 0.0137699693, 0.0156399757, 0.0383849517, 0.0229694322, 0.0025118217, 0.0709225833, -0.0179291666, -0.0030751601, 0.0439542755, -0.0200791545, 0.0212363154, 0.0151430592, 0.0131814480, -0.0386236906, 0.0548107922, -0.0043516308, -0.0694916621, 0.0476012751, 0.0223054513, 0.0150111169, -0.0224749558, -0.0320175774, 0.0431756526, -0.0427486971, 0.0471554771, 0.0075922832, 0.0100040808, -0.0349307880, -0.0500555038, 0.0264502615, -0.0523060150, 0.0570908338, 0.0440891460, -0.0054511502, 0.0718086511, 0.0514126942, -0.0198779777, 0.0192416012, 0.0479975194, -0.0376229323, -0.0555237271, -0.0139067285, -0.0564597696, 0.0290459171, -0.0049315393, 0.0098875090, -0.0251152739, -0.0120375305, -0.0511004999, 0.0708187521, 0.0186094865, -0.0341227613, -0.0279520899, -0.0506343804, -0.0425821729, -0.0427400246, 0.0682923645, 0.0541655868, 0.0462755412, 0.0292374715, 0.0335251167, 0.0095260516, 0.0420223325, -0.0047686771, 0.0055079311, -0.0243377164, 0.0633647442, 0.0638365448, -0.0393429883, 0.0208706483, -0.0052738562, 0.0117015615, -0.0173966475, -0.0263712369, -0.0267167054, -0.0504783168, -0.0305419080, 0.0026421100, -0.0556113943, -0.0325202458, -0.0056469962, 0.0637245774, -0.0418491662, 0.0661353022, -0.0714236796, -0.0259164013, 0.0270473957, 0.0544735938, -0.0026742145, -0.0604630932, -0.0489384681, 0.0096770599, 0.0038738921, -0.0273785144, 0.0427535698, -0.0141987912, -0.0021922141, -0.0192191824, 0.0475466251, 0.0065745562, -0.0386970416, 0.0074120462, -0.0707105622, -0.0091516599, -0.0387894399, 0.0648168772, 0.0455786809, 0.0152722299, 0.0259078667, 0.0535406917, 0.0034560561, 0.0122135207, 0.0570743531, -0.0301018022, 0.0343881026, -0.0347293876, -0.0154071264, -0.0475453362, 0.0180921778, -0.0495484173, 0.0267510638, -0.0645770505, 0.0476187915, 0.0635222048, -0.0377445146, -0.0353077799, 0.0354818404, -0.0405151024, 0.0617118627, -0.0698057786, -0.0585925542, 0.0383286029, -0.0608834811, -0.0443986878, -0.0325146019, 0.0036638603, -0.0663327053, 0.0429227054, 0.0455920994, -0.0111794658, 0.0663084388, 0.0476613268, -0.0680988580, -0.0548261479, -0.0651600733, 0.0448536873, -0.0134963058, 0.0149877369, 0.0398370326, -0.0569211766, -0.0146753043, 0.0326577425, -0.0280491151, -0.0380873010, -0.0022872463, -0.0688074678, -0.0521627031, -0.0206063092, 0.0129509866, 0.0230237022, -0.0292386599, 0.0245503038, 0.0119326785, 0.0178670511, -0.0261424258, 0.0433932990, 0.0520132110, 0.0427598283, -0.0081961229, 0.0673318803, -0.0021541491, -0.0625685006, 0.0395746529, -0.0198930688, 0.0403006971, -0.0002984777, 0.0696215779, 0.0387353078, -0.0673828125, -0.0660751984, 0.0381951332, 0.0167369172, 0.0302088112, -0.0397969261, 0.0609863400, 0.0592202544, -0.0116642565, 0.0226566717, -0.0370481908, 0.0555222929, -0.0363683142, 0.0656945556, -0.0212236717, 0.0472846106, -0.0461968556, 0.0719306320, 0.0276253372, 0.0199134052, -0.0057426840, -0.0622073710, -0.0196181610, -0.0285364017, -0.0503891371, -0.0537553057, -0.0602525398, 0.0653221756, 0.0574667603, 0.0283635110, -0.0370358862, -0.0292395055, -0.0344154239, 0.0658517629, 0.0398014188, -0.0011603460, 0.0582981855, -0.0123612508, -0.0560721979, -0.0067929924, 0.0112323612, -0.0690696537, -0.0136431940, 0.0381352007, -0.0087479278, 0.0344862118, -0.0017966032, -0.0281019062, 0.0218530148, -0.0092216209, -0.0659774095, 0.0449204147, 0.0484822765, -0.0114091188, -0.0410731584, 0.0623059720, -0.0694572106, -0.0608423576, 0.0071251988, -0.0578716397, -0.0688730702, 0.0488775596, -0.0295414776, 0.0653494298, 0.0566022694, 0.0598783940, -0.0382494852, -0.0403314084, 0.0546972603, -0.0484323762, -0.0565299392, 0.0321380720, -0.0458491668, -0.0219585039, 0.0071931258, -0.0642186627, -0.0543075800, 0.0556921065, -0.0182976238, -0.0104219392, 0.0439185053, -0.0305867307, 0.0490154326, 0.0448239222, 0.0198562294, 0.0060571283, -0.0303953253, 0.0294342116, -0.0421467833, -0.0084723681, 0.0425745025, -0.0448445715, 0.0133132786, 0.0618984252, -0.0027743727, -0.0111014359, -0.0400381759, 0.0619876087, -0.0399273485, -0.0245970339, 0.0113565028, 0.0719415545, -0.0659359246, 0.0026094019, 0.0514064804, 0.0357110649, 0.0315360576, -0.0391809009, -0.0165622234, -0.0194708928, -0.0462244004, 0.0437622368, 0.0153550729, 0.0414334610, -0.0188027360, -0.0513431951, -0.0274930410, -0.0218801834, -0.0453736484, -0.0494359583, -0.0078138262, 0.0165807381, -0.0137004070, -0.0112644993, 0.0680433810, 0.0154911950, -0.0232977122, 0.0455351472, 0.0044724196, 0.0202272832, 0.0719074458, -0.0526606366, -0.0716537237, -0.0580983162, -0.0038788319, 0.0457701907, 0.0091829598, 0.0494684726, 0.0554209352, -0.0197011642, 0.0057613179, -0.0569405183, 0.0498655289, -0.0647516474, -0.0597144626, 0.0346300751, 0.0280438513, 0.0206199512, 0.0164405778, -0.0021757632, 0.0030796826, 0.0489764959, -0.0093154311, 0.0718651116, -0.0357367545, -0.0337368548, 0.0257041603, -0.0311273187, -0.0505858921, 0.0427942574, -0.0007160455, -0.0475016683, 0.0282111168, -0.0700592473, 0.0314249024, -0.0190340057, -0.0164066441, -0.0690376312, -0.0501189604, -0.0269372575, -0.0195413530, -0.0502335727, -0.0336411372, -0.0688785985, -0.0546311811, 0.0623601377, 0.0413154215, -0.0579666905, 0.0405517668, 0.0710201710, 0.0184785873, -0.0566829368, -0.0660282522, 0.0280064940, 0.0119955316, 0.0322274789, -0.0372757092, 0.0286303982, -0.0249600895, 0.0692571998, 0.0111545846, -0.0386820547, -0.0014782548, 0.0371372476, -0.0373629294, 0.0100654736, 0.0630551726, 0.0341140404, -0.0257189758, 0.0661669225, 0.0448834375, 0.0180314779, 0.0663788170, 0.0182617828, 0.0707466304, -0.0607357807, -0.0578126572, 0.0166084021, -0.0104447007, -0.0364929736, -0.0325902402, -0.0146607794, -0.0239926241, 0.0649094284, -0.0385456085, 0.0198833644, 0.0170964301, -0.0692386925, 0.0563557446, 0.0166695043, -0.0156375021, 0.0074061379, -0.0360419936, 0.0075370669, 0.0174294263, 0.0391354635, 0.0434496477, -0.0528044328, 0.0603746325, -0.0686336830, 0.0149240196, -0.0434526615, -0.0411179624, -0.0475083068, -0.0222793184, 0.0663754344, 0.0486236587, -0.0218900926, -0.0674068853, -0.0400444046, 0.0116553605, 0.0482761264, -0.0607346967, 0.0213146433, -0.0183275640, 0.0046168864, 0.0149543732, -0.0590412468, -0.0625442713, 0.0426972508, 0.0446815416, -0.0053613707, 0.0031821802, 0.0430003256, 0.0028118491, -0.0062228963, -0.0352402478, 0.0049399361, -0.0258311257, 0.0175831616, -0.0657672361, -0.0204015858, 0.0719133466, -0.0460695773, 0.0584007949, 0.0103839114, -0.0581418686, 0.0152412206, -0.0446969755, 0.0312977806, -0.0692984685, 0.0051130280, 0.0381219536, -0.0060607046, -0.0602776110, -0.0674927086, -0.0521518439, -0.0708301812, -0.0676042587, 0.0268858820, 0.0364677459, 0.0294995308, -0.0625788420, -0.0361880958, -0.0264587477, -0.0184300430, -0.0329593867, -0.0597429387, -0.0573865063, -0.0079394877, -0.0166189708, -0.0298035108, 0.0314801335, 0.0206864700, 0.0593841225, 0.0371254981, 0.0664820373, -0.0351236574, 0.0283715799, -0.0643464029, 0.0623600930, -0.0192067251, 0.0161802769, -0.0238397978, -0.0635342970, 0.0592564493, -0.0645356551, -0.0085166395, -0.0001266226, 0.0360169783, -0.0658505112, 0.0239264518, 0.0516728386, -0.0633339584, 0.0445792526, 0.0691957474, 0.0633654445, -0.0021172762, 0.0382794067, -0.0572218075, -0.0553477556, 0.0519785583, -0.0371049866, -0.0463793464, 0.0045876876, -0.0550655574, 0.0173159987, 0.0045190677, -0.0263846405, 0.0472387150, 0.0613333136, 0.0457992181, 0.0656055659, 0.0647043139, 0.0033658743, -0.0336991064, 0.0541413277, -0.0680634975, 0.0243273452, 0.0444761515, -0.0247734673, 0.0604977310, -0.0208217129, -0.0179827139, 0.0093439892, -0.0280368999, -0.0584206097, 0.0395204499, -0.0496712700, 0.0489101633, -0.0037298799, 0.0534863323, -0.0099477805, 0.0245511606, 0.0139085203, -0.0145102777, 0.0471562147, 0.0598309487, 0.0705978870, 0.0485099405, -0.0227765143, 0.0405944586, 0.0625763088, -0.0272654667, -0.0249195322, 0.0390611961, 0.0265030712, 0.0272740349, -0.0190787762, 0.0568164736, 0.0524068922, 0.0196301565, 0.0450780764, 0.0597133189, -0.0425893813, -0.0639204755, 0.0606354326, 0.0589731038, 0.0642097443, 0.0517391637, 0.0555390567, 0.0327066258, -0.0159156583, -0.0028165430, 0.0196074396, 0.0289809257, 0.0365588740, 0.0162081346, -0.0170042552, 0.0288960859, 0.0264286846, -0.0264170915, -0.0627035052, 0.0561637580, 0.0537248701, -0.0036238730, 0.0616422147, -0.0023727044, 0.0254048929, 0.0125690550, -0.0685913041, -0.0395069979, 0.0626216233, -0.0003980547, 0.0710800290, -0.0466593653, -0.0670866743, 0.0308477879, -0.0001924857, 0.0325845778, 0.0273342282, 0.0566775203, -0.0537409224, -0.0382837802, -0.0343938656, 0.0297462493, -0.0158820190, -0.0603403598, 0.0391815752, -0.0359905995, 0.0370018706, -0.0467130318, -0.0307058655, 0.0677402318, 0.0095870346, -0.0181983598, 0.0385728329, 0.0587465465, 0.0538283139, 0.0138043538, 0.0092520416, 0.0419510975, -0.0387669504, 0.0708113909, 0.0240760446, 0.0263688788, -0.0456372201, 0.0408145115, 0.0626315176, 0.0502715856, 0.0500055030, 0.0036159754, 0.0260314941, -0.0666129440, 0.0672274083, 0.0601474643, 0.0369030014, 0.0075634271, -0.0202562250, -0.0254596584, -0.0112999976, -0.0238189958, 0.0289276913, -0.0080858991, 0.0571796298, 0.0025254115, 0.0628434867, -0.0382233858, -0.0607101098, -0.0401171893, -0.0049305931, -0.0112452991, -0.0130971670, 0.0151560158, -0.0318948440, -0.0318780355, -0.0345827043, -0.0283806995, -0.0448092446, -0.0421383344, -0.0408536904, 0.0172487572, 0.0092151836, 0.0181807578, -0.0326782838, 0.0505573452, 0.0234914720, 0.0687041283, -0.0168253258, 0.0702621937, 0.0424490124, -0.0062767342, 0.0647157878, 0.0189237446, -0.0168480389, 0.0190249234, -0.0437338501, -0.0052489266, 0.0208455101, -0.0699093789, 0.0122667700, -0.0472970679, 0.0714161545, 0.0530955493, 0.0277447328, -0.0641075447, 0.0502212718, 0.0599710643, -0.0019084662, -0.0102607310, -0.0134007223, -0.0092280582, -0.0693432018, -0.0150025524, -0.0384178013, 0.0674154460, -0.0470274910, -0.0351536795, 0.0584720224, 0.0411000177, -0.0100901462, 0.0524338260, 0.0342539102, -0.0366626456, 0.0059865490, -0.0470048152, -0.0626458228, -0.0413652882, -0.0588937849, 0.0344307572, 0.0344892070, 0.0392249823, 0.0519928038, -0.0544121787, -0.0614600144, -0.0285468772, 0.0124509335, -0.0254723914, -0.0479521640, -0.0405068435, -0.0256591327, -0.0588371232, -0.0616150275, 0.0602840334, 0.0161228254, -0.0538049489, -0.0356103554, -0.0053412393, 0.0613465756, -0.0224863105, -0.0089087039, -0.0441972166, -0.0203863420, -0.0066170245, 0.0063872337, 0.0405621082, -0.0241556205, 0.0551761389, 0.0102261454, 0.0443861783, 0.0504609421, 0.0348346755, 0.0628547668, -0.0650916472, -0.0342869945, -0.0249379277, -0.0251829959, 0.0060951337, -0.0586394593, 0.0487969294, -0.0177428573, -0.0523961075, -0.0672445372, 0.0107540190, -0.0224809423, -0.0193118043, 0.0075859502, 0.0343355015, 0.0495010614, -0.0120855719, 0.0048613697, -0.0088227242, -0.0580143668, -0.0320711918, -0.0477571301, -0.0352380425, 0.0512437969, -0.0207006671, 0.0673533380, 0.0025555566, -0.0285228603, -0.0514961965, -0.0594029576, 0.0026184991, -0.0014495328, -0.0519602522, 0.0310988426, -0.0069432706, 0.0640647113, -0.0499509946, -0.0529209003, -0.0296678245, 0.0663135648, 0.0090999529, -0.0419336334, 0.0243434832, 0.0106184483, -0.0607528500, 0.0534306914, 0.0054329112, -0.0131213106, 0.0382581428, -0.0186612643, 0.0142571852, -0.0632412881, -0.0478786752, -0.0249598324, 0.0606229901, -0.0026189163, 0.0435971096, 0.0496575534, 0.0237031430, -0.0093789920, -0.0617146492, -0.0591638759, -0.0234945863, 0.0504210591, 0.0594994575, 0.0644523352, 0.0455965921, 0.0264134631, 0.0427957401, 0.0280422866, 0.0196212456, 0.0103339255, 0.0160731152, -0.0535270497, -0.0528320819, -0.0165129788, 0.0027384609, -0.0266815685, -0.0328932628, 0.0046316981, -0.0050470456, 0.0405297950, -0.0696536079, -0.0053501651, -0.0004217625, -0.0620048381, 0.0611245483, 0.0591825396, -0.0601141304, 0.0622204989, -0.0656244233, 0.0211052746, 0.0248065069, -0.0150703788, -0.0579590835, 0.0391188040, 0.0138315856, -0.0479092337, -0.0066675767, 0.0298061818, 0.0415989012, -0.0135790333, 0.0425325856, 0.0083773583, 0.0403308198, 0.0050295442, 0.0106694326, 0.0358880833, 0.0027601942, -0.0638541281, 0.0663714558, -0.0620464087, -0.0577882752, 0.0189039633, 0.0656441897, -0.0419603512, 0.0155918375, 0.0409583226, -0.0109862052, 0.0050139204, -0.0229360163, -0.0411887467, -0.0665760711, -0.0659645721, -0.0565970279, -0.0664123371, -0.0176417157, -0.0116441064, 0.0619122684, -0.0515205078, 0.0172837749, 0.0323944464, 0.0578764826, -0.0264820270, 0.0606064051, -0.0458634794, 0.0002072826, 0.0662500560, -0.0314122401, 0.0654766709, -0.0089390427, 0.0481827632, -0.0593117289, 0.0335363522, 0.0085400417, 0.0075911805, 0.0040960610, -0.0003158078, 0.0446707010, 0.0308396965, -0.0691283271, -0.0162595958, -0.0505576394, -0.0393922478, 0.0063553303, -0.0402573161, -0.0214408673, 0.0032958612, -0.0598101467, 0.0322907493, -0.0584379025, -0.0342657641, 0.0538251549, 0.0467665792, 0.0478455722, 0.0564683229, 0.0421898514, 0.0160083994, 0.0454069301, -0.0295729451, 0.0099780858, 0.0591731966, 0.0618115067, -0.0165454634, 0.0099419802, -0.0170142539, -0.0245382227, -0.0495131463, -0.0030789748, 0.0685658753, -0.0317584164, -0.0028196275, 0.0471238345, 0.0407232493, 0.0177174732, 0.0283210799, -0.0087954849, 0.0460537523, -0.0095113590, 0.0532901734, 0.0508056208, 0.0484764427, -0.0682860464, -0.0650199652, -0.0406955294, -0.0499769226, -0.0421524271, 0.0231840461, 0.0465157256, 0.0288545266, 0.0117098689, 0.0654105693, 0.0643474311, -0.0223202333, 0.0443886742, -0.0427504703, 0.0352540612, -0.0601334721, 0.0336220413, -0.0050711855, 0.0629465282, 0.0279635638, -0.0208132155, 0.0040986985, 0.0689598173, 0.0717765242, 0.0098623857, -0.0663040578, -0.0118739679, 0.0619890094, 0.0186763853, -0.0503839776, 0.0128220692, -0.0156178512, 0.0184012428, 0.0288842246, 0.0295775607, 0.0118795261, -0.0548076145, 0.0330764204, -0.0504717976, 0.0240070820, 0.0686178505, -0.0245576501, -0.0293315053, 0.0191874877, 0.0290404260, -0.0270644650, 0.0624038130, 0.0186827406, -0.0715854317, -0.0430331863, -0.0605088808, -0.0677324235, -0.0161521621, 0.0196020231, 0.0036617070, -0.0163438916, -0.0130558908, -0.0065665022, 0.0339800492, -0.0028722286, -0.0347781703, -0.0546907671, -0.0198524781, 0.0416179076, -0.0684965625, 0.0280665308, -0.0574906245, 0.0037828386, -0.0619180128, -0.0690708086, 0.0253497958, -0.0627010614, 0.0599040538, -0.0454218984, 0.0266951248, 0.0223243311, -0.0426623374, -0.0498520397, -0.0364753902, 0.0419146195, -0.0172699727, -0.0156073384, 0.0676578581, 0.0419621244, -0.0456768088, -0.0631963238, 0.0363351554, -0.0691612959, -0.0112408921, 0.0447968766, -0.0392873921, -0.0175468251, -0.0597199686, 0.0315492377, -0.0657907054, 0.0538833290, -0.0148252062, -0.0172981396, -0.0334096253, 0.0539467931, -0.0002162978, 0.0336098224, -0.0348324366, -0.0321482271, -0.0314203426, 0.0625027418, -0.0601315945, 0.0159802660, -0.0595853105, -0.0169821791, 0.0621891320, -0.0640645772, 0.0084843412, 0.0659625977, 0.0106682628, -0.0220610052, 0.0256448016, 0.0057610571, -0.0016545504, 0.0261262357, -0.0221497901, -0.0004087687, -0.0336723663, 0.0631343871, -0.0236644149, 0.0264107063, 0.0613946319, -0.0626928359, 0.0028870255, 0.0621711910, -0.0677191988, -0.0627603009, -0.0241457969, -0.0289809108, 0.0509713292, -0.0323009305, -0.0610934161, -0.0599988848, -0.0387560613, 0.0083211064, -0.0275581144, -0.0164977498, 0.0066679046, -0.0268764831, -0.0063381940, 0.0401288718, -0.0447587296, 0.0381104946, -0.0317539424, -0.0219471492, 0.0531662107, 0.0505996421, 0.0254464597, -0.0285570472, -0.0472110510, 0.0660742670, 0.0213627890, 0.0346084088, 0.0560919344, 0.0307947695, 0.0322604626, 0.0439438894, -0.0510061234, -0.0002311319, 0.0049890727, 0.0279757306, 0.0353935212, 0.0613258034, -0.0454756320, -0.0488258526, -0.0042074770, -0.0662390888, 0.0222481936, 0.0481841564, -0.0449430794, -0.0642654300, -0.0006557554, 0.0576920062, 0.0138025582, 0.0609806776, -0.0368248336, -0.0247712471, -0.0193805061, -0.0566818900, -0.0448333696, -0.0174517408, 0.0656298697, 0.0126149282, -0.0302517042, 0.0545945168, 0.0308047161, -0.0383148193, -0.0647428557, 0.0415805578, -0.0006109849, -0.0712781250, 0.0193003416, -0.0718213022, -0.0521514341, 0.0625033230, 0.0555713028, -0.0342993326, 0.0083691999, 0.0527769029, -0.0116939694, -0.0347744711, -0.0573323593, -0.0498609357, 0.0098364204, 0.0479422733, 0.0672214627, 0.0684075505, 0.0112479851, 0.0293517783, 0.0111191198, -0.0371512882, 0.0367975235, -0.0205078349, -0.0244965665, 0.0286838561, 0.0063179210, 0.0557928830, -0.0303740762, -0.0116909258, 0.0157333910, -0.0252789557, 0.0476691350, 0.0022462755, 0.0164611861, -0.0523941442, 0.0341366604, -0.0710021928, 0.0536663681, 0.0049478635, -0.0589521006, 0.0331286117, 0.0100997314, 0.0052017495, -0.0416130759, 0.0152307749, 0.0635596067, -0.0529177524, 0.0266726539, -0.0044473857, -0.0603236705, 0.0171354339, 0.0610986501, 0.0541176200, -0.0374059267, 0.0131124482, 0.0101309642, -0.0396024063, 0.0038013011, 0.0674126744, 0.0609749556, 0.0312727317, 0.0625218898, -0.0653282329, 0.0217205733, 0.0363667160, -0.0356999673, 0.0389033780, 0.0423775017, -0.0423218086, -0.0023489818, 0.0203116834, 0.0716292262, -0.0486368388, -0.0530340858, -0.0372181199, -0.0124408305, -0.0198367015, -0.0106546357, 0.0028896555, -0.0652200580, -0.0353364833, -0.0423105881, 0.0408889651, 0.0252879560, -0.0133206621, 0.0340851471, -0.0309408866, -0.0131395645, -0.0423238352, -0.0208608583, 0.0078236014, 0.0197303444, 0.0058420971, -0.0198541805, 0.0462796316, 0.0138752759, 0.0562790036, -0.0485758409, -0.0153171010, 0.0041993558, 0.0395449176, 0.0363503844, -0.0351854786, -0.0051130280, 0.0493851602, -0.0669552982, 0.0459990874, 0.0032848865, -0.0699078813, 0.0256243050, 0.0352243334, 0.0500780791, -0.0030050799, 0.0226847827, 0.0686228722, 0.0248806328, 0.0044056401, -0.0399345756, -0.0509903282, 0.0390392616, 0.0237088725, 0.0178880766, -0.0008233264, 0.0141773149, -0.0389714316, -0.0164984390, 0.0056139082, -0.0554707833, 0.0067376047, -0.0270878822, 0.0229406953, 0.0625113994, -0.0254637711, -0.0586951561, -0.0593146533, -0.0203447863, -0.0422761738, -0.0396122821, 0.0489948019, -0.0032469779, 0.0016359463, 0.0589107275, -0.0180482864, -0.0430206433, -0.0477329865, -0.0251054987, -0.0016750246, -0.0447031185, 0.0254541188, 0.0411512926, -0.0586376339, 0.0481023937, 0.0693845898, -0.0530356839, -0.0109533928, 0.0170708597, 0.0693356097, -0.0275334232, 0.0212364197, -0.0226397738, 0.0337279961, -0.0663766712, 0.0144601017, 0.0577568114, -0.0281603374, 0.0362362713, -0.0287738144, 0.0471179783, 0.0256628990, -0.0099666230, -0.0022921339, 0.0685790330, -0.0659062639, -0.0390540920, -0.0401333794, 0.0195213258, 0.0006394088, 0.0587983429, 0.0113319829, -0.0106399953, 0.0180063695, -0.0054777861, 0.0214908049, -0.0622400120, -0.0349108651, 0.0179599300, -0.0336702839, 0.0215258524, 0.0429216698, -0.0285467058, -0.0568329096, -0.0440126434, -0.0605833307, 0.0467693135, -0.0397956334, -0.0011570081, -0.0515726618, -0.0043734834, 0.0646116734, -0.0000445098, 0.0524094775, -0.0239502117, 0.0586186796, 0.0016649738, -0.0387926251, -0.0527939349, 0.0344408229, 0.0330119133, 0.0711914450, 0.0606880486, 0.0642517358, -0.0629344806, 0.0051916316, -0.0241445415, 0.0589464158, -0.0547503345, 0.0681103617, 0.0328847468, -0.0179915242, -0.0521164015, -0.0282771178, 0.0607211590, 0.0005548373, -0.0685876161, 0.0696425587, -0.0186672360, 0.0124635398, 0.0202183053, 0.0087831542, -0.0262197144, 0.0322269127, -0.0067213103, 0.0706685632, 0.0694573671, 0.0645362288, 0.0627418607, -0.0429495797, -0.0007849857, -0.0220222026, 0.0704132318, -0.0575093627, 0.0387544259, -0.0613680631, -0.0313729234, 0.0384443179, 0.0395114571, -0.0452234223, -0.0083662942, 0.0376415327, 0.0030188933, -0.0479357988, 0.0259205997, 0.0509606302, -0.0584954917, -0.0706401691, 0.0518527329, 0.0029148310, 0.0552217960, -0.0396724902, 0.0043660477, -0.0613660514, -0.0359043777, 0.0402692780, 0.0180987045, 0.0487054437, 0.0598609746, 0.0520390719, 0.0366498455, 0.0020893887, 0.0528295711, 0.0236380696, 0.0118691325, 0.0124304071, -0.0254669711, 0.0435984135, 0.0681560040, 0.0653753728, 0.0458667874, -0.0354672857, -0.0029255152, -0.0202381760, -0.0353846252, 0.0402247608, 0.0557960123, -0.0513381362, 0.0367452204, -0.0447260514, 0.0432169363, -0.0381523035, -0.0332608931, 0.0332126319, 0.0557609648, 0.0048305020, 0.0066493526, -0.0614659861, 0.0663011670, -0.0436746255, -0.0607317016, -0.0354473256, -0.0025607720, -0.0063968152, 0.0001232997, -0.0265516266, -0.0333997644, -0.0130569898, 0.0494833440, 0.0487222373, 0.0056005418, -0.0177822411, 0.0078523904, 0.0533429086, -0.0576234758, 0.0162579268, 0.0328904763, -0.0285861790, 0.0506286323, -0.0328752995, -0.0002514720, 0.0388657153, 0.0437727869, -0.0080992132, 0.0138002038, -0.0223357566, 0.0020382702, -0.0583540574, -0.0179685540, 0.0708230734, -0.0027904287, 0.0113781318, -0.0534172729, 0.0172435120, -0.0555696189, -0.0432083830, 0.0203328133, 0.0390564650, 0.0420777500, 0.0221170262, 0.0577889830, 0.0205366388, -0.0104265995, 0.0626698285, 0.0371443033, 0.0542299747, 0.0645669252, 0.0118706450, 0.0504033491, 0.0526508316, 0.0230392218, -0.0434119515, 0.0228697583, 0.0502463579, 0.0529785901, -0.0232423246, 0.0037865564, 0.0543681979, -0.0635668337, 0.0484682322, -0.0454135016, -0.0442168638, 0.0107730851, -0.0055771545, -0.0035405234, 0.0217284709, -0.0028311014, 0.0224725828, 0.0537352562, 0.0236797258, -0.0528897941, -0.0660037026, 0.0337978154, 0.0285822526, -0.0396542139, 0.0244002268, 0.0497783273, -0.0180867240, 0.0367189422, -0.0253987983, 0.0559560210, -0.0303403847, 0.0134761184, -0.0240248702, 0.0703966767, 0.0670170337, -0.0540931039, -0.0644514263, -0.0564342029, -0.0400263220, -0.0096684694, 0.0553436577, 0.0354489461, 0.0050344691, -0.0157350786, -0.0155987851, 0.0525925830, -0.0439170599, 0.0157931000, -0.0367609970, -0.0538471900, 0.0582585335, 0.0054109097, -0.0716506094, 0.0675624609, -0.0620088130, 0.0080936924, 0.0095078647, 0.0703473389, 0.0326787829, 0.0466100127, 0.0236251131, -0.0262384713, 0.0602999330, 0.0215151310, -0.0256042629, 0.0065259114, 0.0705830455, -0.0448584221, -0.0656816661, 0.0543651879, -0.0231628492, -0.0179965124, -0.0026894435, 0.0384208485, 0.0220832005, 0.0406904668, 0.0475627854, -0.0257807113, -0.0431591719, 0.0127494261, -0.0127571858, -0.0718551800, 0.0028496534, 0.0504076704, -0.0250665285, 0.0389949381, 0.0023174956, -0.0027017295, -0.0214288570, 0.0647857040, 0.0141862631, -0.0461167097, -0.0694560930, 0.0274838656, 0.0068847910, 0.0660165846, -0.0343438610, 0.0290075764, 0.0161609203, 0.0022755787, -0.0062057376, 0.0148718357, -0.0407119431, 0.0247412100, -0.0384040177, 0.0199247450, 0.0480623916, 0.0347883701, 0.0620839298, -0.0263946205, 0.0447608829, 0.0163024738, -0.0615555607, 0.0624293387, -0.0561948270, 0.0578431189, 0.0079074129, 0.0251992568, 0.0328649059, -0.0372495390, 0.0276716277, 0.0449453816, 0.0536468029, -0.0109511018, -0.0712015256, 0.0308890790, -0.0052568242, 0.0019390732, 0.0037442595, -0.0195448622, 0.0704353303, -0.0276172198, -0.0136334039, 0.0662302524, 0.0348148048, -0.0399154276, 0.0160650983, -0.0626098141, -0.0507594012, 0.0351269767, 0.0557743162, 0.0328272432, -0.0044325516, 0.0337931588, -0.0461215079, 0.0262593627, -0.0095430017, -0.0648807287, -0.0017904788, -0.0024632514, -0.0577642396, 0.0610087812, 0.0692191422, 0.0605062842, -0.0548393950, 0.0265495479, 0.0078822747, 0.0152793527, -0.0305787288, 0.0091931298, 0.0401263088, 0.0698902607, 0.0281338021, 0.0066904947, -0.0247032158, 0.0013703182, 0.0135900974, 0.0612046421, 0.0092412904, 0.0512550324, 0.0411707535, 0.0320763513, 0.0644491613, -0.0271486901, 0.0233332589, -0.0681810156, 0.0373780876, 0.0210776925, -0.0138045065, 0.0220064595, -0.0343230590, -0.0284546874, -0.0403286889, -0.0062753558, -0.0474320501, -0.0256255977, -0.0171355903, 0.0160997137, 0.0375612825, -0.0100744367, 0.0505707189, 0.0149060935, -0.0116692632, 0.0542122573, -0.0106417835, 0.0204699114, -0.0518628471, 0.0116597489, 0.0050169006, -0.0227685459, 0.0311304480, 0.0047843680, -0.0273137167, 0.0142733306, -0.0379855074, -0.0597689897, -0.0017671287, -0.0125957727, -0.0031183138, 0.0695408732, 0.0226378962, 0.0508278832, 0.0081884265, 0.0294719636, -0.0129676051, -0.0561041832, -0.0099698044, 0.0717682540, 0.0527369455, -0.0534319654, -0.0106548257, -0.0466193929, -0.0081878304, 0.0391398966, -0.0379735641, -0.0011491477, 0.0621141642, -0.0409063399, -0.0715251938, 0.0246569142, -0.0301657058, -0.0088803321, 0.0469617844, 0.0090797022, -0.0549777150, -0.0009072199, -0.0570360124, 0.0339332297, 0.0696282983, 0.0088352710, -0.0526283905, 0.0115308911, -0.0472349152, -0.0213268399, -0.0580606684, 0.0379757881, -0.0318812169, 0.0701776594, 0.0610778034, -0.0286569297, 0.0290915444, 0.0691559613, 0.0545997322, 0.0137574300, 0.0299464464, -0.0605492629, -0.0182009228, -0.0366602205, 0.0651737601, 0.0108884573, 0.0606818050, 0.0417542532, -0.0389932841, -0.0028738752, -0.0166856274, 0.0280872807, 0.0100113079, -0.0484629348, -0.0360112637, -0.0273673311, 0.0339919254, 0.0349215865, 0.0706768334, 0.0458650962, 0.0649230033, 0.0274723917, 0.0288464949, -0.0684633180, -0.0544891246, -0.0632193983, 0.0199769288, -0.0464359224, 0.0077281594, -0.0205774680, -0.0242960937, -0.0234373398, -0.0430908129, 0.0328084156, -0.0628394336, 0.0093411207, -0.0456234701, -0.0475443229, 0.0571059287, -0.0670779124, 0.0469539016, 0.0561066568, 0.0137879178, -0.0389759913, 0.0194833651, 0.0220853314, -0.0454467945, 0.0540253222, 0.0429998413, 0.0553319156, -0.0717744455, 0.0556436628, -0.0363888070, 0.0420198143, -0.0073014200, -0.0394987054, -0.0027344003, 0.0594720691, 0.0300278515, 0.0098434612, 0.0070488825, -0.0488556027, -0.0229379795, -0.0481087267, -0.0184289105, 0.0605240911, 0.0002654791, 0.0454032421, 0.0658503771, -0.0363621004, -0.0036226287, 0.0188961476, 0.0103030577, -0.0286822580, 0.0168282315, 0.0268376321, -0.0343562700, -0.0681255385, -0.0467639603, -0.0219854340, 0.0684766173, -0.0642733574, 0.0023865104, -0.0562462397, -0.0586487502, -0.0581096560, 0.0721459985, -0.0674694479, 0.0296135396, -0.0488828905, 0.0482424200, -0.0536435358, 0.0138509646, 0.0612902492, -0.0298722349, 0.0555975437, 0.0371738449, -0.0489694923, -0.0334771425, -0.0556954481, 0.0036580041, 0.0238102525, 0.0011617541, 0.0183694437, 0.0549101382, -0.0200928338, -0.0027402863, 0.0389112234, -0.0149147473, 0.0651500374, 0.0335526094, -0.0068878829, 0.0670778304, -0.0295669064, -0.0680038035, 0.0231826007, 0.0244973376, 0.0100699291, 0.0354326665, -0.0698673278, -0.0087545514, -0.0662488788, -0.0588346832, -0.0114911422, -0.0195540152, 0.0133753270, 0.0579039603, 0.0004514232, -0.0494035035, -0.0334550999, -0.0321709737, -0.0344617106, 0.0603029132, -0.0596774518, 0.0341473967, 0.0226153731, -0.0399940424, -0.0020105168, 0.0275291577, -0.0642308742, -0.0058674812, -0.0138874054, 0.0048904866, -0.0139613077, -0.0255251825, 0.0203365088, -0.0031509548, -0.0344032943, 0.0170511603, -0.0401612185, -0.0715651810, -0.0112905838, 0.0039647073, 0.0218233839, -0.0087869912, -0.0255299658, 0.0422887877, 0.0310951769, 0.0208932608, -0.0162616633, -0.0139899887, -0.0701586157, -0.0675846934, -0.0026276857, -0.0511433631, -0.0558021776, 0.0390981883, 0.0539115518, 0.0249188244, 0.0622295141, 0.0227598026, -0.0435287654, 0.0042641535, 0.0324420258, 0.0196508914, 0.0105347410, -0.0420841351, 0.0717801303, -0.0097581521, -0.0223829709, 0.0571186095, -0.0513526946, 0.0034874901, -0.0489234626, 0.0714367181, 0.0008416995, -0.0235416628, -0.0010959953, -0.0058288351, 0.0385282785, -0.0625388026, -0.0407470092, 0.0602846295, -0.0328460820, -0.0191587359, -0.0296720043, -0.0167602189, -0.0319254361, 0.0414298102, -0.0365161002, 0.0083916336, -0.0055501610, -0.0021798089, 0.0103740320, 0.0202447325, -0.0499387607, -0.0414520577, 0.0031812042, -0.0478789508, -0.0445482582, 0.0556229800, -0.0433286056, 0.0079496056, -0.0076621398, -0.0180244558, -0.0118411891, -0.0305234790, -0.0195242688, 0.0339759365, 0.0683356375, 0.0710396767, -0.0185761787, 0.0696832538, 0.0669926405, 0.0573686808, -0.0123985708, 0.0099138170, -0.0238185488, -0.0470755324, -0.0426986068, -0.0593662225, -0.0218067952, 0.0185051188, -0.0324339382, 0.0332771018, 0.0092518851, 0.0460178554, 0.0711919069, -0.0069805086, 0.0535595566, -0.0607838891, -0.0256594941, -0.0131524689, 0.0503162518, -0.0587560497, -0.0719062984, -0.0441496409, -0.0616045669, 0.0070951879, -0.0365170799, -0.0280475169, 0.0605230927, -0.0260769539, -0.0389394462, -0.0679481477, 0.0171492547, -0.0462376699, 0.0332771391, -0.0124641620, -0.0551790521, -0.0340873860, 0.0349996984, 0.0390234962, -0.0642455071, -0.0409371406, -0.0624447353, 0.0274826437, -0.0517305657, -0.0643979311, 0.0500825047, 0.0610819906, 0.0685943365, 0.0699689686, -0.0650402829, -0.0438432284, 0.0615289360, 0.0375460014, -0.0098921880, 0.0547767431, -0.0470477641, 0.0706293136, -0.0601460673, -0.0597462952, 0.0059564039, -0.0297848098, 0.0702957064, 0.0672101825, 0.0330951586, 0.0320905522, 0.0681605786, 0.0093121752, -0.0590161756, -0.0532861575, 0.0692259222, 0.0239013284, -0.0691046864, -0.0526318178, 0.0347489715, 0.0432639420, -0.0470922068, -0.0655484572, -0.0022009537, -0.0218840353, 0.0012113824, -0.0167413056, -0.0441495031, -0.0409179553, -0.0657109544, 0.0600589514, -0.0257524252, -0.0058054179, -0.0020011216, -0.0589078777, 0.0366816744, 0.0187733993, 0.0089953914, -0.0159956329, 0.0491144881, -0.0215003490, 0.0566038191, -0.0156957805, -0.0202475525, -0.0457996130, -0.0539689958, 0.0067452267, -0.0322547853, 0.0637847632, -0.0073649511, 0.0712398589, -0.0137460195, -0.0284482017, 0.0438739434, -0.0269320607, 0.0428005755, -0.0184054039, -0.0679690465, -0.0089525506, 0.0291275755, -0.0538678914, -0.0001711547, -0.0202840492, 0.0109681860, 0.0041434541, 0.0173802972, 0.0605969429, -0.0299516432, -0.0658378825, 0.0546264946, -0.0296402909, -0.0434130207, -0.0707280561, 0.0198032856, -0.0310575478, -0.0408340730, -0.0195777267, 0.0340094045, -0.0539094955, -0.0140455849, 0.0277678445, -0.0553652421, 0.0472001210, 0.0584242195, -0.0416201986, 0.0382873565, -0.0669488162, -0.0356050394, -0.0308268256, -0.0040124208, 0.0001759157, -0.0469396040, 0.0283779502, -0.0368148722, 0.0080676377, -0.0681444332, 0.0308594704, 0.0573336184, 0.0275660306, 0.0018420666, 0.0616271943, -0.0221731886, 0.0114345178, -0.0143064484, 0.0564487129, 0.0065841377, 0.0478853881, -0.0635023788, -0.0608944409, -0.0222343393, -0.0474471897, 0.0471497923, -0.0234804787, 0.0620585680, 0.0172736868, -0.0271730870, 0.0563401580, -0.0141621418, -0.0447026007, -0.0529631078, -0.0415570177, 0.0495347381, 0.0642977804, 0.0067886934, 0.0361503586, -0.0325906686, -0.0094811469, -0.0501109101, 0.0506639034, -0.0251576006, 0.0634303540, 0.0061482713, -0.0256389305, 0.0096995309, -0.0175709315, 0.0044942349, -0.0144496746, -0.0225397870, -0.0064546093, -0.0424775593, -0.0156929046, -0.0455378145, 0.0009574816, -0.0633435249, -0.0076863319, 0.0515307114, -0.0162902586, -0.0414247513, 0.0266869217, 0.0558241457, -0.0680970326, -0.0692426860, -0.0340578407, -0.0425389856, -0.0035549924, 0.0066951886, 0.0645982474, 0.0693216324, -0.0316375569, 0.0119311959, -0.0494896919, 0.0104606897, -0.0408758856, 0.0697573125, -0.0006862283, -0.0379370525, 0.0191737041, 0.0649667978, -0.0134014301, -0.0656613782, 0.0701309741, 0.0423971340, 0.0502133071, 0.0233082771, 0.0343611240, -0.0062470362, -0.0666176602, -0.0638690591, -0.0296439230, 0.0646065623, -0.0330617279, -0.0243638530, -0.0224434510, -0.0379158556, -0.0366044007, 0.0370520577, -0.0342017375, -0.0522935912, -0.0291511491, -0.0175335594, -0.0349104516, -0.0083402768, -0.0617425442, 0.0049414486, -0.0022338852, -0.0282844640, 0.0297339484, -0.0549188703, 0.0316925496, -0.0355509259, 0.0461969897, -0.0374695398, 0.0286556408, 0.0304760262, 0.0568753034, -0.0087995455, -0.0067736357, 0.0241695940, -0.0544923767, 0.0291693062, -0.0472275168, 0.0318889767, -0.0144508108, 0.0393599197, -0.0674664527, -0.0603569150, -0.0053049326, 0.0564084500, 0.0193497613, 0.0313602090, -0.0394683182, 0.0627059788, -0.0324879996, -0.0252743289, 0.0616319180, -0.0236082524, 0.0478906482, 0.0055642128, 0.0114537179, 0.0609828085, -0.0377943963, -0.0414465368, -0.0263238996, -0.0561862588, 0.0473583192, 0.0235317200, -0.0163245499, -0.0370424762, -0.0573641397, -0.0038414299, -0.0652349889, -0.0272656754, 0.0498736203, 0.0046970695, 0.0132974014, -0.0140846781, 0.0421166047, -0.0049108565, -0.0315852165, 0.0598955303, 0.0248867571, -0.0218836926, -0.0191753916, -0.0627496168, -0.0695781186, -0.0543577708, -0.0188913494, -0.0109467842, -0.0138967671, 0.0491324365, -0.0273034945, 0.0316664949, -0.0113424435, 0.0293955803, -0.0558565855, 0.0280438513, 0.0049053803, -0.0013374016, 0.0356659517, 0.0156912506, 0.0137253404, 0.0167323947, 0.0683829635, -0.0484198853, -0.0712111071, -0.0353974253, 0.0473903939, 0.0602772832, 0.0441723391, -0.0574561581, -0.0154542886, 0.0280447453, -0.0339006595, 0.0689088851, -0.0501209274, 0.0514212251, -0.0375097841, 0.0684666038, -0.0566056967, 0.0555377007, -0.0447099507, -0.0010013580, 0.0547469407, -0.0585958920, -0.0428968780, -0.0655404553, -0.0214579180, 0.0475149006, -0.0404584073, -0.0166831501, -0.0309028625, -0.0420437343, -0.0570301786, -0.0609858930, 0.0506404340, 0.0609272569, 0.0432484895, 0.0088406876, -0.0232216939, 0.0291672722, 0.0486583635, -0.0077962801, -0.0295045674, 0.0340350568, 0.0489079431, -0.0660770684, 0.0342104584, 0.0161641687, 0.0176613480, -0.0296222605, -0.0119959936, -0.0139523931, -0.0235411301, -0.0369977914, -0.0491531491, 0.0192425102, -0.0660230964, -0.0263964087, 0.0135064721, -0.0679042190, -0.0435380042, -0.0504191816, 0.0117473081, 0.0428180695, -0.0605170019, -0.0103038512, 0.0553026199, 0.0316026658, 0.0175849199, -0.0578851141, -0.0131445043, 0.0213904157, -0.0670554787, -0.0707606822, 0.0293659046, 0.0199779496, 0.0445354953, -0.0371505506, -0.0114844143, 0.0054441988, -0.0318639427, -0.0072172657, 0.0132343695, -0.0243235230, 0.0703115016, 0.0505659357, 0.0426463857, -0.0215858333, 0.0072788298, 0.0260044336, -0.0382225066, 0.0714972913, -0.0702827945, 0.0003580153, 0.0562276393, -0.0429044142, 0.0383607745, 0.0210634470, 0.0271653086, 0.0475933105, -0.0524335131, -0.0277519114, 0.0584726632, -0.0144174844, 0.0212432668, 0.0439546555, 0.0438740104, -0.0330108851, -0.0147099569, -0.0586899929, -0.0256451778, -0.0020034611, -0.0127285905, 0.0687403381, 0.0165017098, -0.0624635257, -0.0148906223, -0.0185306519, 0.0480357707, -0.0667027086, -0.0272864960, 0.0216948316, -0.0453417301, -0.0522743724, -0.0485851839, -0.0307829157, 0.0681682378, -0.0201781429, 0.0674271584, -0.0692036599, -0.0243878402, -0.0225083679, 0.0684204251, 0.0684491098, 0.0191677660, 0.0148885772, 0.0614839345, 0.0089556798, 0.0648467094, -0.0235440917, 0.0641758144, 0.0517612621, -0.0128682554, -0.0295345262, -0.0495796800, -0.0693746731, -0.0284169540, -0.0154438615, 0.0406513959, -0.0258458555, -0.0623402223, 0.0637613982, 0.0124875307, 0.0582886338, -0.0072076172, -0.0573056377, 0.0049512386, -0.0678668767, -0.0018802062, -0.0086117610, 0.0184739530, 0.0182380751, -0.0526239201, -0.0021581799, 0.0721316338, -0.0321037993, -0.0299028456, -0.0144405551, -0.0660160035, -0.0081373230, 0.0533344001, 0.0379040539, -0.0106595941, -0.0587240271, 0.0111582130, -0.0415186472, 0.0070760399, 0.0197127089, -0.0504239462, -0.0660182238, 0.0439581871, -0.0251777843, -0.0383375846, 0.0568140447, 0.0205604210, 0.0180349350, 0.0215185359, 0.0679323822, 0.0075053871, 0.0315845758, 0.0556155294, -0.0225866772, 0.0683835000, -0.0586656295, -0.0382001549, 0.0056262091, -0.0233083628, 0.0079663843, 0.0026244745, 0.0591261983, -0.0421315059, -0.0018644854, -0.0307065733, 0.0287343562, 0.0517481863, 0.0590113699, 0.0520248935, 0.0310376063, 0.0539984852, -0.0529988296, 0.0057153404, 0.0395499244, 0.0683167875, 0.0479728431, 0.0704843700, -0.0687438026, 0.0698756427, -0.0608181469, 0.0204512402, -0.0514361970, 0.0574345589, -0.0388961881, -0.0541674867, -0.0530293211, -0.0073866844, -0.0116587505, -0.0617465675, -0.0414293781, 0.0631435066, 0.0489310697, -0.0480549894, -0.0707187131, -0.0603338927, 0.0299718603, -0.0270679034, -0.0415900350, -0.0698250979, -0.0386426523, 0.0119013935, -0.0438501313, -0.0362236612, 0.0696350634, 0.0523856431, -0.0390862003, 0.0513175949, -0.0651225448, -0.0453775041, -0.0477669537, 0.0567652583, 0.0708518177, 0.0223843828, 0.0550381243, -0.0621517450, 0.0440033525, -0.0596468411, 0.0068843737, -0.0399155617, -0.0659366325, 0.0149167776, 0.0639486909, -0.0464260280, 0.0647252053, 0.0510194749, 0.0483431444, 0.0443091616, -0.0689574704, 0.0648222268, 0.0233544931, 0.0012106225, 0.0275013298, -0.0531028770, 0.0195235610, 0.0581324697, -0.0068297461, 0.0419910103, -0.0612428002, -0.0658963844, 0.0618455559, 0.0448111072, -0.0165519342, 0.0076539665, -0.0653404444, 0.0239292234, 0.0600844622, 0.0401620939, 0.0611871183, -0.0168820731, 0.0659333169, -0.0518286228, 0.0307460427, 0.0596577376, 0.0188646615, -0.0682925954, 0.0218786001, 0.0403673649, 0.0558513254, 0.0488910303, -0.0050737336, 0.0289632529, -0.0542652160, -0.0276098214, 0.0682061166, 0.0598547310, -0.0494042784, -0.0206707455, 0.0381711125, 0.0530574471, -0.0307165347, -0.0554124340, 0.0138192326, -0.0598579459, -0.0655134916, -0.0130263306, -0.0370885395, -0.0230791718, 0.0258876532, -0.0508297607, -0.0692470893, 0.0290104374, 0.0361934304, 0.0350382626, 0.0639849454, -0.0691592172, -0.0137376748, 0.0319656804, -0.0534937382, 0.0293568373, 0.0068891793, 0.0537409037, 0.0152825713, 0.0345995501, -0.0103744306, 0.0193183571, 0.0328952596, -0.0498562567, 0.0153321922, -0.0567648411, -0.0573725551, -0.0057352632, -0.0317358561, 0.0552791357, 0.0306747034, 0.0154679641, -0.0426904336, 0.0010895282, -0.0469791964, 0.0284591615, 0.0705548078, 0.0270069614, -0.0578377284, -0.0138474368, 0.0523889810, 0.0308462679, -0.0227932706, -0.0298299082, 0.0411513448, 0.0603390336, 0.0457671583, 0.0340658054, -0.0570531860, -0.0638992935, 0.0225906670, -0.0532006919, 0.0509929582, -0.0345104188, 0.0665728003, 0.0385980010, -0.0468394607, 0.0307596549, 0.0545331538, -0.0502557531, -0.0226354897, 0.0436986089, 0.0601784438, 0.0142696276, -0.0509774238, 0.0176277608, 0.0209733695, -0.0186934397, -0.0166328400, -0.0257789232, -0.0054121315, 0.0259374827, 0.0061079338, 0.0400551558, -0.0040920526, 0.0113347843, 0.0395214334, -0.0665689111, -0.0259209611, 0.0170026869, -0.0689413622, 0.0633188933, -0.0365218110, -0.0235947110, 0.0503024384, -0.0481813699, 0.0060154721, -0.0612919405, -0.0685350224, 0.0071004704, 0.0624821931, 0.0157411024, -0.0376371108, 0.0527848303, -0.0300753899, -0.0335781090, 0.0550225079, 0.0062365383, -0.0243439302, -0.0100569725, -0.0233251378, 0.0224662796, -0.0266891420, 0.0279457942, 0.0573012680, 0.0451741740, 0.0646090955, -0.0107873492, 0.0504102185, 0.0626785010, 0.0440652221, 0.0219534487, 0.0466233343, -0.0547215641, 0.0301336497, -0.0495358743, 0.0657605827, -0.0162168927, 0.0426394567, -0.0193745904, 0.0635009557, -0.0149404183, 0.0458675921, 0.0674246848, -0.0557724088, 0.0634443164, 0.0380757898, 0.0219917297, -0.0459084585, 0.0338888913, -0.0085753351, -0.0456674658, 0.0187661871, -0.0092214122, -0.0544355437, -0.0654941350, -0.0333860517, -0.0031867772, -0.0376767032, 0.0279360190, 0.0131251961, 0.0076856911, -0.0346589796, 0.0440135747, 0.0464423746, -0.0268686898, -0.0257897303, 0.0577776730, 0.0098193884, -0.0129995756, -0.0535714924, 0.0321780443, -0.0161128603, -0.0511925742, 0.0515690148, 0.0112554356, -0.0600173101, -0.0434647426, 0.0176894665, 0.0695052743, -0.0698445588, -0.0356580354, -0.0110030845, -0.0552720502, 0.0494805351, -0.0251541063, -0.0458650291, 0.0474318638, 0.0554732382, -0.0007501468, -0.0398852117, 0.0239764899, 0.0501467884, 0.0277210921, -0.0638259575, 0.0325942487, -0.0558972582, 0.0373596251, -0.0468829758, 0.0180968940, 0.0218473375, 0.0210341960, -0.0456225425, 0.0449427664, 0.0559812039, -0.0607274696, 0.0252868235, -0.0602407344, -0.0330432169, -0.0641001612, -0.0127648972, 0.0578872263, -0.0265115537, 0.0390688404, 0.0651818961, -0.0323202908, -0.0510299355, -0.0681655109, -0.0659018904, -0.0720349476, -0.0633008555, 0.0417958274, -0.0535399877, 0.0405603200, -0.0677075833, -0.0573380366, -0.0535725057, -0.0554873347, -0.0198885612, -0.0553543828, -0.0534373522, 0.0374567881, 0.0443379432, 0.0643269271, 0.0420521498, -0.0126317367, 0.0061997995, -0.0533982590, -0.0072065964, -0.0130035654, 0.0572253317, 0.0583291054, -0.0014631823, 0.0413619801, -0.0695199668, -0.0090882182, 0.0352192521, 0.0648992956, 0.0624874979, -0.0292609595, 0.0046386346, 0.0427124947, 0.0289847627, 0.0215939507, 0.0432104096, 0.0552266836, 0.0148598254, 0.0666297227, 0.0104757622, 0.0220328569, 0.0612762719, -0.0602386892, 0.0266449898, 0.0042894483, -0.0395053960, 0.0583753288, 0.0008209348, -0.0602491498, 0.0713915974, 0.0570680648, -0.0471821092, -0.0508061871, -0.0138010643, 0.0408504382, 0.0376248807, -0.0382256210, 0.0150503144, 0.0611765236, -0.0179719776, -0.0007017478, 0.0396182537, -0.0430355296, 0.0224603117, 0.0396692380, 0.0647813678, 0.0326518044, 0.0112171471, 0.0588157177, -0.0239511244, -0.0649910718, -0.0468797944, -0.0720055476, -0.0305135511, -0.0422341228, 0.0696843565, -0.0073876455, -0.0562850088, -0.0423924215, 0.0118499994, -0.0538132936, -0.0609554350, 0.0645557046, -0.0506064221, -0.0263867378, -0.0218464062, 0.0437967926, -0.0292618722, -0.0272371620, -0.0100498162, 0.0449113995, 0.0387649015, -0.0419769399, -0.0355964527, 0.0391498804, -0.0366570726, 0.0631352961, 0.0473223776, -0.0221839771, 0.0664344132, 0.0405655205, 0.0310168713, 0.0518182442, 0.0573897958, 0.0463073403, 0.0148542151, 0.0142955408, -0.0345611982, -0.0513862297, -0.0090720281, -0.0359110720, -0.0112477243, 0.0698643029, 0.0511659384, 0.0039766505, -0.0600709617, -0.0124130771, -0.0038698018, 0.0079864413, 0.0291866958, -0.0238740742, 0.0393858328, 0.0464347154, -0.0671793967, 0.0174309388, 0.0389711708, -0.0447221324, -0.0345024876, -0.0448593348, -0.0142653957, 0.0577995479, 0.0201463774, 0.0282030255, 0.0687490106, -0.0213436335, 0.0000465587, -0.0033250675, -0.0650442094, 0.0642018318, -0.0191212259, 0.0191509202, 0.0447611362, -0.0127543323, 0.0577448756, -0.0472798571, 0.0460727140, -0.0145203955, -0.0021623746, -0.0259650461, 0.0679526329, -0.0093064308, 0.0421953723, -0.0355704017, -0.0177936330, 0.0560226589, -0.0365781784, -0.0675318167, 0.0110138729, -0.0461504832, 0.0098624006, 0.0639714003, 0.0145449638, -0.0079797655, -0.0072928220, 0.0385586843, -0.0359921120, 0.0189045072, -0.0224101730, 0.0661842674, 0.0587227941, 0.0026408359, -0.0366171524, 0.0054858550, -0.0268163979, 0.0040623918, 0.0245355889, 0.0167555735, 0.0382384062, 0.0301817060, 0.0136362761, 0.0160643533, 0.0520820916, 0.0084314719, 0.0275996700, -0.0040898845, -0.0602043793, 0.0238964781, 0.0647944957, -0.0079156235, -0.0507472008, 0.0604297817, -0.0240996666, 0.0277914703, -0.0496136472, 0.0621006489, -0.0584784225, -0.0147849582, 0.0632435083, 0.0565446317, 0.0109864622, 0.0330267847, 0.0490746424, 0.0311152413, 0.0436414182, -0.0262802318, -0.0018815696, 0.0580234230, -0.0388093814, -0.0634617880, -0.0445380397, -0.0063275248, 0.0203398466, -0.0536489189, -0.0434199721, -0.0033476576, -0.0031782240, -0.0350221880, 0.0263035968, -0.0261081681, -0.0249742344, -0.0674124584, -0.0037338883, -0.0570558347, 0.0030598119, -0.0157618187, 0.0034034923, 0.0536381900, 0.0464936122, 0.0427906811, 0.0083203539, 0.0646941066, -0.0473574400, 0.0490584448, -0.0514491200, 0.0124824345, -0.0323595367, 0.0488224775, 0.0564986020, -0.0473679751, 0.0638596117, 0.0031016767, -0.0685015842, -0.0571199134, 0.0469472259, 0.0198962316, 0.0257881433, -0.0017800704, 0.0706057250, 0.0106654763, 0.0287095159, 0.0678013712, -0.0689964965, 0.0056434870, 0.0560744554, 0.0702145696, -0.0163545944, 0.0506474078, -0.0573793314, 0.0660396665, 0.0539754331, 0.0154495016, -0.0345925987, 0.0076212063, 0.0376419649, -0.0067127049, -0.0696856752, -0.0717417896, 0.0091949999, 0.0029901043, 0.0389800668, 0.0046256259, -0.0014728978, -0.0669476986, 0.0033825189, -0.0572811700, -0.0194000192, -0.0440526158, 0.0042661503, 0.0430983156, -0.0336694606, 0.0453471839, -0.0459085777, 0.0156244040, -0.0405266136, -0.0061552748, 0.0441971272, 0.0237520114, -0.0563213825, 0.0672390908, -0.0644917116, 0.0168148801, 0.0136575624, -0.0531945005, 0.0017607659, 0.0642143935, -0.0088924095, -0.0620282032, -0.0400246345, 0.0179063305, 0.0152934790, -0.0360819995, -0.0136864334, -0.0632297620, 0.0661893636, 0.0196425244, 0.0274396166, 0.0182460025, -0.0139234364, -0.0694455281, 0.0163802281, 0.0041778311, 0.0464061052, 0.0503042415, 0.0304236338, 0.0381077230, -0.0677149966, -0.0401895046, -0.0473869368, 0.0390769094, -0.0098458864, 0.0426179469, 0.0432968214, -0.0670426413, 0.0473046154, -0.0530505329, -0.0310242362, 0.0356785953, -0.0691924766, 0.0020222515, 0.0647264719, -0.0218930356, -0.0483839735, -0.0048208982, 0.0429653451, -0.0373394601, 0.0256833956, -0.0237645395, 0.0411835015, -0.0090067461, 0.0707077235, 0.0109344795, -0.0287814699, -0.0540592074, 0.0428922847, -0.0057452619, 0.0429124981, -0.0469516963, 0.0025501922, 0.0056271777, -0.0486402661, 0.0367824882, 0.0346530080, 0.0075719729, 0.0607472956, -0.0430669487, 0.0619768351, 0.0210301876, -0.0179281346, -0.0409257151, -0.0463543981, -0.0421997979, 0.0168297961, -0.0362535305, -0.0252683759, 0.0394956246, -0.0029521808, 0.0660774857, 0.0520835519, -0.0483359024, 0.0411022007, -0.0349093340, -0.0175265893, -0.0159495398, 0.0347677097, -0.0547751635, -0.0135288611, -0.0489569977, 0.0062190890, -0.0433764905, 0.0432877913, 0.0336274579, 0.0620683134, -0.0347551480, 0.0383072644, 0.0475732982, -0.0708902776, -0.0146728419, 0.0631170273, 0.0656397641, 0.0484135002, -0.0714631304, 0.0160667673, 0.0206220374, 0.0717245787, -0.0109403990, 0.0181758925, 0.0522953272, 0.0683046430, 0.0590175837, -0.0510753617, -0.0212572068, 0.0435969234, -0.0453856438, -0.0446146764, -0.0308802538, 0.0180273131, -0.0544072762, 0.0593522042, 0.0066703632, 0.0419261977, 0.0301925465, -0.0555765517, -0.0347836912, 0.0145371184, -0.0475431681, 0.0513149276, 0.0651582628, -0.0621575601, -0.0525861345, 0.0070859790, -0.0252168067, -0.0102008358, -0.0626252443, -0.0446103215, 0.0330521986, 0.0694898814, 0.0600858480, -0.0424502343, 0.0257264301, 0.0512664765, 0.0678672791, 0.0119759142, -0.0363239907, 0.0431256369, 0.0333017409, 0.0194420889, 0.0611785203, 0.0224129111, 0.0382778421, 0.0321387947, -0.0281111635, -0.0224105865, 0.0100192726, -0.0372876339, 0.0400541276, 0.0374874994, -0.0428783968, -0.0121664591, -0.0123954080, 0.0675383508, 0.0226368010, 0.0162033513, 0.0398706347, 0.0542988926, -0.0099994168, -0.0343581438, 0.0074677393, -0.0688362494, -0.0450608879, -0.0214293934, -0.0083803013, -0.0457161963, 0.0496418998, 0.0717277676, 0.0400002375, -0.0718160719, 0.0347210467, 0.0673673749, 0.0691432804, -0.0212929621, 0.0568802208, 0.0165097788, 0.0404469669, -0.0420087874, 0.0169372857, -0.0712116808, 0.0549674332, -0.0008726567, 0.0085392669, 0.0074116290, 0.0433375537, 0.0413802564, 0.0084017366, -0.0084737837, 0.0547081828, -0.0045936927, -0.0301530436, 0.0695963204, 0.0554778278, 0.0381747931, -0.0454385206, -0.0462425388, 0.0081730112, 0.0523769930, 0.0583509356, -0.0121353827, -0.0622625723, 0.0419190079, 0.0384827554, 0.0548386574, 0.0576054752, 0.0042546391, -0.0017379969, 0.0008041710, -0.0203853436, -0.0128749646, 0.0699789375, -0.0569780096, 0.0224755034, 0.0578910708, -0.0241661854, 0.0005906746, -0.0642177165, 0.0008591339, 0.0579341203, -0.0478384979, -0.0100410059, -0.0630017370, 0.0016739890, -0.0607808083, -0.0589812286, -0.0068379194, -0.0712964535, -0.0237402432, 0.0708771795, -0.0031737536, 0.0421618596, 0.0079527050, -0.0385459885, 0.0590598285, 0.0570328683, 0.0636286587, -0.0418399051, -0.0379564278, 0.0046845078, -0.0692951977, -0.0030660033, -0.0668816268, 0.0468706936, 0.0314370543, -0.0716536567, -0.0188055746, -0.0526869968, 0.0539956689, -0.0559925847, 0.0670125633, 0.0592906326, -0.0201590434, -0.0352062471, 0.0102301240, -0.0491658151, -0.0455231741, -0.0380919985, 0.0086138546, -0.0274609141, 0.0666034371, -0.0268730931, -0.0328210630, -0.0548779890, 0.0042578727, -0.0168773942, -0.0525882505, -0.0538647547, 0.0133714378, 0.0316115096, -0.0584881790, 0.0512136817, -0.0597906522, -0.0212251693, -0.0441877842, -0.0378236808, -0.0362575389, 0.0040597618, 0.0273741260, 0.0360997394, 0.0411668271, 0.0424103141, 0.0199822634, -0.0349430926, 0.0675495118, -0.0168859288, -0.0411184281, -0.0252636261, 0.0650085509, -0.0296106450, -0.0347426385, -0.0378132351, -0.0002099723, -0.0477500260, -0.0434594415, 0.0529040247, 0.0290323421, 0.0579795539, -0.0183741227, -0.0505089276, 0.0086793303, 0.0550955087, -0.0398617759, 0.0097611994, 0.0413427278, 0.0561113358, 0.0184006765, 0.0355284885, 0.0365168378, -0.0596841276, 0.0592287481, 0.0684883893, -0.0279960334, 0.0675176084, 0.0387318879, 0.0134313852, 0.0461230054, 0.0679951310, -0.0320732929, -0.0497282930, 0.0545746684, 0.0568927526, -0.0004030243, 0.0350570157, 0.0055528432, 0.0397768468, 0.0709714144, 0.0655089170, 0.0298046172, -0.0294929557, 0.0541954488, 0.0325622633, -0.0165236965, -0.0517410785, -0.0232743807, 0.0579066426, 0.0591371208, -0.0300588384, 0.0338786021, -0.0304142870, 0.0056383908, 0.0644997507, 0.0170016065, -0.0517274141, -0.0139048360, 0.0293742493, -0.0475182198, 0.0366997048, 0.0399975702, -0.0514662936, -0.0622641556, -0.0473534837, 0.0159046501, 0.0199481323, 0.0361361802, -0.0415856838, 0.0549305379, -0.0272919834, 0.0654641390, 0.0526252985, 0.0610712767, 0.0579160005, 0.0533516109, -0.0550566763, 0.0664268285, 0.0332694948, -0.0416636281, 0.0136899427, -0.0485047102, -0.0194334686, -0.0590741597, 0.0489751026, 0.0160655975, -0.0016085878, 0.0587870181, -0.0296700783, 0.0516726300, -0.0021500587, -0.0711811185, 0.0617683232, 0.0460820049, 0.0560055375, -0.0367104448, -0.0214163996, -0.0428440049, -0.0220061317, 0.0246391222, 0.0598296523, -0.0448465161, -0.0605612546, 0.0634149462, -0.0485934466, -0.0146200694, -0.0177060701, 0.0139959082, -0.0456320383, 0.0425956771, 0.0600828528, -0.0486892685, 0.0583168268, -0.0483217239, -0.0550718196, 0.0134896785, 0.0047081113, 0.0416234359, -0.0334078521, -0.0553361773, -0.0113856830, -0.0329773165, -0.0094879568, 0.0616113096, 0.0168998614, -0.0559179410, 0.0130712017, -0.0047682002, 0.0435129851, 0.0020310059, 0.0504696295, -0.0262424462, 0.0499776453, 0.0562727600, 0.0698444396, -0.0289957933, -0.0411467142, -0.0634938106, -0.0010684133, -0.0523977056, 0.0555007458, -0.0358135812, 0.0397067443, 0.0200638622, 0.0511580408, 0.0668311566, -0.0284915939, 0.0003822893, 0.0410251021, 0.0054253638, -0.0680042356, 0.0053372309, 0.0524047762, -0.0257509276, 0.0262954906, -0.0183850341, -0.0202305876, -0.0162204169, -0.0166570991, -0.0530617684, 0.0412418470, 0.0233324021, -0.0200485103, 0.0101975352, -0.0018219128, -0.0376073606, 0.0511000529, -0.0427007452, -0.0658920184, -0.0525668971, -0.0670331940, 0.0484915674, -0.0337596722, -0.0573275387, 0.0461405590, 0.0617955923, 0.0299801528, 0.0040586889, 0.0356597006, 0.0349605083, -0.0452757813, -0.0384053588, -0.0666281208, 0.0237628520, 0.0704750866, -0.0074023008, -0.0329767130, -0.0678038523, 0.0129980445, 0.0573549271, -0.0362986960, 0.0229018256, -0.0145068169, -0.0279221833, 0.0572248697, 0.0386635587, -0.0116751976, 0.0371863917, 0.0257568136, -0.0546033233, -0.0439998060, -0.0245147720, -0.0393183120, -0.0694783777, 0.0408757105, -0.0148137808, -0.0129627697, -0.0018049330, 0.0523326695, -0.0006854311, -0.0457630455, -0.0156006292, 0.0372725055, 0.0512671620, -0.0230455361, 0.0144747272, -0.0538170636, -0.0688070655, 0.0365384817, 0.0202927589, 0.0214208737, -0.0242783204, 0.0209236071, -0.0332269631, 0.0300472900, -0.0548430756, 0.0648158044, 0.0214853287, 0.0422671959, -0.0431702361, 0.0667378306, 0.0719861835, 0.0543421507, 0.0425635725, -0.0551314056, -0.0385900885, -0.0473835096, 0.0198508576, 0.0080862269, -0.0304216333, 0.0229745954, -0.0347821601, -0.0542525537, -0.0606152155, 0.0570470542, 0.0291437507, -0.0238200463, -0.0361245349, 0.0677625388, -0.0438752696, -0.0272318646, 0.0403672159, -0.0671767667, -0.0411866680, 0.0476381332, -0.0639471784, 0.0212338269, 0.0654862672, 0.0247625932, 0.0579218715, 0.0530122668, 0.0655869693, 0.0420716107, -0.0483955219, -0.0354445204, -0.0099467672, -0.0678865314, -0.0568129830, -0.0182034038, 0.0483941436, 0.0432870984, 0.0300854072, 0.0397354439, 0.0231622085, -0.0256705061, -0.0248859301, 0.0059480593, 0.0525666028, 0.0661921948, 0.0549248010, -0.0156806186, -0.0698250979, -0.0000111014, -0.0482978374, -0.0231211223, 0.0485450476, -0.0540434271, 0.0708328038, -0.0577549823, 0.0683999211, 0.0348714590, 0.0104354993, -0.0178439617, -0.0565791652, 0.0232740343, -0.0203327611, 0.0616086572, 0.0146946236, 0.0353299752, -0.0134823844, -0.0695864335, -0.0612577200, 0.0218089148, -0.0492268987, -0.0584673248, 0.0567286909, -0.0327030122, 0.0191955715, 0.0423768014, 0.0591703951, 0.0699378252, 0.0106957108, 0.0682449341, -0.0484992042, 0.0031425729, -0.0320929252, -0.0468989983, -0.0131815672, -0.0675947592, -0.0615609139, -0.0002812371, -0.0302134901, 0.0382488295, -0.0093427747, 0.0106364340, 0.0461724550, -0.0631145611, 0.0401135758, 0.0054487437, 0.0083952174, -0.0682801604, 0.0257639363, 0.0122008398, -0.0652542412, 0.0349785388, 0.0339338183, -0.0719359592, 0.0707898438, 0.0017512292, 0.0304653421, -0.0693296790, 0.0587571710, -0.0604760684, -0.0363193117, 0.0106283948, -0.0653951988, 0.0681204945, 0.0272717625, -0.0256840140, -0.0030507594, 0.0626258850, -0.0274108462, -0.0456241928, 0.0495812148, 0.0607662499, 0.0668192953, -0.0424993932, 0.0380026996, 0.0550390184, -0.0555736423, 0.0641698986, -0.0001519173, 0.0148116648, 0.0538745970, -0.0278001912, -0.0160772093, -0.0068207830, -0.0285276771, -0.0202139840, 0.0704314709, -0.0379251800, -0.0232683234, -0.0690760016, -0.0643462986, -0.0709923655, 0.0617349148, 0.0608308315, 0.0183262378, 0.0287672728, -0.0139397308, -0.0460832752, 0.0160649568, 0.0558893234, -0.0247589126, 0.0294326618, -0.0123716965, 0.0613066852, 0.0400281250, 0.0442274660, 0.0204973072, -0.0413468927, 0.0217297822, 0.0114040971, -0.0568604544, 0.0528750122, 0.0255784690, -0.0064294934, -0.0529607534, -0.0400617644, -0.0252998620, 0.0254135430, -0.0665975660, -0.0632968470, 0.0519135222, -0.0488327518, 0.0574661791, 0.0310615227, -0.0272057280, 0.0540728569, 0.0335657373, -0.0087734610, 0.0126859024, 0.0513221696, -0.0345114544, 0.0318262428, 0.0477803722, -0.0388900787, 0.0676054209, 0.0386242419, 0.0540432334, 0.0323427096, -0.0454153568, 0.0030899569, 0.0513135195, -0.0300123282, -0.0031353831, 0.0152693018, -0.0271652080, -0.0668900236, 0.0124713928, 0.0047775581, -0.0073095262, -0.0396937206, 0.0460741594, -0.0322042480, -0.0125693977, -0.0543692820, 0.0288428143, -0.0394016951, -0.0644779652, 0.0436417460, -0.0554950275, 0.0686697662, 0.0292153284, 0.0524860471, -0.0565951020, -0.0284207575, -0.0062712058, -0.0590743683, -0.0515663996, 0.0708840340, 0.0131891742, -0.0049409494, -0.0618330315, 0.0433347300, -0.0384004228, -0.0063805580, -0.0164010338, -0.0506059043, -0.0234104656, 0.0170954168, 0.0238356516, 0.0705326498, -0.0179135948, -0.0240813754, 0.0656635016, -0.0707702339, -0.0511163473, 0.0368356928, 0.0455971062, -0.0237114206, -0.0337348431, -0.0439127944, -0.0563664287, -0.0334841646, 0.0549649298, 0.0278241411, -0.0204549097, 0.0609897673, -0.0278747119, -0.0433180220, -0.0304873958, 0.0116018504, 0.0432787538, -0.0693977997, -0.0142985359, -0.0049310178, -0.0591747165, -0.0178198218, 0.0412305295, 0.0251965597, -0.0182886235, -0.0275567733, -0.0438056327, -0.0498595946, 0.0659265965, -0.0224884264, 0.0383769870, 0.0261132121, 0.0598289073, -0.0409883298, -0.0088249817, 0.0604687184, 0.0673920810, 0.0529194772, -0.0294909589, -0.0125827827, -0.0414656028, 0.0559430122, 0.0209293216, -0.0222772546, 0.0627304018, -0.0411633849, -0.0045837462, 0.0034929663, 0.0421614796, -0.0619608760, -0.0259221829, -0.0311740004, -0.0355127789, 0.0583075285, 0.0094480589, 0.0632601976, 0.0345385894, 0.0099731609, -0.0096714124, 0.0475235879, 0.0229681060, 0.0301853046, -0.0422837809, -0.0206608847, -0.0612560846, 0.0707451552, 0.0240031406, 0.0477053523, -0.0361737087, -0.0362158306, 0.0096837878, -0.0400582887, -0.0692890212, -0.0680270717, 0.0142308623, -0.0127280392, -0.0128381252, -0.0671876892, 0.0029668957, -0.0225536563, 0.0010128915, 0.0634611696, 0.0002897531, 0.0577711761, -0.0300509743, -0.0026729926, -0.0670762658, -0.0315465182, -0.0230871066, -0.0717951804, 0.0655138195, 0.0415025279, 0.0452891663, -0.0367785320, 0.0398601741, 0.0169324204, -0.0441607386, 0.0386319682, 0.0297518745, 0.0594785661, -0.0612461381, 0.0166684762, -0.0495627150, 0.0013109520, -0.0554787144, 0.0327807665, -0.0470883176, -0.0611646846, -0.0376415849, 0.0265265554, -0.0589853749, 0.0667948723, 0.0411857218, 0.0243040994, 0.0346714929, 0.0136102140, -0.0647858530, -0.0671055317, -0.0520238467, -0.0253273770, 0.0306258723, -0.0336145200, 0.0067197755, 0.0589647442, 0.0231936276, 0.0502305999, -0.0507722385, -0.0310230851, -0.0154249668, 0.0198357850, -0.0068512708, 0.0153816044, -0.0357453227, 0.0427500755, -0.0556322820, -0.0518715531, -0.0235748887, -0.0710113421, -0.0083521977, 0.0384389833, 0.0247697160, -0.0004354939, -0.0372715779, 0.0237569660, 0.0069420710, -0.0688301250, 0.0067514926, -0.0078961626, 0.0611850023, 0.0423417315, 0.0570565611, 0.0277754962, 0.0566451699, -0.0522762649, 0.0654507875, -0.0293111503, 0.0459586531, 0.0369493216, -0.0072086304, 0.0659637898, 0.0588318259, -0.0562618449, 0.0609356314, -0.0510720611, -0.0053611323, 0.0331934988, -0.0717323422, 0.0119007379, -0.0144287683, -0.0403369144, 0.0579680800, -0.0230290852, -0.0685629621, 0.0537752509, 0.0120545998, -0.0491896123, -0.0386658981, 0.0557749271, -0.0181833208, 0.0416584983, -0.0456432030, -0.0147558637, -0.0094375610, -0.0226121247, 0.0447530672, -0.0279554613, -0.0188969560, 0.0590163022, -0.0622298457, -0.0359152853, -0.0531645268, 0.0052331313, 0.0210774019, 0.0363957435, -0.0662835985, 0.0606568903, 0.0334288999, -0.0012694523, 0.0154011175, 0.0297444239, -0.0135057159, 0.0437359959, 0.0212981403, 0.0417833179, -0.0469820686, -0.0623847879, 0.0323293880, 0.0285213962, 0.0216239989, -0.0345845781, 0.0215366408, 0.0347129554, 0.0574624836, 0.0274766386, 0.0711298436, -0.0122933537, -0.0602310151, 0.0571197271, -0.0430533700, 0.0201108679, 0.0342549756, 0.0637990087, 0.0349684879, -0.0457532033, 0.0721004605, -0.0557778850, -0.0417632535, 0.0550956875, 0.0199939311, 0.0605396479, 0.0061485618, 0.0439150855, -0.0520412102, -0.0227260478, 0.0698520094, 0.0204063505, 0.0680210590, 0.0653881580, -0.0317228511, -0.0565599278, -0.0220449343, 0.0541147888, 0.0072002187, -0.0414320640, -0.0333414897, -0.0719742849, -0.0599205941, 0.0183398128, -0.0567820817, -0.0673093051, -0.0154006220, -0.0632808954, -0.0119924657, 0.0256323218, 0.0080169141, 0.0284792408, 0.0465264916, -0.0035187900, 0.0526758805, -0.0407685712, -0.0020803064, -0.0506889597, 0.0207847208, -0.0417057350, 0.0283880830, -0.0700245723, -0.0236413591, -0.0349540524, 0.0635094941, -0.0158737451, -0.0503857993, 0.0229749233, -0.0273693949, -0.0308864973, -0.0228453204, 0.0036476627, 0.0569182038, 0.0627020895, 0.0418949500, -0.0013651028, -0.0277497917, -0.0313708261, -0.0695268959, 0.0088714361, -0.0679103583, 0.0335226059, -0.0007198602, -0.0679646954, -0.0402577296, 0.0276647955, 0.0432965159, -0.0038870573, 0.0672395527, -0.0074698552, 0.0621509850, -0.0546434149, 0.0471619070, 0.0474785045, -0.0626954660, -0.0379412360, -0.0442203954, 0.0435404629, 0.0385848880, -0.0242827423, 0.0485909134, -0.0470256507, -0.0399477221, 0.0067893639, -0.0027342662, 0.0575118512, -0.0421007723, -0.0642981380, -0.0290689729, 0.0257964581, 0.0132411718, -0.0480524935, 0.0029764995, 0.0492845774, 0.0607930571, 0.0148689449, 0.0285228267, -0.0678800792, -0.0211363137, 0.0345909670, -0.0242226757, -0.0464455038, -0.0101065449, 0.0156557560, -0.0088626072, 0.0563985705, -0.0232270434, -0.0620278753, -0.0342029408, 0.0594651997, 0.0478594750, 0.0036377907, -0.0578137599, 0.0412701890, 0.0285564438, 0.0116462559, 0.0043871254, 0.0168985724, 0.0423091426, 0.0002515242, -0.0341832079, -0.0693832412, -0.0055207163, 0.0254880115, 0.0572200865, 0.0069617853, -0.0022236854, -0.0244323015, -0.0536071956, 0.0002313033, 0.0482441187, 0.0132069960, 0.0219601244, 0.0551629961, 0.0181131884, -0.0667680651, -0.0036776364, -0.0711544827, 0.0565711856, -0.0314597823, -0.0157983787, 0.0705157369, -0.0144517906, 0.0365573093, 0.0638055950, 0.0292700604, -0.0557828210, -0.0431704074, 0.0655882508, 0.0152767897, -0.0112279691, -0.0685782731, -0.0600606874, 0.0093607828, -0.0067955405, -0.0381894037, 0.0537813008, 0.0497493520, 0.0459494591, 0.0210408717, 0.0395440757, 0.0143238604, 0.0139098912, 0.0473046377, 0.0399958491, -0.0457778797, 0.0278935879, -0.0502202064, 0.0038799196, 0.0018316880, -0.0661147535, -0.0625036135, -0.0488437489, -0.0049929991, 0.0516170189, 0.0629625022, 0.0515011698, 0.0650731176, 0.0487888381, 0.0008900687, 0.0581853986, 0.0414452106, 0.0389489606, 0.0460212305, 0.0103875771, -0.0382104293, -0.0293921754, 0.0103837401, -0.0184542872, 0.0664384663, 0.0614384562, 0.0034023374, -0.0070547014, 0.0242143124, 0.0709174424, 0.0685524940, -0.0210903063, 0.0329776257, -0.0036477521, 0.0544573069, -0.0231232233, -0.0310260952, -0.0482360497, 0.0386657119, -0.0148384385, 0.0296741351, -0.0143257901, 0.0651448071, -0.0013501123, 0.0346276164, 0.0417028740, -0.0400477238, -0.0076781064, 0.0270587876, -0.0299856402, -0.0011581779, 0.0404011458, -0.0084970593, 0.0554048121, -0.0464937687, -0.0170549788, -0.0549988151, 0.0193369389, 0.0558067709, 0.0297121257, -0.0458572209, -0.0574573129, 0.0096432120, 0.0056586787, -0.0075494200, -0.0583595447, -0.0057316720, -0.0419340283, 0.0416807979, -0.0342302322, -0.0171055496, -0.0052321479, 0.0103396922, -0.0557410419, 0.0438453779, -0.0210429206, 0.0634802729, -0.0350543149, 0.0333435386, -0.0043756515, 0.0666289181, -0.0052642226, -0.0202388130, -0.0404175594, -0.0525276326, -0.0570383370, 0.0659749508, 0.0263968557, -0.0050255358, 0.0280315280, -0.0254135989, -0.0337659530, 0.0553044081, 0.0287468508, -0.0636854321, -0.0090575889, -0.0369399600, -0.0211981200, 0.0390307456, -0.0317808688, 0.0718673468, 0.0119270831, 0.0575691760, 0.0073534548, -0.0551336594, -0.0205907337, 0.0668312162, 0.0584469587, -0.0095239058, -0.0583850630, 0.0548305660, -0.0146551356, 0.0049549714, 0.0718927979, 0.0444880351, -0.0464191958, 0.0530245304, 0.0380648598, 0.0607256442, -0.0462373756, -0.0390456617, 0.0293253958, -0.0030893385, -0.0676955357, -0.0586227328, -0.0693688393, -0.0428536534, 0.0590537488, 0.0454390198, 0.0205381885, -0.0504524745, -0.0014639497, -0.0462016240, -0.0140021555, 0.0679134279, 0.0403123051, -0.0556170866, 0.0558910966, -0.0308439992, -0.0441158116, 0.0378030315, 0.0711224228, -0.0469468310, 0.0192801282, 0.0357473195, 0.0686515421, 0.0024225861, 0.0445950255, 0.0587353855, -0.0064644367, -0.0139486790, -0.0334101245, 0.0606895834, 0.0393529832, 0.0066068172, -0.0683500692, -0.0086818412, 0.0276068747, 0.0596145391, -0.0158937387, 0.0514798537, 0.0632463843, -0.0357914530, -0.0325642414, 0.0449946821, -0.0272163264, 0.0658851564, 0.0357221439, -0.0668244958, 0.0608593374, 0.0280020386, 0.0328574181, -0.0014815927, 0.0358323678, 0.0676224977, -0.0100637339, 0.0578981191, -0.0476959422, 0.0520427227, 0.0403552055, -0.0021237507, -0.0087046400, 0.0549418032, 0.0377624407, -0.0184315592, 0.0179320723, -0.0220372230, -0.0236313269, -0.0176440217, -0.0471684299, -0.0649324879, 0.0220358297, 0.0139074028, -0.0573744811, 0.0046549961, -0.0664493665, -0.0207392275, -0.0611051507, -0.0376902446, -0.0256534554, 0.0355935246, 0.0123635083, 0.0255846456, -0.0515899360, 0.0492225438, -0.0115039423, 0.0077142566, -0.0633138791, -0.0105438270, -0.0336307958, -0.0465016812, 0.0415884852, -0.0258353092, -0.0266718157, 0.0142270103, 0.0271263719, 0.0144224241, -0.0531237274, 0.0040755719, -0.0594052449, 0.0414465517, 0.0626267046, 0.0053129494, 0.0595529824, 0.0372170880, -0.0376073457, -0.0342282541, -0.0217791647, -0.0343241952, 0.0379732028, 0.0391076058, -0.0304525718, 0.0532885492, 0.0196809471, 0.0190515071, 0.0325180963, -0.0262159482, -0.0165275335, -0.0205881372, 0.0720676035, -0.0550571084, -0.0523279868, -0.0493682139, -0.0656388104, 0.0116739422, 0.0696103871, -0.0668280795, 0.0070925727, 0.0021613240, 0.0004414991, 0.0062469468, -0.0269669034, 0.0150320083, 0.0090790316, -0.0571914539, 0.0534309298, 0.0130154416, -0.0188134722, -0.0470401570, 0.0441458523, -0.0036819056, 0.0193427429, -0.0112207457, 0.0615967810, -0.0159952566, 0.0230647400, -0.0613828264, 0.0606953651, 0.0672036856, -0.0662006959, -0.0273741446, -0.0139192902, -0.0459527820, 0.0151537582, 0.0125598460, 0.0229526013, -0.0248215087, 0.0575187504, -0.0329493210, 0.0124575198, 0.0365048647, 0.0103693902, -0.0443577170, 0.0281010941, -0.0329068042, -0.0669741407, 0.0407080576, -0.0383674726, 0.0173338279, 0.0688794553, -0.0230767466, -0.0424181446, -0.0238111168, 0.0421158448, 0.0144706145, -0.0320139825, 0.0356759131, -0.0240301713, -0.0309030339, 0.0416847542, 0.0132901743, -0.0107651874, -0.0296033509, -0.0522374287, 0.0558292121, -0.0561103597, -0.0389545001, 0.0540826917, -0.0189757794, 0.0478839949, -0.0419185758, 0.0187852681, 0.0300569460, -0.0551906638, -0.0493947119, 0.0660978705, 0.0260690227, -0.0680513307, -0.0065348968, 0.0213931352, 0.0522867590, -0.0029859245, 0.0471508130, 0.0358029604, -0.0624446310, -0.0037833899, 0.0066598356, -0.0145222507, -0.0614797324, 0.0265223756, 0.0081557035, -0.0530750379, 0.0226657242, 0.0595030487, 0.0156284645, -0.0220615715, 0.0436063632, -0.0483500436, 0.0647225529, 0.0188133195, 0.0368602797, -0.0465868898, 0.0664024800, -0.0653786287, -0.0287521333, -0.0064407289, -0.0007829741, 0.0355983600, 0.0247254148, -0.0193508081, 0.0077010393, -0.0250745788, 0.0629699826, 0.0475352556, 0.0202437192, 0.0251470730, 0.0221295729, 0.0375727788, 0.0263148695, -0.0285553634, -0.0100614317, -0.0259866044, 0.0493095592, -0.0505868196, -0.0534958690, -0.0700538233, 0.0125408024, 0.0309713408, 0.0204279646, -0.0521442406, 0.0679599494, 0.0104085356, 0.0567369312, -0.0377122350, -0.0437597446, -0.0067445561, -0.0062156990, -0.0437141657, 0.0279532596, 0.0667680949, 0.0572119355, -0.0266239792, -0.0249767788, 0.0270668194, -0.0068052113, 0.0550051332, 0.0144442394, -0.0085137188, 0.0111266226, 0.0714722723, -0.0434739105, -0.0664102361, -0.0629451796, 0.0007709488, -0.0411050767, 0.0100435540, 0.0168697536, -0.0612091459, 0.0256453156, -0.0486021712, -0.0487135462, 0.0012371391, 0.0086615160, 0.0152062550, 0.0127108023, -0.0357341915, -0.0053938553, 0.0631812662, -0.0367459059, 0.0291354433, 0.0515034720, 0.0074667260, 0.0141807050, -0.0161697976, -0.0025143996, 0.0352724195, 0.0080769807, 0.0095041171, 0.0419784561, -0.0115102604, -0.0107619874, -0.0067697987, 0.0565736145, 0.0351225212, 0.0148597583, 0.0026766732, -0.0272851512, 0.0317980573, 0.0397677571, 0.0057521760, -0.0145616718, 0.0140440390, 0.0280767828, 0.0341907293, -0.0492352247, 0.0121579766, 0.0692160577, 0.0583457649, 0.0640873015, -0.0534366965, 0.0005341694, -0.0393541530, -0.0695735589, -0.0456072949, 0.0702671260, -0.0355096795, -0.0346254967, -0.0305743255, -0.0019891411, -0.0028414577, -0.0007364824, 0.0443480089, 0.0660249889, 0.0069942921, -0.0472444668, 0.0101257116, 0.0107382610, -0.0399437472, 0.0104115605, 0.0240378603, 0.0024629235, 0.0418286398, -0.0635426417, 0.0560077876, -0.0008043647, 0.0212716609, -0.0345326513, -0.0345090441, -0.0470801443, 0.0431261733, 0.0150972754, -0.0383966863, -0.0008251145, 0.0145245418, 0.0299342647, 0.0567415953, 0.0399640203, 0.0213234201, 0.0068608746, 0.0203299522, 0.0375419259, -0.0283732153, 0.0286072567, 0.0187937841, 0.0650985241, -0.0460277684, -0.0351811945, -0.0198302642, 0.0104794055, -0.0007959306, -0.0127628297, 0.0075476468, 0.0196482241, 0.0301960409, -0.0341444910, 0.0628261864, 0.0675971657, -0.0570650920, -0.0029952005, 0.0500970259, 0.0682451129, 0.0567606837, 0.0094957352, -0.0527878255, -0.0425874889, 0.0148902088, 0.0027866736, 0.0206910521, 0.0017588735, 0.0586326420, 0.0318828002, -0.0027496964, -0.0273808353, -0.0282060392, -0.0057110563, -0.0621333010, -0.0102653243, -0.0645888746, 0.0309406668, -0.0656578168, -0.0134220608, -0.0450785086, -0.0594213344, -0.0505433753, 0.0683283657, -0.0245487206, 0.0387925878, 0.0441518426, 0.0486836582, 0.0410918444, 0.0292344093, 0.0536996722, 0.0677289814, -0.0251142755, -0.0218146257, 0.0132454857, -0.0290355571, -0.0171496496, 0.0096378624, -0.0188888870, 0.0450213999, -0.0524185449, 0.0622681081, -0.0174848624, 0.0613502264, 0.0133001357, -0.0110817328, -0.0595354289, -0.0515733510, 0.0668144673, 0.0155605003, 0.0049941018, -0.0011061952, -0.0255020894, -0.0224565454, 0.0327669531, -0.0621895492, -0.0720496625, -0.0622256473, -0.0151197091, 0.0185511783, 0.0469736904, -0.0219799094, -0.0401050225, -0.0099803694, -0.0679259449, -0.0230706893, -0.0141610056, 0.0446802527, -0.0108002722, 0.0042311028, -0.0649742484, 0.0167205706, 0.0378880873, 0.0223484337, 0.0249496102, -0.0093936473, -0.0313590541, -0.0369592495, 0.0051085874, 0.0245500952, 0.0718374550, -0.0076054782, -0.0242973007, 0.0311780125, 0.0664497912, -0.0111425593, -0.0337761901, -0.0559366979, 0.0390441120, 0.0448452234, 0.0001554787, 0.0337475240, 0.0318564028, 0.0595942289, 0.0350268036, -0.0106580108, 0.0592531711, 0.0173578635, 0.0311526507, -0.0164543390, 0.0578806698, -0.0436092392, -0.0538592488, 0.0081109479, 0.0638841987, -0.0344851092, 0.0119277015, -0.0605044588, -0.0016653165, 0.0604728460, -0.0694618225, -0.0358472876, 0.0373138413, 0.0263615623, -0.0287059695, -0.0235149786, 0.0025342926, -0.0115940347, 0.0301775932, 0.0642382205, -0.0100374781, -0.0254289620, 0.0666610599, 0.0323118269, 0.0166418180, 0.0545823276, -0.0384926461, -0.0631906316, -0.0495061725, 0.0696549416, -0.0689470246, 0.0148639679, -0.0626933500, -0.0586394593, -0.0457762964, 0.0646821260, 0.0427818224, -0.0632595941, -0.0600048900, -0.0007310659, 0.0009355247, -0.0130058527, -0.0052591786, -0.0623334087, -0.0649655014, -0.0377509855, -0.0370856114, -0.0692260265, 0.0360782295, -0.0480296612, 0.0380593017, 0.0081991330, -0.0374479294, 0.0198581740, -0.0719031170, -0.0537746623, -0.0268744715, -0.0290487558, 0.0633736551, -0.0250500254, 0.0077669099, -0.0339282416, -0.0673533231, -0.0196462087, -0.0119023733, 0.0317651778, 0.0456940308, 0.0331500992, -0.0036503673, 0.0597514212, -0.0658865795, 0.0440998971, -0.0004068464, 0.0187147409, -0.0618628338, 0.0537123233, 0.0039835200, -0.0339964814, -0.0108246021, -0.0708870590, 0.0317997932, 0.0325646177, 0.0053261146, -0.0514364019, -0.0682451427, -0.0107197277, 0.0498502702, -0.0315834619, -0.0274476670, 0.0159486607, -0.0269229598, -0.0481034443, 0.0259945914, 0.0433556661, 0.0508065298, -0.0157429241, -0.0163717642, 0.0396260321, 0.0045362189, 0.0246047974, 0.0070242956, -0.0041459128, 0.0323216990, -0.0209018774, -0.0272733308, 0.0318001434, 0.0306081027, 0.0314302891, -0.0155955181, -0.0321579129, 0.0040432215, -0.0384718105, -0.0362716652, -0.0373872593, 0.0053197667, -0.0479557253, 0.0667937100, 0.0420173258, -0.0227919295, -0.0657131225, 0.0170624852, -0.0609996580, 0.0713228583, -0.0002017617, -0.0122984983, 0.0510193557, 0.0580966026, 0.0359335244, 0.0719336569, 0.0132603869, -0.0671992898, 0.0056140646, -0.0500120074, -0.0341941677, 0.0365922526, 0.0082655624, -0.0199285299, -0.0171231180, -0.0115162805, -0.0070900097, -0.0204394385, 0.0130651817, -0.0521240905, -0.0340726227, -0.0003708303, -0.0458865389, -0.0402443074, -0.0561469272, -0.0468700901, 0.0567871630, 0.0432706326, -0.0235647373, -0.0017919242, -0.0166599043, -0.0172726735, -0.0122006647, 0.0394407734, -0.0639667585, -0.0374912024, -0.0051302537, 0.0355585963, -0.0529992767, -0.0173531994, -0.0568672344, -0.0225634463, 0.0549336970, 0.0683971047, -0.0649390221, -0.0596463755, -0.0590077266, 0.0270914808, -0.0257878862, -0.0032704324, 0.0577680022, -0.0691304132, -0.0330886059, 0.0156844929, 0.0301937386, -0.0331938900, 0.0213585347, -0.0655329898, 0.0250355378, -0.0346534736, 0.0387584865, 0.0006698593, -0.0649307817, 0.0532180667, 0.0298782364, 0.0177830532, 0.0415714383, 0.0697683245, -0.0457809605, -0.0680755600, 0.0651125461, 0.0211937651, 0.0359644815, 0.0186532661, 0.0437507257, -0.0622202456, 0.0422466993, -0.0382352583, 0.0624475926, 0.0109974220, 0.0552251786, 0.0396016687, 0.0341364741, 0.0528007001, -0.0265788659, 0.0481935889, -0.0235568583, -0.0185777098, -0.0533112623, -0.0604075193, 0.0431050584, 0.0130026340, -0.0089096725, -0.0371528715, 0.0365462825, -0.0549368337, -0.0510451496, 0.0501538590, -0.0603039525, 0.0623409748, -0.0125597604, -0.0291360244, -0.0072729439, 0.0327951834, 0.0078898147, -0.0134215429, -0.0023714378, 0.0474794880, 0.0468965694, 0.0017153546, 0.0474426970, 0.0162671357, 0.0521271676, 0.0065623596, -0.0105080232, -0.0206758715, 0.0033596829, -0.0222428069, 0.0136681795, 0.0132452622, 0.0340336114, -0.0703689754, -0.0484886765, -0.0634398311, 0.0230382755, -0.0623063259, -0.0566335917, 0.0534063429, -0.0230459981, -0.0270218104, -0.0287817791, -0.0697446465, 0.0099161565, 0.0194936767, -0.0587580092, 0.0122941807, 0.0121465847, 0.0173235908, -0.0574084967, 0.0575780272, -0.0075434819, 0.0576863736, 0.0190565288, 0.0601253361, 0.0006806329, -0.0404361598, 0.0267004073, 0.0084652454, 0.0598619431, 0.0230367258, 0.0167209506, 0.0372410715, -0.0005646423, 0.0436238274, 0.0510393977, -0.0575535968, -0.0692754462, 0.0280306563, -0.0137480870, -0.0440473482, 0.0314863101, -0.0168433934, -0.0258105323, 0.0413779989, 0.0282080546, 0.0226591453, -0.0250302739, 0.0286073089, 0.0365889370, -0.0250206888, 0.0710011125, 0.0241501704, 0.0032477379, 0.0030198246, 0.0599613488, 0.0306681842, -0.0705500916, 0.0387395397, -0.0656558722, -0.0682874694, -0.0167468823, 0.0016422272, 0.0463377386, 0.0318520889, 0.0341491029, -0.0248258114, 0.0230729654, -0.0092313737, -0.0133574493, -0.0636266395, -0.0247482620, -0.0032380000, -0.0663481951, -0.0172494799, -0.0314844884, -0.0019267872, -0.0578680113, -0.0419382080, -0.0022953674, 0.0409683511, -0.0620199442, 0.0180128217, 0.0275125876, -0.0711688697, -0.0719362050, 0.0441026837, -0.0268956162, 0.0366543680, 0.0531018227, 0.0332801268, -0.0062598735, 0.0452518985, 0.0519425794, -0.0030848980, 0.0247611180, 0.0507947281, -0.0630245209, 0.0147630349, -0.0569656901, 0.0518215001, -0.0704699829, 0.0158078447, 0.0271013901, -0.0065933317, -0.0211442113, -0.0383462906, 0.0445736200, 0.0440910384, 0.0550926924, 0.0718701780, 0.0671527684, 0.0564743280, -0.0222523734, 0.0237797126, -0.0105786547, 0.0466161892, -0.0119404532, 0.0149706528, 0.0286851525, 0.0194327831, -0.0686445236, 0.0163287818, 0.0019120425, 0.0597202480, 0.0127960369, -0.0161931999, 0.0215849206, 0.0228689983, -0.0568206087, 0.0561934561, -0.0482326448, -0.0612330288, 0.0518933907, -0.0593596324, 0.0247916356, 0.0560564697, 0.0178222284, 0.0573847741, -0.0200752504, 0.0131713822, 0.0121871755, -0.0099801831, -0.0376624912, -0.0219622552, 0.0292751938, -0.0144479722, 0.0714620203, -0.0453914925, -0.0695087090, -0.0220859870, -0.0163893178, -0.0378182605, -0.0456344113, -0.0468091443, 0.0391145349, -0.0637399256, -0.0259491988, -0.0060185343, 0.0559266806, -0.0074221641, -0.0241958164, -0.0190779492, 0.0354171470, -0.0362188257, -0.0390420817, 0.0495708510, 0.0198226795, -0.0519643649, 0.0023400486, 0.0672861040, -0.0117481723, 0.0121973231, 0.0100648031, 0.0437892526, 0.0269014537, -0.0698561445, 0.0324062183, -0.0619907118, -0.0531383902, -0.0224314034, -0.0643935278, 0.0036319718, 0.0331894010, 0.0154338777, -0.0404469818, -0.0384276435, 0.0364044607, 0.0031299442, -0.0369348340, -0.0248863772, 0.0597776473, -0.0392114967, -0.0087885708, -0.0350834616, -0.0156759731, 0.0409768149, -0.0462302342, 0.0679353178, 0.0179606900, 0.0101181939, 0.0010972321, -0.0474952683, -0.0631719455, 0.0244388878, 0.0573227406, -0.0655835718, -0.0652901232, -0.0585332587, -0.0691296160, 0.0444424078, 0.0076262280, -0.0324804634, -0.0310728252, -0.0175647363, -0.0485866293, 0.0716525167, -0.0556779318, -0.0373718739, 0.0031881034, -0.0049986243, 0.0153132975, 0.0361488089, 0.0152550861, -0.0189112537, -0.0263459422, 0.0142325312, 0.0290027112, 0.0082466528, -0.0028822571, 0.0516277403, -0.0102716573, -0.0391034223, -0.0607878976, 0.0315750986, -0.0394070819, 0.0475996062, 0.0281134471, 0.0136192963, -0.0060644075, 0.0458841324, -0.0531526208, -0.0336236544, 0.0218229517, 0.0683650523, -0.0143191144, 0.0019885227, 0.0294875875, 0.0700859725, 0.0420494974, -0.0063844919, -0.0591278970, -0.0379597992, 0.0610809475, -0.0144012049, -0.0492824912, -0.0072652176, 0.0199224204, 0.0316452682, -0.0359385498, -0.0590444095, 0.0280127898, -0.0475642830, -0.0387812145, 0.0259669721, 0.0581073314, -0.0092911720, -0.0552069582, -0.0656405240, 0.0362764299, -0.0339494944, 0.0029173940, -0.0265405104, -0.0599866994, -0.0167318955, -0.0678185970, 0.0557253659, -0.0341906920, 0.0584194362, -0.0266777501, -0.0364168026, -0.0380234644, -0.0067556053, -0.0674660355, -0.0188619941, 0.0058072060, 0.0166423842, -0.0150071979, 0.0162183866, -0.0525807999, -0.0697655678, -0.0047072172, -0.0668954253, 0.0062944219, -0.0295495987, -0.0426995754, -0.0343245901, -0.0366496556, 0.0579870343, -0.0403934009, -0.0466726460, -0.0041154251, -0.0117920972, -0.0574623011, 0.0449403599, 0.0511972681, 0.0627303720, 0.0050970986, 0.0155108944, -0.0619930513, -0.0418379307, 0.0583585352, 0.0578754842, -0.0199048370, -0.0720420405, -0.0183004625, 0.0720421225, 0.0499160513, 0.0329020172, 0.0110868290, 0.0596065670, -0.0158399008, 0.0276281089, -0.0317695662, 0.0458398908, -0.0262305737, 0.0077303275, 0.0488322526, 0.0387930050, -0.0495839827, -0.0008289889, 0.0088130757, 0.0196720511, 0.0007491857, 0.0517220125, 0.0205413178, 0.0149183422, 0.0598280132, 0.0385764763, 0.0673755854, -0.0009041429, 0.0328204110, -0.0629215389, 0.0298517421, -0.0383214280, -0.0354179367, 0.0596424639, 0.0581092238, -0.0006465316, 0.0103913248, -0.0297583118, -0.0664691180, -0.0618605800, -0.0393970832, -0.0528243221, 0.0272022486, -0.0188836902, -0.0159160048, 0.0623840839, 0.0004962459, -0.0336556584, -0.0103356838, -0.0574698709, -0.0322379395, 0.0208898187, 0.0388325453, -0.0188514814, -0.0264807530, -0.0265953131, 0.0622710735, -0.0153917074, -0.0438182428, 0.0469242409, 0.0178928301, 0.0649781525, -0.0543288812, -0.0645812526, -0.0286504440, 0.0387581736, -0.0628725737, -0.0294184871, 0.0343896523, 0.0526618436, 0.0069568306, 0.0149362236, 0.0403064266, 0.0306020230, -0.0176983960, 0.0597601980, -0.0201626047, -0.0086834878, 0.0031420588, -0.0082688555, -0.0012860075, 0.0225326121, -0.0441884398, 0.0154260844, -0.0284234397, -0.0421171039, -0.0264141820, -0.0634059533, -0.0418340415, -0.0413986817, -0.0160803236, -0.0050232112, -0.0517417639, -0.0386299528, 0.0119799227, -0.0112263002, -0.0311461091, -0.0415310040, -0.0493563265, 0.0184360519, -0.0629464239, 0.0622824728, 0.0032833740, -0.0511855334, 0.0287856013, 0.0150826499, -0.0624998659, -0.0237524249, -0.0127665289, -0.0720643252, -0.0501207858, -0.0311906226, -0.0698752552, 0.0580169111, -0.0245316140, -0.0599960759, -0.0710923374, 0.0126083493, -0.0204444975, 0.0091097653, 0.0365510434, 0.0474994630, -0.0407409370, 0.0040136278, -0.0655600727, -0.0393214449, -0.0512067154, 0.0294717550, -0.0174127519, -0.0433383584, -0.0054896623, 0.0605510771, 0.0354025885, -0.0085900277, 0.0003622472, 0.0147379711, 0.0404826030, 0.0329288468, -0.0218370445, -0.0088744983, -0.0609661043, 0.0139125288, -0.0069410503, -0.0241544694, -0.0416295081, -0.0365651213, -0.0217206106, -0.0581058189, 0.0043398961, -0.0448474288, -0.0673363358, 0.0604241490, 0.0378052220, -0.0459441468, 0.0354372561, 0.0518999472, 0.0643360764, -0.0400999635, -0.0066125691, 0.0388537943, 0.0415667593, 0.0431240723, -0.0115655065, -0.0062590241, 0.0025763288, -0.0346393473, -0.0506544411, -0.0461949781, 0.0509588420, 0.0547946393, 0.0067219436, 0.0484795198, 0.0140127167, 0.0080925524, -0.0430586860, 0.0586126000, 0.0078447014, -0.0007912368, 0.0623846203, -0.0242530257, 0.0043150708, -0.0064899847, 0.0397835076, -0.0500108041, 0.0480596870, -0.0438579395, 0.0482050255, -0.0307466127, 0.0032915100, -0.0531664528, 0.0563787967, 0.0039131418, 0.0293679684, 0.0241748244, -0.0013068914, 0.0636332631, 0.0681900531, 0.0328969061, -0.0592873320, 0.0361232236, 0.0569452345, -0.0314978436, 0.0266903415, -0.0135767944, 0.0392964259, 0.0106614679, -0.0032186434, 0.0127514899, 0.0140840262, -0.0164617710, -0.0259000212, -0.0238762945, -0.0632873997, -0.0690454468, -0.0458785519, -0.0212077573, -0.0363310948, 0.0128684789, 0.0250553116, 0.0002855062, 0.0307974741, -0.0146311857, 0.0005752817, -0.0699521676, -0.0456476100, -0.0540643334, -0.0093019381, -0.0712836012, 0.0167554691, -0.0470901430, 0.0041069388, 0.0069312081, 0.0329870358, 0.0051472336, -0.0565388203, -0.0501108915, 0.0422662273, -0.0346548855, -0.0014468357, -0.0502364337, 0.0619295985, 0.0304653198, 0.0130432472, 0.0360564813, -0.0056833848, 0.0417668819, 0.0374284983, -0.0048068464, -0.0636119619, -0.0018225163, 0.0243792012, -0.0120613948, -0.0097749270, 0.0261323452, -0.0652062595, -0.0220472887, 0.0553207546, -0.0449193493, -0.0721101761, -0.0346048996, 0.0029384717, 0.0594522506, 0.0142737776, 0.0539939106, -0.0050695986, 0.0597021282, 0.0559576899, 0.0433614329, -0.0221667178, -0.0011242107, -0.0435061902, 0.0647203624, 0.0608337671, -0.0293288752, -0.0566297024, -0.0700815096, 0.0196352825, 0.0286475718, -0.0370256491, 0.0452708229, 0.0335299820, -0.0292810574, 0.0246668234, -0.0464244634, -0.0438063219, -0.0077641755, 0.0703188032, -0.0352737829, 0.0299442112, 0.0658687502, 0.0200709626, -0.0600147992, 0.0461958200, -0.0548005104, -0.0454750992, 0.0597123653, -0.0379082151, -0.0703775808, 0.0467177406, -0.0148470066, 0.0721105933, 0.0712189078, 0.0382677242, 0.0521838516, 0.0027638972, -0.0699696541, 0.0442017242, -0.0338509679, 0.0366699919, -0.0139577612, 0.0363466516, -0.0030799583, -0.0701888949, 0.0602223426, -0.0644065365, 0.0586467534, -0.0206622966, -0.0347489715, 0.0617042482, -0.0549255461, 0.0626540780, -0.0277809538, -0.0016406253, 0.0032808408, -0.0458810851, -0.0569769591, -0.0107452795, -0.0318714604, -0.0049952492, 0.0648179799, -0.0233214051, 0.0485008061, 0.0114674643, -0.0578656010, -0.0252498426, 0.0291640908, -0.0085414201, 0.0391488820, 0.0502067134, -0.0656115338, 0.0506612882, -0.0367421210, -0.0055539235, 0.0625418276, 0.0511368215, 0.0398307219, -0.0320354216, -0.0175082982, -0.0262053832, 0.0550215989, -0.0072316527, 0.0540096015, -0.0589343421, -0.0471501723, -0.0466927253, 0.0516346246, -0.0718696639, -0.0432089865, -0.0171403587, -0.0332372002, 0.0168650523, 0.0078502893, 0.0465115085, -0.0474970900, 0.0536531359, -0.0682629496, -0.0652848333, 0.0294171274, -0.0367505029, -0.0694677755, -0.0226278342, -0.0170369484, 0.0370352864, 0.0602057725, -0.0014681667, 0.0067360401, -0.0580604970, -0.0614296459, 0.0421640277, 0.0346303284, -0.0480426699, -0.0558124855, 0.0053518042, -0.0003845245, -0.0202069283, 0.0242518559, 0.0388887525, -0.0545530990, 0.0534440279, -0.0279442593, -0.0009073466, 0.0069188923, 0.0060730800, 0.0133311227, 0.0437426567, -0.0310777836, -0.0586308911, -0.0257483833, 0.0043407381, -0.0365207605, 0.0045982674, 0.0108228624, -0.0029066205, 0.0702959299, -0.0690403506, -0.0524087884, -0.0665660575, 0.0300847143, 0.0651728362, -0.0185237676, 0.0516256541, -0.0382899754, 0.0584979206, 0.0194646642, -0.0548688844, 0.0214324221, -0.0369875543, -0.0530777201, -0.0264170058, 0.0030913502, -0.0684737489, -0.0659852922, -0.0183242410, -0.0211119838, -0.0354492366, -0.0300690234, -0.0667236671, 0.0369123593, 0.0527107269, -0.0473426133, -0.0008317530, 0.0077956393, -0.0305342488, 0.0651974678, -0.0654337928, 0.0663159490, -0.0018241704, -0.0650788620, 0.0607275218, 0.0580182523, -0.0043611303, 0.0198565945, -0.0633852705, 0.0159885138, 0.0331085473, 0.0300639644, 0.0387235433, 0.0549938977, 0.0012695193, -0.0359313078, -0.0268919021, -0.0256319791, 0.0647572428, 0.0603299439, -0.0318873413, -0.0308449641, 0.0441496372, -0.0513184369, -0.0145815276, 0.0426387116, 0.0528598130, 0.0022730827, -0.0693540052, 0.0545023084, 0.0175261050, -0.0541311987, -0.0578814149, -0.0564275607, 0.0277305022, -0.0243299231, -0.0416278541, -0.0606176779, -0.0571498163, 0.0192539915, -0.0438022092, -0.0305418707, -0.0499413088, 0.0051001087, -0.0452085547, -0.0049448237, -0.0623559169, 0.0139714405, 0.0317716971, 0.0689507276, 0.0224294066, 0.0379279852, -0.0641585737, 0.0687433183, -0.0116103142, 0.0394068062, 0.0204554945, 0.0468575284, -0.0375341326, -0.0165527426, 0.0321308970, -0.0594146736, 0.0403299481, 0.0523001850, -0.0270351097, 0.0630813539, -0.0668256134, -0.0078451931, -0.0225068033, 0.0692777634, -0.0337413289, 0.0332573652, 0.0242580697, -0.0210786909, 0.0402161926, 0.0625807196, -0.0545177236, 0.0556350350, 0.0145460665, -0.0489290729, -0.0574820712, 0.0374572873, -0.0674626455, -0.0173069499, -0.0268105157, -0.0167923942, -0.0101850927, -0.0084877536, -0.0116073526, 0.0626964867, 0.0316257030, -0.0704080909, -0.0462332293, -0.0168451816, 0.0533355623, -0.0665054545, 0.0420206264, 0.0701337308, -0.0342887864, 0.0099340156, -0.0502483025, 0.0604751706, 0.0179978907, 0.0605909824, -0.0137045868, -0.0198981613, 0.0466245860, -0.0040922090, 0.0189340860, -0.0680174157, 0.0419434756, 0.0456510037, -0.0164163634, -0.0313970968, 0.0562833548, -0.0600815602, 0.0322053134, -0.0432015359, -0.0646061972, -0.0270078704, -0.0320949703, 0.0183499008, -0.0393572524, 0.0419765264, -0.0189606547, 0.0096350908, 0.0173138008, -0.0114799924, -0.0327182561, -0.0248011351, -0.0352418125, -0.0179867409, -0.0517771617, 0.0595543236, 0.0223707035, 0.0187731236, 0.0340095237, -0.0230538100, -0.0156464987, 0.0129513592, -0.0422546864, 0.0079916418, -0.0058822408, -0.0420123488, -0.0693479702, -0.0219612233, -0.0524154119, -0.0199578330, 0.0190186054, 0.0190755576, 0.0114730075, 0.0158838779, -0.0204936899, -0.0529835001, -0.0222971253, 0.0172265619, -0.0048498586, -0.0394284688, -0.0136535726, 0.0543374568, -0.0460435823, -0.0242785774, -0.0319662839, 0.0575220138, -0.0702595785, 0.0486460105, -0.0333729051, 0.0008754060, 0.0029922947, 0.0369474962, -0.0495743304, -0.0070624799, 0.0022700056, -0.0467157140, -0.0093879402, -0.0276673585, 0.0634743124, -0.0523378290, -0.0227992758, 0.0715105683, 0.0681203455, 0.0719202608, 0.0207085684, -0.0664413795, 0.0721485764, -0.0185266919, 0.0069676861, 0.0191881433, -0.0693729892, 0.0643738955, -0.0220915601, -0.0184337609, 0.0429219976, -0.0652778372, 0.0236804187, 0.0700905770, 0.0504050031, 0.0481560454, -0.0197427198, 0.0586791039, -0.0502371565, 0.0707603097, -0.0456213541, -0.0653217584, -0.0555301458, -0.0611691400, 0.0636645406, -0.0608928055, -0.0496065579, -0.0170333497, 0.0601074845, 0.0167505443, -0.0408504903, -0.0408308059, 0.0683225989, -0.0184236616, -0.0421533585, 0.0019475222, 0.0375234112, -0.0380926318, 0.0054501221, -0.0663428232, 0.0067674741, 0.0459804684, 0.0184388533, -0.0394971557, -0.0293835923, 0.0010667816, 0.0111296326, 0.0448483378, 0.0388239920, -0.0358357765, 0.0153863728, 0.0660734326, 0.0343977511, 0.0523269698, -0.0140767805, -0.0039364547, 0.0289247632, 0.0166720897, 0.0261466056, -0.0204008967, -0.0408702418, -0.0250484794, 0.0369190350, -0.0153047629, 0.0428164899, -0.0195249543, 0.0228576958, 0.0013680607, -0.0023697168, -0.0589852184, 0.0052595586, -0.0532375500, -0.0521214604, 0.0591927171, 0.0224517807, 0.0228806138, -0.0120627880, -0.0073157772, -0.0323430188, -0.0503830314, -0.0418326631, -0.0595723204, 0.0398795530, 0.0458965525, -0.0505777374, -0.0244160593, 0.0599552095, 0.0649162829, -0.0357408151, 0.0499625951, 0.0325107947, 0.0331273749, -0.0251105241, -0.0412483513, -0.0626635700, 0.0146463066, -0.0044690445, -0.0456869788, -0.0424170420, 0.0566761345, -0.0612752177, 0.0364255607, -0.0086059943, -0.0505154505, -0.0272762403, -0.0258552842, 0.0093312413, -0.0344536379, 0.0185821354, 0.0694208741, -0.0001766384, 0.0462487862, -0.0690026507, -0.0225985125, 0.0044733807, 0.0377783626, -0.0671379790, 0.0281798691, 0.0463538617, -0.0102088526, -0.0702678189, -0.0060363561, 0.0252273902, -0.0319642723, -0.0339671820, 0.0066471323, 0.0690571666, 0.0277924687, 0.0561057776, 0.0059610829, 0.0213249326, -0.0625684112, -0.0369906873, 0.0093431845, 0.0283385962, 0.0403059050, -0.0554609746, -0.0471284762, 0.0022723079, 0.0153740197, 0.0269415900, 0.0540680140, -0.0460440814, 0.0145864859, -0.0254964791, -0.0491630808, -0.0378522947, 0.0585820228, 0.0296503231, 0.0647720844, -0.0383296348, 0.0218153298, 0.0277290419, -0.0444259234, -0.0354738906, -0.0705543458, 0.0106552541, -0.0291431658, 0.0059751049, -0.0635645092, -0.0615303889, -0.0285263360, 0.0683625489, 0.0526742861, -0.0166722573, -0.0142962821, 0.0617795587, 0.0201749057, -0.0252810046, -0.0355151370, 0.0323468074, 0.0573904365, -0.0549686477, -0.0136433169, -0.0365909301, -0.0257127993, 0.0098286793, 0.0055568889, 0.0262602195, -0.0220465660, -0.0274611562, 0.0020982996, -0.0294670574, 0.0606087744, -0.0366836190, 0.0499967784, 0.0157043487, 0.0163769796, 0.0052960739, -0.0348421931, 0.0159280300, -0.0614025109, 0.0623336136, 0.0368047208, -0.0239350200, -0.0397396274, -0.0204867385, -0.0694966987, -0.0006754398, -0.0366676003, 0.0119530782, -0.0425013751, -0.0610391796, 0.0453369990, 0.0392403677, 0.0300362781, 0.0159567818, 0.0208358094, 0.0631550252, 0.0008654445, 0.0553094745, 0.0456391945, 0.0311900228, 0.0483278111, 0.0710332692, -0.0047511980, -0.0550103933, 0.0191420466, 0.0393832177, 0.0163347572, -0.0002346933, 0.0672255605, 0.0202839300, 0.0257175788, -0.0721406192, -0.0164819211, -0.0332484543, 0.0663041323, 0.0522648543, 0.0387484208, -0.0008917525, 0.0551666468, -0.0669438764, 0.0717075169, -0.0425592028, 0.0216068774, 0.0002533793, -0.0232451819, 0.0201896057, 0.0351286307, 0.0253597945, -0.0642904490, 0.0187558979, -0.0181654282, -0.0031060427, -0.0134532712, 0.0520151779, 0.0186550543, 0.0695617050, -0.0576914214, 0.0560500324, 0.0535707325, 0.0366613418, 0.0505528897, 0.0296178386, -0.0108147934, -0.0027041733, 0.0250291005, -0.0695384070, 0.0477882549, 0.0005257428, 0.0466091856, -0.0386475064, -0.0170831457, 0.0169057176, 0.0623442084, 0.0539825708, -0.0268435664, 0.0629998744, 0.0198104978, 0.0476567671, -0.0525278561, -0.0173358582, -0.0073543191, -0.0135292895, 0.0290202573, 0.0569349825, -0.0294012427, -0.0269249901, 0.0335798115, -0.0074545741, 0.0509249419, 0.0374289155, -0.0440951288, 0.0030402839, -0.0299240090, -0.0558941141, 0.0034966469, 0.0649640262, 0.0373100862, 0.0337969065, -0.0306907929, -0.0631511956, -0.0671764538, 0.0260313079, 0.0325100422, -0.0476285815, -0.0076942071, -0.0117338561, -0.0134246387, -0.0072324798, -0.0342801474, 0.0479949415, -0.0307425521, -0.0589501038, 0.0515667796, 0.0696763396, 0.0644326061, -0.0696912855, 0.0047464967, 0.0383770242, 0.0296775252, -0.0485147610, -0.0248977318, -0.0248302482, -0.0133285075, 0.0541606694, -0.0270586126, -0.0381973535, -0.0483820140, -0.0299453102, -0.0535823479, -0.0093053505, 0.0564590544, -0.0217820182, -0.0285246149, 0.0433069393, -0.0607461743, 0.0213567615, 0.0396337882, -0.0088951290, -0.0554966964, 0.0143819526, -0.0416573808, 0.0680991262, 0.0451138020, -0.0101724118, 0.0182963312, 0.0706953704, 0.0583568811, -0.0418420434, -0.0255380683, 0.0214948431, 0.0569045842, -0.0310596637, 0.0197299868, 0.0034221262, 0.0007055327, -0.0254240595, 0.0678646266, -0.0633955076, 0.0670463294, 0.0621617436, -0.0125588328, 0.0473389104, 0.0446848795, 0.0118289739, -0.0371506549, 0.0452894270, 0.0546916425, -0.0520063639, -0.0038675144, 0.0604799390, 0.0462870002, 0.0702430457, -0.0117373839, 0.0153183043, 0.0378650650, 0.0272284597, 0.0022028312, -0.0334531739, -0.0005467013, 0.0415522829, 0.0695532560, -0.0560217313, 0.0289310813, -0.0403530374, -0.0709598139, 0.0151025876, 0.0679321140, 0.0029586852, -0.0304829590, 0.0340093896, 0.0530497283, -0.0145900957, 0.0070997328, 0.0647583455, 0.0491331741, -0.0323301479, -0.0001821443, 0.0347739011, 0.0502815098, -0.0652913451, 0.0588028133, 0.0516217351, 0.0570122898, 0.0256960243, -0.0665431395, 0.0074146762, 0.0318755209, 0.0663356930, -0.0184845887, -0.0134476796, 0.0641392469, -0.0488818586, -0.0623024739, 0.0090652630, -0.0074826032, -0.0181325451, 0.0072650984, 0.0069965273, -0.0702011436, 0.0092132092, -0.0341416709, -0.0224040486, 0.0225546509, -0.0654800609, 0.0665707141, -0.0054946020, 0.0314215645, 0.0333916247, 0.0042184219, -0.0078508258, 0.0491224229, 0.0274664238, -0.0487867221, 0.0566033721, -0.0298838653, 0.0482623950, 0.0595280677, -0.0701467097, -0.0529340282, -0.0161592849, 0.0678128302, 0.0592833906, 0.0571292341, 0.0152667239, 0.0527208075, -0.0270618312, -0.0095816329, -0.0244433656, -0.0574892126, 0.0308417976, 0.0667353719, -0.0666351914, 0.0436751768, 0.0091047361, 0.0561778694, 0.0706075132, 0.0296422541, -0.0197259076, -0.0018922538, 0.0319807529, -0.0470038690, 0.0020563006, 0.0026573017, -0.0009178221, 0.0675314069, 0.0366746038, 0.0345621407, -0.0430856645, 0.0709061772, -0.0199159347, 0.0516431183, 0.0023903623, 0.0239682645, -0.0190441050, -0.0080651790, -0.0295969136, -0.0205961913, -0.0708514825, -0.0340505131, -0.0545915030, 0.0319848135, 0.0260475352, 0.0668189824, 0.0464681685, -0.0581201687, 0.0170296505, -0.0617891029, -0.0097458139, -0.0643095076, 0.0250544995, -0.0016516224, -0.0542818569, -0.0196384490, 0.0400142968, 0.0120524839, 0.0492539108, 0.0134926215, -0.0457069352, -0.0122430623, -0.0687114671, 0.0132793859, -0.0503260419, 0.0499667376, 0.0061545298, 0.0042886361, 0.0039455593, 0.0245319605, -0.0245926641, -0.0576945022, 0.0158019587, 0.0461639017, -0.0711883456, -0.0236064643, 0.0171985179, -0.0204097927, -0.0143316388, -0.0547910109, 0.0052685589, -0.0189595371, 0.0237775669, 0.0646205544, -0.0530426204, -0.0465187691, -0.0178241059, -0.0696026385, 0.0365946963, 0.0530267656, -0.0136908069, 0.0316749290, -0.0344383083, -0.0487066284, -0.0226390511, -0.0187221244, -0.0167163573, -0.0448364317, -0.0359644629, -0.0348791033, 0.0255400836, -0.0702568963, -0.0059884936, 0.0354754403, 0.0027294159, 0.0202174410, 0.0655072480, -0.0545081384, -0.0065340027, 0.0110866576, 0.0472954288, -0.0436935872, -0.0650281161, -0.0011129081, 0.0561971962, 0.0212033689, -0.0180327147, -0.0156209320, 0.0040246099, 0.0262407735, -0.0108756199, -0.0703758597, 0.0361139849, 0.0692160279, 0.0588498116, -0.0027353168, 0.0215567499, -0.0225105360, 0.0322010666, 0.0652693361, 0.0294762626, 0.0054325834, -0.0262953714, 0.0513946265, -0.0642577037, -0.0588986911, -0.0037892610, -0.0698267221, -0.0345601998, -0.0640146807, 0.0272941515, 0.0324971676, 0.0424588546, 0.0571068823, -0.0450740866, 0.0061381534, -0.0411226451, -0.0627887398, 0.0047434568, 0.0532903373, 0.0154043064, 0.0120842829, -0.0255081654, -0.0253330544, -0.0250357091, -0.0699981600, -0.0317162089, -0.0206246153, 0.0168520510, -0.0430465564, -0.0593200400, -0.0325035527, -0.0321156196, -0.0166076124, -0.0107365064, -0.0462109670, 0.0441404358, 0.0455206260, 0.0370322242, -0.0508526787, -0.0243211985, -0.0320055149, -0.0165382363, -0.0566955656, -0.0464923754, -0.0463939011, -0.0206318088, -0.0505625457, 0.0438887551, 0.0089643821, -0.0204252973, -0.0323225968, 0.0326424092, -0.0588204004, -0.0424223430, -0.0516384244, 0.0640466809, 0.0352862030, -0.0463528112, -0.0331428759, 0.0420603007, -0.0393994413, 0.0695368648, -0.0641847476, -0.0025155246, -0.0059080645, -0.0454448499, 0.0648763180, -0.0554288849, 0.0066894591, -0.0565820932, -0.0517034642, 0.0437515378, 0.0286018029, -0.0496855006, -0.0371720567, -0.0359188840, -0.0250248015, -0.0106599033, 0.0605618656, -0.0645490736, -0.0221408233, -0.0042373985, 0.0336189568, -0.0637270212, -0.0693073943, 0.0073078424, -0.0094771013, 0.0410768390, -0.0141047053, -0.0267565548, 0.0140739903, -0.0075492114, -0.0134441517, 0.0139978379, -0.0096976683, -0.0698541775, -0.0426008403, 0.0354722887, -0.0633928254, 0.0006152689, -0.0107860416, 0.0711064041, -0.0657741725, 0.0030236915, -0.0583193526, 0.0579639524, -0.0094485357, -0.0676049441, 0.0078382790, -0.0092456788, 0.0232746750, 0.0469277501, 0.0322958902, 0.0270285383, 0.0454928726, -0.0381591022, -0.0426487476, -0.0601577833, -0.0071819946, 0.0487664193, 0.0713637173, 0.0003478304, 0.0202795416, 0.0676407367, 0.0599833131, 0.0150149018, -0.0377783254, 0.0248403326, 0.0221654624, -0.0686530173, -0.0534318462, 0.0442291871, 0.0400790572, 0.0078752190, 0.0706907362, -0.0155775696, -0.0267153122, -0.0678832605, 0.0329321474, 0.0190968066, -0.0351086855, 0.0658547878, 0.0571101010, 0.0656679571, -0.0597618818, -0.0545713529, -0.0279300995, -0.0549942032, -0.0419787094, 0.0330259949, 0.0391484872, -0.0274306834, -0.0404216014, 0.0262653455, -0.0424392894, -0.0361042134, -0.0574242771, 0.0060872063, 0.0198640600, 0.0567688942, -0.0123755150, 0.0021435842, 0.0578760654, -0.0615796335, -0.0547977239, 0.0483758375, 0.0521376878, -0.0187225714, -0.0095561445, -0.0708446130, -0.0667674094, -0.0444232039, -0.0551799461, 0.0214544609, -0.0111326128, -0.0266171321, 0.0100771561, 0.0379495993, -0.0690824091, 0.0599322319, 0.0039133504, 0.0013624728, -0.0466770157, 0.0480477810, 0.0340854377, -0.0116900839, 0.0078225881, -0.0539777689, 0.0593619049, 0.0343111008, 0.0134709105, -0.0182632990, -0.0284285694, -0.0543960929, -0.0373027734, -0.0425957143, -0.0520927384, -0.0157647766, 0.0473308042, 0.0520778224, -0.0706104711, -0.0286579803, -0.0462394953, -0.0104322955, 0.0409743413, 0.0084641129, 0.0640574545, -0.0619787350, 0.0134559423, -0.0151861794, -0.0166543275, 0.0321124718, -0.0229421780, 0.0433193445, 0.0215859339, 0.0364468917, 0.0531519353, 0.0096002668, -0.0475342870, -0.0538208485, 0.0382471830, 0.0582807511, 0.0629426688, -0.0382297859, 0.0241393596, 0.0067919567, -0.0243853964, -0.0636872947, 0.0481405929, -0.0447267741, 0.0204344988, -0.0113814510, 0.0287343934, 0.0564739555, 0.0134460777, -0.0706058443, 0.0128730536, -0.0148808323, 0.0273846537, -0.0265234448, 0.0002637357, 0.0034875572, -0.0682450235, 0.0570484549, 0.0605320930, -0.0029445961, -0.0657717586, -0.0088316724, -0.0009947866, -0.0626118779, 0.0512271225, 0.0232279375, 0.0698057264, -0.0490276292, -0.0475240350, 0.0125638768, 0.0311707631, 0.0186479837, -0.0189761743, -0.0077924952, -0.0316147432, -0.0432196856, 0.0263283253, -0.0622081980, 0.0704890043, -0.0035697594, -0.0225562379, 0.0407078490, -0.0021817833, 0.0490197316, 0.0107316673, -0.0564472117, -0.0651016608, 0.0389463976, -0.0602613986, 0.0159675702, 0.0309076980, -0.0328728370, -0.0382563360, 0.0465052277, -0.0046108589, -0.0411855504, -0.0377286859, 0.0343673825, 0.0689177960, 0.0195463970, 0.0178272501, 0.0072337687, 0.0040622503, 0.0228300244, 0.0532597750, 0.0352068171, 0.0089240745, -0.0383655094, -0.0588316694, 0.0033905879, -0.0054678097, 0.0257102028, 0.0322442204, -0.0141366385, -0.0542261451, 0.0273778588, 0.0620724410, -0.0535867363, -0.0501922965, -0.0384722054, -0.0215806030, -0.0406066217, 0.0596551299, 0.0630803108, -0.0689547136, -0.0703805387, -0.0677118301, 0.0661247969, -0.0174188949, 0.0677521974, 0.0378739908, -0.0644422919, -0.0010228157, -0.0064930320, 0.0197318792, -0.0594886988, 0.0457783118, -0.0221350081, -0.0022040009, 0.0441462174, -0.0499460734, -0.0316376947, -0.0645555109, 0.0139524490, 0.0574718267, 0.0119390935, 0.0404726192, 0.0700770766, 0.0623496026, 0.0333084017, 0.0537657589, 0.0543604791, 0.0488442108, -0.0550786182, 0.0573570132, -0.0137576684, -0.0663143992, 0.0390385017, 0.0456902161, -0.0030361712, -0.0195827857, 0.0506600663, -0.0068409294, -0.0525751933, 0.0462185889, -0.0705510378, -0.0309916474, -0.0609537177, -0.0247441679, -0.0293148682, 0.0705558956, 0.0646228343, 0.0370532274, 0.0265313759, -0.0246189721, -0.0445441678, -0.0309324749, 0.0181584433, 0.0357726663, 0.0043183565, 0.0317859650, -0.0134564713, 0.0295292586, -0.0433603674, -0.0293892175, 0.0330578610, 0.0544570833, 0.0029177219, 0.0232323110, 0.0303591266, -0.0444909483, 0.0572708398, -0.0105419010, 0.0617203116, 0.0046056807, 0.0196332708, 0.0513265580, 0.0512544289, 0.0161559284, 0.0170150772, 0.0192134827, 0.0703717321, -0.0168857016, -0.0180586800, -0.0220317692, -0.0268763639, -0.0693348721, -0.0433614999, 0.0000256523, -0.0291127972, 0.0565223098, 0.0287506208, 0.0045030639, -0.0022225454, 0.0324846283, 0.0095345154, -0.0578786284, -0.0394591801, 0.0601126850, 0.0055895969, -0.0143480375, -0.0305302404, 0.0358993337, 0.0140002817, 0.0621530414, -0.0157943033, -0.0218824521, 0.0024333596, 0.0657631159, 0.0344550163, -0.0032019541, -0.0130045302, 0.0465532690, 0.0589634478, 0.0559316874, 0.0177766308, -0.0580957718, 0.0038505644, -0.0615350679, -0.0182789043, -0.0356390029, -0.0524038523, -0.0446406230, -0.0076983571, -0.0444396362, -0.0418732688, -0.0352428965, 0.0565859824, 0.0659125447, -0.0639012530, 0.0290471390, 0.0518888608, 0.0120079368, -0.0519005805, -0.0350972787, 0.0620618761, -0.0401130579, -0.0714917779, 0.0296835005, -0.0373857617, -0.0252843946, 0.0098089948, 0.0248394758, 0.0569779873, -0.0385125391, 0.0627304316, -0.0463204831, -0.0559779592, -0.0077376887, 0.0034293011, -0.0269589722, -0.0577652715, -0.0592179373, -0.0093862340, 0.0430657789, 0.0619240850, -0.0027269721, -0.0087252334, 0.0179555267, -0.0239028595, -0.0450900048, 0.0433298275, -0.0206607655, 0.0539911538, -0.0661189705, 0.0662739575, 0.0516616330, -0.0500024594, -0.0001199320, -0.0088253617, 0.0130795687, 0.0138033703, 0.0216836482, 0.0250417665, -0.0316668265, 0.0101961568, 0.0232248232, 0.0299041197, 0.0225244388, -0.0542827174, -0.0583035387, -0.0229522586, -0.0047670603, 0.0262387469, -0.0570977144, 0.0606539100, 0.0629248321, 0.0623880178, 0.0388404950, -0.0357786343, -0.0643573776, -0.0372046307, 0.0298273116, 0.0719250143, -0.0667084605, -0.0575648174, -0.0121686943, 0.0125893056, -0.0297556967, 0.0565246642, -0.0656531602, -0.0378170572, 0.0645964891, -0.0204669684, 0.0143380091, 0.0607572943, 0.0027299300, 0.0480969399, -0.0708949417, 0.0650340319, -0.0622437485, -0.0309901349, -0.0573914461, -0.0112463832, -0.0366786309, -0.0096365213, -0.0332533754, -0.0554972291, 0.0361764953, 0.0130466297, 0.0626608431, -0.0404064097, 0.0448280498, 0.0223570019, 0.0194473714, 0.0231201798, 0.0701768845, 0.0593111068, 0.0248369575, -0.0691207051, 0.0471402258, -0.0273255520, -0.0351728834, 0.0098227635, -0.0539806262, 0.0360088199, 0.0388612226, 0.0655211210, 0.0535322279, -0.0322354287, -0.0277077220, 0.0551108122, -0.0036986992, -0.0687113479, 0.0254023299, 0.0532955676, -0.0147585310, -0.0225709490, 0.0703145266, -0.0600354820, 0.0250468925, 0.0287296101, 0.0295019373, 0.0110906139, 0.0649935305, -0.0401247591, -0.0307807475, -0.0336262360, -0.0262323469, -0.0572802946, -0.0672303811, -0.0144121647, 0.0234307721, 0.0180243850, 0.0364363119, 0.0555360168, 0.0296742246, -0.0561668649, -0.0419265069, 0.0111103654, -0.0047789142, -0.0372263975, 0.0321161523, -0.0589451827, 0.0657553822, -0.0479793474, -0.0181633644, 0.0651778430, -0.0054615438, -0.0672416985, -0.0669913664, -0.0337775163, 0.0023510978, 0.0673182905, 0.0669399351, 0.0657967776, 0.0403915644, -0.0147065483, -0.0288021192, -0.0423731841, 0.0271597728, 0.0345322415, 0.0018889010, -0.0564274415, -0.0663883165, -0.0058227926, 0.0318949670, 0.0635607094, -0.0215312205, -0.0173998140, 0.0447934344, -0.0361662582, 0.0331388637, -0.0604464710, 0.0268130302, 0.0512495264, -0.0527969636, -0.0564446673, -0.0694942549, 0.0232527480, -0.0679094270, 0.0326895043, -0.0098363198, -0.0311054848, -0.0566337295, -0.0353235267, 0.0375243425, -0.0082575679, -0.0566474237, -0.0260628276, -0.0079022869, -0.0079465732, -0.0626317337, -0.0532006435, -0.0623552427, -0.0266587883, 0.0096177608, 0.0429649279, 0.0647444725, 0.0368574187, -0.0327540450, -0.0132739805, 0.0610898882, -0.0647127926, 0.0523806363, 0.0474780574, -0.0350021794, 0.0344260931, -0.0439073741, -0.0354201905, -0.0676422864, -0.0014662743, -0.0330530405, 0.0165440515, 0.0085419491, 0.0279883072, -0.0481052324, 0.0162721425, 0.0584196001, -0.0375539176, 0.0030444413, -0.0333327651, -0.0008995682, -0.0419417694, -0.0488029681, -0.0451208204, -0.0581233725, 0.0215953439, -0.0315032788, 0.0472215638, 0.0232325345, -0.0594613031, -0.0604911745, -0.0495598614, 0.0643010437, -0.0244068168, 0.0650952160, -0.0499303490, -0.0530730411, -0.0174484551, -0.0039233789, -0.0613245666, -0.0544609055, 0.0469388440, 0.0447143167, 0.0324185863, -0.0013361424, -0.0101643577, 0.0149455667, -0.0631215498, -0.0299536884, -0.0596647523, 0.0457277894, 0.0324044451, -0.0278200991, -0.0325905345, -0.0219236612, 0.0682396740, 0.0073640719, -0.0127595440, -0.0641432106, 0.0698988587, -0.0136673190, -0.0203206651, 0.0346549898, -0.0221010782, -0.0308620334, -0.0552317202, 0.0242742077, -0.0477228202, 0.0482064039, -0.0160927661, 0.0258403122, -0.0199769139, -0.0033550039, -0.0041770861, 0.0006910786, 0.0700955987, -0.0205172300, -0.0128412060, 0.0451134071, 0.0235669240, -0.0655657649, -0.0583038479, 0.0286527872, 0.0422554240, -0.0298285820, 0.0210791528, 0.0182728320, 0.0665406734, -0.0576477014, -0.0597111396, 0.0108290613, -0.0222906731, 0.0165384933, 0.0360523388, -0.0246123634, -0.0696915835, 0.0535726994, -0.0380029008, -0.0305528343, 0.0241805688, 0.0120069757, -0.0556915775, -0.0090193599, -0.0198108405, 0.0042248368, 0.0157767385, -0.0481857732, -0.0054125935, 0.0314707756, 0.0563324392, 0.0703759938, 0.0078662261, -0.0358309597, -0.0339748710, 0.0664186627, 0.0253917798, 0.0536462069, 0.0431947932, -0.0473511294, 0.0025340691, 0.0407403708, 0.0555799901, 0.0533746034, 0.0130544454, -0.0128652789, -0.0351937190, -0.0039754286, 0.0076959506, 0.0362206995, -0.0280903429, -0.0192272663, 0.0108242780, -0.0239717551, 0.0500440672, -0.0494755134, 0.0336006880, -0.0073135868, 0.0381226093, 0.0471491218, -0.0222717114, -0.0183753446, -0.0410948545, -0.0574376956, 0.0559267253, 0.0153694227, -0.0634411871, -0.0232911035, -0.0204608440, -0.0362338275, 0.0267782360, -0.0178022869, 0.0658758730, -0.0277545601, 0.0218278915, -0.0318867750, -0.0258205980, 0.0489432663, -0.0395184569, -0.0481921732, 0.0227471218, -0.0209887028, 0.0623011440, 0.0474125370, 0.0512442961, -0.0145332627, 0.0444896892, -0.0614798516, -0.0485016331, -0.0680964440, 0.0703942478, 0.0294544324, 0.0529321581, 0.0078902096, 0.0576308668, -0.0479165837, -0.0145717040, 0.0465479344, -0.0631331280, -0.0212881975, -0.0361066200, 0.0242146030, 0.0241575688, 0.0271338746, -0.0118757896, 0.0477394909, -0.0184661597, 0.0594994575, -0.0687658563, -0.0243155025, -0.0171095245, 0.0183689073, -0.0587718971, -0.0187335983, 0.0052450225, -0.0099814720, 0.0590854883, 0.0034767911, 0.0086619183, -0.0091328844, 0.0706709474, 0.0151636526, -0.0575430505, -0.0048969686, -0.0555508807, 0.0041638911, 0.0476487502, 0.0013672039, -0.0143896788, 0.0066468790, -0.0030570403, 0.0421761572, 0.0187948570, 0.0053117499, -0.0305403769, -0.0276774056, 0.0529996753, 0.0074731112, 0.0049175173, 0.0666610152, -0.0369864181, 0.0276870951, -0.0153121799, -0.0278808549, -0.0680362210, 0.0470593944, 0.0437669381, -0.0305696093, 0.0075021535, -0.0540327802, 0.0565026253, 0.0451273397, 0.0301623344, 0.0444095284, 0.0095044225, -0.0172492042, 0.0010169819, 0.0303472355, 0.0195792913, 0.0097042769, -0.0222210735, 0.0616755486, 0.0069702342, 0.0364798456, 0.0221534520, -0.0528029874, 0.0087534040, -0.0493448824, -0.0023423880, 0.0374904126, -0.0015760884, -0.0491697043, -0.0568076335, 0.0166745484, -0.0048464164, 0.0455300361, 0.0228966177, 0.0515859798, 0.0713820159, 0.0351764634, 0.0516109467, 0.0446005017, 0.0667584538, -0.0219248161, 0.0155791044, -0.0684857219, -0.0589082576, -0.0318372212, -0.0318704620, 0.0075236261, -0.0030954480, -0.0476227477, 0.0371120572, 0.0124276653, -0.0204826444, -0.0116018131, -0.0098822601, 0.0146751627, 0.0582372695, -0.0380191803, -0.0692954063, 0.0248383880, -0.0348617248, -0.0577563941, 0.0238676891, -0.0241328590, 0.0360648930, 0.0266005769, -0.0540717170, 0.0606384724, 0.0154465958, 0.0044368356, 0.0609325171, 0.0105448738, 0.0206107646, 0.0006981492, 0.0468930230, -0.0705900118, 0.0181025192, 0.0612316579, 0.0184611008, -0.0598852187, -0.0214887522, 0.0693228096, -0.0407747813, 0.0528841615, 0.0639827549, -0.0168177709, 0.0293185860, -0.0535806641, -0.0598345771, 0.0430441797, -0.0291696824, -0.0665519685, 0.0325400829, -0.0136808269, -0.0198985040, -0.0692804530, -0.0720299631, 0.0440376773, 0.0679456294, 0.0559644997, -0.0585799254, 0.0228055045, -0.0169473700, -0.0091803074, 0.0572539866, 0.0382556096, -0.0694616511, -0.0674121976, -0.0233854130, -0.0507725812, 0.0021651834, -0.0158651769, -0.0424877629, 0.0490431711, 0.0575585812, 0.0062346086, 0.0713435113, -0.0099454746, 0.0079972148, -0.0320375040, 0.0540248007, 0.0505713001, -0.0318737328, -0.0464408398, 0.0548962653, -0.0207097009, -0.0518660471, -0.0721650124, -0.0031034425, 0.0494143441, 0.0107965544, -0.0279171430, -0.0244603120, 0.0294366032, 0.0308192074, 0.0336726382, 0.0340260640, 0.0258849338, -0.0249573886, -0.0694121495, 0.0185526907, 0.0015875623, 0.0557654798, 0.0343857259, 0.0064679980, 0.0704262108, -0.0091408193, 0.0114243850, -0.0241506323, 0.0113473684, 0.0132020414, 0.0444603339, 0.0064561963, 0.0216388777, -0.0017792806, -0.0494158417, -0.0097297430, 0.0562100857, -0.0363548063, -0.0715755373, -0.0492119268, 0.0577716529, 0.0557382852, -0.0407039411, 0.0051171780, -0.0078820735, -0.0053828433, -0.0639108717, -0.0537210479, -0.0636450201, 0.0399088189, 0.0026270375, 0.0707596689, -0.0651936457, -0.0614948049, 0.0117391720, 0.0679737926, -0.0521386303, -0.0021470487, -0.0383764543, -0.0469422862, -0.0200977400, -0.0363226645, 0.0693763196, -0.0564239994, -0.0399916321, 0.0270067677, -0.0672999471, 0.0282726809, -0.0518062711, 0.0120685175, 0.0606460720, 0.0692909658, -0.0369340591, 0.0635537356, 0.0389681980, 0.0413366556, -0.0643113703, -0.0038740188, -0.0155795142, 0.0515990406, -0.0164896473, 0.0227245018, 0.0378440693, -0.0352715775, -0.0039434582, 0.0434364527, -0.0276317410, -0.0432659909, 0.0419023857, -0.0377911106, 0.0346031114, -0.0028387085, -0.0229773447, -0.0476155877, -0.0356449410, -0.0150896832, 0.0362074673, -0.0696511120, 0.0455349609, 0.0629020929, 0.0122280568, -0.0038534403, 0.0687841773, 0.0451282337, -0.0550420880, -0.0415439904, 0.0201644972, 0.0187290758, 0.0681929290, -0.0572410598, -0.0514731407, -0.0497571826, 0.0606312901, -0.0063557252, 0.0176783502, 0.0250101611, -0.0270922706, 0.0015861392, 0.0126131549, -0.0318885818, 0.0011804923, 0.0303244367, -0.0244459435, -0.0125834532, -0.0127144828, -0.0110668503, 0.0393171459, 0.0398283452, -0.0147097334, -0.0620159507, 0.0165735483, 0.0079091191, -0.0336654857, 0.0029725209, -0.0620698258, -0.0040789768, -0.0144205615, 0.0632250160, 0.0338864326, 0.0147264749, 0.0664946288, 0.0355544165, 0.0501599833, -0.0338121168, -0.0005997270, 0.0562806129, -0.0486853421, 0.0260499418, 0.0359168202, 0.0093374178, -0.0076211691, 0.0183401778, -0.0452893898, -0.0528651550, -0.0311383158, -0.0220946074, 0.0635256916, 0.0535825342, -0.0607849211, -0.0260040164, 0.0329259038, 0.0089589804, -0.0373222865, -0.0232534930, 0.0267750323, 0.0514788851, 0.0449785590, -0.0561872721, -0.0661183149, -0.0533373989, 0.0541638732, 0.0643752962, 0.0693797022, -0.0516829863, 0.0488139465, 0.0020566434, -0.0168237612, -0.0367391966, 0.0199614316, -0.0003952980, -0.0405528545, -0.0372277386, 0.0110853091, 0.0073665529, -0.0697342530, 0.0236703008, 0.0340018868, 0.0356105939, 0.0010188073, -0.0531815588, -0.0175671801, 0.0389127061, -0.0399318933, 0.0095275193, 0.0341508389, 0.0100292042, -0.0199845880, 0.0052747726, -0.0190611407, 0.0108454749, -0.0613725185, 0.0519695953, -0.0533452258, 0.0273128226, 0.0510532185, 0.0226074085, 0.0009340122, -0.0022434741, 0.0561823547, -0.0242758244, -0.0612963475, 0.0021466538, -0.0260686800, -0.0491609983, -0.0159825422, -0.0249644592, 0.0529736578, -0.0290354192, -0.0584093928, 0.0610638261, -0.0594644882, -0.0415940955, 0.0366629586, -0.0419632792, 0.0133622810, 0.0505441874, -0.0445763059, -0.0617066510, -0.0306960940, 0.0099033713, 0.0616659075, 0.0509082898, 0.0319244191, 0.0070389435, -0.0703992620, -0.0457064062, -0.0027804673, 0.0606644303, -0.0037935227, -0.0259464607, -0.0264741629, -0.0246859044, -0.0164994709, 0.0698777586, -0.0269419178, -0.0250434540, 0.0457120985, 0.0128025785, 0.0088095963, 0.0387651622, -0.0445869043, -0.0433482192, 0.0611227751, -0.0616858974, -0.0267949961, 0.0025631860, 0.0611128360, 0.0322624743, -0.0270365365, -0.0313749537, 0.0690449923, 0.0720510334, -0.0271934755, -0.0412679687, -0.0371189415, -0.0656568035, 0.0506408140, -0.0466429815, 0.0357844308, -0.0137373134, -0.0084406585, -0.0553090274, 0.0398137197, -0.0147606805, -0.0523477048, 0.0606048554, 0.0004016161, -0.0397425182, 0.0221154988, 0.0119167790, 0.0065119937, -0.0007744431, 0.0369816869, -0.0541821122, -0.0512930229, 0.0330219120, -0.0183124207, 0.0313284993, 0.0195841119, -0.0385728478, -0.0008269921, -0.0291959383, -0.0491274446, -0.0127755105, 0.0693613142, -0.0093981773, 0.0568359047, -0.0245338194, 0.0575819165, -0.0380385891, -0.0351101495, 0.0137997940, 0.0516707227, 0.0032670423, 0.0586138368, -0.0705647692, -0.0063629672, 0.0355144665, -0.0065735057, -0.0628276318, 0.0010447055, -0.0397246256, -0.0637572184, -0.0027375519, 0.0026531219, -0.0588324293, 0.0129951313, -0.0148006529, 0.0372277051, 0.0219964311, 0.0606456399, -0.0081147999, 0.0434435084, -0.0496180169, 0.0170341432, -0.0133516006, 0.0477261618, -0.0062802434, 0.0420471430, -0.0392988361, 0.0426358208, 0.0571067035, -0.0510109067, -0.0364118628, -0.0517071635, 0.0319282785, 0.0332941711, -0.0587349385, -0.0154111870, -0.0367368758, -0.0591338649, 0.0236138627, 0.0384178162, 0.0322358906, 0.0504076332, -0.0280830450, -0.0061528310, 0.0104948431, 0.0554684252, 0.0498878807, 0.0705252737, 0.0139791146, 0.0193140730, -0.0600136109, 0.0318459943, 0.0496880263, 0.0553324670, 0.0447598621, 0.0103447512, -0.0278946012, -0.0241621770, -0.0004624203, 0.0636188686, -0.0447745062, -0.0315983631, 0.0537960827, 0.0103839263, -0.0518081635, -0.0260144621, 0.0170605704, -0.0223760009, -0.0546192750, -0.0352154672, -0.0286313780, -0.0347885974, 0.0449276790, -0.0681274012, 0.0422692224, -0.0462672785, -0.0347397476, -0.0268157125, 0.0524522513, -0.0316744298, -0.0167612843, -0.0642505959, -0.0398744419, -0.0609128848, -0.0345989801, -0.0484030917, 0.0262290388, 0.0044636130, -0.0544838086, -0.0283565931, 0.0665536374, 0.0489699244, 0.0262736082, 0.0151618794, -0.0134743676, -0.0389818437, 0.0475246534, -0.0262371972, 0.0055774301, 0.0208478346, -0.0719279125, 0.0160474926, 0.0170032382, 0.0699182451, -0.0087336451, -0.0396020971, -0.0021973252, -0.0130393021, -0.0018083379, 0.0521138012, 0.0170146152, 0.0583235472, -0.0667615235, 0.0390768871, 0.0655895621, -0.0219550803, -0.0596515015, -0.0461102389, -0.0329246819, -0.0324070938, -0.0115332119, 0.0107947141, 0.0554793328, 0.0707413703, 0.0605435967, 0.0530641079, -0.0577923022, 0.0312361494, 0.0654590875, 0.0155133232, 0.0628107190, -0.0398353115, 0.0027196556, -0.0261002369, 0.0044794381, 0.0600659400, -0.0719896331, -0.0227652788, -0.0007647574, 0.0075707883, 0.0576907098, 0.0288331583, 0.0044952855, 0.0022362992, -0.0306645036, 0.0564167947, 0.0150963962, -0.0430193543, 0.0694856644, -0.0162835643, -0.0564287491, -0.0218618065, -0.0544349775, 0.0068608522, 0.0612482876, -0.0090188086, -0.0466739684, -0.0025783405, 0.0507019460, 0.0285596773, -0.0352195650, -0.0187533014, -0.0010872334, 0.0690441877, -0.0349167846, -0.0700979754, 0.0440567806, -0.0132009909, -0.0295202956, 0.0410999805, 0.0019285455, -0.0467186049, -0.0686328188, 0.0072807446, 0.0169642866, -0.0035224035, 0.0316412896, -0.0641709864, 0.0624520481, 0.0177579820, 0.0568257719, 0.0017410591, -0.0548138246, 0.0408715680, 0.0275244936, 0.0608109385, -0.0006931797, -0.0337356701, -0.0358803757, -0.0460789911, 0.0202274397, 0.0647856593, -0.0472683646, 0.0068232790, -0.0504078567, -0.0008619353, 0.0466038361, 0.0128466934, -0.0698264241, -0.0704565942, 0.0404651538, -0.0577714480, -0.0030789599, 0.0219413191, -0.0719821602, -0.0413628779, 0.0186762363, -0.0615334511, 0.0287941173, -0.0029460266, 0.0648567826, -0.0291738622, -0.0612905324, -0.0257346854, 0.0417464450, -0.0055393726, 0.0112409815, -0.0371145010, -0.0511530489, -0.0288305245, -0.0364521965, -0.0604056083, -0.0710967407, 0.0309257656, -0.0370095260, -0.0071161762, -0.0716326684, -0.0127809308, -0.0507403538, 0.0522839576, -0.0026476458, -0.0419491343, -0.0195488036, 0.0130712390, 0.0286533013, 0.0120811164, 0.0081443638, -0.0721520782, -0.0410111099, -0.0125443973, 0.0177441612, -0.0006486624, -0.0273490734, 0.0129923820, -0.0622862130, 0.0423780903, 0.0181412548, -0.0439146347, -0.0035508275, -0.0675901473, -0.0329491645, -0.0252320543, -0.0306473821, 0.0381650031, -0.0016298220, -0.0559183881, -0.0184912123, -0.0225413702, -0.0632872432, -0.0356072746, -0.0430204719, 0.0343110710, 0.0559939891, -0.0523026064, -0.0101227015, 0.0571169853, -0.0523741506, -0.0718813986, 0.0616981685, -0.0473379828, 0.0670487285, 0.0384328067, -0.0365840122, -0.0384651162, -0.0114419833, 0.0040749833, -0.0181021951, 0.0014678612, -0.0509874374, -0.0257412419, -0.0607165247, -0.0105823018, -0.0440955609, 0.0652805120, -0.0317299552, -0.0490575507, -0.0605776384, 0.0225682482, 0.0707399547, -0.0498957261, -0.0033834279, -0.0638461933, 0.0028811544, 0.0544511825, -0.0086497664, -0.0316887647, 0.0575336367, 0.0009319112, 0.0631771535, 0.0542688519, -0.0163630769, 0.0522124767, -0.0387677774, 0.0178741440, 0.0548074841, -0.0003970563, -0.0037591457, -0.0550291650, 0.0600281060, 0.0660551339, 0.0259585083, -0.0638293475, -0.0025108755, -0.0130508132, -0.0108109042, -0.0129614435, -0.0027632043, 0.0447260886, -0.0329817533, -0.0203530118, -0.0350215547, 0.0034625977, 0.0486721843, 0.0645237863, 0.0585354269, -0.0082948655, 0.0452897027, 0.0622061193, 0.0263332576, -0.0037501976, -0.0290513188, 0.0135340914, 0.0596827269, 0.0502342805, -0.0469633825, -0.0012554154, -0.0434978604, 0.0583616048, -0.0209193937, -0.0206562243, -0.0167636052, 0.0067559108, -0.0010931045, 0.0211645663, -0.0463355035, 0.0268786326, 0.0481764823, -0.0510824174, -0.0167169273, 0.0652457774, 0.0396218672, -0.0596575439, 0.0622035414, 0.0604350418, 0.0346591324, -0.0432298705, -0.0411737971, -0.0634006858, -0.0182359405, -0.0505471267, 0.0057538971, -0.0679164156, -0.0352799743, 0.0580133051, 0.0275484473, -0.0556776747, 0.0344018638, -0.0261626430, 0.0384555012, 0.0682074428, -0.0110540986, 0.0369451195, -0.0115653537, 0.0385265946, 0.0158981085, 0.0420642942, -0.0165596269, -0.0447131991, 0.0466274098, -0.0593934059, 0.0316740349, 0.0052686259, -0.0628394485, -0.0255061164, 0.0656802207, -0.0086001456, 0.0009873882, 0.0366772711, 0.0420554727, -0.0341448709, -0.0482678153, -0.0114138685, -0.0052397400, 0.0591376722, -0.0626498908, -0.0574527681, -0.0074761212, -0.0267237946, -0.0615172237, 0.0151128992, -0.0009690300, -0.0167039856, -0.0618564487, 0.0027143955, -0.0226335637, 0.0082090944, -0.0544701442, -0.0401465409, 0.0632963926, 0.0477849841, 0.0622063279, -0.0432475433, 0.0582852811, 0.0052493066, 0.0379770920, -0.0179457702, -0.0263777040, 0.0419724137, -0.0496609136, -0.0633724332, 0.0553410202, 0.0660353154, -0.0334864184, -0.0708813518, -0.0700465664, 0.0473492667, -0.0202184580, 0.0364813581, -0.0260004550, -0.0693196654, -0.0520806275, -0.0569375604, -0.0375792980, -0.0079896450, -0.0122617632, -0.0701431781, 0.0336159617, 0.0004546270, -0.0056309775, 0.0229778439, -0.0608335473, 0.0569318980, 0.0436528772, 0.0361233801, -0.0190144591, 0.0532164872, -0.0449244753, -0.0109842606, -0.0307737961, 0.0489935130, 0.0154376179, -0.0090548024, -0.0638649985, -0.0019430816, -0.0211861469, -0.0355082713, 0.0628457516, 0.0213446692, -0.0551870838, 0.0154063329, 0.0642827451, 0.0519416183, 0.0276482552, -0.0089956298, 0.0356543660, 0.0045857951, 0.0472616926, 0.0710847527, -0.0575537682, -0.0710707903, 0.0471467525, 0.0240701213, 0.0262853950, -0.0043862984, -0.0377127528, 0.0242887512, 0.0021822527, 0.0370032266, -0.0186818428, -0.0111044273, 0.0245162845, -0.0470911935, 0.0644144565, 0.0542919040, 0.0686884969, -0.0100834891, 0.0534744263, -0.0710050315, 0.0005545244, -0.0572921112, 0.0367185995, -0.0070244521, 0.0058173537, 0.0180437267, 0.0045446679, -0.0420755483, 0.0558586717, -0.0559571758, 0.0521943644, -0.0531565920, 0.0658109188, 0.0319743380, -0.0335841142, -0.0522319749, 0.0336127430, 0.0180766433, -0.0587768853, -0.0291526467, 0.0055223182, -0.0199847259, -0.0189660229, 0.0625271499, 0.0065985247, -0.0260437466, 0.0309486687, 0.0064567477, 0.0444448516, 0.0311340094, 0.0505621135, -0.0059312806, 0.0194942281, -0.0296258405, 0.0636661947, -0.0460782349, -0.0430809185, 0.0350785777, -0.0588903427, 0.0434054285, -0.0315012671, 0.0682610720, -0.0663160831, 0.0242369398, 0.0416126475, -0.0172693357, -0.0537100025, 0.0510113016, -0.0003825128, 0.0352612212, -0.0234894268, 0.0702268332, 0.0643105954, 0.0323369280, 0.0500690788, -0.0599250160, 0.0317815095, -0.0186919086, 0.0699146837, 0.0716357976, 0.0677432120, 0.0143382996, 0.0224857628, 0.0178543329, 0.0028526634, 0.0141917318, -0.0508109517, 0.0540718287, 0.0305748582, -0.0488798097, 0.0508915111, 0.0568190962, -0.0289017968, 0.0168800578, 0.0086584017, 0.0584295690, -0.0609045066, 0.0103860274, 0.0330688208, 0.0376471281, -0.0353078842, 0.0675750971, 0.0402670056, -0.0353736132, 0.0703790039, -0.0005408153, 0.0628110617, -0.0685965866, 0.0288197920, 0.0687284172, -0.0711926445, 0.0667698383, -0.0002158731, 0.0651617944, 0.0326095968, -0.0369168893, 0.0305655822, -0.0622280203, 0.0306840315, -0.0116111040, -0.0697972924, 0.0121805146, 0.0158837214, 0.0593918711, 0.0341003910, 0.0574660450, 0.0057517663, -0.0091678873, -0.0484842546, -0.0513373986, -0.0648376122, 0.0223261565, 0.0696981698, -0.0360268541, 0.0001680180, -0.0349199511, -0.0553500280, -0.0015279576, -0.0215774179, 0.0013474002, -0.0348015875, 0.0373271927, -0.0354118124, -0.0350727253, 0.0120547339, -0.0256120227, 0.0590644032, 0.0578746051, -0.0139961317, 0.0084009990, -0.0242097713, 0.0153093785, -0.0586544946, 0.0499956757, 0.0514445603, -0.0220505260, 0.0075219721, 0.0064641610, -0.0346807130, 0.0694470555, -0.0228719041, -0.0150353648, 0.0136602819, 0.0448522270, -0.0497700013, 0.0302437544, -0.0066686049, -0.0533875749, 0.0049337745, -0.0399491154, -0.0439061001, -0.0444102809, -0.0540985577, 0.0669423640, 0.0483556166, -0.0247715414, 0.0218088627, 0.0463248864, -0.0532488227, 0.0412553400, 0.0432819724, -0.0041651651, 0.0436936915, 0.0468576476, 0.0554643422, -0.0623072907, 0.0511904359, -0.0171025023, 0.0410533324, 0.0484549329, 0.0635093600, 0.0154305100, -0.0497592837, 0.0301954225, 0.0502114668, -0.0105644055, 0.0596227497, -0.0533787310, -0.0712298974, -0.0542634800, -0.0239678994, -0.0557388254, 0.0581467599, 0.0382630080, -0.0204937793, 0.0418651700, 0.0470141098, 0.0069999322, -0.0621567853, 0.0096979439, 0.0238707736, -0.0077317208, 0.0004319176, 0.0458583012, 0.0159032717, 0.0508981049, 0.0604296327, 0.0048630536, 0.0066327155, 0.0153719559, -0.0417439304, 0.0137971938, -0.0181098357, -0.0679330230, 0.0577654392, -0.0425881073, 0.0482003987, 0.0222304538, 0.0507353097, 0.0249673501, -0.0680041835, -0.0276414603, 0.0529752672, -0.0417620838, 0.0580335259, -0.0138800070, -0.0263354480, -0.0647103488, -0.0140241273, 0.0547852665, -0.0186937675, -0.0516020134, 0.0615291148, -0.0303728357, -0.0162403248, 0.0426138490, -0.0198594816, 0.0163710639, -0.0322195962, 0.0591565520, 0.0173563138, 0.0538890213, -0.0213031471, 0.0325286612, -0.0471927449, 0.0685789436, -0.0139278397, 0.0691302121, -0.0396587066, 0.0671095699, 0.0205565989, -0.0095660239, -0.0173528753, 0.0319152698, -0.0577136502, 0.0601495653, 0.0668540448, -0.0705225244, 0.0422388017, -0.0587510914, 0.0525135025, -0.0359881893, 0.0582789332, -0.0394574106, 0.0252605602, 0.0311420113, 0.0623969585, 0.0305330977, -0.0548986718, 0.0114877149, -0.0117326677, 0.0610238910, 0.0364979133, 0.0067628324, 0.0050949454, -0.0080484375, -0.0196172334, 0.0686249882, -0.0401491746, -0.0239439160, 0.0403507650, -0.0716932118, -0.0374032781, 0.0295393094, 0.0310978964, 0.0495312810, 0.0665526241, -0.0465040058, 0.0579891205, -0.0575448424, -0.0540514812, 0.0062789023, 0.0117436647, -0.0474216416, -0.0061237812, 0.0050841272, -0.0469888821, 0.0005462989, 0.0504138768, 0.0427542925, 0.0456639081, -0.0108913109, 0.0677497089, -0.0329406150, 0.0657816380, 0.0039924458, 0.0113068968, 0.0123906583, -0.0375313796, -0.0042424202, 0.0636297613, 0.0139935538, -0.0591835082, 0.0271784738, -0.0095192418, -0.0265273824, 0.0026447028, 0.0611093193, 0.0217300057, 0.0713768303, -0.0103918090, -0.0143406913, 0.0236398801, -0.0400671698, -0.0459222756, 0.0586859286, 0.0075690374, 0.0700270534, 0.0546003133, -0.0620192364, 0.0445964560, 0.0527435541, 0.0169997141, -0.0169542208, 0.0610824823, -0.0258593634, 0.0393536389, -0.0659036487, 0.0174195841, 0.0107871965, 0.0479024574, 0.0719911903, 0.0162200779, 0.0107204840, 0.0536196679, 0.0012509897, -0.0263102055, -0.0535385236, -0.0580045953, 0.0297246724, 0.0269581974, 0.0628026277, -0.0013312399, -0.0580237284, -0.0125245750, 0.0050232485, 0.0693391114, 0.0192290395, -0.0097776614, -0.0204394907, -0.0348709300, 0.0370184407, -0.0251695924, 0.0519064814, -0.0374186598, -0.0580699630, -0.0096894801, 0.0203847736, -0.0364858694, 0.0599141717, 0.0094687194, -0.0635509193, 0.0562150776, -0.0611318201, 0.0669816136, -0.0697370544, 0.0185904577, 0.0546298623, 0.0533227175, -0.0536938980, 0.0018459484, 0.0458243191, -0.0655266196, -0.0167430453, -0.0052279830, -0.0395729505, 0.0075087920, 0.0625322759, 0.0489635020, 0.0073987395, 0.0335991010, 0.0512255207, -0.0494331867, -0.0352395736, -0.0585704260, 0.0432049558, 0.0068400726, 0.0673346817, 0.0303155407, 0.0588342845, -0.0152479820, 0.0127558485, 0.0689618886, 0.0144995600, -0.0200956576, -0.0507021025, -0.0591808408, -0.0171238929, 0.0401567444, -0.0682077557, 0.0181505755, 0.0012635663, -0.0709684789, -0.0558068417, 0.0020353273, 0.0214597285, -0.0206067562, 0.0633439571, 0.0089453757, 0.0535151213, -0.0438607633, -0.0684734583, -0.0044203550, -0.0586912148, 0.0150454491, 0.0621363074, 0.0395521298, 0.0101826340, 0.0358066633, -0.0429340787, -0.0272348933, -0.0395691805, 0.0348256603, 0.0106428489, -0.0302943774, 0.0663341731, -0.0354428850, 0.0242634863, 0.0402145609, 0.0600714535, -0.0597930439, 0.0415107161, 0.0694839358, 0.0055119395, -0.0386555567, 0.0159856379, -0.0087285861, 0.0292670876, -0.0314740986, -0.0286197290, 0.0166499913, 0.0356438383, 0.0362584889, -0.0428139083, -0.0155827142, -0.0360646024, 0.0703254938, 0.0053118020, -0.0298342928, 0.0613214374, -0.0324206203, 0.0508784726, 0.0231022611, -0.0253154859, 0.0595350713, 0.0354487523, 0.0705319345, 0.0663722008, -0.0483744964, 0.0114807189, -0.0258623399, -0.0675723255, 0.0397886485, -0.0715438500, -0.0097666159, -0.0017930269, -0.0544496030, 0.0404798985, -0.0165931247, 0.0037514344, 0.0223334506, 0.0022818893, 0.0001605526, -0.0088852569, 0.0063645542, 0.0049413815, 0.0134080872, 0.0193428621, 0.0310903937, -0.0015131608, 0.0330749303, -0.0571791381, -0.0560545623, 0.0579092950, 0.0668644309, 0.0319339558, -0.0320651866, -0.0159996934, -0.0399236679, -0.0603290722, 0.0365522876, -0.0586130135, 0.0547724813, 0.0185874999, 0.0458361432, 0.0623760819, 0.0027717948, 0.0009580478, -0.0256500468, 0.0559399128, -0.0225286894, -0.0318825431, -0.0422761925, -0.0497597456, -0.0216419250, 0.0184922963, 0.0491151810, -0.0628805012, -0.0575853623, 0.0677759647, -0.0596766584, -0.0558694527, 0.0614535064, 0.0391976610, -0.0293569565, -0.0318697765, -0.0600362383, -0.0296531469, -0.0016152486, 0.0248024464, -0.0226295553, 0.0317803174, 0.0544986576, 0.0707484335, -0.0091987178, -0.0689829886, -0.0525603928, 0.0454006642, -0.0107844584, 0.0104410723, -0.0227862522, -0.0394704156, -0.0140274987, 0.0269970968, -0.0083490312, -0.0190136693, 0.0458834097, -0.0410088226, 0.0156790912, -0.0556962378, -0.0279246792, -0.0095198229, -0.0701028779, -0.0416768417, 0.0227769464, -0.0214191526, 0.0023758709, 0.0180762485, 0.0497831255, 0.0329015553, -0.0545129031, -0.0713806078, -0.0603209883, 0.0380894840, 0.0355763882, -0.0170505047, 0.0445707664, 0.0351700112, -0.0573340096, -0.0185311660, -0.0114745386, 0.0543460399, 0.0052901879, -0.0011996999, 0.0440549552, -0.0310781784, 0.0177319795, 0.0252308473, 0.0182663947, -0.0180928186, 0.0085792392, -0.0101930946, 0.0666479617, 0.0713026822, -0.0618786104, 0.0360276774, 0.0153710768, 0.0370320007, -0.0506623760, -0.0495374724, -0.0418996476, -0.0180424005, -0.0023782849, 0.0248119757, 0.0576903075, -0.0039414465, 0.0457215607, 0.0396129340, -0.0295852162, 0.0263645947, -0.0715527236, 0.0377787203, -0.0589670315, -0.0668981597, 0.0494183898, -0.0343855694, -0.0496988185, -0.0366393477, -0.0371416733, -0.0305097327, 0.0437919199, 0.0455410331, 0.0538797677, -0.0473346263, -0.0038077235, -0.0313234888, 0.0394588187, 0.0466748103, -0.0459694713, 0.0514811724, 0.0448001251, 0.0009782836, 0.0011699796, -0.0639729500, 0.0216278881, 0.0306697190, -0.0642491132, -0.0571990088, 0.0628105700, -0.0700564235, 0.0647604764, -0.0669507906, -0.0266343392, 0.0051102936, -0.0642763004, -0.0142162181, -0.0071671829, 0.0002826676, -0.0634849668, 0.0519309640, -0.0243777372, 0.0476332977, -0.0521745756, 0.0002743229, -0.0616776757, 0.0564656556, -0.0143209547, 0.0408232659, 0.0217400864, 0.0210800841, -0.0422627032, 0.0616440177, -0.0480077416, -0.0423325971, -0.0635740757, 0.0444407240, 0.0033362508, -0.0312639549, 0.0660137981, -0.0199420899, 0.0634982586, -0.0415508077, -0.0117023326, -0.0554692373, -0.0451811776, 0.0120064914, 0.0162814185, 0.0209471658, 0.0681250244, -0.0524852015, 0.0134281144, 0.0331648439, -0.0356413946, 0.0360075682, -0.0281995498, 0.0347740576, -0.0420952141, -0.0656686053, 0.0257132649, -0.0556918532, 0.0052096248, -0.0480428077, 0.0571156591, 0.0199935213, -0.0168671384, 0.0486065745, 0.0473258346, -0.0488634817, 0.0317135602, 0.0183632672, -0.0397918858, -0.0324472897, 0.0000328273, 0.0216503218, -0.0102053285, -0.0144850686, 0.0615689009, -0.0700171739, 0.0589367449, -0.0514209010, 0.0412708595, -0.0535475761, -0.0536053367, -0.0597550683, 0.0189484358, 0.0457880124, 0.0157324150, -0.0425492600, -0.0191171281, 0.0339154378, 0.0462406278, 0.0582123250, -0.0146166310, 0.0032657906, -0.0263728015, 0.0021763816, -0.0027000457, -0.0720066130, 0.0293044448, 0.0195139572, 0.0571158677, -0.0360467248, -0.0611264855, -0.0066621527, -0.0250489265, -0.0715614632, 0.0604340136, 0.0423792228, -0.0446659513, 0.0655220896, -0.0439207926, -0.0032026246, 0.0423423648, -0.0151189193, -0.0605198927, -0.0243955143, -0.0662180111, 0.0169778913, -0.0317216776, -0.0666097775, 0.0006678477, 0.0218187198, 0.0455191955, -0.0533607453, -0.0497690365, -0.0202144161, -0.0471324697, -0.0324683152, -0.0148511007, 0.0325298980, 0.0610010475, 0.0418387577, 0.0629370660, -0.0423601419, -0.0273086578, 0.0211861804, 0.0033271089, 0.0700584650, 0.0091111735, 0.0337332115, -0.0667986572, 0.0496688783, 0.0476849824, -0.0118701309, -0.0057662353, 0.0314188302, 0.0218577757, 0.0693012327, -0.0614868402, -0.0645417795, 0.0547108650, 0.0259749740, -0.0124854483, 0.0332508609, -0.0530977137, -0.0571748018, 0.0490145534, -0.0045586750, 0.0059541091, -0.0285072029, 0.0099368393, 0.0208634213, 0.0529498756, 0.0510880947, 0.0279162303, -0.0157069974, 0.0547243357, 0.0690251440, -0.0529386774, 0.0115987659, -0.0040448904, -0.0458325781, -0.0703798011, 0.0351889208, -0.0360042937, 0.0052934885, 0.0473716706, -0.0404398926, -0.0637537763, 0.0683749467, 0.0684438497, -0.0071585774, 0.0013021305, 0.0545514971, -0.0577568412, 0.0095754042, -0.0427637175, 0.0640121102, -0.0650664046, 0.0077717453, -0.0458061695, -0.0719406456, 0.0532415062, -0.0279313028, -0.0353360511, -0.0705929548, -0.0547537580, -0.0118443221, -0.0301620066, -0.0347831063, -0.0526804402, 0.0592780262, 0.0431011543, 0.0604373217, -0.0249060951, 0.0640948266, 0.0624130070, 0.0606261343, -0.0541616194, 0.0485654846, -0.0208827965, 0.0145519003, -0.0526465103, 0.0578496009, -0.0455604084, 0.0035083666, -0.0402577296, 0.0358406454, 0.0313250348, 0.0075635836, 0.0530378371, 0.0072234422, 0.0307872891, 0.0575263649, 0.0102090761, -0.0160625502, 0.0002086982, 0.0218384564, -0.0369270556, -0.0080615655, 0.0713282526, 0.0285487548, -0.0536514148, -0.0301762186, -0.0051940233, -0.0685706511, -0.0508066677, -0.0608229116, 0.0684647262, -0.0258773938, -0.0578399822, 0.0664304942, 0.0061480105, 0.0703609437, 0.0122836828, 0.0083967969, 0.0496502295, -0.0634623170, 0.0038243756, 0.0708886385, 0.0132352635, -0.0492743365, 0.0073174611, -0.0404233597, 0.0542654693, 0.0545288771, -0.0417262428, 0.0370182469, 0.0470552817, -0.0152521133, 0.0393761620, -0.0486450493, -0.0524783209, -0.0619394854, -0.0594788715, -0.0269263983, -0.0043693706, -0.0251886398, 0.0686396658, 0.0534494519, 0.0130828023, -0.0049300715, -0.0009287670, -0.0152253583, 0.0604138672, 0.0663278252, 0.0068503246, -0.0438586473, -0.0610869117, -0.0065181553, 0.0588576943, 0.0185660645, -0.0279043578, -0.0450920835, -0.0090110675, 0.0181075782, 0.0634938031, 0.0711788833, -0.0703370273, 0.0425330475, -0.0548102483, 0.0076679885, -0.0622400641, -0.0123466775, 0.0405208319, -0.0139634050, -0.0481554233, 0.0116060451, 0.0421646088, 0.0161280036, -0.0088243634, -0.0232052617, 0.0375085995, 0.0390599966, -0.0120343640, -0.0589798018, -0.0176121034, -0.0547715500, -0.0082282647, -0.0288161077, 0.0270263180, 0.0151110515, -0.0326318629, -0.0423823744, -0.0456184819, -0.0462840907, 0.0255623311, 0.0549996942, -0.0617915317, -0.0579264089, 0.0107062906, -0.0478803813, 0.0620003045, -0.0714955106, 0.0290747210, 0.0575380772, -0.0652483627, 0.0436638370, -0.0022133589, 0.0607229918, -0.0501056612, 0.0659794211, 0.0056708083, 0.0430129170, -0.0562043265, -0.0355132408, 0.0123141557, 0.0522340760, -0.0605542362, 0.0197424814, -0.0222956650, 0.0679426789, 0.0138619393, -0.0186769888, -0.0286536776, -0.0438012481, -0.0446921401, 0.0210986882, 0.0379060805, -0.0343810804, 0.0141179562, -0.0049637854, 0.0038779229, 0.0097856149, 0.0306009278, 0.0421582758, -0.0239152648, 0.0191153064, -0.0119078979, 0.0323214084, -0.0624225549, 0.0280864015, -0.0173310377, 0.0556944460, 0.0589391887, -0.0352628045, -0.0056310445, -0.0577220991, -0.0428080931, 0.0139832944, -0.0582896173, -0.0289863311, -0.0585321411, -0.0221996680, -0.0470665842, -0.0435126796, 0.0502827987, -0.0656425431, -0.0711219460, 0.0715095550, -0.0454367101, -0.0167088732, -0.0655756593, 0.0524287447, 0.0468043759, -0.0500660874, 0.0283254310, -0.0389147028, -0.0036932603, -0.0584726408, -0.0372281149, -0.0582416803, 0.0642806888, 0.0264619961, 0.0207906887, -0.0433645844, -0.0492893383, 0.0326276496, 0.0533998460, -0.0289448276, -0.0456783064, -0.0150296167, -0.0523941442, 0.0363785848, 0.0452628434, 0.0571072549, 0.0248673260, -0.0285423882, -0.0320764072, 0.0583529323, 0.0020317659, -0.0315694734, 0.0711702555, 0.0440580845, 0.0270994753, 0.0145361573, 0.0465156063, 0.0548160970, 0.0144340023, 0.0523101985, 0.0632626414, -0.0225793794, -0.0579043999, 0.0550335497, 0.0127563104, -0.0491770357, -0.0068959519, -0.0567173846, 0.0468681976, 0.0412342250, 0.0077877119, -0.0144328661, -0.0531804077, 0.0456266031, -0.0020304695, 0.0093501881, 0.0545586050, 0.0084726065, -0.0078447685, -0.0249180533, -0.0207305029, -0.0055215061, -0.0649176389, 0.0356683061, 0.0653214753, 0.0185538977, 0.0078792796, -0.0352104977, 0.0425298810, 0.0693389177, -0.0005880445, 0.0678851455, -0.0378750749, -0.0653752536, 0.0230376720, -0.0059794560, 0.0658614933, -0.0459707305, 0.0543499589, -0.0015296116, -0.0137993768, 0.0466888174, -0.0297505520, 0.0697134137, 0.0711011440, 0.0153173283, 0.0475726947, -0.0357249491, 0.0050120950, 0.0228006393, 0.0210506991, 0.0381383672, -0.0560991615, 0.0066347942, -0.0220483579, -0.0616305619, -0.0262570716, -0.0019830316, -0.0411950126, -0.0648541972, 0.0070593134, 0.0612307787, 0.0622140318, -0.0353273451, 0.0067564622, -0.0175300129, 0.0509991348, -0.0653642789, 0.0511520877, -0.0456694439, 0.0317166746, -0.0066389441, 0.0223023593, 0.0529728830, 0.0611689985, -0.0209339522, 0.0672587305, -0.0101824440, 0.0117033646, 0.0031325966, 0.0362640768, 0.0041701049, -0.0074927062, -0.0415850133, -0.0643725023, -0.0077593029, -0.0034416690, 0.0671962798, 0.0101052895, -0.0000965595, -0.0485544056, -0.0396434255, 0.0208637640, -0.0181491002, 0.0542361885, 0.0202377811, 0.0434896350, 0.0403053015, -0.0538193136, -0.0211688019, -0.0047979951, -0.0705801845, -0.0351486057, 0.0211993083, 0.0381478667, 0.0470329821, 0.0224251971, 0.0114560425, -0.0385815352, -0.0083410293, -0.0669195130, -0.0085371658, -0.0636409074, -0.0328147821, -0.0362570398, 0.0279147997, 0.0542362630, -0.0341496356, 0.0135405287, -0.0594450086, 0.0375724882, 0.0012430921, 0.0170704275, -0.0505252406, 0.0653524250, 0.0656105429, -0.0170629099, -0.0512734242, 0.0654763281, 0.0212194398, -0.0601007976, -0.0706212893, 0.0709459484, 0.0507904589, -0.0075836405, -0.0714618564, 0.0610723943, -0.0031256080, 0.0373951867, -0.0429490134, 0.0534507036, 0.0474175289, -0.0250057727, 0.0146304294, -0.0264978744, 0.0060050413, -0.0295622796, -0.0681128800, 0.0547509193, -0.0037643090, 0.0592624992, -0.0153910890, 0.0531821400, 0.0450292677, 0.0380762517, -0.0666932687, 0.0093029886, 0.0274837688, 0.0165513828, -0.0482854322, -0.0066873953, -0.0336390883, 0.0595887005, -0.0021611229, 0.0020781010, -0.0142203830, 0.0195289999, -0.0006356537, 0.0409257859, 0.0063859597, 0.0153542683, -0.0240625702, 0.0265927687, -0.0099619254, 0.0593432039, -0.0086703598, -0.0552872270, 0.0236211568, 0.0673820674, 0.0107915998, -0.0362238996, -0.0458846465, 0.0610514283, 0.0297256559, -0.0095933303, 0.0191010609, 0.0287680179, 0.0566246808, 0.0443813577, -0.0424864367, 0.0659568906, -0.0673982278, -0.0446023941, 0.0405334309, 0.0174959451, 0.0406101868, -0.0201012641, -0.0592195205, 0.0147826672, 0.0629726946, 0.0288660750, 0.0529570878, 0.0447855517, 0.0664369017, 0.0664396137, 0.0428020209, 0.0600583553, 0.0711428672, 0.0163265616, 0.0520204604, 0.0567614585, 0.0021985248, -0.0395292640, 0.0171349049, 0.0531910062, -0.0546660051, 0.0444228947, -0.0224196017, -0.0449141562, 0.0142219812, -0.0547757000, 0.0685337931, -0.0120667145, -0.0512121357, 0.0109720230, 0.0425791442, -0.0296566039, -0.0370385349, 0.0272613764, -0.0062871948, 0.0463042930, -0.0160834044, -0.0224253498, -0.0408013649, -0.0212982260, -0.0214083306, -0.0249280334, -0.0232683420, -0.0551746450, 0.0492999926, 0.0436530262, 0.0588936210, 0.0335154086, -0.0367876515, 0.0605969876, 0.0108338967, 0.0274328664, 0.0000555217, 0.0094190836, -0.0690845400, 0.0295292586, -0.0687310696, 0.0704953969, 0.0020417124, 0.0662757456, 0.0467262790, 0.0677031577, -0.0170379952, 0.0239808708, 0.0333273113, -0.0065575093, 0.0223169848, -0.0352589488, 0.0346596316, 0.0602807552, 0.0505583286, 0.0475797355, 0.0546026677, 0.0421243832, 0.0200000554, -0.0166489258, 0.0492323339, 0.0257534608, 0.0707744658, -0.0612986870, 0.0421484187, 0.0645991266, -0.0163783059, -0.0374685749, 0.0324918404, -0.0048191473, -0.0396799408, 0.0297256559, 0.0077440739, 0.0197768584, -0.0264472701, -0.0355230346, -0.0265857466, -0.0616280884, 0.0540258139, -0.0681621730, -0.0009018183, -0.0473567396, -0.0607644469, 0.0097915456, 0.0540585369, 0.0406810716, 0.0222734362, -0.0456743836, -0.0572495461, -0.0045711845, -0.0162061900, -0.0676859021, 0.0709538758, 0.0533472747, -0.0441196673, -0.0254189149, 0.0245278478, 0.0328462198, -0.0284373276, 0.0136598349, -0.0645308197, 0.0045298859, -0.0606128052, 0.0608816892, -0.0253204256, -0.0448819622, 0.0314795822, 0.0118756741, 0.0556433946, 0.0517569408, 0.0097304285, -0.0269392543, 0.0657754838, -0.0697081834, -0.0121681951, -0.0592341796, 0.0330224782, -0.0533713624, 0.0665349215, -0.0444195196, -0.0177469701, 0.0278885812, -0.0483925939, 0.0106686428, 0.0536223948, 0.0653090328, 0.0490133837, 0.0634768456, -0.0350635536, 0.0249993205, 0.0106439665, 0.0304361731, -0.0506401621, -0.0493372455, 0.0134875104, -0.0106882565, 0.0584545732, 0.0185972899, 0.0314726159, -0.0352278054, -0.0329040512, -0.0410932004, 0.0625419468, 0.0195565820, -0.0496111512, -0.0005046278, -0.0311449543, -0.0293740407, -0.0030392110, -0.0223622508, 0.0285954550, -0.0447684824, 0.0634728670, 0.0451185852, -0.0670875683, 0.0513144284, -0.0282600299, -0.0589031465, -0.0713312253, 0.0234871060, 0.0048052594, -0.0480331704, 0.0669263899, -0.0031596795, -0.0140783638, 0.0557625592, -0.0447684824, -0.0668549389, -0.0556584187, -0.0578658581, -0.0623477958, 0.0415465534, 0.0336733162, -0.0323592611, -0.0550544932, -0.0720830634, 0.0535100549, 0.0085116997, 0.0045896322, 0.0528129861, -0.0603857003, -0.0349621922, -0.0144813024, 0.0395799503, 0.0096977577, -0.0306604914, -0.0331488438, -0.0395568982, 0.0565643162, -0.0153721794, -0.0384347998, 0.0276888683, 0.0521237329, -0.0293730088, 0.0511125773, -0.0304492861, -0.0244777948, 0.0296131596, 0.0681419522, -0.0272995196, -0.0345568247, -0.0173251033, 0.0208031982, -0.0387483872, 0.0003361106, 0.0176264048, 0.0352378339, 0.0597322732, -0.0233606026, -0.0302397795, 0.0215328708, -0.0103844963, 0.0405488238, 0.0032756478, 0.0433798805, -0.0217813142, -0.0208456665, 0.0208686516, -0.0150857791, -0.0422154516, 0.0704918653, 0.0486279801, 0.0211575627, -0.0222715065, -0.0520936549, 0.0529760122, 0.0063322932, -0.0441095307, 0.0420274213, 0.0150570646, 0.0163190663, -0.0608044341, -0.0422209278, 0.0277703702, -0.0178439617, -0.0708345175, -0.0636730269, -0.0674430132, 0.0050742999, 0.0408572853, -0.0404652022, 0.0565394014, 0.0151623785, 0.0084386244, 0.0569082052, 0.0546851754, -0.0000184625, 0.0559177697, 0.0046030656, -0.0204464272, 0.0320274532, -0.0061371177, -0.0103155673, -0.0717939436, -0.0010224357, -0.0346588269, -0.0650364980, 0.0194895938, -0.0456169471, -0.0064720437, 0.0364246294, -0.0541080721, 0.0300207585, -0.0342005342, 0.0555468649, -0.0396542661, 0.0507738218, 0.0641813278, 0.0456519648, 0.0556238741, 0.0040077120, -0.0155058205, 0.0714166462, -0.0167579986, 0.0082799643, 0.0628025830, -0.0695115998, -0.0047860220, 0.0648696870, 0.0663118511, -0.0697685778, -0.0157937519, -0.0596816838, -0.0449967086, 0.0057233423, -0.0609690808, 0.0456253290, 0.0172073618, -0.0479893461, 0.0263417438, -0.0503217056, -0.0055979937, 0.0189098790, 0.0090354308, 0.0358059034, -0.0540011860, 0.0385220870, -0.0185075253, 0.0099141970, -0.0545527190, 0.0181572363, -0.0210625529, 0.0399023816, -0.0612584949, 0.0001685172, 0.0280291587, 0.0337491035, -0.0567209646, 0.0417174995, 0.0121975690, -0.0352993682, -0.0187624730, 0.0523456410, -0.0494574979, 0.0448284671, -0.0631914586, -0.0505204722, 0.0349800140, 0.0540075302, -0.0483052582, 0.0313339829, 0.0337607190, 0.0074671209, 0.0008751154, 0.0037137419, -0.0521760732, 0.0112209022, -0.0687573776, 0.0689586401, -0.0282317251, -0.0568807423, -0.0541975982, 0.0106738210, -0.0097255111, -0.0340115577, -0.0414968133, 0.0542275608, 0.0177052915, 0.0349912345, 0.0051084384, 0.0516096354, -0.0243986621, -0.0217412747, -0.0085109621, -0.0206571184, -0.0579917058, -0.0405946821, -0.0020291507, 0.0259467885, 0.0720981210, 0.0667994469, 0.0209677294, -0.0012745485, -0.0455874056, -0.0170061812, -0.0625265837, -0.0655944124, 0.0316717476, 0.0693436265, -0.0435464382, -0.0062109008, -0.0120951533, 0.0356348380, 0.0299395323, -0.0502752997, -0.0510016680, -0.0222453512, 0.0148513094, 0.0242008939, 0.0413622409, -0.0179957040, 0.0064474568, -0.0617732033, 0.0080437735, 0.0194925219, 0.0438360199, 0.0527772978, -0.0708005652, -0.0613285750, 0.0504660010, -0.0515840501, 0.0619298816, -0.0480747931, 0.0316031426, -0.0699416026, 0.0168859959, -0.0186868496, 0.0107857287, -0.0356490873, -0.0292781331, -0.0524698868, -0.0602134280, -0.0645001903, -0.0477783456, 0.0657549500, 0.0157120526, -0.0517470986, -0.0641723275, -0.0617787614, 0.0661521554, -0.0112062730, 0.0595697165, 0.0524203703, -0.0678581372, -0.0259379633, 0.0719372928, -0.0643685982, 0.0290575475, 0.0086169913, 0.0694197863, -0.0118843094, 0.0385231376, -0.0225104168, 0.0501282737, 0.0432205796, -0.0207289718, 0.0560070276, -0.0038686320, 0.0342384726, -0.0246280916, -0.0220057033, 0.0180973932, 0.0432180390, -0.0248683281, -0.0553042777, 0.0261717141, -0.0382631160, 0.0534936637, 0.0544185638, 0.0375025421, -0.0416409522, -0.0710122585, 0.0337741449, 0.0388654545, 0.0340723470, 0.0112820193, -0.0314372592, -0.0329062715, 0.0543359220, 0.0260422528, 0.0395972803, -0.0145250410, 0.0573232025, 0.0640304238, 0.0634696335, 0.0413422287, -0.0596497133, -0.0613599941, 0.0232367516, 0.0313987881, -0.0544132106, -0.0035680532, -0.0536017753, -0.0394694693, -0.0637878105, 0.0529959351, 0.0553780347, -0.0345082507, 0.0244708806, -0.0715255737, 0.0336645544, 0.0234189332, -0.0189734213, 0.0294854492, -0.0123492591, 0.0451565385, 0.0157472119, 0.0568341017, -0.0265709832, 0.0409792960, 0.0041029155, -0.0277117155, 0.0012266114, 0.0253822133, 0.0536274016, 0.0256687850, 0.0401860476, 0.0216367096, 0.0143924505, 0.0695200115, 0.0661852509, -0.0078803524, -0.0064006895, 0.0014267042, 0.0518244728, -0.0533830300, 0.0065029636, -0.0698816404, 0.0502974764, 0.0529627800, -0.0371213332, 0.0372699648, -0.0521561280, -0.0319679528, 0.0280609876, 0.0204957426, 0.0525606498, -0.0171084553, -0.0605276190, -0.0100676082, 0.0517571121, 0.0020909682, -0.0691049099, 0.0154320225, 0.0690463781, 0.0281696469, -0.0257803686, 0.0427343622, 0.0240500271, 0.0276292264, -0.0252356492, 0.0569262058, 0.0455481783, -0.0313649066, -0.0661708638, 0.0370263234, 0.0067907348, 0.0514876619, -0.0517043099, 0.0086974651, -0.0624947026, 0.0317025110, 0.0658831894, 0.0141469613, -0.0244652666, 0.0206466913, -0.0020588264, 0.0687029213, 0.0549646467, 0.0053196102, 0.0642900318, -0.0064643323, -0.0629331544, 0.0700004399, 0.0077290535, 0.0584143847, -0.0553108007, -0.0157033317, 0.0348277390, 0.0083735734, 0.0697253048, 0.0433244035, 0.0451425686, -0.0368996449, -0.0453681126, 0.0073575005, 0.0014641434, 0.0220422298, -0.0480978861, -0.0678688064, -0.0146759562, 0.0557844937, -0.0676741153, 0.0148221627, 0.0262259096, -0.0666811019, -0.0022018328, -0.0127946101, 0.0712853074, 0.0611833036, 0.0450620279, 0.0396165177, -0.0085754842, 0.0456268415, -0.0113200434, 0.0675666332, 0.0683622509, -0.0223313347, -0.0672159120, 0.0154598802, 0.0365138650, -0.0419254899, 0.0346500352, 0.0302081555, 0.0126605928, 0.0602618307, -0.0114601552, -0.0243489705, 0.0559643507, 0.0069063827, -0.0711270571, -0.0649059862, -0.0688932762, -0.0288783945, -0.0581760220, 0.0680025816, 0.0221593753, -0.0202540942, -0.0213941708, -0.0023957118, -0.0613145344, 0.0523229986, -0.0446813181, 0.0198254287, 0.0109174326, 0.0264537558, 0.0708792955, 0.0232217610, -0.0526611879, -0.0240615718, 0.0485340506, -0.0511237979, 0.0405517891, -0.0016110539, -0.0354209132, -0.0374418199, -0.0035248324, 0.0282379389, 0.0040571988, 0.0022850931, -0.0191408731, 0.0228130966, -0.0659984052, -0.0461888909, -0.0493948311, -0.0255552419, -0.0656907335, 0.0525124371, -0.0013422891, -0.0626274124, -0.0611854009, -0.0517655276, -0.0679018945, -0.0090671405, -0.0164984390, 0.0373395085, -0.0038013905, -0.0216542631, -0.0114004835, 0.0549957305, 0.0217533857, 0.0701776743, -0.0122528672, 0.0633977950, -0.0310145654, -0.0517870709, -0.0103350095, -0.0081686601, -0.0349656828, 0.0656156093, -0.0153602362, 0.0242496058, 0.0456326380, 0.0224230960, -0.0047058240, 0.0509171188, 0.0442709625, -0.0662513375, 0.0677663684, 0.0394986346, -0.0042507127, -0.0342279598, -0.0232032835, 0.0004804879, 0.0665283799, 0.0573257506, 0.0053521618, 0.0450164974, -0.0627937689, 0.0188838765, 0.0143824816, -0.0225284509, 0.0478764400, 0.0520589128, -0.0528823584, 0.0464393944, -0.0660019666, -0.0460956842, -0.0216447450, 0.0214602053, 0.0056363121, 0.0125540495, -0.0502617583, 0.0578130037, 0.0575557649, -0.0667605251, 0.0508289486, -0.0103131607, 0.0529536307, 0.0364750773, 0.0665342510, -0.0037127733, -0.0398820452, -0.0539084263, -0.0392974056, -0.0261481367, -0.0519665666, 0.0003237873, -0.0123232603, 0.0171192959, 0.0144611001, -0.0380851999, 0.0640367419, -0.0222893134, -0.0139358602, -0.0484369881, 0.0674714893, -0.0067679361, -0.0410205573, 0.0207627639, -0.0218218528, -0.0186541937, 0.0168500170, 0.0704505295, 0.0482379422, -0.0188408121, 0.0492272601, -0.0389777981, 0.0709512383, 0.0209544972, -0.0219527595, -0.0115406625, -0.0478671789, 0.0485346541, 0.0339883938, -0.0694293380, -0.0599261001, 0.0037605911, -0.0472543910, 0.0508856475, -0.0258892179, -0.0708333105, 0.0350335985, 0.0598259866, -0.0338991135, -0.0062384978, -0.0324124470, 0.0023447275, 0.0399882570, -0.0082612261, 0.0330836326, -0.0614066422, -0.0636801720, -0.0286408775, -0.0439042598, 0.0271012336, -0.0721186623, 0.0540093184, -0.0516756773, -0.0550667793, -0.0607236326, -0.0412640423, 0.0576770753, -0.0636880994, 0.0443993732, 0.0632634610, -0.0396681018, -0.0063566715, -0.0543692112, -0.0106767304, 0.0599472970, 0.0675000548, 0.0393229574, -0.0598238781, 0.0148130953, -0.0459276810, -0.0028931648, -0.0319546014, 0.0071972013, -0.0378021225, -0.0317022540, -0.0413422137, 0.0635233968, 0.0474192500, -0.0666511953, 0.0360450894, -0.0170496106, -0.0458036736, -0.0322630443, -0.0716425776, -0.0591693819, -0.0626166239, 0.0262760147, -0.0258342065, -0.0440524593, 0.0580498427, 0.0153900534, -0.0206734985, 0.0296171531, 0.0605040938, 0.0622732043, 0.0702272207, 0.0447865203, 0.0608254671, -0.0114968047, -0.0517042875, 0.0593048781, 0.0334415585, 0.0470389873, 0.0258686170, 0.0324998870, 0.0128328279, -0.0617294163, 0.0566325337, -0.0052542239, -0.0393181406, -0.0153088234, -0.0229288749, -0.0057189018, -0.0053420439, 0.0468601286, 0.0291858390, -0.0339816175, 0.0699933767, -0.0447564945, -0.0025312677, 0.0705608875, -0.0609737970, 0.0161429048, 0.0113608763, -0.0652528703, -0.0005977824, 0.0276874900, -0.0572462901, 0.0280780569, -0.0503118485, 0.0711366385, 0.0033165812, -0.0695133358, -0.0635804236, -0.0284310803, -0.0391588286, -0.0382718556, 0.0553658009, 0.0081882030, 0.0711689442, 0.0371298343, 0.0375905856, -0.0520887487, -0.0359584764, -0.0248288214, -0.0624485016, 0.0038086325, 0.0573757291, 0.0512247831, 0.0220548436, -0.0313832313, -0.0204517432, 0.0026867911, 0.0658178031, 0.0151573047, -0.0536945164, -0.0483107790, -0.0414099693, 0.0444961116, -0.0589879230, -0.0296317749, 0.0518251136, 0.0161304325, 0.0161082819, 0.0256302282, 0.0491773263, -0.0457036868, -0.0658391565, -0.0181887411, -0.0184515342, -0.0318756923, 0.0549946129, 0.0066933483, 0.0430973172, -0.0224762633, 0.0366790295, 0.0245962292, -0.0439521112, 0.0415927693, 0.0167587027, 0.0072198659, -0.0459906198, -0.0047910288, -0.0032297894, -0.0611418337, -0.0193266682, -0.0456992984, 0.0545131266, -0.0696961433, 0.0114388838, 0.0321539715, 0.0416030809, 0.0637390912, -0.0220387727, -0.0720813200, 0.0066054091, 0.0349750817, -0.0658336729, 0.0411586910, -0.0156827718, 0.0144385099, -0.0558397919, 0.0467840582, 0.0142289028, 0.0583310574, 0.0046256781, 0.0696403682, 0.0504240170, 0.0716388971, -0.0361767188, 0.0447202548, 0.0188013390, 0.0296419263, 0.0244002268, -0.0001613423, -0.0696978942, -0.0367989205, 0.0272094235, 0.0103777349, -0.0545682386, -0.0240888782, 0.0499603525, 0.0489941314, -0.0241063423, 0.0671043396, 0.0525901765, 0.0414183512, -0.0423040502, -0.0613963827, 0.0362152606, 0.0569410622, 0.0396173447, 0.0230628997, 0.0293046162, -0.0295217074, -0.0270801894, 0.0446692184, -0.0464169607, -0.0264805146, -0.0560253449, -0.0373607613, -0.0247586034, 0.0553954989, -0.0678819492, 0.0124495924, 0.0088112652, -0.0532195717, 0.0236330330, 0.0712312758, -0.0411854796, -0.0363557003, 0.0450838283, 0.0218326077, 0.0431132689, -0.0509222262, -0.0582836829, 0.0415526330, -0.0499755815, -0.0430166498, 0.0319785699, -0.0144616850, 0.0463120714, 0.0134040639, -0.0068582222, -0.0664153844, 0.0474171117, -0.0267256871, -0.0190984271, -0.0246388130, 0.0427831113, -0.0402177759, 0.0417900756, 0.0369393229, 0.0510226563, 0.0541342944, -0.0279323347, -0.0331280604, 0.0625852495, -0.0717989281, 0.0033081844, 0.0426895618, 0.0597183257, 0.0062545910, -0.0526014827, -0.0421104580, -0.0183350667, -0.0588206574, -0.0512265563, 0.0614465475, 0.0171191245, 0.0436571091, 0.0110217556, 0.0683456212, 0.0620126277, 0.0103561953, 0.0691189617, -0.0201281942, 0.0613220930, 0.0095185861, -0.0211746171, -0.0420918092, -0.0173878372, 0.0405225530, 0.0676999539, 0.0105221272, -0.0045211166, 0.0705100596, -0.0457424372, -0.0320343710, 0.0363552347, -0.0303145759, -0.0515595824, 0.0354307890, 0.0585684627, 0.0642956942, 0.0435282141, 0.0195928365, -0.0299926959, -0.0037343875, 0.0531840324, 0.0552929938, -0.0059712008, 0.0680706352, 0.0686062872, 0.0558145195, 0.0476503149, 0.0714785755, -0.0152480341, -0.0409134813, 0.0411720052, -0.0539747402, -0.0620774813, 0.0397331566, 0.0542025566, 0.0439948887, -0.0296497233, -0.0200968795, -0.0384989269, -0.0275690407, 0.0331983492, 0.0408072695, -0.0119888894, -0.0302092545, -0.0581200495, -0.0311460570, 0.0486582816, 0.0248369798, -0.0422876030, 0.0211940780, -0.0618862510, -0.0541282557, -0.0122114010, -0.0393754020, -0.0435935631, -0.0100802518, 0.0429130197, -0.0451021343, -0.0191390179, 0.0519505814, 0.0350283831, 0.0231986865, -0.0104817301, 0.0549674183, -0.0404844917, 0.0072693005, -0.0382159501, 0.0078272298, -0.0445411876, 0.0413788259, 0.0555764884, 0.0612861067, 0.0391170979, -0.0294206031, -0.0210942291, 0.0557436645, -0.0125702582, -0.0358773470, -0.0523011796, 0.0439193472, -0.0306312256, -0.0719502941, -0.0129979551, 0.0500742793, -0.0502048917, -0.0092890859, 0.0697505921, -0.0066646338, -0.0309082642, 0.0535156280, -0.0089786872, 0.0557817370, 0.0411395580, -0.0373388901, -0.0659020320, -0.0423544645, -0.0016340390, -0.0471554250, -0.0623915493, -0.0475039035, -0.0052042231, -0.0703258440, 0.0003141537, -0.0497929901, -0.0552748218, 0.0441418812, 0.0163260177, -0.0301903822, -0.0119333118, -0.0720065460, 0.0563740283, 0.0209316984, 0.0520989522, -0.0633615777, 0.0031072646, 0.0225362629, 0.0628795624, -0.0548167676, -0.0453686081, -0.0577770248, 0.0376809016, -0.0265034512, -0.0627673194, 0.0544098169, -0.0655005351, 0.0389809161, 0.0511288196, 0.0215264037, 0.0611291975, 0.0277567953, 0.0431284606, -0.0704298392, 0.0339177102, 0.0023962781, -0.0329728052, -0.0365688354, -0.0270678028, 0.0604938418, -0.0171633437, 0.0602249503, -0.0402032025, 0.0024458840, 0.0114042014, 0.0507650599, 0.0576736182, 0.0701453090, -0.0190556496, -0.0191601813, -0.0414500460, 0.0562518388, -0.0477275178, 0.0234399065, -0.0417750217, -0.0429864228, -0.0166931450, 0.0180966705, 0.0425212607, 0.0454591289, 0.0181700587, 0.0355057269, -0.0272477120, 0.0208338127, -0.0327200443, 0.0319437757, -0.0286318958, -0.0587780550, -0.0352368578, -0.0599523038, 0.0420788154, 0.0557702482, -0.0508854240, 0.0298518315, 0.0038277283, -0.0619955100, 0.0200180933, 0.0493569076, -0.0521363914, 0.0037663877, 0.0322070569, 0.0225166604, -0.0339640677, -0.0496609956, 0.0209370852, -0.0420880243, -0.0317013748, -0.0666862428, 0.0373465270, 0.0257064328, 0.0337092951, 0.0184825063, 0.0591092855, -0.0318818018, 0.0359730124, -0.0189327300, -0.0534078255, 0.0095779151, 0.0111925974, -0.0468725488, 0.0478657186, 0.0468041375, -0.0479250997, 0.0620857477, -0.0598420277, -0.0397467688, -0.0194874816, -0.0030286014, 0.0456212834, -0.0198821090, -0.0530425161, 0.0083332583, -0.0677717105, 0.0064207688, 0.0257900357, 0.0157180279, 0.0053107142, 0.0153286606, -0.0544054657, -0.0389567725, -0.0300458819, -0.0074033886, -0.0172524899, -0.0669616535, -0.0690417960, 0.0699013323, -0.0595604293, -0.0346126594, 0.0685124546, -0.0242860466, 0.0265512839, -0.0533067212, -0.0155008473, -0.0503443852, 0.0260876194, -0.0683803484, -0.0178861506, -0.0416651592, 0.0436095521, -0.0374153890, 0.0133064836, 0.0715410709, -0.0206006803, 0.0183603615, -0.0117596313, 0.0629162639, 0.0562062562, 0.0481716320, 0.0362064913, -0.0045957342, -0.0593462437, -0.0290925279, 0.0127172545, 0.0417391658, -0.0150630996, -0.0316662230, 0.0327148139, 0.0653168410, -0.0077083185, -0.0563427657, -0.0074415728, 0.0555408895, 0.0636216104, -0.0682504773, -0.0173715241, -0.0020457730, -0.0295577869, 0.0159077421, -0.0719804764, -0.0472380966, -0.0165735297, 0.0357948616, -0.0142529570, -0.0437155925, 0.0038314611, -0.0350934751, 0.0501332805, 0.0092827529, -0.0199136138, -0.0711706206, -0.0196209997, -0.0554871634, -0.0583705381, 0.0045160577, -0.0277487077, -0.0153129026, -0.0503136367, 0.0014191121, 0.0704552233, -0.0057311505, -0.0091178492, -0.0048375055, 0.0369843394, 0.0008291081, 0.0334387869, 0.0706049949, 0.0049392655, 0.0556753129, 0.0639403760, -0.0296371616, -0.0329537094, -0.0554273203, 0.0364039317, -0.0280048959, -0.0345773548, 0.0552589893, -0.0517767631, -0.0558662899, 0.0043127090, 0.0004092529, 0.0582113266, 0.0562450886, 0.0713787824, 0.0162465349, 0.0050784647, -0.0642418191, -0.0270823240, -0.0043354556, 0.0265402347, 0.0495893508, -0.0449445397, 0.0380637124, 0.0464615375, -0.0562532097, 0.0142029896, -0.0688442141, -0.0074850991, -0.0400626622, 0.0312657133, 0.0269584730, -0.0633746535, -0.0117836520, 0.0167325139, -0.0543504767, -0.0103063285, -0.0234748870, 0.0648849159, -0.0686643273, -0.0378169194, -0.0425525792, -0.0185552910, -0.0654629245, -0.0425497219, 0.0420985743, 0.0095284805, 0.0356517360, 0.0001622736, 0.0303882882, -0.0360605791, -0.0591451190, -0.0616869144, -0.0426022708, -0.0541364104, 0.0492663682, 0.0257994309, 0.0006962940, -0.0143529922, -0.0525020137, 0.0515388176, -0.0325160809, -0.0608179048, 0.0032060817, -0.0243622363, -0.0638231933, -0.0078498274, 0.0663253218, 0.0638685226, -0.0476383865, -0.0061340556, -0.0631549656, 0.0576771796, -0.0143549554, 0.0065341219, 0.0168928131, 0.0593020171, -0.0165157132, -0.0507558733, -0.0373693965, 0.0584061444, -0.0227437541, 0.0045539066, -0.0551038049, -0.0049114749, -0.0011575446, -0.0038394853, -0.0581592992, -0.0318415724, 0.0661119372, 0.0685613453, 0.0275434703, 0.0384901538, -0.0690124407, -0.0463928506, 0.0264093503, 0.0060058013, -0.0408789665, 0.0392819867, 0.0637535006, 0.0396293327, 0.0480367169, -0.0653496385, -0.0455322266, -0.0630755052, -0.0107108168, -0.0644352734, 0.0283550471, 0.0136640668, 0.0206188187, -0.0388087444, 0.0319489241, 0.0702904463, 0.0324016437, -0.0368043222, 0.0019020811, -0.0635554045, -0.0325456075, -0.0174024962, -0.0393886343, 0.0625700355, -0.0118227787, 0.0227213129, 0.0393281356, 0.0492462888, -0.0572083183, 0.0311768055, 0.0453253016, 0.0246082321, 0.0443519205, -0.0409897231, -0.0456542000, 0.0261590257, 0.0259071961, 0.0552722365, 0.0294312686, -0.0136312023, -0.0181775913, 0.0293918177, -0.0632404238, 0.0650181621, -0.0516800471, 0.0697387755, -0.0550209060, -0.0376655199, 0.0401525646, -0.0203589499, 0.0372687727, 0.0635318756, 0.0318023264, -0.0533060133, 0.0307543576, -0.0095432252, 0.0527612418, -0.0213106163, -0.0261704549, 0.0262809545, -0.0057784691, -0.0484137759, -0.0162150674, 0.0529366136, 0.0181807205, 0.0610398054, 0.0189958438, 0.0087304488, 0.0028823987, -0.0544408634, 0.0271582380, -0.0565787181, -0.0305245966, -0.0431057140, -0.0301050730, -0.0674628168, -0.0006140769, -0.0143219344, -0.0140521415, 0.0439374670, -0.0010948926, 0.0355268344, -0.0312427580, 0.0129394904, 0.0093143806, -0.0441366844, -0.0186582357, -0.0423267260, -0.0488104895, -0.0353525877, -0.0202345103, 0.0578999519, -0.0412139744, -0.0717816576, 0.0469838232, -0.0564380400, 0.0189056769, 0.0150213763, 0.0307464749, -0.0367923304, 0.0075869784, -0.0678904653, -0.0276213661, 0.0661087334, 0.0330420658, -0.0241470374, 0.0119531676, 0.0313622728, 0.0375993252, 0.0356898010, 0.0258359313, -0.0025106147, 0.0131228715, 0.0461887866, 0.0335488096, 0.0386312082, -0.0596350022, 0.0139504150, 0.0202393606, -0.0507108644, 0.0104210228, -0.0446588099, -0.0576303042, 0.0584466904, 0.0124226809, 0.0450480357, -0.0455265120, 0.0135134235, -0.0507668853, 0.0663542449, -0.0324422121, 0.0605085641, 0.0237184092, -0.0601720810, 0.0259878933, 0.0227108002, 0.0300814658, 0.0466848090, 0.0171821192, -0.0674250200, -0.0145861730, -0.0659911931, 0.0560831130, -0.0717374682, 0.0603536963, 0.0091240406, 0.0450072065, -0.0705351084, -0.0164271891, 0.0233072117, 0.0628032833, 0.0523098186, 0.0597242564, -0.0465544201, 0.0403508991, 0.0366110280, 0.0492088124, 0.0671283901, 0.0019755363, -0.0587734096, -0.0534201935, 0.0322435349, -0.0188877843, -0.0491694957, 0.0092211217, 0.0199550465, -0.0264580064, 0.0629107058, -0.0271600112, -0.0052798986, 0.0169404745, -0.0194665045, 0.0402569547, 0.0623967946, 0.0558249652, 0.0240862146, -0.0074700266, -0.0000321046, -0.0543889329, -0.0178963542, 0.0506549776, 0.0289509222, 0.0158055574, -0.0234044269, 0.0010374784, -0.0619579330, 0.0258174166, -0.0177555382, -0.0450081676, -0.0111078173, -0.0398163162, 0.0696650445, 0.0483916998, 0.0037292391, -0.0106977224, -0.0154108927, 0.0398868099, -0.0611746982, -0.0170575939, 0.0690670907, -0.0028998107, 0.0193452537, -0.0150483549, 0.0145667791, -0.0582528487, 0.0004797280, 0.0360036045, 0.0648107529, 0.0716015249, -0.0531545132, -0.0485914648, 0.0424532667, 0.0187635869, -0.0550040752, -0.0456978530, 0.0219847411, 0.0276453644, 0.0393731669, -0.0362170525, 0.0510274768, 0.0619767457, 0.0593019873, -0.0101643428, -0.0662253872, 0.0025158823, -0.0121402368, -0.0660961717, -0.0008368865, 0.0039334297, 0.0618044734, 0.0635370761, 0.0658728480, 0.0477167815, 0.0131294504, 0.0071742535, -0.0605465285, 0.0702222884, 0.0094875619, 0.0099593997, 0.0087290555, -0.0265996493, -0.0263717361, -0.0627954379, 0.0337475389, -0.0695056319, 0.0548392981, -0.0182256848, 0.0169815272, -0.0112959184, 0.0106690228, -0.0584707335, -0.0065656304, 0.0391768068, -0.0626217201, 0.0560555905, 0.0023802295, -0.0641069934, 0.0034731105, 0.0238710940, -0.0700369626, -0.0104382858, -0.0462851226, -0.0183983669, -0.0467974618, -0.0229634270, 0.0063166171, 0.0085282177, 0.0239762589, 0.0112704858, 0.0358137861, -0.0673985928, 0.0053134859, 0.0653274804, -0.0549924299, 0.0403285474, -0.0621058904, -0.0282040425, 0.0340142027, 0.0093009919, 0.0352226421, 0.0439506173, -0.0517271757, 0.0419291258, 0.0721189976, -0.0380103178, -0.0097426996, 0.0228389576, 0.0276488960, -0.0518716052, 0.0179883540, -0.0037652180, 0.0285300687, 0.0154130757, -0.0485875756, -0.0552229434, -0.0145449303, -0.0353931747, 0.0104500204, 0.0438072830, 0.0246971920, -0.0165771060, -0.0216074772, 0.0712710917, 0.0358193815, -0.0018760636, -0.0718784928, -0.0276770443, 0.0423782617, 0.0139533579, 0.0289510414, 0.0211509913, 0.0704694837, -0.0224527419, -0.0319899432, 0.0410240293, 0.0549483597, -0.0105431750, 0.0290631056, 0.0511914715, -0.0450605825, 0.0307200253, -0.0400549024, -0.0684059858, -0.0487861410, 0.0337974057, 0.0441345647, -0.0395933241, -0.0287710950, -0.0168300755, 0.0403579548, -0.0132733099, 0.0368451551, 0.0558738559, 0.0604725033, 0.0568569601, 0.0524469540, -0.0354812406, 0.0178898647, -0.0098350458, -0.0541487485, -0.0075481459, 0.0615350306, 0.0452201664, 0.0103861839, 0.0486280099, -0.0588836670, -0.0263728015, 0.0709169656, -0.0600713044, -0.0282375775, 0.0127387419, 0.0130603611, 0.0208614916, 0.0225325450, 0.0522165224, -0.0374253690, 0.0181885734, 0.0039788708, 0.0588206649, 0.0034245476, 0.0063868389, -0.0584470034, 0.0410494134, 0.0033857003, -0.0662902072, 0.0324958637, -0.0506574027, 0.0700808764, 0.0135297179, 0.0507960021, -0.0052680224, 0.0043975040, 0.0452229753, -0.0171560496, -0.0365204699, -0.0186512843, 0.0563180894, -0.0679480731, 0.0385746881, 0.0674195737, 0.0676607639, 0.0141753554, -0.0038462952, -0.0614141934, 0.0053600818, 0.0647895187, -0.0430931151, -0.0240385309, 0.0340397060, -0.0004138127, -0.0308510177, 0.0434536263, 0.0219654590, 0.0226811394, 0.0095787570, -0.0085367560, -0.0230128430, 0.0628249943, 0.0661306828, -0.0239684694, 0.0539389998, -0.0114589147, -0.0383541882, 0.0493879840, -0.0711653382, -0.0073110759, 0.0111803263, -0.0150188096, 0.0308675691, -0.0201775916, -0.0137167536, -0.0332731269, 0.0100355148, 0.0006021708, -0.0410453528, 0.0605858564, -0.0105291344, 0.0093936995, -0.0256810188, -0.0061170533, -0.0100703947, -0.0585322306, 0.0486815050, 0.0463198274, 0.0064936504, 0.0336221606, 0.0071205348, 0.0244121328, 0.0437501743, -0.0390898623, -0.0690719262, 0.0147781596, -0.0641772151, -0.0059802979, -0.0485385209, 0.0393925607, -0.0211394988, -0.0549089089, 0.0690527707, -0.0181866102, -0.0076846778, 0.0601055920, 0.0687005818, -0.0402592272, 0.0380520448, 0.0548409373, -0.0273834690, -0.0262117162, -0.0567238890, -0.0091175362, -0.0281890035, 0.0061666146, -0.0330345593, -0.0380995832, -0.0493862815, -0.0497768484, 0.0533154756, -0.0634410158, 0.0719185174, 0.0557128638, 0.0538836867, 0.0161789656, -0.0630969927, -0.0166391172, -0.0453233384, -0.0660398006, -0.0035818666, -0.0513313562, 0.0694509894, 0.0136055797, -0.0259783268, 0.0109598935, -0.0437984765, -0.0338784307, 0.0427520871, 0.0663067698, 0.0300940573, -0.0198842064, 0.0576154888, 0.0549830794, -0.0452731848, -0.0493948683, -0.0017113313, 0.0138556287, 0.0220339224, -0.0102290362, 0.0374933556, -0.0339024663, 0.0537782758, 0.0127260461, -0.0372866169, 0.0116304308, 0.0698675662, 0.0073834136, 0.0073137581, -0.0297452845, 0.0054932535, 0.0514960736, -0.0076829419, -0.0639417097, 0.0302311629, 0.0021677837, 0.0597838163, 0.0513631701, -0.0206818096, 0.0621739775, -0.0042177960, -0.0211193673, 0.0386843085, -0.0052253529, -0.0164052323, 0.0177912787, -0.0360417552, 0.0022199303, 0.0251054168, 0.0433518514, 0.0098989010, 0.0427690670, -0.0672869906, -0.0608703867, -0.0569113009, 0.0318762958, -0.0350331329, 0.0457693934, 0.0407477170, 0.0393935069, -0.0696199536, 0.0267810598, -0.0494816378, 0.0483003333, 0.0524145663, -0.0246812776, -0.0048649460, -0.0226866975, -0.0633846000, -0.0029055551, -0.0082210153, -0.0577834584, -0.0106115006, -0.0342100486, 0.0616426915, 0.0336124748, 0.0529142320, -0.0386017375, -0.0195201375, -0.0336975902, -0.0196854919, -0.0080995783, -0.0477616042, -0.0204813704, 0.0704133362, -0.0347011201, -0.0233321749, 0.0498614013, -0.0157129169, 0.0576087087, -0.0558968633, 0.0206473619, -0.0639088079, -0.0123328790, 0.0392147675, -0.0632754788, 0.0176839605, 0.0073463842, 0.0649445951, 0.0013618693, 0.0519834831, -0.0504888147, 0.0553889275, -0.0064880773, -0.0322634913, 0.0043820888, -0.0705579072, -0.0714675039, -0.0450177714, 0.0138587579, 0.0425455943, -0.0017062202, 0.0081849396, -0.0341055728, -0.0715495944, 0.0284383744, -0.0178165175, -0.0697036386, 0.0026658550, -0.0512186214, 0.0234008282, -0.0292886645, -0.0438981503, 0.0593046844, -0.0212220885, -0.0652775764, 0.0440843105, -0.0389875546, 0.0694451779, 0.0475197360, 0.0087154284, -0.0252299719, -0.0043999776, -0.0309768654, -0.0211759061, 0.0219178945, 0.0715115517, -0.0718820244, 0.0020441860, 0.0638907105, -0.0211374871, -0.0190496631, 0.0205180869, -0.0337621681, -0.0607030205, -0.0431994349, 0.0057601109, 0.0509172529, 0.0123625398, 0.0143659860, -0.0588413402, 0.0390322208, -0.0211949386, -0.0316236205, 0.0048546568, -0.0088062212, -0.0593340099, 0.0332340822, -0.0661190525, -0.0055983514, -0.0455524586, 0.0345824435, -0.0193535462, -0.0184403323, 0.0184686035, -0.0631999224, 0.0585480183, 0.0687220544, 0.0087246001, 0.0346606523, 0.0531287193, -0.0720475614, 0.0127976760, 0.0156813413, 0.0520943552, -0.0667824149, 0.0293778405, 0.0139577463, 0.0299219936, 0.0660921335, 0.0398147032, 0.0489502177, -0.0026821792, 0.0605915636, 0.0221496001, 0.0538303256, -0.0665789619, 0.0304514691, -0.0159462169, -0.0508365706, -0.0326241553, 0.0266920328, -0.0096860565, -0.0156929232, -0.0269151628, -0.0635225922, 0.0117425099, -0.0693297163, -0.0399828069, 0.0355200768, 0.0135326982, 0.0038128793, 0.0529446304, -0.0675693825, 0.0051750615, 0.0591231436, -0.0096627921, -0.0436577126, -0.0434358343, 0.0104686692, 0.0265018120, -0.0193762593, 0.0264512971, -0.0442205817, 0.0144641772, 0.0188872516, 0.0553943664, 0.0597384572, -0.0468981713, 0.0571329296, 0.0300965905, -0.0640135780, 0.0398295671, -0.0062062368, -0.0331811234, -0.0276842527, -0.0571159013, 0.0386969075, 0.0623886734, 0.0660344958, 0.0456776321, 0.0708648115, -0.0582963638, -0.0486139357, 0.0508195758, 0.0104885921, 0.0528336316, 0.0368777066, 0.0083690435, -0.0522185564, -0.0638578981, 0.0176625848, 0.0552668720, 0.0064616501, 0.0435535759, -0.0227285437, -0.0140377879, -0.0260491334, 0.0057473406, -0.0105458423, -0.0217250139, -0.0223409683, -0.0157119706, -0.0183779970, 0.0502563715, 0.0171418190, 0.0592266321, 0.0202257037, 0.0492998883, 0.0461824015, -0.0127208307, -0.0615937598, 0.0567664951, 0.0068069473, -0.0505759791, 0.0181833580, -0.0264403895, -0.0276537836, -0.0353923328, -0.0555547327, -0.0505565032, 0.0300217941, -0.0009083599, 0.0307051986, -0.0082875863, 0.0719268620, -0.0042251647, 0.0692144930, 0.0670632720, -0.0159940347, -0.0312538370, 0.0469786078, -0.0682468116, -0.0539641231, -0.0194368400, 0.0568718016, 0.0167858005, 0.0212748423, -0.0600022040, -0.0224356540, -0.0291208141, -0.0021321252, 0.0430513397, 0.0354256630, -0.0201508217, 0.0657785386, -0.0182411373, -0.0713705793, 0.0136176646, 0.0335183367, 0.0571036488, -0.0396017544, 0.0125790164, 0.0187621936, 0.0024438426, -0.0695997849, 0.0596577674, 0.0217925012, 0.0042728409, 0.0439648107, 0.0616941452, -0.0293821096, 0.0649849623, 0.0146014541, -0.0161721185, 0.0508783311, 0.0252219513, -0.0619089119, 0.0389653444, -0.0153032504, -0.0297299735, -0.0677467585, -0.0163734183, 0.0303423107, -0.0184914730, 0.0642162710, -0.0224662125, 0.0396076888, -0.0562548116, -0.0135302022, 0.0142936483, 0.0611984432, -0.0302793905, -0.0306819491, 0.0580378026, 0.0676638931, 0.0447972044, 0.0099650547, -0.0313452035, -0.0530132502, -0.0228436701, -0.0074554011, 0.0581968427, 0.0539912581, 0.0239021704, 0.0620196313, 0.0069731250, -0.0677712113, 0.0547244251, 0.0007420406, 0.0536371320, -0.0450005978, -0.0177957825, 0.0023422018, 0.0033853576, 0.0130541697, -0.0664997622, 0.0446266681, 0.0208350345, -0.0340630710, 0.0077666491, -0.0696784034, 0.0623730123, -0.0586936250, 0.0020905063, -0.0054671541, 0.0353631377, -0.0580054745, 0.0565872341, 0.0147560388, 0.0472271740, 0.0111663342, 0.0634157211, -0.0346093401, 0.0257634893, 0.0005356520, 0.0671550035, -0.0298736095, 0.0685533881, -0.0409264565, -0.0427940190, -0.0454060510, -0.0587570816, 0.0095819905, 0.0085566267, -0.0476326756, -0.0298885815, -0.0422127359, 0.0157748908, 0.0167330652, 0.0398930088, 0.0227613896, 0.0468074232, 0.0312986448, -0.0140930749, -0.0277849995, 0.0043407083, -0.0585415550, 0.0316147730, -0.0402825251, -0.0207314491, -0.0015127137, 0.0042195544, 0.0499594808, 0.0542435199, -0.0503604040, -0.0321439244, 0.0291274562, -0.0189549439, 0.0621856004, 0.0668774694, 0.0584316701, 0.0138864443, -0.0119605139, -0.0211412199, 0.0097823218, -0.0374386534, 0.0534221083, -0.0533801056, -0.0207087696, 0.0313549414, 0.0688365996, -0.0044476390, -0.0627431944, -0.0007710531, 0.0251896083, 0.0243417770, 0.0467174500, -0.0518589914, -0.0278526172, 0.0060183108, 0.0098736212, 0.0138419643, -0.0028613508, 0.0523416474, -0.0412842110, -0.0211074762, -0.0171003193, -0.0620158166, -0.0605177917, 0.0172836185, 0.0265494585, 0.0482842326, 0.0503910109, 0.0468711555, -0.0424933545, 0.0687702447, -0.0055278391, -0.0349958800, 0.0428798795, -0.0262652114, 0.0241359696, 0.0659414381, 0.0376401767, -0.0535279959, 0.0335076824, 0.0539283454, 0.0544606447, 0.0098209158, 0.0114350691, 0.0579446703, 0.0597195476, 0.0180776045, -0.0187197141, -0.0544325337, 0.0231879503, -0.0147197135, -0.0339534320, 0.0481959060, -0.0394031592, -0.0392372869, -0.0088713691, -0.0698477253, -0.0048228130, 0.0485620648, 0.0216687322, 0.0538841933, 0.0675730556, -0.0083942339, -0.0625043362, 0.0575172603, 0.0487111360, 0.0327890962, 0.0430649817, -0.0639756396, 0.0185169056, 0.0006776899, -0.0658066571, -0.0534239113, 0.0473835468, 0.0363731459, -0.0178743973, 0.0628930628, -0.0278881490, -0.0195139758, -0.0055430010, 0.0336908102, -0.0616610870, -0.0091369003, 0.0157013014, -0.0334937125, -0.0517700687, -0.0388713069, -0.0136333890, -0.0330307409, 0.0328094810, 0.0198446661, -0.0207500830, 0.0345874876, -0.0708666742, 0.0218182579, -0.0598000102, -0.0571122020, -0.0704783574, -0.0678088218, -0.0692853034, 0.0713351816, 0.0130408034, -0.0251344740, -0.0708322227, -0.0360500291, 0.0645437688, -0.0577366054, -0.0460224524, -0.0095186904, 0.0222427398, 0.0223036334, -0.0222457312, 0.0720957816, -0.0383895971, -0.0522228405, 0.0085510686, -0.0296812952, -0.0258702710, -0.0532081276, -0.0223183595, -0.0428657681, -0.0178881139, 0.0602901727, -0.0363468230, -0.0065715462, -0.0310045704, -0.0493264720, 0.0129383728, 0.0414966717, 0.0145212561, 0.0270740166, 0.0149957538, -0.0330126584, 0.0190481469, 0.0025613606, 0.0298577994, 0.0515401214, -0.0087968633, -0.0592708960, -0.0017417669, 0.0338000059, 0.0468015745, 0.0457287356, -0.0154204443, -0.0145843327, 0.0308232680, 0.0580594987, -0.0107486360, 0.0034742802, 0.0139663815, -0.0656232685, 0.0255244747, -0.0120320246, -0.0553058237, 0.0674113631, -0.0290329419, -0.0401057787, 0.0045800135, 0.0478915647, -0.0129203722, 0.0493542627, -0.0270527974, -0.0457217544, -0.0625127703, 0.0027106926, -0.0422527939, -0.0189262256, 0.0542819947, -0.0590948425, 0.0513294637, 0.0224182233, 0.0102912933, -0.0208566412, 0.0685628355, -0.0390388481, 0.0158181712, -0.0130643211, 0.0197330117, 0.0200643763, 0.0415918604, 0.0147042647, 0.0308135077, -0.0587021075, -0.0303966850, -0.0567417666, 0.0409392715, 0.0186158568, -0.0672261268, 0.0366232470, -0.0693853572, 0.0645705163, 0.0174274296, 0.0079671890, -0.0329994261, 0.0632030517, -0.0483561531, -0.0300324447, 0.0018459484, -0.0585624091, -0.0129143521, -0.0577822886, 0.0064332038, -0.0508500263, 0.0032469332, -0.0283489190, 0.0122425482, 0.0594981313, 0.0702224374, -0.0365310498, -0.0673481375, 0.0472310930, 0.0215285867, 0.0054374710, 0.0239063874, 0.0178114250, -0.0457691215, -0.0202959888, -0.0529305562, -0.0265599377, 0.0393242687, 0.0476259291, 0.0429776758, -0.0327507742, -0.0134257413, -0.0058517680, 0.0354602262, -0.0668677688, 0.0439369380, -0.0672624558, 0.0162985325, 0.0062748194, 0.0579895228, 0.0662042052, -0.0082248226, 0.0682307780, 0.0535261184, -0.0227004625, -0.0296571888, -0.0131583028, 0.0089937076, -0.0563783161, 0.0510147810, -0.0153137632, -0.0684002563, 0.0508722737, 0.0064490214, 0.0554618686, -0.0305282958, -0.0233403333, -0.0490323119, -0.0709589347, 0.0138937905, 0.0529248863, 0.0242173448, 0.0374680236, 0.0085717365, 0.0043976754, -0.0670459121, -0.0219537057, -0.0453359708, -0.0004914999, 0.0169865191, 0.0475954413, -0.0357229188, 0.0518400818, -0.0565735735, 0.0135741457, 0.0702900290, -0.0346078426, -0.0533986017, -0.0152353011, -0.0526143350, 0.0106555521, -0.0280915461, -0.0489182845, 0.0511358753, 0.0337976813, 0.0238248631, 0.0199285969, -0.0405587740, -0.0498823598, 0.0005713180, 0.0687585920, 0.0169361904, -0.0479076356, -0.0099196322, -0.0072530210, 0.0532850772, 0.0601125360, -0.0717175305, 0.0497818738, 0.0177102685, -0.0263225920, -0.0305197090, -0.0580827631, 0.0428377539, -0.0362073816, -0.0452968925, 0.0565291941, 0.0121438503, -0.0657673180, 0.0227689445, -0.0234180689, 0.0108262002, 0.0431768075, 0.0609167069, 0.0396421552, -0.0197994821, -0.0137830488, 0.0297337398, 0.0715133101, -0.0640506223, 0.0631970316, -0.0025314540, 0.0334156975, -0.0126928538, 0.0321795940, -0.0659916773, -0.0267029069, 0.0073567107, -0.0445475876, -0.0646013319, 0.0105320588, 0.0467824414, -0.0708103031, 0.0134883523, -0.0115203410, -0.0169233009, -0.0685605332, -0.0143975057, -0.0508671142, -0.0307555571, -0.0512082279, 0.0372658521, 0.0629237145, 0.0013835281, 0.0309581086, 0.0315931961, -0.0541752800, 0.0380695760, 0.0023329780, -0.0608167350, -0.0335124508, 0.0273252055, -0.0053319111, 0.0337780118, -0.0233702697, 0.0366275087, 0.0683480203, -0.0443335101, 0.0063943043, 0.0562478602, 0.0335799679, -0.0197512880, -0.0253707021, 0.0228002220, 0.0223795250, 0.0194486976, 0.0137530938, 0.0457160026, -0.0575632341, -0.0264659040, 0.0677887201, -0.0513472036, -0.0100939162, 0.0246815011, 0.0339853540, -0.0636451915, 0.0526568145, 0.0221081823, -0.0439665131, 0.0324744955, 0.0653994679, 0.0577743053, -0.0185748003, -0.0435911715, -0.0333539806, -0.0481513105, -0.0483993404, -0.0639475584, -0.0283830911, -0.0224203244, 0.0043920502, -0.0652337894, -0.0372403152, 0.0358210653, -0.0254867598, 0.0697525740, -0.0118248239, -0.0507308729, -0.0630472004, 0.0237381235, 0.0607104152, 0.0032690391, -0.0692084059, 0.0650533289, -0.0443343148, -0.0438729264, 0.0073184595, -0.0338173807, -0.0168739520, -0.0013441592, -0.0532766432, -0.0247905366, 0.0323689654, 0.0085983723, 0.0309540033, -0.0319540352, 0.0677316487, 0.0335805193, 0.0079593956, 0.0676970333, -0.0303200297, -0.0673298687, -0.0612993240, 0.0376702547, -0.0322192200, 0.0008293465, 0.0061167106, 0.0604292601, 0.0515119061, 0.0369137526, -0.0566709116, -0.0273617543, 0.0470508263, 0.0670838058, -0.0434775762, -0.0684083104, -0.0236668065, -0.0542205349, -0.0057001784, 0.0075302497, 0.0248157084, 0.0373984277, -0.0093896091, -0.0151769891, -0.0465067774, 0.0225147009, 0.0182696134, -0.0495340303, 0.0632944554, 0.0559209883, -0.0621963441, -0.0029760003, -0.0499177165, 0.0000926256, -0.0075672641, 0.0015667304, -0.0116639100, 0.0212140381, 0.0305076987, -0.0065131485, 0.0605578274, -0.0676215664, -0.0260935426, -0.0687644482, 0.0649266839, 0.0424415618, 0.0131940767, -0.0557614155, -0.0041796342, 0.0045620129, -0.0251303650, 0.0219709426, -0.0250689350, -0.0699632168, 0.0541137159, 0.0514076203, -0.0417435020, 0.0345678404, 0.0435655490, -0.0274923854, -0.0561591424, -0.0415991023, -0.0300763361, -0.0384218767, -0.0015500560, 0.0580933243, 0.0692034662, 0.0577356070, 0.0642605722, 0.0487662628, -0.0382972360, -0.0428216681, 0.0189600885, 0.0518195555, -0.0173129365, 0.0349337161, 0.0266464874, 0.0460722148, -0.0373832136, -0.0569596849, 0.0222750679, 0.0009233654, -0.0481792875, -0.0170269683, -0.0553183854, -0.0324793607, 0.0700822920, -0.0058913752, -0.0578294843, -0.0393272415, -0.0402592942, -0.0115590915, 0.0314119682, -0.0218457356, -0.0023300052, -0.0715511963, -0.0457536355, -0.0517717749, 0.0056171119, -0.0288956687, -0.0006332323, -0.0002922863, -0.0102031939, -0.0425060019, -0.0490846708, -0.0384609029, -0.0566733181, -0.0443755239, 0.0703026652, 0.0194384605, 0.0123253390, -0.0592054799, 0.0042951405, -0.0101113282, 0.0330451801, 0.0406246930, -0.0219724588, 0.0462077111, 0.0520283356, 0.0489893779, 0.0342563167, 0.0271689072, 0.0532890707, 0.0227794871, -0.0079508424, -0.0101868473, -0.0065126345, 0.0652898103, -0.0457856394, 0.0015371814, -0.0018493906, 0.0154354125, -0.0047198460, 0.0355215520, -0.0660898685, 0.0653774589, 0.0228647143, 0.0525372177, -0.0091532245, 0.0386002734, 0.0348879099, -0.0257453360, -0.0534925684, 0.0479829088, -0.0439193696, -0.0556778461, -0.0475233793, 0.0120542347, 0.0229366049, 0.0489879325, -0.0380386412, 0.0398631319, 0.0479132086, -0.0609348230, 0.0470971987, 0.0084355474, -0.0232840143, -0.0717706084, 0.0208702907, 0.0095922276, -0.0342669003, 0.0268605351, 0.0075077638, 0.0579950958, 0.0045209900, -0.0496734902, -0.0416313335, -0.0360661522, 0.0518165752, 0.0296515971, 0.0622474849, -0.0269203410, -0.0692306235, -0.0310176127, 0.0155836418, -0.0096284151, 0.0086369291, 0.0221427009, 0.0411597416, -0.0035807490, -0.0006353781, -0.0222712494, 0.0203688070, -0.0712359399, 0.0071809813, 0.0387613103, -0.0540838465, -0.0629843771, 0.0178602189, 0.0703433305, -0.0014973357, -0.0289314054, -0.0081058890, -0.0320530385, 0.0396466777, -0.0649047494, -0.0160539299, -0.0653119236, 0.0002948642, 0.0592955649, -0.0018989965, -0.0138334110, -0.0087370574, -0.0303157642, -0.0018027797, 0.0181498528, 0.0163421035, -0.0474642068, -0.0136904269, 0.0179987177, -0.0458684862, -0.0253607742, -0.0239875317, -0.0052618980, -0.0593544878, 0.0033795387, 0.0256724507, 0.0033606663, -0.0634940118, -0.0108441152, 0.0677196831, -0.0357498974, -0.0437082425, -0.0517105684, 0.0208455473, -0.0688968003, -0.0692232400, 0.0091985464, -0.0187352523, -0.0300122425, 0.0328483358, -0.0713026673, 0.0183327943, 0.0012092143, 0.0349586308, 0.0608955175, -0.0055979714, 0.0099269077, -0.0244002454, 0.0421062633, -0.0388637185, 0.0077730492, 0.0279200524, -0.0366788022, 0.0516558886, 0.0104802698, 0.0501784831, -0.0639298335, -0.0606354177, -0.0198776685, 0.0271247029, 0.0060014278, 0.0172808170, -0.0309612788, 0.0510776192, -0.0195916630, 0.0482955724, -0.0030136108, -0.0262755528, 0.0702196807, -0.0629460812, -0.0177799873, -0.0380509757, -0.0417337418, -0.0414507166, 0.0397561640, -0.0497017764, 0.0334348306, -0.0144621842, 0.0074701682, 0.0333474725, 0.0263304412, -0.0033311918, -0.0226584077, 0.0140228719, -0.0208351165, -0.0384242013, 0.0094427764, -0.0279359147, 0.0477341413, -0.0371940322, -0.0173758604, 0.0669437945, 0.0314419195, -0.0680448785, -0.0177022144, -0.0372861028, 0.0328000188, 0.0545265526, 0.0626667589, 0.0033809692, 0.0139433965, 0.0475308672, -0.0555112511, 0.0309916437, 0.0035138503, 0.0650738925, -0.0083418041, -0.0562493354, -0.0672139302, -0.0567575991, 0.0445811599, -0.0494273156, 0.0433069244, 0.0415864214, 0.0161512643, -0.0207360275, -0.0589332730, -0.0148108713, -0.0214216672, -0.0013364851, -0.0177049339, -0.0515900403, 0.0271592736, -0.0421687216, 0.0676200837, -0.0531200133, -0.0156689696, 0.0672792494, 0.0312555730, -0.0560624227, -0.0501234531, -0.0005315393, -0.0291610956, -0.0447902828, 0.0032419190, -0.0163483843, -0.0480574146, -0.0497976691, -0.0597910471, -0.0452350378, 0.0637048930, 0.0507698804, 0.0368363261, 0.0019648150, 0.0710070133, -0.0697896034, -0.0382854305, -0.0165155083, -0.0042757541, 0.0560943037, -0.0409513339, -0.0272300914, 0.0002964512, 0.0458168015, -0.0514756665, -0.0218753815, 0.0307934806, -0.0298868939, 0.0221830681, -0.0055405200, 0.0307612345, 0.0294022560, -0.0282247402, 0.0192612484, -0.0631292537, 0.0396191478, 0.0360642746, -0.0506240912, -0.0630675182, -0.0453805178, 0.0194696859, 0.0139140561, -0.0132458992, -0.0653673410, 0.0415915176, 0.0181748420, -0.0533331148, 0.0192205757, -0.0048566014, -0.0351513736, 0.0494375750, 0.0340478644, -0.0292481072, -0.0222365074, -0.0277177021, 0.0269450694, -0.0568978786, -0.0188282691, -0.0589156039, 0.0308327824, -0.0112687163, 0.0161331296, 0.0515877530, 0.0242659524, -0.0517194644, -0.0651853532, -0.0536097959, 0.0450111479, 0.0310252160, 0.0438860357, -0.0410751365, -0.0142493062, 0.0559791178, 0.0694718510, -0.0265981182, 0.0484218448, 0.0225694701, 0.0575109422, 0.0483343005, -0.0647658557, -0.0006430894, 0.0111875385, -0.0297353230, 0.0424644798, 0.0280380324, 0.0705472529, -0.0005983338, -0.0252694264, -0.0504115224, 0.0676567703, 0.0043041036, -0.0338504016, -0.0322432220, 0.0402238294, 0.0202511325, -0.0586009696, 0.0527784154, 0.0607413352, -0.0347799771, -0.0369146317, -0.0433309600, 0.0661114156, 0.0147498772, -0.0627502650, -0.0134813190, -0.0674211085, 0.0561949313, -0.0393488035, -0.0589780286, 0.0130889788, -0.0139576085, 0.0617040545, -0.0444869548, -0.0262342393, -0.0038251653, 0.0650987625, 0.0712896585, -0.0321872495, -0.0495091528, 0.0289776921, -0.0416009799, 0.0090642720, 0.0228057802, -0.0210355707, 0.0459306389, -0.0351489149, 0.0707187504, -0.0540807173, 0.0627022088, 0.0313969627, -0.0581394434, -0.0660469234, 0.0017524213, 0.0534412265, 0.0055221990, -0.0083340779, -0.0349064954, 0.0465810075, 0.0263756439, 0.0296596363, -0.0433371887, 0.0303542167, 0.0711860955, 0.0676436275, -0.0546935871, 0.0035972521, -0.0434798300, 0.0307810754, 0.0400906727, -0.0653884187, -0.0110863447, -0.0138203017, 0.0322538540, -0.0340694040, -0.0173026472, 0.0367297307, -0.0196019188, -0.0258240215, 0.0093637481, -0.0653039366, 0.0524500459, -0.0382851213, -0.0163912103, 0.0098639354, -0.0462779328, -0.0467735790, 0.0231086165, -0.0682869405, -0.0195406638, 0.0238096192, -0.0173588432, 0.0318477005, -0.0197958350, -0.0461793020, -0.0349883810, 0.0459840298, -0.0223168619, 0.0500167906, 0.0372217298, -0.0399360396, -0.0666818917, -0.0514976755, 0.0374429375, -0.0298921242, -0.0075380653, 0.0562213957, 0.0401515141, 0.0143656060, -0.0309256092, -0.0265466906, 0.0331503749, 0.0467053577, -0.0035946742, 0.0564332604, 0.0317160189, 0.0586035103, 0.0565677434, 0.0659315586, -0.0669854134, 0.0411635935, -0.0508193821, 0.0670696199, -0.0252971090, -0.0295275375, 0.0505835488, 0.0707807839, -0.0709308162, -0.0537311323, -0.0008358359, 0.0145493522, 0.0039002895, -0.0196367949, -0.0089945793, -0.0453713275, -0.0248248801, -0.0494435616, -0.0571023971, 0.0139631107, -0.0261238255, 0.0604031682, -0.0712649152, -0.0132490136, -0.0383609682, 0.0649849176, -0.0079264939, 0.0186092332, 0.0447461680, -0.0334474258, -0.0338587649, -0.0497749895, -0.0205795355, 0.0515668094, 0.0284435526, 0.0241699740, 0.0297068655, 0.0439824834, 0.0086420104, 0.0666650683, 0.0086708590, 0.0145915225, -0.0649760664, -0.0103144310, 0.0008595809, -0.0394291207, 0.0421746597, -0.0491873398, 0.0167072937, 0.0399995819, 0.0003778040, -0.0013790727, -0.0261048824, 0.0521520004, 0.0188743323, -0.0609898493, -0.0035414994, -0.0635146797, -0.0449716076, 0.0420389995, 0.0526022017, -0.0473026745, -0.0531871170, -0.0273177586, 0.0175098330, 0.0159361884, 0.0346946493, -0.0519642979, 0.0238225609, -0.0103168599, 0.0244253352, -0.0556861237, -0.0411649533, -0.0191647038, 0.0409032255, -0.0330366939, 0.0421061069, -0.0571624450, 0.0116060972, -0.0584326535, -0.0101371035, -0.0583886057, 0.0315064788, -0.0451190472, -0.0355625376, -0.0530936345, -0.0168195777, -0.0206676647, -0.0488596447, -0.0489630923, -0.0674078837, -0.0308115147, 0.0603520572, 0.0553460568, -0.0158578455, 0.0257509425, -0.0601423308, -0.0022432804, -0.0617342517, -0.0222568475, -0.0227177888, 0.0411265120, 0.0142736062, -0.0006558076, 0.0430605933, 0.0608092993, -0.0461487100, 0.0179536715, -0.0521461517, 0.0341744497, 0.0687942952, 0.0350004584, 0.0336514413, -0.0635348782, -0.0613132603, 0.0218548179, 0.0271305889, -0.0454127416, -0.0475002043, 0.0229499042, 0.0559365898, 0.0370321348, -0.0578726046, -0.0404347815, -0.0296767540, 0.0319790691, -0.0297205262, 0.0131585747, 0.0363585576, -0.0110942237, 0.0676166266, -0.0672854409, -0.0165209956, -0.0095406249, -0.0536382012, 0.0533798933, -0.0643533170, -0.0444109365, -0.0055782571, -0.0364635698, -0.0647882074, -0.0604125261, 0.0457147509, -0.0325582027, 0.0652008653, -0.0674266368, 0.0142530277, 0.0653818846, -0.0516187549, 0.0356918797, -0.0204570256, -0.0149642155, 0.0379553586, -0.0659625828, 0.0189688280, 0.0221430957, -0.0124411061, -0.0285849720, -0.0018643662, -0.0443699658, -0.0266345777, -0.0288052335, 0.0323049277, -0.0648284927, 0.0038613155, 0.0166203454, 0.0126561522, -0.0615268946, -0.0496565923, -0.0494864918, -0.0056818873, -0.0580702871, 0.0441200659, -0.0305832885, -0.0686015934, -0.0024088621, -0.0290175937, -0.0603032820, 0.0350110084, -0.0622911528, -0.0087840781, 0.0214338452, 0.0223411024, -0.0481611006, -0.0355402902, 0.0493985489, -0.0568086505, -0.0256132074, 0.0274893269, -0.0341477282, 0.0632513463, 0.0637058318, 0.0187011659, -0.0274897888, 0.0179001912, 0.0165331587, -0.0223486237, -0.0540128723, 0.0543023795, 0.0453764349, -0.0133423060, -0.0361918435, 0.0231780931, 0.0716773570, 0.0101290345, 0.0215589926, 0.0450911224, 0.0503415987, 0.0504229665, -0.0207957514, 0.0604628026, 0.0019261166, 0.0577740520, -0.0704764128, -0.0426181518, -0.0068090260, 0.0221889690, -0.0016204938, -0.0384718105, -0.0668082386, 0.0081546009, -0.0465031639, -0.0640856028, 0.0106148422, -0.0708098412, -0.0536265858, -0.0336266309, 0.0482990593, 0.0469271615, -0.0545631796, -0.0549547635, 0.0336142108, -0.0419761129, 0.0445881635, 0.0496542156, 0.0473716557, 0.0612627119, 0.0432453752, 0.0223552659, 0.0006033927, 0.0205700845, 0.0469314456, 0.0281393081, 0.0310537592, -0.0027398914, -0.0421039388, 0.0196884349, -0.0366368517, 0.0560731143, 0.0202089772, -0.0536347404, -0.0582509376, 0.0469472632, 0.0471561104, 0.0311261117, -0.0476965979, 0.0275333002, 0.0380680636, -0.0377116166, -0.0142042451, -0.0620767772, -0.0681279674, 0.0700335354, 0.0343637913, -0.0094428807, 0.0611676127, 0.0481974259, -0.0613970570, -0.0368745588, 0.0449114218, -0.0662207752, -0.0092259943, -0.0232493430, -0.0168760493, -0.0603967980, 0.0242453739, -0.0285165608, -0.0181881040, -0.0021473914, 0.0628831834, -0.0705038905, -0.0656750426, 0.0107838064, -0.0443310961, -0.0163333081, 0.0282546952, -0.0153359063, 0.0333961174, 0.0387407467, 0.0410960615, -0.0043763071, -0.0426460616, 0.0104533583, -0.0079961345, -0.0156438500, 0.0352579504, -0.0143610127, 0.0094524249, 0.0199750885, -0.0325451083, 0.0183868706, -0.0606269166, -0.0616414212, 0.0509192348, -0.0511193238, 0.0604839474, 0.0459616780, -0.0418235287, 0.0241813287, 0.0475673601, -0.0243731961, 0.0256647244, -0.0052872300, -0.0026943088, 0.0234873444, -0.0720990449, 0.0601115525, -0.0088893622, -0.0697882473, -0.0423516929, -0.0025998652, -0.0177713335, 0.0114330053, 0.0684667975, 0.0137222558, -0.0398592129, -0.0376393497, -0.0355289504, -0.0115671940, -0.0330793299, 0.0447268784, 0.0595117509, -0.0288660564, -0.0352031663, 0.0088505670, 0.0147472098, 0.0417869091, -0.0179946385, -0.0313538760, 0.0226108506, 0.0001778826, -0.0160123594, 0.0716630071, 0.0498943478, -0.0700265691, 0.0295280218, 0.0504174605, 0.0640156269, 0.0463307202, 0.0624576062, -0.0301083401, 0.0023116618, 0.0565092117, 0.0275123268, 0.0575958043, 0.0349335447, -0.0127560012, -0.0372253805, -0.0547394753, 0.0114265978, 0.0295448452, 0.0021538287, -0.0459642075, -0.0556268096, 0.0452200323, 0.0079623908, -0.0096447244, -0.0402262583, -0.0153556764, -0.0239220299, -0.0305245817, -0.0443753190, 0.0405451134, -0.0538621582, 0.0397313684, -0.0106629804, 0.0559459478, -0.0640464574, -0.0044920146, -0.0201533511, -0.0608086661, 0.0665214956, -0.0348721519, -0.0265242867, -0.0313253812, -0.0467387885, 0.0222261325, -0.0589394160, 0.0327151567, 0.0524677187, 0.0275751650, 0.0200463757, 0.0704384893, -0.0028461963, -0.0249446705, -0.0562923364, -0.0323589519, 0.0254584029, 0.0552226156, 0.0223391429, -0.0320925787, 0.0138055384, 0.0696054101, -0.0685244203, -0.0465935469, -0.0483020544, 0.0622199029, -0.0461943075, 0.0560999364, 0.0279838368, 0.0704055727, -0.0635900050, 0.0535097718, 0.0293742493, -0.0107226893, 0.0057171658, -0.0301711261, 0.0205426812, 0.0680927783, -0.0639883876, 0.0581660271, -0.0322113745, -0.0636685044, -0.0293401256, 0.0359597504, 0.0680066794, -0.0118806437, -0.0167894661, 0.0543868989, -0.0207872652, -0.0102787279, 0.0462670252, 0.0285871252, -0.0017214641, -0.0360710062, -0.0469330624, -0.0604564026, -0.0166991502, -0.0619403832, 0.0257700086, -0.0633846521, -0.0274371207, 0.0100923181, -0.0319431089, 0.0209656656, -0.0358944163, 0.0212050378, 0.0046208948, 0.0655012876, -0.0635608137, -0.0615178943, 0.0258761570, 0.0371330008, 0.0289629325, -0.0115181729, -0.0245866925, 0.0700147450, -0.0332516208, -0.0713549703, -0.0528965741, -0.0454364046, -0.0361607857, -0.0031696707, 0.0069865137, -0.0009678900, 0.0561985373, 0.0003117621, -0.0421925001, 0.0407524630, -0.0218337588, 0.0446490869, 0.0307215229, 0.0528061539, 0.0260881558, 0.0482090712, 0.0103554502, -0.0543090776, 0.0009391755, 0.0450302139, 0.0605531037, -0.0511263981, -0.0070282891, -0.0537624285, 0.0502883270, -0.0224786364, -0.0670653507, 0.0095157102, -0.0323058888, 0.0531784594, -0.0642233789, 0.0392772406, -0.0436613560, 0.0619669855, 0.0324180573, -0.0609815717, -0.0493800193, 0.0244141817, -0.0422154367, -0.0452049747, 0.0414092168, -0.0537736341, -0.0509320162, 0.0190514699, -0.0546514504, 0.0301673263, -0.0034623370, 0.0342107862, -0.0280903094, -0.0422297008, -0.0580340847, -0.0336323977, -0.0598540753, -0.0417558029, 0.0281093866, 0.0270515606, 0.0129719749, 0.0111040995, -0.0494892970, 0.0677414834, 0.0245901197, 0.0232325867, -0.0154409856, 0.0148857161, -0.0371672586, -0.0296998955, 0.0235856399, -0.0393990092, 0.0692340136, -0.0489354059, -0.0486824885, -0.0373178311, -0.0166718625, 0.0481063649, 0.0352514312, -0.0703552440, -0.0395642258, -0.0253407471, -0.0358825102, 0.0188667253, 0.0519407094, 0.0313767120, -0.0375753939, -0.0454023853, -0.0135840401, -0.0267176703, 0.0495886654, -0.0460690483, -0.0031725466, -0.0001395121, 0.0048226193, 0.0081844702, 0.0336956978, 0.0528831035, 0.0544238240, -0.0156953484, -0.0122393779, 0.0633522719, -0.0182953700, 0.0266415626, -0.0668254942, -0.0359969325, 0.0416710451, -0.0454094559, 0.0412508994, 0.0674570054, 0.0288740769, -0.0170718580, -0.0603648983, -0.0642604232, -0.0195511952, 0.0015472844, 0.0402221829, -0.0710692406, 0.0491983518, -0.0529723987, -0.0369415432, 0.0548479706, 0.0198963061, -0.0174230933, 0.0321248770, -0.0321626291, 0.0172646940, 0.0505584851, -0.0265461914, -0.0493703820, 0.0709569007, 0.0628110915, 0.0689251721, -0.0345212258, -0.0101464465, -0.0162023343, 0.0307784230, 0.0284659714, -0.0696333349, 0.0304015055, -0.0627977103, 0.0418605208, -0.0350035392, 0.0657267869, -0.0280452967, 0.0435695127, 0.0092605054, -0.0135830231, -0.0513845980, -0.0630511045, -0.0701185539, -0.0236536078, -0.0366823301, -0.0153895579, 0.0512216315, 0.0565979779, -0.0022992864, -0.0308727175, -0.0075783432, -0.0583389141, -0.0223309882, 0.0200984925, -0.0616346933, -0.0509150699, -0.0673979893, 0.0462659523, 0.0634513646, -0.0589009784, -0.0314932317, 0.0370885208, 0.0359581336, -0.0702918097, 0.0382528752, -0.0040137172, 0.0664965659, 0.0010568649, 0.0282763764, 0.0305789709, 0.0029914528, 0.0344998389, 0.0713126957, -0.0711898953, -0.0161840096, 0.0311658084, -0.0566691570, 0.0649020821, -0.0105967037, 0.0520332381, 0.0667109042, -0.0430366807, -0.0034780279, -0.0454487205, 0.0507079214, 0.0156931132, -0.0411659516, 0.0281472281, -0.0233215094, -0.0206013881, -0.0657328740, -0.0237508081, -0.0678352043, 0.0110723898, -0.0502760746, 0.0591177344, 0.0320930108, 0.0048341528, -0.0631243512, 0.0562307239, -0.0116976872, -0.0078040883, -0.0018244609, -0.0319769718, 0.0581728518, -0.0216806903, 0.0216974467, 0.0236687660, 0.0013382956, 0.0031735823, 0.0583375841, 0.0539933741, -0.0430695266, 0.0082455352, -0.0309494063, 0.0001776367, 0.0099377483, -0.0032709315, -0.0630679503, 0.0626101345, 0.0329270363, 0.0211524740, -0.0439461395, 0.0629394203, 0.0180650949, -0.0135275871, -0.0199939497, 0.0399074405, 0.0586472601, -0.0088326856, 0.0300381035, 0.0490570888, 0.0348782390, 0.0054859295, 0.0513611436, -0.0292245187, 0.0402921066, 0.0049811974, 0.0364528149, -0.0553706773, 0.0362581760, -0.0055194274, -0.0697429255, 0.0057671666, -0.0483988076, 0.0103360787, -0.0513607822, 0.0476683453, -0.0011496618, 0.0569313467, 0.0286357999, 0.0123140514, 0.0624623299, -0.0251948200, -0.0294893570, 0.0221637115, -0.0035907105, 0.0607786179, 0.0673962533, -0.0689854994, 0.0072428361, 0.0395145491, 0.0210152715, 0.0505812839, -0.0056397691, -0.0713778734, -0.0516446531, -0.0070832297, -0.0204643197, 0.0119030103, -0.0025327280, -0.0578346997, -0.0164727345, 0.0064767897, 0.0216333047, -0.0538256839, -0.0116395652, -0.0426674336, 0.0267938599, 0.0076564252, -0.0445861667, -0.0441887826, 0.0083968490, 0.0096566007, -0.0155419372, -0.0138263740, 0.0564496219, -0.0066956580, -0.0533367768, 0.0442703590, -0.0110694654, -0.0264091752, -0.0564560890, 0.0116102770, 0.0668564439, 0.0682871640, -0.0220692456, -0.0563974157, 0.0583685935, -0.0170922130, -0.0606599674, 0.0309184715, -0.0670354292, -0.0533034354, 0.0682936162, 0.0720420331, 0.0434887409, 0.0227856487, 0.0159309730, -0.0641123578, 0.0202439204, 0.0181496665, 0.0007543266, -0.0261609927, 0.0455216914, -0.0571518801, -0.0542595387, 0.0105100349, -0.0485686883, -0.0426588133, 0.0449422151, 0.0458400100, 0.0244573206, -0.0670403168, 0.0044755861, 0.0103103369, -0.0664949268, 0.0431947708, -0.0609898679, -0.0251821354, 0.0699366629, 0.0315658078, 0.0512464941, -0.0685711503, 0.0416611880, 0.0704094768, -0.0341146924, 0.0310888290, 0.0167627260, -0.0552757680, -0.0431553349, -0.0690025985, 0.0707680434, -0.0400452316, 0.0432607755, 0.0293965265, -0.0417394564, 0.0319621041, -0.0353466161, 0.0357719958, 0.0595990419, -0.0008866787, 0.0598132312, -0.0422041342, 0.0626406670, 0.0177310556, 0.0476922765, -0.0711952448, 0.0427176878, -0.0308390968, 0.0412216634, 0.0647677183, 0.0335799307, -0.0249044448, 0.0702590644, 0.0276987776, -0.0212641768, 0.0600467473, -0.0286228098, 0.0038605779, 0.0406741574, -0.0187454708, 0.0511965305, -0.0572339036, 0.0189613402, 0.0593519956, 0.0107275769, 0.0150164366, 0.0355962962, 0.0402164683, -0.0717149824, -0.0428109989, -0.0325735509, 0.0186264068, -0.0594156384, 0.0262260288, 0.0143588111, -0.0602902398, 0.0165530145, -0.0399211571, -0.0151562728, 0.0407743305, 0.0340165123, 0.0236505121, -0.0325966254, 0.0105735585, 0.0479559302, -0.0481067821, 0.0394927189, -0.0197067745, -0.0097154453, 0.0338217169, -0.0034892336, -0.0096146688, -0.0295184888, -0.0513221547, 0.0080500767, 0.0583169460, 0.0372631624, -0.0114358924, 0.0233207345, -0.0524545908, 0.0133177713, -0.0720741823, 0.0453533605, 0.0573580861, -0.0145636350, 0.0010461286, -0.0217042305, -0.0305027105, -0.0242890231, 0.0419179872, -0.0048623681, 0.0228968039, 0.0250292271, 0.0233078301, 0.0633444637, -0.0070764348, 0.0014693886, -0.0041050464, 0.0298211128, -0.0298253819, 0.0066816136, -0.0042622089, 0.0137740299, -0.0473952442, 0.0292310938, -0.0417991430, -0.0445692539, 0.0115607232, -0.0049878508, -0.0179185681, -0.0703098923, -0.0077810884, 0.0178712681, -0.0444772989, 0.0459395647, -0.0468742177, 0.0442364439, -0.0175516084, -0.0389001295, 0.0061115846, -0.0223097727, -0.0199140087, -0.0316364579, 0.0289658383, -0.0047626421, -0.0678821430, 0.0705968887, -0.0301070139, -0.0043318570, 0.0302877873, -0.0677083582, -0.0591409728, -0.0448308922, 0.0615498126, -0.0238718353, -0.0403328165, 0.0137916729, -0.0235356241, -0.0238565058, 0.0357046798, -0.0045306310, -0.0021547228, -0.0236629844, 0.0399165079, 0.0024644360, 0.0105390996, -0.0266350433, -0.0549896732, -0.0224365331, 0.0410168394, 0.0559113920, -0.0715500563, -0.0408194140, 0.0039730221, 0.0506277010, 0.0493082702, 0.0027849898, 0.0030364990, 0.0004899353, 0.0521362424, -0.0154499337, -0.0223824717, 0.0536105335, 0.0144440457, -0.0626829565, -0.0189329013, 0.0395460427, -0.0136455856, 0.0542606711, -0.0668818653, 0.0620441884, -0.0700657144, 0.0226214677, 0.0717956722, -0.0404973291, -0.0345441960, 0.0118250474, -0.0543160439, -0.0700443834, 0.0403354168, 0.0034369752, -0.0208842605, 0.0624685138, -0.0440490544, -0.0120761059, -0.0151716396, 0.0386357382, -0.0022300184, -0.0088194907, -0.0385875739, 0.0334594920, -0.0336647443, -0.0515712500, 0.0206815004, -0.0150917135, 0.0668448359, 0.0370556563, 0.0211892277, -0.0082048625, 0.0683731437, -0.0273368396, -0.0242243260, -0.0030829534, 0.0084992126, -0.0027900487, 0.0079901069, 0.0119615123, -0.0238681883, 0.0112601444, -0.0024946183, -0.0715291202, 0.0540372282, 0.0337466449, -0.0030567497, 0.0269139931, 0.0552663058, -0.0098823272, -0.0259473063, -0.0492938161, -0.0228591710, 0.0042034686, 0.0471818000, -0.0074502081, -0.0000139177, -0.0411675684, 0.0314445347, -0.0657277107, 0.0548120737, 0.0634378344, 0.0300523192, 0.0237457305, 0.0243761763, -0.0216120034, -0.0084386244, 0.0458589718, 0.0578748137, -0.0244084187, -0.0616344176, -0.0026960820, 0.0598093718, 0.0189547390, 0.0531641990, -0.0127395354, 0.0299837291, 0.0294139087, -0.0618743077, -0.0558631569, -0.0390014388, -0.0419314951, -0.0294770747, 0.0324971005, 0.0637118369, 0.0182749480, -0.0137146898, 0.0684988797, -0.0680217519, -0.0240278468, 0.0607479215, 0.0461313650, 0.0001171231, 0.0227604061, -0.0598935783, -0.0611723922, -0.0410487577, -0.0199886858, -0.0093119368, 0.0656085759, 0.0120896325, -0.0477845222, 0.0569837987, 0.0194425359, -0.0697471425, 0.0114644393, 0.0171423852, 0.0323658362, -0.0052016601, 0.0472053066, 0.0702822059, 0.0032411292, -0.0227654651, -0.0620173812, 0.0000699982, 0.0619496852, 0.0650133342, 0.0702511072, -0.0278534964, -0.0713534430, 0.0384911299, -0.0476171225, -0.0001360998, -0.0047115162, -0.0101091079, -0.0707359537, -0.0495722294, 0.0389748737, 0.0503393114, -0.0545609817, -0.0502081960, -0.0711317733, -0.0169105828, 0.0354607478, -0.0474240482, -0.0710317343, -0.0410417728, -0.0203674659, 0.0660503805, -0.0470614433, 0.0381259248, 0.0329418704, -0.0073826909, -0.0498864017, 0.0135547742, 0.0065220296, 0.0030889586, 0.0149911121, -0.0024056211, 0.0183971971, 0.0566055328, 0.0193563327, -0.0378128067, -0.0396299884, 0.0335458964, -0.0370019712, -0.0623421334, -0.0703976750, 0.0671165586, 0.0606224835, -0.0014278889, 0.0258945003, 0.0413612425, -0.0164407641, -0.0292195268, -0.0491573662, -0.0113872848, -0.0146264359, -0.0459499434, -0.0469567068, -0.0440476239, -0.0271512344, -0.0617755949, 0.0342786834, -0.0092219636, -0.0377178267, 0.0453635305, -0.0603845641, -0.0153385215, 0.0685100555, 0.0211609900, 0.0326216593, 0.0327236727, -0.0315303802, 0.0016583130, 0.0197695419, 0.0312405527, -0.0393286720, 0.0478757694, -0.0602868125, -0.0666134134, 0.0478493720, -0.0485585518, 0.0658305436, -0.0402917452, 0.0638926327, -0.0142333210, 0.0197976902, -0.0009631440, 0.0498141199, -0.0199746601, -0.0545634739, -0.0383676253, 0.0533037484, 0.0228588134, -0.0427524820, -0.0494023524, 0.0311546102, 0.0642528534, -0.0195960514, 0.0234699845, -0.0606569052, -0.0172536634, 0.0110389441, -0.0187922716, -0.0367619283, 0.0668094605, 0.0583921671, -0.0171404593, -0.0397552513, -0.0422770865, -0.0324587151, 0.0420204550, 0.0389832705, -0.0476321056, 0.0667563379, 0.0182937533, 0.0278276503, -0.0589273907, 0.0148106515, -0.0707504973, -0.0494839102, -0.0008592531, -0.0533125177, 0.0269368812, -0.0595036484, 0.0520239845, 0.0646175593, -0.0586643554, 0.0687102526, 0.0442737117, -0.0075576976, -0.0203940310, -0.0321572945, 0.0162629187, -0.0160021745, 0.0498224646, -0.0444063619, 0.0339550301, 0.0652224272, 0.0442736149, -0.0341497734, 0.0337568000, 0.0052565113, 0.0148687065, -0.0621295497, 0.0641924143, -0.0575928986, 0.0202950090, -0.0192753933, -0.0467906147, -0.0438390970, -0.0458199158, 0.0507973954, 0.0488329083, 0.0179686025, 0.0511010662, 0.0380926654, -0.0652423054, 0.0179098099, -0.0611527264, -0.0319831818, 0.0368772447, 0.0656161457, 0.0443363264, 0.0505277514, 0.0049306229, 0.0693197846, 0.0538171679, -0.0367539413, -0.0607247353, 0.0654296130, 0.0261476710, 0.0209463909, -0.0646348819, 0.0308510885, 0.0156225339, 0.0086807236, 0.0447454304, -0.0332530998, -0.0055231079, 0.0093695447, 0.0360520110, -0.0279659741, 0.0691981316, -0.0228471793, 0.0260266960, 0.0048865229, -0.0273558535, -0.0471280962, -0.0207147747, 0.0393429026, 0.0325987563, 0.0612817258, -0.0124681890, -0.0350907221, 0.0045254678, 0.0008567572, -0.0061786920, 0.0229418650, 0.0550800264, 0.0316025391, 0.0720240027, -0.0719682947, 0.0060196146, -0.0112873502, 0.0562046319, 0.0476579666, -0.0634356365, 0.0567179471, 0.0546046495, 0.0089119896, 0.0584988594, 0.0052317232, -0.0512526035, -0.0575480759, 0.0484510437, 0.0042559281, 0.0696066618, 0.0599486530, -0.0319855399, -0.0497153029, 0.0169209912, 0.0508072525, -0.0342472158, 0.0222474188, 0.0146471187, -0.0155169889, -0.0259146467, 0.0007002503, 0.0551576465, 0.0689385831, 0.0247908458, 0.0142057762, -0.0362187736, -0.0536655076, -0.0053886771, 0.0171963274, 0.0591868907, -0.0075106695, 0.0056178495, -0.0272821076, 0.0180811360, -0.0433940887, 0.0120467842, 0.0232874379, -0.0697221234, 0.0600730032, -0.0108245686, -0.0430888310, -0.0539493784, -0.0202406012, -0.0411994159, 0.0515514612, 0.0411500037, -0.0272075683, 0.0592517406, -0.0339700878, 0.0237208158, 0.0475184917, 0.0549857765, -0.0611347966, -0.0700194612, 0.0595135540, -0.0063302442, -0.0718952715, -0.0251927190, -0.0041325614, -0.0410132781, 0.0564212799, -0.0532078184, 0.0146091133, 0.0623888075, 0.0072948188, 0.0412819535, -0.0513721406, 0.0060800463, -0.0447149724, 0.0438263491, 0.0278827325, 0.0241382122, -0.0642404929, 0.0348573029, -0.0580686182, -0.0467375144, -0.0461855009, -0.0439853184, -0.0568080805, -0.0488762856, 0.0611835569, 0.0607602447, 0.0387516543, 0.0677460879, -0.0559167378, 0.0246304646, -0.0708590671, 0.0567203313, -0.0342324004, -0.0399016105, -0.0407343619, 0.0389138237, 0.0115623400, -0.0654316097, 0.0494522005, -0.0114789084, 0.0201447606, -0.0152882636, 0.0007929876, -0.0076592788, 0.0140632391, 0.0616899580, -0.0267704055, -0.0014961138, 0.0510490909, 0.0033692867, -0.0383324400, 0.0024737418, -0.0419755802, 0.0342233330, 0.0719915181, -0.0143186152, -0.0712453499, 0.0360324979, -0.0614039376, -0.0041124970, 0.0524724871, 0.0579278320, 0.0085093305, -0.0044348240, 0.0239895955, 0.0462413356, -0.0533547252, 0.0601736158, -0.0607524179, 0.0472898707, 0.0607370734, -0.0558583066, 0.0229679868, 0.0055374280, 0.0703105330, 0.0349821821, 0.0422436744, 0.0670118481, 0.0086116716, -0.0553716235, -0.0420709401, -0.0612462424, 0.0549105406, 0.0180141181, 0.0471201986, -0.0562122241, 0.0099748671, 0.0029661730, -0.0642061010, 0.0506614149, 0.0438950360, -0.0583408773, -0.0517691933, 0.0476036966, -0.0675222203, -0.0226637758, -0.0591356903, -0.0599830709, 0.0572697222, 0.0425388962, -0.0408764705, -0.0380953848, -0.0227212124, 0.0540565401, 0.0492981523, 0.0065112412, -0.0018906221, -0.0186802931, 0.0198787004, 0.0434516296, -0.0552949868, -0.0052877963, 0.0668125004, -0.0323818028, -0.0457737856, -0.0348814949, 0.0066711903, -0.0147215202, 0.0442850888, 0.0149432272, 0.0412482992, 0.0582267940, 0.0277457982, -0.0234713927, -0.0355876423, -0.0060771927, 0.0715234429, 0.0333898067, 0.0075677410, 0.0540970415, 0.0716700405, 0.0266121253, -0.0429228432, -0.0352072604, 0.0152571052, 0.0702124387, -0.0203746408, 0.0163893998, 0.0236427486, -0.0182591863, -0.0118661895, 0.0003822893, 0.0221079588, -0.0169356018, -0.0373828001, -0.0301439911, -0.0470693037, -0.0135379955, -0.0105710663, -0.0445839129, 0.0476819351, 0.0499108508, -0.0078105778, -0.0259779505, -0.0593250804, -0.0578291416, -0.0692763180, -0.0354154408, -0.0184526369, 0.0501476973, -0.0077502504, -0.0476301834, -0.0264835432, 0.0214626193, -0.0007030666, -0.0594736077, 0.0408983231, 0.0568165779, -0.0594923273, -0.0620747805, 0.0354774371, -0.0246033147, 0.0389942303, -0.0602201074, -0.0060355365, -0.0461556800, -0.0604317598, -0.0648351684, 0.0017148405, -0.0676560625, -0.0424366072, -0.0070982501, -0.0481833294, -0.0009278357, 0.0554072708, 0.0288221315, 0.0071199685, -0.0196153745, 0.0483173355, -0.0174265355, 0.0076338127, -0.0429436788, 0.0506668985, -0.0481402986, -0.0558938384, 0.0426589996, -0.0260744430, -0.0178771019, -0.0240111575, -0.0673867166, -0.0327353776, -0.0546788573, 0.0623204559, 0.0051781237, -0.0463121533, 0.0564897209, 0.0445566252, -0.0350474156, -0.0474152416, -0.0375456102, 0.0420662090, 0.0129697174, -0.0452048704, -0.0237205401, -0.0235609524, 0.0257972628, -0.0402217507, 0.0719797462, -0.0719979927, -0.0680942610, 0.0175854713, -0.0156649612, 0.0213715062, -0.0297711827, -0.0168847926, -0.0259216838, -0.0178886279, -0.0240893774, -0.0158315711, -0.0170621909, 0.0567848533, 0.0409228429, 0.0151104182, 0.0537042916, -0.0174080729, -0.0523722246, -0.0634536818, 0.0641496778, 0.0331787169, -0.0516747311, 0.0533948541, 0.0506785139, 0.0485340506, -0.0643237755, 0.0219101235, -0.0122771487, 0.0395160988, -0.0626229048, -0.0434012637, -0.0003452301, 0.0166405812, 0.0304207429, -0.0691671446, 0.0051080734, -0.0036968961, 0.0461155027, 0.0341902077, 0.0151726380, 0.0121925771, 0.0537917018, -0.0343610533, -0.0480190627, 0.0565002561, 0.0611319989, -0.0464608893, 0.0560231209, 0.0209853798, -0.0119543374, 0.0376269743, 0.0659028143, -0.0509627983, -0.0050584152, 0.0628294647, 0.0589581430, 0.0681442320, -0.0594339296, 0.0711122900, -0.0145021379, 0.0398721024, 0.0072042793, -0.0048510656, 0.0343473926, 0.0407896116, -0.0389941446, 0.0014438033, -0.0668001026, 0.0333218053, 0.0107838586, -0.0591938309, 0.0370543003, 0.0671562701, -0.0657238737, -0.0701281726, -0.0244631507, 0.0084570050, -0.0444442481, 0.0618486851, -0.0066137686, -0.0385278873, -0.0673619360, 0.0388907716, 0.0419163406, 0.0485491902, -0.0600136966, 0.0493421331, 0.0060990229, 0.0315215364, 0.0301608220, -0.0340951085, 0.0290176123, -0.0274377204, -0.0545186326, -0.0242448524, -0.0394574963, 0.0683976710, 0.0663958192, 0.0406888872, 0.0429764912, -0.0033624396, 0.0703153014, -0.0243770331, -0.0169913322, 0.0097419918, 0.0307933092, 0.0614588410, 0.0254486650, 0.0709579736, 0.0552438796, 0.0018206611, 0.0694304109, 0.0505670831, 0.0397107080, 0.0201493055, -0.0672986209, -0.0684726313, 0.0400236696, -0.0610871352, 0.0419732928, -0.0344561860, -0.0141133927, -0.0262091868, -0.0082098842, -0.0424303636, 0.0377882496, 0.0007031187, 0.0520142317, -0.0517513305, -0.0248436183, -0.0054446831, -0.0335308276, -0.0224124789, -0.0589941517, -0.0009757727, -0.0126136169, -0.0231640190, -0.0317054540, -0.0005526170, 0.0388439819, -0.0173635744, -0.0582311675, -0.0183140226, -0.0158765316, -0.0617205203, 0.0404823795, 0.0377864093, 0.0022585467, -0.0157695934, -0.0382733531, -0.0523855090, 0.0392841771, -0.0526225939, -0.0134165175, 0.0401466787, -0.0348507278, 0.0706168711, -0.0120205842, 0.0073790401, 0.0471976474, -0.0551169850, -0.0195323527, 0.0717163086, -0.0060242265, 0.0220955908, -0.0580497272, 0.0174436867, 0.0416004434, 0.0270265043, -0.0016958788, -0.0365023687, 0.0687229633, -0.0026735440, 0.0171833932, 0.0530864596, 0.0272910893, 0.0454180464, -0.0486602262, -0.0390780941, -0.0351534225, -0.0519789532, -0.0299048238, -0.0288913175, -0.0391630940, -0.0124535635, -0.0249336585, -0.0259030163, -0.0227549188, 0.0532455295, 0.0488124117, -0.0243516527, -0.0122177340, -0.0572768338, -0.0224320777, 0.0185625181, -0.0185484253, -0.0557197779, 0.0143525451, -0.0493014380, 0.0056915283, -0.0478081107, 0.0563727468, -0.0390463471, 0.0016402677, -0.0220577158, 0.0286246538, -0.0573890544, 0.0125249326, 0.0068088770, -0.0006122887, -0.0417209268, -0.0616341755, 0.0585914850, -0.0540635437, 0.0555510819, 0.0475776121, 0.0440542325, 0.0456246734, 0.0454636887, 0.0011092424, 0.0453540161, 0.0332133844, -0.0105940029, -0.0002261922, 0.0186943710, 0.0716503263, -0.0696704313, 0.0238622203, 0.0149754509, 0.0363896117, 0.0440110937, 0.0367172435, 0.0052489415, -0.0282209031, -0.0130820796, -0.0506316796, 0.0127779022, -0.0399808958, 0.0596805066, -0.0436262935, -0.0062985122, -0.0052493066, 0.0642091185, -0.0359729119, 0.0342693776, 0.0365255103, -0.0445510298, -0.0479746684, -0.0481670871, -0.0663683563, -0.0619202517, 0.0266995132, 0.0488626882, -0.0448011756, 0.0375101119, -0.0714587271, -0.0367800295, -0.0503296182, 0.0468236804, 0.0569023490, 0.0181232393, 0.0194887891, -0.0343073681, -0.0152199529, -0.0096668676, -0.0641495287, 0.0320911184, 0.0410376638, -0.0248347931, -0.0244647525, -0.0408307724, -0.0483420789, 0.0425226390, -0.0632977784, 0.0028889850, -0.0460053645, 0.0055957586, 0.0467980802, -0.0245380327, -0.0446121134, 0.0706493556, -0.0242020972, -0.0377757251, -0.0031969249, -0.0048512369, 0.0515071377, -0.0257970244, 0.0097476915, 0.0416757092, 0.0021505356, -0.0216797255, -0.0309584923, -0.0381475724, 0.0646157712, -0.0341063477, -0.0544645712, -0.0581900291, -0.0679888576, 0.0509647951, 0.0410068929, -0.0720927492, 0.0116497651, 0.0658248216, -0.0691853017, -0.0481017567, 0.0300069973, -0.0561549962, 0.0535451025, 0.0598385483, 0.0341036245, 0.0405547991, -0.0564392097, -0.0128957517, 0.0486055091, -0.0544481911, -0.0702437535, 0.0267932937, -0.0125779659, -0.0492610857, -0.0338613614, 0.0700758398, 0.0192155465, -0.0600381494, 0.0468022600, 0.0638466030, 0.0510291979, -0.0688616633, 0.0255933702, 0.0659656376, -0.0559731759, -0.0038136542, 0.0278797671, -0.0371932723, 0.0661877245, -0.0011420250, 0.0109841377, 0.0602938384, -0.0053228438, 0.0485645011, -0.0319423154, -0.0221204162, -0.0393658020, -0.0211419240, 0.0686113834, 0.0111227855, 0.0591980815, -0.0611131340, -0.0615077950, 0.0521461144, 0.0055424646, -0.0577395633, -0.0477689654, 0.0675902516, 0.0429349914, -0.0630182251, 0.0322507247, 0.0447263643, 0.0255959183, -0.0195686072, -0.0549334623, -0.0527365357, 0.0381403640, 0.0421720222, -0.0504966602, 0.0193452165, -0.0427109450, 0.0429093167, 0.0463951752, 0.0419121608, -0.0582728088, -0.0608530603, -0.0017356798, 0.0360273346, 0.0476086363, 0.0182489827, -0.0471394546, -0.0668661371, -0.0157139823, -0.0251596123, 0.0569595844, 0.0547991991, 0.0700697601, -0.0188068300, -0.0318962708, 0.0199108794, 0.0675144345, -0.0015463382, -0.0609802678, 0.0038381070, -0.0025195479, -0.0228427909, -0.0676065981, -0.0313671939, 0.0322133154, 0.0093033016, 0.0412502140, -0.0193132125, -0.0220094547, -0.0463599563, 0.0130547881, 0.0394779742, -0.0015844852, -0.0063211247, 0.0473621711, -0.0028034002, 0.0481927097, 0.0525460914, -0.0606155097, 0.0211757869, 0.0031231642, -0.0411065370, 0.0623243451, -0.0061713755, 0.0316156894, -0.0528388433, -0.0007199124, -0.0158272870, -0.0152431466, 0.0337166563, -0.0094919503, 0.0555669218, 0.0099560767, -0.0051534846, 0.0053868890, 0.0277924836, -0.0437314063, 0.0409893990, 0.0524773374, -0.0041748211, 0.0427123606, 0.0419232026, 0.0553529710, 0.0403623432, 0.0573626608, -0.0467233881, -0.0316814668, -0.0321318097, 0.0268829688, 0.0347681567, 0.0273236632, 0.0485453904, 0.0653300285, -0.0310001634, -0.0157123320, 0.0063899681, 0.0264650807, -0.0409863666, -0.0670664534, 0.0007414743, 0.0647015870, 0.0028281584, -0.0448663011, -0.0385206267, -0.0186239257, 0.0649083406, 0.0588479936, -0.0187178738, 0.0665247142, -0.0558069274, 0.0555510670, 0.0087497011, 0.0635374635, -0.0572617948, 0.0029767230, -0.0519792140, 0.0045138150, 0.0078692883, 0.0023523867, -0.0421895236, 0.0502186939, -0.0502588153, 0.0347541869, -0.0708282366, 0.0231887624, 0.0368960872, -0.0109792016, -0.0403528288, 0.0452720150, -0.0232631452, -0.0200250074, 0.0218983665, 0.0617773980, -0.0591801181, -0.0316744819, -0.0591161959, 0.0381742269, -0.0239352584, -0.0213343427, 0.0387918353, 0.0471205786, 0.0593374074, -0.0637098849, -0.0130098462, -0.0027945936, -0.0167579129, 0.0520988479, 0.0511458367, -0.0631418526, 0.0708776265, -0.0718661547, -0.0369609520, -0.0079750717, -0.0613721423, -0.0583502725, 0.0614064783, 0.0512330905, -0.0272163972, -0.0436254814, 0.0619067401, 0.0337372869, 0.0479928553, 0.0459061190, 0.0267534554, -0.0165335052, -0.0486870632, 0.0174839199, 0.0380493104, -0.0206245296, -0.0019929111, 0.0147369877, -0.0031472519, 0.0151801035, 0.0635631531, -0.0294749923, -0.0109284595, 0.0164869279, -0.0300578587, 0.0189016908, -0.0012650266, 0.0335217565, -0.0442231447, -0.0165409744, 0.0648345947, -0.0111814775, 0.0065386966, -0.0235813260, -0.0618029907, 0.0289727002, 0.0279038921, 0.0152344927, -0.0433788821, 0.0721683651, 0.0428159237, -0.0074349791, -0.0064381659, 0.0639070421, 0.0477306172, 0.0600227863, -0.0532498360, -0.0007226318, -0.0464310683, -0.0569185987, -0.0044297799, 0.0486115962, 0.0655930489, 0.0034006163, 0.0170353130, -0.0704801306, -0.0187019557, 0.0534439236, 0.0609236956, 0.0298196524, 0.0523543656, 0.0503172353, -0.0076498017, -0.0192074478, 0.0671065897, -0.0540100820, 0.0271184221, 0.0670013726, 0.0667759031, 0.0037238747, -0.0042720661, -0.0013665855, -0.0298390277, -0.0392896123, -0.0083211958, 0.0275804102, -0.0026969314, 0.0342011899, -0.0041231140, 0.0060160905, 0.0130201876, 0.0622820705, 0.0087659284, -0.0696129799, -0.0145825967, -0.0053047240, 0.0469468608, -0.0177085996, 0.0603922904, -0.0696756989, 0.0265322551, 0.0108748972, 0.0173604786, 0.0671724528, -0.0204496086, 0.0608547330, 0.0359217599, -0.0248568170, 0.0443110690, 0.0321136415, -0.0140434317, -0.0231716745, -0.0365395173, -0.0264531560, -0.0557080060, -0.0470033512, -0.0645374954, -0.0379391871, -0.0138600320, 0.0213373229, 0.0529779643, -0.0086608455, -0.0561278239, 0.0486491099, 0.0421923995, -0.0239839703, -0.0320144109, -0.0462015532, 0.0023684204, 0.0363250226, 0.0622046590, -0.0523892753, 0.0212700069, 0.0425773934, 0.0486720428, -0.0539698005, 0.0349249765, 0.0405633301, 0.0179958418, -0.0072986037, -0.0281318426, 0.0374050662, -0.0238168985, 0.0465781838, -0.0339798778, -0.0323419534, 0.0628843606, -0.0382193066, 0.0509388670, -0.0518243387, -0.0507776216, -0.0634600520, -0.0116315968, -0.0522065759, -0.0359551534, -0.0170630850, -0.0226686634, -0.0104651079, -0.0231658407, -0.0670891851, 0.0464715734, -0.0375632122, 0.0586510599, -0.0150121003, 0.0103761330, -0.0434345081, 0.0071593150, -0.0256106630, -0.0562894642, -0.0660371333, -0.0597269200, -0.0085485429, 0.0540952832, -0.0516811460, 0.0561111867, -0.0344467908, 0.0594175756, 0.0269512609, 0.0672471076, 0.0457855389, -0.0001711175, 0.0160336569, 0.0717720687, 0.0421599671, -0.0694415346, -0.0089866519, 0.0029538348, 0.0356458202, 0.0218841583, 0.0482805967, 0.0117913783, 0.0152785555, 0.0504058972, -0.0497413874, 0.0143138468, 0.0160456002, 0.0154371858, 0.0639839619, 0.0093694553, 0.0414787307, -0.0027259216, 0.0348250419, -0.0051831454, -0.0174904056, 0.0239268094, -0.0485173240, 0.0391116142, -0.0094221234, 0.0164269954, -0.0280075297, 0.0076996461, 0.0332854316, 0.0460124686, 0.0617442876, -0.0266762190, 0.0071689337, -0.0390291587, 0.0470102876, 0.0204504728, 0.0094430819, -0.0572312884, 0.0392099842, 0.0157753080, -0.0025333464, -0.0042444021, 0.0523042083, 0.0347031504, 0.0179509670, 0.0195507631, 0.0472543240, 0.0219890326, -0.0661869198, -0.0612312034, -0.0169941708, -0.0552819073, -0.0144292191, 0.0368509367, 0.0584514141, 0.0574758947, -0.0143739507, -0.0278774835, 0.0226626247, 0.0609582663, 0.0584056228, -0.0044976100, 0.0544468015, 0.0219026357, -0.0256889164, -0.0608603880, -0.0095622912, 0.0076425225, -0.0447280332, -0.0204721130, -0.0049650073, 0.0424990505, 0.0707015395, 0.0406066775, 0.0033698007, -0.0232735351, -0.0660409555, -0.0250880532, 0.0451720804, 0.0529450476, 0.0186049119, -0.0598658435, -0.0668468475, -0.0381286293, -0.0534702688, -0.0096533298, -0.0480590165, 0.0439450368, 0.0093512014, -0.0237938762, -0.0071572661, -0.0634557679, 0.0305451900, -0.0011378750, -0.0253347568, 0.0301047266, -0.0611568540, 0.0551684052, 0.0269209594, -0.0254915580, 0.0534211993, 0.0039107203, 0.0153632686, 0.0546567142, -0.0027770251, -0.0408400781, 0.0601304919, -0.0089221820, 0.0330561548, -0.0272341706, 0.0257874727, 0.0677675009, -0.0309372582, -0.0410966799, 0.0423833057, 0.0689162761, 0.0370472595, -0.0377487801, 0.0428300649, 0.0304734409, 0.0243258253, 0.0069610998, 0.0533353537, -0.0158633851, -0.0497576967, 0.0011459962, 0.0285631940, -0.0372761562, -0.0362129211, -0.0352957696, -0.0468052402, -0.0332069509, 0.0156690255, 0.0082833916, 0.0489180610, 0.0439741164, 0.0407742858, -0.0505553335, 0.0318937227, 0.0303048566, 0.0556346774, 0.0250892043, 0.0715042949, 0.0363952443, -0.0718787014, -0.0101960525, 0.0340655521, 0.0103443861, -0.0184039958, -0.0325122103, 0.0110438615, 0.0320080295, 0.0192265287, 0.0649888515, 0.0313585252, -0.0389920957, -0.0516313016, 0.0364839435, 0.0627665222, 0.0340023339, 0.0270032287, 0.0048653260, -0.0445884205, 0.0010457039, -0.0010204911, -0.0394112803, -0.0581949502, 0.0119800940, 0.0196567029, -0.0598199181, 0.0532426983, 0.0672709495, -0.0355451107, -0.0670562685, 0.0646796823, -0.0705012605, -0.0093659312, -0.0429875031, -0.0568005256, -0.0345684588, 0.0429171622, -0.0113110952, 0.0451747999, 0.0288103446, 0.0696664900, -0.0585052818, -0.0434767008, -0.0675252825, 0.0509690642, 0.0356420875, 0.0172849596, 0.0681865513, -0.0108110420, -0.0482990295, -0.0046533644, 0.0291891396, 0.0239913538, -0.0659535304, 0.0536484867, -0.0098038316, -0.0083077922, -0.0209097229, 0.0558560491, -0.0282531492, 0.0163183063, 0.0206801742, -0.0111949332, 0.0480880290, -0.0151041895, 0.0599912256, -0.0588347837, -0.0686188489, 0.0624167770, 0.0114112347, 0.0321262181, 0.0555877537, 0.0352409482, 0.0714926422, 0.0182904825, 0.0573742688, 0.0041534826, -0.0655920431, -0.0331857875, -0.0659707487, -0.0286547467, 0.0222137794, -0.0523224287, 0.0478332490, 0.0270446762, -0.0547162518, -0.0541761592, -0.0635494217, 0.0216109157, -0.0121915638, -0.0574069843, -0.0005777180, -0.0113858916, 0.0396468490, 0.0059408620, -0.0446577817, -0.0212189406, 0.0554401428, -0.0025505051, 0.0711079389, 0.0340698138, -0.0256854407, 0.0041602775, 0.0462697744, -0.0607317388, 0.0017869174, -0.0671940222, 0.0160347447, -0.0275799669, 0.0229344517, -0.0015606508, -0.0372806303, 0.0489655361, -0.0052682310, -0.0066565275, 0.0525178388, -0.0250204131, -0.0202678218, 0.0047797114, 0.0203928798, 0.0658953190, -0.0302375592, 0.0179679319, -0.0617001466, 0.0498597175, 0.0202474147, -0.0445060730, -0.0342235900, -0.0316541605, -0.0350270756, 0.0525552481, -0.0134729743, 0.0613584518, 0.0056442767, -0.0392814577, -0.0370244607, 0.0182943717, -0.0101311691, 0.0509787500, 0.0089260861, 0.0645238161, -0.0089365989, -0.0604611486, 0.0003534853, 0.0655862242, -0.0175734609, 0.0672533959, -0.0604747757, -0.0286671855, 0.0315958112, -0.0085424483, 0.0311582237, -0.0422816649, -0.0439871103, 0.0043336302, -0.0244466513, -0.0039277002, 0.0149456859, 0.0280712917, 0.0664812624, -0.0253261216, -0.0485296249, -0.0303375646, -0.0699105635, -0.0234197229, 0.0141427144, -0.0075430200, -0.0290295184, 0.0516938269, 0.0209002122, -0.0526935384, 0.0227142572, -0.0178095661, 0.0424250960, -0.0680323690, -0.0300786942, 0.0397573858, -0.0461876839, -0.0164266527, 0.0359046534, 0.0000023022, 0.0627005249, 0.0034429431, 0.0486151427, 0.0593649000, 0.0594200492, -0.0304760076, -0.0288881510, -0.0675924718, -0.0155482329, -0.0310030021, -0.0486518443, 0.0254035518, -0.0666373074, 0.0502404720, -0.0208211802, -0.0408131704, 0.0702180415, -0.0592799671, 0.0569822639, 0.0306667387, -0.0242252722, 0.0410312414, -0.0202680305, 0.0559732616, 0.0288444087, -0.0164491422, 0.0547865927, -0.0044062957, 0.0661387891, 0.0067383274, -0.0035848469, 0.0118841007, -0.0493441448, 0.0682507157, 0.0522634089, -0.0670202896, 0.0483238399, 0.0323231295, 0.0331053808, 0.0274225995, 0.0211820155, 0.0628450662, 0.0046088994, -0.0555587262, -0.0140351579, -0.0187042616, 0.0072747692, 0.0277783051, 0.0372151956, -0.0211318769, -0.0697142035, 0.0597679019, 0.0555220246, -0.0677098334, -0.0680066943, -0.0533646196, -0.0523336306, -0.0098406710, -0.0543085635, 0.0142851472, -0.0265963823, -0.0372174643, 0.0456313863, 0.0067014694, -0.0162176155, -0.0487337634, 0.0205147043, 0.0615540594, 0.0120791718, -0.0358970463, 0.0602523685, 0.0584539324, -0.0549077913, -0.0456781015, -0.0322698578, 0.0504207835, 0.0650767088, 0.0235710368, -0.0404214822, 0.0032132715, 0.0001155585, -0.0385128297, -0.0484675094, 0.0571738482, 0.0208921432, 0.0103761703, -0.0233783573, 0.0085191354, 0.0036049113, 0.0414941311, -0.0390770957, -0.0511072949, 0.0409764424, -0.0699878708, 0.0138613582, -0.0042226166, 0.0027250275, 0.0051888227, -0.0704030320, 0.0295913741, 0.0420452654, -0.0211585797, -0.0551512763, -0.0505196489, -0.0715248883, -0.0591336600, 0.0065187216, -0.0336373001, 0.0703949630, 0.0640130639, -0.0314600579, -0.0377184115, -0.0677154064, -0.0705026686, 0.0694235563, -0.0012671277, -0.0258022547, -0.0384943001, 0.0694861114, -0.0348830074, -0.0395590663, -0.0653808862, -0.0090301335, 0.0452776700, 0.0610275120, -0.0594505854, -0.0114693083, 0.0481358618, -0.0408086441, -0.0603310689, 0.0176674724, 0.0510721952, 0.0163860992, -0.0508759394, 0.0514081717, 0.0623782724, 0.0169697255, -0.0521934666, 0.0462353826, -0.0178575888, -0.0440959409, 0.0156330466, -0.0508875884, -0.0087902546, -0.0046527758, -0.0661507472, -0.0339016579, 0.0456907153, -0.0129787214, -0.0131970160, -0.0051356256, 0.0062671155, 0.0082999617, 0.0468134284, -0.0349705704, -0.0437167957, -0.0175842829, -0.0418464802, 0.0462771952, 0.0460313335, 0.0711482018, 0.0281881616, -0.0405405834, -0.0663441643, -0.0352849476, 0.0063205063, -0.0110276192, -0.0549985543, 0.0575707555, -0.0292640068, -0.0719448924, -0.0474303141, 0.0461274460, 0.0683828443, 0.0510463342, 0.0239012763, -0.0597997382, 0.0175064206, 0.0658929795, -0.0212248079, 0.0463730693, -0.0636730269, 0.0629409850, 0.0625106841, 0.0470443368, 0.0407032743, 0.0059074983, 0.0413460657, 0.0225089043, -0.0352205448, 0.0071121901, 0.0343315229, 0.0152463838, -0.0412079319, 0.0639096051, 0.0191329047, -0.0340143591, -0.0420800745, -0.0464839935, -0.0469556041, -0.0418535359, -0.0170986317, -0.0614203028, -0.0640549213, 0.0072887912, 0.0568317175, 0.0653071553, 0.0345459878, 0.0567670912, 0.0135501102, 0.0254761577, 0.0051250607, 0.0494312420, -0.0075967014, 0.0348545164, 0.0563132316, 0.0616904199, -0.0271142945, -0.0165943839, -0.0625666082, 0.0519516468, 0.0170702934, 0.0474743769, -0.0181368813, -0.0530316941, 0.0126031041, 0.0026492476, -0.0102699883, 0.0656403005, -0.0596357957, 0.0618352294, -0.0630566105, -0.0454942659, -0.0152708665, 0.0077082664, 0.0192715600, -0.0366831720, 0.0611904114, 0.0550148785, 0.0031696036, -0.0216100067, -0.0599710941, 0.0272588581, 0.0105280876, -0.0086537451, 0.0456159487, 0.0274768844, 0.0532269329, -0.0595107563, -0.0659714416, 0.0565518886, 0.0147010610, -0.0695293769, -0.0011910051, -0.0107139833, -0.0627991855, -0.0523464680, -0.0345654823, 0.0533485115, 0.0003242716, -0.0678788349, 0.0212529600, 0.0190832689, -0.0189550631, -0.0487392694, 0.0589730889, 0.0425711125, 0.0406784564, -0.0560082942, -0.0249735266, 0.0642804652, -0.0060772896, -0.0717933550, -0.0072096437, -0.0008722395, -0.0486604497, -0.0406419635, -0.0324037559, -0.0708566234, -0.0181754082, 0.0395956263, 0.0261635184, -0.0694205314, -0.0431367680, -0.0189273953, 0.0554633290, -0.0636342838, -0.0404604711, -0.0588332713, -0.0514161177, 0.0514672920, 0.0309316814, 0.0586394370, 0.0044890568, -0.0445294902, 0.0116733238, -0.0444380343, -0.0249063000, 0.0184653178, -0.0198926032, -0.0248001218, -0.0400236212, -0.0371232256, 0.0711235106, -0.0135629289, 0.0252423063, -0.0384227708, 0.0343119130, -0.0430920497, -0.0055505186, -0.0227542147, 0.0547354817, 0.0271564797, 0.0158700794, -0.0434408933, -0.0284549296, 0.0361911580, 0.0278877020, 0.0301046073, 0.0635489672, -0.0625543594, 0.0420286432, -0.0127587877, 0.0179036185, -0.0247909166, 0.0131188855, -0.0327082761, 0.0339124128, -0.0692354590, 0.0517411828, 0.0423064381, -0.0185285844, 0.0271671191, 0.0561203063, 0.0397003666, 0.0407617539, 0.0022932142, 0.0289185196, 0.0453591123, 0.0240386724, -0.0673250109, -0.0592005253, 0.0215278268, -0.0170149244, -0.0149812140, 0.0154873729, 0.0698421001, 0.0306374058, -0.0362704098, 0.0115053058, 0.0721664578, 0.0421196818, -0.0387383737, 0.0570547134, -0.0666188970, -0.0207812600, 0.0690427423, -0.0642524511, -0.0683132485, -0.0360679924, 0.0180462599, 0.0504936352, -0.0374026224, -0.0612445734, 0.0522281229, 0.0361747593, 0.0633475780, -0.0088191330, 0.0120869502, -0.0216322541, -0.0022952482, -0.0374695733, -0.0027729943, -0.0397866704, -0.0188642293, 0.0461207479, 0.0571736246, -0.0065643862, 0.0195619687, -0.0047598034, 0.0658170283, 0.0323517397, 0.0471118540, 0.0226423070, -0.0628380403, -0.0169555768, -0.0532269515, 0.0552727878, 0.0237094611, 0.0721102655, -0.0141444355, 0.0289189517, -0.0639925152, -0.0433338359, 0.0314645097, 0.0655129254, 0.0693769455, -0.0605651103, 0.0568397790, 0.0255049840, 0.0154556781, -0.0700604990, -0.0389451049, -0.0258582085, 0.0706333816, -0.0235821158, -0.0022879466, -0.0485874936, 0.0677704662, 0.0328367576, 0.0690266341, -0.0040482804, 0.0314311832, 0.0494528338, 0.0288185701, 0.0498356223, -0.0557405651, -0.0240640827, -0.0482020155, 0.0275664404, -0.0507484227, 0.0193968192, -0.0655900761, -0.0712391585, -0.0690737665, 0.0335335806, -0.0310917869, 0.0610264540, -0.0224388726, -0.0088444427, -0.0257405527, -0.0645701513, 0.0285619497, -0.0558528863, -0.0429495648, 0.0530223846, -0.0182831362, 0.0046096072, 0.0527465492, -0.0206261799, 0.0667503029, -0.0528686978, -0.0465825871, 0.0026724264, 0.0194776580, -0.0337158293, 0.0377799273, -0.0579350963, 0.0613287538, -0.0534214154, 0.0393758342, 0.0075626820, 0.0354775712, 0.0213362873, -0.0101000071, 0.0490019396, -0.0289600380, -0.0556450151, -0.0720091239, 0.0488132387, -0.0604174621, 0.0610058308, -0.0068415478, 0.0107641593, -0.0284556337, -0.0029592738, 0.0286534876, 0.0193789750, -0.0207367651, 0.0563703477, -0.0302779265, 0.0214053392, -0.0085158497, 0.0198360085, -0.0022592843, -0.0603000112, -0.0632157177, 0.0357294232, -0.0552350730, -0.0248950496, 0.0306038707, 0.0701474696, 0.0060067996, -0.0031854138, 0.0144393891, 0.0695275515, -0.0616094843, 0.0415651053, -0.0551403016, 0.0490675122, -0.0205489583, 0.0227959901, 0.0035680532, 0.0582577288, 0.0162843764, -0.0127991177, 0.0351070017, 0.0303273275, -0.0386694595, 0.0624809861, -0.0576950684, -0.0087517127, 0.0193254650, -0.0308692567, 0.0227439255, 0.0156892762, -0.0393085741, -0.0276546255, 0.0676536262, -0.0622229278, -0.0278727002, 0.0009938926, -0.0344850235, -0.0559122302, -0.0070671067, -0.0222954936, 0.0450930521, -0.0190699324, -0.0508850589, 0.0551286042, -0.0538882241, -0.0060848817, -0.0610869303, -0.0633873865, -0.0609902628, -0.0107532293, 0.0130783767, -0.0483526438, -0.0616086088, 0.0402069688, 0.0263364241, 0.0420649648, 0.0674980432, 0.0211637914, 0.0586903244, 0.0255020708, -0.0478844419, -0.0095461011, -0.0382396616, -0.0050967187, 0.0252961293, 0.0050312281, -0.0358104482, -0.0390544534, 0.0092108697, -0.0417015180, 0.0094683096, 0.0448940545, -0.0130355507, 0.0284542218, -0.0486666560, -0.0130655952, -0.0386102721, 0.0694395453, 0.0462981313, -0.0247508250, 0.0135103092, -0.0308912992, -0.0284072682, -0.0074333474, -0.0622893795, -0.0358797573, 0.0430483446, 0.0310994089, -0.0678518564, -0.0347539261, -0.0201378651, -0.0094078779, -0.0624857396, -0.0544526987, -0.0507971346, 0.0638755113, 0.0595260412, 0.0180757120, -0.0034875274, -0.0388055816, 0.0266242698, -0.0117683187, 0.0494835973, -0.0133422054, -0.0607405119, -0.0331270099, 0.0009919330, 0.0482918546, 0.0156275183, -0.0571508817, -0.0473393761, 0.0560402572, 0.0185174495, 0.0623090416, -0.0420518741, -0.0670319200, 0.0680570900, 0.0553058386, 0.0550359935, -0.0261551738, 0.0707049668, -0.0555570386, 0.0228300244, 0.0476366878, 0.0068638623, 0.0524881110, -0.0141890869, 0.0100932121, 0.0540576577, 0.0438538417, -0.0111367069, 0.0181540400, -0.0719904900, -0.0370002352, 0.0496329889, -0.0637149587, 0.0590852648, 0.0466752425, -0.0017790049, 0.0049807802, -0.0597665086, -0.0645661280, 0.0434653461, -0.0060598999, 0.0403501987, -0.0647697970, 0.0282187909, -0.0413117930, -0.0432919562, 0.0111792609, 0.0519700050, 0.0697826743, 0.0709542483, -0.0388781726, -0.0675063208, -0.0187584981, -0.0429369882, 0.0080405027, 0.0543248802, 0.0417365283, 0.0701247901, 0.0205906853, 0.0196442157, -0.0554020777, 0.0306225047, 0.0435118526, 0.0721398592, -0.0117023177, -0.0043434426, 0.0231379643, -0.0304347612, -0.0405007526, -0.0336812809, 0.0605156273, -0.0562271588, -0.0604063794, 0.0698698759, 0.0347650945, -0.0589293689, 0.0576866716, -0.0319446214, -0.0298262089, -0.0697272494, -0.0587299801, -0.0322038718, 0.0068728626, -0.0408539996, -0.0487945713, 0.0399611294, -0.0225696936, 0.0284434333, 0.0527631342, 0.0013789386, 0.0718827248, 0.0281502903, 0.0601825714, -0.0348655619, -0.0216702633, -0.0266464874, 0.0167203322, 0.0303137675, -0.0177472271, 0.0097276121, 0.0222665370, 0.0223155394, -0.0104779601, -0.0104164146, -0.0713014752, -0.0271463469, 0.0336816609, -0.0475457162, -0.0669357702, 0.0509012491, 0.0551641434, 0.0267788693, -0.0274367593, 0.0489696115, -0.0606845394, 0.0396165177, 0.0640106052, 0.0404318571, 0.0597012937, -0.0567394421, -0.0384730659, -0.0537178814, 0.0526283234, 0.0509942845, 0.0202177390, -0.0243421905, -0.0622160621, -0.0429874174, -0.0452339500, -0.0381776839, 0.0522442460, -0.0043445230, 0.0155975148, 0.0184872523, 0.0139894933, 0.0012635663, -0.0468761101, -0.0015050098, -0.0131759048, -0.0192426518, -0.0258544758, -0.0157067217, -0.0290855058, -0.0550468527, 0.0346852392, -0.0562458970, -0.0197520964, -0.0166186243, -0.0403120518, 0.0096165612, -0.0446920022, -0.0533213466, -0.0523006618, -0.0601616539, 0.0329205319, 0.0608967096, 0.0700193942, -0.0365433358, -0.0178926736, 0.0367428288, -0.0452617556, -0.0151895508, 0.0697581470, 0.0475578085, -0.0640894622, 0.0019157231, -0.0616297387, -0.0304413028, -0.0168713182, 0.0391901582, 0.0029131919, -0.0209629424, 0.0069214031, -0.0167290382, 0.0434486866, -0.0411071926, -0.0406715944, -0.0221366249, -0.0188855156, 0.0513541028, 0.0689989328, -0.0611215457, -0.0448084921, -0.0300115906, -0.0406535454, -0.0567226335, 0.0501322672, -0.0710867941, 0.0299886167, 0.0712739080, 0.0016168505, 0.0453698635, -0.0034910738, 0.0477933660, 0.0682052225, 0.0402402282, 0.0567886829, 0.0421983674, -0.0497926250, -0.0049088746, -0.0612820983, 0.0172122642, -0.0116753019, -0.0591756441, -0.0342623740, 0.0715237260, 0.0574439764, -0.0306100100, -0.0015131831, 0.0622971505, -0.0705985129, 0.0324361920, 0.0295640156, 0.0030455664, 0.0696265399, -0.0659150407, 0.0541895628, -0.0715752319, 0.0383911282, 0.0697839111, -0.0163451992, 0.0006139725, 0.0254282951, 0.0303504691, 0.0321422219, 0.0675430000, -0.0323343799, 0.0603616685, -0.0693653673, 0.0527843162, 0.0249940380, -0.0010880828, 0.0490380600, -0.0211126581, 0.0510303676, -0.0696378797, -0.0293771885, 0.0447598994, -0.0614603087, 0.0498712435, -0.0690085888, -0.0272413790, 0.0159727708, 0.0084532499, -0.0485789776, -0.0533429049, -0.0521485247, 0.0327797160, -0.0575961322, -0.0543708839, 0.0254030824, 0.0168120414, 0.0042300150, 0.0252987817, 0.0349059626, -0.0584427565, -0.0698248744, 0.0268779099, -0.0320769586, -0.0200050473, -0.0432139412, 0.0636041462, -0.0064231083, -0.0070661977, -0.0542408712, 0.0079835355, -0.0231601819, -0.0004570037, 0.0050034449, -0.0459277295, 0.0330774710, -0.0429418050, -0.0238853954, -0.0601908565, -0.0698632672, 0.0464798808, 0.0395712778, 0.0000687391, 0.0683038384, 0.0052521601, -0.0265753195, 0.0576051325, -0.0643113852, -0.0125480108, 0.0439813435, 0.0379763544, 0.0638651550, 0.0302999020, -0.0007985309, -0.0278497264, 0.0532189608, -0.0209729411, -0.0377931036, -0.0023328960, 0.0531609505, -0.0398956724, 0.0262559205, 0.0016114786, 0.0076056868, -0.0175971165, 0.0664172173, -0.0149631314, 0.0031951219, 0.0514244959, -0.0377081409, 0.0480523556, 0.0328201354, -0.0092233419, 0.0161754787, 0.0317955837, -0.0142980367, 0.0624506027, 0.0400757566, -0.0698658451, 0.0598290861, -0.0623964369, -0.0125515871, -0.0510796979, 0.0324089527, -0.0613223128, -0.0087394267, 0.0399500132, 0.0400905013, -0.0685773641, -0.0014725924, 0.0273882002, -0.0429131389, -0.0617184043, 0.0111074895, -0.0046523288, 0.0341318771, -0.0239929371, -0.0647344738, 0.0112115219, 0.0670781881, -0.0474252701, -0.0670175552, -0.0400987267, 0.0419280231, 0.0546326935, 0.0226444378, 0.0430642292, 0.0124268755, 0.0207465887, -0.0274804980, 0.0131985173, 0.0470117852, -0.0407478176, -0.0357110649, 0.0660840273, -0.0382570922, 0.0274068564, -0.0243842266, -0.0681898072, 0.0102822706, 0.0064589456, 0.0153390244, 0.0133003220, 0.0274679363, -0.0014052242, -0.0073320493, 0.0037213266, 0.0312544927, 0.0631524622, -0.0371033698, -0.0312704407, 0.0421591550, -0.0232023373, 0.0556115210, 0.0173258111, -0.0130596235, -0.0001096725, -0.0704390928, -0.0166934058, -0.0676731691, 0.0549442619, -0.0140812546, -0.0617875382, 0.0580264330, -0.0429181457, -0.0181393251, 0.0600799918, -0.0283377543, -0.0660994053, -0.0207115598, -0.0558122620, -0.0436725095, 0.0529089123, -0.0707246885, -0.0251095258, 0.0014566779, -0.0070493668, 0.0281122252, -0.0649951473, -0.0321568288, 0.0315950215, -0.0619387627, -0.0625629276, -0.0149722844, -0.0419324785, -0.0412479937, -0.0719987452, 0.0244949311, 0.0020399019, -0.0672642589, 0.0218048021, 0.0105404705, 0.0535629690, -0.0202116966, 0.0512597635, 0.0198313519, -0.0607410632, -0.0540005863, 0.0710732937, 0.0407852605, 0.0241291896, -0.0591980815, 0.0306729302, 0.0111865550, 0.0170238391, -0.0601794124, 0.0161744580, -0.0033345819, -0.0650051683, 0.0139804259, -0.0177219659, -0.0554257706, -0.0320383795, -0.0693508759, 0.0178742260, -0.0394826680, 0.0585739762, -0.0312299058, -0.0369872265, 0.0205961391, 0.0057427660, -0.0076410770, 0.0200386867, -0.0212577581, 0.0216811225, -0.0039693192, 0.0680807829, 0.0138685629, -0.0430763587, 0.0486562625, 0.0578533113, -0.0106425248, 0.0663653761, -0.0064363554, 0.0129653513, -0.0019258559, 0.0630215108, 0.0671118647, 0.0604797304, -0.0473882928, 0.0661046058, 0.0638874024, 0.0446390063, 0.0243086368, -0.0657602325, -0.0164983869, -0.0566312149, -0.0102369338, 0.0379488915, -0.0365659110, 0.0336069465, 0.0468029529, 0.0524464846, -0.0396819524, -0.0624501891, 0.0393670425, -0.0703176484, 0.0297020823, 0.0316653624, -0.0639325902, -0.0398340411, 0.0468165278, -0.0412546992, -0.0009172186, 0.0563769639, -0.0686930045, 0.0295857638, -0.0021702051, 0.0544470549, -0.0041902363, 0.0498321354, -0.0628734156, 0.0618265122, -0.0481061600, 0.0138551444, 0.0529670864, -0.0413248837, -0.0038119033, -0.0306145176, -0.0297586024, -0.0075803697, 0.0549035817, -0.0269897692, 0.0634881407, 0.0155678466, -0.0284344181, -0.0359164067, 0.0605401397, -0.0644374043, -0.0538112633, -0.0098443367, -0.0550826937, -0.0596912168, 0.0080651119, 0.0100301653, -0.0626755580, 0.0587708354, 0.0447525382, 0.0342107713, -0.0073486567, 0.0673352331, -0.0103449747, -0.0341496542, 0.0577861816, -0.0134282522, 0.0648410022, 0.0216471404, 0.0210820436, 0.0616178662, 0.0066601038, -0.0318390429, -0.0573030896, -0.0706157163, -0.0332560427, -0.0631892234, -0.0143045224, 0.0126505420, 0.0582100004, -0.0105984583, 0.0110378414, -0.0120336935, 0.0490913466, -0.0419216007, 0.0184856579, -0.0488903932, 0.0455068126, -0.0517075062, 0.0019989684, 0.0136496648, 0.0454974994, 0.0630992949, 0.0551373363, -0.0386158451, -0.0648731217, -0.0424934402, 0.0692258030, -0.0473907888, -0.0423673354, -0.0078868866, -0.0492908210, -0.0629811436, -0.0067661479, 0.0458578691, -0.0702655166, -0.0638336316, -0.0242939256, 0.0572745055, 0.0576764196, -0.0439819098, -0.0666370168, -0.0531666949, 0.0561331958, 0.0256336704, -0.0614468008, 0.0033198297, -0.0401273929, -0.0075015351, -0.0574716963, 0.0664958805, -0.0706118792, -0.0362766199, -0.0435344800, -0.0027659908, 0.0100451335, -0.0243148841, 0.0594444573, 0.0676791221, -0.0455466956, -0.0455542319, 0.0357511193, 0.0575914681, 0.0626524836, -0.0556703582, -0.0373346582, -0.0432093628, 0.0354651138, 0.0301235542, 0.0707070976, -0.0213893354, 0.0389700383, -0.0173682235, -0.0014418587, 0.0049148798, -0.0304591283, -0.0635830089, -0.0463494956, 0.0565731078, -0.0541054569, -0.0062294453, 0.0153875127, -0.0036111027, -0.0473050848, 0.0165341273, -0.0248905420, -0.0033834279, -0.0241680779, 0.0025644079, -0.0374490805, -0.0099610835, 0.0397598296, -0.0038456619, -0.0655985102, 0.0447521210, -0.0541447029, 0.0462015718, -0.0358732864, -0.0027321652, -0.0552947298, 0.0394060984, -0.0310452096, -0.0287160352, 0.0640059859, -0.0239881165, -0.0271773562, -0.0049270988, 0.0663485676, 0.0223714933, -0.0080126151, -0.0070253611, 0.0162471756, -0.0221064277, -0.0543699041, -0.0621575080, -0.0313339010, 0.0299412981, 0.0096088499, 0.0522802919, -0.0654543862, 0.0264484212, 0.0229012743, -0.0112824291, 0.0230159238, -0.0481291637, 0.0450587198, -0.0305981897, -0.0693244785, -0.0231972262, 0.0075356215, 0.0650914162, -0.0572710857, 0.0228249356, 0.0085437596, 0.0558563322, -0.0682338551, -0.0086399093, 0.0425447002, -0.0628739819, -0.0095249042, -0.0076132342, 0.0141173378, -0.0674006194, -0.0172266997, -0.0577536076, 0.0522254854, -0.0076712072, 0.0009231046, -0.0702885017, 0.0648334771, 0.0159522742, 0.0706633478, -0.0699578002, -0.0297751203, -0.0313120112, -0.0090314895, -0.0147176832, -0.0449839234, -0.0353057161, 0.0718341470, 0.0301491544, -0.0296797305, -0.0343631841, -0.0294204652, -0.0458943173, -0.0683904141, 0.0537123531, -0.0582778305, -0.0082027614, -0.0138188377, 0.0341281444, -0.0127117299, -0.0606644601, 0.0090260878, -0.0427571796, -0.0109278746, -0.0060757250, 0.0489757061, 0.0055782422, 0.0719812959, -0.0296949409, -0.0665742159, 0.0043325797, -0.0042872801, -0.0699191839, 0.0307496414, -0.0399658754, -0.0325055867, 0.0602578670, 0.0619942546, 0.0282440782, 0.0598326027, 0.0106723458, 0.0697429478, 0.0713030398, 0.0145475790, 0.0064038709, -0.0163811259, -0.0468164571, 0.0067501143, -0.0718927756, 0.0276878700, -0.0221546739, -0.0600036681, -0.0013783872, 0.0189528614, 0.0510654524, 0.0140519515, -0.0619996749, 0.0603620410, -0.0309797749, -0.0388011932, -0.0002627075, -0.0385644324, 0.0195751116, -0.0068911165, -0.0332414657, -0.0631304085, -0.0297901258, 0.0447698087, 0.0569892228, 0.0320738927, -0.0050312281, -0.0597184896, -0.0378122218, -0.0638688728, 0.0606588721, -0.0654549748, -0.0250079222, -0.0112770274, -0.0646173656, 0.0473268852, 0.0267058685, -0.0279511958, -0.0505305380, -0.0057268664, 0.0309711173, 0.0237844661, 0.0436269268, -0.0454324633, -0.0066819265, 0.0582882464, 0.0435188040, 0.0357299894, 0.0485791788, -0.0176150650, 0.0346246511, -0.0328664556, -0.0013760999, 0.0073194876, 0.0022905320, -0.0176935419, 0.0716558546, 0.0201539546, -0.0421645753, 0.0032698140, -0.0633668453, 0.0488551408, 0.0123733655, -0.0345797613, 0.0073181167, 0.0172253251, -0.0499213822, 0.0156218410, -0.0321275108, -0.0369950905, 0.0352254808, 0.0384696051, 0.0035278946, 0.0622715801, -0.0411463194, -0.0555261187, 0.0011115670, -0.0563908964, -0.0492166579, 0.0137050524, -0.0400397070, 0.0433431789, 0.0075264126, 0.0203064531, -0.0488895178, -0.0490195975, 0.0520623922, -0.0405773371, 0.0442105830, 0.0350111797, -0.0590401255, -0.0104652122, 0.0345245153, -0.0331337713, 0.0022792444, -0.0596116371, -0.0643433705, 0.0153123140, -0.0504902080, -0.0041396841, -0.0340383798, -0.0183689632, 0.0372717530, -0.0015164986, 0.0104789585, 0.0619563609, -0.0467225462, 0.0483677983, 0.0313113257, 0.0440902784, -0.0219867751, -0.0105465464, 0.0533010215, 0.0293758512, 0.0241077915, 0.0642729104, 0.0584179312, -0.0693145916, 0.0156975016, 0.0528296009, 0.0150253475, -0.0360350274, -0.0578143783, 0.0655055493, 0.0301175788, -0.0431631133, 0.0350103155, -0.0541364476, 0.0035542697, -0.0133284219, 0.0060024261, 0.0421905369, 0.0253382027, -0.0368882902, 0.0396047831, 0.0385810882, -0.0119421221, -0.0050126463, 0.0680503845, -0.0095074177, -0.0624126978, -0.0018622652, 0.0121605769, 0.0182140321, -0.0167094059, -0.0046716332, -0.0364220999, 0.0095983893, 0.0573139936, -0.0357866697, 0.0262771547, 0.0460855290, 0.0700420439, -0.0188926384, 0.0101898760, 0.0645495057, -0.0696306676, -0.0267640576, -0.0576296672, -0.0153836198, -0.0441627689, -0.0301254094, 0.0464763716, -0.0485147759, 0.0361651555, 0.0402725935, -0.0296080820, -0.0176785886, -0.0397344679, -0.0119959936, 0.0383415222, -0.0372352228, -0.0188884586, 0.0059804916, -0.0150240771, -0.0355209857, 0.0392699838, 0.0458304659, 0.0683393031, -0.0442224741, -0.0717520639, 0.0137667730, -0.0623027645, 0.0456516892, 0.0020010471, 0.0140888914, -0.0123636089, 0.0627496988, -0.0669183582, 0.0288722143, 0.0187442824, 0.0443679020, 0.0249219239, -0.0097282454, 0.0058211386, 0.0093950406, 0.0097913966, -0.0096129626, 0.0102481022, 0.0698514581, -0.0372463539, 0.0203397945, 0.0527652353, 0.0338539258, -0.0683618188, -0.0492287911, -0.0615140572, -0.0511051491, 0.0154920742, 0.0512177125, -0.0088882819, -0.0039633662, -0.0457159206, -0.0080237836, 0.0686298609, 0.0068195611, 0.0496687889, 0.0423700884, 0.0255424753, -0.0522555634, -0.0115306303, -0.0319466516, -0.0471234173, 0.0521690696, 0.0089783370, 0.0074600801, -0.0353065245, -0.0720465481, -0.0375929587, -0.0663778931, -0.0032911524, 0.0646675378, -0.0303891301, 0.0325935110, -0.0019577593, -0.0358967558, 0.0405454561, -0.0393838361, -0.0165491998, -0.0150831789, -0.0461631306, 0.0638877451, 0.0131597817, -0.0336644016, -0.0276591145, 0.0660297573, -0.0152970888, -0.0365924425, -0.0051105022, -0.0702234656, -0.0408640467, -0.0295542441, -0.0493738241, -0.0350958668, 0.0030081049, 0.0058739632, -0.0212499648, -0.0568820313, 0.0344659388, 0.0564030260, -0.0323165543, -0.0512260720, -0.0177500322, 0.0121488050, -0.0580323152, -0.0214765891, 0.0553422570, -0.0189384259, 0.0489486679, -0.0517284311, 0.0664401650, 0.0047752038, 0.0374296382, 0.0589063317, -0.0631012991, 0.0188214406, 0.0282841921, -0.0604932904, -0.0232017674, 0.0639640540, 0.0691186637, 0.0125654936, -0.0585878417, -0.0509814844, 0.0310997516, 0.0143469572, -0.0467123389, 0.0252388641, 0.0577263385, -0.0497297719, -0.0246095099, -0.0307471119, -0.0442324877, -0.0082807615, -0.0483030006, 0.0441849977, 0.0301101282, -0.0710872784, -0.0655217543, 0.0440741032, 0.0490941480, -0.0403707586, 0.0252903476, 0.0698976666, -0.0383986160, -0.0207026973, 0.0123001710, 0.0277711302, 0.0283970982, 0.0379956067, 0.0203272030, 0.0409327000, -0.0577437282, 0.0194264352, 0.0371345654, -0.0403777771, -0.0145054422, 0.0697555244, 0.0276384354, -0.0572521947, -0.0027806163, 0.0118619204, 0.0384139419, -0.0653128996, 0.0638244003, 0.0016070232, 0.0633071065, -0.0537228212, -0.0601248331, -0.0225979276, -0.0605029613, 0.0139793083, 0.0161956102, -0.0095737502, 0.0048912093, 0.0375385359, -0.0323673673, 0.0501523092, 0.0301817954, -0.0699576586, 0.0434295014, 0.0071828738, 0.0720086098, -0.0635088086, -0.0479845628, 0.0302119926, 0.0076242685, 0.0575062484, 0.0275392756, 0.0109270290, 0.0482780710, 0.0409660786, -0.0158886798, 0.0382165909, -0.0400587544, -0.0503725000, -0.0199366510, -0.0329961739, -0.0046875700, 0.0533759445, 0.0410943925, 0.0256805047, 0.0701866746, 0.0395835862, 0.0415800214, -0.0275465176, -0.0385842025, -0.0103411712, -0.0620261207, -0.0521776527, 0.0585342944, -0.0361300409, -0.0005568638, 0.0265717953, 0.0711206198, -0.0538927540, 0.0058758557, 0.0241507217, 0.0387803391, 0.0168450624, 0.0234356374, -0.0459814295, 0.0082088038, -0.0277905203, -0.0428224094, -0.0116218925, 0.0625293106, -0.0575633049, 0.0639535636, 0.0259355158, 0.0716979802, -0.0489933565, 0.0662364215, 0.0132284909, 0.0615306944, 0.0269409195, -0.0412791669, 0.0152094066, -0.0547413900, -0.0484683737, 0.0357304886, -0.0432704799, 0.0449436307, 0.0298128352, 0.0113129020, 0.0666864961, -0.0541882738, 0.0602041930, -0.0694021657, 0.0558072031, -0.0379172303, 0.0612750649, -0.0280804485, 0.0678259730, 0.0615491569, 0.0721374005, 0.0614865869, -0.0183963366, 0.0441792905, 0.0471989214, 0.0690187365, 0.0265119299, 0.0601168275, 0.0712881237, -0.0658707321, 0.0164976642, 0.0580718666, 0.0307245702, -0.0439281762, -0.0632995144, -0.0008442104, 0.0302261561, 0.0159448758, -0.0523845106, -0.0601431951, -0.0494084582, -0.0344471708, 0.0439692289, 0.0529603064, 0.0123039037, -0.0233310424, 0.0490531176, -0.0670216307, 0.0464525223, 0.0486866385, 0.0337250903, -0.0532632396, -0.0711163878, -0.0348475277, 0.0513210148, 0.0071281865, 0.0393247455, 0.0213531330, -0.0207187869, 0.0431741625, 0.0197232217, 0.0530111492, 0.0546145588, 0.0587586164, -0.0113786645, 0.0675236285, -0.0353334881, -0.0392625816, 0.0172395855, -0.0546698421, 0.0028911009, -0.0000146404, 0.0495296940, 0.0550924093, 0.0034866631, -0.0033515468, -0.0709276870, 0.0287375748, 0.0486371294, 0.0634253919, -0.0517209992, -0.0631784126, 0.0662536025, 0.0136898756, 0.0097172484, 0.0071431622, 0.0708863586, -0.0271636918, -0.0465892106, 0.0247056261, 0.0064529777, 0.0352934152, -0.0249984078, 0.0266488791, 0.0693622082, -0.0589905381, -0.0383809954, -0.0140314586, -0.0642384142, 0.0433769897, -0.0296683386, 0.0391032323, -0.0237095132, 0.0141865760, -0.0319009684, 0.0241300687, 0.0222096294, -0.0217521489, 0.0178186148, 0.0137285069, 0.0048296899, 0.0535688251, -0.0234687775, 0.0423649624, -0.0033293664, 0.0629593432, -0.0362872183, -0.0432036519, -0.0461728014, -0.0402777903, -0.0509856120, 0.0574257225, 0.0230965689, -0.0132058263, -0.0585459583, 0.0655869693, 0.0177795589, -0.0614212155, -0.0209347941, -0.0713216290, -0.0007605553, 0.0097246692, 0.0038025603, -0.0258140080, 0.0140876397, 0.0518164262, -0.0388798602, 0.0657188147, -0.0452590585, -0.0630411431, -0.0657173023, 0.0298643708, 0.0420614555, -0.0480425507, 0.0350141227, -0.0371547304, 0.0192989334, -0.0704157948, -0.0710551366, 0.0173024610, 0.0678572208, 0.0703608394, -0.0580720268, 0.0261691138, 0.0544312596, -0.0646598190, -0.0439359881, -0.0300421119, 0.0213737264, -0.0171796232, -0.0304425061, -0.0536186174, -0.0148958713, -0.0718878731, -0.0390611291, 0.0370936468, -0.0610048883, -0.0225629322, -0.0495511889, 0.0462427437, 0.0075808540, -0.0160336941, -0.0069912821, -0.0622398071, -0.0387446880, -0.0483317189, 0.0228098631, 0.0698941201, -0.0394438505, -0.0533037633, 0.0118911192, -0.0397180840, -0.0087745786, 0.0067926496, -0.0379406996, -0.0675295666, 0.0544508100, 0.0647542775, -0.0020085871, 0.0259369314, 0.0155574605, -0.0075846612, -0.0019234642, 0.0650315732, 0.0427235737, -0.0599268228, -0.0136966035, 0.0014977455, 0.0343680233, -0.0615803227, -0.0084809884, -0.0133062601, 0.0095057487, 0.0095996261, 0.0580862761, -0.0489300191, -0.0478791744, 0.0065425560, 0.0145538598, -0.0572761968, -0.0011374280, -0.0393546708, 0.0281733647, -0.0352268592, 0.0217767358, -0.0173491910, -0.0574628524, 0.0220846608, 0.0332450271, -0.0134973712, 0.0258818716, -0.0070592612, -0.0614609085, 0.0348848477, 0.0307848081, 0.0713106692, 0.0372056812, -0.0455710255, 0.0564116389, -0.0281971246, -0.0438623130, 0.0410664156, -0.0699537694, -0.0509182140, -0.0664663464, -0.0140317827, 0.0201232731, -0.0407829732, 0.0408920795, 0.0543096960, 0.0000990555, -0.0001344308, 0.0090269968, 0.0519773364, 0.0487965494, 0.0475503281, 0.0010372847, -0.0465562791, -0.0243022032, 0.0413189307, 0.0522297248, 0.0308735967, -0.0465892293, 0.0168624073, -0.0027497187, -0.0421264470, 0.0705849528, -0.0213375278, 0.0642646402, -0.0156216025, 0.0320751518, -0.0522189662, 0.0055226460, -0.0607701577, 0.0470561385, -0.0659670904, 0.0209010169, -0.0668287501, 0.0572406650, -0.0417180695, -0.0006800145, -0.0146467239, 0.0123048350, -0.0319270715, -0.0369343683, 0.0418776050, -0.0653543994, -0.0416484177, 0.0524655506, -0.0559084974, 0.0480543375, 0.0034661740, -0.0038580820, 0.0329174921, -0.0215754397, -0.0536425374, -0.0605719760, -0.0115940720, -0.0602222048, -0.0122670121, 0.0460209176, 0.0101825818, -0.0660781711, 0.0019902587, -0.0314568914, -0.0240230300, -0.0277317613, -0.0317231230, 0.0070203394, -0.0153823309, 0.0490486398, -0.0678578094, 0.0646355748, -0.0385273024, -0.0124815255, -0.0024283677, 0.0191901848, -0.0474257544, 0.0414988920, -0.0588818453, -0.0293846056, 0.0648162365, 0.0221508741, 0.0215574726, 0.0121689737, 0.0511991829, 0.0230200365, -0.0546586774, 0.0174696669, 0.0665890276, -0.0471205264, -0.0368412472, 0.0581991673, -0.0704523399, 0.0600274801, 0.0183147267, -0.0285454690, 0.0014308617, 0.0509089082, 0.0491488352, -0.0103615783, -0.0457562692, 0.0129237100, 0.0187118351, 0.0198420137, 0.0597660840, 0.0261918753, -0.0194356702, -0.0682934225, -0.0606388748, -0.0370020419, -0.0067368671, 0.0455988795, 0.0374614671, 0.0536564738, 0.0236677378, 0.0579974651, 0.0292610824, -0.0714267418, -0.0261744633, 0.0646567643, 0.0658025444, 0.0527306870, -0.0598689057, -0.0355457440, 0.0419873670, -0.0128260814, -0.0297600478, -0.0493673533, 0.0113796964, -0.0307509489, -0.0516129434, 0.0305242389, -0.0227876119, 0.0677011460, -0.0510783195, 0.0517338365, 0.0334770083, -0.0335747190, -0.0549898483, -0.0666230321, -0.0099508800, 0.0589538068, 0.0570204407, 0.0037385300, 0.0068114698, 0.0351606011, 0.0277723670, -0.0055158809, 0.0035532713, 0.0180661604, 0.0637356788, -0.0708089769, -0.0471773967, -0.0118930489, 0.0302473158, 0.0214434639, 0.0631725341, -0.0377457887, -0.0548138097, 0.0447236449, -0.0122134835, -0.0077015087, -0.0433455519, -0.0439376570, -0.0547929034, 0.0400072187, -0.0667599216, 0.0388925746, 0.0057520047, -0.0287527032, 0.0659636706, -0.0002233014, -0.0264952406, -0.0535979383, -0.0052147061, 0.0370059982, -0.0297467485, -0.0623000301, 0.0360845625, 0.0417724103, 0.0006334335, 0.0485320911, -0.0254336596, -0.0435000658, 0.0357395411, 0.0535023957, 0.0157749131, -0.0163927414, 0.0275564119, 0.0706295222, 0.0208792537, -0.0022345781, 0.0265611410, -0.0153655559, -0.0310844928, 0.0652776659, -0.0007005781, 0.0153126642, -0.0237600468, 0.0013645664, 0.0435327366, -0.0166868828, -0.0498678163, 0.0263728350, 0.0643724650, -0.0428838506, 0.0683613420, 0.0529298037, 0.0513595268, -0.0680016056, 0.0232728794, 0.0632548928, 0.0214833692, -0.0360504612, 0.0245469287, 0.0318375826, 0.0242612138, 0.0580444783, -0.0057146847, -0.0581048913, 0.0180541873, 0.0466115475, 0.0597000420, -0.0454632416, 0.0625126511, 0.0681996793, 0.0664838403, 0.0475456119, -0.0657303110, -0.0568004400, -0.0612497330, 0.0315597877, -0.0017789155, -0.0309494920, -0.0376147255, 0.0474848226, -0.0504821204, -0.0538043827, 0.0261164978, -0.0346137807, -0.0195327848, -0.0346668437, 0.0226540416, 0.0714937896, -0.0104879774, -0.0164711662, -0.0060758665, 0.0328667983, 0.0587687194, -0.0026463047, -0.0586591251, 0.0423974991, 0.0611582696, 0.0166463107, 0.0257161707, -0.0267645232, 0.0493181422, 0.0408133268, 0.0222764462, 0.0452922657, 0.0308359787, 0.0237677395, 0.0108516142, -0.0107224472, 0.0178570747, -0.0161661655, -0.0021187216, -0.0308536701, -0.0507597290, -0.0417080037, -0.0615377016, -0.0447275192, 0.0251830667, -0.0240582153, -0.0375979319, 0.0662142038, -0.0332454070, 0.0311272815, -0.0301861651, -0.0091054812, 0.0334525406, 0.0252397433, 0.0298140049, -0.0503434390, -0.0393375158, 0.0182729810, 0.0097846985, 0.0470404997, -0.0483798981, 0.0134366676, 0.0108566582, -0.0395459533, 0.0592836440, -0.0043452457, 0.0453330949, 0.0707493722, -0.0689746961, -0.0493620187, -0.0417796001, -0.0119059347, 0.0505473018, -0.0633567795, 0.0073688403, -0.0533871576, 0.0304291546, 0.0167967975, -0.0592863858, 0.0357710272, 0.0113530084, -0.0275420956, 0.0461724773, 0.0174578130, 0.0558864772, 0.0641023070, -0.0214139409, -0.0558647923, 0.0597780496, -0.0437840372, -0.0046295300, -0.0155417658, -0.0137105584, -0.0168337040, -0.0575122535, -0.0376315042, 0.0372784138, 0.0641508400, 0.0514583960, 0.0191153437, 0.0501305610, 0.0636513978, 0.0511418656, -0.0052553788, 0.0358733758, 0.0526325777, 0.0193001851, 0.0420607030, 0.0617832541, -0.0214777589, 0.0264278129, 0.0641433150, 0.0344901532, -0.0167647079, 0.0072818622, 0.0613001883, 0.0324805304, 0.0441642478, 0.0709250420, -0.0164198577, 0.0688947886, 0.0219956040, -0.0669930205, 0.0172050893, 0.0524891764, 0.0060191676, -0.0012079254, 0.0500661209, -0.0214612931, -0.0435249619, -0.0516278930, 0.0641296357, -0.0343451537, 0.0120239183, 0.0567132533, -0.0584221929, -0.0663866848, 0.0702549070, -0.0540350154, 0.0277781337, -0.0259572677, -0.0430360436, 0.0188156888, 0.0508540049, 0.0317839980, -0.0715798438, -0.0390746035, -0.0254660957, 0.0043008402, 0.0455056727, -0.0334852636, 0.0716276318, 0.0226683542, 0.0717479140, 0.0099986792, -0.0041927323, -0.0574346520, -0.0476779453, -0.0462764502, -0.0544161722, -0.0136032440, -0.0174213722, -0.0075449273, 0.0062510595, -0.0069721937, 0.0246120542, 0.0039427057, -0.0497061126, -0.0197494291, -0.0053137243, -0.0699078664, 0.0515511557, -0.0708695948, -0.0487408340, -0.0159140080, 0.0099401921, 0.0389339551, 0.0415937677, 0.0694742948, 0.0169880837, 0.0411810055, -0.0027404800, -0.0594632477, 0.0273318887, 0.0020690635, -0.0664969385, 0.0353952572, -0.0217451639, 0.0469442457, -0.0252712145, -0.0220636018, 0.0151876062, -0.0628413558, 0.0640287846, -0.0411664844, -0.0684386268, -0.0522672981, 0.0124264136, 0.0401473865, -0.0228029601, 0.0264597088, -0.0315258354, 0.0124587268, 0.0343909934, -0.0009995699, 0.0712015629, 0.0562308133, 0.0488880202, 0.0182802603, 0.0499149635, -0.0296771489, 0.0344310999, 0.0598857552, -0.0404720008, 0.0616351217, 0.0075887367, -0.0381138846, 0.0069274455, -0.0525600985, -0.0584314689, 0.0026341453, -0.0129155219, 0.0088472813, -0.0176040009, 0.0232714564, -0.0353844538, -0.0014462322, 0.0637987256, -0.0025862232, 0.0085989386, 0.0696316510, -0.0330680273, 0.0664115250, -0.0699162260, -0.0469626412, 0.0369439498, -0.0154804066, -0.0143491924, -0.0520967171, -0.0264070071, 0.0099504516, 0.0078122988, -0.0117831863, 0.0024647266, -0.0437651128, -0.0419606119, -0.0045348629, -0.0327333473, -0.0531393364, 0.0349852294, -0.0525088422, -0.0329888947, -0.0571604855, 0.0080503151, 0.0283193961, -0.0201296061, -0.0115954466, -0.0428979099, 0.0472245440, 0.0224484727, 0.0121733099, 0.0186858848, -0.0199777745, 0.0295748711, -0.0102574639, 0.0035336912, 0.0690033883, 0.0619862378, 0.0720957220, 0.0532682538, -0.0621405244, -0.0384352989, 0.0395815372, -0.0507919900, 0.0643621236, -0.0271512866, -0.0661190227, 0.0489053279, 0.0453186035, 0.0447286367, 0.0353364274, 0.0494265109, -0.0149535649, -0.0180249214, 0.0719855875, 0.0702588856, 0.0089946315, -0.0033834130, -0.0653198361, 0.0673946887, -0.0186208822, 0.0701959729, -0.0346599258, -0.0063549876, -0.0431234166, 0.0077378452, 0.0140111372, -0.0202580690, -0.0413414016, -0.0189756937, 0.0414116755, -0.0366503261, -0.0583723821, -0.0662346110, 0.0450779572, 0.0439259261, 0.0500658154, -0.0616476312, 0.0068408251, -0.0029546991, -0.0425007716, 0.0225844011, 0.0639466047, -0.0400004610, 0.0452027544, -0.0225841478, -0.0476367027, -0.0066213906, -0.0163541995, -0.0655920953, -0.0354616940, 0.0135520175, -0.0129012391, -0.0223533921, -0.0359353311, -0.0607843027, -0.0422255881, -0.0538204163, 0.0681107640, 0.0064134523, 0.0141559318, 0.0463355184, 0.0604306459, 0.0357335210, 0.0538825095, 0.0378497466, 0.0592002720, -0.0601655953, 0.0407355353, 0.0277121961, -0.0175059922, 0.0636991262, 0.0369552597, 0.0367973000, -0.0095057189, -0.0659678951, -0.0416057631, 0.0485575721, -0.0502817333, -0.0507203788, -0.0031957254, -0.0159939639, -0.0599175133, -0.0385001339, -0.0027267262, 0.0064781159, 0.0539648086, -0.0440646745, 0.0614049137, -0.0414576530, -0.0260935239, 0.0165944993, 0.0164132491, 0.0018889830, -0.0224262774, -0.0720100328, -0.0660814047, 0.0229158998, 0.0060692728, -0.0098432526, -0.0430340655, 0.0088502392, -0.0223256387, 0.0467442945, -0.0632085800, 0.0425685644, -0.0321507379, 0.0599582791, -0.0345689058, 0.0077876449, -0.0087665468, -0.0427845046, -0.0076670423, 0.0195196047, 0.0417716354, -0.0396193899, 0.0507732332, 0.0562145412, -0.0509739146, -0.0386507399, 0.0134000331, -0.0366966464, 0.0465671197, -0.0332429633, -0.0062581822, -0.0492172800, -0.0695373565, -0.0405606478, 0.0665738136, 0.0038889498, 0.0182103738, -0.0088509768, 0.0633425415, -0.0117070153, -0.0687494278, -0.0552928671, 0.0147377104, 0.0627163500, -0.0552121364, 0.0114210099, 0.0210330635, 0.0083122328, 0.0454145670, -0.0204816125, -0.0427239686, -0.0280579440, -0.0571257770, -0.0574703030, -0.0253342427, 0.0501821935, -0.0132874027, 0.0718781948, 0.0363784805, 0.0361595005, -0.0166906007, -0.0417737812, 0.0575701743, -0.0604382977, -0.0293988697, -0.0141454861, 0.0064138994, 0.0635800958, -0.0642972738, 0.0426958352, -0.0388346761, -0.0469452962, -0.0264120847, -0.0472169369, -0.0043369532, -0.0093678236, -0.0013980195, 0.0345625207, 0.0512901470, 0.0403721705, -0.0348000899, -0.0475520790, 0.0126594007, 0.0603606701, -0.0686601400, -0.0057895482, -0.0621316992, 0.0701222718, 0.0231563970, 0.0329028815, -0.0175417475, -0.0544982105, -0.0025562644, -0.0382115990, 0.0666092187, 0.0220323205, -0.0036763847, 0.0326080844, 0.0315770283, 0.0503448844, 0.0440609604, -0.0580667257, -0.0554327890, 0.0311575532, 0.0584812015, -0.0006352067, 0.0192190930, -0.0484677553, 0.0174631476, -0.0571244732, 0.0147835836, -0.0511162803, -0.0406994186, -0.0293726809, -0.0568198338, -0.0051016212, -0.0477846414, 0.0485954210, 0.0369339213, -0.0611710511, 0.0108783692, 0.0045180023, -0.0703803152, 0.0598550141, 0.0131080076, 0.0459906533, -0.0039080530, 0.0160840228, -0.0258828998, 0.0587567687, -0.0339894965, -0.0384621918, 0.0162394643, 0.0574487448, -0.0126828887, 0.0560249686, 0.0366068631, -0.0401738472, 0.0402179509, -0.0173531473, 0.0009470880, 0.0521181896, -0.0201939382, -0.0695827007, 0.0050016865, -0.0605826974, 0.0600958765, -0.0478194356, 0.0645156503, 0.0547997206, -0.0008052737, -0.0076359510, -0.0176980346, -0.0035018250, 0.0471357405, 0.0492426604, -0.0010025129, -0.0377026349, -0.0601254366, -0.0349421613, 0.0056559592, 0.0545566231, 0.0355331823, -0.0186427832, -0.0708904192, -0.0479182675, -0.0002720878, 0.0548353195, 0.0321844816, -0.0218123868, 0.0609277934, 0.0678482950, 0.0206124187, -0.0021909550, 0.0623811036, -0.0047228932, 0.0022228211, -0.0364602469, 0.0447443798, 0.0705178827, -0.0517678484, -0.0456669666, -0.0197519921, 0.0412232652, 0.0509022847, -0.0562500060, 0.0282237232, -0.0019175112, -0.0646811724, 0.0462601036, -0.0684409514, 0.0032565668, -0.0376099609, 0.0060486272, 0.0332591385, -0.0131642371, 0.0372862071, 0.0281686112, 0.0045150369, 0.0425442159, -0.0682612136, -0.0597768500, -0.0402917303, 0.0030663684, 0.0220046863, -0.0521337241, -0.0176759250, -0.0440005809, 0.0075416565, 0.0229348466, -0.0661901832, 0.0591759384, 0.0390538871, -0.0442755073, -0.0293922126, 0.0290571675, -0.0383389071, 0.0585125089, -0.0161212757, 0.0639741570, 0.0601074249, -0.0283681750, -0.0297031812, -0.0154914893, 0.0626544803, 0.0700645745, 0.0159123391, -0.0383959636, -0.0049397424, 0.0708076209, -0.0269746631, 0.0013493076, -0.0481221974, -0.0289610699, 0.0133573264, -0.0474561565, -0.0553839952, 0.0144334510, 0.0168953016, -0.0524529070, -0.0392413847, 0.0592596233, 0.0299010351, -0.0428735316, -0.0332902111, 0.0695032775, 0.0212914497, 0.0152509287, 0.0192425326, 0.0506987870, -0.0243218169, -0.0022564605, -0.0150930397, 0.0364934057, 0.0313314870, -0.0252451114, -0.0100740083, -0.0340930298, -0.0633186623, -0.0321337022, 0.0367987826, -0.0529052950, -0.0434795395, -0.0059502572, 0.0478319600, 0.0263847262, 0.0040337294, 0.0081949830, -0.0065359324, 0.0081745610, -0.0290602297, -0.0089741945, -0.0581698976, -0.0284002982, -0.0125403516, -0.0561875477, 0.0703627765, -0.0083012357, -0.0568891913, -0.0536971837, 0.0140853152, 0.0426151603, 0.0272747055, 0.0399217233, -0.0206382610, -0.0703892633, 0.0376837403, -0.0200450197, -0.0508002490, 0.0167487413, 0.0027811676, -0.0222335495, -0.0081227198, 0.0653352886, 0.0486651137, 0.0266483128, 0.0013350099, 0.0683200657, 0.0383461490, 0.0439157039, 0.0441672280, -0.0304249376, -0.0539708510, 0.0457711369, -0.0532263517, -0.0499993935, -0.0558048449, 0.0306886062, 0.0335100070, 0.0042298064, 0.0475106835, -0.0491446704, -0.0281311385, -0.0395030566, 0.0028278828, 0.0196543634, 0.0208533257, 0.0531700104, -0.0492871180, -0.0278108604, 0.0103031620, -0.0034263059, -0.0522674397, -0.0233227126, -0.0295042768, 0.0711646080, 0.0135240927, -0.0608169585, -0.0553466752, 0.0657322407, 0.0012787059, -0.0444789901, -0.0446974933, -0.0446745716, -0.0251565166, -0.0170066468, -0.0511078648, -0.0454903245, 0.0672365576, -0.0366632305, 0.0605087131, -0.0322468355, -0.0187284537, -0.0116340742, 0.0011927262, -0.0438323691, 0.0133918822, -0.0036052540, 0.0112165436, 0.0153416023, -0.0706493706, 0.0278086588, 0.0281936824, 0.0696545243, -0.0303204097, 0.0117105916, 0.0085814893, -0.0634752586, -0.0614845008, -0.0675477535, -0.0197542459, 0.0351734832, -0.0543689206, 0.0145099014, -0.0616574213, 0.0069018230, 0.0612772107, -0.0560890771, 0.0593281537, 0.0602820069, -0.0594988838, 0.0177299827, -0.0318320766, -0.0070188120, -0.0530322939, -0.0206026435, -0.0635069013, 0.0019434616, -0.0699448586, -0.0113379359, 0.0471512228, 0.0041607469, -0.0413042530, 0.0427653193, 0.0181188881, 0.0003554523, -0.0484395325, -0.0606640279, 0.0006265044, 0.0588330030, -0.0341984704, -0.0515985414, 0.0660655200, -0.0420118496, 0.0170734599, 0.0480468646, -0.0031990111, -0.0125802010, -0.0279462561, -0.0276998952, -0.0208103396, -0.0014622658, 0.0089046806, 0.0307980776, -0.0262019597, 0.0274843350, -0.0410308316, -0.0507731512, -0.0715407804, -0.0068317577, -0.0439362973, 0.0601080358, 0.0347930491, -0.0610655583, 0.0047238767, -0.0388769507, -0.0111506097, -0.0399140492, 0.0047575608, -0.0437681749, -0.0467899218, 0.0613073111, 0.0186417028, 0.0245475993, -0.0191904306, 0.0600493997, -0.0162209868, -0.0513918027, 0.0257905871, 0.0003887787, -0.0387624279, -0.0434424430, 0.0124917105, -0.0664117485, 0.0463286713, -0.0187890194, 0.0076600015, 0.0645156801, 0.0533543974, 0.0179122016, 0.0504607707, 0.0200072825, -0.0533395149, -0.0395006314, 0.0217760801, 0.0611590594, -0.0133337565, 0.0372275859, 0.0416371152, -0.0703974739, 0.0209326595, 0.0680095553, -0.0461235382, -0.0100893900, -0.0588872656, -0.0500022173, -0.0308010355, -0.0196025223, -0.0384942293, -0.0116133578, 0.0192890912, 0.0556488335, -0.0530633330, -0.0158766173, -0.0517437793, -0.0240034647, 0.0010559708, 0.0502090380, -0.0126330256, 0.0710337013, -0.0159898028, 0.0486422107, 0.0660066754, -0.0608149469, 0.0712577850, -0.0307695828, 0.0544049889, -0.0177236870, 0.0423530340, 0.0208613053, -0.0211591311, 0.0237909704, 0.0148762539, 0.0201861784, 0.0459309667, 0.0680038482, 0.0199390426, 0.0347731262, -0.0709916428, -0.0539010987, -0.0061419383, 0.0191313624, 0.0110911429, 0.0634663403, 0.0457749218, -0.0544679761, -0.0070489570, 0.0377468392, 0.0562462509, 0.0532259941, 0.0581886619, 0.0129055753, 0.0054792836, 0.0244980827, -0.0010205954, 0.0507268980, 0.0519811958, 0.0213250518, -0.0694290474, 0.0004430786, -0.0614436343, 0.0160415396, 0.0583839267, 0.0305658057, 0.0467197746, -0.0478677489, 0.0525210947, -0.0150832310, 0.0262436494, 0.0525481775, 0.0306998417, 0.0382031500, -0.0313908532, 0.0365618020, -0.0153227784, 0.0187259614, 0.0418085903, -0.0261963494, -0.0506509170, 0.0285844728, 0.0257632807, 0.0236735195, 0.0190061852, 0.0565777719, 0.0004122481, 0.0120171905, -0.0269964635, 0.0528811663, -0.0473175943, -0.0172283687, 0.0291741341, -0.0287705809, 0.0480204746, -0.0229119807, -0.0074414685, -0.0715423822, 0.0499049500, -0.0667428523, -0.0607301891, 0.0686361641, 0.0551945865, -0.0332838967, 0.0101524889, -0.0290928371, -0.0068036094, 0.0348231271, 0.0273122191, 0.0382091179, 0.0243058503, -0.0232921019, 0.0578257143, -0.0370474830, -0.0674941689, -0.0029960796, -0.0522053577, -0.0165720657, 0.0229043365, -0.0076720640, 0.0312925503, 0.0352572799, -0.0405947492, -0.0204184316, -0.0439389832, 0.0609800071, 0.0167782530, 0.0636349618, -0.0578074455, -0.0425639004, -0.0423696227, -0.0376366302, 0.0202656016, -0.0072154924, -0.0441349819, 0.0365182161, 0.0099294409, 0.0620288551, -0.0289831311, 0.0200208947, 0.0277497247, -0.0087103844, -0.0441875979, -0.0686583742, -0.0232682563, 0.0675239265, 0.0533833504, -0.0225763842, -0.0131305158, -0.0588598736, -0.0265832543, 0.0341325030, 0.0508885384, -0.0588226914, 0.0261923596, 0.0683964789, 0.0551509559, -0.0626196191, 0.0557068735, -0.0350956097, -0.0332549214, 0.0144427791, 0.0159009323, 0.0696000457, 0.0134061277, -0.0718101859, -0.0382055230, -0.0219566971, -0.0148275979, 0.0465963706, -0.0226328410, 0.0656105876, 0.0565736294, -0.0111886524, -0.0634684637, 0.0496800467, -0.0173321404, -0.0352278911, -0.0115154050, 0.0671237111, -0.0139702037, 0.0352752432, -0.0343942791, -0.0112006143, -0.0327769965, -0.0600920916, -0.0439355597, 0.0017665774, 0.0129403993, 0.0354717076, -0.0288692750, -0.0223363899, 0.0151169226, -0.0046739727, -0.0268094651, -0.0613476932, -0.0223100819, -0.0039016679, 0.0302463546, 0.0577169657, -0.0234623440, -0.0386262052, -0.0057314411, -0.0312948227, -0.0287023224, -0.0072539002, 0.0664881170, 0.0225086585, 0.0406691507, 0.0437461361, 0.0551641881, -0.0309259705, 0.0238234326, 0.0073990896, 0.0299008861, -0.0281938575, -0.0673848242, -0.0165557899, -0.0003684610, -0.0605672970, -0.0011485070, -0.0083835647, 0.0338343978, -0.0566407144, 0.0539583117, 0.0333845541, -0.0714338943, 0.0665328503, 0.0032904074, -0.0583963990, -0.0544874370, -0.0007123426, 0.0581936538, -0.0268998481, -0.0378955528, 0.0128251538, -0.0324724093, 0.0240174532, -0.0078804046, -0.0231134817, 0.0231254250, -0.0457082465, -0.0599018037, -0.0121865198, 0.0230278671, 0.0582112968, 0.0213033408, -0.0000146627, 0.0463027284, -0.0231875218, -0.0158725567, 0.0405860767, 0.0523969829, 0.0184201524, -0.0473564938, -0.0659194067, -0.0552251115, -0.0183507577, 0.0241689235, 0.0263802186, 0.0251707435, 0.0207674429, 0.0465139151, -0.0005091727, 0.0080637038, 0.0192711949, -0.0031497851, 0.0175639242, 0.0217077211, 0.0457620472, -0.0677246675, 0.0667607933, 0.0640859306, 0.0255226344, 0.0668835193, 0.0550512969, -0.0625255331, -0.0512881018, -0.0214500725, -0.0715918839, 0.0193855315, -0.0558810681, -0.0131759383, -0.0396695621, -0.0663382784, -0.0179450996, 0.0133613870, 0.0058678910, -0.0309816487, -0.0571806170, -0.0462084860, -0.0543224812, -0.0076777786, -0.0297621153, 0.0476505011, -0.0274547227, 0.0217432529, -0.0597299114, -0.0257870443, 0.0566805154, -0.0327277035, 0.0662633926, -0.0666697249, 0.0411832929, 0.0410663411, 0.0545499325, 0.0542827249, -0.0176010430, -0.0549583770, 0.0447872877, 0.0704884082, 0.0146707445, -0.0350492559, 0.0141938180, 0.0018012002, -0.0575063154, -0.0323409699, -0.0388081260, 0.0035921410, -0.0685569942, 0.0460147411, -0.0015963539, 0.0250546932, -0.0295202769, -0.0457529314, -0.0653847232, -0.0201171488, 0.0695091188, 0.0056940019, 0.0542480350, 0.0582516938, 0.0643414557, 0.0642854571, -0.0290532447, -0.0029127970, 0.0090395585, -0.0712540373, 0.0663444549, -0.0618916005, 0.0224664360, -0.0295361429, -0.0322036147, -0.0198809728, -0.0654388890, -0.0703288168, -0.0463055149, 0.0389340594, -0.0665911436, -0.0062680915, 0.0678105950, 0.0699077994, 0.0183274075, -0.0554810539, -0.0225949846, -0.0537757836, -0.0024097711, 0.0202097669, -0.0241701603, -0.0704958439, -0.0494047105, 0.0244492292, 0.0301350802, -0.0444967970, 0.0673321187, -0.0179776698, 0.0551966131, -0.0010510832, -0.0561018623, 0.0702712238, -0.0139455274, 0.0603196621, 0.0010229349, 0.0397158116, -0.0220297240, -0.0580714568, -0.0361068286, 0.0312019959, -0.0716249719, -0.0440617129, 0.0412470102, -0.0179859325, 0.0384330824, 0.0389094725, 0.0602569133, 0.0541900843, 0.0190150440, -0.0265145488, 0.0392524824, 0.0197399333, 0.0069455802, -0.0344621912, 0.0181720853, -0.0435109399, 0.0554255843, -0.0682234317, 0.0212097540, -0.0339915268, -0.0493802056, -0.0009129867, -0.0242115408, 0.0575951040, 0.0192003027, 0.0119439662, 0.0319125131, 0.0278875828, -0.0703428388, 0.0285912380, 0.0130568519, 0.0548702776, 0.0370988250, -0.0463232696, 0.0528480113, 0.0389435887, 0.0370393097, 0.0422809273, -0.0068547800, -0.0505891964, -0.0168458000, -0.0176109187, 0.0458290875, 0.0285248533, 0.0036696196, -0.0640072972, 0.0526750907, -0.0240890682, -0.0380424075, 0.0429307595, -0.0472287536, -0.0276930630, -0.0253029093, 0.0503605753, -0.0087579638, 0.0571011752, 0.0099487081, 0.0549194813, -0.0194820426, 0.0100052655, 0.0511408523, -0.0117126927, -0.0652473643, -0.0632524043, -0.0238683596, 0.0057418346, -0.0349704847, -0.0138245523, 0.0023892969, -0.0405563302, -0.0245575979, 0.0351410508, 0.0282902643, 0.0060541481, 0.0651195645, -0.0139002427, 0.0426238477, 0.0398542881, -0.0561790690, 0.0270570293, -0.0462703630, 0.0221146718, 0.0505139381, -0.0039332435, 0.0643981695, 0.0165244713, 0.0164977014, 0.0030374750, -0.0652850643, 0.0074815378, -0.0281440951, 0.0423533469, 0.0718906373, 0.0129620284, 0.0344079584, 0.0037579760, 0.0586992651, -0.0489599258, -0.0419492200, 0.0530584455, 0.0202298313, -0.0303272232, -0.0638324320, 0.0389926806, 0.0544327050, -0.0209588334, 0.0081836432, -0.0597984791, -0.0669611543, -0.0567226000, 0.0021310970, -0.0229411088, -0.0526874438, 0.0404194370, 0.0516914874, 0.0065748692, 0.0642183721, -0.0546043366, -0.0517057851, 0.0678618401, 0.0701568127, -0.0316196978, 0.0600284487, -0.0435570329, 0.0054178908, -0.0623688549, -0.0076817870, -0.0413686782, 0.0102977082, -0.0052756295, 0.0040979758, -0.0622987747, -0.0649191290, 0.0167915002, 0.0487203076, -0.0391544215, 0.0542805493, -0.0588459186, -0.0203142650, -0.0001365989, 0.0637400299, 0.0651656836, 0.0440560728, -0.0134092569, 0.0652682632, 0.0197474658, 0.0071243718, -0.0683883205, -0.0184912123, -0.0318026356, -0.0497480258, 0.0502182990, -0.0148353241, 0.0261629373, -0.0052284673, 0.0043389350, -0.0164335705, 0.0474516675, 0.0126031190, 0.0541778058, -0.0566098467, 0.0141411796, -0.0209815428, -0.0030480102, -0.0278643034, 0.0164617002, -0.0675444156, -0.0283541679, 0.0520623550, -0.0194015689, 0.0388486162, -0.0568189733, -0.0300611444, -0.0215647556, 0.0548735708, -0.0068149269, 0.0630517900, -0.0689045265, 0.0095525831, 0.0366427004, -0.0668720752, -0.0352260694, -0.0401721783, 0.0302885622, -0.0492231846, 0.0553093702, 0.0446094945, 0.0472051650, 0.0200666115, -0.0496295467, -0.0487644449, -0.0100734234, -0.0652420074, -0.0673486739, -0.0568438172, 0.0098131746, 0.0101770535, -0.0633126572, -0.0601814948, 0.0097488239, 0.0055387691, -0.0694485381, -0.0387235582, 0.0628211945, 0.0337161049, 0.0146875903, -0.0697036237, 0.0463926792, -0.0017671958, -0.0340652391, 0.0372871533, -0.0459229127, -0.0412630960, 0.0057822540, -0.0094443411, 0.0207371637, -0.0655248985, -0.0547995456, -0.0653534234, -0.0717941150, -0.0552015230, 0.0406793579, -0.0433954522, 0.0547220856, -0.0325193144, 0.0203251541, 0.0352270827, -0.0353192762, -0.0641202256, -0.0480605811, 0.0644253045, -0.0609335341, -0.0375095084, -0.0582777113, 0.0406868383, 0.0503750443, 0.0311013758, -0.0664850324, -0.0637017637, 0.0425007045, 0.0626471788, 0.0635156780, 0.0564116985, -0.0478676111, 0.0189768821, 0.0637216717, 0.0695477575, 0.0498817712, -0.0063553452, 0.0709225386, 0.0261143073, -0.0183241926, 0.0268601552, 0.0016932636, 0.0178893134, 0.0642632991, 0.0292670727, -0.0632062405, 0.0497804657, 0.0433023274, -0.0469749272, 0.0003537461, 0.0640266538, -0.0495933779, 0.0646584183, 0.0154643729, -0.0589017347, -0.0380743593, 0.0317348093, 0.0102885365, -0.0432088450, 0.0143559352, 0.0194519162, 0.0445963517, -0.0371908471, 0.0080947429, -0.0658634380, 0.0275248066, 0.0365677848, 0.0692846477, -0.0181667171, -0.0340095758, -0.0008206740, -0.0704221129, -0.0568484142, -0.0058889166, -0.0060098767, -0.0330778360, 0.0341538191, -0.0085200816, -0.0015208200, 0.0625334531, -0.0405457653, 0.0568232089, -0.0240963101, -0.0315392390, -0.0170111395, -0.0291860253, -0.0095676556, 0.0266988128, -0.0330149457, 0.0082858205, 0.0674519986, 0.0205062553, -0.0696648583, 0.0517316684, -0.0544040389, -0.0245704688, 0.0563764125, -0.0299224444, -0.0217513070, -0.0104557835, -0.0146298110, -0.0342164487, -0.0158903487, 0.0410763025, 0.0250691772, -0.0367857218, -0.0188761204, 0.0285187140, 0.0134991780, -0.0029919967, -0.0247558840, 0.0347615480, -0.0465011522, 0.0199328810, 0.0491334349, 0.0422264636, -0.0403514355, 0.0104401410, -0.0429377258, 0.0124105290, 0.0392434150, 0.0184412599, -0.0153854452, -0.0404806025, 0.0082131028, -0.0031835958, 0.0320514068, 0.0074756369, 0.0133101344, 0.0364513546, -0.0054330379, -0.0084980950, 0.0449696779, 0.0074679479, -0.0148398466, -0.0160008483, 0.0534092337, 0.0515214577, 0.0426274464, 0.0566845834, -0.0279573724, -0.0631939322, 0.0026785508, 0.0420727134, 0.0471760184, -0.0262054019, 0.0604723990, 0.0459221900, 0.0097799674, 0.0503845438, 0.0087405667, -0.0348953605, 0.0113013238, 0.0257320702, 0.0038490817, -0.0661350936, -0.0249475613, 0.0327642336, -0.0015135929, -0.0665522218, 0.0138968900, 0.0071599334, -0.0145525001, -0.0040985942, 0.0321634859, -0.0341273881, 0.0041025504, -0.0041568726, 0.0530766547, -0.0029467121, -0.0252604783, -0.0314603820, -0.0642963648, -0.0521550775, 0.0121804625, -0.0554721430, -0.0192174762, -0.0049967840, 0.0165677667, -0.0399918891, 0.0101555809, -0.0016904399, -0.0532371029, -0.0035286173, 0.0194864497, -0.0705749393, -0.0564185306, -0.0205361210, -0.0172604248, 0.0237971991, -0.0442278758, -0.0384493731, 0.0325674936, -0.0013333708, 0.0189279988, 0.0189608932, -0.0509272851, 0.0367861390, 0.0460146889, -0.0266973637, -0.0712380186, 0.0403207541, -0.0605564192, 0.0294526368, 0.0335673019, 0.0151315108, 0.0217802450, -0.0051619112, -0.0081956014, 0.0373336598, 0.0235872790, -0.0360327363, 0.0574410111, 0.0389021114, 0.0563975573, 0.0401261374, -0.0688299164, -0.0505855978, 0.0380250290, -0.0148120411, 0.0601495057, -0.0175532922, 0.0122819096, 0.0099812299, -0.0630036518, -0.0088313594, -0.0055781677, -0.0281696133, -0.0541631356, 0.0358493701, -0.0618079081, 0.0012574047, -0.0571542718, -0.0362610333, -0.0594311059, 0.0534345955, -0.0138800927, -0.0324460492, -0.0229132511, -0.0605184995, -0.0270245112, 0.0492696539, 0.0090997145, 0.0386030972, -0.0342917256, -0.0059384182, -0.0107040554, -0.0520939827, -0.0174379088, -0.0614636093, -0.0038378686, 0.0074286610, -0.0194042362, -0.0563062392, -0.0019501746, 0.0003108829, -0.0626372769, 0.0052245259, 0.0302908346, 0.0241211951, 0.0095954463, 0.0684626848, 0.0036929399, 0.0141712576, -0.0711422339, 0.0016915798, -0.0014103875, 0.0049098730, -0.0215223245, -0.0225750431, 0.0335039347, 0.0669742674, 0.0364604220, -0.0316435955, -0.0292027183, 0.0673900694, -0.0343201198, 0.0336862355, -0.0344583876, 0.0465007350, 0.0240644440, -0.0324987210, 0.0619449914, -0.0580469742, -0.0605662130, -0.0531713590, 0.0552139431, 0.0365236849, -0.0448016599, 0.0654771775, 0.0353584886, -0.0313265696, 0.0058331713, -0.0095938817, 0.0341557264, 0.0464770943, 0.0319377035, 0.0621569008, -0.0324241631, -0.0535387322, 0.0563027263, -0.0158689097, 0.0638155341, 0.0715240091, -0.0339406133, -0.0159499869, -0.0255707093, -0.0692314282, -0.0294350535, 0.0692785382, -0.0518422350, 0.0082876086, 0.0655081272, -0.0308661275, -0.0614034757, -0.0348452032, -0.0535385422, -0.0052698329, -0.0090334713, 0.0143720582, -0.0302688926, -0.0665772408, 0.0241974145, 0.0383180007, -0.0065398514, -0.0612560846, -0.0369270220, -0.0085578859, 0.0145675242, -0.0317772031, -0.0183013752};
# 23 "firmware/parameters.h" 2
# 1 "firmware/weights/b11.h" 1
# 12 "firmware/weights/b11.h"
model_default_t b11[120] = {};
# 24 "firmware/parameters.h" 2
# 1 "firmware/weights/w14.h" 1
# 12 "firmware/weights/w14.h"
model_default_t w14[10080] = {0.1097553521, 0.0791229159, -0.0421740264, 0.1043406278, -0.0791502446, 0.0157035589, -0.1007861048, -0.1115490645, 0.0636989176, 0.0668028742, -0.1372733563, -0.0227517039, -0.0896882191, -0.0988200456, -0.0732036456, -0.0797878951, -0.1557234526, 0.0133294612, 0.1355784386, -0.1135270745, 0.0407515913, -0.0585997924, 0.0846847296, -0.1350471377, 0.1420953125, -0.1395935118, -0.1554853320, -0.1553354859, 0.0973239988, -0.0872477293, 0.0822275877, 0.0834452063, 0.1283559054, 0.0829316974, 0.1490577608, 0.1486038417, 0.1515165418, -0.0986015499, -0.0968322307, -0.0797564164, 0.1461074799, 0.1466019601, -0.1078718752, -0.0244581103, 0.1004069597, 0.0753416866, -0.0771565437, 0.0903343409, 0.0108772516, -0.0039857030, 0.1119123548, 0.0458276868, -0.1481863409, 0.0047276616, 0.0148379207, -0.0609312207, -0.0818444267, 0.1010638624, 0.1287365407, 0.1382874697, -0.0572906062, -0.0638595819, 0.0841861814, 0.0291558355, -0.0727593079, -0.0399760529, 0.1307194382, 0.0982413441, 0.1243734807, -0.0643508881, 0.0722817928, -0.1093653291, -0.1291645467, -0.0173126310, 0.1157430857, -0.1473315507, -0.1421037614, -0.1254365146, -0.0600698367, 0.1565764695, 0.0624680966, -0.0688363761, 0.0804267079, 0.0780502707, -0.1326718330, 0.0375843495, -0.0351381302, 0.0309672207, -0.0154768825, -0.1488055140, 0.1374201030, -0.0412878022, -0.1416159719, 0.0273789763, 0.0088223368, 0.0464513451, -0.1241054684, 0.1257765442, -0.0578698218, -0.1300441772, 0.1129464954, -0.1473896056, 0.0231365561, -0.0993861854, -0.0125818849, 0.0712833852, -0.1035492867, -0.1552584618, 0.1079209000, -0.0844177976, 0.0473033041, -0.0256345272, 0.0107553005, 0.0310209095, -0.0504525378, -0.0951496884, -0.0955184400, -0.0053026825, -0.0260490179, -0.1511224359, -0.0370480269, -0.0184787512, -0.1171768159, 0.0607623011, 0.1120356172, 0.0933613330, -0.0818216950, 0.0188627392, -0.1570448279, 0.0671770871, -0.0811863467, 0.1424078792, 0.1158437580, 0.1345155388, -0.0355595499, 0.0008870959, -0.0828048810, -0.0264642537, -0.1085217446, -0.1166251153, 0.1521116346, 0.1399811953, 0.0112243742, -0.1025090665, -0.0048959404, 0.0287263095, -0.1488517672, 0.1282067150, -0.0864889249, -0.1177446544, -0.0296895206, -0.1489511728, -0.1158681139, 0.0204553008, -0.0058685690, -0.1463451982, 0.0196641833, 0.1538781673, -0.0214491487, 0.0997330099, -0.1217676252, 0.0860715359, -0.1335917562, 0.0017197132, 0.0467715114, -0.0831913874, 0.0489294231, -0.0295170844, 0.0220734924, 0.0486170650, 0.0973051935, -0.0864798725, -0.0059287697, -0.0744807199, 0.0015556514, 0.0610359758, -0.1462810487, -0.1426789165, -0.1238453910, 0.0862604380, -0.0076019615, 0.1412862688, -0.1153071821, -0.1184396371, 0.0068640411, -0.1140284091, -0.1493945718, -0.0459012687, 0.1542680115, -0.0788421407, -0.0270116180, -0.0050436705, -0.0620191246, -0.0830133855, 0.1062570363, 0.0081599504, -0.0161514729, -0.0475202203, -0.1078106612, 0.1042426080, -0.0443570018, -0.0746546164, 0.0306284875, 0.0980725139, 0.0697346628, 0.0144300312, -0.0672323555, 0.0694038272, -0.0878593326, 0.1452419907, -0.1159117669, -0.0985891074, -0.0798635483, -0.0987478197, -0.0473324507, -0.0888090804, 0.1374912709, -0.1208034456, -0.0611638874, 0.1526261717, -0.1272820681, 0.0156695992, 0.0427988917, 0.1071771532, -0.1473415792, -0.0353928879, 0.0088393688, 0.1558040529, -0.0584792346, -0.0413454771, -0.0887010023, -0.0547982454, 0.0977046341, -0.0081448704, -0.0809550360, 0.1414497346, -0.0379960388, 0.0739974380, -0.0149328709, -0.1441408545, -0.0326090902, -0.1371608675, 0.0960235745, -0.0291948169, -0.0328308344, 0.0652854741, 0.1216457933, -0.1127690971, 0.0049245805, -0.1140467376, -0.1023620442, 0.1149740070, -0.0804499686, 0.1120485216, -0.1153552458, -0.1190773249, 0.0668640584, 0.0552101284, 0.0220917016, 0.0913407505, -0.0184740871, 0.0971599072, -0.0777644515, 0.0684814602, -0.0177436620, 0.1290037483, -0.0790170953, 0.1057481319, -0.1211896911, -0.0225434750, -0.1001325846, -0.0756940022, -0.1189783290, -0.1335795075, 0.0492490232, 0.0886954516, -0.0312956125, -0.1516316831, -0.1410253942, 0.0922799557, 0.0324726999, -0.1004590094, -0.0974400640, 0.1479919702, 0.0697124302, 0.0111245513, -0.1218800843, 0.0635204911, -0.0069785267, 0.0446598232, 0.1044117957, -0.0012961030, 0.1521901637, -0.1085476801, -0.1377911270, 0.0179105401, 0.1397562772, 0.0337028503, -0.0530052483, 0.0473039150, 0.0159648061, -0.1525369138, -0.1067419797, 0.1112132519, 0.0987448245, 0.1104968041, -0.0442356169, -0.1319717169, 0.0124894530, -0.1569670886, 0.0856607556, -0.0550282374, -0.1565727443, -0.0286321044, 0.1051832587, -0.1201382726, 0.0060023069, 0.1513738781, -0.0409364626, 0.0540139228, -0.0677588359, 0.1329021901, 0.0760629773, 0.1105196625, 0.1544850022, -0.0065753907, 0.0691615939, -0.1132849082, -0.0175937414, 0.1429055780, -0.1163129061, 0.1238297373, -0.0851044878, 0.0862063468, 0.1001294106, 0.0797717571, -0.1364892870, 0.0102628618, 0.1298373789, 0.0840972960, -0.0636701509, -0.1349937171, -0.0715031177, 0.1186518818, 0.1233899742, -0.1275209188, 0.1281316131, 0.0359308720, 0.1563053280, -0.1305152029, -0.0526851267, -0.0898790807, 0.0130435675, -0.0543209612, 0.1353099495, 0.1456086785, 0.0648077428, -0.0956407338, 0.0898940414, -0.1518940181, 0.0158796757, 0.0488384515, -0.1150677651, 0.0009050369, 0.0690802336, -0.1147491485, 0.1555000395, 0.0959538966, -0.0405077711, -0.1084285975, -0.0447547883, 0.1306046695, -0.0197385997, 0.0654003471, 0.0497170240, 0.0300193727, -0.0869260207, 0.0249673724, -0.1391704679, -0.1036704779, -0.1179209948, -0.0064088404, -0.0058559328, -0.0259729773, -0.0703337491, 0.1256115586, -0.1035157293, -0.0204128474, -0.0966138095, -0.0012700260, -0.0853698775, -0.0428721085, -0.1304789037, 0.0953225046, -0.1286767423, -0.0870708972, 0.1330329627, -0.1361809224, 0.0712033957, 0.1394291073, -0.0533587411, -0.1482778341, -0.0942502320, 0.1459421068, -0.1358048916, 0.0101593882, -0.1364251673, 0.0766588598, 0.0734145641, -0.0865427181, 0.1530712694, -0.0648942962, 0.0376534462, -0.0240962952, 0.0241139382, 0.1090641469, 0.1028204113, 0.0723681599, -0.1109737307, -0.0575412139, 0.0428749770, -0.0417600721, 0.0392642170, 0.1214323789, -0.0965903997, 0.0582265556, -0.0974469930, 0.0846244097, 0.0741507113, 0.0006064028, 0.1370996386, -0.0991740227, 0.0566465408, 0.0375781655, -0.0848858431, -0.0922801718, -0.1351490319, 0.0413813740, -0.1145592630, -0.1108431816, 0.0926827043, -0.0569453314, -0.1080246270, 0.0619972199, -0.1258143485, 0.1463611871, -0.0509808287, 0.0096812993, -0.0383931771, -0.0213237703, 0.0550588816, -0.0641195402, 0.1549568325, 0.0242921710, 0.0428053141, 0.1335666031, -0.0956912041, -0.0438182727, -0.0814391822, -0.1405955702, 0.0457528979, 0.0657699704, 0.1226543337, 0.0005236864, -0.1102304459, -0.0817195028, -0.0365961120, -0.1426518559, 0.0816367120, 0.1134098619, 0.0769535452, -0.1521503180, -0.1125531346, 0.1181892902, 0.0182383955, 0.0160057396, 0.1441206485, 0.0369097590, -0.0937879086, 0.0459374189, 0.0687095672, 0.0683586448, 0.0936419517, -0.0381292626, 0.1420169622, 0.0220859051, 0.0031652898, -0.1383102536, -0.1216586083, 0.0624032170, -0.0561633781, 0.1324613541, -0.1206917837, -0.0688450113, -0.0638901517, 0.1274336427, -0.0694629401, -0.0703603253, 0.1080305427, -0.0671760365, -0.0965105966, 0.1337912828, -0.0580395758, 0.1078947634, 0.0587023646, -0.0981195569, -0.1338984668, 0.1354106814, -0.0226068795, -0.0555412248, 0.0899858773, -0.1102965698, -0.1173175424, 0.1119069606, -0.0943624154, -0.0757401064, -0.0812743306, 0.0525029749, 0.1480491608, 0.1215893179, 0.0834783018, 0.0715433806, 0.0287515670, -0.0878691375, 0.0184037834, -0.0637326166, 0.0011588186, -0.0772550479, 0.0923489779, 0.0775646567, 0.1071203798, -0.1186497658, 0.1154123098, 0.0316930115, -0.0965305418, -0.0009730756, 0.0490104705, -0.1462142020, -0.0787159726, 0.0092238784, -0.1175154150, 0.1006157249, 0.0625873357, 0.1525516957, -0.1130996272, 0.0060416311, -0.1275954396, 0.1247126907, 0.0495855808, 0.0774739981, -0.1287878752, 0.0954616815, -0.0100046396, -0.1424973309, 0.0915230513, 0.1427869648, 0.0851334035, 0.0832524598, 0.1100168079, -0.0327042788, 0.0888150334, 0.1198148280, 0.1315128356, 0.1358698457, 0.0821471065, 0.0018392503, -0.1252771020, 0.1366056949, -0.1258813441, 0.0438891053, 0.1356293112, 0.1239179224, 0.0781458020, 0.1146942228, -0.0688362271, -0.0669483095, -0.0858485624, 0.0931722373, 0.1140851825, 0.0136467963, -0.0985309035, -0.0137072206, 0.0119074434, -0.1250011921, -0.1396305561, -0.0263404548, 0.1450674683, -0.0451359823, -0.0305354446, -0.0653503612, -0.0715906918, 0.1277014464, 0.0862072855, -0.0914046466, 0.0047289729, 0.0435350835, -0.1185397655, -0.1488060504, 0.0011870563, -0.0444528684, 0.0388938040, -0.0379599631, -0.1301990002, -0.1394079179, 0.1189209074, 0.0912052691, 0.0050058216, 0.0884491801, 0.1341918856, -0.0225119144, -0.0101184398, 0.1222697943, 0.1116873771, 0.0982605368, 0.1506824344, 0.1442036480, 0.0780276954, 0.1206273884, 0.1272735447, 0.0158940405, -0.0377721563, -0.0839401707, -0.0123588741, 0.1493072957, -0.0126584023, 0.0061506182, -0.1309125721, 0.0767838657, 0.1502039880, 0.0128672868, 0.0125833899, 0.1094669551, -0.0401942804, -0.0263519436, 0.0653060228, -0.1309358329, -0.1332865208, -0.0241883844, -0.1343891621, -0.0854879096, 0.0240213573, 0.0013313591, -0.1302744299, -0.1068908125, 0.1073719114, -0.0426382720, 0.0385057032, -0.0254438519, -0.1049530208, 0.1259127706, 0.1201687604, -0.1422930509, 0.0148650557, 0.1135014743, -0.1303530335, -0.0070474744, 0.0745538473, -0.1531282961, -0.0718172118, 0.1404286176, -0.1078654677, 0.0467540175, -0.0372117460, 0.0506343246, -0.0350676030, 0.0930434018, 0.1389333159, -0.1483445615, -0.0286320001, -0.0480586141, -0.0222515762, 0.0108418465, 0.1090546995, -0.1189397648, 0.0900170952, -0.0606086031, 0.1377542466, 0.1512311250, -0.0278962255, -0.1397531927, 0.0718988329, 0.0947832316, -0.1279986799, 0.0824926645, 0.0292973518, 0.0490917116, -0.0262096375, -0.1132497787, 0.1579002589, -0.1369919032, -0.0808819011, 0.0564055145, -0.0542928800, 0.1237098426, -0.1006263494, -0.0695228055, -0.0272974670, 0.0649388880, -0.1090167463, 0.1522838324, 0.0225822926, -0.0478132814, 0.0200064331, -0.0855721235, -0.0114071965, 0.0182929486, 0.1240292042, 0.0981954783, 0.1080302745, 0.1039404720, -0.1434239298, 0.0797652304, -0.0704212114, -0.0927841812, -0.1286703050, 0.1119051129, 0.1334856302, 0.0095751882, 0.1572912782, 0.0911249369, -0.0986157209, -0.0162387043, 0.1537335366, -0.1231996343, -0.0513313040, 0.1009379774, -0.0522072762, 0.0804277658, -0.0389015675, 0.0061112642, 0.0045537949, 0.0014243573, -0.0901500061, -0.1254708618, -0.0162442178, 0.1381943971, -0.0614587143, -0.1042059660, 0.0694357604, -0.1419415921, 0.0700592697, 0.1257156879, 0.0935346335, -0.0227681398, -0.0924867466, 0.1525282711, 0.0794625282, 0.0810516626, 0.0875101089, 0.0946359485, 0.0889929980, -0.0909858719, 0.1514792293, -0.0088063180, 0.0157661438, 0.1390645355, -0.0239111185, 0.0833087116, 0.0762369931, -0.0922520086, -0.0731742382, 0.1517430395, -0.0362545773, 0.1173201650, 0.0218094587, -0.0533219799, 0.0883223265, 0.1061113030, -0.1010156497, 0.1300117522, -0.1333750039, -0.1249354780, 0.0496160686, 0.1564509422, 0.1223914474, -0.0223458260, -0.0617183745, 0.0255082846, 0.0130140483, -0.0670454949, 0.0568042397, 0.0395261347, -0.0119245946, 0.1372907907, -0.0716076940, -0.0698518306, 0.1459035724, 0.1437537819, 0.0346803665, 0.0366216004, -0.1321177185, 0.1218261570, 0.1550983936, 0.0169002265, -0.1177817434, 0.0379900485, -0.1478204429, 0.1458957046, -0.1386080235, -0.0339074656, -0.0785888508, -0.0166168511, 0.1219043285, 0.1083792001, -0.1005860493, 0.0878674686, -0.0152148157, -0.1409906447, -0.0889060721, 0.1195636243, 0.0691168755, -0.0664463341, 0.0483513623, 0.1463331133, -0.0962251574, 0.1527122706, -0.0359038040, 0.0885429382, 0.0049970746, -0.1076738536, 0.0776684731, -0.0179746002, 0.1372183412, 0.1342378110, -0.0909821764, 0.0114067793, 0.0240043104, -0.0854166597, -0.0429350957, 0.0880098194, 0.0096230656, 0.0264386833, 0.1299819797, -0.0161141604, 0.0094069391, 0.1480204612, 0.0770927966, -0.1097543314, 0.0540778935, -0.0049432516, 0.1546774656, 0.1185111851, -0.1391558051, 0.0774426311, 0.0275394469, 0.0507007092, -0.1446875334, 0.0351036042, 0.0432794690, 0.0982801765, 0.0056428313, 0.0344536602, 0.0693138540, -0.0637772530, -0.1482677311, -0.0172426701, -0.1122840047, -0.1136001348, 0.0287687629, 0.0333913118, -0.0555764288, -0.0781499818, -0.0974716097, -0.1173254922, 0.1353249997, -0.1211925596, -0.0433538407, 0.0553462952, -0.0730189309, -0.0763857886, -0.0407974347, 0.0287668705, -0.0201853067, 0.1464598924, 0.0408926606, 0.0657920986, -0.1084353402, 0.0307785124, -0.1067932472, -0.0961900204, 0.0772854686, -0.1572751552, -0.0213483125, 0.0346322656, -0.0364311114, -0.0167398602, 0.1224645525, 0.1339793652, 0.0601760298, -0.0772532746, 0.0621348172, -0.1114536077, 0.1255597025, -0.0117511153, 0.0989345759, -0.1495214254, 0.0045215189, 0.0616856962, -0.1065839157, -0.1368529499, 0.0174936205, -0.1056400537, 0.0687998831, 0.0264030248, -0.0111828595, -0.0082144588, 0.0913986117, -0.0449037254, -0.0421637371, 0.0058738440, 0.1415972561, -0.0427574664, -0.0086947680, 0.0206434429, -0.0004604757, 0.0253867507, 0.0661112070, -0.1531620473, -0.0800297558, -0.0811313093, 0.1035669595, 0.1468466967, 0.1403405815, 0.1443985254, -0.0443692580, 0.0652970225, -0.0890864581, 0.1068034023, -0.0771887749, -0.0972334743, 0.0839472264, -0.1569847316, -0.0265099704, -0.0826732814, 0.1540002674, -0.1394328475, 0.0567808151, -0.0772797763, -0.0830245018, -0.0017104000, -0.0900144875, -0.1043171436, 0.0111542195, -0.0176312029, -0.1130935997, -0.1209385842, 0.0121118426, 0.1229215413, -0.0383823961, 0.1237727851, -0.0804670826, -0.0475293025, 0.0064817518, -0.0589672253, 0.0904365033, -0.0598172620, 0.0954318494, -0.0968808234, 0.1355971545, 0.0756154358, -0.0850172192, -0.1110850126, -0.0279781669, -0.0381233022, 0.1244373173, -0.0060563684, -0.0682669580, -0.0803171247, 0.1019151360, 0.0959533900, -0.1541989744, -0.0038150847, 0.0410849899, -0.0718652382, 0.0683772266, 0.1018055528, -0.0841959119, 0.1521984488, -0.0418986902, 0.0851232708, -0.0669518486, 0.0261146426, -0.0363743752, 0.0581444055, 0.1306623071, 0.0842283368, 0.1202039570, 0.0694204271, 0.1110470444, 0.0641972721, -0.1052886397, 0.0967134088, 0.1162702590, -0.1255913824, 0.1408899575, -0.0349906236, -0.0990056992, 0.0568197966, 0.1339997500, -0.1395117044, 0.0002732724, 0.1053380519, 0.1317326874, 0.0614171326, 0.0235269964, 0.0530937612, -0.0035499930, 0.1110458523, 0.0221217126, -0.1127279699, -0.1419735551, -0.1434886903, 0.0484116822, 0.0017614365, 0.0767533034, 0.0665725023, 0.0386003256, -0.0030824691, -0.0640711039, -0.0617176592, 0.0074868649, 0.0971540958, -0.1488819271, -0.1396589130, 0.0041357279, -0.0548049957, 0.0638406128, -0.1109885424, 0.0920274705, -0.1090509370, -0.1216132939, -0.1209310144, -0.1072536111, 0.0764045268, -0.0273218602, 0.1432003826, 0.1276669055, -0.0382764712, -0.0812171474, 0.0265381336, 0.1414677352, 0.1513084620, -0.0236468613, -0.0904182643, -0.0290585458, 0.1068875939, -0.1444997340, 0.0566606373, 0.0689406842, 0.0173251033, -0.1366778910, 0.1155253202, 0.0114716291, -0.0806342363, 0.1460302025, -0.0303737968, 0.0268753022, -0.0970543772, 0.0169617832, -0.0219997615, -0.0630038157, -0.0928234234, -0.1074034870, 0.1513609737, 0.0149688721, -0.0922612846, -0.0230350047, -0.0422992930, -0.0877611339, 0.0148777664, 0.0427739471, -0.0902527720, -0.0208876133, -0.1168620437, 0.0113219321, 0.0588824153, -0.1012963802, 0.1560704559, 0.0089485496, -0.0544051751, 0.0095495582, -0.0191907883, -0.1253522336, -0.1450250447, 0.0557763726, 0.1079880744, -0.0519519150, 0.1166713685, -0.0512170047, 0.0036475211, -0.1167703569, -0.0057616532, 0.0083801001, -0.0254492462, 0.1192010194, -0.1470873058, 0.1439393908, 0.0487145483, 0.0983460695, -0.0102519244, 0.1397598237, -0.0868449733, -0.0112354457, -0.0895356536, -0.1093541011, -0.1266594231, -0.0728296489, -0.0826355442, 0.0916602761, -0.0999260098, 0.1376519948, 0.1373959333, -0.1217914522, -0.1544184536, 0.0385395885, -0.0719277039, 0.0564611852, 0.0437013358, 0.0884963721, -0.0553508103, -0.1020895317, -0.1508662403, 0.0386235416, -0.0621914789, -0.0232400745, -0.1199472994, 0.1342135519, -0.0972677469, -0.0111550093, -0.0553880557, 0.0841318965, 0.1293406039, -0.1126838624, 0.1408569664, 0.1084222347, 0.0450640917, -0.0858089030, -0.0783941820, 0.0386551023, 0.0453066379, 0.0470388234, -0.0495726839, -0.1409625262, -0.0991277695, -0.1022449583, -0.0869550109, 0.0525581986, -0.0242632180, 0.0105772167, 0.0995361954, -0.0666804686, 0.0669568628, 0.1273807138, 0.1205608100, -0.0467383415, 0.0995232016, 0.1212735027, 0.1297228485, -0.0052216798, -0.0714107230, -0.0229306966, -0.0348140448, 0.1368780583, -0.0424057171, -0.1239197254, 0.1442502886, 0.1495767683, -0.0504053459, 0.1512959450, -0.0249872357, 0.1449495703, -0.0553350598, 0.0866149813, -0.1092454195, -0.1464659125, 0.1196204275, -0.1283752024, -0.0466587245, 0.0138139129, -0.0192126483, -0.0612336621, -0.1013247669, 0.0645778626, -0.0803048685, 0.0186084360, -0.1360233873, 0.0492362827, 0.0023785532, -0.1374579519, 0.1507022828, 0.0662082732, 0.1237332672, -0.0765142217, 0.0045182109, 0.0145548135, 0.1344360560, -0.0896000415, 0.1546510905, 0.1379573792, -0.0822887644, -0.0637142584, -0.0469106585, -0.0242439955, 0.1126991957, -0.1027060747, -0.1372986883, -0.0025609583, -0.0051469207, 0.0898479074, 0.1572851688, 0.0700763911, -0.1061273664, 0.1149304360, -0.1403485835, 0.1274047941, -0.0778625011, 0.1115293354, 0.0138458759, 0.1155687720, 0.1093077213, -0.0896347985, 0.0873159617, -0.0123117864, -0.0856229812, 0.0687629431, 0.1081258208, 0.1049930900, -0.0951153040, 0.1269236654, 0.0097893476, 0.1186992675, -0.0384153053, -0.1196767092, 0.1224754304, 0.0697955042, -0.0841656029, 0.1198485345, 0.0524595827, -0.1090599895, 0.1432645768, -0.0379121229, 0.0278878063, 0.0297181606, -0.1392155886, -0.1356755942, 0.0514253527, 0.0171085000, 0.0883889347, 0.1198727041, 0.1479360908, 0.1079980284, 0.0987757891, 0.1327368468, -0.1515929997, -0.1012376845, 0.0472167134, 0.0295340866, -0.0714466125, 0.0088037103, -0.0143120736, -0.0541233495, -0.1158991754, -0.0802627280, -0.0450537652, 0.0221867412, 0.0740014017, 0.1329521388, 0.1416710466, 0.0611404777, 0.1333811730, -0.0081034154, 0.1303015500, 0.0844312161, 0.1414908618, -0.1378219575, 0.0912037641, 0.1439830214, -0.0605038851, 0.0062188506, 0.1464095265, 0.1254735440, -0.0834565908, 0.0804578066, 0.0614166111, -0.0245593637, 0.0256778449, 0.0459146202, 0.0844104886, -0.0351266339, -0.0393521190, 0.0207417309, 0.1063331515, -0.0686498135, -0.0967350453, -0.0588587001, 0.0018649548, -0.0866308138, -0.0205641389, -0.0955377445, -0.0517954305, -0.0754771307, 0.0961954743, -0.1345874965, -0.0993629619, -0.0224587172, -0.0781811178, 0.0370497555, 0.1477372199, -0.0693217292, -0.1402921081, 0.0871358812, 0.0290210992, -0.1076390222, -0.0538171008, 0.0900645554, -0.1015519351, 0.0293513387, 0.0811745077, -0.0295929313, -0.0374006853, -0.0671186596, -0.0729281530, 0.0843799859, 0.0227782428, 0.0813661665, -0.0007538348, 0.1475440413, -0.1518913805, -0.0485028028, 0.0984587520, 0.1564842612, -0.0108599514, 0.1169051379, -0.0539378077, -0.0324953943, 0.0775717050, 0.1352210492, -0.1156304330, 0.0350508243, 0.0502678305, -0.0771360397, -0.0390900522, 0.1199265271, 0.1311632246, -0.0670947656, 0.1039323360, -0.0924477726, -0.0305451006, 0.0206808448, 0.0353209227, 0.1506645530, 0.0181251913, 0.1271842867, 0.1395529360, -0.1006556749, 0.0926759988, 0.1344731599, -0.0203100145, -0.1017017365, -0.0131889582, 0.0613015890, -0.1304089725, 0.0239957124, -0.0297468603, 0.0521430820, 0.1485301107, -0.1305904090, 0.1393121630, 0.0784221143, -0.1203009412, -0.1531965286, -0.0601398796, 0.0139458477, -0.0395162180, -0.0035444051, 0.0900901407, 0.0402693301, -0.0423367694, -0.1273865253, -0.1423037499, -0.0245667994, -0.0066817254, -0.0574346855, 0.0312545896, -0.1490208805, -0.1299273968, -0.1016624570, 0.0106495619, -0.1190569699, 0.0257295221, -0.0426712930, 0.0163128674, -0.1409204453, -0.0570894480, -0.0287945122, 0.1247915477, 0.0293324888, -0.0571384579, -0.1280210465, -0.0997869447, -0.0151644945, -0.0643626153, 0.0007684529, 0.1340428740, 0.1053685397, 0.1552049369, 0.0866734535, 0.0452512652, -0.0078242570, -0.1449558288, -0.0826643854, -0.0098504573, -0.0207030922, -0.1338741928, -0.0235151947, 0.0373042971, -0.0937648416, -0.0121643841, 0.1463976055, -0.0128536373, 0.1158091277, -0.0483690873, -0.0506208241, 0.1471381932, -0.1111554280, 0.0348383188, 0.0780954361, -0.1528229117, -0.0182336569, -0.0593572035, 0.1291971654, -0.0710543692, 0.0302010626, -0.0874768198, 0.0455710888, 0.0719246119, -0.0289935172, -0.0436745286, -0.0314704925, -0.0161466599, -0.0335647985, -0.0131837279, 0.1187412292, 0.0123692304, -0.1039691195, -0.1043080539, -0.0362381414, -0.0147568285, 0.1182913333, 0.0469354987, -0.0591044426, 0.0039680898, 0.1165639013, -0.0132946968, 0.0696731806, 0.1063236445, 0.1207339913, 0.0910912752, -0.1150552854, -0.0946964920, -0.0747052804, -0.0501362234, 0.0511814207, 0.0631390363, -0.1026099771, -0.0841147453, -0.0155545026, 0.1258928329, -0.0697494820, -0.1515988857, -0.1072251052, -0.1479485780, -0.1499752253, 0.0778331757, 0.0694215149, -0.0807689279, 0.0226768851, 0.0937045962, 0.0247256458, -0.1533372253, 0.0881384760, 0.1454656571, 0.0617034882, -0.1157668233, -0.0849425420, 0.0317704827, -0.1455019116, 0.0055342615, 0.0108109862, -0.0959522277, -0.1147271320, 0.0717156529, -0.0181447566, 0.0445682555, -0.1542661935, -0.1521332860, -0.1341372430, -0.0946421698, 0.0939054936, 0.1475543529, 0.0945776254, 0.0577040315, 0.1563766152, -0.0310903490, 0.0192629397, -0.0869557634, -0.0775294453, -0.0099945664, 0.1157970279, 0.0740883946, -0.0455535129, -0.1257391870, 0.0243189037, -0.1563525945, 0.0546011627, -0.0751972273, -0.1413713843, 0.0677269399, -0.1563291103, 0.0371481925, -0.0369558185, 0.1560477763, -0.0548121184, -0.0903178006, 0.0583467335, 0.0281025767, 0.1246797889, -0.0976601392, 0.0507418662, 0.0336931199, 0.1379291266, 0.1010135263, 0.0119291991, -0.0985064059, 0.1316596717, 0.1263310462, 0.0112885237, 0.0964174122, 0.0319608897, -0.1361930668, -0.0100973248, 0.1369327158, 0.0975777358, -0.0141117573, -0.1482902020, 0.1426293403, -0.0965635180, -0.0860138610, -0.0978315473, 0.0466514081, -0.1416918933, -0.0706810951, -0.1511209905, 0.0488032103, 0.0888500512, -0.0883862302, -0.0147246718, -0.0896146297, 0.1064107567, 0.0190521330, -0.1389582753, -0.1044171154, 0.1075625867, -0.1352819949, -0.1334386319, 0.0916453898, -0.0544430614, 0.0938924104, -0.0038246959, -0.1579148471, -0.1523591280, 0.0030560046, 0.1044592708, 0.1536229998, -0.0073033571, 0.0503210574, -0.0389405414, 0.0708260089, -0.0440135449, 0.1445104033, -0.1462725550, -0.1451148093, 0.0972501785, 0.1337026507, 0.0927802175, -0.0272763222, -0.0929189846, -0.1382936984, -0.0987773389, 0.0948346108, -0.1442311406, -0.0467526689, -0.0977275372, -0.0442912206, -0.0721599981, -0.0652650520, 0.0478722751, -0.1289937049, 0.1298648566, 0.0384460241, 0.1009017974, 0.1452680081, -0.1413945705, -0.1109407023, -0.0790256485, 0.1371958703, -0.0493370816, -0.0953563079, -0.1466145068, -0.0769945234, 0.1444834024, -0.1199083626, -0.1012632847, 0.1522855312, 0.1481664330, 0.0974345058, -0.0982666463, 0.1466650516, -0.0212928206, -0.0629966930, -0.0685615242, -0.0938180313, 0.0938183218, -0.0980372280, -0.0158268660, 0.1507058889, 0.0132244676, 0.0613660216, 0.0720454752, -0.0991915539, -0.0932958499, 0.0112728775, 0.0365425497, 0.1449810416, 0.0131092668, -0.1271090657, -0.1184008121, 0.1247351915, -0.1387271434, 0.1409204453, -0.1079003364, 0.0041510016, 0.0131500512, -0.0892529264, 0.0184455067, -0.0040605962, 0.0760948360, 0.0223311931, 0.1442496926, -0.0190191120, -0.0685987696, -0.1391367316, -0.0566169918, -0.0957479477, 0.0465738326, -0.0145098418, -0.0923295170, -0.0873275772, -0.1557276398, 0.1334578842, -0.0725039095, 0.0749164969, -0.1574967057, -0.1222629324, -0.0405966640, -0.0195249021, 0.0416508317, 0.0551025420, 0.0746810734, -0.0282327384, -0.0608749762, -0.1130078286, -0.0156801939, 0.1500837058, 0.0881706327, -0.0032975376, -0.0571920276, -0.1470440030, 0.1214083284, -0.1151039153, 0.1423717886, 0.0019469559, 0.0441046953, -0.1390651762, 0.0481691808, -0.1062565148, 0.0355805457, 0.1215635985, -0.1164949834, -0.1303452253, 0.0433664322, 0.0367339700, -0.0371612310, 0.0309963375, -0.0375119299, -0.0758153498, 0.1424141675, 0.1268117279, -0.1084558517, -0.0210752338, 0.0438868850, -0.0430369228, 0.0416497290, -0.1188948676, 0.0412240922, 0.0936999768, -0.0156511962, 0.1132285148, 0.0404026359, 0.1335574836, -0.1508386135, 0.0729939044, 0.1214148849, -0.1221626997, 0.0562900454, 0.0506690741, 0.0391750187, -0.1424835622, -0.1059713364, 0.1108454019, -0.1259303540, 0.1226485521, -0.1320309788, -0.0882399231, 0.1546325833, -0.1348804832, 0.1491488963, -0.0590180084, 0.1239233762, 0.0114552975, -0.1459030211, 0.0551148653, 0.0440195054, 0.0598664582, -0.0722463578, -0.1007070988, 0.1377880722, 0.1489059478, -0.1488756686, 0.1141030937, -0.0741004273, 0.1290220171, -0.1545274407, 0.1445856839, -0.1070000529, 0.1261854023, 0.1068877429, -0.0582196116, -0.0049190819, 0.1046797484, -0.0345258862, 0.0921366960, 0.1263379008, -0.0751853138, 0.1375954896, 0.1255038828, -0.0631070659, 0.0316976905, -0.1362972558, 0.0017575622, -0.0684138313, -0.0832117498, -0.1522131562, 0.0690623671, 0.0003249496, 0.0693026483, -0.0990932733, 0.0412598252, 0.1378507167, -0.0884990543, -0.1210594475, 0.1203645021, 0.1477138847, -0.0515846312, -0.0441384688, -0.1070837080, -0.0550081432, 0.0304403007, 0.0370146632, 0.1298900098, 0.0699105561, 0.0569932163, 0.1165456027, 0.0200048536, -0.0374255255, -0.0070279837, 0.1366167814, -0.1409349591, -0.0859734118, 0.0896951556, -0.1111960635, -0.0513585955, -0.0199022442, 0.0111025274, -0.0339068994, 0.0256081074, -0.0537155420, 0.1396983713, -0.1380243152, -0.1410880536, -0.0959089845, -0.1504704207, -0.0106987506, 0.1198989600, -0.0931274891, 0.0597914457, 0.0950726420, 0.1557754129, 0.0217113346, -0.1199478656, 0.0454565883, 0.0079897493, 0.1060420424, 0.0893953890, -0.0042450875, 0.0360559821, 0.0091243982, 0.0139261633, -0.1183146313, -0.0637780800, 0.0498188436, 0.0549353212, -0.0002852976, 0.0899539441, 0.1357540041, -0.0200422853, 0.1206260771, 0.0161179304, 0.1207963675, 0.0272915214, -0.1071692407, -0.1345236003, 0.0254490972, -0.0519278646, 0.0186233968, -0.1099802554, 0.0431924909, -0.1314419508, -0.1123016924, -0.0520181879, 0.0884631723, 0.1221490949, -0.0720164105, 0.1147703975, 0.0442408621, -0.0974892974, -0.0038028657, 0.0301697850, 0.0816494972, 0.0225100368, -0.0306323618, 0.0098970383, 0.0054275841, 0.1412754208, -0.1041384190, 0.1442125291, 0.0507185012, 0.1040792614, 0.0097033232, 0.0620518774, -0.1322671175, 0.1413347572, -0.1331741512, -0.0128009766, 0.0337356776, -0.0581579804, -0.0127241611, 0.0129733384, 0.1332118958, -0.0055489987, 0.0449937880, 0.0490633249, -0.0989235640, -0.0269708633, -0.0652652383, 0.1193682700, -0.0726079494, -0.1455786228, -0.0925200358, -0.1083929688, -0.1114904061, 0.0342518985, 0.0042696297, 0.0765891671, -0.1428052038, 0.0246046484, -0.0150947422, -0.0658872798, -0.1037574112, -0.1449510455, -0.1020253003, -0.0048964620, 0.1237163395, 0.1069046110, -0.0184775889, -0.0012802035, 0.0633515716, 0.0038257837, -0.1045987383, -0.0084967762, 0.0405245423, -0.0229537636, 0.1171136349, 0.1509751529, 0.1039454788, 0.1118890792, -0.0598776564, -0.0856547579, 0.1015491635, 0.1134460717, -0.0690322891, 0.0267591923, 0.1561427265, 0.1232974976, 0.0504739881, 0.0689508319, -0.0316742808, -0.0931871682, 0.0014583915, 0.0785112381, -0.1415926665, -0.1393905431, -0.1095045134, 0.1422583908, -0.1197881103, 0.1443356127, 0.0869181007, 0.0690549463, 0.0564545542, 0.1511644274, 0.0396471024, 0.0966856927, -0.0738065019, 0.0013250560, 0.0873996168, 0.0684811175, -0.1433009207, 0.1496699303, -0.0696640611, 0.0982620269, 0.0909185857, -0.1479583830, -0.0125196874, 0.0610536188, -0.0914768055, -0.0243795067, 0.0128965378, -0.0683357939, 0.0542237759, -0.1475041360, 0.0482074469, -0.1364075989, 0.0243821591, 0.1231031567, 0.1471563727, -0.0289898515, 0.0332597494, 0.0528780222, -0.0807589740, -0.0680910274, 0.0254614204, 0.1210448295, -0.1116893291, -0.0587423220, 0.0237915516, -0.0055629462, -0.0321939290, 0.1315778047, 0.1507495195, -0.0993943214, -0.0030419379, -0.0968807489, -0.0834927037, 0.1064510792, -0.0383800194, 0.1066774875, -0.0451052189, 0.0797151327, 0.0392946750, -0.0937839523, -0.0572745427, 0.1540604383, -0.1066639125, 0.1547115594, -0.1559689045, -0.0469266772, -0.1157496348, -0.1198891699, -0.1420763284, -0.0683683306, 0.0677359253, -0.0628306717, 0.0502279848, 0.0717852116, 0.1419093758, -0.0587466583, -0.0637960583, 0.0031480193, 0.0032625049, -0.0709582791, 0.0876896530, -0.1293668747, -0.1188410372, -0.1414086670, -0.1520551741, 0.0939169973, 0.0934146196, -0.0404540896, 0.0187776238, -0.0564958677, -0.0926450044, 0.1332177967, 0.0920767933, 0.0689375252, 0.1041665822, -0.0463188812, -0.1563629210, 0.0007349104, 0.0345063210, 0.1331255585, 0.0196227580, 0.1397314817, -0.0493239611, 0.0424881279, 0.0727968216, -0.0347282887, -0.0738775209, 0.1093642861, -0.0580233261, 0.0795005262, -0.1424733102, 0.0382812917, 0.0748395175, -0.1011126488, -0.1498037726, -0.0830308348, -0.0546657816, -0.0575731099, 0.0903723091, -0.0448214337, 0.0349951386, 0.0933295339, -0.0076249987, 0.0851960629, -0.0854229555, 0.0515114218, -0.0902432725, -0.0374656767, -0.1211258695, -0.0716063380, 0.0089478344, 0.0342923552, 0.1154022068, -0.1511689126, 0.0711967498, 0.1509574801, 0.0389507562, 0.0809434652, 0.0506088734, 0.1351734847, -0.1279902756, 0.0366383344, -0.0684227645, -0.0481564030, -0.1500998586, 0.1317961961, 0.0410415232, -0.1061818749, -0.0401316285, -0.0107436478, 0.0598398000, 0.1194889396, 0.1197803468, 0.0103385895, 0.1099422127, 0.1015671641, -0.0215172023, 0.0389340222, 0.1168643087, -0.1407340765, -0.0488657877, -0.0699133128, 0.0805559307, 0.1127686054, -0.0976119190, 0.1548764855, -0.0112317950, -0.0346267298, -0.1117360443, 0.0546236336, 0.0026465058, -0.0455161929, -0.1384396702, 0.1082798690, -0.0874836817, -0.1287394464, 0.1256376058, 0.0002809912, 0.1278408021, -0.0887751132, -0.0170035064, 0.1049054712, 0.0575763434, -0.0418667570, -0.0792088583, -0.1550907791, 0.0750373155, -0.0941414386, -0.0482847244, -0.0179790407, -0.0082919002, -0.1437810659, 0.0246074647, 0.1318697482, -0.0603121519, -0.1188042834, -0.0597695783, -0.1305820793, 0.1163548678, 0.0220970511, -0.0780681446, -0.0824039355, 0.0609152764, -0.0755337179, 0.1404529363, 0.0694748908, -0.1478129923, -0.0688280091, -0.0361836627, 0.0872366428, -0.0784112588, -0.0056036711, 0.0792938322, -0.1040457562, -0.0885359272, -0.0636330619, -0.0833877549, 0.0932669193, -0.0644658282, 0.1267132014, 0.0663654357, -0.0835832134, 0.1067384332, 0.0011535734, -0.0714743584, 0.0841137618, -0.0207887292, -0.0040406585, -0.1121321246, 0.1171405166, -0.0852777064, -0.0647236034, 0.1377527863, 0.0038827062, -0.0031274110, -0.0289665908, -0.1398932040, -0.1533184052, -0.1228039265, -0.0745000541, 0.1536311358, -0.0688537210, 0.1174481958, 0.0830853134, -0.0851726085, -0.1138679385, 0.1232045442, -0.0540327281, 0.0294628441, -0.0614898577, 0.0957946926, -0.1017380804, -0.1364915520, 0.0139036626, -0.0475679040, 0.0041934103, 0.0932602137, 0.0691143572, -0.0028009117, 0.0094884783, 0.0420556217, -0.0911783502, 0.0614207536, 0.0434857458, 0.0984828025, -0.0412014797, 0.0217934400, 0.0565421283, 0.1391772479, 0.0083271861, -0.0287887752, -0.0902010873, 0.1243576854, -0.0707799718, 0.0693260282, 0.0428677648, -0.0233029127, 0.0337678045, -0.0133610517, 0.1329274327, 0.1059750170, 0.1433675736, -0.1413428485, 0.1531665176, 0.1371215433, -0.0177058131, -0.1536846459, 0.1372938305, 0.0988547951, 0.0648569763, -0.1167027727, -0.0123940408, -0.1363459975, -0.0692694038, -0.0533415452, 0.0096332431, 0.1087599248, -0.0994043201, -0.0787874833, 0.1384274811, -0.0999765620, -0.1482776105, -0.0649592876, -0.0553952605, 0.0629676282, -0.0918541551, -0.1254748106, -0.0881128088, 0.1099559814, -0.1019128859, 0.0514467359, -0.0109368861, -0.1536683589, 0.0938018709, -0.0278886855, 0.0678414255, 0.0171925575, 0.1397116929, 0.0049200207, -0.1549890041, -0.0564633384, -0.0853215903, 0.0643343031, 0.0180069059, -0.0816865936, 0.0712491870, 0.0841732174, -0.0483411551, 0.1538609117, -0.1557366848, 0.1525058001, 0.1408580095, -0.0744881779, -0.0410689339, 0.0314959288, 0.0333357155, -0.1204118058, -0.0128227770, 0.0747071952, -0.1269486696, -0.1552470475, 0.0218263865, 0.1399293989, 0.0755616426, 0.0518042147, -0.0791823193, 0.1350916475, 0.1262580901, -0.1468982548, 0.0484070182, 0.0617556274, -0.0930941701, -0.0679421201, -0.0836348608, -0.0547332540, -0.0904412195, -0.1501383483, 0.0470519811, -0.1107603982, 0.0475247055, 0.0094990432, -0.1360049844, -0.1472251713, 0.0886190534, 0.0979049355, 0.1051369756, -0.0253008008, -0.0681173354, 0.0574619323, 0.0172699541, 0.1223478764, -0.0511883199, 0.1471559554, -0.1081920862, -0.1106985360, 0.0162421018, -0.0818099380, 0.0057252049, -0.0097324997, -0.0588845983, -0.0133739114, 0.0095431507, -0.0306294262, -0.1547811776, -0.0734866410, -0.0278188586, -0.0999959409, -0.1266419291, -0.0106581599, 0.0670628697, 0.1529278308, 0.0569205284, 0.0701773763, -0.0598198250, -0.0974594802, 0.0633710176, 0.1549185067, 0.1317830831, 0.0324568748, 0.0132942498, -0.1019704491, -0.0222497284, 0.0130670071, 0.1513288170, 0.0595518798, -0.0904709622, -0.0585716292, -0.0718354955, -0.0458854735, 0.0943396538, -0.1574792117, 0.1293860227, -0.1444911361, -0.1465838253, -0.1162678599, -0.0179557502, 0.0935841054, -0.0713553876, -0.0421701074, 0.1130187362, 0.1030201167, 0.0248608291, 0.0111188889, -0.1489215493, 0.1285033673, 0.1058612913, 0.0044060200, 0.0901436359, 0.0956444889, 0.1503282934, 0.1318154186, -0.1501303166, -0.1444902718, 0.0773360282, -0.1225879639, -0.1537550539, 0.0507135987, -0.0040354133, -0.1124369055, 0.0949319452, -0.1004932374, 0.0623952299, -0.1421731710, -0.1403754652, -0.0641383529, -0.1041307300, 0.0768588483, 0.0818863064, 0.0825465471, -0.0064143389, -0.1011225954, -0.0589194670, 0.0085110366, -0.0591859818, -0.0427803546, -0.1063994616, 0.1006751806, -0.0416105315, -0.0644928217, -0.0935553536, -0.0721447319, -0.0585895404, 0.1459983140, -0.0722945035, -0.1059386507, -0.1129096001, 0.1488038152, 0.0317087322, 0.0240449905, 0.0944751650, -0.0332390144, -0.0775004551, 0.0098297894, -0.1226152182, 0.1577051431, 0.0457866341, 0.0703632683, -0.0411607996, 0.0180554241, -0.0403831080, -0.1282189935, 0.1089557856, -0.0612460673, 0.0020163953, 0.1216079742, -0.0257379413, 0.1257080883, -0.1045510471, 0.0730269253, -0.0361166000, -0.1246039346, -0.0189717263, -0.0429478437, 0.0587416887, -0.1058235988, -0.0706456229, -0.0383189172, -0.1539045274, -0.0173400789, 0.0510581881, 0.1011065096, 0.0744661242, -0.0953437164, 0.0057084560, 0.1343909651, 0.0323174000, 0.0703197718, 0.1054654866, 0.0096606910, -0.1168392748, 0.1533480436, -0.1244878620, -0.0072331280, 0.1408499926, -0.0241908431, -0.0716156438, 0.0254757553, 0.1383862942, 0.0873291194, -0.1549952924, 0.0155376196, 0.0951335877, 0.0855813920, 0.1325117797, -0.1554414779, -0.1442911178, -0.1578756720, -0.0168672353, 0.1262446791, -0.0699918717, -0.1075679660, 0.0795500576, -0.0945528597, 0.0816015005, -0.0775703490, 0.0559211373, -0.0031508505, -0.1465822458, 0.1335961074, 0.0635678768, -0.1396582276, -0.0280333310, -0.1450110972, -0.0735369995, 0.1342295855, 0.1085394174, -0.1287300587, 0.1503981203, -0.1532011330, 0.1356375962, 0.0568926632, 0.0998603255, 0.0493474901, 0.0132261366, 0.1561219543, -0.1272984594, -0.1322520375, -0.0538481995, -0.0914276838, -0.1353546381, 0.0441210568, -0.0080223531, -0.0355380997, 0.0330819637, -0.0107394606, -0.1414398402, -0.1282221228, 0.1236526519, 0.0154337585, 0.1248982102, 0.1217477471, -0.0649088472, -0.0187012404, -0.0438644141, 0.1024741679, -0.0600759834, -0.1021104157, 0.1049224883, -0.1541635096, 0.0138251036, 0.0447496921, -0.1349411309, 0.0590096712, 0.1287397891, -0.0038777739, 0.0139738917, 0.0577830821, -0.1188052595, -0.0112054795, -0.0277479142, -0.0286825448, -0.0246111602, -0.1256763935, -0.0354874730, -0.1525225490, 0.0093307197, 0.1395137161, -0.0041497946, -0.1023821384, 0.1360918730, 0.0470050871, -0.0331375003, -0.0449780300, -0.1490546167, 0.1158534437, -0.1512520313, -0.1442500204, -0.1017034352, 0.0017571449, 0.1110077649, 0.1080844849, 0.0652993917, -0.0037842393, -0.0855757445, -0.1336476207, 0.0147384703, -0.1562685221, 0.0047288239, 0.0883087218, -0.0272478610, 0.0360760838, 0.1578183025, 0.0058762133, 0.1114869863, 0.1372075826, 0.0336886644, 0.1565411240, 0.0066407919, 0.0763474107, -0.0194966644, 0.0688818097, 0.0591176003, -0.1396425068, -0.0677348599, 0.0621271282, -0.0539405942, 0.0053224117, -0.1012006998, 0.0229783803, -0.0647497624, 0.1123883277, -0.0929777175, 0.0393138230, -0.0628893301, -0.1207046062, 0.0407011956, 0.0196172893, -0.0220793784, -0.1480102539, -0.0298809111, 0.0451427698, -0.0926606879, -0.0073858798, 0.1060494930, 0.1402142793, 0.0294259042, -0.1043680310, -0.0544205606, 0.1567755193, -0.0352719948, 0.1292870790, 0.0021613389, 0.1077915877, 0.0125715882, 0.0639745146, -0.1018288136, 0.1093658954, 0.0505449325, 0.0385550559, 0.1541448981, -0.0192411542, -0.1179689094, -0.0860389695, -0.0219659507, -0.0689724237, -0.1081590950, 0.0655415654, 0.0165244937, -0.0823798403, 0.0348636210, -0.1001579985, -0.1516253501, 0.0756327063, 0.0861845613, 0.0132141858, -0.0814271197, -0.0317914039, -0.0637895390, -0.0520142615, -0.1163292304, 0.1500746459, -0.0171341002, 0.0073317885, 0.1104210764, -0.1469130367, 0.0207376182, 0.0560735464, -0.0829249844, 0.1172666997, 0.0423454791, -0.0305439234, -0.1397431642, 0.1347543448, -0.1545105875, 0.1195750684, -0.0560687557, -0.0842524171, -0.1198380589, 0.0740629882, 0.0007640421, 0.0882641673, -0.0911559984, -0.1478118896, -0.0290676653, 0.0049682409, -0.0015781522, 0.1310079247, 0.0121260434, 0.0561164021, 0.1440116018, -0.1452479511, -0.0190381855, -0.1206522733, 0.0444876254, -0.0217925757, -0.0105798244, 0.0750171840, 0.0590095967, -0.0583975092, 0.1111864001, -0.0890854001, 0.1175379306, -0.1382204890, 0.0892980844, 0.0848550797, -0.0384496152, 0.0592784137, 0.0273998529, -0.1170346588, -0.1513382494, 0.0887331218, -0.0335345268, 0.0388224721, -0.1570542902, 0.1491982192, 0.0156526268, -0.0480011255, 0.1308962852, -0.0157461911, 0.0234487653, 0.1266635507, -0.0185901225, 0.0452376902, 0.0153554976, 0.1413425058, -0.0932674259, -0.1225036681, 0.1436076611, -0.0292434096, -0.1357794851, -0.0016290098, 0.0639912635, 0.0161111802, -0.0461614206, -0.0862780437, -0.0720130131, 0.0775901377, 0.1574905068, -0.0058271289, 0.0763402879, 0.0419050902, -0.0289692283, -0.0337565988, 0.0501432419, -0.0353660882, 0.1374337226, 0.1226559132, 0.1325637549, -0.1170291901, 0.1032282561, -0.0422252193, 0.0120691955, -0.0256638974, -0.0858869702, 0.0067772567, 0.0903210044, 0.0880815983, 0.0676779747, -0.0274405330, 0.1453960091, 0.0481117666, 0.0411060303, 0.0355704874, 0.0166231096, -0.1452689767, 0.0318929553, -0.1357960701, -0.1086734384, 0.1102531701, -0.1409049928, -0.0739669427, -0.0539198592, 0.0974374563, 0.1193421334, -0.1453903615, -0.1103935689, -0.1031895727, 0.0294755846, -0.0604842007, 0.0942221731, 0.1564648896, 0.1578347832, 0.0942119211, -0.1072217524, -0.0191555321, 0.0987613648, -0.1080676019, -0.0877232105, -0.1278906465, 0.0656472296, -0.0863766968, 0.1281716079, 0.1511049420, -0.0669922978, 0.0730444491, 0.0871064067, 0.1083686501, 0.0863654315, -0.0225481838, -0.0546895638, -0.0647871643, 0.0181149840, 0.1398077756, 0.0268317163, -0.0747244656, -0.1412725747, -0.0027759969, 0.1092745513, -0.0992299616, 0.0593376756, -0.0687119365, 0.0024629086, -0.0735238492, 0.1556018144, -0.0660772026, 0.0373856127, 0.1387354285, -0.0641684383, -0.0568761975, 0.1564611346, -0.1208925620, 0.0659727007, 0.0079449266, -0.0503793359, 0.0451940000, 0.1136680394, -0.1352791637, -0.1243172884, -0.1103364527, -0.0786199570, 0.0817770958, -0.1432285011, 0.0508339554, -0.0759005845, -0.0099218935, -0.0576198101, -0.0495534241, 0.0552580804, -0.0537628159, 0.0442760736, 0.1310441643, 0.1562097222, 0.0826757997, 0.1538615078, 0.0455647856, 0.0178465694, -0.0744367242, 0.0416995734, -0.1067413762, -0.0406538844, -0.0705338866, 0.0802869350, -0.1391092539, 0.1226690561, 0.1465561241, 0.0937663466, -0.0007150024, 0.0001753718, 0.1195202917, -0.1145519540, -0.1001367718, -0.0380178243, 0.0759819746, -0.1277462691, 0.0130074471, -0.0899874195, -0.0523834303, 0.1063331813, -0.0211574882, -0.1138898358, -0.0822975859, -0.0830672160, -0.0163665414, 0.0886135399, -0.0197706819, -0.0025017858, -0.0549033061, -0.0104807168, 0.0718280673, 0.1569638401, -0.1330277622, 0.1154653877, -0.0242132694, 0.0081351101, 0.1142634600, -0.0360170826, 0.1573374420, 0.0094762743, -0.0694518983, 0.0657415390, 0.0048846602, 0.1316984445, -0.0840855315, -0.0117273629, -0.0907429457, -0.1149847507, -0.0432069749, 0.0414683372, 0.0451188684, 0.0220556706, 0.0693964511, -0.1157315001, -0.1223825067, -0.1161086634, 0.0677210987, -0.0135103315, -0.0121064782, -0.1226577759, 0.0633075088, -0.0898342207, -0.1104893908, 0.1458485872, -0.0524005517, -0.1238824874, -0.1248833835, -0.0677929148, 0.1526015848, -0.1124542132, 0.0980359465, -0.0977795273, 0.0768597573, -0.1432852447, -0.0917459950, 0.0668947846, -0.0232076496, -0.0839088857, 0.1526674181, 0.0111410618, 0.0514389277, 0.1165133864, -0.0891607925, -0.0638057515, -0.0545564592, -0.0499481112, 0.1444752067, -0.0509392545, -0.0670907646, 0.0311382264, 0.0364872813, 0.1088271588, -0.0586302131, -0.0160740465, 0.0372664779, 0.0294336677, -0.0362626016, 0.0087055117, 0.0809819549, -0.0945150554, -0.0355540067, -0.1196181327, -0.1547650397, -0.0973009616, 0.1147660762, -0.0692042261, 0.1155866534, -0.1158939376, 0.0473749042, 0.1569085866, 0.0697897375, 0.0285416692, -0.0317173302, 0.1344396025, -0.0616096929, -0.1327684522, -0.0992841721, 0.0794505030, 0.0388514251, 0.0515533090, -0.0210454464, -0.0747019276, 0.1547502726, -0.0358206406, -0.0982729793, 0.0044069588, -0.0558398962, -0.1301595718, -0.1148411632, 0.0380533338, -0.1351054907, 0.0402536541, 0.1434847265, 0.0984421819, -0.0458543003, 0.0580343306, 0.1378984898, 0.1368983835, 0.0533886701, 0.0722932965, -0.1386586875, -0.0539223477, -0.1044339612, 0.0538154393, 0.1237473637, 0.0946946293, 0.0715731233, 0.0019418597, 0.1336982399, -0.0312587470, -0.1254420578, -0.1129293442, 0.0699464828, -0.0429536849, -0.1180627346, 0.1567876786, -0.1369318068, 0.0821459740, 0.0740054250, -0.1359045208, -0.1207349151, 0.1442377418, -0.1330734938, 0.0674630702, 0.0281667411, 0.0711682141, 0.1298359782, -0.0524756387, -0.1136078238, -0.0598008633, 0.1018265933, 0.0909549147, -0.0155677348, -0.0026920736, -0.1240479797, 0.0313930511, -0.1054525822, -0.1053479016, -0.0719634444, 0.0936235636, 0.1580310315, -0.1090907827, 0.1194414049, -0.1524400562, 0.0790423155, -0.1355000734, -0.0091117322, 0.1171063930, -0.1442367136, 0.0858417004, 0.1366643757, -0.0591159090, 0.1413375586, -0.0817703903, 0.0346236080, -0.0672645867, -0.0643308759, -0.0619227737, -0.1140883118, 0.1204644293, -0.0051425546, 0.0792201012, -0.0094999820, -0.0535421371, -0.0218985826, 0.0213401318, 0.1264717728, 0.1506051570, 0.1207982749, 0.1326472908, -0.0714814812, -0.1291289628, 0.1350350827, -0.1137628406, 0.0388859212, 0.1126710325, -0.0688478351, 0.1050591618, 0.1075108498, -0.0333234593, -0.1423414946, 0.1226699799, 0.1036307067, -0.0537588596, -0.0153829008, 0.1204909235, -0.0659292787, 0.1041349620, -0.0623203292, 0.0497213304, -0.0359868854, 0.1362664849, 0.0566082448, 0.0724079311, 0.0780811906, 0.0662923753, -0.0720912367, -0.0680600032, 0.0898247212, -0.1052679792, 0.0547354072, 0.0108489841, -0.0616046041, -0.0604880527, -0.0271719843, -0.0853321850, 0.1343883723, -0.0425359979, -0.0448781699, 0.0995726436, 0.0699330270, 0.0331274271, -0.0995812267, -0.0677793473, 0.0428686440, 0.1123743206, -0.1224334762, 0.0407680720, 0.0674698949, -0.1252353638, 0.0153237283, 0.1464269012, -0.1465703249, -0.0225819200, 0.1088637263, 0.1304614097, 0.0692151189, -0.0251856744, 0.1333785504, -0.0254672766, -0.0491031632, 0.0427814126, -0.0518592149, 0.1015174836, 0.1519877762, -0.0146847963, 0.1527856439, -0.0109177381, 0.0552678406, -0.0554889739, -0.0413848013, -0.0678547025, 0.0414365530, 0.0731728524, -0.1448710561, -0.1114895046, 0.0972827226, 0.0628606826, -0.0534894317, 0.0366195142, -0.0367839560, -0.0430432111, 0.0064017475, -0.1014570445, 0.1375683099, -0.0913539454, -0.0391896814, 0.0729260445, -0.1547592431, -0.0417511389, 0.0446922034, -0.0733064860, 0.0867573619, 0.0946589857, -0.0373216346, 0.0532095730, 0.1432967335, 0.1114260107, 0.0872135460, 0.1278388649, 0.0375987142, 0.0961296707, -0.1269693673, 0.1320033222, 0.1387856156, 0.0397988409, 0.0200808942, 0.0125231147, 0.0248090774, -0.0411664546, 0.0359240025, -0.0129931271, -0.0163540691, -0.0971070826, 0.1152922958, -0.1322849840, -0.1105096340, -0.0374293700, -0.1197213456, 0.0768872052, 0.0227894038, 0.1469449550, 0.0520656109, 0.0223792642, -0.0907805339, -0.0379652381, 0.0959418267, -0.1266429424, 0.0874293149, -0.0988207236, -0.1220761389, 0.0252358466, -0.0431419462, 0.1218416244, -0.1092741489, -0.0330651999, 0.0148499012, 0.0470183492, 0.0886887163, 0.1117210239, 0.0593488067, 0.0945386142, -0.0398867428, -0.0712615177, -0.1526610851, 0.1191381961, -0.1543117017, -0.0645399764, -0.0528178215, -0.1231693998, 0.1031403393, 0.0296289772, -0.0506699011, 0.1008385867, -0.0411723331, 0.0658081174, 0.0438115597, -0.0066737086, 0.0332953334, 0.0760726780, 0.1127859205, -0.0596239120, 0.0505360812, -0.0905086994, 0.0007186234, 0.0867802799, -0.0506319031, -0.0203409642, -0.0987418592, -0.1029291600, 0.1227933615, 0.1113629490, -0.0824780092, 0.0248552859, 0.1455716938, -0.1563699692, -0.0649871454, -0.0660824031, -0.0039837807, 0.0939958543, -0.1101062372, -0.1565547585, -0.1490705609, -0.0909628347, -0.1537955403, -0.1228859946, 0.1481936425, 0.0713694096, -0.1577368379, -0.0685399994, -0.1087501943, -0.1341172606, 0.1255284995, -0.0075038671, -0.1116946861, -0.0814014897, -0.0698540136, -0.0305597931, -0.1455990225, -0.0231307894, -0.0551414788, -0.1063432544, 0.0455325544, -0.0991533250, 0.0539193749, 0.0229873210, 0.0924962610, 0.0636672527, -0.1482390463, -0.1548952907, 0.0695729405, -0.0446759984, -0.0828520060, -0.0634931624, -0.1375450790, 0.0942323655, 0.0431438982, -0.1480374783, -0.0759918466, 0.1108951420, 0.0178951621, -0.1353202164, 0.0583222657, 0.1411655098, -0.0576273128, 0.1136905402, 0.0478433669, -0.0761411339, -0.0678645819, -0.1048187017, -0.0880298764, -0.0293580890, 0.1308604628, 0.0640210360, -0.1049513221, -0.0738460422, 0.1261063963, 0.0997852534, 0.1578665823, -0.0266332775, -0.1253128350, -0.0615430474, -0.0997373760, -0.1036029309, 0.1071610600, 0.1006347686, 0.0864928067, -0.0129034072, -0.0995385945, -0.0582489446, 0.0065980107, -0.1254097521, -0.0297083259, -0.1459228396, 0.1239740998, -0.0500210971, 0.0583389699, 0.0229709148, 0.0483597815, 0.1472132951, -0.0329672545, 0.0862050205, 0.0795349032, -0.1297548115, 0.0394833833, -0.0116518587, 0.0525958240, -0.1407516748, 0.1564790756, -0.0693332255, 0.1577568501, 0.0528099090, 0.1426506191, 0.1106267720, 0.0812722594, -0.0229105204, -0.1477726549, 0.0488886684, -0.1488734782, 0.0714691877, 0.1045284420, 0.1008487195, -0.1108685881, -0.1276292950, -0.1553825587, 0.0549223423, -0.1274085343, -0.1131055057, 0.1216153949, 0.0108347982, -0.0159547031, 0.1415197998, 0.0171744376, 0.0077408701, 0.1390033811, 0.1266141385, -0.0365677252, -0.0651421919, 0.1040468365, 0.0730114579, 0.0911699086, -0.0528088510, -0.1505759656, -0.0628772303, 0.1139623970, 0.0115692168, 0.1362655908, -0.0573075637, 0.0051200390, 0.0499314070, -0.0199636221, 0.1095494181, 0.0590670854, -0.1208221763, 0.0693311542, 0.0481983572, 0.1561097056, -0.1317145079, -0.0761289522, -0.1220431924, 0.1262573451, -0.0932244882, -0.0578544438, 0.0932743996, 0.0499596149, -0.0227124691, 0.0221682638, 0.1494421512, -0.1078349799, -0.0959175378, 0.1234087497, -0.1029541939, -0.1202330440, 0.1546104699, 0.1419282407, -0.0008338988, -0.0038989186, -0.0494392365, 0.0267883390, 0.0878444016, 0.0777269751, -0.0652208701, -0.0335318148, -0.0923284963, -0.0711517036, 0.1448760778, 0.1068646461, 0.0588521808, 0.0730956495, -0.1107471660, -0.1506516337, -0.0888537094, -0.1433431804, -0.1378090382, 0.0328656584, 0.0079814643, -0.0268975794, 0.0866147578, 0.0985021144, 0.1045112461, -0.0714950562, -0.0343363881, 0.1464835852, 0.0846785158, 0.0282923728, -0.0884908736, 0.0313694626, 0.0808089972, 0.1565213352, 0.0398113579, -0.0230930895, 0.1236570030, -0.1321157217, 0.0365150571, 0.1371839195, -0.0582415909, -0.0242107809, -0.0005936623, -0.0746846944, -0.0367716327, -0.1031663567, -0.0123898536, 0.1275440603, -0.0148518234, 0.0653641969, 0.0831716806, 0.0000347942, 0.1401700526, 0.0979551524, -0.0469695777, -0.1543309540, -0.0604938567, 0.0505767465, -0.1350822300, -0.0141007453, -0.1228039637, 0.0621151328, 0.0575315952, -0.0045223236, 0.1295344085, -0.0854104012, 0.0622894466, -0.0888134167, -0.1484731734, -0.0571912304, 0.0809736550, 0.0385589749, 0.1382037252, 0.0228443295, 0.0809430927, -0.0901928693, 0.1249139458, -0.0959461555, 0.0541386157, 0.0461945534, -0.0538767353, 0.0214713216, 0.0208942145, -0.1471472085, 0.0646852255, 0.1217665821, 0.1021359116, 0.0531108081, 0.0155198574, 0.0357202142, -0.0202081949, 0.0742334574, -0.1510365605, -0.0421672836, -0.0221463591, -0.1421280801, -0.1553103328, -0.0904961824, -0.0564478040, 0.1357118636, 0.0269220024, 0.0760591030, -0.1351304501, 0.1101928502, -0.0570671335, 0.0111065209, -0.1358110309, -0.1242527813, -0.0856539309, -0.0720047951, -0.0908285603, -0.0071642548, 0.0240245163, -0.1085977405, -0.0161354542, -0.0578257516, -0.0456160530, 0.1121853143, 0.0625078380, 0.0848832130, -0.0760701448, -0.1555200070, -0.0748190880, -0.0074856579, 0.1448350102, 0.0667601973, 0.0626958311, -0.0659079775, -0.1380890459, -0.0138831586, -0.0360781476, -0.0979835391, 0.0151950270, -0.1374468356, 0.1269193441, -0.0189950168, 0.0038778782, 0.1540466696, -0.0770853758, 0.0382486135, -0.0012476742, -0.0477443337, 0.0013875216, 0.1115746349, 0.1403665394, -0.1254382133, -0.0329843014, -0.0251099318, 0.1360057443, -0.0768096521, 0.0149679035, 0.0388793647, -0.0589299425, 0.0936579257, 0.0841275305, -0.1558248699, -0.1516075134, -0.0543030947, -0.1269202828, 0.0718272477, -0.1132135838, -0.0778124407, 0.1500865072, -0.0746708959, 0.1366395801, 0.1257266849, -0.0193864703, -0.1041412428, -0.0850216672, -0.0576703623, -0.0451612398, 0.0587495267, 0.0482899547, -0.0268742144, 0.0122257918, 0.0036979169, 0.1319231242, -0.1111018583, 0.1320602447, -0.1246816665, -0.0279899687, -0.0810734034, 0.0343239456, 0.0738929063, -0.1120683402, -0.0599808320, 0.0644998252, -0.0563951805, 0.0578002632, -0.1274617612, 0.0396290869, 0.1525113136, -0.1525833160, 0.0696904808, -0.0286391526, 0.1226978749, -0.0685730651, -0.1268055737, 0.0327911377, 0.0541072190, -0.0508899838, -0.0480840206, 0.1070872098, -0.1025438607, -0.0428223461, 0.0681360066, -0.1087866053, -0.1185998917, -0.1252149642, 0.0922710449, -0.1533358991, 0.0662223697, -0.1323460490, 0.1426341087, -0.1241763681, -0.0735361725, -0.0155781358, -0.0041969568, 0.0461659133, -0.0260446817, -0.1543416232, -0.0226043463, -0.0769346952, 0.0089359581, -0.1231139898, 0.0040477812, 0.0218652189, -0.0484997854, -0.0693649650, 0.1072963625, -0.0362972841, 0.0203991681, 0.0953388959, -0.1431450397, 0.0726752430, 0.0847514570, 0.0242681205, -0.0222483426, -0.0102152824, -0.0949712619, -0.1126537025, -0.1364313513, 0.0166461468, 0.1077793390, -0.0281276107, 0.0310730785, -0.1245466769, 0.1083195060, 0.0094718933, 0.0940158516, 0.0751346499, 0.0325305015, 0.1532529742, -0.1209808439, -0.1436551213, 0.0270847082, -0.0544525236, -0.0954759941, -0.0871951431, 0.1475468427, -0.0062077940, 0.0160060823, -0.0358573571, 0.0612675548, 0.0772670358, 0.1415620297, 0.0486419797, 0.1028381139, 0.1197899133, -0.1307414323, -0.0349600837, 0.1133898944, -0.0618441328, 0.0894321799, 0.0665345043, 0.0879931152, 0.0332266837, -0.1576167643, 0.0135505944, 0.1239635795, 0.1486163586, -0.0757327601, 0.0895030499, 0.0122801960, -0.1460044980, 0.1391329914, 0.0535626858, 0.0541359782, -0.0010346323, 0.1130620092, 0.0496124923, -0.0129392147, 0.0146875829, 0.1085641235, 0.1534180790, -0.0963589400, 0.0536559373, -0.1578072160, -0.1039287448, 0.0329258293, 0.0868023038, -0.0053091794, -0.1166232675, -0.1468386203, -0.0988915935, -0.0930589586, 0.1218706220, 0.1540630311, -0.1112542301, 0.0974751562, -0.1442939788, -0.0896118432, 0.1136363596, -0.0935084969, -0.0011198670, 0.1384016424, 0.0235881358, -0.1501789093, -0.0618879348, -0.0621421710, 0.1171555668, 0.0551860034, -0.1495190561, 0.1396563202, -0.0881708264, -0.1199462414, -0.0023634285, -0.0062580556, 0.0731614679, 0.0452352315, -0.0436467826, -0.1003365666, -0.0434868336, 0.0860392004, -0.0553617850, -0.1389010400, -0.0335200876, -0.0685873106, 0.0771884322, 0.0728782862, -0.1382924169, 0.0611072332, -0.1246750653, 0.0541556925, 0.0929042548, 0.0302999169, -0.0433093235, 0.1261130720, 0.0512394756, 0.0898020267, 0.1049327403, 0.1488937289, 0.0060709566, -0.0236219913, 0.1070360988, -0.0945754796, 0.0507860184, -0.0146463811, -0.1178668290, -0.1404269189, 0.1372740418, -0.0189308226, -0.1420338452, -0.1363109052, -0.0655877367, -0.0164307058, 0.1546797603, 0.0525150299, 0.0855650753, 0.1277903467, 0.0084971935, 0.0493504554, -0.1447972059, -0.1538949162, -0.0040415227, -0.1243965253, -0.0888069645, -0.1393037289, 0.0845010728, 0.0241799504, -0.0479116663, -0.1194665432, 0.0634981394, 0.0321936756, 0.1118500084, 0.0275581479, -0.0453748330, -0.0268451124, 0.0816476494, -0.1022934765, 0.0689474344, 0.1534684151, -0.0019158870, 0.0186084360, -0.0252819061, 0.0311581343, 0.0552786589, 0.0912313610, 0.1112307459, 0.0341343284, 0.0026907623, -0.1371714920, -0.1285598874, -0.1127358079, 0.0510770380, 0.0443335176, -0.0560503229, 0.0655837357, 0.1089997441, 0.0975469202, 0.1138401181, -0.0399832129, -0.1083464921, 0.0118563175, -0.0925492868, -0.1327996254, 0.0197774619, -0.1166484132, -0.0655954257, 0.1507578939, -0.1133607551, -0.0356856436, -0.0131117553, -0.1051181704, -0.0537640601, -0.0744780004, 0.0993586630, -0.1319304407, 0.0602712929, -0.0136488378, 0.0158013105, 0.0179511160, -0.0267873853, -0.1397593021, -0.0864880159, -0.0163241625, -0.1138160676, -0.0409457386, 0.1506789476, -0.0941859931, 0.1312187463, -0.1374921799, 0.1262781173, 0.0498515368, 0.0771037340, 0.0171747357, -0.1005880535, 0.0210082829, -0.1334229559, 0.0745589733, -0.0289071053, -0.1321851909, -0.1361289322, -0.0310397893, -0.1194160283, -0.0617489889, -0.0096309781, 0.1097850949, -0.0312413573, 0.0882243514, -0.0923261940, -0.1124447510, -0.0673624501, -0.0401527733, -0.0711471066, -0.0519084111, 0.0676609725, 0.0392914265, 0.1006995291, 0.0322487056, 0.0953698307, 0.1142191142, 0.0778345317, -0.1388186812, 0.0864969939, -0.0493962243, -0.0730689913, 0.1140003353, -0.0140150934, 0.1135036200, 0.1333155781, 0.0032865554, -0.0950336158, 0.1404609829, 0.0050207824, -0.0777730867, 0.0374094248, -0.0838522613, 0.0662405044, 0.0379752666, 0.0039075166, -0.0604559705, -0.0434814468, -0.1288805455, -0.0012185276, 0.0305491239, -0.0696422309, -0.0445192158, -0.0094977915, 0.0557661653, 0.0225089341, 0.0843635052, -0.0788302645, -0.0589507148, 0.0446030498, 0.1562750787, 0.0034484714, 0.0687653571, -0.1055803001, -0.1376528442, 0.0758443773, -0.0010159016, 0.1468346268, -0.1205366254, 0.0794760585, 0.0042031705, -0.1493041813, -0.0547611937, 0.1036410481, 0.0392963290, -0.0551325828, 0.1565841585, 0.1354155093, -0.0755360126, -0.0786577985, 0.0894415677, -0.0205589384, -0.0916970298, -0.0432836115, 0.0416000485, -0.1516602635, -0.0666203052, 0.1314735860, -0.0205711424, 0.1395640522, -0.0376982316, -0.0194515437, 0.0337737203, -0.0805202350, 0.1244185418, -0.0706427172, -0.0954697356, 0.0320223421, -0.0520400107, -0.1021092460, -0.0187370926, -0.1304208487, -0.0757675916, 0.0205117315, 0.1340818256, -0.1398119628, -0.0990403444, 0.0651364326, 0.1011451334, 0.0276895314, -0.0370398834, 0.0067530870, -0.0410600007, 0.0569944978, 0.0447641313, -0.1348294765, -0.0361869112, -0.1481079310, -0.0743070841, -0.1343286633, -0.1199694723, 0.0744418502, -0.1503229886, -0.0558074787, 0.0230945200, -0.0216401219, 0.1065808982, 0.0398748368, -0.0183775425, -0.0469783992, 0.0841156542, -0.0334498957, 0.1078781039, -0.1116351262, -0.0877505392, -0.1520639509, -0.1100952625, 0.0067638010, -0.0036541820, -0.0601568371, -0.0930706039, -0.1395175904, -0.0325045586, 0.0793745816, -0.0881604552, 0.1056353003, -0.1367665082, 0.0093677342, -0.1198602915, -0.1150431484, 0.0601607263, 0.0937344879, 0.1202383488, 0.1238816828, -0.0849798247, 0.0234467685, 0.0517893285, -0.1512456685, -0.0655318350, -0.1324420273, -0.0756570622, -0.1484441906, -0.0819018781, -0.0372158960, 0.0499692559, 0.1562924236, 0.1310006231, -0.0000495762, -0.0530620962, 0.1246957332, -0.0803098828, -0.0163598359, -0.0067745447, 0.0753886551, -0.1302973628, -0.1261271238, -0.0253831595, 0.0007954091, -0.1215551645, 0.1482915431, -0.1071693525, 0.0078962296, -0.0896842182, 0.0255523473, 0.1558726281, -0.0950177088, -0.1008776426, 0.0407154411, -0.0887669325, -0.1135478094, -0.1222282127, -0.1372020692, 0.1166991144, -0.1215232015, -0.1324267238, -0.1498761624, -0.0098766088, 0.0052337795, -0.1314567775, -0.1294921339, 0.0956306010, -0.0419423059, -0.1439918727, -0.1190289184, -0.0611185357, -0.0786885619, -0.0610970110, 0.0258489102, -0.0593676120, -0.0399340913, 0.0476413369, 0.0808636248, -0.1459553838, -0.1172033548, 0.1136111468, 0.1454921812, -0.1310373098, -0.1576776057, -0.0510674194, -0.0273979008, 0.0419180989, 0.0702407211, -0.0514272451, -0.1561695635, -0.0647291094, 0.0960710794, -0.1192294657, -0.0987459719, -0.0700414851, -0.0271495432, -0.0010587722, 0.0798567683, -0.0326305032, 0.0379231274, 0.1450574249, 0.0854801387, -0.0287059546, 0.1273593754, 0.0396445096, -0.0071177334, -0.1111850142, 0.0556413084, -0.0580358803, 0.0399144143, -0.0113862455, -0.0837415829, -0.0757985041, -0.1128133535, -0.0387924686, -0.0665000901, 0.0858661681, -0.0953513682, 0.1153247207, -0.1216547638, -0.1385474056, -0.1020688713, 0.1365308017, 0.0336514264, 0.0129759014, -0.0417378694, 0.1369601339, 0.1338596791, 0.0674873441, -0.0924755931, 0.1087225229, 0.0968277901, 0.0133511722, 0.0342263430, -0.1221242398, 0.1544895023, 0.0002301484, -0.0809746757, 0.0012103021, 0.1205476075, 0.1188076884, -0.1496576965, -0.0908198878, 0.1017732471, -0.0568689927, -0.1322561800, -0.1029399484, -0.0997922197, -0.0595302358, -0.0230073780, -0.0505204722, -0.1472979635, -0.0334736481, -0.0740066320, 0.0979032069, -0.1420981139, 0.0826355815, 0.0477614403, -0.0409561023, -0.1136495173, -0.0477896035, 0.1219688505, 0.0379594713, 0.0697890222, -0.0456709787, -0.0887511000, -0.1087704748, 0.1327512115, 0.1417340785, -0.0265258849, 0.0851077288, -0.0858592317, 0.1515938491, -0.1329820454, 0.1553877741, -0.0599059686, 0.1327455789, 0.0360339284, 0.1038902551, -0.1138089001, -0.1432967782, -0.0271086395, 0.1399888247, -0.0927124098, 0.0309398174, 0.1493136436, 0.0574043691, 0.1366365701, 0.1392474920, -0.0635347068, -0.0149630010, 0.0825895220, -0.0027149916, -0.1251213253, 0.0813171566, 0.0120937377, -0.0320576280, -0.0877314657, -0.1400645673, 0.0115930438, 0.1194815487, 0.0784404427, -0.1408389807, 0.0566844344, 0.0235233754, -0.1297816634, -0.0804795623, -0.0256462544, 0.1015670151, 0.0138686746, -0.0097821504, -0.0118076205, 0.1245835274, 0.1115893275, -0.0816837624, 0.1481564194, -0.0062126666, -0.0965619385, -0.0468417853, -0.0269969106, 0.0602096915, -0.1152814329, -0.1564436704, -0.0311415046, -0.1226106510, 0.0602132678, 0.1464784890, -0.0330010355, 0.0192443579, -0.0397584960, -0.0360452756, -0.1494180262, 0.0027713478, -0.0164938867, -0.0279876292, -0.1339586675, -0.0143675357, 0.0772196949, -0.0719592944, -0.0508920550, 0.1443959624, 0.1550118178, -0.1004870981, -0.0132605135, 0.0731019080, -0.1325129420, 0.0794152915, 0.0266084820, 0.0153643191, -0.0267953873, -0.0752284080, 0.1134597212, 0.0238717347, 0.1161485761, 0.0992141217, 0.1074168831, -0.1344468445, 0.0039648563, -0.0009465367, -0.0823810846, -0.0630738586, -0.0846909508, 0.0214875638, 0.1207977980, 0.1119635552, -0.0538298041, 0.1251000017, -0.0494434983, 0.0209060162, 0.0111208111, 0.1509503871, -0.0308787078, -0.0664897189, -0.0163282007, -0.1574650705, 0.0553228408, -0.0306503773, 0.1004738659, -0.0887190923, -0.0044271648, -0.0883032158, 0.0154678822, -0.0659006611, 0.0077804923, 0.0078166127, 0.0536696315, -0.0532708317, 0.0926080495, -0.0073955655, 0.0523996502, 0.0727038234, -0.1474938393, -0.0215915293, -0.0587780625, -0.0250467211, -0.1018899977, 0.0833885819, -0.0584672093, -0.0518807396, 0.1296915561, 0.0775539875, 0.0525275469, 0.0078669786, 0.0232823789, -0.1547454745, -0.0583423972, -0.1513829231, 0.0673486590, 0.0292501897, 0.0035788715, 0.1410502046, -0.0978228003, 0.0065343380, 0.1439630836, -0.0535970256, 0.0106011182, 0.1198255867, 0.0665056258, 0.0216887891, -0.0588232651, 0.0584476888, -0.1275182664, 0.0093351603, -0.0420222580, -0.0672660246, -0.0971723348, 0.0753991008, -0.1179983169, -0.0416195765, 0.0580498576, -0.0531541184, 0.1299192458, 0.0189440250, 0.1423236579, 0.1332689673, -0.0772907510, -0.0058754981, 0.0313733071, 0.0883175433, -0.0943498611, -0.1352776587, -0.0702324957, -0.1535444409, 0.1355531067, -0.0729249492, -0.1417154074, 0.0461611897, 0.0451608598, -0.0360211506, -0.0520566702, -0.1192165017, -0.0965949595, 0.0046090633, -0.1001521498, 0.0063995719, 0.0819024891, 0.0394277871, 0.0028156787, -0.1279778481, -0.0511519015, 0.0720410645, -0.0424760208, 0.1071520895, 0.0681938678, 0.0382066965, 0.0183741152, 0.0360134244, 0.0655935109, -0.1531072706, 0.1292264909, 0.0617821664, 0.0356203169, 0.1147767752, 0.0553621948, 0.0447938740, 0.1146413833, 0.1292170137, -0.1270906329, 0.0720848292, 0.1292219907, -0.0174855143, 0.0591004193, 0.1405180246, 0.0973406285, -0.0226557702, 0.1398258358, -0.1164564937, -0.1349781901, 0.1234364957, -0.0036445707, -0.0951946601, 0.0913771689, -0.1368941963, -0.0992251411, 0.0896268040, -0.0990375578, 0.0212352276, -0.0073733628, -0.0258145332, -0.1545287520, 0.1277128607, 0.0070607066, 0.0177481025, 0.0104591548, 0.0483069271, 0.0272441655, -0.0580061004, 0.0304252505, 0.0286214054, 0.0464254469, -0.1320511103, -0.1499757469, 0.0848627687, -0.0503505692, -0.0705729797, -0.0226655304, 0.1185836345, 0.0430022329, -0.0932595432, -0.0100103319, -0.0336838067, -0.0959944427, 0.0999022871, -0.0158912539, -0.0637833551, 0.0992284566, 0.0792813897, -0.1576350480, 0.0460303128, -0.0646879449, 0.0361115485, 0.1508919746, 0.1301929206, 0.0621804297, -0.0779198781, 0.0130104274, 0.0373233259, 0.0220887959, 0.1494056135, 0.0838981718, 0.1059452444, -0.0903592631, 0.1214421540, 0.1094691902, 0.1309550256, -0.0361864939, -0.1316033751, -0.1391236782, 0.0722560436, -0.0836274326, -0.0272018313, 0.0353107899, 0.1303497106, 0.0706333667, 0.0333958417, -0.0363689065, -0.1273452491, 0.0677327961, -0.0705212578, -0.1315495819, -0.0614247099, -0.0940071940, -0.1216180474, 0.1239327341, -0.1155499890, 0.1230079085, -0.0862834007, 0.0590644479, 0.0879374743, 0.0930419415, -0.0446535274, 0.0158618093, 0.1435756832, -0.0972859561, -0.0816999748, -0.0064867586, -0.0806210786, 0.1323376447, 0.1186114997, -0.0110452324, -0.0310823917, 0.1499283761, 0.0666062385, -0.1272441447, -0.0503143445, 0.1147877425, 0.0437905192, -0.0041713864, 0.0600340217, 0.1484429091, 0.0180908591, 0.1392178386, -0.0215787590, -0.0653095692, 0.0691078007, 0.0013637394, 0.0466820151, -0.0927047506, -0.1273887753, -0.1184198856, 0.1155087203, -0.0826574862, -0.0639892220, 0.1069300622, -0.0528864264, -0.0387765616, 0.1544552594, -0.1294083744, 0.1308301836, 0.0584707558, 0.0009858608, 0.1420965642, -0.1296972185, 0.0806962401, -0.0065937489, -0.0995423198, -0.0552593619, 0.0512919426, -0.0050604790, 0.1218787283, -0.1461801231, -0.1379722208, 0.0994909555, -0.1137825847, 0.0240585655, 0.0713083446, -0.1313567609, 0.0041402578, -0.1179735065, -0.1398027241, -0.0320805460, -0.1034239382, -0.0362270549, -0.0467189625, -0.1423390359, -0.0826431215, -0.1118357927, -0.1404225826, 0.0812906176, -0.0746213645, 0.0796779245, -0.0248276144, -0.0803936496, 0.0448106825, -0.0049251914, -0.0132567436, -0.1164318398, 0.0608651340, 0.1251162142, -0.0264277607, 0.0961451679, 0.0168256611, -0.0874160156, 0.1095856279, -0.0127754956, -0.0811204165, 0.0169865787, 0.1251129359, -0.1578486413, -0.0828572437, 0.0790463537, -0.0399325117, 0.0844913125, 0.1356640309, -0.1142902225, 0.0021898001, -0.1463004500, 0.0026614219, 0.0440925211, -0.0418932959, -0.0262081772, 0.0055280477, -0.1532333642, -0.0379771888, -0.0541875884, 0.0937928408, -0.1420661509, -0.0059096962, 0.0844537169, -0.0842004344, -0.0789222866, -0.0857451931, -0.0270164460, 0.0334974378, -0.0921722054, -0.0503652319, -0.1430033743, -0.0379999205, -0.1413166076, 0.0934653431, 0.1551622599, 0.0715731978, 0.0558526814, 0.0348434150, -0.1199711263, -0.0961674005, 0.0694346279, -0.1539640129, -0.0714840069, -0.0590066984, 0.1276860684, 0.0300711691, -0.1450204849, 0.0405378193, 0.1572043449, 0.0667072386, 0.0701428503, 0.0426856875, -0.1269851178, -0.0866374150, -0.1195708215, -0.0533321202, -0.0704599991, -0.0966325104, 0.0790587068, -0.1251255125, -0.0157460123, 0.0967845768, -0.1382001340, -0.1232200712, 0.0916424096, -0.0071879327, 0.1316755265, 0.0253643990, -0.1435499489, 0.0039123744, -0.1306209117, -0.0033946335, 0.0831386894, 0.0199973583, -0.0530902967, 0.0590952039, 0.0620073676, 0.1367044896, -0.0814374089, -0.0585911572, 0.0148090422, -0.0564891994, -0.1034332141, -0.1332806498, -0.0259170681, 0.0404314399, 0.0143970847, 0.1207622737, 0.1173525602, 0.0038776547, 0.1319453269, 0.1176450402, 0.0449054539, 0.0049816519, -0.1072176099, -0.0421042517, 0.1365868598, -0.0432962030, 0.0908299983, -0.0321315825, -0.1341088116, 0.0052121431, -0.1301584840, -0.1523144245, -0.0825474113, -0.1510746628, 0.1434327513, 0.0643462092, 0.1065853983, 0.1491705328, -0.1497873813, -0.1191626713, 0.0963302106, -0.0655710772, -0.1156374514, 0.0179076046, 0.0622491539, -0.0733972564, 0.1402704269, -0.0576500073, -0.0223310441, -0.0871784836, -0.0332567692, -0.0225825906, -0.0043547153, 0.1374875158, -0.1224707216, 0.0403775573, 0.1043746620, 0.1100064367, 0.0984237343, -0.0860368609, 0.1233884841, 0.0800183713, 0.0986185223, 0.0860619694, 0.1432260424, 0.1044732481, -0.0127135962, -0.1452189237, 0.0307629853, -0.0224803239, -0.0714791045, -0.0299315006, -0.0746311322, 0.0845826864, 0.1283147484, -0.1261242628, -0.0526334420, 0.0406324714, 0.0341040641, -0.0210983008, -0.0358560011, -0.1288208961, 0.0908056051, 0.1237277836, 0.0889238268, 0.0615023375, -0.0439390913, 0.1450995356, 0.0705623478, 0.0657880604, -0.1352566928, -0.0004720092, 0.0570561290, 0.0798996985, 0.1246584505, 0.1409134120, 0.0753498971, 0.0884137452, 0.0799200535, 0.0780977309, -0.0207652450, -0.0139551610, -0.0782461464, -0.1023613662, 0.1044570059, 0.0714980364, 0.1217486411, 0.0976638645, 0.1035885364, -0.1282497942, -0.0012561083, -0.0685240179, 0.1309867948, -0.1564747244, 0.1257054359, 0.0946454853, 0.1286889166, -0.1446250081, -0.0998675004, 0.1527340263, 0.0405905843, -0.0973532051, -0.1183383018, 0.1348977834, 0.1282680780, -0.0174464136, -0.0037055314, -0.0240353346, -0.0596526787, -0.0727231577, -0.1365364045, 0.0347363949, 0.0334507972, -0.0431726649, -0.0178173184, -0.0759279877, -0.0582421944, -0.1537065357, -0.0002162308, -0.0076738447, -0.0062619299, -0.0259723067, 0.0832665265, 0.1156346649, 0.0987314135, 0.0209840834, -0.0816692114, 0.1436229795, 0.1463287920, 0.1578593403, 0.1422561854, 0.0355185717, -0.0001398921, 0.1459625512, 0.1461679488, 0.0755037069, -0.1081151366, -0.0063275695, -0.0305284709, 0.1239431351, 0.1207771450, -0.1252103299, 0.1313703805, 0.1162376851, -0.1301729530, 0.1024896950, 0.0812898278, -0.0399264023, -0.0405630320, -0.0828032941, 0.1543204933, 0.0430445671, 0.0860868096, 0.0363361835, -0.0928320214, -0.0862673745, -0.0212085694, -0.1250019819, 0.1226184219, 0.0493377596, -0.0094787180, -0.0549081713, 0.1161273867, -0.0370397344, 0.0870398283, 0.0762652755, -0.0142391324, -0.0813380033, -0.1274731457, -0.0726222023, 0.0434612036, -0.0014921278, -0.0132671446, 0.0983342677, 0.0760444403, 0.1573591381, -0.1531563848, -0.0368884504, 0.0976705402, -0.0440108627, 0.0510843545, -0.0864219368, 0.0653807372, -0.0481738895, 0.0367745310, -0.0303388089, -0.0537425727, 0.1016888767, -0.0571870506, 0.0880266279, 0.1240019947, -0.0952977240, 0.0660024434, -0.0951192304, 0.0959872156, 0.0792549998, 0.1299211830, -0.0937547758, -0.0011635572, -0.0942348838, -0.0849753395, 0.0665613413, -0.1233006641, -0.0644775555, -0.0296501964, 0.0156114250, 0.0527693033, 0.1167687327, -0.1409959197, -0.1496019810, -0.0107474178, 0.1487560123, -0.0940809324, -0.0767690167, 0.0431771874, 0.0458883047, 0.0828076750, -0.0088405013, -0.1369115412, -0.1241332442, 0.0445308983, -0.0970758647, 0.0349308699, 0.0443529338, -0.1399316490, -0.1317633241, 0.0596157014, 0.1170655638, -0.0676236153, 0.0723588914, 0.1530907303, 0.0157927871, -0.1476933658, 0.1293839365, 0.1135604829, -0.1167571694, -0.1390970349, 0.0320840925, -0.0172226429, -0.0667383373, 0.0348713547, 0.0357182622, -0.0972428322, 0.1281421334, -0.0663838312, 0.0469819456, 0.1417736858, 0.0171282589, 0.0752191693, 0.0974458605, -0.0915120468, -0.1415812522, 0.1557545215, -0.1176997125, 0.1277771145, 0.0661835372, 0.1418816894, 0.0636384040, 0.1172645241, -0.0616174191, -0.1147604585, -0.0874144286, 0.0509303510, 0.1281116754, -0.1183048636, 0.1059471816, 0.0483563095, -0.1041954532, 0.1488221437, 0.0538331568, -0.0277214497, 0.0899458826, -0.1424840987, 0.0289774835, 0.0278153569, -0.0404629111, 0.1449155360, -0.0590302199, -0.1443338990, 0.1327289194, 0.0034141988, -0.0594045147, -0.0214591771, 0.0985814184, 0.0604108125, -0.0669621825, -0.0524517819, -0.0358948261, -0.0834173858, 0.1568730325, 0.1469388753, -0.0636284202, -0.1152456999, -0.0958026797, 0.0793489069, 0.0261256099, -0.1011202633, 0.1314785630, -0.0833667219, 0.1168061048, -0.0194201022, -0.1220160127, 0.1066322476, -0.0472725853, -0.1507096142, -0.0100960433, 0.0291838497, 0.1208582669, 0.0425590277, -0.0052116811, -0.0632738397, -0.0903972685, -0.0826020688, -0.1200972199, 0.0321934819, 0.0220498145, 0.0779148638, -0.1161876768, -0.0159792006, -0.0904914737, 0.0471207052, -0.0781830400, 0.0437142253, 0.0505703092, 0.0557317883, -0.0258720964, 0.1105472893, -0.1448762119, 0.1162050515, -0.0946159288, -0.1182595193, -0.0445644855, -0.0084633380, 0.0023642182, -0.0156874210, 0.0768224001, -0.0890003517, -0.1401651502, -0.1408076286, 0.0819948763, -0.1449767202, 0.0094712526, -0.1571195424, -0.0989151895, 0.0639600456, 0.1342564672, -0.1438784450, -0.1074501276, -0.0212923735, -0.0090124011, -0.0343481079, 0.0090659410, -0.0900744647, 0.0429257900, -0.1351122409, 0.1487949938, -0.1043057144, 0.1192108542, 0.0061393082, -0.0330814421, -0.0099515915, -0.0780934766, 0.0589930564, 0.1459327489, 0.1262657195, 0.0531357229, 0.1343695968, -0.0701836050, -0.0560590699, 0.1182961911, 0.1300194114, -0.1252384186, 0.0363261253, 0.1509106010, 0.0861773193, 0.1223114878, -0.0633300468, 0.1242472678, 0.1231533140, 0.0602696687, -0.0945915431, 0.1034060270, 0.1360523254, 0.0916283876, -0.0781015754, -0.1164243370, 0.1290058345, -0.1228064150, -0.1289877146, -0.0096439868, -0.0767909214, -0.0932685137, 0.0552430004, 0.1352910846, -0.0354092494, -0.1090924069, -0.1038271487, 0.0210397989, -0.0684805512, -0.0194046795, 0.0097900927, 0.0276742131, -0.0770666376, -0.1578067243, -0.1360557228, -0.1356391311, -0.1535701156, 0.0135597885, 0.0712623149, 0.1035677046, -0.1002050787, 0.0348631293, 0.0294596404, -0.0913502499, -0.1439200640, -0.0298093557, -0.0711830705, 0.0179719180, 0.1324704438, 0.0188055485, -0.1443997622, 0.0651798546, 0.1445411891, -0.1442256719, -0.1088559330, -0.1241623908, 0.1222091764, 0.0250870138, 0.1517565995, 0.0221149176, 0.0438284874, -0.0744275227, -0.0057969391, -0.0054017901, 0.1189938933, -0.0262557119, 0.0310829282, -0.0013754219, -0.0617874712, -0.0614272803, 0.0134645700, -0.0390309766, 0.0516011417, -0.0515824407, 0.0740537941, 0.0582751036, -0.1200113893, 0.0234474838, 0.0048594028, 0.0473194420, -0.1231943220, -0.1212521940, 0.0682176203, 0.1095467955, 0.0475246608, -0.0724987835, 0.0549515635, 0.0584965348, 0.1060108691, -0.0801342577, 0.0945244282, -0.0235603899, -0.0591980070, 0.0732814968, 0.1577182561, -0.1090907827, 0.1271643192, -0.0040734559, 0.1407560259, -0.0674664974, -0.0752055943, 0.1004252583, -0.1390029043, 0.1031503826, -0.1083132774, 0.1468134075, 0.0605625361, 0.1031172723, 0.0856752992, -0.0730046406, -0.0711221173, 0.0645220429, -0.0055407435, -0.0559428483, 0.0859630108, -0.0134198964, 0.0474455357, 0.0957537740, -0.0784823596, 0.1225446016, -0.0932143107, -0.0985541642, -0.0994098559, -0.1298338324, -0.0992276669, 0.0169885159, 0.1519217938, -0.0467556790, 0.1026514322, 0.0105019361, 0.0683551282, -0.0710778981, -0.1419778168, -0.1144971400, 0.0334840566, -0.1466873884, 0.1132915467, 0.0474147499, 0.0277827829, -0.0680233613, 0.0676840395, 0.0629963130, -0.0325810909, -0.0906156078, -0.0159010589, 0.0067646205, 0.0378201008, -0.0829901993, -0.1429650038, -0.0305078924, -0.1423287094, 0.0538391918, 0.0239677429, -0.0634735599, -0.1522316039, -0.0104319751, -0.0952922553, -0.1257889867, 0.1090825051, 0.0049947053, 0.0859361291, -0.0226007998, 0.0627541393, -0.0491949990, 0.0388597995, -0.1138353273, -0.1272726059, -0.1542156041, -0.0989764482, -0.0901504606, -0.0123335719, 0.0306667835, 0.0962406844, 0.0410664082, 0.0210397542, -0.0165843517, -0.0033911318, 0.0949169844, 0.0797874331, -0.0657674819, 0.0671608448, -0.1500128508, 0.1401667446, 0.0713652968, 0.1076292247, -0.1054422855, -0.1438824832, -0.0162504315, -0.1239029169, -0.0886662453, -0.0010212213, -0.1196176410, 0.0688892603, -0.1232380494, -0.1445724070, -0.0818317235, -0.0020520091, 0.0102436692, 0.1521190256, -0.1537089497, -0.1371346712, -0.0442107394, 0.0289622247, 0.1400519460, 0.0125238746, 0.0910186619, 0.1518580467, 0.0039698333, 0.0760965347, 0.0438119769, 0.0871090889, -0.0841445699, -0.0304772407, 0.0770057142, -0.0173033625, -0.1272068620, -0.0570396930, -0.0269554853, -0.1419938058, 0.0217074901, 0.1374896914, 0.1308051795, -0.1139746904, 0.1550686210, -0.0309001654, 0.0697446615, -0.0503785759, -0.1371923387, 0.1210732907, -0.0350711048, 0.1196775287, -0.0158534050, 0.0554789156, -0.0134609491, 0.1227491945, 0.0248684883, -0.1450399756, -0.1309818625, 0.0843846947, -0.0658654943, 0.0054428875, 0.0824783444, 0.1247914284, 0.1057389230, 0.0586981773, -0.1538836807, -0.0520924851, -0.0832193643, -0.1196383387, 0.0248356164, 0.0915192068, 0.0037256628, -0.1253461540, -0.1073723584, 0.0124066621, 0.0660784096, -0.0639453083, 0.0277166218, 0.0892923176, 0.0137333423, -0.1574956775, -0.1085877866, 0.0634761304, 0.1283762902, -0.0747735128, 0.1362817734, -0.0363751277, -0.0888107345, 0.0102835596, 0.1006027609, 0.0306237340, 0.0295021981, 0.0794995427, 0.0628477037, 0.1443748027, 0.0772932768, -0.1421218216, -0.0195683986, -0.0081856996, 0.1001343876, 0.1366921216, -0.1415333301, 0.1268358380, -0.1045989245, -0.0658387616, -0.0527447984, 0.0394236743, -0.0968340784, 0.0312533081, 0.0128403008, 0.0604748577, -0.1274571717, -0.1338499039, 0.0173261315, 0.0513731092, 0.0360165536, 0.0773520023, 0.1014027745, 0.1001134366, -0.1094016358, -0.0342174917, -0.1089246571, 0.1579655558, 0.0972075015, 0.1199368685, 0.0383913368, -0.1284066439, -0.1301057339, 0.1053725928, -0.1403667480, -0.0100064129, -0.0622916743, -0.1337397546, -0.1504538655, -0.1014222130, -0.0643007904, -0.0613033623, 0.0485244393, 0.0295243710, 0.0656602234, -0.0756206810, 0.1064851731, -0.0492364243, -0.1231656671, 0.1086303145, -0.0316567868, 0.0951862186, -0.0799862519, -0.0640366822, -0.0170544088, 0.0950878710, -0.0298491269, 0.1304395944, -0.0304699689, 0.0843914449, -0.0257750750, -0.0993577987, 0.0936556309, -0.0908007026, 0.1276346892, -0.0748736709, -0.1535770148, 0.1299291700, 0.1507955641, -0.1365724504, -0.0934258625, 0.1425609142, -0.0978837162, -0.0807155818, -0.1127492636, -0.0499755591, -0.0487874150, -0.0416502655, -0.0413673818, -0.0222767144, 0.1062995344, 0.1383390576, 0.0560548902, -0.1125484928, -0.0828122348, -0.1402057111, 0.0252503157, 0.0093160868, -0.1552062482, 0.1574379951, -0.0214177072, 0.0386068076, 0.0588988811, -0.0271167159, -0.0991190970, 0.0633396953, 0.0370358080, -0.0957188457, -0.1424616277, -0.0842276886, 0.0909307599, 0.1264472455, -0.1421867460, -0.1106788218, -0.1551640332, -0.1078015417, -0.1091715693, 0.0016131401, 0.0947517902, 0.1446736604, -0.1253231615, -0.0864152610, 0.1231992692, -0.1521189213, 0.1362908930, -0.1075272858, -0.0334793404, -0.0015654117, -0.0926678106, 0.0846838206, -0.0628621131, 0.0978664309, -0.1575372964, -0.0884759501, 0.0738106519, 0.0586285889, 0.1286867708, -0.0225065649, 0.1301133782, -0.0328020751, -0.0273305774, 0.0623616427, 0.1064120978, 0.0157544911, 0.0816093534, 0.1536655873, 0.0872088224, -0.0469915941, 0.0042838454, -0.0062274039, 0.1230665892, 0.1514769644, 0.0300382227, 0.0033049583, -0.0149541795, -0.0595799983, 0.0406116247, -0.1212602258, 0.0292197764, -0.1124171168, 0.1163344234, 0.1276690215, -0.0568327680, 0.0875890404, -0.0960011184, -0.0402776673, -0.0679367706, -0.1314484775, -0.1216079444, 0.0015436262, 0.0966704935, 0.1062528938, 0.0313386172, 0.1123072356, 0.0443510413, 0.0716072023, 0.1012870222, -0.1162597910, -0.0040309280, -0.1331818402, 0.0482254922, 0.0340313762, -0.1521225423, 0.1330396384, -0.0616878048, 0.0385163426, 0.0084256828, 0.0492093563, -0.0313084275, -0.1404794753, 0.0502281338, 0.0652460456, 0.0190130025, 0.0712065548, 0.0245512575, 0.0606030226, 0.0461190045, -0.1342359334, 0.0220291615, 0.1533799320, -0.1428316981, 0.0880067348, 0.1395250112, -0.0981921256, 0.0059848577, 0.1369391233, 0.0402291864, 0.0423214287, -0.0037824661, 0.0882643461, 0.0682920963, 0.0108747929, 0.0490921587, 0.0369917005, 0.0966717452, 0.0658900291, 0.0694830418, 0.1125638634, 0.0329738110, 0.0484028608, -0.0932651609, 0.1318348497, -0.1398395151, -0.0766635761, 0.0962297469, 0.0588718951, 0.1171065122, 0.1529569775, -0.1221080720, 0.0188134760, -0.1343446076, 0.1191940755, 0.1489679962, 0.1323972791, -0.1495727748, -0.0430743173, -0.1273858100, 0.0976559967, 0.0547074676, -0.1053333431, 0.1383033246, 0.1073841006, -0.0787244886, 0.0182520896, -0.0495474637, -0.1281464696, -0.1460433304, -0.0570612177, 0.0265557468, 0.0890504569, -0.1195837110, -0.1575240344, 0.0038158000, -0.0788758397, -0.1435196102, -0.1265707612, 0.1482562572, -0.0549055338, 0.1435464770, -0.0849928707, -0.0111737400, -0.1055351049, -0.0516387597, 0.0198719054, -0.1094409972, 0.0687175542, 0.0172970593, -0.0107722282, 0.0191489756, -0.0738338307, 0.0810144097, 0.0188535005, -0.0810765699, 0.0583046526, 0.0732556283, -0.0634596869, -0.0952176899, -0.0034492612, 0.1511031538, -0.0279844701, 0.0373707116, -0.0454021990, -0.0644607767, -0.1509864926, 0.0588535368, -0.0904889479, 0.0221894532, -0.0780987144, -0.1067486554, -0.1231482551, -0.1196812391, -0.1418651044, 0.0428828448, 0.0696050972, 0.1028967053, 0.1483592838, -0.1038511992, 0.0656624883, -0.0051281154, 0.0724993795, -0.1248483956, -0.0350705013, 0.0916286856, -0.0903014019, -0.1141395047, -0.0615786687, -0.1085378081, 0.0012556612, -0.0311064869, -0.1119646356, 0.0672064275, 0.0433914214, -0.0970980376, 0.0634781569, 0.0285164863, -0.0835711509, -0.1171277687, 0.0215585828, -0.1405440420, -0.0873359069, 0.0330758691, -0.0486567542, 0.0262070000, 0.1154091507, -0.0440222099, 0.0861806720, -0.1260984093, -0.1529061496, 0.0344566703, 0.0342046320, -0.0923320800, -0.0934638605, 0.0749817193, 0.0847422928, -0.1505385786, 0.0713767558, 0.0875682384, -0.1307303011, -0.1158005595, -0.0154563785, 0.0156047195, 0.0425503999, -0.1016948372, -0.0500007048, 0.1048033088, -0.0353925899, -0.1569790393, -0.1426403075, -0.1435864717, -0.0566790029, -0.0142060667, 0.0032344609, 0.1563859433, 0.0170167089, -0.1226436794, 0.0433858037, -0.1228229254, -0.0698547661, 0.1173868328, 0.0691005290, 0.0578766018, 0.1137331277, -0.1410435736, 0.0092303753, -0.0496918112, -0.0368859246, -0.0091093183, 0.1392301768, -0.1536619067, -0.1577811241, 0.1477872282, 0.0424354970, 0.0242855400, -0.0674338117, -0.0521121249, -0.0820294842, 0.1103256196, 0.1230315715, -0.0633719638, -0.0712811574, 0.0188849866, -0.1142961383, 0.1333380193, -0.0660140216, 0.1570349783, 0.0497137159, 0.0766922981, 0.0516819656, 0.0948047489, -0.0175244510, -0.0757929608, -0.0090706795, 0.0234372020, -0.0259755850, 0.1053924114, -0.0799383000, -0.0562724024, -0.0503202602, -0.0478685424, 0.1516700536, 0.1217678040, 0.1495856494, -0.1101369560, -0.0846686363, -0.0597427338, -0.0964916721, 0.0617013425, 0.0060976893, -0.0569931343, 0.1367576569, -0.0002180785, 0.0333496183, -0.1158887371, 0.0486415327, -0.0409365743, -0.0663965344, 0.1457500905, 0.0936787277, -0.1335137188, -0.0833159462, -0.1218124479, -0.0811901912, -0.0545927957, -0.0710441172, 0.0709768236, -0.0774636641, -0.0910195708, -0.0056760460, 0.1250645667, -0.1513837129, 0.0987600237, -0.0148951709, -0.0463100970, -0.1510615051, -0.1489138603, -0.0816006437, 0.0490245670, -0.0743149593, 0.1302790493, 0.0628323704, -0.0043530911, -0.0941576436, -0.1089896783, 0.0097850114, -0.1160563380, 0.1127559096, -0.0487075374, 0.0965402573, 0.0954277664, 0.1535031945, 0.0480576009, 0.0742557794, -0.0656146929, 0.0905624181, -0.0792833865, 0.1267989725, -0.1049892828, 0.0624597669, -0.1211628169, -0.0816926584, -0.0163946301, -0.1027655900, 0.0755806118, 0.1250012368, -0.1481988132, -0.1010193378, 0.0006812662, 0.1183874160, 0.0322366804, 0.0215515345, -0.1536926329, -0.0429745689, -0.0073749125, -0.1075893790, -0.0156455487, -0.0631273463, 0.0610721260, -0.0226875097, -0.0189643353, 0.1365555972, -0.0057408065, 0.0888253301, -0.0199461579, -0.1052338257, -0.0287127346, 0.0228570402, 0.1364667863, -0.0809572637, -0.1432131678, -0.0102328956, 0.0852373391, -0.0466894880, -0.1239055917, 0.1125884503, -0.0551032573, 0.1264830679, -0.1363788247, 0.1249494702, -0.0996262431, 0.0147066563, 0.1337741464, -0.0236334801, 0.0747971833, -0.1133502424, 0.0222576410, -0.1471571326, -0.0025675595, 0.1125090569, 0.0157920718, 0.0623691827, -0.0269726366, -0.1043416411, 0.0387614369, -0.0498903990, 0.0062605441, 0.0527510196, -0.0270237476, 0.0798854530, 0.1082809418, -0.0256276280, -0.0233877301, 0.1520253271, -0.1297133118, -0.1529713720, -0.0304363370, -0.1555979252, 0.1060998887, -0.0677359179, 0.0106431544, 0.0392257273, 0.1175817698, 0.0507437140, -0.0596834347, -0.0188909471, -0.0540438145, -0.1127584279, -0.0304225385, 0.0099838972, 0.0263438374, 0.1205752343, -0.0186779499, -0.0043918490, 0.1183518916, 0.0832567215, -0.1311120987, 0.1283917278, 0.0303688645, -0.0936975479, 0.1561692208, -0.0444923714, 0.1090388447, 0.1107157320, 0.0984973162, -0.0764602423, 0.0107748955, -0.1271681786, 0.0539444089, -0.0088832974, 0.1414831728, 0.0558129847, -0.1404448301, -0.1485507637, 0.0854551196, 0.0930967778, -0.0288755894, -0.0156774670, -0.0256363451, 0.1362438649, 0.1457382888, 0.0359896719, 0.0420372635, -0.0256468952, 0.0625002980, 0.0537176579, 0.1214701980, 0.0962619036, -0.1319397092, 0.0928831846, -0.0048365295, 0.0432668030, 0.0815368593, -0.0674480274, 0.1481328160, 0.0056717098, 0.0870109946, -0.1249118447, 0.1128569394, 0.0376396477, 0.0256845504, 0.0205485672, 0.0387977809, -0.1211110502, -0.0774695873, -0.0519844070, 0.0686675310, 0.1348332316, 0.0229766518, 0.1338836104, 0.1196012646, -0.0607765093, -0.0440466404, -0.1352344900, 0.1066152304, 0.1339187771, 0.1405300349, -0.0264873952, -0.0574892685, -0.0505991057, -0.0538554788, -0.0730894580, -0.0351671949, 0.0437693000, 0.0077845305, -0.0016562641, -0.1389891058, -0.0700547919, -0.1433539987, -0.0303353071, -0.0816637427, -0.0332681611, 0.1485797018, -0.1460700929, 0.1449124068, -0.0249790102, 0.0074883848, 0.0538036376, 0.0612462163, -0.0505093858, 0.0791218132, 0.0414664447, 0.1457871050, 0.1090982109, -0.1457027346, -0.0065810382, 0.0009844303, 0.0446403027, -0.0732089207, 0.0340427607, 0.0984192044, 0.0239355117, -0.0808120519, -0.1405352950, 0.1327058822, -0.0749904960, 0.0722045153, -0.0415372849, -0.1252861023, -0.0087567717, 0.1214382797, 0.0223764628, -0.0104632974, -0.1484022737, -0.0241161287, -0.0400409997, 0.1092957109, -0.0636674762, 0.1446000785, -0.0758516192, -0.1329122335, 0.1560055763, 0.0157936215, 0.0391351730, -0.1553599387, 0.1201217622, 0.0740452707, -0.0679963678, -0.1479326785, 0.0769061148, -0.0699478090, 0.0777776092, -0.0683352649, -0.0175372362, -0.0864212960, 0.0641377866, -0.1314856410, -0.0555975065, -0.1376923174, 0.1296472698, 0.0802211463, 0.0806657821, 0.0094029158, -0.1236503795, 0.1228470951, 0.0701979697, -0.1265188754, 0.0676366985, -0.0688140988, -0.0964011997, 0.1475109905, -0.0538176298, 0.0843317360, -0.0292812884, 0.1148890108, 0.1301141530, -0.0627150908, 0.0555016398, -0.1034367979, 0.0861903578, 0.1396618038, -0.0510515869, -0.0218925923, -0.0476879701, -0.0197076499, -0.0610098168, 0.0433732569, 0.1307166666, -0.0447214991, 0.0101702809, -0.0618125424, 0.0502937585, -0.0767983869, -0.1534540057, 0.0360602438, 0.0155976266, 0.1525110155, -0.0668081492, -0.1068667918, 0.0398183316, -0.0723959804, -0.0283209532, 0.0395032465, -0.0914425328, -0.0386998057, 0.0045104474, -0.0023491830, 0.1474453658, 0.0247499645, 0.1420768648, -0.1377501488, 0.0138621181, 0.1340763718, -0.1287596077, -0.0575323924, 0.1091212481, 0.0248518586, -0.0882315189, -0.0748607069, 0.0888204277, -0.0720241368, 0.0762520730, 0.0165926516, 0.1537661105, 0.1150875837, 0.1560609192, 0.1080375165, -0.1003032774, 0.1205866486, 0.0314512998, 0.1362820119, 0.0582032204, 0.0809898674, -0.1037613302, -0.1449538022, 0.0527004749, -0.1254074574, -0.0144232512, 0.0957092196, -0.1201342791, -0.0684572533, 0.0759299546, 0.0229654461, -0.0745595396, -0.0481170788, -0.0552403629, -0.0501575246, 0.0591195226, -0.0249732435, 0.0550059527, 0.0558708161, -0.0778247267, 0.0656096041, -0.1430731118, 0.0780231357, -0.0843144655, -0.1448034197, 0.1547831446, 0.1569125205, -0.0026079416, -0.1017268822, -0.0456516817, -0.1457023919, -0.0860365182, -0.0823305324, -0.0755282491, 0.0409884155, 0.0372182727, -0.0081714839, 0.0614699125, 0.1057717949, -0.0587730482, -0.1284100711, 0.0127865374, -0.1110974103, -0.0287064016, -0.0761340782, 0.1548550874, -0.1300221980, 0.1508505493, 0.0253711045, 0.0158753395, -0.1015500128, 0.1370294541, 0.0539080650, -0.0716025308, -0.1247260347, -0.1578359008, 0.0230014175, -0.1533389241, 0.1393166333, -0.0947542414, -0.1311586946, 0.0109280646, 0.1338880211, -0.0677683353, 0.0547237247, -0.0066144019, -0.0702999756, 0.1095604151, 0.0071336031, 0.0157241821, -0.0588352904, 0.0022486448, -0.1262967288, -0.0492686927, -0.1156763509, 0.0784630179, -0.1522183269, 0.0782997459, 0.0884136409, 0.1364303380, -0.1290973723, 0.0738634616, -0.0349276289, 0.0344056040, -0.1260852814, 0.1323731095, -0.0094054788, -0.1400879771, -0.1149534658, 0.1019790024, 0.1057877094, -0.1187126040, -0.0762466490, -0.1548572183, -0.0037904233, 0.0885201246, 0.1189210564, -0.1316251606, 0.0542821288, -0.0842655003, 0.0752159208, 0.0999390632, 0.0976363271, -0.1445687115, 0.0473513007, 0.0403194278, -0.1448671371, -0.0173511952, -0.1286949515, -0.0411209166, -0.1210882068, -0.1104407609, -0.0827069432, -0.0626363456, 0.1242435127, 0.0531560034, -0.1164724082, 0.1123345643, -0.0987440497, 0.0870176256, 0.0813086331, 0.0758790970, -0.0839992836, 0.0997046083, 0.1273310930, -0.1217495352, -0.1373849809, 0.1102557331, -0.0950730070, -0.0878856480, -0.0034368932, -0.0861116126, -0.0249548554, 0.1085682362, 0.0009895116, 0.0128117949, 0.1269190460, 0.0661880225, -0.0264000148, 0.0494562835, -0.1287300587, -0.1323288679, -0.0361809880, -0.1003186628, -0.0987624824, 0.1259316355, 0.0076137632, -0.0015518069, 0.0802365690, -0.1007818878, -0.0702389777, -0.0979079232, 0.1030778438, -0.1302005053, -0.0266192555, -0.1232964396, 0.0269670486, 0.0312181860, 0.0687923878, 0.0613767952, -0.1429274976, -0.1118590087, 0.1068310887, -0.0656933635, 0.0558316410, -0.0357270762, -0.0056799948, 0.1115177423, -0.1062404513, -0.0462679565, 0.1241379529, 0.1119055897, 0.1291323155, -0.1056115180, 0.0092626363, 0.0490316898, 0.0448350012, -0.0573082864, -0.0123422444, 0.0554853529, 0.0436140597, -0.1310172975, -0.0715767071, -0.1016951054, -0.0979206264, -0.1244831160, -0.0841798857, -0.1243502647, -0.0726366043, 0.1072004288, 0.0907199234, -0.0274665803, 0.1048842221, -0.1086153090, -0.1473422647, -0.0057790726, -0.1521821022, -0.0823944360, 0.0652650148, -0.0439339280, 0.0266967714, -0.1131443754, -0.1255704165, 0.0078341812, 0.1035748273, 0.1504092962, -0.0134896785, 0.1167991310, -0.1125450283, 0.0706225932, -0.0432265773, -0.0842094794, 0.1334382147, 0.1024792939, 0.0599132776, -0.1575823575, -0.0536010563, -0.0841176137, -0.0051213652, -0.0159392804, -0.0028299391, 0.0396923721, 0.0045656264, 0.0579925627, -0.0384979025, -0.1217644960, 0.0467130393, -0.0464804545, 0.0019826889, 0.1142814308, -0.1447860748, -0.1147474125, 0.0257644057, 0.1000096351, -0.0167632699, 0.0354857743, -0.1368745118, 0.0245895684, 0.1546513885, 0.0307252109, 0.0144869238, -0.0910485610, -0.1382411867, -0.0024587661, 0.0019396394, 0.1038539559, 0.0475869030, -0.1527477056, 0.1502208263, -0.0159669816, 0.0408816487, -0.1384847164, -0.0264024585, -0.1385858953, -0.0962489024, -0.0413912833, -0.0382063910, -0.0543094650, -0.1097906381, -0.1207985431, -0.1283558011, -0.0709244311, 0.0823614150, 0.0459104329, 0.0046175718, 0.0650677383, -0.0988839418, 0.1044202298, 0.0272233933, 0.1075063199, 0.0265289694, 0.1034889966, -0.0272838622, 0.0387792736, -0.0204878747, 0.1026082486, 0.0806750208, -0.0990600288, 0.0479328483, -0.0290684849, -0.0008421540, -0.1491046101, 0.0214022547, -0.1234367117, 0.0133327693, 0.1215040535, 0.0134840161, 0.0912375450, 0.0795612186, 0.0011360496, 0.0765415877, -0.0151508451, -0.0613111705, 0.0101179928, -0.1201282889, -0.0792165548, -0.0654980168, -0.0886464864, -0.0849471390, -0.0821514353, 0.1152042896, -0.1119790003, -0.0199849159, -0.1242327243, 0.0215773284, 0.1161914319, -0.0812622681, 0.0805047005, -0.1213290244, 0.0906178355, 0.0435879827, -0.1294366568, 0.0649960488, -0.0555040166, 0.0738691539, -0.0096591711, -0.0066968054, -0.1280657202, -0.1461124569, -0.1345487833, 0.1567719728, -0.0348002538, -0.1463045627, 0.0559757650, 0.1137358397, -0.1098631248, -0.1545241624, 0.0713415444, -0.0792243555, 0.1249684542, 0.0615019500, 0.0065490305, 0.0259508938, -0.0720144883, 0.1330910772, 0.1451315433, 0.1349987835, 0.0214949250, 0.1296937317, -0.0477393940, -0.0497123152, 0.0965755731, 0.1275061220, 0.1050067991, 0.0001766086, 0.0092059374, 0.1160479635, -0.1365447342, 0.0450075120, -0.0373443663, 0.0908155888, 0.0977218002, 0.0289279521, -0.0835992396, 0.1062898785, -0.0476579294, 0.1168456525, 0.0891234428, 0.0390587300, -0.1236139238, -0.0059200525, -0.0862230808, -0.0467397347, 0.1323245317, 0.1393236369, 0.1168309301, 0.1526878327, 0.1492889971, 0.0378698707, 0.1255843192, 0.1427610070, -0.0270261317, -0.0694741756, -0.0708066225, -0.1257736832, 0.1352287680, 0.0708600879, -0.0312048346, -0.1346242130, 0.1424625963, 0.0125928223, 0.1333573610, 0.1344752461, 0.0769857019, -0.0837070495, 0.0957443565, -0.1548728198, -0.0557929277, -0.0472198129, 0.0716978312, 0.1452926546, -0.0095796734, 0.0320946425, 0.0692791641, -0.0300502032, 0.1293490380, -0.1157357618, -0.1477053612, -0.0787545741, -0.1168442518, 0.0061511397, -0.1167256534, -0.1424687952, 0.0790405869, -0.0477153063, -0.1513660997, -0.0047899634, 0.1112417132, -0.0647553429, -0.0220830292, -0.0540828258, 0.0714200735, 0.1477101594, 0.0648780912, 0.1041626185, -0.1349827498, -0.0699046776, -0.1450397819, -0.1493231803, -0.0935601443, -0.0170943290, 0.0681312084, 0.1256541163, 0.0431574732, 0.0737712085, 0.0212986618, 0.0023446232, 0.1527401954, -0.0332879871, 0.0380445123, -0.1183128953, -0.0859138146, 0.1033145040, 0.1528831869, 0.0753475279, 0.0069899410, -0.0411324501, 0.0807107538, -0.0255320370, 0.1490458101, -0.1477148533, 0.0109287053, -0.1559412330, -0.1065073162, 0.1324226111, -0.0889850855, 0.1125690490, 0.0696728826, -0.1503161639, 0.1090357155, 0.0047829151, -0.0940683037, 0.0444215387, 0.0225353688, 0.1045162827, -0.0679631978, 0.0264096707, 0.1395918876, -0.1244384423, 0.0786695629, 0.0340288579, -0.0321269780, 0.1577099413, -0.0317440629, -0.0495983958, -0.1042317897, 0.1087660342, 0.0460880995, 0.1339651197, -0.1165794581, -0.0478551239, -0.0923677757, -0.0981284901, -0.1013252884, -0.0938576087, -0.0912973657, -0.0532596707, 0.1166420430, -0.0309413671, 0.0552433729, 0.1479076892, 0.1087972969, 0.1381236762, 0.1173405200, 0.0728803575, 0.1023173779, 0.0611680746, -0.1093703508, 0.0585614145, 0.0518561304, 0.0459792316, 0.0014596730, 0.0305912346, -0.1523932815, -0.0842867270, -0.0094458461, 0.0179165751, 0.1197563559, 0.1377701610, 0.0001704246, -0.0492948592, 0.0458799005, 0.0819813013, 0.1210802943, 0.0668144077, 0.0323117077, -0.0357381180, 0.0685046017, -0.0890159979, -0.0797488764, 0.1452846974, -0.0323648602, -0.1238370240, 0.0961337239, -0.0141267180, 0.0108509064, -0.0796592310, -0.0061008185, -0.0128032863, -0.0398572683, 0.1037607938, 0.1036117524, 0.1179694086, 0.1190142483, -0.0777720287, 0.0392151326, -0.0350150838, 0.0017625690, -0.1473422945, -0.0582890511, 0.0933383256, -0.0931228176, -0.1212652326, -0.0515687615, 0.0538260788, 0.0683815181, 0.1123198122, 0.0659938157, -0.0221754313, 0.0548770726, 0.0131202042, -0.0184550434, 0.0464187860, -0.1217098758, 0.1264171749, -0.0264596492, 0.1183983535, 0.0858466774, -0.0181916952, -0.0057786852, -0.0326759368, -0.1559430510, -0.0560100228, -0.0630401149, 0.0562506914, -0.0724568218, -0.1371921897, 0.0995492190, -0.0443202108, -0.0680461675, -0.0083101839, -0.1104614586, -0.0403799787, 0.0514134467, -0.0024773926, 0.0828962624, 0.0687449574, -0.1523095220, -0.1258327067, -0.0242646188, -0.1305517405, 0.0693337172, 0.1252704710, 0.0313011557, 0.0205818862, 0.0340876281, -0.0441009253, 0.0256337374, 0.1113643795, 0.1157704145, 0.0699591488, 0.1400271803, 0.0936035365, 0.0193799883, -0.1354351640, -0.0641033351, -0.0359117910, 0.1114875525, 0.0962276310, 0.0277400017, -0.0196714997, -0.1026882380, -0.0087551177, -0.1245560944, -0.1453774720, 0.1363357455, -0.0852734149, 0.0161927938, -0.0462200418, 0.0546545088, -0.0356976688, -0.0592892021, -0.0894650891, -0.0783010349, -0.0311627239, -0.0574608818, -0.0306119323, 0.0682685375, 0.0823444128, -0.1240173653, 0.0900596827, -0.0365975052, -0.1349924803, -0.0865215287, 0.1365451068, 0.1222314686, -0.0344984084, 0.1203254312, -0.1561390311, -0.0612724572, 0.0253587067, 0.1361287981, -0.1238165870, -0.1010622084, 0.0500932038, -0.0389435962, -0.1451313496, -0.1222080886, -0.0000749826, 0.0796811283, 0.0741312653, 0.0251831412, -0.0712044463, 0.1263676733, 0.1459959298, 0.0008825362, 0.1038715988, 0.0390976667, 0.0789626539, -0.1503536254, 0.0594416857, -0.0614072606, 0.0030848831, 0.0453713983, -0.1066787988, 0.0444795936, 0.0758336782, 0.0527666658, -0.1577702016, -0.0030663311, -0.0767762586, 0.0873552412, 0.0655063093, -0.0150033385, 0.0689884871, -0.1216249764, -0.1178058311, 0.0348245651, 0.0007655919, 0.0481920540, -0.1297338158, 0.1453533918, -0.0243673027, 0.1060689241, -0.0147830695, -0.1466063708, -0.0214289427, 0.1462816745, -0.1314158738, 0.1113208085, 0.0672716796, -0.1533033252, -0.0420179218, -0.1570362747, 0.0295341611, -0.1321035028, -0.0417584926, 0.0338303000, 0.0656519383, 0.0142507851, 0.0296659917, 0.1490772516, 0.0383628309, 0.0150556564, 0.1458280236, -0.0039631873, 0.1519516557, 0.1490194052, 0.1275569648, 0.0253334045, -0.0792574510, 0.0829163939, -0.0038640797, -0.0655610859, -0.0417601094, 0.0906342268, 0.0850562453, 0.1221121699, -0.1499714255, 0.0308911204, 0.0103578568, 0.1109750122, 0.1321713179, -0.1061035767, -0.1385493279, 0.1287125200, 0.0946622640, 0.1110306531, 0.0319318324, 0.0412732512, 0.1357725412, -0.1015848368, -0.1354553699, 0.1400726885, 0.0942588896, -0.0607299879, 0.1407621354, 0.0565182567, 0.1093758792, 0.1148968786, 0.1296886951, -0.0743472278, -0.1546140313, 0.0241832286, 0.0810796618, 0.0214817971, 0.0724955797, 0.1491833478, 0.0799601674, -0.0649725199, -0.1156583279, 0.0643263906, -0.0825227574, 0.0972407907, -0.0002233237, -0.0254285187, -0.0659593940, 0.0409854650, 0.1168395132, -0.0873322859, 0.0429423004, -0.0143236518, -0.0258668214, 0.0743982792, 0.0623079985, -0.1466046721, 0.0316235423, -0.1015474424, -0.1322061121, -0.0730632991, 0.1358088404, 0.0887050778, -0.1238036603, 0.0638221502, 0.0624804199, 0.1462595612, -0.0882686153, -0.0660039559, 0.1004080027, -0.1408305019, -0.1365050822, -0.0992164686, -0.1163771451, -0.1466079503, -0.0935916975, -0.0968333185, -0.0669864938, 0.0855695307, 0.1193892211, -0.1017934978, -0.1114247367, -0.1194880009, 0.0948369354, -0.0975053906, 0.1099833101, 0.0149168521, -0.1215064228, -0.0560349450, 0.1333550066, -0.0107654035, -0.0433003083, -0.0968498290, 0.1000825912, -0.0930525884, -0.1425313354, -0.0866232365, 0.0266713202, 0.1132891923, -0.0169462860, -0.1198657602, -0.0378415957, 0.0360306948, 0.1312973648, 0.0379975438, -0.0505429804, 0.1442381591, -0.0668290332, -0.1179742217, -0.0340889022, -0.0025551915, 0.0711506158, 0.0593594611, 0.0705320388, 0.1033773571, -0.0560130402, -0.0657394305, 0.0131064057, 0.0932723135, 0.0434295684, 0.0933726877, -0.0198657215, 0.0806243569, 0.0256382972, -0.0263228416, -0.0146331042, -0.0844907388, 0.0817032158, 0.1473768204, -0.0228736997, -0.0319439620, 0.0801025480, -0.0028846413, -0.0376348570, 0.0801881552, -0.0119411498, -0.1285189539, 0.1509781629, 0.1010319442, 0.0245629549, 0.0490276664, 0.0738172829, 0.1497351080, -0.0441268981, -0.0063891262, -0.1022126526, 0.1149960905, -0.1239545643, -0.0047000200, 0.0911907107, 0.0019727796, -0.0599408001, -0.0116766244, -0.0607124269, -0.1578447223, -0.1129751131, -0.0854048282, 0.1018659621, 0.0259969980, 0.0101768374, 0.0723809749, 0.0454795212, 0.0011429042, -0.0698673949, 0.0027323812, -0.1470418572, 0.1300956756, 0.1387615949, 0.0589196533, 0.0581847131, -0.0389121920, 0.1518170685, 0.0324561894, -0.0429252982, 0.0062381774, 0.0475982577, 0.0022681355, 0.0375479311, -0.0189024359, 0.0435165018, 0.0976534635, -0.0983809456, 0.0956397206, -0.0291703939, -0.1238830090, 0.1358214170, -0.0527196154, 0.0627084225, -0.0188374072, -0.0460129306, -0.1575719118, 0.0932443887, -0.0300736874, 0.0151811540, 0.0498523563, 0.1462989002, -0.0753764436, -0.0406320989, 0.1441556364, -0.0643606558, -0.1264929771, -0.1018338650, -0.1273799986, 0.1580320746, -0.0744340494, 0.0229868293, 0.0007949919, -0.0569274649, -0.0478317514, 0.1011852771, 0.0461270362, 0.0456855297, -0.0125980526, -0.1183709502, 0.1283025295, 0.0521773845, 0.1474686116, -0.0502298623, 0.0642945319, -0.1111567467, -0.1090563238, -0.1580074281, -0.1545790881, 0.0275306702, -0.1538048983, 0.0186001807, 0.0318972617, 0.0653597414, -0.1057373136, -0.0236211568, -0.0197630227, -0.0969877690, -0.0384313688, 0.0342422575, -0.0202979594, -0.0363369063, -0.0311847478, 0.1512545198, 0.0057824552, -0.1383569539, 0.0872709602, 0.0288181007, 0.1170823425, 0.0911847949, -0.1089166254, -0.0639993995, -0.0870797932, -0.0252912194, -0.0909330174, 0.0073608458, 0.1051780432, -0.0722836033, -0.0208634138, -0.0932457447, -0.0599892735, 0.0679429173, 0.1109976023, 0.0766841918, 0.1184333414, -0.0670877472, -0.1131187826, 0.0456718504, 0.1485537440, 0.0043797493, 0.1347721070, 0.1198155433, -0.0384128913, 0.0493694246, -0.0787544921, -0.0219230056, -0.0402830541, 0.0480628759, 0.1267212778, 0.1185307950, 0.0494929552, 0.0349957496, -0.1089132279, 0.1342290193, 0.1179331988, 0.1335533410, -0.0225719362, 0.1025735289, 0.1283043474, -0.0869525596, -0.0157432854, -0.1137150675, 0.1306938976, 0.0685894936, 0.0879448354, 0.0954421312, 0.0936232358, 0.1437546164, 0.1176139265, -0.1064973623, -0.0243236125, -0.0887078643, 0.0661478788, -0.0998290181, 0.1273905188, 0.1378955096, 0.1179338247, 0.1068509370, -0.0245888829, -0.0313809961, 0.0987855047, 0.0737305433, 0.1148569733, -0.0612854958, 0.1442020386, 0.0063718259, -0.0765336379, 0.0550883710, 0.1513313502, 0.1480619758, 0.0916634351, -0.1092090458, 0.1278086156, 0.0775113553, -0.1127801836, 0.0469239652, 0.0841668397, -0.0980052948, 0.0555848330, 0.0026608258, -0.0425864756, 0.0032809526, 0.0156184733, -0.1166070998, 0.0305672586, -0.1385475546, -0.1206155568, -0.0293777585, 0.0032927394, 0.0181110650, -0.0467664972, -0.0777678415, -0.0207317322, -0.0171879679, -0.1200454682, 0.0500387698, 0.0863196552, 0.0715956986, -0.1105837822, -0.0239346474, -0.0755590871, 0.0057043582, 0.0985803753, 0.1375750154, -0.0867544264, 0.0296998024, 0.0903057307, -0.0691351667, -0.0873760507, -0.1040600836, -0.0236267745, -0.0627493560, -0.0669217333, -0.1550759673, 0.1047799140, -0.1365411878, -0.0901609436, -0.0329669118, 0.0358682871, 0.1184111685, 0.0438001007, -0.0882300138, -0.1218842268, 0.0835147202, -0.0469260737, -0.1143990904, 0.1101386696, 0.0803770274, 0.0927103013, -0.1559093893, 0.0393166840, -0.1032625213, 0.0711136758, -0.0435097218, -0.0426815823, -0.0504519343, -0.0938302428, 0.0399532467, 0.1216661483, -0.0404259264, 0.1407819539, -0.0688579753, 0.0893646628, 0.1474992782, 0.0624684691, 0.1485077590, 0.0457195342, 0.0525324494, -0.0503704399, 0.1128086895, -0.0318820626, 0.0997398347, -0.1176051646, 0.0864937454, -0.0457415879, -0.1524076760, 0.0357734114, 0.1090482622, -0.1046641022, -0.1569748521, -0.0689159930, -0.0327014178, 0.0958683044, -0.0450458452, 0.1132978648, -0.0959308892, 0.0981382579, -0.1568914354, -0.1006068215, -0.1436037421, 0.0138328671, 0.0414405465, -0.1322170496, -0.0675875768, -0.0490178987, -0.0259955525, 0.1131146997, -0.1469261497, 0.0731086880, 0.1568524688, -0.1366476566, -0.1472805887, 0.1494299620, -0.0039999783, -0.1163316816, 0.1268925220, 0.1274181157, 0.1255963296, 0.1501549631, 0.0857327878, -0.0631710812, -0.0373275504, -0.0992525071, 0.1333480924, 0.1566111892, 0.1313456148, 0.0857404768, -0.0293122381, -0.0908341035, 0.0782615691, 0.0087919831, 0.0678752810, -0.1397273242, -0.0668665022, 0.0625816435, -0.0892604664, 0.1364042312, -0.1365451515, -0.0616181418, 0.0051972866, -0.1162879169, -0.0698307529, -0.0783503428, -0.0049081892, 0.1041416973, -0.0066460371, 0.0730328411, -0.1152778864, 0.0581016541, -0.0893319026, -0.1359934211, -0.0703185201, 0.1129162163, 0.0748932362, 0.0130386651, -0.0636839867, -0.1566566974, 0.0333810300, -0.0199846178, -0.0456940532, -0.0487140566, -0.1251574457, -0.0685856491, -0.0409043804, 0.0752557665, -0.0361666605, -0.1343164891, -0.0086845160, 0.0154771507, 0.0911122710, 0.1005883366, 0.0136132091, 0.0432275534, -0.0857724100, 0.0340501517, -0.0893466771, 0.0089992881, -0.1168226451, 0.0320720673, 0.0973830372, 0.0212104917, -0.0969476253, 0.0555751175, -0.0626158714, 0.0439155698, 0.0838656127, -0.0716190785, 0.0695119947, 0.0289418250, -0.0702824444, -0.1562880576, -0.0266365260, -0.1216757223, -0.0518192574, -0.0153420419, -0.0587988347, -0.0558153540, -0.0495722368, 0.0980647355, 0.0351677686, 0.0565969348, -0.0261697173, 0.0687054545, 0.0707696080, -0.0337868705, 0.0023938864, 0.1293220073, -0.0779250786, -0.0360550061, 0.0930190235, 0.1534434408, 0.0417848080, 0.0353689194, 0.0525078028, 0.0052795857, -0.0065806210, -0.1458303779, -0.0159212649, 0.0331410021, 0.0660046339, -0.1124010980, -0.1511490792, 0.1555572003, -0.1473468244, 0.0260405689, 0.0250873119, -0.1349148899, -0.0715550706, -0.0161527544, 0.0631538928, 0.1398389488, -0.0410382450, 0.0466772020, -0.0581477657, 0.1022396535, 0.1245694011, 0.0992566794, 0.1045105308, 0.1376447529, -0.1040499061, -0.0681431964, 0.0489033759, -0.0375976562, -0.0168898851, 0.1104527861, 0.1444264799, 0.0853100866, 0.0972735137, 0.1455035657, 0.0985238701, -0.1065416187, -0.1489209086, 0.0246961713, -0.0413672328, -0.1197500303, -0.1346879601, -0.1208362430, 0.0420269370, 0.1037171632, 0.0623062253, -0.0265828073, -0.0867267922, 0.0775088221, -0.0797535479, -0.0842435956, 0.0982117206, 0.1258007437, -0.0128561705, -0.1047730893, 0.0024989098, 0.1181941479, 0.1575798243, 0.0871663839, 0.0119755566, 0.0924263448, 0.0895899385, 0.1113258451, -0.1452410519, -0.0392654911, 0.0256530046, 0.0473013073, 0.0921005160, 0.1032550186, 0.0079747438, -0.0558296815, 0.0705934465, 0.0621730089, -0.0792587698, 0.1187734157, -0.0888572931, -0.1399458945, -0.0974834859, -0.1426758617, -0.1521956325, 0.0487860888, 0.1460278779, -0.0959069878, 0.1420164555, -0.0195451379, 0.0047020167, 0.1075751632, 0.1155363172, -0.0102155507, -0.0666887984, -0.0774049312, 0.0326092392, -0.1566895694, -0.0036533922, -0.0987938493, 0.0587438643, 0.1033803672, -0.0712857991, -0.0157000870, -0.0755777061, -0.0832152888, 0.1004697233, -0.0042304248, -0.0098135024, -0.0388258323, -0.1239091307, -0.0556403324, -0.0875196829, 0.1321210116, -0.0195840448, -0.0079971850, -0.0454694480, 0.0462951362, -0.1345111132, 0.1363329142, -0.0666134804, -0.0092124194, 0.1101176292, -0.1159100384, 0.1254352480, 0.1303146929, -0.1461405754, -0.0739236623, 0.1013901085, -0.1099695116, 0.0062647164, -0.0214595646, 0.0431553572, -0.1370769143, 0.1410215944, -0.1102205664, 0.0883676857, 0.0729232132, 0.1468083411, -0.0060123056, 0.0644079298, -0.1332428008, -0.0361928642, 0.1101274341, -0.0318515301, -0.1398353279, -0.0726274028, -0.0036449134, 0.1303785294, 0.1162923127, 0.1026147753, -0.1367873251, 0.1229241937, 0.0004082620, 0.1250226051, -0.0170772076, -0.0994823128, 0.0177325010, -0.1411841065, 0.0671919137, -0.0544847921, -0.1440005451, -0.0536821038, 0.0092630088, -0.0934097320, -0.1257062405, 0.0047090352, 0.0393907279, -0.1549814194, -0.0671243891, 0.1018737406, -0.0437691137, -0.0216497779, -0.0940246135, -0.0956232026, 0.0650957823, -0.1430676579, 0.1255774945, 0.1486400515, -0.1332550049, 0.1319866031, 0.0072249919, -0.0199013352, -0.1551089585, -0.0779755935, -0.1137697697, -0.0866578445, -0.1330631971, 0.0255440176, -0.0251831859, 0.0309949368, -0.0664156079, -0.0404552221, -0.0759427696, 0.0343162119, 0.1301894039, -0.1272400618, 0.1311190873, -0.0690240711, 0.0602513850, -0.1139234304, 0.0102009624, 0.0935261101, 0.0765048414, 0.0890436620, 0.0102930963, -0.1237562746, -0.1002826989, -0.1361011863, 0.1080763787, 0.0066870153, 0.1287026554, -0.1252010614, 0.0605500937, -0.0795414299, -0.1164613217, -0.0614387393, 0.1249607652, 0.1454571337, -0.0867191032, 0.0303094089, 0.1027684361, -0.1416191012, -0.0969942510, 0.0395348370, -0.0732409656, -0.1534875929, 0.0524878502, 0.1164896637, 0.0651647300, 0.1169510037, 0.0102752298, -0.0806831270, -0.0027329475, -0.1559330225, 0.0546078682, -0.0697014555, -0.0874443576, 0.0626224279, -0.0504237041, -0.0636827424, -0.0918620676, 0.0582802743, -0.1182595938, 0.0343828648, 0.1518606097, -0.1369258165, -0.1016632915, 0.0276336968, 0.1173978299, -0.0496247858, 0.0751110464, -0.0395856947, -0.0451501906, 0.1170885712, -0.0643111169, 0.0977160782, 0.0611394942, -0.0360634476, 0.0465403199, 0.0287355483, -0.0830571130, 0.0936055332, -0.1377578676, -0.0939611644, -0.1412226260, 0.1149963289, -0.0028734058, -0.0437408760, 0.0832629353, -0.0192392319, -0.0128377676, -0.0331207216, 0.0861418396, 0.0747172236, 0.1390062720, -0.0746605694, -0.1150751114, 0.1395945102, -0.0460766777, 0.0900041610, 0.1387156993, 0.1407556087, 0.1437502056, 0.0990187079, 0.0562189817, 0.0472675413, -0.1136865765, 0.0707532465, -0.0968150347, 0.0465508699, -0.0817107558, 0.0464191884, 0.0018528253, 0.1520305127, -0.0302276462, 0.1442581564, -0.0289161950, -0.1192134470, -0.1290411353, -0.0733572245, -0.0960968286, -0.1410139352, 0.0692988485, 0.0705289543, -0.1175200492, 0.1523971707, -0.0405861065, 0.0375082791, -0.0625123531, -0.0769905671, -0.1512321979, 0.1121763736, -0.1463181376, 0.1399649233, 0.0648375303, -0.0903215706, 0.1211497039, -0.0083932281, -0.0703414008, -0.1304576397, -0.0037072599, -0.1384882629, -0.1191196963, 0.0627455860, 0.1042931527, -0.1401323974, 0.1214508861, 0.1271044463, -0.0932035670, -0.1158480644, -0.0757199377, 0.1144601554, -0.0310730785, -0.0745743588, 0.0785990357, -0.1170756370, -0.0207926482, 0.0168042481, -0.0490809977, -0.1032788008, -0.1362173706, -0.0742346644, 0.0580191463, -0.1166258678, -0.0859263316, 0.0094214231, -0.1256490946, -0.0375730768, -0.1332592666, -0.0684091151, -0.1420344859, -0.1006537154, -0.1499547511, -0.1424200535, -0.0159631819, -0.0380512998, -0.0277040452, 0.0024270266, -0.0577476099, -0.0661830157, 0.1233980805, -0.0176248401, -0.1073152795, 0.0228987634, -0.0468137339, -0.0198917687, -0.0240211189, -0.1439504474, -0.0362941548, -0.0549683347, -0.0193112344, 0.1572484523, -0.0810286626, -0.1462726742, -0.1072750539, -0.0022888631, -0.0698704496, -0.1433571279, 0.0746395290, 0.0434404314, -0.1419654936, 0.1071533710, -0.1278826892, 0.0499948561, -0.0857215598, -0.1575717926, -0.0249981284, -0.0392699838, 0.0055126250, -0.0747793913, -0.0362451896, -0.0741541460, 0.1065055877, -0.0308174640, 0.1315998286, 0.0944231004, -0.0411831960, -0.0033791512, 0.1571762115, -0.0533185899, -0.1216425449, 0.0434900373, -0.1191827953, -0.0312269181, 0.0299796313, -0.1580730230, 0.0253857672, -0.1329713762, 0.0613280237, -0.1206290945, 0.0082327127, -0.1069492400, -0.1489938200, -0.1122503430, 0.1490091830, 0.1187816113, -0.0853745937, 0.0630288124, 0.1469024569, 0.0459962636, 0.0490611345, -0.1531807780, -0.0500305593, -0.0305703133, 0.0155525804, 0.1323623806, -0.0107093155, -0.0057970136, 0.1439448744, -0.0891484693, 0.0893196464, -0.1140596643, 0.1287385374, -0.1556364894, 0.1303961128, 0.0011571199, 0.0496876985, -0.0891565308, -0.1073661745, 0.0612982810, 0.1192809492, -0.1141251028, 0.1390029639, -0.0005877763, 0.0810624808, 0.0519193113, -0.1499426961, 0.1307873875, 0.0845265090, -0.0633767173, 0.0861172974, 0.1362356991, -0.0498254448, 0.0400243104, -0.0364534259, -0.0105531365, -0.0908190608, -0.0991647840, -0.1417886615, -0.1375965625, -0.1301942915, 0.0785823017, 0.0707642585, 0.0130141973, 0.0337668210, 0.0646976978, 0.0424383283, -0.0992287993, 0.1542738825, 0.1570647210, -0.0756044760, 0.1307616681, 0.0075973570, -0.1352582872, 0.1394375414, 0.0109820813, -0.0089682937, 0.0014212281, 0.0055535287, 0.0155647993, 0.1425175220, 0.1167979687, 0.0491571873, -0.1467646956, -0.1088629067, -0.0145764053, -0.1217222810, -0.0362372324, 0.1561631709, 0.1303961724, -0.0928733349, 0.1573104113, 0.0711954683, 0.0249624252, 0.1479898840, 0.0188979954, 0.1448877603, -0.0141742527, -0.0179976672, 0.1080776304, -0.0091561824, 0.1408774108, -0.1158387065, 0.0569891036, -0.0052976012, 0.0279187262, -0.0120635480, -0.1540378928, 0.0263137966, 0.1559518725, 0.0614426583, -0.0571991503, -0.0855904073, 0.1466400474, -0.0133651644, 0.0133952051, 0.1415647417, 0.1080335528, 0.0106682181, 0.0943796188, -0.0824178085, 0.0887100846, -0.0737331808, 0.0665898472, 0.0001785755, 0.1486550719, -0.1042224467, 0.0042974502, -0.0353829786, -0.1561557651, 0.1193899065, 0.0926932245, 0.0925814956, -0.0235154480, -0.0228897184, -0.0134731233, 0.0212853998, -0.0083522797, -0.1559010893, 0.0284130871, -0.1102640331, 0.0051958859, 0.0426100791, 0.0149978697, 0.0379667878, 0.0299760848, 0.0533654839, 0.0137141198, 0.1005180925, 0.1001953632, 0.0199817419, -0.0609957203, 0.1053757221, -0.0024010092, 0.0129579902, 0.1112359017, -0.1151593700, 0.0652186424, -0.1281876266, -0.0009226054, 0.1031678170, 0.0640601665, -0.1080107540, -0.1395056397, -0.0626277104, -0.0445829630, 0.1571168751, -0.1153775975, 0.0824275315, 0.0090023428, -0.0274990797, 0.1253261715, -0.0934783369, -0.1322475821, -0.1564199477, -0.0633764565, 0.0402953476, -0.1084472165, -0.1053059399, 0.0752198398, -0.0552708954, -0.0348010808, -0.0997538120, 0.1062144488, 0.0064757466, -0.0209487528, 0.0351771414, -0.0167749226, -0.0095004737, 0.1086986512, 0.0266004056, 0.0440580249, -0.1581138074, -0.0444957688, -0.0512506291, -0.0947142467, 0.0184185207, 0.0750898719, 0.0738446862, -0.1521952599, 0.0976251811, 0.0254235417, 0.0029251575, -0.0020060986, -0.0056772083, 0.0723180622, 0.0286525339, 0.0363479853, -0.0190095752, 0.0587915629, 0.0911550969, -0.0396059752, -0.1360480785, -0.1261498630, -0.0629847050, 0.0357713252, -0.0637058541, -0.0643575266, -0.0922988281, -0.0073433965, 0.1120384783, -0.0492078140, -0.0395027995, 0.1469574720, 0.1394747645, -0.1051051244, 0.0016620755, -0.0279109180, 0.1415021569, 0.1447445005, 0.0506756306, 0.1202958375, 0.0677444786, -0.1228378564, -0.0288466066, -0.0782872736, -0.1370006055, 0.0860874802, 0.0292835534, -0.1572350860, 0.1131151468, -0.0481197983, -0.1089435369, 0.1084211022, -0.0704735294, -0.0322569609, -0.0113812238, 0.1567207724, 0.0444452465, -0.0953711197, -0.0379602239, 0.1523674577, -0.0125021189, 0.1266316324, 0.0538533628, -0.0754062608, -0.0819444433, -0.1532525122, -0.1304615587, 0.1516516954, 0.1225617975, 0.0968808681, 0.1036825925, -0.1229160726, -0.0709036961, -0.0312878042, -0.1310560107, 0.0687255859, 0.0624834001, -0.0584699661, 0.0589795560, 0.1033277661, -0.0287753195, -0.0890196934, 0.0775456131, -0.0165589452, 0.1373897642, -0.0553887710, -0.1435332894, 0.1347929090, 0.0216602981, -0.1212741733, -0.1237480938, -0.0775441900, -0.0996895730, 0.0185628235, 0.0608308315, 0.1535047442, -0.1383443773, 0.1259770244, -0.0749539658, 0.0173762292, -0.1224570721, -0.0703826845, 0.0281939954, -0.0214926898, 0.1174593419, -0.1062889323, -0.0467814654, 0.0532505512, -0.0973809138, -0.0758198723, 0.0770602226, -0.0636778399, -0.0360524058, 0.0906695575, 0.1324896663, 0.1089625806, -0.0135561675, 0.0331142396, 0.0231025219, 0.1291253716, 0.0845691562, -0.0945399702, 0.1568347365, 0.0936775655, 0.1558073312, 0.0915643424, -0.1322346628, -0.0044516325, 0.1069802195, -0.1248922423, -0.0551149771, 0.0470799208, -0.0241936296, -0.1218970791, 0.1174075156, -0.1336837709, -0.1356652975, 0.1027389020, -0.0991212875, -0.0668322742, 0.0620908588, 0.0740005225, 0.0152982026, 0.0602844059, 0.0435250998, -0.0564029813, 0.0346492380, 0.1562464386, 0.0565240979, -0.0795950294, 0.0536235571, 0.1042317301, 0.1099039465, 0.1166957468, -0.0371907875, 0.0047488064, -0.0569440126, 0.1405636817, -0.1145749465, -0.0989797264, 0.0124513358, 0.0861073583, 0.0897148252, 0.0990076512, -0.1159650683, -0.0057886094, 0.0750630200, 0.0802020282, 0.0847379267, 0.0879259109, -0.1577975601, 0.0377617925, -0.1466588378, -0.0937128514, 0.1534633487, 0.1096440405, 0.1241249591, -0.1169921309, 0.0504940152, -0.0041247308, -0.0595663488, -0.0280034691, -0.0301724225, 0.0833680779, -0.0452192500, -0.0292362422, 0.1223931760, -0.1246660203, -0.1312424988, -0.1010835022, -0.0056392848, -0.1416863054, 0.1319441348, -0.1479212195, 0.0379773825, -0.1023408622, 0.1116795093, -0.1464026570, -0.1547243744, -0.0180358142, -0.0907013714, 0.0901337266, 0.1529675275, -0.0506552756, 0.1283278614, 0.0214024484, 0.0597140491, -0.0738475546, -0.0792841017, 0.0297831893, 0.0317103118, 0.0044066310, 0.0628647804, 0.0800900757, 0.0095256120, -0.1067005098, 0.1078889221, 0.0267195404, 0.1301544160, 0.0358820111, -0.0799233392, -0.0316495895, 0.0496553183, 0.0228199065, 0.0518634319, 0.0831603259, 0.0878030956, 0.0375150144, -0.1009376943, -0.0444613844, 0.0881118327, 0.0726186186, 0.0725501180, 0.0595794618, 0.0654979795, 0.0592896193, -0.0731648207, 0.1454973072, 0.0461029857, 0.0684714317, 0.0408941656, -0.0160369873, 0.0215547830, 0.0122155100, -0.1078311279, -0.0740991458, 0.1314676553, -0.0431413427, -0.1473056525, 0.0421061367, -0.0832854807, 0.0893530101, 0.0623485297, 0.0057239980, -0.0350638703, 0.0904640257, 0.0018720478, -0.1048486382, 0.1021726876, -0.0330110937, -0.1218678281, -0.1417661458, -0.0387612209, -0.0695308745, 0.0060743839, -0.0197850466, 0.0730105639, 0.0233499706, 0.1185179800, 0.1203457862, 0.0035958290, 0.0264395177, -0.1307586581, 0.0245651007, 0.0250498503, 0.0296626687, 0.0476588309, -0.1188275814, -0.1141772047, 0.1060093790, -0.0770357624, 0.0294283181, -0.1160935834, -0.0501545444, -0.0525335073, -0.0431265980, 0.0256975293, -0.0899649560, 0.1069554538, -0.0991722494, -0.1160715297, 0.0662723184, 0.0251828879, -0.0222934932, 0.0956369191, -0.1160705537, 0.0830163956, -0.1423988193, -0.0280177593, 0.0000003427, -0.0174752921, 0.0588390231, -0.0951316282, -0.0060428381, 0.1539153606, -0.0131704211, -0.1297443807, -0.0453722253, 0.0069524348, 0.0953349918, -0.0596239865, 0.0914230496, -0.1305013299, -0.1116973236, 0.1234227270, 0.0401020348, -0.0287689865, -0.1431389749, 0.1470786184, -0.0492285490, 0.0665300190, -0.0761355534, 0.1043704003, -0.0704764724, -0.1426459253, 0.1117972583, 0.1236259788, 0.1232973188, 0.1239633411, -0.1336258799, -0.0973952413, 0.0357429534, 0.0049260557, 0.1238179058, 0.1371481270, -0.1501517594, 0.0898677707, 0.0231358111, 0.0501978993, 0.1110767573, -0.0582628176, 0.0387235582, -0.0715797991, 0.1393189877, -0.1334494501, -0.0398347229, 0.1207596809, 0.0520248562, 0.0680905432, -0.1444889456, 0.1303695589, 0.0742747337, -0.0747246966, -0.1565385461, 0.0554401129, 0.0493199229, 0.0627514273, 0.0551490933, 0.0286293626, -0.0665371791, -0.1257112175, 0.0033664405, 0.0868553370, -0.0051869899, -0.1538901329, 0.1267736703, -0.0882011354, -0.0740252212, 0.0679368377, -0.0316195488, 0.0552730858, -0.0836130008, -0.0004649162, -0.1491639465, 0.0300544202, 0.0327346325, 0.0213737935, -0.1030941308, 0.1078590900, -0.1045608893, 0.0350004584, 0.0487007052, -0.0331908390, -0.1382989883, -0.1041111201, -0.0222956836, -0.0960286707, 0.0936069638, -0.0047830343, 0.0831871331, -0.0822948366, 0.0326801240, 0.1082630008, -0.0044054240, -0.0695628822, -0.0525824353, -0.0201748312, 0.1390641183, -0.0539078340, -0.0863492191, 0.1304358989, 0.1432252675, 0.0538807362, -0.1080533117, 0.1161010712, -0.1172203124, -0.1436754018, 0.0982153565, -0.0735558495, -0.0493482724, -0.0098675340, -0.1553275287, 0.0423628092, 0.0296628326, 0.0954946429, 0.1528421491, -0.0083644986, -0.0373833477, 0.1007639021, 0.0068010092, -0.0686037838, -0.0513119996, -0.1348285675, 0.0248986483, -0.0072705299, 0.0420271605, -0.1304411739, 0.0991918296, 0.1502478570, -0.1228651851, 0.0078854859, 0.0748163015, 0.0734416693, 0.0289500058, -0.0843150690, -0.0932258442, 0.0203616172, 0.0408534855, 0.1248883456, 0.1288140863, 0.0119561851, -0.0139597505, 0.0502939522, 0.1279882342, -0.0265554041, 0.0808967501, 0.0985266417, 0.0484742224, 0.1050407141, 0.1148819178, -0.0342728645, -0.0591755435, 0.1390100271, -0.0222919881, -0.1405493617, 0.0418229550, -0.0277147442, -0.0046448410, -0.0863682926, -0.0623238683, -0.1002024040, -0.1475230902, -0.1355348676, -0.0661432818, 0.0096995085, -0.0377392098, 0.1220452636, 0.1441499442, 0.1510653049, 0.0325403363, 0.1569571644, 0.0227002203, 0.0440771431, 0.0138907731, -0.0652091429, 0.0992477089, -0.0813841820, -0.0751073584, -0.0824259073, 0.0736049712, -0.1558564156, 0.0115068704, -0.0761398524, 0.0568442643, -0.1139548644, -0.1297556460, -0.0815479755, -0.1294113547, -0.0859878510, 0.1045528501, 0.0154374987, 0.0729830414, -0.0726413503, -0.1014013663, -0.1368488073, 0.1069488972, 0.0629239678, 0.1377069205, 0.1486135572, -0.0288722813, -0.0602135733, -0.1262927353, 0.0659918487, 0.0919558853, -0.0723243579, -0.0170711428, -0.1246328503, -0.1316000223, 0.1163076907, 0.1288904697, -0.0101889670, -0.1388286650, -0.0851751715, -0.0713012516, -0.0066176802, 0.0024534911, 0.0409312993, 0.1353282779, -0.0926221237, 0.0641575009, 0.0056739002, 0.0819813013, -0.1285440177, -0.1291550547, 0.0849506110, 0.0139936805, -0.0930938646, 0.1163382679, -0.1519798487, -0.0277933031, -0.1181124598, 0.1201533526, -0.0636262745, 0.0830505937, 0.0420797467, -0.1043885350, 0.1291036755, 0.0948132128, -0.1490208060, -0.0441306308, 0.0688436925, -0.0636965409, 0.0795601308, -0.1495594233, -0.1194167137, -0.0489183739, 0.0056003034, 0.1532797068, 0.0009245276, -0.0771078393, 0.0476589054, 0.0766912103, -0.0007741153, 0.1390864700, -0.0145008713, 0.0864474624, 0.0771804452, -0.1259451210, -0.1218695194, 0.0375177413, 0.0552802086, 0.1275284439, 0.0260487497, 0.1485452801, 0.1064951271, 0.1448891908, 0.0111269504, 0.0332103670, 0.1550031453, 0.0618727058, 0.0439423323, 0.0334557444, 0.0543969274, -0.1416175067, 0.0898984224, 0.0806812793, 0.0323186815, -0.0443225875, -0.1269595623, -0.0738541111, 0.0077884495, 0.1465689987, -0.1529634893, 0.0561461896, 0.1417722851, -0.0477237850, -0.0337387696, 0.0817060024, 0.0435712337, 0.0059142560, 0.0355922729, -0.1083663180, 0.0769926757, -0.0115972757, -0.0914890915, 0.0849802047, -0.1072891206, 0.0103779435, -0.0546156392, 0.0675555319, -0.0627487153, -0.1134837270, -0.0672043487, -0.1330879033, 0.0318430513, 0.1403346807, 0.1553019136, 0.0089690536, -0.1103791296, 0.0144992769, -0.0842829570, -0.1207960173, 0.0334556997, -0.0018214583, 0.0463817269, 0.1338966042, -0.1580849737, -0.1058211103, -0.0858478844, 0.0812524706, 0.0516890436, -0.1397043765, -0.1401263177, -0.0232972950, 0.1232984513, -0.0872230008, 0.1498732418, -0.0738802329, 0.1494727880, -0.0245283395, 0.1381780952, -0.0756204203, -0.1008351892, 0.0977666825, 0.1247271746, -0.0524180382, -0.0181497037, -0.1149113625, -0.1197657138, 0.1014490873, -0.0701578557, -0.0409628153, -0.0815788135, -0.1261761785, -0.0433979481, -0.0600241497, -0.1196368635, -0.1399509907, 0.0501255542, 0.0768735558, -0.1403109580, 0.0688915700, -0.0904520005, 0.1235650033, 0.1572786719, 0.1147320420, -0.0425385237, -0.1119401008, -0.1476907283, -0.0373126268, -0.0201646537, 0.0535316169, -0.0059449822, -0.0729192570, 0.1000388116, -0.0036300272, 0.0512127876, 0.0753144622, -0.1530636102, 0.0450643152, -0.0010902882, 0.0176842809, -0.0825537443, 0.0634815097, 0.0563162416, -0.0687710866, 0.1369756311, 0.1051769704, -0.1547964811, -0.1297687590, 0.1513700634, -0.0997227430, -0.0701103583, -0.1244553700, -0.0892476887, 0.1248948425, -0.1539563984, -0.0906033218, 0.0658101588, 0.1002515703, 0.1393172294, -0.0428900495, -0.1273771375, -0.1515601724, -0.0081533194, 0.0175606757, 0.0632001460, -0.1551296115, 0.0724248886, -0.0412988886, -0.0283269137, 0.0817515403, 0.0523667783, 0.0022249371, -0.1251827329, -0.0011565536, 0.0240472108, -0.0692343861, 0.1420771033, 0.0377792418, -0.1231194511, -0.0854243487, -0.0315469354, -0.1359014660, 0.0739276558, 0.1423061341, 0.1374030560, -0.1220268756, 0.0683985204, -0.1202334613, 0.0134823173, 0.1557960659, -0.0332926214, -0.1534218937, -0.1511810869, -0.0712300017, -0.1111443043, 0.0604150742, 0.1059129387, -0.1352879852, -0.1283750534, -0.1461711526, -0.0042573065, 0.1570124179, -0.0452055708, 0.1315189749, 0.1257057041, 0.1528270692, 0.0264679044, 0.1061218530, 0.1181988269, -0.0650897548, 0.0823856890, -0.1175041795, -0.0921047255, -0.0360343829, 0.1154367179, -0.1492695659, -0.1516337246, -0.0510635376, 0.0029049516, 0.0273678601, -0.0235359967, -0.0789504871, 0.1137831956, -0.1066792160, -0.0883005038, 0.0296749324, -0.1139021665, -0.1308434308, 0.1461029202, -0.1233239174, -0.0188183337, -0.1064221933, -0.0106637776, 0.1140132993, -0.0958334059, 0.0784779489, 0.0523891598, 0.0242492706, -0.0463259667, -0.0275714993, -0.1017974168, 0.0272632390, -0.0086330175, -0.0398495346, 0.1502372175, -0.0552209467, 0.0690271556, 0.0559464693, 0.0457197577, -0.1132797450, -0.0540092811, -0.0177598298, 0.0429968089, -0.1102018729, -0.0399722084, 0.0127851069, -0.1575693786, -0.1558270454, -0.0708171800, -0.0070630461, -0.1257696450, 0.0838186741, 0.1379285008, 0.0022561103, -0.1075234413, 0.1240208596, 0.0152001083, 0.0803069770, 0.1359323412, 0.0413365066, -0.0622674376, 0.1057768017, -0.0715702251, -0.0566729307, -0.1343869865, 0.0073538721, 0.0234910995, -0.0207376927, 0.0646960139, 0.0720622540, -0.0096363276, 0.0956229419, -0.0273679346, 0.0039871335, 0.0001585186, 0.0925243050, -0.0300861299, -0.0864900202, -0.0294353962, 0.0413334221, -0.0425154492, 0.0904751122, -0.0636169985, 0.0621768534, 0.0567151606, 0.0428833812, 0.0803261697, -0.1166521013, -0.0823344961, 0.1179458648, -0.0409938768, 0.0721945316, 0.0312286913, 0.0236835033, -0.0566646755, 0.0793987811, -0.1489569545, 0.0808445513, -0.1178758740, 0.1250334829, 0.0793677866, 0.0905722231, -0.0252305716, -0.0928498134, 0.0751469731, 0.0925999433, 0.0978451520, 0.0498712808, -0.1163130179, 0.0264106393, 0.0536920577, -0.0934754014, 0.0459526926, 0.1288927943, -0.0647598282, -0.0477896780, 0.1575137526, -0.1474220604, 0.0897181034, 0.0434508771, -0.0871578604, 0.1418393999, 0.0021008253, 0.1370829791, 0.0244838595, -0.0880651996, -0.0087186247, 0.0115696341, 0.1270390004, -0.1313382536, -0.1535816491, -0.1295050681, -0.1116908044, -0.0182990879, 0.0983365327, -0.0565022379, -0.1127655208, -0.0580215156, 0.1090121418, 0.0100369453, -0.1371686608, -0.1163888276, 0.0500981063, 0.0737868547, -0.1028265879, 0.1082410961, -0.0700581074, 0.0579186827, -0.0995208323, 0.1246607155, -0.1453292668, 0.0296043158, -0.1382340342, -0.0856911391, 0.1001221091, -0.0333203301, -0.0368537381, 0.1519011706, -0.1047889963, 0.0347800851, 0.0881367475, 0.0645454079, 0.1168513745, -0.0869535431, 0.1205526441, 0.0634855926, 0.0898822397, 0.0952772051, -0.0586650819, -0.1173199564, -0.1157762110, -0.1356353611, -0.1190294474, 0.0380434245, -0.0192522705, 0.0477983057, 0.0492927879, 0.0274070650, -0.1090510935, -0.0502323136, -0.0915617347, 0.1096271425, -0.1108523756, -0.0285139680, -0.0080909729, -0.0238057971, 0.1292027384, -0.1294640154, -0.0387374312, -0.0729842111, 0.1572729796, -0.1535774320, -0.0481571183, 0.1216150373, 0.0113201588, -0.1497128159, 0.1351176053, -0.0345957428, 0.0439759642, 0.1547491103, -0.0889646932, -0.0629169196, -0.0570781007, 0.1035754532, 0.1299513429, -0.0512028337, 0.1576749831, -0.0868531168, -0.1220032722, -0.0261074752, 0.0917124450, -0.1436542273, 0.1508586556, -0.1362165511, -0.1268038005, 0.0315320045, 0.0734480023, -0.1291813701, -0.0537365377, 0.1280347258, -0.0198658258, 0.1553798467, -0.0561061129, -0.0912766680, 0.0979376882, 0.1192921251, 0.1106164306, -0.0169998556, -0.1058464795, 0.0939608663, -0.1182192191, -0.0544458926, 0.1317874640, 0.1268121153, -0.0546614081, -0.1394430995, -0.0806613341, -0.0937579051, 0.0120936632, -0.0710997581, -0.0823838785, 0.0581773221, -0.0985140949, -0.0335109681, 0.0001687258, -0.0121218711, -0.0195034146, -0.0965738893, -0.1314185113, -0.1391939521, -0.0576066598, 0.0326038152, -0.1469981521, -0.0959707722, 0.1096879393, -0.0861879513, 0.0903259367, -0.0629938617, 0.0287292153, 0.1450210065, -0.0160206705, 0.0048841387, 0.1304213554, -0.0804629773, 0.0358097106, 0.0174344331, -0.0853345916, -0.0863035247, 0.0701622218, 0.1076507717, -0.0390168056, -0.0265332311, 0.1375420839, 0.0001755506, -0.1173295677, -0.0257644355, 0.1027156860, 0.0212370306, -0.0517894030, -0.0068622231, 0.1100171655, 0.0337499678, 0.0070611984, 0.0318573415, -0.0344292372, 0.0416412950, 0.0350090563, 0.1458781809, 0.1513605565, -0.0349684954, 0.0702058375, 0.0019757599, 0.0572521836, 0.1167903095, -0.0854726061, -0.0789876133, 0.0095365494, -0.1005704850, -0.0417799428, 0.1474343985, -0.0609753206, -0.1330526173, -0.1151097566, 0.0450583994, -0.0161453336, 0.0285701305, -0.0029925555, 0.0491526276, 0.0755532831, 0.0926041454, 0.1235591024, 0.1554377228, -0.0954356194, 0.1200007647, -0.1001241803, -0.0411137566, 0.0941018015, -0.0982921720, -0.1014929339, 0.0759768039, -0.1260876209, -0.0819859058, -0.0920065269, -0.1134979352, 0.0424518883, 0.0988269895, -0.1019419134, -0.0998870283, 0.0482682884, 0.0691426694, -0.0895900130, 0.1370373517, -0.0437998027, 0.0978215188, 0.1011924893, -0.1386130005, 0.1385588199, 0.1157905310, 0.0234419405, -0.0342679247, 0.0632435381, -0.1316958070, 0.0826574117, -0.0347656459, -0.1490710974, -0.0230295062, -0.0726302341, -0.1543542892, 0.1186368912, -0.0954451561, -0.0924040824, -0.0030334592, 0.0847587734, 0.1060584038, -0.1283185482, -0.0909107402, 0.0454076231, -0.1522640884, -0.0092674643, 0.1372825950, 0.1570931226, -0.1577942520, 0.0605499148, 0.1419371516, 0.1475165039, 0.1531144232, 0.1430111378, 0.1218382269, 0.1059359759, -0.0136401951, 0.0672025383, -0.0711342916, -0.0454287007, 0.0862213522, -0.1356275678, 0.0207225382, 0.0079015046, -0.0402842984, -0.0127907693, -0.1110838056, -0.0913483649, 0.0740962774, -0.1341230273, 0.0457036644, 0.0688752383, 0.0503259152, 0.1296851486, -0.0233233869, -0.0067952424, 0.0174751431, -0.0780823529, -0.0754997879, 0.0831227452, 0.0220524967, 0.1370766908, 0.0329731703, 0.0588693321, -0.0511051938, 0.0591408610, -0.0405265465, -0.0091058612, -0.1343870163, 0.1011801213, 0.0289101303, -0.1047636271, -0.1185618937, -0.0814777091, -0.0676739067, -0.1130727828, -0.1086706519, -0.1155676320, 0.0584484786, -0.1501337886, -0.0043329298, 0.1324128062, 0.1481838971, 0.0466811508, -0.0340139642, 0.0667444021, 0.0072091967, 0.1380665153, 0.1099424809, -0.0023129880, -0.0983450562, -0.1476349384, 0.0979170352, -0.0397791564, -0.0652468801, 0.0983149856, -0.0036264360, -0.0568372533, -0.0391410142, 0.0597142428, -0.0547415912, 0.0443142205, -0.0566515997, -0.0462496355, 0.0706024617, 0.0269602686, -0.1089868098, 0.0663352013, 0.1133321077, 0.1567656249, 0.1114527434, -0.0491061062, 0.1247315854, 0.0181846768, -0.0306726247, 0.1571316272, -0.1576473713, -0.0751677528, 0.0143574327, -0.1548617333, 0.1078380793, 0.1064533442, -0.0478493199, 0.1196398884, -0.1081043929, -0.1152656749, -0.0322093517, 0.1079051644, -0.1278765500, 0.0237570256, 0.1491381973, -0.0747750923, 0.1094932407, -0.0098817050, -0.1530777514, 0.1155375093, -0.0311881751, 0.1324328631, 0.0258874744, -0.0035178363, -0.0462416038, -0.0826520175, -0.1172310263, 0.0052329451, 0.1141276807, 0.0647580922, 0.1394497007, 0.0868258178, -0.1325130463, -0.1490683109, 0.1395795494, 0.0598458350, 0.0204665661, 0.1489724368, 0.0676897764, 0.1361029297, -0.0294992924, -0.0290702581, -0.1096473038, -0.0591225773, 0.1122687906, -0.0590687841, -0.0577737316, -0.1401843429, -0.0808186829, -0.0399422720, -0.1147963405, 0.1473795921, -0.1047368944, -0.0899588466, -0.1503746361, -0.0296935886, 0.1397886127, 0.1119974703, -0.0701282993, -0.0388446823, -0.1079732478, 0.0050232410, 0.0406480432, 0.0109776706, 0.0447279066, -0.1525451243, 0.1070297509, 0.0049046129, 0.1206868738, 0.0512707978, 0.0532566607, -0.0424456373, 0.1409645528, 0.1515517980, -0.0103052258, 0.0150678307, 0.0297368318, -0.0816873461, -0.0206134468, -0.1268059015, 0.0322979838, -0.0971031934, 0.1567592770, 0.1133239120, 0.0228790939, 0.1306229383, 0.0596162230, -0.0925961509, 0.1265754551, 0.1452852339, -0.1371215433, 0.0605495274, -0.1243053675, 0.0491340011, 0.1460559219, -0.0028386861, -0.0869444609, 0.1483113021, -0.0008734018, -0.0973204821, 0.0747220516, 0.0432572663, -0.1023294777, -0.0110428482, 0.0998457521, -0.0488738567, -0.1202919334, 0.0143385082, -0.0893245488, 0.0026312321, 0.1497646719, 0.0384196490, 0.0435320288, -0.0246798545, -0.1249945909, 0.0785414279, 0.1147862524, -0.0999995917, 0.0910231173, -0.1413782835, -0.1035427973, -0.1361812651, 0.0644700527, 0.0697427392, 0.0613003522, 0.1246291548, 0.0119477361, -0.0713467151, -0.0499928594, -0.0515945405, 0.1323911697, 0.0986286551, 0.1081333905, -0.1001165286, -0.1560003459, -0.1337973624, -0.0741990805, 0.1264190525, 0.0478224754, 0.0488396585, 0.0167563707, -0.0858034343, 0.0716151893, -0.0469762459, 0.0817447156, 0.0415163934, 0.0708760619, -0.1011626720, -0.1106701493, 0.0869375914, -0.1417218149, 0.1466669887, -0.0392095149, 0.1016622633, -0.1444865465, -0.1225813255, -0.1149931625, 0.1155506521, 0.0089547336, 0.0997206420, -0.0024917871, 0.0917505175, 0.0790396780, -0.1477570087, -0.1190498769, 0.0447728783, -0.0788511857, -0.0360417739, -0.0613595322, 0.0604615062, 0.1095915586, 0.0272292793, 0.1338698417, 0.1391439289, -0.0717251226, -0.0192953199, 0.0501064360, -0.1131897569, -0.0461619496, -0.1203379631, 0.0036316067, -0.0050133318, -0.0173642784, 0.0661912709, -0.0771697387, 0.0071736425, 0.0403774530, -0.0987658799, -0.0331406295, -0.0211052746, 0.0703131258, 0.0320729613, 0.0990426093, -0.1382749379, -0.0730334073, 0.0831876993, 0.0953892916, 0.0055695176, -0.1195622236, 0.0926446766, -0.1336314976, -0.0869794786, 0.0212634504, 0.1532790214, -0.0373310596, -0.0701442435, 0.0359210670, -0.1396666020, -0.0508410111, -0.1206615567, -0.0364680141, 0.0800059736, -0.0349099487, -0.0162770897, -0.1442915648, 0.0093448609, -0.0594263822, 0.0879631937, -0.0474871621, -0.1395835578, 0.0830193460, -0.0571835041, -0.1336281002, -0.1089096516, 0.0497840941, -0.1131311432, -0.0432576016, 0.0972252339, 0.1554082483, 0.1070269793, -0.0125035495, -0.0123739094, 0.1485247761, 0.0904030651, -0.0355932117, 0.0267542154, 0.1186387390, -0.1373207718, -0.1282673180, 0.1383054703, -0.0338751972, 0.0660647154, 0.0785018802, 0.1291442961, -0.1577419192, -0.0138048232, 0.1384375244, -0.1411838830, -0.0953530222, -0.1057085842, -0.1208236516, 0.0301600844, 0.0453608036, -0.0671860650, -0.0872152746, 0.1512013823, 0.0715561211, 0.1090822369, -0.0929420963, 0.0446113497, -0.1346032172, -0.0504934415, -0.0027918965, 0.1291766614, -0.1469886154, 0.1054840237, -0.1036898941, 0.0063344240, -0.0017421395, 0.1321430951, -0.0811370015, 0.1024833173, -0.1126793027, 0.0485904515, 0.0954730660, 0.0279173255, 0.0544775873, 0.0939532071, -0.0593693480, -0.1347872913, 0.0864987671, 0.0397201180, 0.0874735415, -0.1092624962, 0.0825019479, -0.1454801261, 0.1088244468, -0.1123677716, -0.1337894797, -0.0872512385, 0.0815920085, -0.1304339767, 0.1285989732, -0.0750041455, 0.0788729042, -0.1257354617, -0.1348396093, 0.0297277719, -0.0215850174, -0.0751355588, 0.0153814703, 0.1155767590, -0.1250882745, 0.0122103840, 0.0932276100, 0.0946377069, -0.0310160816, -0.0651234984, 0.0588591844, -0.0265937746, 0.0368806124, -0.1079045981, 0.0580395758, -0.1476609856, 0.0259217471, -0.0176983476, -0.0456782579, -0.0068542361, 0.0051935166, 0.1474733204, -0.0622194484, -0.0946337208, -0.0636519417, 0.0423663557, 0.0682194680, -0.1252710670, 0.0089938939, 0.0891743302, -0.1317843646, 0.1311496943, -0.0600435212, 0.1354950517, -0.0075110644, -0.0509184450, 0.0318437219, -0.0917129740, -0.0297107399, 0.1418525428, -0.1273766458, -0.0615159422, -0.1126756445, -0.1204108298, -0.1183541417, 0.1223635226, 0.1297959834, 0.0167638361, -0.0831681341, 0.1499860734, 0.1083956808, 0.0985615999, 0.0333359390, -0.0551935062, -0.1373098791, 0.0125752836, 0.1143157929, -0.0817035511, -0.0657316670, -0.0237762034, 0.0452151448, -0.0560645014, 0.1238767952, 0.1187963635, -0.0622517169, -0.1060539633, 0.1380928904, 0.0656279624, 0.0655299425, -0.1179302707, 0.0847150832, -0.0898362920, 0.0897573531, 0.0731614679, 0.0613560230, -0.0330521911, -0.0286003351, 0.1546540111, -0.0665132478, -0.1528960913, 0.0352205336, 0.0476940423, 0.1123792976, 0.0716138035, 0.0119846910, 0.1374204904, 0.1473693997, -0.0504912958, 0.0511813015, -0.1385596991, -0.0910071284, 0.0243994594, 0.0774716884, -0.0881232172, 0.0481102914, -0.1486741453, 0.0278285593, -0.0777402148, 0.0090220124, -0.0002007782, 0.0074052215, 0.0834387541, 0.1170620173, 0.0207532942, 0.0020223111, -0.0121053904, 0.1146873087, -0.0205238760, 0.1370771676, -0.0394680426, -0.0761450157, -0.1546510160, 0.0931548625, 0.0277134925, -0.0852613896, 0.0930431932, -0.1413352787, 0.1386589855, -0.0942671150, -0.0888830051, 0.0967721790, 0.0728857517, 0.1003796607, -0.0578154996, 0.1095564514, -0.0832490698, 0.1334214658, 0.1081608385, -0.0063170493, 0.0391361862, 0.0191832483, 0.0694891363, -0.0264773667, -0.1021029502, -0.0108722299, 0.0430403948, 0.1029580683, 0.0271826833, 0.1102576703, -0.1387864500, 0.0777045935, -0.1516478956, -0.0532277003, 0.1525772959, 0.0848038495, -0.1511132717, -0.1368630230, -0.0300050378, -0.0103172511, 0.1276331991, -0.1177515835, -0.0756154060, -0.0396556258, 0.0965769142, -0.0299438536, -0.0368331522, 0.1536911577, -0.0597765148, -0.0939578116, -0.1370741278, -0.0379928350, 0.0866062343, -0.0876006559, -0.0917841494, -0.1018029153, 0.1116295010, 0.0585390627, 0.1151414663, -0.0656575933, 0.0398358554, 0.1526058465, -0.0434170589, -0.0724301711, 0.0245410055, 0.1559250206, 0.0200158954, 0.1200888306, 0.1405936629, 0.1017395109, -0.1527847648, -0.1550061107, -0.0201780051, -0.1355349720, 0.0565622151, -0.0260769129, 0.0973384231, 0.1316052228, -0.0414892584, 0.0762719810, 0.1312925965, -0.0301024467, 0.1046166867, -0.0859181881, -0.0688270256, -0.0169087797, -0.0656540468, 0.1563701183, 0.1329102367, -0.1015008837, -0.1339729130, -0.0778488219, -0.1325698197, -0.1063454747, 0.0211241692, -0.0742207542, -0.1407186538, 0.0265052319, 0.0395060033, 0.1210620552, 0.0737523735, -0.1413866878, -0.1218087971, -0.1533064991, 0.0286505818, 0.0992961377, -0.0187193453, -0.0722995549, 0.1439639479, -0.1358203888, 0.1336513907, 0.0546801090, 0.1124551445, -0.1453412175, -0.1007608473, -0.1487536877, -0.0816611797, -0.1105977297, -0.1380411685, -0.1066479236, -0.0469171405, 0.0502913445, 0.1011250764, 0.0069469362, -0.0784832984, 0.1497073025, 0.1404539794, -0.0682516918, -0.0613544062, 0.0214700699, -0.0592730641, -0.1384776980, -0.0581020340, 0.1421491653, -0.1022704393, -0.0175373852, -0.0609785691, 0.1009546667, -0.0356483236, 0.0744213760, -0.0807109103, 0.0903133899, -0.0480564237, -0.0049848557, 0.0126503110, -0.0074497312, -0.0415957868, 0.1224811226, 0.0098442286, -0.0942097455, 0.0206251591, -0.1055750549, -0.1400410533, 0.0019565672, -0.0629180893, 0.1316672415, 0.0249653608, -0.0534031838, 0.1342837065, -0.0583179295, -0.0031154901, -0.1530555487, -0.0588792786, -0.1497979313, 0.0196665972, -0.0840102136, -0.0405855775, -0.0093592256, 0.0936122686, -0.1554179639, -0.0040254742, -0.0053544790, -0.0928493217, 0.0787546784, -0.0650536790, 0.1517916471, -0.0211602747, -0.1566235125, 0.0091946721, 0.0595711321, -0.0671884790, 0.0477871150, -0.1408372223, 0.1397260576, 0.1112269312, -0.0667391270, -0.0152132660, -0.0174877644, 0.0853423625, 0.0563245714, -0.1112849936, -0.1286692023, 0.1196880192, 0.0849962980, 0.1331224293, 0.0609404594, -0.0630854666, 0.0738758296, -0.0672677904, -0.0553261936, -0.0044391155, -0.0745910928, -0.0611811131, -0.0595384166, -0.0986546278, 0.0225772411, 0.1250172704, -0.1346509755, -0.0178743601, 0.0371369570, -0.1546433121, 0.0462528318, -0.1377711892, 0.1496730894, -0.1096364558, -0.1363378614, -0.1161808893, -0.0420396775, -0.0052497983, -0.1567189246, 0.0238881707, 0.1337785572, 0.0494375378, 0.0550007522, -0.1073098183, 0.1100765020, -0.0862043500, -0.0700419769, 0.0065809637, -0.0122431815, 0.1386121362, -0.0738423541, 0.1264830977, -0.0788720772, 0.0737960935, 0.0136035979, -0.0946993157, -0.0620654523, 0.0002389252, -0.1149054021, -0.0496852472, -0.1489799470, -0.1315903664, 0.1093674749, -0.1010171548, -0.1144438758, 0.1114849001, -0.0492094383, -0.1047742516, 0.1403114051, 0.0969399959, -0.1423859298, 0.1145911664, -0.0899408609, -0.0479193181, -0.1107025743, 0.1355324239, 0.0750475675, -0.1390484869, 0.0913101733, 0.0130165666, 0.1379619688, 0.1473954767, 0.1100168973, 0.0126336813, 0.0806192607, -0.0759264082, -0.1157550961, 0.0876158476, 0.1466044039, -0.1520571411, 0.0002817512, 0.0782286972, -0.0015436262, -0.0780877471, 0.0950059444, -0.0656129941, -0.1462279707, 0.1000223607, 0.0984558910, -0.1477294117, 0.1066874713, 0.1408737749, -0.0808024034, -0.1391354799, -0.1567010283, 0.1448122710, 0.0884802043, -0.0629544705, -0.0610968247, -0.1335761547, 0.1419438869, -0.0345302224, 0.0152690262, 0.0924121588, 0.0145136863, 0.0692047924, -0.0269954801, 0.1379941255, -0.0996864438, -0.0369208381, -0.1173760071, -0.1333297193, 0.1205852181, 0.0321981609, 0.0917660892, -0.0548888743, -0.0822029337, -0.1230871826, 0.1304519624, -0.0978298932, 0.0435545444, -0.0586958081, -0.1085218936, 0.1372176260, -0.0381378904, -0.0070112795, -0.1213542819, 0.1509412676, 0.1392932981, -0.0776645169, 0.1078472286, -0.0817841887, 0.0866308510, 0.0880651623, -0.1159678623, -0.0319828689, -0.0213866085, -0.0424144268, 0.1157662123, 0.1355981678, 0.0748452097, -0.1478438973, -0.1173659414, 0.1520171314, -0.0325281620, 0.1486480981, -0.1428547800, -0.1427838206, -0.0960060209, -0.0647120699, 0.1171826869, -0.0983702838, 0.1218808442, -0.1388218850, -0.1303474605, 0.0587474108, 0.1010798365, -0.0519447103, -0.0869164839, 0.1009404510, -0.0193634033, -0.0418451950, -0.0300930589, 0.0529720336, 0.0261272341, -0.0773382485, -0.1117680818, 0.1269447058, -0.1154167280, -0.1298279464, -0.1020354331, -0.0964526162, 0.1201976389, -0.1030252129, -0.0641150922, -0.0808157474, -0.0305942148, 0.0591515303, 0.0920346528, 0.1213244647, -0.0412782282, 0.1462746114, 0.0074981749, -0.0412102938, 0.0092007071, -0.0934243947, -0.0563076064, -0.0102070719, 0.0642968267, 0.1181775779, 0.0664544404, -0.1174307466, -0.1115593910, 0.1423456222, 0.0721293837, -0.0833717734, 0.0940782875, -0.1371452510, 0.0719965398, -0.0999487787, -0.0652192459, 0.0854962021, -0.0306567550, 0.1107312888, 0.0467416197, -0.0371406898, 0.0737057328, 0.1578744799, -0.0927919447, 0.0928774923, 0.1510232538, 0.0229497701, -0.1563339233, 0.1313606054, 0.0235281140, 0.1226232499, -0.1257421970, 0.1519597322, 0.0546855330, -0.0360600203, -0.0524697229, 0.0772892833, -0.0271799713, 0.0621725917, -0.0522038788, 0.0247073621, -0.0159688741, 0.1349770576, -0.0430942923, -0.0512585491, 0.0291601717, 0.0159279704, -0.1545874178, 0.1363164335, -0.0146395564, 0.0996302217, 0.0927624255, -0.0794552863, -0.0971186161, 0.0030071437, 0.0309928656, 0.0345155597, -0.1296468526, 0.0485770255, 0.0794232786, -0.1274009943, -0.0170361251, 0.0558684319, -0.1040148064, -0.1498719305, 0.0045285374, -0.0298375487, -0.0716922879, -0.0490227193, -0.0084452033, 0.0687450767, -0.0508507341, -0.0810786113, -0.0917076245, 0.1328482181, -0.1246307790, -0.1515104920, -0.0346697047, 0.0317275077, -0.0890749171, -0.0219815969, -0.0314799845, -0.1413084716, 0.0571767986, -0.0346721187, 0.0434692353, 0.0095862299, 0.0306305885, 0.0820026845, 0.0636983812, -0.0835371539, 0.0361597687, -0.0742052644, 0.1099383384, 0.0174306184, 0.0038592964, 0.0293548405, -0.1547434777, -0.1289284974, 0.1162741035, 0.0373018384, -0.1209314317, -0.0038082153, 0.0368705839, 0.1322880834, -0.0171316117, 0.1127741784, 0.1411544234, -0.0466943085, -0.0534856617, 0.0684419125, 0.0844105631, 0.1308795661, -0.1482192874, 0.0845568180, -0.0331829637, -0.1560989171, -0.1162005290, -0.0523067936, 0.0493823588, -0.0152771324, 0.0746938139, 0.0844928920, -0.1499411911, 0.0414202660, -0.1571694165, -0.0070860386, -0.1577690989, -0.1454094052, -0.0621992797, -0.0013518929, -0.1129948273, -0.0653487742, -0.0084397048, -0.0459876359, 0.0442476869, 0.1100821048, -0.1039978415, -0.1410982013, 0.0878126621, -0.0206890255, 0.0803962499, 0.1219555587, -0.0751375929, 0.1203138381, 0.0574914217, 0.0253643543, 0.0632628351, -0.0231629461, 0.1519121379, 0.0971503705, 0.1313945800, -0.0776893944, -0.0913482904, -0.0384918302, 0.1475487202, -0.0630163699, -0.0106987506, -0.0988427401, 0.0945882648, 0.1053675860, 0.1013679653, 0.1000681669, -0.0121680498, 0.1541111320, -0.0805735812, -0.0660539791, 0.1449177116, 0.0787811428, -0.0953111425, -0.1393787861, 0.0943098217, 0.0503202677, 0.0279907286, -0.0527145267, -0.1195895150, -0.0308333635, -0.1486044824, -0.0515524745, -0.0843431950, 0.1505406350, 0.0200931877, 0.0601574033, 0.1396952420, -0.0558728799, 0.0802922100, -0.0248008519, -0.1402877718, -0.0846585706, -0.0100107044, 0.0262278169, -0.0227177739, 0.1332703382, 0.0370652229, 0.0314873755, -0.1325435489, 0.1328319758, 0.1283424348, -0.0207793862, -0.0454365760, -0.0870664045, 0.0675634146, 0.0414512604, 0.0876518041, 0.0637746453, -0.1128979474, -0.1559033096, 0.0559920371, 0.1040907949, 0.1180997342, 0.0974306315, -0.0609054342, 0.0269897878, 0.1190637201, -0.0077477694, 0.1296247691, 0.1358695477, -0.1211334467, -0.1211257130, 0.0250523686, 0.1493472010, 0.1270201057, 0.1273476928, -0.0869446844, 0.0776981115, 0.0942734629, -0.0769722462, -0.0255253166, 0.1106134802, -0.1364751458, -0.0813225880, -0.0493945256, -0.0876838863, 0.1488406807, 0.0872153491, -0.0018236786, -0.0952216163, -0.0768157989, -0.1149915755, 0.0331405103, -0.0037807673, 0.1184885055, -0.0941133499, 0.0934741944, -0.0678608865, 0.0330688953, 0.0932015032, -0.1053562611, -0.0078676492, -0.0624113232, -0.0225684196, 0.0998494774, -0.0852877349, -0.1223263741, -0.1107142940, 0.1039457172, -0.1063912436, 0.0817037821, -0.1552830786, -0.1019253954, -0.0336066410, 0.0726210326, -0.1365561932, 0.1382125765, -0.0721170604, 0.0684302300, 0.1429771036, -0.1214107871, -0.0368908271, -0.0101390630, -0.0003867745, 0.0255153030, -0.0733969584, -0.1168227196, -0.1006240845, -0.0550400764, -0.0532276258, 0.1497361213, -0.0789961368, 0.0772016346, 0.0081855506, -0.0604201555, 0.1064414233, 0.0252727121, 0.0628860444, -0.0355720297, -0.1558241844, 0.1516237408, 0.0982703120, 0.1449159533, -0.0221741050, 0.0377894640, 0.1512104124, -0.0045790523, 0.1372165829, -0.0997112095, -0.1321721524, 0.0062164366, -0.1492978036, 0.0247431844, 0.0012148023, -0.1577409804, 0.0526289195, -0.0414110720, -0.1359037012, -0.1520768106, -0.1096896827, -0.0779007301, -0.0710732937, -0.0984064341, -0.0348730832, -0.0751411319, 0.0995121151, -0.0929932147, -0.0392305851, -0.0436061844, 0.0984748453, -0.0434689671, -0.0139658600, 0.1426381320, -0.0164841563, -0.1140347421, 0.1476952285, -0.0375968963, 0.0237473696, 0.1301364154, 0.0248783231, 0.1115361303, -0.0873088390, -0.1396690905, -0.1485696882, 0.1450325400, -0.0741531625, -0.0768495351, -0.0813447908, 0.1437240094, 0.0196058303, -0.0572559983, 0.1461170465, 0.0595938265, -0.0757387877, -0.0922966823, 0.1402673572, -0.0493382439, -0.0973495096, 0.0557391346};
# 25 "firmware/parameters.h" 2
# 1 "firmware/weights/b14.h" 1
# 12 "firmware/weights/b14.h"
model_default_t b14[84] = {};
# 26 "firmware/parameters.h" 2
# 1 "firmware/weights/w17.h" 1
# 12 "firmware/weights/w17.h"
model_default_t w17[840] = {-0.1159431040, -0.1612584740, 0.0235080570, -0.1667949706, 0.0459404439, -0.1536030322, 0.0464875698, 0.1508506089, -0.1539642513, -0.1183338165, 0.1858013421, 0.1832363456, -0.1477701515, -0.1798610985, -0.0179326385, 0.0547642410, -0.1264593750, 0.1303170472, -0.0213266313, 0.0571992099, -0.0403445512, 0.0015788376, 0.1188071817, -0.1248079091, 0.1798020750, 0.1545853764, -0.1584974676, -0.1092695445, 0.1282270104, -0.0714879110, -0.1107842699, -0.0835089982, 0.0540443212, 0.1852610856, -0.0659678653, 0.0577959865, -0.0467860252, -0.0472665131, 0.1089961082, -0.0221025646, 0.1657554954, 0.1487950236, 0.0952552408, 0.1694687456, -0.0761457160, -0.1280056834, 0.0272843242, -0.1260818839, -0.1308508515, -0.1749009192, -0.1212755367, -0.1854038686, -0.1053774431, -0.0294911712, 0.1794902831, -0.0910717919, -0.0809435919, 0.1638195366, 0.1790928394, 0.0278926790, 0.0944589823, 0.0972156078, 0.1609494239, -0.0732763559, -0.1711292565, 0.1087221950, 0.1637379080, -0.1347473264, 0.0337553918, -0.1291557550, -0.0716525987, -0.1539579928, 0.1145500690, 0.0615227371, 0.0145295411, 0.1074211746, 0.0289256126, -0.0302086473, -0.0113987178, -0.0380389094, -0.0094030052, -0.0036608279, -0.1678563207, -0.1830281466, 0.1866130084, -0.0753774047, -0.0659679547, -0.1419215798, -0.0922321901, 0.1517046839, -0.1709223986, 0.1228562742, 0.1856342703, 0.1196234375, 0.1650971323, 0.0285815150, -0.1421924233, 0.0172301084, -0.0750981420, 0.1125022322, -0.0794076547, -0.0714997649, 0.0329050422, -0.1152248010, 0.0305224359, -0.1668576002, -0.1122852042, 0.0714311749, 0.0068923086, 0.0280201882, -0.1401102990, -0.1762341559, -0.0951683670, -0.0244045556, -0.0268613845, -0.1339828819, -0.0376426280, -0.0319718122, -0.1804443151, 0.1298156232, -0.1790089458, -0.0206611454, -0.0062969625, -0.0844775885, 0.0350043774, -0.1031465456, -0.0809855014, -0.1758840233, -0.1673432142, 0.1583339721, -0.1134640276, 0.1480662972, 0.1547373980, -0.0411472023, 0.0216054469, 0.0146515071, 0.0515245199, -0.0943151265, -0.0031380802, 0.1637021750, -0.1737640500, -0.1502577364, 0.0791113228, -0.0160582662, 0.1313980967, -0.0317586958, 0.0289870650, -0.1278348714, -0.0019965172, -0.0479067266, -0.0288092792, -0.0291673392, 0.1215362400, 0.0285505205, 0.1524056941, -0.1777614057, 0.0005907863, 0.0126986951, -0.0472351015, -0.1385237575, -0.1197757274, -0.0360457748, 0.1142878979, -0.1005155370, -0.0616098195, 0.1202478856, 0.1633698195, 0.0442932993, 0.1699043959, 0.0996763855, -0.0710070655, -0.1774632633, -0.0840227827, -0.1799852252, -0.1191698462, -0.0045058280, -0.1469491273, -0.0189629048, -0.0418226868, 0.1142157465, -0.0394746512, 0.0256040692, -0.1214316115, 0.0998650044, -0.0124854445, 0.1087885648, -0.0718862191, -0.0516127348, -0.0112844110, 0.1497464329, 0.0617750138, -0.0386511832, -0.1485381424, -0.0940733477, 0.0404101610, 0.1665148884, -0.1500072777, -0.1136570498, -0.1827249080, -0.1536853909, 0.1142500788, -0.1599612385, -0.0044846386, -0.0230912417, -0.0370872170, 0.0355939865, -0.1096727625, -0.0499267131, -0.1850594431, 0.1818123311, -0.0417120755, 0.0311916620, -0.1096169800, -0.0741259530, -0.1451867670, 0.1312714964, -0.0652789846, 0.1666946560, 0.1226135939, 0.1790564805, -0.0470390618, 0.1402498037, 0.0051450878, 0.0894698054, 0.0508875102, -0.1104253903, 0.0870303661, -0.1589156389, 0.0099827945, 0.0322966278, -0.1055683494, -0.1031804681, -0.1712052226, 0.0637358874, 0.1390766054, 0.0828685015, 0.1496253163, 0.0048909187, -0.1666798443, 0.1287128180, 0.1629415303, 0.1373714358, 0.1741726547, 0.0970785171, -0.0168930888, 0.1535077244, 0.0808469802, 0.0316965729, 0.1392463893, 0.1129638106, -0.0435732901, 0.0584939122, 0.1060385555, -0.1208319068, 0.0630263537, -0.1334120929, 0.1157659441, 0.0750278085, -0.0828454047, 0.0664977878, -0.1207553968, -0.0925324038, -0.0042391270, 0.1235605627, -0.1366417706, 0.0123723447, 0.0453893095, 0.0516043603, 0.1599532515, -0.1187120229, -0.0517844111, -0.1015334129, 0.1499452144, 0.1401990205, 0.1854095906, 0.1430837065, -0.0107059628, -0.1235050410, -0.1224871129, -0.0566929430, 0.1084428877, -0.1565842181, 0.1221431643, 0.1175222546, 0.1106890291, 0.0262778848, 0.0888457745, 0.1256812364, 0.0802126378, 0.0408940762, 0.0625175387, -0.1458277106, -0.1067985818, -0.1152950451, -0.1648624837, -0.0898833275, -0.1215727329, 0.0968060941, 0.0351322442, 0.1573045999, 0.0026919246, -0.0593033582, -0.1490502208, 0.0449144542, -0.1566723585, -0.0482561886, -0.1572534442, -0.0268969685, -0.0403888524, 0.0289710313, -0.0523827225, 0.1719984859, 0.0649901778, -0.0221990198, 0.0250035524, -0.1681072414, -0.0615762174, 0.0483647734, 0.1571549624, 0.0491732657, -0.0102469772, 0.0842392892, -0.1492981166, 0.1125989407, 0.1644640416, -0.0336252749, 0.1474526376, 0.1606233567, -0.0775468946, -0.1707750261, 0.1030181795, 0.0538043529, -0.1232183874, -0.1689296216, 0.1422227472, -0.0050480366, 0.0766839236, 0.1122719496, 0.1323968917, -0.1742711216, 0.0049504936, 0.1637852639, -0.1568930447, 0.1290816814, -0.1785922945, 0.1480736881, -0.1570497453, 0.1309639961, -0.0762118101, -0.0807180852, -0.1881987005, 0.0484115779, -0.0923324451, 0.1113858372, -0.0423662663, -0.0439284742, 0.0582270920, -0.1660859883, 0.1579113752, 0.0759463459, -0.1266994774, 0.1594545692, -0.1758056581, 0.0404080451, 0.1332821995, 0.0473425239, -0.0649669692, 0.1611203104, -0.0223104507, 0.1163452417, -0.0880571306, 0.0269056708, 0.0160077661, 0.1709483415, -0.0583017468, 0.0544115454, 0.0965373367, -0.0118128359, 0.0576248169, 0.1791664213, -0.0240092278, 0.1378228515, -0.1537126154, -0.0653976649, -0.0152863115, -0.1687431335, 0.0146445185, 0.0706719011, -0.1692219526, -0.1562590450, -0.0180506408, -0.1214704514, -0.1467365026, 0.0485082269, -0.1812862009, 0.1298942715, -0.0564489663, 0.0306858569, 0.0479833186, 0.1248926073, -0.1627483219, 0.1113290042, 0.1297385842, -0.0443903953, -0.1626131088, 0.1360486001, 0.0147282779, -0.1034396812, -0.0519181788, 0.1862656623, -0.0350920111, -0.0838692263, -0.1023713872, 0.0281127840, -0.0208823681, -0.1387637854, -0.1559266150, 0.0770715922, -0.1827870011, 0.0026180297, 0.0250533372, -0.0968172252, 0.1044271439, -0.1577039361, 0.1651035398, -0.1472265422, -0.1504273415, -0.1146918684, 0.1094108373, -0.0799347758, -0.1195190400, -0.0422822684, -0.1056367904, -0.0572351217, 0.1054928452, 0.1446290463, -0.1663601249, -0.0549248308, -0.0785171911, 0.0761042088, -0.0010990202, -0.0621833950, 0.1180573553, -0.0067481697, 0.1686779410, -0.0904831737, -0.0522455126, -0.0059353858, 0.0430482924, -0.1884870529, -0.0965294018, 0.0965814739, -0.1394300759, 0.1700530201, -0.0900237709, -0.1140946448, -0.0256558806, -0.0006811321, -0.0591415614, -0.1045499742, -0.1075477004, 0.0889378935, -0.0493277758, -0.1610505283, 0.1601878852, -0.0910753980, -0.0128324181, 0.0297875106, 0.0564273447, 0.0731825978, 0.1628203541, 0.1331547052, -0.0534426421, -0.1311433911, 0.0304516405, -0.0641150773, 0.0569174290, -0.1226782501, -0.0297611952, 0.1089043170, -0.0140344948, 0.1222175807, 0.0285822302, 0.0578671247, 0.0997539014, -0.0730426461, 0.1001512855, -0.0934290811, 0.1806153208, 0.1001038402, 0.0869030505, -0.0603737831, -0.1793724597, -0.1571315676, -0.0454627424, 0.0344105214, -0.0964892954, -0.1445654333, -0.0511956066, 0.0896538943, 0.0591379106, 0.1297128946, -0.1019217148, -0.1880221665, -0.1539780498, -0.0167606175, -0.0342898071, 0.0882365853, -0.0357033312, 0.1856104583, -0.0493845493, 0.1644391268, 0.1295724362, -0.0143325478, 0.1477552503, -0.0207260698, 0.1052823812, -0.1489765495, 0.1167957932, 0.0054130852, 0.1881425530, -0.0659672767, 0.1400004178, -0.1653244048, 0.0956299752, 0.1523096412, -0.1076627299, 0.0389743745, 0.0609658211, 0.1641535610, 0.0029936731, -0.1535023749, -0.1875173450, 0.0060642064, -0.1631616652, 0.0393499285, -0.1654848009, 0.0349558443, 0.1540620178, 0.0090216100, 0.1534186155, -0.0170518607, 0.0780937821, -0.0076110512, 0.0891834944, -0.1574134976, 0.0776607841, 0.1359020025, -0.1830494553, 0.1217906326, 0.1639160961, 0.0277159214, -0.1658381373, -0.0717497841, -0.0161710083, -0.1631691456, -0.1874964386, -0.1666519493, 0.1283181459, -0.0238108933, -0.1316055059, -0.1512047946, -0.0711262897, 0.0647051483, 0.0337355733, -0.0757740363, -0.0813413113, 0.0635590702, 0.1275834888, -0.0165749341, 0.1175151914, 0.0253707618, 0.1011636406, -0.0119776428, -0.1382230520, 0.0351694524, 0.0710436553, 0.0333200097, -0.0851386189, 0.0174771547, 0.1022212952, -0.0768039972, 0.0378894061, -0.0246026814, 0.1190090925, 0.1150460094, 0.1265813857, 0.0014245659, -0.0906894431, 0.0209855139, -0.0948891491, -0.0636537373, -0.0730213374, 0.0465556979, -0.1664350927, -0.0633350462, 0.1046606749, -0.1760685295, -0.0381171703, 0.0946380049, -0.0834242031, -0.1620634049, -0.0534840375, 0.0754055232, -0.1763827503, 0.0975563675, -0.1734864563, 0.1453010291, -0.1298963130, -0.0719210878, 0.0395864248, -0.0802562088, -0.0781421363, 0.0418132693, -0.1259810925, -0.0976016596, 0.1043475717, 0.1311797053, -0.0402094275, 0.1798355132, -0.1324354112, 0.1366826445, 0.0042390823, 0.0921511203, -0.0723074079, 0.0750218183, 0.0743972510, -0.1715392321, -0.1784934849, -0.0211748332, -0.1253634542, -0.0942982286, 0.0622422546, 0.1326560527, -0.1506914496, 0.0542866439, -0.1494041830, -0.0217834264, 0.0736590177, -0.1221505851, 0.0740872473, -0.1810826361, 0.1244787127, 0.0539379865, -0.1738142371, 0.0005762279, 0.1699588150, -0.1679667234, 0.1052732319, -0.1035905331, 0.1560979337, -0.1701334119, 0.0657896549, 0.0611317307, 0.1093569547, 0.1460934430, 0.1670378298, -0.1648029089, -0.1007314026, 0.0665143579, 0.0772236139, 0.1017050892, -0.0677247196, 0.1235492378, -0.1050908789, 0.0849451274, 0.0378672332, -0.0817518234, 0.1487557143, 0.1324324757, 0.0274209827, 0.1325530559, -0.0930463672, -0.0863113105, -0.0989597216, 0.0162181705, 0.1864722818, 0.1816998571, -0.0719733089, 0.0057277679, 0.0097938329, -0.0945474803, -0.0999638587, 0.0127820522, -0.0159627050, 0.1013093144, 0.1813741177, -0.0278696120, -0.0105270445, -0.0051022470, 0.0933976322, 0.1686652452, -0.0605590940, -0.0151006281, 0.0807366818, 0.0996784121, 0.1683924943, -0.0747406185, 0.1440330297, 0.1053189188, -0.0857647732, -0.0846750289, 0.1357536763, 0.0851857513, 0.0702539831, 0.0890823454, 0.0752869695, 0.0211376250, 0.0502661318, 0.1731716543, -0.1749648154, 0.0968905240, 0.0282266885, 0.0544539392, -0.0104890168, 0.1333125681, 0.0251325518, 0.1472339779, 0.0818608254, -0.0433338135, -0.0769642144, 0.0188799500, 0.0362605602, 0.1333061308, -0.1362937987, -0.0556717813, -0.0274762213, 0.0002122670, -0.1400200129, 0.0620191246, -0.0692399368, -0.1345170289, -0.0121806711, 0.1102145761, -0.1531192660, 0.0881646425, 0.0808511823, 0.1009862572, 0.1179890782, 0.0532744825, -0.0821318328, 0.1134107560, -0.1300390065, -0.1536830962, 0.0451902449, -0.0438344330, -0.0951571912, 0.0787180513, 0.1316870600, 0.0053398758, -0.0774368644, -0.1761480570, -0.0396100879, 0.1550492197, 0.0181541294, 0.0316972882, 0.0487886667, -0.1708588302, -0.0046134144, 0.1789762229, 0.1066940874, 0.1640071124, -0.1751488298, -0.0280375034, 0.0141109079, 0.0643735379, 0.0991526693, 0.1761130840, -0.1404776573, -0.0551214069, 0.1606332511, 0.0317853242, 0.0730317086, 0.0435590446, -0.1429876387, -0.1437250823, -0.0655279681, -0.1878001690, 0.1538882405, 0.0828316957, -0.0804390013, -0.0752668381, -0.0728046149, -0.0112200230, -0.0788861662, 0.0761184245, 0.0732714385, -0.1037109718, -0.0088708848, -0.0120564103, 0.1152682751, 0.0929699987, 0.1722951084, -0.0372737050, -0.1032959521, 0.1770724505, -0.1743258685, 0.1484030336, -0.0495650023, 0.0237996280, -0.1400795728, -0.0033951253, 0.0533032268, -0.1483881921, -0.1818747818, -0.0971213579, 0.0624683946, -0.1743066609, -0.0922740474, -0.0849905163, 0.1166599542, 0.1619334966, -0.1043440178, -0.1492398083, -0.1021299213, 0.0370643735, -0.1391282380, 0.1583219320, 0.0016718358, -0.1421674639, 0.1773027331, -0.0372551382, 0.1112477630, 0.0521704555, -0.1595238149, -0.1433151513, 0.1748648733, -0.1441590190, -0.1261006743, -0.0022589266, -0.0971001834, -0.1061553061, -0.0528393686, -0.1737105697, 0.0605263859, -0.1506999731, -0.1778680980, 0.0969422609, 0.0194646567, 0.1628022045};
# 27 "firmware/parameters.h" 2
# 1 "firmware/weights/b17.h" 1
# 12 "firmware/weights/b17.h"
model_default_t b17[10] = {0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000};
# 28 "firmware/parameters.h" 2


struct config3_mult : nnet::dense_config {
    static const unsigned n_in = 16;
    static const unsigned n_out = 8;
    static const unsigned reuse_factor = 64;
    typedef ap_fixed<17,7,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
};

struct config3 : nnet::conv2d_config {
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_height = 32;
    static const unsigned in_width = 32;
    static const unsigned n_chan = 1;
    static const unsigned filt_height = 4;
    static const unsigned filt_width = 4;
    static const unsigned n_filt = 8;
    static const unsigned stride_height = 1;
    static const unsigned stride_width = 1;
    static const unsigned out_height = 29;
    static const unsigned out_width = 29;
    static const unsigned reuse_factor = 64;
    static const unsigned n_zeros = 0;
    static const bool store_weights_in_bram = false;
    typedef ap_fixed<17,7,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef config3_mult mult_config;
};

struct relu_config5 : nnet::activ_config {
    static const unsigned n_in = 29*29*8;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 4500;
    typedef ap_fixed<18,8> table_t;
};

struct config6 : nnet::pooling2d_config {
    static const unsigned in_height = 29;
    static const unsigned in_width = 29;
    static const unsigned n_filt = 8;
    static const unsigned stride_height = 2;
    static const unsigned stride_width = 2;
    static const unsigned pool_height = 2;
    static const unsigned pool_width = 2;
    static const unsigned out_height = 14;
    static const unsigned out_width = 14;
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const nnet::Pool_Op pool_op = nnet::Max;
    static const unsigned reuse = 4500;
};

struct config7_mult : nnet::dense_config {
    static const unsigned n_in = 32;
    static const unsigned n_out = 16;
    static const unsigned reuse_factor = 256;
    typedef ap_fixed<17,7,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
};

struct config7 : nnet::conv2d_config {
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_height = 14;
    static const unsigned in_width = 14;
    static const unsigned n_chan = 8;
    static const unsigned filt_height = 2;
    static const unsigned filt_width = 2;
    static const unsigned n_filt = 16;
    static const unsigned stride_height = 1;
    static const unsigned stride_width = 1;
    static const unsigned out_height = 13;
    static const unsigned out_width = 13;
    static const unsigned reuse_factor = 256;
    static const unsigned n_zeros = 0;
    static const bool store_weights_in_bram = false;
    typedef ap_fixed<17,7,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef config7_mult mult_config;
};

struct relu_config9 : nnet::activ_config {
    static const unsigned n_in = 13*13*16;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 4500;
    typedef ap_fixed<18,8> table_t;
};

struct config10 : nnet::pooling2d_config {
    static const unsigned in_height = 13;
    static const unsigned in_width = 13;
    static const unsigned n_filt = 16;
    static const unsigned stride_height = 2;
    static const unsigned stride_width = 2;
    static const unsigned pool_height = 2;
    static const unsigned pool_width = 2;
    static const unsigned out_height = 6;
    static const unsigned out_width = 6;
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const nnet::Pool_Op pool_op = nnet::Max;
    static const unsigned reuse = 4500;
};

struct config11 : nnet::dense_config {
    static const unsigned n_in = 6*6*16;
    static const unsigned n_out = 120;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 4608;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 69120;
    static const bool store_weights_in_bram = false;
    typedef ap_fixed<17,7,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef ap_uint<1> index_t;
};

struct relu_config13 : nnet::activ_config {
    static const unsigned n_in = 120;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 4500;
    typedef ap_fixed<18,8> table_t;
};

struct config14 : nnet::dense_config {
    static const unsigned n_in = 120;
    static const unsigned n_out = 84;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 5040;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 10080;
    static const bool store_weights_in_bram = false;
    typedef ap_fixed<17,7,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef ap_uint<1> index_t;
};

struct relu_config16 : nnet::activ_config {
    static const unsigned n_in = 84;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 4500;
    typedef ap_fixed<18,8> table_t;
};

struct config17 : nnet::dense_config {
    static const unsigned n_in = 84;
    static const unsigned n_out = 10;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 420;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 840;
    static const bool store_weights_in_bram = false;
    typedef ap_fixed<17,7,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef ap_uint<1> index_t;
};

struct softmax_config19 : nnet::activ_config {
    static const unsigned n_in = 10;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 4500;
    typedef ap_fixed<18,8> exp_table_t;
    typedef ap_fixed<18,8> inv_table_t;
};
# 23 "firmware/myproject.cpp" 2

void myproject(
    input_t input1[32*32*1],
    result_t layer19_out[10],
    unsigned short &const_size_in_1,
    unsigned short &const_size_out_1
) {


#pragma HLS INTERFACE ap_vld port=input1,layer19_out
#pragma HLS DATAFLOW

 const_size_in_1 = 32*32*1;
    const_size_out_1 = 10;
# 62 "firmware/myproject.cpp"
    input2_t conv2d_0_m_input[32*32*1];

    layer3_t layer3_out[29*29*8];

    nnet::conv_2d_large_cl<input_t, layer3_t, config3>(input1, layer3_out, w3, b3);

    layer5_t layer5_out[29*29*8];

    nnet::relu<layer3_t, layer5_t, relu_config5>(layer3_out, layer5_out);

    layer6_t layer6_out[14*14*8];

    nnet::pooling2d_cl<layer5_t, config6>(layer5_out, layer6_out);

    layer7_t layer7_out[13*13*16];

    nnet::conv_2d_large_cl<layer6_t, layer7_t, config7>(layer6_out, layer7_out, w7, b7);

    layer9_t layer9_out[13*13*16];

    nnet::relu<layer7_t, layer9_t, relu_config9>(layer7_out, layer9_out);

    layer10_t layer10_out[6*6*16];

    nnet::pooling2d_cl<layer9_t, config10>(layer9_out, layer10_out);

    layer11_t layer11_out[120];

    nnet::dense_large<layer10_t, layer11_t, config11>(layer10_out, layer11_out, w11, b11);

    layer13_t layer13_out[120];

    nnet::relu<layer11_t, layer13_t, relu_config13>(layer11_out, layer13_out);

    layer14_t layer14_out[84];

    nnet::dense_large<layer13_t, layer14_t, config14>(layer13_out, layer14_out, w14, b14);

    layer16_t layer16_out[84];

    nnet::relu<layer14_t, layer16_t, relu_config16>(layer14_out, layer16_out);

    layer17_t layer17_out[10];

    nnet::dense_large<layer16_t, layer17_t, config17>(layer16_out, layer17_out, w17, b17);

    nnet::softmax<layer17_t, result_t, softmax_config19>(layer17_out, layer19_out);

}
