# 1 "firmware/myproject.cpp"
# 1 "firmware/myproject.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 155 "<built-in>" 3
# 1 "<command line>" 1






# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 157 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 8 "<command line>" 2
# 1 "<built-in>" 2
# 1 "firmware/myproject.cpp" 2
# 19 "firmware/myproject.cpp"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 1 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 1 3
# 153 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 393 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 1 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 3
# 1 "/usr/include/features.h" 1 3 4
# 439 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 440 "/usr/include/features.h" 2 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/os_defines.h" 2 3
# 394 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 2 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/cpu_defines.h" 1 3
# 397 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++config.h" 2 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 1 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stringfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    class allocator;







  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;

  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;

  typedef basic_string<wchar_t> wstring;





  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;

  typedef basic_string<char16_t> u16string;
  typedef basic_string<char32_t> u32string;





}
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 1 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 31 "/usr/include/wchar.h" 2 3 4




# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 31 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 3 4
typedef __typeof__(((int*)0)-((int*)0)) ptrdiff_t;



typedef __typeof__(sizeof(int)) size_t;
# 55 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 3 4
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 36 "/usr/include/wchar.h" 2 3 4


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 1 3 4
# 30 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 48 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 39 "/usr/include/wchar.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 41 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 2 3 4

typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 44 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 47 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 50 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) throw ();




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));
# 164 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));
# 174 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));
# 201 "/usr/include/wchar.h" 3 4
extern wchar_t *wcspbrk (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));
# 212 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsstr (const wchar_t *__haystack, const wchar_t *__needle)
     throw () __attribute__ ((__pure__));



extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));
# 233 "/usr/include/wchar.h" 3 4
extern wchar_t *wcswcs (const wchar_t *__haystack, const wchar_t *__needle)
     throw () __attribute__ ((__pure__));





extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));
# 253 "/usr/include/wchar.h" 3 4
extern wchar_t *wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)
     throw () __attribute__ ((__pure__));



extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();





extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();
# 337 "/usr/include/wchar.h" 3 4
extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 396 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();
# 411 "/usr/include/wchar.h" 3 4
extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 428 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 511 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();
# 529 "/usr/include/wchar.h" 3 4
extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 551 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();
# 567 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();





extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream, const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_fwscanf")


                                                          ;
extern int wscanf (const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_wscanf")

                                                          ;
extern int swscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, ...) throw () __asm__ ("" "__isoc99_swscanf")


                                                          ;
# 671 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;






extern int vfwscanf (__FILE *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfwscanf")


                                                          ;
extern int vwscanf (const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vwscanf")

                                                          ;
extern int vswscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vswscanf")


                                                          ;
# 726 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 781 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 807 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 817 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();
# 856 "/usr/include/wchar.h" 3 4
}
# 46 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 2 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 136 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }



}







namespace __gnu_cxx
{





  using ::wcstold;
# 258 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 278 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 2 3
# 69 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
  typedef long streamoff;
# 99 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 112 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 134 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 75 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 1 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 117 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{
# 142 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop




# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_defines.h" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 2 3





extern "C++" {

namespace std
{




  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() throw();


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {




    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) throw();

      void _M_addref() throw();
      void _M_release() throw();

      void *_M_get() const throw() __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() throw();
      friend void std::rethrow_exception(exception_ptr);

    public:
      exception_ptr() throw();

      exception_ptr(const exception_ptr&) throw();


      exception_ptr(nullptr_t) throw()
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) throw()
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }







      exception_ptr&
      operator=(const exception_ptr&) throw();


      exception_ptr&
      operator=(exception_ptr&& __o) throw()
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() throw();

      void
      swap(exception_ptr&) throw();
# 132 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&) throw()
      __attribute__ ((__pure__));

      const class type_info*
      __cxa_exception_type() const throw() __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&) throw()
    __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&) throw()
    __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

  }



  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) throw()
    {
      if (true)
 {



 }
      if (false)
 {
   return current_exception();
 }
    }




  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) throw()
    { return std::copy_exception<_Ex>(__ex); }


}

}

#pragma GCC visibility pop
# 154 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/nested_exception.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/nested_exception.h" 3
#pragma GCC visibility push(default)
# 45 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() throw() : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) = default;

    nested_exception& operator=(const nested_exception&) = default;

    virtual ~nested_exception();

    void
    rethrow_nested() const __attribute__ ((__noreturn__))
    { rethrow_exception(_M_ptr); }

    exception_ptr
    nested_ptr() const
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };

  template<typename _Ex>
    struct __get_nested_helper
    {
      static const nested_exception*
      _S_get(const _Ex& __ex)
      { return dynamic_cast<const nested_exception*>(&__ex); }
    };

  template<typename _Ex>
    struct __get_nested_helper<_Ex*>
    {
      static const nested_exception*
      _S_get(const _Ex* __ex)
      { return dynamic_cast<const nested_exception*>(__ex); }
    };

  template<typename _Ex>
    inline const nested_exception*
    __get_nested_exception(const _Ex& __ex)
    { return __get_nested_helper<_Ex>::_S_get(__ex); }

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, const nested_exception* = 0)
    __attribute__ ((__noreturn__));

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, ...) __attribute__ ((__noreturn__));




  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, const nested_exception*)
    { throw __ex; }

  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, ...)
    { throw _Nested_exception<_Ex>(static_cast<_Ex&&>(__ex)); }

  template<typename _Ex>
    void
    throw_with_nested(_Ex __ex) __attribute__ ((__noreturn__));



  template<typename _Ex>
    inline void
    throw_with_nested(_Ex __ex)
    {
      if (__get_nested_exception(__ex))
        throw __ex;
      __throw_with_nested(static_cast<_Ex&&>(__ex), &__ex);
    }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    {
      if (const nested_exception* __nested = __get_nested_exception(__ex))
        __nested->rethrow_nested();
    }


  inline void
  rethrow_if_nested(const nested_exception& __ex)
  { __ex.rethrow_nested(); }


}

}



#pragma GCC visibility pop
# 155 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/exception" 2 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 1 3
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functexcept.h" 1 3
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functexcept.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 1 3
# 36 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
# 36 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
# 68 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<typename _Iterator>
    class move_iterator;

  template<typename _Iterator>
    struct __is_move_iterator< move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



}
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 64 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 53 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 98 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 1 3
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/concept_check.h" 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r)
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


}



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3







namespace std __attribute__ ((__visibility__ ("default")))
{






  struct __sfinae_types
  {
    typedef char __one;
    typedef struct { char __arr[2]; } __two;
  };
# 70 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() { return value; }
    };


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };
  template<> struct __is_void_helper<void> : public integral_constant<bool, true> { };




  template<typename _Tp>
    struct is_void
    : public integral_constant<bool, (__is_void_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };
  template<> struct __is_integral_helper<bool> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<char> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<signed char> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned char> : public integral_constant<bool, true> { };

  template<> struct __is_integral_helper<wchar_t> : public integral_constant<bool, true> { };

  template<> struct __is_integral_helper<char16_t> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<char32_t> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<short> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned short> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<int> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned int> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<long> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned long> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<long long> : public integral_constant<bool, true> { };
  template<> struct __is_integral_helper<unsigned long long> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct is_integral
    : public integral_constant<bool, (__is_integral_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };
  template<> struct __is_floating_point_helper<float> : public integral_constant<bool, true> { };
  template<> struct __is_floating_point_helper<double> : public integral_constant<bool, true> { };
  template<> struct __is_floating_point_helper<long double> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct is_floating_point
    : public integral_constant<bool, (__is_floating_point_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };
  template<typename _Tp> struct __is_pointer_helper<_Tp*> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct is_pointer
    : public integral_constant<bool, (__is_pointer_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };


  template<typename _Tp>
    struct is_reference;


  template<typename _Tp>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };
  template<typename _Tp, typename _Cp> struct __is_member_object_pointer_helper<_Tp _Cp::*> : public integral_constant<bool, !is_function<_Tp>::value> { };



  template<typename _Tp>
    struct is_member_object_pointer
    : public integral_constant<bool, (__is_member_object_pointer_helper<
          typename remove_cv<_Tp>::type>::value)>
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };
  template<typename _Tp, typename _Cp> struct __is_member_function_pointer_helper<_Tp _Cp::*> : public integral_constant<bool, is_function<_Tp>::value> { };



  template<typename _Tp>
    struct is_member_function_pointer
    : public integral_constant<bool, (__is_member_function_pointer_helper<
          typename remove_cv<_Tp>::type>::value)>
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...)>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......)>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile>
    : public true_type { };
  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile>
    : public true_type { };

  template<typename>
    struct __is_nullptr_t_helper
    : public false_type { };
  template<> struct __is_nullptr_t_helper<std::nullptr_t> : public integral_constant<bool, true> { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public integral_constant<bool, (__is_nullptr_t_helper<typename
          remove_cv<_Tp>::type>::value)>
    { };




  template<typename _Tp>
    struct is_arithmetic
    : public integral_constant<bool, (is_integral<_Tp>::value
          || is_floating_point<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_fundamental
    : public integral_constant<bool, (is_arithmetic<_Tp>::value
          || is_void<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_object
    : public integral_constant<bool, !(is_function<_Tp>::value
           || is_reference<_Tp>::value
           || is_void<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public integral_constant<bool, (is_arithmetic<_Tp>::value
          || is_enum<_Tp>::value
          || is_pointer<_Tp>::value
          || is_member_pointer<_Tp>::value
          || __is_nullptr_t<_Tp>::value)>
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };


  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };
  template<typename _Tp, typename _Cp> struct __is_member_pointer_helper<_Tp _Cp::*> : public integral_constant<bool, true> { };

  template<typename _Tp>
  struct is_member_pointer
    : public integral_constant<bool, (__is_member_pointer_helper<
          typename remove_cv<_Tp>::type>::value)>
    { };



  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };


  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };


  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };


  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint = 0>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };




  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };




  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };




  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };

  template<typename>
    struct remove_reference;


  template<typename _Tp>
    struct add_pointer
    { typedef typename remove_reference<_Tp>::type* type; };




  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };




  template<typename _Tp>
    struct is_reference
    : public integral_constant<bool, (is_lvalue_reference<_Tp>::value
          || is_rvalue_reference<_Tp>::value)>
    { };




  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp,
    bool = !is_reference<_Tp>::value && !is_void<_Tp>::value,
    bool = is_rvalue_reference<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true, false>
    { typedef _Tp& type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, false, true>
    { typedef typename remove_reference<_Tp>::type& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp,
    bool = !is_reference<_Tp>::value && !is_void<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp,
    bool = is_integral<_Tp>::value,
    bool = is_floating_point<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, false, true>
    : public true_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true, false>
    : public integral_constant<bool, static_cast<bool>(_Tp(-1) < _Tp(0))>
    { };


  template<typename _Tp>
    struct is_signed
    : public integral_constant<bool, __is_signed_helper<_Tp>::value>
    { };


  template<typename _Tp>
    struct is_unsigned
    : public integral_constant<bool, (is_arithmetic<_Tp>::value
          && !is_signed<_Tp>::value)>
    { };




  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };

  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename _Tp, typename... _Args>
    class __is_constructible_helper
    : public __sfinae_types
    {
      template<typename _Tp1, typename... _Args1>
        static decltype(_Tp1(declval<_Args1>()...), __one()) __test(int);

      template<typename, typename...>
        static __two __test(...);

    public:
      static const bool __value = sizeof(__test<_Tp, _Args...>(0)) == 1;
    };

  template<typename _Tp, typename _Arg>
    class __is_constructible_helper<_Tp, _Arg>
    : public __sfinae_types
    {
      template<typename _Tp1, typename _Arg1>
        static decltype(static_cast<_Tp1>(declval<_Arg1>()), __one())
 __test(int);

      template<typename, typename>
        static __two __test(...);

    public:
      static const bool __value = sizeof(__test<_Tp, _Arg>(0)) == 1;
    };




  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public integral_constant<bool,
          __is_constructible_helper<_Tp,
        _Args...>::__value>
    { };

  template<bool, typename _Tp, typename... _Args>
    struct __is_nt_constructible_helper
    { static const bool __value = false; };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_helper<true, _Tp, _Args...>
    { static const bool __value = noexcept(_Tp(declval<_Args>()...)); };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_helper<true, _Tp, _Arg>
    {
      static const bool __value = noexcept(static_cast<_Tp>(declval<_Arg>()));
    };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public integral_constant<bool,
   __is_nt_constructible_helper<is_constructible<_Tp, _Args...>::value,
           _Tp, _Args...>::__value>
    { };


  template<typename _Tp>
    struct has_trivial_default_constructor
    : public integral_constant<bool, __has_trivial_constructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_copy_constructor
    : public integral_constant<bool, __has_trivial_copy(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_copy_assign
    : public integral_constant<bool, __has_trivial_assign(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_destructor
    : public integral_constant<bool, __has_trivial_destructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_nothrow_default_constructor
    : public integral_constant<bool, __has_nothrow_constructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_nothrow_copy_constructor
    : public integral_constant<bool, __has_nothrow_copy(_Tp)>
    { };


  template<typename _Tp>
    struct has_nothrow_copy_assign
    : public integral_constant<bool, __has_nothrow_assign(_Tp)>
    { };




  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
    bool = (is_void<_From>::value || is_function<_To>::value
     || is_array<_To>::value)>
    struct __is_convertible_helper
    { static const bool __value = is_void<_To>::value; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    : public __sfinae_types
    {
      template<typename _To1>
        static void __test_aux(_To1);

      template<typename _From1, typename _To1>
        static decltype(__test_aux<_To1>(std::declval<_From1>()), __one())
 __test(int);

      template<typename, typename>
        static __two __test(...);

    public:
      static const bool __value = sizeof(__test<_From, _To>(0)) == 1;
    };




  template<typename _From, typename _To>
    struct is_convertible
    : public integral_constant<bool,
          __is_convertible_helper<_From, _To>::__value>
    { };


  template<typename _From, typename _To>
    struct is_explicitly_convertible
    : public is_constructible<_To, _From>
    { };

  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 819 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };





  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };





  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };




  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<const reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };



  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };



  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };



  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      typedef conditional<__b2, unsigned int, unsigned long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };



  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {

      typedef signed char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(signed short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(signed int);
      typedef conditional<__b2, signed int, signed long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, signed short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;


  template<typename... _Tp>
    struct common_type;

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    { typedef decltype(true ? declval<_Tp>() : declval<_Up>()) type; };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    {
      typedef typename
        common_type<typename common_type<_Tp, _Up>::type, _Vp...>::type type;
    };


  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }


  template<typename _Signature>
    class result_of;

  template<typename _MemPtr, typename _Arg>
    struct _Result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct _Result_of_memobj<_Res _Class::*, _Arg>
    {
    private:
      typedef _Res _Class::* _Func;

      template<typename _Tp>
 static _Tp _S_get(const _Class&);
      template<typename _Tp>
 static decltype(*std::declval<_Tp>()) _S_get(...);

    public:
      typedef
        decltype(_S_get<_Arg>(std::declval<_Arg>()).*std::declval<_Func>())
        __type;
    };

  template<typename _MemPtr, typename _Arg, typename... _ArgTypes>
    struct _Result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct _Result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
    private:
      typedef _Res _Class::* _Func;

      template<typename _Tp>
 static _Tp _S_get(const _Class&);
      template<typename _Tp>
 static decltype(*std::declval<_Tp>()) _S_get(...);

    public:
      typedef
        decltype((_S_get<_Arg>(std::declval<_Arg>()).*std::declval<_Func>())
            (std::declval<_Args>()...) )
        __type;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct _Result_of_impl;

  template<typename _Functor, typename... _ArgTypes>
    struct _Result_of_impl<false, false, _Functor, _ArgTypes...>
    {
      typedef
        decltype( std::declval<_Functor>()(std::declval<_ArgTypes>()...) )
        __type;
    };

  template<typename _MemPtr, typename _Arg>
    struct _Result_of_impl<true, false, _MemPtr, _Arg>
    : _Result_of_memobj<typename remove_reference<_MemPtr>::type, _Arg>
    {
      typedef typename _Result_of_memobj<
 typename remove_reference<_MemPtr>::type, _Arg>::__type
 __type;
    };

  template<typename _MemPtr, typename _Arg, typename... _ArgTypes>
    struct _Result_of_impl<false, true, _MemPtr, _Arg, _ArgTypes...>
    : _Result_of_memfun<typename remove_reference<_MemPtr>::type, _Arg,
                        _ArgTypes...>
    {
      typedef typename _Result_of_memfun<
 typename remove_reference<_MemPtr>::type, _Arg, _ArgTypes...>::__type
 __type;
    };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : _Result_of_impl<is_member_object_pointer<
                        typename remove_reference<_Functor>::type >::value,
                      is_member_function_pointer<
   typename remove_reference<_Functor>::type >::value,
        _Functor, _ArgTypes...>
    {
      typedef typename _Result_of_impl<
 is_member_object_pointer<
   typename remove_reference<_Functor>::type >::value,
        is_member_function_pointer<
   typename remove_reference<_Functor>::type >::value,
        _Functor, _ArgTypes...>::__type
 type;
    };
# 1266 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/type_traits" 3
}
# 54 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    inline _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t)
    { return static_cast<_Tp&&>(__t); }

  template<typename _Tp>
    inline _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t)
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }







  template<typename _Tp>
    inline typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
# 94 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r)
    { return std::__addressof(__r); }


}
# 109 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 120 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {



      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }



  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }


}
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{




  struct piecewise_construct_t { };


  constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();


  template<typename...>
    class tuple;

  template<int...>
    struct _Index_tuple;



  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      constexpr pair()
      : first(), second() { }


      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


      template<class _U1, class _U2>
 constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }


      constexpr pair(const pair&) = default;





      template<class _U1, class = typename
        std::enable_if<std::is_convertible<_U1, _T1>::value>::type>
 pair(_U1&& __x, const _T2& __y)
 : first(std::forward<_U1>(__x)), second(__y) { }

      template<class _U2, class = typename
        std::enable_if<std::is_convertible<_U2, _T2>::value>::type>
 pair(const _T1& __x, _U2&& __y)
 : first(__x), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
        std::enable_if<std::is_convertible<_U1, _T1>::value
         && std::is_convertible<_U2, _T2>::value>::type>
 pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2>
 pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<class... _Args1, class... _Args2>
 pair(piecewise_construct_t,
      tuple<_Args1...> __first, tuple<_Args2...> __second)
 : first(__cons<first_type>(std::move(__first))),
   second(__cons<second_type>(std::move(__second))) { }

      pair&
      operator=(const pair& __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(pair&& __p)
      {
 first = std::move(__p.first);
 second = std::move(__p.second);
 return *this;
      }

      template<class _U1, class _U2>
 pair&
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<class _U1, class _U2>
 pair&
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::move(__p.first);
   second = std::move(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename _Tp, typename... _Args>
 static _Tp
 __cons(tuple<_Args...>&&);

      template<typename _Tp, typename... _Args, int... _Indexes>
 static _Tp
 __do_cons(tuple<_Args...>&&, const _Index_tuple<_Indexes...>&);

    };


  template<class _T1, class _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<class _T1, class _T2>
    inline void
    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    { __x.swap(__y); }
# 259 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<typename __decay_and_strip<_T1>::__type,
  typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 277 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_pair.h" 3
}
# 66 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 1 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 142 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
template<typename _Tp> class __has_iterator_category_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::iterator_category>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_iterator_category : integral_constant<bool, __has_iterator_category_helper <typename remove_cv<_Tp>::type>::value> { };

  template<typename _Iterator,
    bool = __has_iterator_category<_Iterator>::value>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator, true>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 174 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }





  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };


}
# 67 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 1 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }
# 110 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      __i += __n;
    }
# 168 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _ForwardIterator>
    inline _ForwardIterator
    next(_ForwardIterator __x, typename
  iterator_traits<_ForwardIterator>::difference_type __n = 1)
    {
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {
      std::advance(__x, -__n);
      return __x;
    }




}
# 68 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 1 3
# 68 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 96 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }






      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 283 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>


    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())





    { return __y.base() - __x.base(); }
# 395 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 429 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 471 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 486 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 519 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 561 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 580 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 631 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 675 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 699 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 797 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}



namespace std __attribute__ ((__visibility__ ("default")))
{
# 923 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;
      typedef value_type&& reference;

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>
 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
      { return std::move(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline auto
    operator-(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(const _Iterator& __i)
    { return move_iterator<_Iterator>(__i); }




}
# 69 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/debug/debug.h" 1 3
# 47 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 71 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{





  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = std::move(*__a);
          *__a = std::move(*__b);
          *__b = std::move(__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 116 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;
# 135 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);
    }
# 157 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 185 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 208 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 231 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 252 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 442 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 475 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 611 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 647 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      __builtin_memset(__first, static_cast<unsigned char>(__tmp),
         __last - __first);
    }
# 713 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 773 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)
       * (__last1 - __first1));
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = (__is_integer<_ValueType1>::__value
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }


  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 typedef typename iterator_traits<_II1>::iterator_category _Category1;
 typedef typename iterator_traits<_II2>::iterator_category _Category2;
 typedef std::__lc_rai<_Category1, _Category2> __rai_type;

 __last1 = __rai_type::__newlast1(__first1, __last1,
      __first2, __last2);
 for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
      ++__first1, ++__first2)
   {
     if (*__first1 < *__first2)
       return true;
     if (*__first2 < *__first1)
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp(__first1, __first2,
      std::min(__len1, __len2));
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }
# 934 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;




                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }



  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 0; __n >>= 1)
 ++__k;
      return __k - 1;
    }

  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }
# 1008 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1040 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1071 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {

      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;




                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1105 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;




                                                       ;
                                                       ;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1145 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1182 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }


}
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 58 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 83 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{
# 227 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}





# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
# 49 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 3
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stdint.h" 2 3
# 50 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 2 3
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdint" 3
namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 378 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/char_traits.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 1 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) throw ();
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) throw ();



extern void freelocale (locale_t __dataset) throw ();






extern locale_t uselocale (locale_t __dataset) throw ();







}
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/clocale" 2 3








namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 2 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 2 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 56 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;


}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 1 3
# 30 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 170 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 32 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 33 "/usr/include/sched.h" 2 3 4





typedef __pid_t pid_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int getcpu (unsigned int *, unsigned int *) throw ();


extern int setns (int __fd, int __nstype) throw ();


}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 121 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 23 "/usr/include/x86_64-linux-gnu/bits/timex.h" 2 3 4



struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 38 "/usr/include/time.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 47 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 48 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;
# 190 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 205 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 274 "/usr/include/time.h" 3 4
extern int getdate_err;
# 283 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 297 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 24 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 27 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4




enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 100 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 120 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 155 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 193 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
# 238 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,
                                 clockid_t __clockid,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 470 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 482 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 516 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 656 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
                            ;
# 668 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
                         ;
# 691 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
                            ;
# 704 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
                         ;



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
                             __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,
        clockid_t __clockid,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 789 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 871 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 997 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1010 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __clockid_t __clock_id,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 4)));





extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1056 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1123 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1157 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1171 "/usr/include/pthread.h" 3 4
}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 2 3
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 220 "/usr/include/unistd.h" 3 4
typedef __ssize_t ssize_t;






# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4





typedef __gid_t gid_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __useconds_t useconds_t;
# 274 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 334 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 345 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 376 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 404 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 432 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 444 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 469 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 511 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));






# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 610 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 660 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () ;




extern int seteuid (__uid_t __uid) throw () ;






extern int setgid (__gid_t __gid) throw () ;




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () ;




extern int setegid (__gid_t __gid) throw () ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () ;






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));








# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 870 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 991 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1003 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1014 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1024 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1035 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1056 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1079 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1089 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1107 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1124 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1161 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;
# 1170 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) throw ();
# 1171 "/usr/include/unistd.h" 2 3 4

}
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 2 3

typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 118 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));


static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));


static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));


static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 239 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw_pthread_cancel;






  return __gthread_active_ptr != 0;
}
# 657 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}



static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}



static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 800 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}



static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}



static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait_recursive (__gthread_cond_t *__cond,
        __gthread_recursive_mutex_t *__mutex,
        const __gthread_time_t *__abs_timeout)
{
  return __gthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 171 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/gthr.h" 2 3







#pragma GCC visibility pop
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/atomic_word.h" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 36 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __sync_fetch_and_add(__mem, __val); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __sync_fetch_and_add(__mem, __val); }
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 2 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 3




# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 1 3
# 48 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3




#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 92 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 2 3



namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 53 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }



      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }


      template<typename... _Args>
        void
        construct(pointer __p, _Args&&... __args)
 { ::new((void *)__p) _Tp(std::forward<_Args>(__args)...); }


      void
      destroy(pointer __p) { __p->~_Tp(); }
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++allocator.h" 2 3
# 49 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
  template<typename _Tp>
    class allocator;


  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };
    };
# 91 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }




  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };
# 191 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/allocator.h" 3
  template<typename _Tp,
    bool = __has_trivial_copy(typename _Tp::value_type)>
    struct __shrink_to_fit
    { static void _S_do_it(_Tp&) { } };

  template<typename _Tp>
    struct __shrink_to_fit<_Tp, true>
    {
      static void
      _S_do_it(_Tp& __v)
      {
 if (true)
   { _Tp(__v).swap(__v); }
 if (false) { }
      }
    };



  struct allocator_arg_t { };

  constexpr allocator_arg_t allocator_arg = allocator_arg_t();

template<typename _Tp> class __has_allocator_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::allocator_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_allocator_type : integral_constant<bool, __has_allocator_type_helper <typename remove_cv<_Tp>::type>::value> { };

  template<typename _Tp, typename _Alloc,
    bool = __has_allocator_type<_Tp>::value>
    struct __uses_allocator_helper
    : public false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc, true>
    : public integral_constant<bool, is_convertible<_Alloc,
         typename _Tp::allocator_type>::value>
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : public integral_constant<bool,
          __uses_allocator_helper<_Tp, _Alloc>::value>
    { };




}
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 36 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   if (true)
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   if (false)
     {
       __out._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 46 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 1 3
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 101 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 140 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 204 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 268 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };
# 351 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 422 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st : public unary_function<_Pair,
           typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd : public unary_function<_Pair,
           typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 541 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 1 3
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 99 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}
# 732 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_function.h" 2 3
# 50 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/range_access.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{







  template<class _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<class _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<class _Tp, size_t _Nm>
    inline _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<class _Tp, size_t _Nm>
    inline _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }


}
# 53 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/initializer_list" 3



#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() { return _M_len; }


      constexpr const_iterator
      begin() { return _M_array; }


      constexpr const_iterator
      end() { return begin() + size(); }
  };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils)
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils)
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 105 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 142 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 167 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {

                                                                  ;
       if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
        -1) <= 0)
  {
                                                              ;
    _M_destroy(__a);
  }
     }
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      basic_string()

      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }







      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 477 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 501 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string(basic_string&& __str)
      : _M_dataplus(__str._M_dataplus)
      {

 __str._M_data(_S_empty_rep()._M_refdata());



      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
# 525 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 558 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 573 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      {

 this->swap(__str);
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }







      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 733 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 746 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit()
      {
 if (true)
   { reserve(0); }
 if (false)
   { }
      }






      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 787 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }





      bool
      empty() const
      { return this->size() == 0; }
# 816 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
                                       ;
 return _M_data()[__pos];
      }
# 833 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {

                                       ;

                                         ;
 _M_leak();
 return _M_data()[__pos];
      }
# 854 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }






      reference
      front()
      { return operator[](0); }





      const_reference
      front() const
      { return operator[](0); }





      reference
      back()
      { return operator[](this->size() - 1); }





      const_reference
      back() const
      { return operator[](this->size() - 1); }
# 907 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }







      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }







      basic_string&
      append(const basic_string& __str);
# 978 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 return this->append(__s, traits_type::length(__s));
      }
# 1010 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1032 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 1068 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      {
 this->swap(__str);
 return *this;
      }
# 1088 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 1104 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 1116 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return this->assign(__s, traits_type::length(__s));
      }
# 1132 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1144 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1172 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1187 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1199 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
                                                                 ;
 this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
      }
# 1218 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1240 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1263 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1281 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1304 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1321 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
                                                                 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1345 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1361 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {

                               ;
 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1381 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1400 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1422 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1446 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1465 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1488 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1506 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1524 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {

                          ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1545 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1566 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {

                          ;
 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1588 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                            ;
                                             ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1658 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string& replace(iterator __i1, iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.end()); }


    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct_aux_2(static_cast<size_type>(__beg),
        __end, __a); }

      static _CharT*
      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
      { return _S_construct(__req, __c, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1744 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1754 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1764 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1796 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1809 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }
# 1823 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1840 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const;
# 1853 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1868 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1881 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1898 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const;
# 1911 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1926 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1939 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 1958 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 1972 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 1987 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2000 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2019 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 2033 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2048 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2062 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2079 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;
# 2092 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2108 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2121 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2138 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;
# 2153 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2171 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2201 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2225 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2243 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2266 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2291 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
# 2303 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 2424 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2470 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2507 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2544 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2581 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2618 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2655 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2672 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2690 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2713 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2731 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return getline(__is, __str, __is.widen('\n')); }

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}





# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 3




# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 58 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 158 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 250 "/usr/include/stdlib.h" 3 4
extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 337 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;
# 69 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __mode_t mode_t;




typedef __nlink_t nlink_t;
# 103 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 138 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __suseconds_t suseconds_t;






# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;







typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{



  return ((__uint16_t) ((((__bsx) >> 8) & 0xff) | (((__bsx) & 0xff) << 8)));

}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{



  return ((((__bsx) & 0xff000000u) >> 24) | (((__bsx) & 0x00ff0000u) >> 8) | (((__bsx) & 0x0000ff00u) << 8) | (((__bsx) & 0x000000ffu) << 24));

}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{



  return ((((__bsx) & 0xff00000000000000ull) >> 56) | (((__bsx) & 0x00ff000000000000ull) >> 40) | (((__bsx) & 0x0000ff0000000000ull) >> 24) | (((__bsx) & 0x000000ff00000000ull) >> 8) | (((__bsx) & 0x00000000ff000000ull) << 8) | (((__bsx) & 0x0000000000ff0000ull) << 24) | (((__bsx) & 0x000000000000ff00ull) << 40) | (((__bsx) & 0x00000000000000ffull) << 56));

}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
# 230 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
}
# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__))
                                         ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__)) ;







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__))
                                      ;



extern void free (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__))
                                         ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 610 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 688 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 698 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 710 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 720 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 742 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 752 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 762 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 774 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 957 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1014 "/usr/include/stdlib.h" 2 3 4
# 1023 "/usr/include/stdlib.h" 3 4
}
# 66 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 2 3
# 97 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;
  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;
  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;


  inline long
  abs(long __i) { return labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }


}
# 157 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;


  inline long long
  abs(long long __x) { return __x >= 0 ? __x : -__x; }


  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 192 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;
  using ::__gnu_cxx::abs;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



namespace std
{


  using std::lldiv_t;


  using std::llabs;
  using std::lldiv;


  using std::atoll;
  using std::strtoll;
  using std::strtoull;

  using std::strtof;
  using std::strtold;


  using std::abs;

  using std::div;

}
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwchar" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3


# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {




# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 3 4
typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 84 "/usr/include/stdio.h" 3 4
typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();







extern FILE *tmpfile (void) ;
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf") ;


extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf") ;

extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) throw () __asm__ ("" "__isoc99_sscanf");
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
          ;
# 577 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 873 "/usr/include/stdio.h" 3 4
}
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 2 3
# 91 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;
  using ::gets;
  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;
  using ::tmpnam;
  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 147 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
namespace __gnu_cxx
{
# 165 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 3

# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;


# 1 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4



}
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cerrno" 2 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;
      (*__errno_location ()) = 0;
      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
        || (std::__are_same<_Ret, int>::__value
     && (__tmp < __numeric_traits<int>::__min
         || __tmp > __numeric_traits<int>::__max)))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 2756 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }




  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }


  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }


  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }



}






# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/hash_bytes.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/hash_bytes.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 48 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type;
      typedef _Arg argument_type;
    };


  template<typename _Tp>
    struct hash : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const;
    };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const
      { return reinterpret_cast<size_t>(__p); }
    };
# 80 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/functional_hash.h" 3
  template<> inline size_t hash<bool>::operator()(bool __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<char>::operator()(char __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<signed char>::operator()(signed char __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned char>::operator()(unsigned char __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<wchar_t>::operator()(wchar_t __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<char16_t>::operator()(char16_t __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<char32_t>::operator()(char32_t __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<short>::operator()(short __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<int>::operator()(int __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<long>::operator()(long __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<long long>::operator()(long long __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned short>::operator()(unsigned short __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned int>::operator()(unsigned int __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned long>::operator()(unsigned long __val) const { return static_cast<size_t>(__val); };


  template<> inline size_t hash<unsigned long long>::operator()(unsigned long long __val) const { return static_cast<size_t>(__val); };



  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };

  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    inline size_t
    hash<float>::operator()(float __val) const
    {

      return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
    }


  template<>
    inline size_t
    hash<double>::operator()(double __val) const
    {

      return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
    }


  template<>
    __attribute__ ((__pure__)) size_t
    hash<long double>::operator()(long double __val) const;




}
# 2974 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };





  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };



}
# 54 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 1 3
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 if (true)
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   __throw_logic_error(("basic_string::_S_construct null not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 if (true)
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {

      if (__n == 0 && __a == _Alloc())
 return _S_empty_rep()._M_refdata();


      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(initializer_list<_CharT> __l, const _Alloc& __a)
    : _M_dataplus(_S_construct(__l.begin(), __l.end(), __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
                                             ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
                                             ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
                                              ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {

                           ;




       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
                                               ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {

      if (_M_rep() == &_S_empty_rep())
 return;

      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 578 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   if (true)
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 55 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/string" 2 3
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 99 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 118 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale() throw();
# 127 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 137 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 152 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 165 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 177 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 191 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 206 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 225 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 253 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 269 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    static locale
    global(const locale&);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 304 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 338 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 369 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 436 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 582 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw();
# 599 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc);
# 616 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 643 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 657 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 674 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 693 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 707 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 736 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 752 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 765 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };


}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 1 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      if (true)
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      if (false)
 {
   _M_impl->_M_remove_reference();
                          ;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      if (true)
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      if (false)
 {
   __tmp->_M_remove_reference();
                          ;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }


  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }

  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      if (true)
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      if (false)
 {
   delete [] __c;
                          ;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 823 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_classes.h" 2 3
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 200 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 256 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 331 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 362 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 394 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 420 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 437 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    typedef void (*event_callback) (event, ios_base&, int);
# 449 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

                                                             ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
                                                                ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 562 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 578 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 595 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 621 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 672 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 684 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 695 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 706 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 725 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 741 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 762 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 779 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }


}
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 1 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3








namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 115 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:
# 181 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 205 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      locale
      pubimbue(const locale &__loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 222 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 235 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      __streambuf_type*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }

      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }

      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }

      int
      pubsync() { return this->sync(); }
# 262 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 276 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 294 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 316 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 335 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 350 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 375 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 402 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 428 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 442 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 460 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 476 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 487 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 507 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 523 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 533 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 554 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual void
      imbue(const locale&)
      { }
# 569 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 580 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 592 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 605 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int
      sync() { return 0; }
# 627 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 643 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 665 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 678 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 702 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      pbackfail(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 720 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 746 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      virtual int_type
      overflow(int_type = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 761 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }

    private:


      basic_streambuf(const __streambuf_type& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      __streambuf_type&
      operator=(const __streambuf_type&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);



}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 808 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/streambuf" 2 3
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 1 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 51 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 38 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
typedef unsigned long int wctype_t;
# 56 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {







extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 155 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3 4
extern wctype_t wctype (const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();






extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();

}
# 39 "/usr/include/wctype.h" 2 3 4





extern "C" {



typedef const __int32_t *wctrans_t;



extern wctrans_t wctrans (const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();







extern int iswalnum_l (wint_t __wc, locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, locale_t __locale) throw ();



extern wctype_t wctype_l (const char *__property, locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)
     throw ();






extern wint_t towlower_l (wint_t __wc, locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, locale_t __locale) throw ();



extern wctrans_t wctrans_l (const char *__property, locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      locale_t __locale) throw ();



}
# 52 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 2 3
# 81 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}







namespace std
{

  using std::iswblank;

}
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cctype" 3
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_base.h" 1 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;
  };


}
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3






# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 1 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 50 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT&>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      constexpr istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw ()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw ()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }




}
# 50 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 143 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 161 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 178 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 194 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 210 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 224 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 239 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 253 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 268 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 285 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 304 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 323 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 345 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char *__to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 370 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 389 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 408 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 427 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 445 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const = 0;
# 462 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 478 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const = 0;
# 495 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 514 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const = 0;
# 535 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi,
        char_type* __dest) const = 0;
# 557 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const = 0;
# 581 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const = 0;
    };
# 604 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 673 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 710 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 723 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 736 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 751 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 765 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 779 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 794 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 811 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 827 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 844 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 864 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 891 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 922 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 955 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char *__to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1004 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1021 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1037 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1054 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1074 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1097 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }
# 1123 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char) const
      { return __c; }
# 1149 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char, char* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1174 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1207 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1218 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1242 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1261 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1279 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1297 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1314 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1331 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1347 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1364 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1384 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const;
# 1406 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
# 1429 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const;
# 1455 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };



}



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_inline.h" 1 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1512 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
        _S_ominus,
        _S_oplus,
        _S_ox,
        _S_oX,
        _S_odigits,
        _S_odigits_end = _S_odigits + 16,
        _S_oudigits = _S_odigits_end,
        _S_oudigits_end = _S_oudigits + 16,
        _S_oe = _S_odigits + 14,
        _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
        { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1640 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1678 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1692 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1706 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1719 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1750 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1763 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1776 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1793 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1805 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1818 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1831 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1844 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };
# 1914 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1935 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1961 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1997 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2056 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2098 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
        iter_type
        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2169 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      void*&) const;
# 2234 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2252 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2273 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2291 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2333 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __f, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2396 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2421 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __f, __fill, __v); }

    protected:
      template<typename _ValueT>
        iter_type
        _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
        iter_type
        _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2469 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, double __v) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;
# 2527 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 3
  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 1 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     if (true)
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     if (false)
       {
  delete __tmp;
                         ;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      if (true)
 {
   _M_grouping_size = __np.grouping().size();
   __grouping = new char[_M_grouping_size];
   __np.grouping().copy(__grouping, _M_grouping_size);
   _M_grouping = __grouping;
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(_M_grouping[0]) > 0
        && (_M_grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   _M_truename_size = __np.truename().size();
   __truename = new _CharT[_M_truename_size];
   __np.truename().copy(__truename, _M_truename_size);
   _M_truename = __truename;

   _M_falsename_size = __np.falsename().size();
   __falsename = new _CharT[_M_falsename_size];
   __np.falsename().copy(__falsename, _M_falsename_size);
   _M_falsename = __falsename;

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);
 }
      if (false)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
                          ;
 }
    }
# 137 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 731 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 967 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1028 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1153 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1190 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2608 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/locale_facets.h" 2 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 127 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 138 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
                          ;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 191 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 212 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 247 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 285 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 297 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 337 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 351 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 380 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 400 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 420 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 439 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };


}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 473 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/basic_ios.h" 2 3
# 45 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ios" 2 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 82 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 108 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }


      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 250 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 283 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      put(char_type __c);


      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 311 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 324 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      flush();
# 335 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      pos_type
      tellp();
# 346 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 358 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
        __ostream_type&
        _M_insert(_ValueT __v);
    };
# 377 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 396 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 406 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 425 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 448 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 490 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 540 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }







  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 578 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 3
  template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)
    { return (__os << __x); }



}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   if (true)
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   if (true)
     { _M_write(__s, __n); }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      if (true)
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   if (true)
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   if (false)
     {
       __out._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 588 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/ostream" 2 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:
# 91 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 120 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 239 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 249 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 281 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      int_type
      get();
# 295 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(char_type& __c);
# 322 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 333 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 356 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 366 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 395 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 406 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 430 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      ignore();

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore(streamsize __n, int_type __delim);
# 447 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      int_type
      peek();
# 465 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 484 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 501 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      putback(char_type __c);
# 517 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      unget();
# 535 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      int
      sync();
# 550 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      pos_type
      tellg();
# 565 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      seekg(pos_type);
# 581 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
        __istream_type&
        _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 636 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 672 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 683 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 702 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 744 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 772 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 833 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 849 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 3
  template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>&& __is, _Tp& __x)
    { return (__is >> __x); }



}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   if (true)
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::failbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          if (true)
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 514 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 859 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/istream" 2 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 20 "firmware/myproject.cpp" 2

# 1 "firmware/myproject.h" 1
# 23 "firmware/myproject.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 1
# 54 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h" 1
# 56 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_decl.h" 1
# 100 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 232 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 57 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h" 2
# 156 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/climits" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/climits" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/climits" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/limits.h" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/limits.h" 3
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/limits.h" 2 3
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/climits" 2 3
# 157 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h" 2
enum { CHAR_IS_SIGNED = (-127 -1) < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 220 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;
# 238 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_dt.def" 1


template <> struct ssdm_int<1 + 1024 * 0, true> { int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<2 + 1024 * 0, true> { int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<2 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<3 + 1024 * 0, true> { int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<3 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<4 + 1024 * 0, true> { int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<4 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<5 + 1024 * 0, true> { int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<5 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<6 + 1024 * 0, true> { int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<6 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<7 + 1024 * 0, true> { int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<7 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<8 + 1024 * 0, true> { int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<8 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<9 + 1024 * 0, true> { int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<9 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<10 + 1024 * 0, true> { int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<10 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<11 + 1024 * 0, true> { int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<11 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<12 + 1024 * 0, true> { int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<12 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<13 + 1024 * 0, true> { int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<13 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<14 + 1024 * 0, true> { int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<14 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<15 + 1024 * 0, true> { int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<15 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<16 + 1024 * 0, true> { int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<16 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<17 + 1024 * 0, true> { int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<17 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<18 + 1024 * 0, true> { int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<18 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<19 + 1024 * 0, true> { int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<19 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<20 + 1024 * 0, true> { int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<20 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<21 + 1024 * 0, true> { int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<21 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<22 + 1024 * 0, true> { int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<22 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<23 + 1024 * 0, true> { int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<23 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<24 + 1024 * 0, true> { int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<24 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<25 + 1024 * 0, true> { int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<25 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<26 + 1024 * 0, true> { int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<26 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<27 + 1024 * 0, true> { int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<27 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<28 + 1024 * 0, true> { int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<28 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<29 + 1024 * 0, true> { int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<29 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<30 + 1024 * 0, true> { int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<30 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<31 + 1024 * 0, true> { int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<31 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<32 + 1024 * 0, true> { int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<32 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<33 + 1024 * 0, true> { int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<33 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<34 + 1024 * 0, true> { int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<34 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<35 + 1024 * 0, true> { int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<35 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<36 + 1024 * 0, true> { int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<36 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<37 + 1024 * 0, true> { int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<37 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<38 + 1024 * 0, true> { int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<38 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<39 + 1024 * 0, true> { int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<39 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<40 + 1024 * 0, true> { int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<40 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<41 + 1024 * 0, true> { int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<41 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<42 + 1024 * 0, true> { int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<42 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<43 + 1024 * 0, true> { int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<43 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<44 + 1024 * 0, true> { int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<44 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<45 + 1024 * 0, true> { int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<45 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<46 + 1024 * 0, true> { int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<46 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<47 + 1024 * 0, true> { int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<47 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<48 + 1024 * 0, true> { int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<48 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<49 + 1024 * 0, true> { int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<49 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<50 + 1024 * 0, true> { int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<50 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<51 + 1024 * 0, true> { int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<51 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<52 + 1024 * 0, true> { int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<52 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<53 + 1024 * 0, true> { int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<53 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<54 + 1024 * 0, true> { int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<54 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<55 + 1024 * 0, true> { int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<55 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<56 + 1024 * 0, true> { int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<56 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<57 + 1024 * 0, true> { int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<57 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<58 + 1024 * 0, true> { int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<58 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<59 + 1024 * 0, true> { int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<59 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<60 + 1024 * 0, true> { int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<60 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<61 + 1024 * 0, true> { int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<61 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<62 + 1024 * 0, true> { int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<62 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<63 + 1024 * 0, true> { int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<63 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, false>(){}; };


template <> struct ssdm_int<64 + 1024 * 0, true> { int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<64 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, false>(){}; };




template <> struct ssdm_int<65 + 1024 * 0, true> { int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<65 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<66 + 1024 * 0, true> { int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<66 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<67 + 1024 * 0, true> { int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<67 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<68 + 1024 * 0, true> { int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<68 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<69 + 1024 * 0, true> { int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<69 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<70 + 1024 * 0, true> { int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<70 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<71 + 1024 * 0, true> { int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<71 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<72 + 1024 * 0, true> { int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<72 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<73 + 1024 * 0, true> { int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<73 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<74 + 1024 * 0, true> { int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<74 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<75 + 1024 * 0, true> { int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<75 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<76 + 1024 * 0, true> { int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<76 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<77 + 1024 * 0, true> { int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<77 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<78 + 1024 * 0, true> { int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<78 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<79 + 1024 * 0, true> { int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<79 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<80 + 1024 * 0, true> { int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<80 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<81 + 1024 * 0, true> { int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<81 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<82 + 1024 * 0, true> { int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<82 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<83 + 1024 * 0, true> { int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<83 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<84 + 1024 * 0, true> { int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<84 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<85 + 1024 * 0, true> { int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<85 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<86 + 1024 * 0, true> { int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<86 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<87 + 1024 * 0, true> { int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<87 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<88 + 1024 * 0, true> { int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<88 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<89 + 1024 * 0, true> { int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<89 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<90 + 1024 * 0, true> { int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<90 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<91 + 1024 * 0, true> { int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<91 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<92 + 1024 * 0, true> { int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<92 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<93 + 1024 * 0, true> { int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<93 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<94 + 1024 * 0, true> { int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<94 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<95 + 1024 * 0, true> { int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<95 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<96 + 1024 * 0, true> { int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<96 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<97 + 1024 * 0, true> { int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<97 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<98 + 1024 * 0, true> { int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<98 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<99 + 1024 * 0, true> { int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<99 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<100 + 1024 * 0, true> { int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<100 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<101 + 1024 * 0, true> { int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<101 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<102 + 1024 * 0, true> { int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<102 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<103 + 1024 * 0, true> { int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<103 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<104 + 1024 * 0, true> { int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<104 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<105 + 1024 * 0, true> { int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<105 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<106 + 1024 * 0, true> { int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<106 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<107 + 1024 * 0, true> { int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<107 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<108 + 1024 * 0, true> { int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<108 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<109 + 1024 * 0, true> { int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<109 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<110 + 1024 * 0, true> { int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<110 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<111 + 1024 * 0, true> { int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<111 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<112 + 1024 * 0, true> { int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<112 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<113 + 1024 * 0, true> { int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<113 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<114 + 1024 * 0, true> { int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<114 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<115 + 1024 * 0, true> { int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<115 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<116 + 1024 * 0, true> { int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<116 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<117 + 1024 * 0, true> { int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<117 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<118 + 1024 * 0, true> { int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<118 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<119 + 1024 * 0, true> { int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<119 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<120 + 1024 * 0, true> { int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<120 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<121 + 1024 * 0, true> { int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<121 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<122 + 1024 * 0, true> { int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<122 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<123 + 1024 * 0, true> { int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<123 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<124 + 1024 * 0, true> { int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<124 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<125 + 1024 * 0, true> { int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<125 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<126 + 1024 * 0, true> { int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<126 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<127 + 1024 * 0, true> { int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<127 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<128 + 1024 * 0, true> { int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<128 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, false>(){}; };






template <> struct ssdm_int<129 + 1024 * 0, true> { int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<129 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<130 + 1024 * 0, true> { int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<130 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<131 + 1024 * 0, true> { int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<131 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<132 + 1024 * 0, true> { int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<132 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<133 + 1024 * 0, true> { int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<133 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<134 + 1024 * 0, true> { int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<134 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<135 + 1024 * 0, true> { int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<135 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<136 + 1024 * 0, true> { int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<136 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<137 + 1024 * 0, true> { int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<137 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<138 + 1024 * 0, true> { int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<138 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<139 + 1024 * 0, true> { int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<139 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<140 + 1024 * 0, true> { int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<140 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<141 + 1024 * 0, true> { int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<141 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<142 + 1024 * 0, true> { int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<142 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<143 + 1024 * 0, true> { int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<143 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<144 + 1024 * 0, true> { int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<144 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<145 + 1024 * 0, true> { int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<145 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<146 + 1024 * 0, true> { int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<146 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<147 + 1024 * 0, true> { int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<147 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<148 + 1024 * 0, true> { int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<148 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<149 + 1024 * 0, true> { int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<149 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<150 + 1024 * 0, true> { int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<150 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<151 + 1024 * 0, true> { int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<151 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<152 + 1024 * 0, true> { int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<152 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<153 + 1024 * 0, true> { int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<153 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<154 + 1024 * 0, true> { int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<154 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<155 + 1024 * 0, true> { int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<155 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<156 + 1024 * 0, true> { int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<156 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<157 + 1024 * 0, true> { int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<157 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<158 + 1024 * 0, true> { int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<158 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<159 + 1024 * 0, true> { int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<159 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<160 + 1024 * 0, true> { int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<160 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<161 + 1024 * 0, true> { int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<161 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<162 + 1024 * 0, true> { int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<162 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<163 + 1024 * 0, true> { int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<163 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<164 + 1024 * 0, true> { int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<164 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<165 + 1024 * 0, true> { int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<165 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<166 + 1024 * 0, true> { int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<166 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<167 + 1024 * 0, true> { int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<167 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<168 + 1024 * 0, true> { int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<168 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<169 + 1024 * 0, true> { int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<169 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<170 + 1024 * 0, true> { int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<170 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<171 + 1024 * 0, true> { int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<171 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<172 + 1024 * 0, true> { int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<172 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<173 + 1024 * 0, true> { int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<173 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<174 + 1024 * 0, true> { int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<174 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<175 + 1024 * 0, true> { int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<175 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<176 + 1024 * 0, true> { int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<176 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<177 + 1024 * 0, true> { int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<177 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<178 + 1024 * 0, true> { int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<178 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<179 + 1024 * 0, true> { int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<179 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<180 + 1024 * 0, true> { int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<180 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<181 + 1024 * 0, true> { int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<181 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<182 + 1024 * 0, true> { int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<182 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<183 + 1024 * 0, true> { int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<183 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<184 + 1024 * 0, true> { int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<184 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<185 + 1024 * 0, true> { int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<185 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<186 + 1024 * 0, true> { int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<186 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<187 + 1024 * 0, true> { int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<187 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<188 + 1024 * 0, true> { int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<188 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<189 + 1024 * 0, true> { int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<189 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<190 + 1024 * 0, true> { int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<190 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<191 + 1024 * 0, true> { int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<191 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<192 + 1024 * 0, true> { int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<192 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<193 + 1024 * 0, true> { int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<193 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<194 + 1024 * 0, true> { int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<194 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<195 + 1024 * 0, true> { int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<195 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<196 + 1024 * 0, true> { int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<196 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<197 + 1024 * 0, true> { int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<197 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<198 + 1024 * 0, true> { int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<198 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<199 + 1024 * 0, true> { int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<199 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<200 + 1024 * 0, true> { int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<200 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<201 + 1024 * 0, true> { int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<201 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<202 + 1024 * 0, true> { int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<202 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<203 + 1024 * 0, true> { int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<203 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<204 + 1024 * 0, true> { int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<204 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<205 + 1024 * 0, true> { int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<205 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<206 + 1024 * 0, true> { int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<206 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<207 + 1024 * 0, true> { int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<207 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<208 + 1024 * 0, true> { int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<208 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<209 + 1024 * 0, true> { int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<209 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<210 + 1024 * 0, true> { int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<210 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<211 + 1024 * 0, true> { int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<211 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<212 + 1024 * 0, true> { int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<212 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<213 + 1024 * 0, true> { int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<213 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<214 + 1024 * 0, true> { int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<214 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<215 + 1024 * 0, true> { int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<215 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<216 + 1024 * 0, true> { int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<216 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<217 + 1024 * 0, true> { int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<217 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<218 + 1024 * 0, true> { int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<218 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<219 + 1024 * 0, true> { int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<219 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<220 + 1024 * 0, true> { int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<220 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<221 + 1024 * 0, true> { int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<221 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<222 + 1024 * 0, true> { int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<222 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<223 + 1024 * 0, true> { int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<223 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<224 + 1024 * 0, true> { int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<224 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<225 + 1024 * 0, true> { int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<225 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<226 + 1024 * 0, true> { int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<226 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<227 + 1024 * 0, true> { int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<227 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<228 + 1024 * 0, true> { int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<228 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<229 + 1024 * 0, true> { int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<229 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<230 + 1024 * 0, true> { int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<230 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<231 + 1024 * 0, true> { int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<231 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<232 + 1024 * 0, true> { int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<232 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<233 + 1024 * 0, true> { int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<233 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<234 + 1024 * 0, true> { int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<234 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<235 + 1024 * 0, true> { int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<235 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<236 + 1024 * 0, true> { int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<236 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<237 + 1024 * 0, true> { int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<237 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<238 + 1024 * 0, true> { int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<238 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<239 + 1024 * 0, true> { int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<239 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<240 + 1024 * 0, true> { int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<240 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<241 + 1024 * 0, true> { int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<241 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<242 + 1024 * 0, true> { int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<242 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<243 + 1024 * 0, true> { int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<243 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<244 + 1024 * 0, true> { int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<244 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<245 + 1024 * 0, true> { int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<245 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<246 + 1024 * 0, true> { int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<246 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<247 + 1024 * 0, true> { int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<247 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<248 + 1024 * 0, true> { int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<248 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<249 + 1024 * 0, true> { int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<249 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<250 + 1024 * 0, true> { int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<250 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<251 + 1024 * 0, true> { int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<251 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<252 + 1024 * 0, true> { int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<252 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<253 + 1024 * 0, true> { int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<253 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<254 + 1024 * 0, true> { int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<254 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<255 + 1024 * 0, true> { int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<255 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<256 + 1024 * 0, true> { int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<256 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<257 + 1024 * 0, true> { int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<257 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<258 + 1024 * 0, true> { int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<258 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<259 + 1024 * 0, true> { int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<259 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<260 + 1024 * 0, true> { int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<260 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<261 + 1024 * 0, true> { int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<261 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<262 + 1024 * 0, true> { int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<262 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<263 + 1024 * 0, true> { int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<263 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<264 + 1024 * 0, true> { int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<264 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<265 + 1024 * 0, true> { int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<265 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<266 + 1024 * 0, true> { int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<266 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<267 + 1024 * 0, true> { int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<267 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<268 + 1024 * 0, true> { int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<268 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<269 + 1024 * 0, true> { int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<269 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<270 + 1024 * 0, true> { int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<270 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<271 + 1024 * 0, true> { int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<271 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<272 + 1024 * 0, true> { int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<272 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<273 + 1024 * 0, true> { int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<273 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<274 + 1024 * 0, true> { int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<274 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<275 + 1024 * 0, true> { int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<275 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<276 + 1024 * 0, true> { int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<276 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<277 + 1024 * 0, true> { int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<277 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<278 + 1024 * 0, true> { int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<278 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<279 + 1024 * 0, true> { int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<279 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<280 + 1024 * 0, true> { int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<280 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<281 + 1024 * 0, true> { int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<281 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<282 + 1024 * 0, true> { int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<282 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<283 + 1024 * 0, true> { int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<283 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<284 + 1024 * 0, true> { int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<284 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<285 + 1024 * 0, true> { int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<285 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<286 + 1024 * 0, true> { int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<286 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<287 + 1024 * 0, true> { int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<287 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<288 + 1024 * 0, true> { int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<288 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<289 + 1024 * 0, true> { int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<289 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<290 + 1024 * 0, true> { int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<290 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<291 + 1024 * 0, true> { int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<291 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<292 + 1024 * 0, true> { int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<292 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<293 + 1024 * 0, true> { int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<293 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<294 + 1024 * 0, true> { int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<294 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<295 + 1024 * 0, true> { int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<295 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<296 + 1024 * 0, true> { int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<296 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<297 + 1024 * 0, true> { int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<297 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<298 + 1024 * 0, true> { int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<298 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<299 + 1024 * 0, true> { int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<299 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<300 + 1024 * 0, true> { int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<300 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<301 + 1024 * 0, true> { int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<301 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<302 + 1024 * 0, true> { int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<302 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<303 + 1024 * 0, true> { int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<303 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<304 + 1024 * 0, true> { int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<304 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<305 + 1024 * 0, true> { int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<305 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<306 + 1024 * 0, true> { int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<306 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<307 + 1024 * 0, true> { int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<307 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<308 + 1024 * 0, true> { int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<308 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<309 + 1024 * 0, true> { int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<309 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<310 + 1024 * 0, true> { int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<310 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<311 + 1024 * 0, true> { int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<311 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<312 + 1024 * 0, true> { int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<312 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<313 + 1024 * 0, true> { int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<313 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<314 + 1024 * 0, true> { int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<314 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<315 + 1024 * 0, true> { int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<315 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<316 + 1024 * 0, true> { int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<316 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<317 + 1024 * 0, true> { int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<317 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<318 + 1024 * 0, true> { int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<318 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<319 + 1024 * 0, true> { int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<319 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<320 + 1024 * 0, true> { int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<320 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<321 + 1024 * 0, true> { int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<321 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<322 + 1024 * 0, true> { int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<322 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<323 + 1024 * 0, true> { int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<323 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<324 + 1024 * 0, true> { int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<324 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<325 + 1024 * 0, true> { int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<325 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<326 + 1024 * 0, true> { int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<326 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<327 + 1024 * 0, true> { int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<327 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<328 + 1024 * 0, true> { int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<328 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<329 + 1024 * 0, true> { int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<329 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<330 + 1024 * 0, true> { int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<330 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<331 + 1024 * 0, true> { int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<331 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<332 + 1024 * 0, true> { int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<332 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<333 + 1024 * 0, true> { int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<333 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<334 + 1024 * 0, true> { int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<334 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<335 + 1024 * 0, true> { int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<335 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<336 + 1024 * 0, true> { int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<336 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<337 + 1024 * 0, true> { int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<337 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<338 + 1024 * 0, true> { int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<338 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<339 + 1024 * 0, true> { int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<339 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<340 + 1024 * 0, true> { int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<340 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<341 + 1024 * 0, true> { int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<341 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<342 + 1024 * 0, true> { int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<342 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<343 + 1024 * 0, true> { int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<343 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<344 + 1024 * 0, true> { int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<344 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<345 + 1024 * 0, true> { int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<345 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<346 + 1024 * 0, true> { int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<346 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<347 + 1024 * 0, true> { int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<347 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<348 + 1024 * 0, true> { int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<348 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<349 + 1024 * 0, true> { int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<349 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<350 + 1024 * 0, true> { int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<350 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<351 + 1024 * 0, true> { int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<351 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<352 + 1024 * 0, true> { int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<352 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<353 + 1024 * 0, true> { int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<353 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<354 + 1024 * 0, true> { int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<354 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<355 + 1024 * 0, true> { int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<355 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<356 + 1024 * 0, true> { int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<356 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<357 + 1024 * 0, true> { int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<357 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<358 + 1024 * 0, true> { int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<358 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<359 + 1024 * 0, true> { int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<359 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<360 + 1024 * 0, true> { int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<360 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<361 + 1024 * 0, true> { int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<361 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<362 + 1024 * 0, true> { int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<362 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<363 + 1024 * 0, true> { int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<363 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<364 + 1024 * 0, true> { int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<364 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<365 + 1024 * 0, true> { int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<365 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<366 + 1024 * 0, true> { int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<366 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<367 + 1024 * 0, true> { int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<367 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<368 + 1024 * 0, true> { int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<368 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<369 + 1024 * 0, true> { int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<369 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<370 + 1024 * 0, true> { int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<370 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<371 + 1024 * 0, true> { int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<371 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<372 + 1024 * 0, true> { int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<372 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<373 + 1024 * 0, true> { int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<373 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<374 + 1024 * 0, true> { int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<374 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<375 + 1024 * 0, true> { int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<375 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<376 + 1024 * 0, true> { int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<376 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<377 + 1024 * 0, true> { int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<377 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<378 + 1024 * 0, true> { int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<378 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<379 + 1024 * 0, true> { int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<379 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<380 + 1024 * 0, true> { int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<380 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<381 + 1024 * 0, true> { int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<381 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<382 + 1024 * 0, true> { int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<382 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<383 + 1024 * 0, true> { int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<383 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<384 + 1024 * 0, true> { int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<384 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<385 + 1024 * 0, true> { int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<385 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<386 + 1024 * 0, true> { int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<386 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<387 + 1024 * 0, true> { int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<387 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<388 + 1024 * 0, true> { int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<388 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<389 + 1024 * 0, true> { int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<389 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<390 + 1024 * 0, true> { int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<390 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<391 + 1024 * 0, true> { int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<391 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<392 + 1024 * 0, true> { int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<392 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<393 + 1024 * 0, true> { int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<393 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<394 + 1024 * 0, true> { int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<394 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<395 + 1024 * 0, true> { int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<395 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<396 + 1024 * 0, true> { int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<396 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<397 + 1024 * 0, true> { int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<397 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<398 + 1024 * 0, true> { int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<398 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<399 + 1024 * 0, true> { int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<399 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<400 + 1024 * 0, true> { int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<400 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<401 + 1024 * 0, true> { int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<401 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<402 + 1024 * 0, true> { int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<402 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<403 + 1024 * 0, true> { int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<403 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<404 + 1024 * 0, true> { int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<404 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<405 + 1024 * 0, true> { int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<405 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<406 + 1024 * 0, true> { int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<406 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<407 + 1024 * 0, true> { int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<407 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<408 + 1024 * 0, true> { int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<408 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<409 + 1024 * 0, true> { int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<409 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<410 + 1024 * 0, true> { int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<410 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<411 + 1024 * 0, true> { int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<411 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<412 + 1024 * 0, true> { int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<412 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<413 + 1024 * 0, true> { int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<413 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<414 + 1024 * 0, true> { int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<414 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<415 + 1024 * 0, true> { int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<415 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<416 + 1024 * 0, true> { int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<416 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<417 + 1024 * 0, true> { int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<417 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<418 + 1024 * 0, true> { int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<418 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<419 + 1024 * 0, true> { int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<419 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<420 + 1024 * 0, true> { int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<420 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<421 + 1024 * 0, true> { int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<421 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<422 + 1024 * 0, true> { int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<422 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<423 + 1024 * 0, true> { int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<423 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<424 + 1024 * 0, true> { int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<424 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<425 + 1024 * 0, true> { int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<425 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<426 + 1024 * 0, true> { int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<426 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<427 + 1024 * 0, true> { int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<427 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<428 + 1024 * 0, true> { int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<428 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<429 + 1024 * 0, true> { int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<429 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<430 + 1024 * 0, true> { int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<430 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<431 + 1024 * 0, true> { int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<431 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<432 + 1024 * 0, true> { int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<432 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<433 + 1024 * 0, true> { int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<433 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<434 + 1024 * 0, true> { int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<434 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<435 + 1024 * 0, true> { int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<435 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<436 + 1024 * 0, true> { int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<436 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<437 + 1024 * 0, true> { int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<437 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<438 + 1024 * 0, true> { int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<438 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<439 + 1024 * 0, true> { int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<439 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<440 + 1024 * 0, true> { int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<440 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<441 + 1024 * 0, true> { int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<441 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<442 + 1024 * 0, true> { int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<442 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<443 + 1024 * 0, true> { int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<443 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<444 + 1024 * 0, true> { int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<444 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<445 + 1024 * 0, true> { int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<445 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<446 + 1024 * 0, true> { int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<446 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<447 + 1024 * 0, true> { int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<447 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<448 + 1024 * 0, true> { int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<448 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<449 + 1024 * 0, true> { int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<449 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<450 + 1024 * 0, true> { int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<450 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<451 + 1024 * 0, true> { int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<451 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<452 + 1024 * 0, true> { int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<452 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<453 + 1024 * 0, true> { int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<453 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<454 + 1024 * 0, true> { int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<454 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<455 + 1024 * 0, true> { int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<455 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<456 + 1024 * 0, true> { int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<456 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<457 + 1024 * 0, true> { int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<457 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<458 + 1024 * 0, true> { int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<458 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<459 + 1024 * 0, true> { int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<459 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<460 + 1024 * 0, true> { int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<460 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<461 + 1024 * 0, true> { int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<461 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<462 + 1024 * 0, true> { int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<462 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<463 + 1024 * 0, true> { int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<463 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<464 + 1024 * 0, true> { int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<464 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<465 + 1024 * 0, true> { int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<465 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<466 + 1024 * 0, true> { int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<466 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<467 + 1024 * 0, true> { int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<467 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<468 + 1024 * 0, true> { int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<468 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<469 + 1024 * 0, true> { int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<469 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<470 + 1024 * 0, true> { int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<470 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<471 + 1024 * 0, true> { int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<471 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<472 + 1024 * 0, true> { int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<472 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<473 + 1024 * 0, true> { int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<473 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<474 + 1024 * 0, true> { int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<474 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<475 + 1024 * 0, true> { int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<475 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<476 + 1024 * 0, true> { int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<476 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<477 + 1024 * 0, true> { int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<477 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<478 + 1024 * 0, true> { int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<478 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<479 + 1024 * 0, true> { int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<479 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<480 + 1024 * 0, true> { int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<480 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<481 + 1024 * 0, true> { int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<481 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<482 + 1024 * 0, true> { int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<482 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<483 + 1024 * 0, true> { int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<483 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<484 + 1024 * 0, true> { int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<484 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<485 + 1024 * 0, true> { int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<485 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<486 + 1024 * 0, true> { int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<486 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<487 + 1024 * 0, true> { int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<487 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<488 + 1024 * 0, true> { int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<488 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<489 + 1024 * 0, true> { int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<489 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<490 + 1024 * 0, true> { int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<490 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<491 + 1024 * 0, true> { int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<491 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<492 + 1024 * 0, true> { int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<492 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<493 + 1024 * 0, true> { int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<493 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<494 + 1024 * 0, true> { int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<494 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<495 + 1024 * 0, true> { int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<495 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<496 + 1024 * 0, true> { int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<496 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<497 + 1024 * 0, true> { int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<497 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<498 + 1024 * 0, true> { int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<498 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<499 + 1024 * 0, true> { int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<499 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<500 + 1024 * 0, true> { int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<500 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<501 + 1024 * 0, true> { int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<501 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<502 + 1024 * 0, true> { int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<502 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<503 + 1024 * 0, true> { int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<503 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<504 + 1024 * 0, true> { int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<504 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<505 + 1024 * 0, true> { int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<505 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<506 + 1024 * 0, true> { int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<506 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<507 + 1024 * 0, true> { int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<507 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<508 + 1024 * 0, true> { int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<508 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<509 + 1024 * 0, true> { int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<509 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<510 + 1024 * 0, true> { int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<510 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<511 + 1024 * 0, true> { int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<511 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<512 + 1024 * 0, true> { int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<512 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<513 + 1024 * 0, true> { int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<513 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<514 + 1024 * 0, true> { int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<514 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<515 + 1024 * 0, true> { int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<515 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<516 + 1024 * 0, true> { int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<516 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<517 + 1024 * 0, true> { int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<517 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<518 + 1024 * 0, true> { int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<518 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<519 + 1024 * 0, true> { int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<519 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<520 + 1024 * 0, true> { int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<520 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<521 + 1024 * 0, true> { int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<521 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<522 + 1024 * 0, true> { int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<522 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<523 + 1024 * 0, true> { int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<523 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<524 + 1024 * 0, true> { int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<524 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<525 + 1024 * 0, true> { int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<525 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<526 + 1024 * 0, true> { int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<526 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<527 + 1024 * 0, true> { int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<527 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<528 + 1024 * 0, true> { int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<528 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<529 + 1024 * 0, true> { int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<529 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<530 + 1024 * 0, true> { int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<530 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<531 + 1024 * 0, true> { int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<531 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<532 + 1024 * 0, true> { int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<532 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<533 + 1024 * 0, true> { int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<533 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<534 + 1024 * 0, true> { int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<534 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<535 + 1024 * 0, true> { int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<535 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<536 + 1024 * 0, true> { int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<536 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<537 + 1024 * 0, true> { int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<537 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<538 + 1024 * 0, true> { int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<538 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<539 + 1024 * 0, true> { int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<539 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<540 + 1024 * 0, true> { int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<540 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<541 + 1024 * 0, true> { int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<541 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<542 + 1024 * 0, true> { int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<542 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<543 + 1024 * 0, true> { int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<543 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<544 + 1024 * 0, true> { int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<544 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<545 + 1024 * 0, true> { int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<545 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<546 + 1024 * 0, true> { int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<546 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<547 + 1024 * 0, true> { int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<547 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<548 + 1024 * 0, true> { int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<548 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<549 + 1024 * 0, true> { int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<549 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<550 + 1024 * 0, true> { int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<550 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<551 + 1024 * 0, true> { int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<551 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<552 + 1024 * 0, true> { int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<552 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<553 + 1024 * 0, true> { int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<553 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<554 + 1024 * 0, true> { int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<554 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<555 + 1024 * 0, true> { int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<555 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<556 + 1024 * 0, true> { int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<556 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<557 + 1024 * 0, true> { int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<557 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<558 + 1024 * 0, true> { int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<558 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<559 + 1024 * 0, true> { int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<559 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<560 + 1024 * 0, true> { int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<560 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<561 + 1024 * 0, true> { int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<561 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<562 + 1024 * 0, true> { int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<562 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<563 + 1024 * 0, true> { int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<563 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<564 + 1024 * 0, true> { int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<564 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<565 + 1024 * 0, true> { int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<565 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<566 + 1024 * 0, true> { int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<566 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<567 + 1024 * 0, true> { int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<567 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<568 + 1024 * 0, true> { int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<568 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<569 + 1024 * 0, true> { int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<569 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<570 + 1024 * 0, true> { int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<570 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<571 + 1024 * 0, true> { int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<571 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<572 + 1024 * 0, true> { int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<572 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<573 + 1024 * 0, true> { int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<573 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<574 + 1024 * 0, true> { int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<574 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<575 + 1024 * 0, true> { int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<575 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<576 + 1024 * 0, true> { int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<576 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<577 + 1024 * 0, true> { int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<577 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<578 + 1024 * 0, true> { int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<578 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<579 + 1024 * 0, true> { int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<579 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<580 + 1024 * 0, true> { int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<580 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<581 + 1024 * 0, true> { int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<581 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<582 + 1024 * 0, true> { int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<582 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<583 + 1024 * 0, true> { int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<583 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<584 + 1024 * 0, true> { int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<584 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<585 + 1024 * 0, true> { int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<585 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<586 + 1024 * 0, true> { int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<586 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<587 + 1024 * 0, true> { int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<587 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<588 + 1024 * 0, true> { int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<588 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<589 + 1024 * 0, true> { int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<589 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<590 + 1024 * 0, true> { int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<590 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<591 + 1024 * 0, true> { int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<591 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<592 + 1024 * 0, true> { int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<592 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<593 + 1024 * 0, true> { int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<593 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<594 + 1024 * 0, true> { int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<594 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<595 + 1024 * 0, true> { int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<595 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<596 + 1024 * 0, true> { int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<596 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<597 + 1024 * 0, true> { int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<597 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<598 + 1024 * 0, true> { int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<598 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<599 + 1024 * 0, true> { int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<599 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<600 + 1024 * 0, true> { int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<600 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<601 + 1024 * 0, true> { int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<601 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<602 + 1024 * 0, true> { int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<602 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<603 + 1024 * 0, true> { int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<603 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<604 + 1024 * 0, true> { int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<604 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<605 + 1024 * 0, true> { int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<605 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<606 + 1024 * 0, true> { int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<606 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<607 + 1024 * 0, true> { int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<607 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<608 + 1024 * 0, true> { int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<608 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<609 + 1024 * 0, true> { int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<609 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<610 + 1024 * 0, true> { int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<610 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<611 + 1024 * 0, true> { int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<611 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<612 + 1024 * 0, true> { int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<612 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<613 + 1024 * 0, true> { int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<613 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<614 + 1024 * 0, true> { int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<614 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<615 + 1024 * 0, true> { int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<615 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<616 + 1024 * 0, true> { int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<616 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<617 + 1024 * 0, true> { int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<617 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<618 + 1024 * 0, true> { int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<618 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<619 + 1024 * 0, true> { int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<619 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<620 + 1024 * 0, true> { int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<620 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<621 + 1024 * 0, true> { int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<621 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<622 + 1024 * 0, true> { int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<622 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<623 + 1024 * 0, true> { int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<623 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<624 + 1024 * 0, true> { int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<624 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<625 + 1024 * 0, true> { int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<625 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<626 + 1024 * 0, true> { int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<626 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<627 + 1024 * 0, true> { int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<627 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<628 + 1024 * 0, true> { int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<628 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<629 + 1024 * 0, true> { int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<629 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<630 + 1024 * 0, true> { int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<630 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<631 + 1024 * 0, true> { int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<631 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<632 + 1024 * 0, true> { int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<632 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<633 + 1024 * 0, true> { int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<633 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<634 + 1024 * 0, true> { int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<634 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<635 + 1024 * 0, true> { int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<635 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<636 + 1024 * 0, true> { int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<636 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<637 + 1024 * 0, true> { int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<637 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<638 + 1024 * 0, true> { int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<638 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<639 + 1024 * 0, true> { int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<639 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<640 + 1024 * 0, true> { int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<640 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<641 + 1024 * 0, true> { int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<641 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<642 + 1024 * 0, true> { int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<642 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<643 + 1024 * 0, true> { int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<643 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<644 + 1024 * 0, true> { int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<644 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<645 + 1024 * 0, true> { int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<645 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<646 + 1024 * 0, true> { int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<646 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<647 + 1024 * 0, true> { int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<647 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<648 + 1024 * 0, true> { int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<648 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<649 + 1024 * 0, true> { int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<649 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<650 + 1024 * 0, true> { int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<650 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<651 + 1024 * 0, true> { int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<651 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<652 + 1024 * 0, true> { int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<652 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<653 + 1024 * 0, true> { int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<653 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<654 + 1024 * 0, true> { int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<654 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<655 + 1024 * 0, true> { int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<655 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<656 + 1024 * 0, true> { int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<656 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<657 + 1024 * 0, true> { int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<657 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<658 + 1024 * 0, true> { int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<658 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<659 + 1024 * 0, true> { int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<659 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<660 + 1024 * 0, true> { int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<660 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<661 + 1024 * 0, true> { int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<661 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<662 + 1024 * 0, true> { int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<662 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<663 + 1024 * 0, true> { int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<663 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<664 + 1024 * 0, true> { int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<664 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<665 + 1024 * 0, true> { int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<665 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<666 + 1024 * 0, true> { int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<666 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<667 + 1024 * 0, true> { int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<667 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<668 + 1024 * 0, true> { int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<668 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<669 + 1024 * 0, true> { int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<669 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<670 + 1024 * 0, true> { int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<670 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<671 + 1024 * 0, true> { int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<671 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<672 + 1024 * 0, true> { int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<672 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<673 + 1024 * 0, true> { int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<673 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<674 + 1024 * 0, true> { int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<674 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<675 + 1024 * 0, true> { int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<675 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<676 + 1024 * 0, true> { int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<676 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<677 + 1024 * 0, true> { int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<677 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<678 + 1024 * 0, true> { int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<678 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<679 + 1024 * 0, true> { int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<679 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<680 + 1024 * 0, true> { int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<680 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<681 + 1024 * 0, true> { int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<681 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<682 + 1024 * 0, true> { int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<682 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<683 + 1024 * 0, true> { int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<683 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<684 + 1024 * 0, true> { int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<684 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<685 + 1024 * 0, true> { int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<685 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<686 + 1024 * 0, true> { int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<686 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<687 + 1024 * 0, true> { int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<687 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<688 + 1024 * 0, true> { int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<688 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<689 + 1024 * 0, true> { int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<689 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<690 + 1024 * 0, true> { int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<690 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<691 + 1024 * 0, true> { int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<691 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<692 + 1024 * 0, true> { int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<692 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<693 + 1024 * 0, true> { int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<693 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<694 + 1024 * 0, true> { int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<694 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<695 + 1024 * 0, true> { int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<695 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<696 + 1024 * 0, true> { int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<696 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<697 + 1024 * 0, true> { int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<697 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<698 + 1024 * 0, true> { int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<698 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<699 + 1024 * 0, true> { int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<699 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<700 + 1024 * 0, true> { int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<700 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<701 + 1024 * 0, true> { int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<701 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<702 + 1024 * 0, true> { int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<702 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<703 + 1024 * 0, true> { int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<703 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<704 + 1024 * 0, true> { int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<704 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<705 + 1024 * 0, true> { int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<705 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<706 + 1024 * 0, true> { int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<706 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<707 + 1024 * 0, true> { int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<707 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<708 + 1024 * 0, true> { int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<708 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<709 + 1024 * 0, true> { int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<709 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<710 + 1024 * 0, true> { int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<710 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<711 + 1024 * 0, true> { int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<711 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<712 + 1024 * 0, true> { int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<712 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<713 + 1024 * 0, true> { int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<713 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<714 + 1024 * 0, true> { int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<714 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<715 + 1024 * 0, true> { int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<715 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<716 + 1024 * 0, true> { int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<716 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<717 + 1024 * 0, true> { int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<717 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<718 + 1024 * 0, true> { int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<718 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<719 + 1024 * 0, true> { int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<719 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<720 + 1024 * 0, true> { int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<720 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<721 + 1024 * 0, true> { int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<721 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<722 + 1024 * 0, true> { int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<722 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<723 + 1024 * 0, true> { int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<723 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<724 + 1024 * 0, true> { int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<724 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<725 + 1024 * 0, true> { int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<725 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<726 + 1024 * 0, true> { int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<726 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<727 + 1024 * 0, true> { int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<727 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<728 + 1024 * 0, true> { int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<728 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<729 + 1024 * 0, true> { int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<729 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<730 + 1024 * 0, true> { int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<730 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<731 + 1024 * 0, true> { int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<731 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<732 + 1024 * 0, true> { int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<732 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<733 + 1024 * 0, true> { int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<733 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<734 + 1024 * 0, true> { int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<734 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<735 + 1024 * 0, true> { int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<735 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<736 + 1024 * 0, true> { int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<736 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<737 + 1024 * 0, true> { int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<737 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<738 + 1024 * 0, true> { int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<738 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<739 + 1024 * 0, true> { int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<739 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<740 + 1024 * 0, true> { int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<740 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<741 + 1024 * 0, true> { int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<741 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<742 + 1024 * 0, true> { int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<742 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<743 + 1024 * 0, true> { int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<743 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<744 + 1024 * 0, true> { int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<744 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<745 + 1024 * 0, true> { int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<745 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<746 + 1024 * 0, true> { int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<746 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<747 + 1024 * 0, true> { int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<747 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<748 + 1024 * 0, true> { int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<748 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<749 + 1024 * 0, true> { int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<749 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<750 + 1024 * 0, true> { int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<750 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<751 + 1024 * 0, true> { int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<751 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<752 + 1024 * 0, true> { int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<752 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<753 + 1024 * 0, true> { int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<753 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<754 + 1024 * 0, true> { int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<754 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<755 + 1024 * 0, true> { int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<755 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<756 + 1024 * 0, true> { int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<756 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<757 + 1024 * 0, true> { int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<757 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<758 + 1024 * 0, true> { int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<758 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<759 + 1024 * 0, true> { int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<759 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<760 + 1024 * 0, true> { int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<760 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<761 + 1024 * 0, true> { int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<761 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<762 + 1024 * 0, true> { int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<762 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<763 + 1024 * 0, true> { int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<763 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<764 + 1024 * 0, true> { int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<764 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<765 + 1024 * 0, true> { int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<765 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<766 + 1024 * 0, true> { int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<766 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<767 + 1024 * 0, true> { int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<767 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<768 + 1024 * 0, true> { int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<768 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<769 + 1024 * 0, true> { int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<769 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<770 + 1024 * 0, true> { int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<770 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<771 + 1024 * 0, true> { int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<771 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<772 + 1024 * 0, true> { int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<772 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<773 + 1024 * 0, true> { int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<773 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<774 + 1024 * 0, true> { int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<774 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<775 + 1024 * 0, true> { int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<775 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<776 + 1024 * 0, true> { int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<776 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<777 + 1024 * 0, true> { int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<777 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<778 + 1024 * 0, true> { int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<778 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<779 + 1024 * 0, true> { int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<779 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<780 + 1024 * 0, true> { int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<780 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<781 + 1024 * 0, true> { int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<781 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<782 + 1024 * 0, true> { int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<782 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<783 + 1024 * 0, true> { int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<783 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<784 + 1024 * 0, true> { int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<784 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<785 + 1024 * 0, true> { int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<785 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<786 + 1024 * 0, true> { int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<786 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<787 + 1024 * 0, true> { int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<787 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<788 + 1024 * 0, true> { int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<788 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<789 + 1024 * 0, true> { int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<789 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<790 + 1024 * 0, true> { int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<790 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<791 + 1024 * 0, true> { int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<791 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<792 + 1024 * 0, true> { int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<792 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<793 + 1024 * 0, true> { int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<793 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<794 + 1024 * 0, true> { int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<794 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<795 + 1024 * 0, true> { int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<795 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<796 + 1024 * 0, true> { int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<796 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<797 + 1024 * 0, true> { int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<797 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<798 + 1024 * 0, true> { int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<798 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<799 + 1024 * 0, true> { int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<799 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<800 + 1024 * 0, true> { int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<800 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<801 + 1024 * 0, true> { int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<801 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<802 + 1024 * 0, true> { int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<802 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<803 + 1024 * 0, true> { int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<803 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<804 + 1024 * 0, true> { int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<804 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<805 + 1024 * 0, true> { int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<805 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<806 + 1024 * 0, true> { int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<806 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<807 + 1024 * 0, true> { int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<807 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<808 + 1024 * 0, true> { int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<808 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<809 + 1024 * 0, true> { int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<809 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<810 + 1024 * 0, true> { int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<810 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<811 + 1024 * 0, true> { int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<811 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<812 + 1024 * 0, true> { int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<812 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<813 + 1024 * 0, true> { int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<813 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<814 + 1024 * 0, true> { int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<814 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<815 + 1024 * 0, true> { int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<815 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<816 + 1024 * 0, true> { int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<816 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<817 + 1024 * 0, true> { int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<817 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<818 + 1024 * 0, true> { int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<818 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<819 + 1024 * 0, true> { int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<819 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<820 + 1024 * 0, true> { int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<820 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<821 + 1024 * 0, true> { int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<821 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<822 + 1024 * 0, true> { int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<822 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<823 + 1024 * 0, true> { int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<823 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<824 + 1024 * 0, true> { int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<824 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<825 + 1024 * 0, true> { int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<825 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<826 + 1024 * 0, true> { int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<826 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<827 + 1024 * 0, true> { int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<827 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<828 + 1024 * 0, true> { int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<828 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<829 + 1024 * 0, true> { int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<829 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<830 + 1024 * 0, true> { int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<830 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<831 + 1024 * 0, true> { int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<831 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<832 + 1024 * 0, true> { int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<832 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<833 + 1024 * 0, true> { int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<833 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<834 + 1024 * 0, true> { int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<834 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<835 + 1024 * 0, true> { int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<835 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<836 + 1024 * 0, true> { int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<836 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<837 + 1024 * 0, true> { int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<837 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<838 + 1024 * 0, true> { int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<838 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<839 + 1024 * 0, true> { int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<839 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<840 + 1024 * 0, true> { int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<840 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<841 + 1024 * 0, true> { int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<841 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<842 + 1024 * 0, true> { int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<842 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<843 + 1024 * 0, true> { int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<843 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<844 + 1024 * 0, true> { int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<844 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<845 + 1024 * 0, true> { int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<845 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<846 + 1024 * 0, true> { int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<846 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<847 + 1024 * 0, true> { int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<847 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<848 + 1024 * 0, true> { int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<848 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<849 + 1024 * 0, true> { int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<849 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<850 + 1024 * 0, true> { int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<850 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<851 + 1024 * 0, true> { int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<851 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<852 + 1024 * 0, true> { int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<852 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<853 + 1024 * 0, true> { int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<853 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<854 + 1024 * 0, true> { int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<854 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<855 + 1024 * 0, true> { int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<855 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<856 + 1024 * 0, true> { int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<856 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<857 + 1024 * 0, true> { int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<857 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<858 + 1024 * 0, true> { int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<858 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<859 + 1024 * 0, true> { int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<859 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<860 + 1024 * 0, true> { int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<860 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<861 + 1024 * 0, true> { int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<861 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<862 + 1024 * 0, true> { int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<862 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<863 + 1024 * 0, true> { int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<863 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<864 + 1024 * 0, true> { int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<864 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<865 + 1024 * 0, true> { int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<865 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<866 + 1024 * 0, true> { int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<866 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<867 + 1024 * 0, true> { int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<867 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<868 + 1024 * 0, true> { int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<868 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<869 + 1024 * 0, true> { int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<869 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<870 + 1024 * 0, true> { int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<870 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<871 + 1024 * 0, true> { int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<871 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<872 + 1024 * 0, true> { int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<872 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<873 + 1024 * 0, true> { int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<873 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<874 + 1024 * 0, true> { int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<874 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<875 + 1024 * 0, true> { int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<875 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<876 + 1024 * 0, true> { int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<876 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<877 + 1024 * 0, true> { int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<877 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<878 + 1024 * 0, true> { int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<878 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<879 + 1024 * 0, true> { int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<879 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<880 + 1024 * 0, true> { int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<880 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<881 + 1024 * 0, true> { int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<881 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<882 + 1024 * 0, true> { int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<882 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<883 + 1024 * 0, true> { int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<883 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<884 + 1024 * 0, true> { int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<884 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<885 + 1024 * 0, true> { int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<885 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<886 + 1024 * 0, true> { int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<886 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<887 + 1024 * 0, true> { int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<887 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<888 + 1024 * 0, true> { int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<888 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<889 + 1024 * 0, true> { int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<889 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<890 + 1024 * 0, true> { int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<890 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<891 + 1024 * 0, true> { int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<891 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<892 + 1024 * 0, true> { int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<892 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<893 + 1024 * 0, true> { int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<893 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<894 + 1024 * 0, true> { int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<894 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<895 + 1024 * 0, true> { int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<895 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<896 + 1024 * 0, true> { int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<896 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<897 + 1024 * 0, true> { int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<897 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<898 + 1024 * 0, true> { int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<898 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<899 + 1024 * 0, true> { int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<899 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<900 + 1024 * 0, true> { int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<900 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<901 + 1024 * 0, true> { int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<901 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<902 + 1024 * 0, true> { int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<902 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<903 + 1024 * 0, true> { int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<903 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<904 + 1024 * 0, true> { int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<904 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<905 + 1024 * 0, true> { int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<905 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<906 + 1024 * 0, true> { int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<906 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<907 + 1024 * 0, true> { int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<907 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<908 + 1024 * 0, true> { int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<908 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<909 + 1024 * 0, true> { int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<909 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<910 + 1024 * 0, true> { int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<910 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<911 + 1024 * 0, true> { int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<911 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<912 + 1024 * 0, true> { int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<912 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<913 + 1024 * 0, true> { int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<913 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<914 + 1024 * 0, true> { int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<914 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<915 + 1024 * 0, true> { int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<915 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<916 + 1024 * 0, true> { int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<916 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<917 + 1024 * 0, true> { int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<917 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<918 + 1024 * 0, true> { int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<918 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<919 + 1024 * 0, true> { int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<919 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<920 + 1024 * 0, true> { int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<920 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<921 + 1024 * 0, true> { int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<921 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<922 + 1024 * 0, true> { int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<922 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<923 + 1024 * 0, true> { int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<923 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<924 + 1024 * 0, true> { int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<924 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<925 + 1024 * 0, true> { int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<925 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<926 + 1024 * 0, true> { int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<926 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<927 + 1024 * 0, true> { int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<927 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<928 + 1024 * 0, true> { int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<928 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<929 + 1024 * 0, true> { int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<929 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<930 + 1024 * 0, true> { int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<930 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<931 + 1024 * 0, true> { int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<931 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<932 + 1024 * 0, true> { int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<932 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<933 + 1024 * 0, true> { int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<933 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<934 + 1024 * 0, true> { int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<934 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<935 + 1024 * 0, true> { int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<935 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<936 + 1024 * 0, true> { int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<936 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<937 + 1024 * 0, true> { int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<937 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<938 + 1024 * 0, true> { int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<938 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<939 + 1024 * 0, true> { int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<939 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<940 + 1024 * 0, true> { int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<940 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<941 + 1024 * 0, true> { int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<941 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<942 + 1024 * 0, true> { int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<942 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<943 + 1024 * 0, true> { int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<943 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<944 + 1024 * 0, true> { int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<944 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<945 + 1024 * 0, true> { int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<945 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<946 + 1024 * 0, true> { int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<946 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<947 + 1024 * 0, true> { int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<947 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<948 + 1024 * 0, true> { int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<948 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<949 + 1024 * 0, true> { int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<949 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<950 + 1024 * 0, true> { int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<950 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<951 + 1024 * 0, true> { int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<951 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<952 + 1024 * 0, true> { int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<952 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<953 + 1024 * 0, true> { int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<953 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<954 + 1024 * 0, true> { int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<954 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<955 + 1024 * 0, true> { int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<955 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<956 + 1024 * 0, true> { int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<956 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<957 + 1024 * 0, true> { int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<957 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<958 + 1024 * 0, true> { int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<958 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<959 + 1024 * 0, true> { int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<959 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<960 + 1024 * 0, true> { int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<960 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<961 + 1024 * 0, true> { int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<961 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<962 + 1024 * 0, true> { int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<962 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<963 + 1024 * 0, true> { int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<963 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<964 + 1024 * 0, true> { int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<964 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<965 + 1024 * 0, true> { int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<965 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<966 + 1024 * 0, true> { int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<966 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<967 + 1024 * 0, true> { int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<967 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<968 + 1024 * 0, true> { int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<968 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<969 + 1024 * 0, true> { int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<969 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<970 + 1024 * 0, true> { int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<970 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<971 + 1024 * 0, true> { int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<971 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<972 + 1024 * 0, true> { int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<972 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<973 + 1024 * 0, true> { int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<973 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<974 + 1024 * 0, true> { int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<974 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<975 + 1024 * 0, true> { int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<975 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<976 + 1024 * 0, true> { int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<976 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<977 + 1024 * 0, true> { int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<977 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<978 + 1024 * 0, true> { int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<978 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<979 + 1024 * 0, true> { int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<979 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<980 + 1024 * 0, true> { int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<980 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<981 + 1024 * 0, true> { int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<981 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<982 + 1024 * 0, true> { int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<982 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<983 + 1024 * 0, true> { int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<983 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<984 + 1024 * 0, true> { int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<984 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<985 + 1024 * 0, true> { int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<985 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<986 + 1024 * 0, true> { int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<986 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<987 + 1024 * 0, true> { int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<987 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<988 + 1024 * 0, true> { int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<988 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<989 + 1024 * 0, true> { int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<989 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<990 + 1024 * 0, true> { int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<990 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<991 + 1024 * 0, true> { int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<991 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<992 + 1024 * 0, true> { int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<992 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<993 + 1024 * 0, true> { int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<993 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<994 + 1024 * 0, true> { int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<994 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<995 + 1024 * 0, true> { int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<995 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<996 + 1024 * 0, true> { int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<996 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<997 + 1024 * 0, true> { int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<997 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<998 + 1024 * 0, true> { int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<998 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<999 + 1024 * 0, true> { int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<999 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1000 + 1024 * 0, true> { int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1000 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1001 + 1024 * 0, true> { int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1001 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1002 + 1024 * 0, true> { int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1002 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1003 + 1024 * 0, true> { int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1003 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1004 + 1024 * 0, true> { int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1004 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1005 + 1024 * 0, true> { int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1005 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1006 + 1024 * 0, true> { int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1006 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1007 + 1024 * 0, true> { int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1007 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1008 + 1024 * 0, true> { int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1008 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1009 + 1024 * 0, true> { int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1009 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1010 + 1024 * 0, true> { int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1010 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1011 + 1024 * 0, true> { int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1011 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1012 + 1024 * 0, true> { int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1012 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1013 + 1024 * 0, true> { int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1013 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1014 + 1024 * 0, true> { int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1014 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1015 + 1024 * 0, true> { int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1015 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1016 + 1024 * 0, true> { int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1016 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1017 + 1024 * 0, true> { int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1017 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1018 + 1024 * 0, true> { int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1018 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1019 + 1024 * 0, true> { int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1019 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1020 + 1024 * 0, true> { int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1020 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1021 + 1024 * 0, true> { int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1021 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1022 + 1024 * 0, true> { int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1022 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1023 + 1024 * 0, true> { int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1023 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1024 + 1024 * 0, true> { int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1024 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, false>(){}; };
# 239 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h" 2
# 562 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 563 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 574 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 691 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 55 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h" 1
# 72 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/clang/bin/../lib/clang/3.1/include/stddef.h" 1 3
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstddef" 2 3
# 73 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h" 2
# 82 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 239 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ __typeof__(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<__typeof__(reg.V)>::type __Result__ = 0; __typeof__(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<__typeof__(reg.V)>::type __Result__ = 0; __typeof__(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<__typeof__(man.V)>::type __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ __typeof__(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<__typeof__(reg.V)>::type __Result__ = 0; __typeof__(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<__typeof__(reg.V)>::type __Result__ = 0; __typeof__(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<__typeof__(man.V)>::type __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 393 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    __typeof__(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    __typeof__(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }
# 484 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 588 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    __typeof__(Base::V) l_p = Base::V << n;
    __typeof__(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    __typeof__(Base::V) l_p = Base::V << (_AP_W - n);
    __typeof__(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 701 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 719 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ __typeof__(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ __typeof__(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 830 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ __typeof__(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ __typeof__(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 879 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 988 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1055 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<__typeof__(this->V)>::type __Result__ = 0; __typeof__(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<__typeof__(t.V)>::type __Result__ = 0; __typeof__(t.V) __Val2__ = t.V; __typeof__(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<__typeof__(this->V)>::type __Result__ = 0; __typeof__(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<__typeof__(t.V)>::type __Result__ = 0; __typeof__(t.V) __Val2__ = t.V; __typeof__(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<__typeof__(this->V)>::type __Result__ = 0; __typeof__(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<__typeof__(this->V)>::type __Result__ = 0; __typeof__(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<__typeof__(t.V)>::type __Result__ = 0; __typeof__(t.V) __Val2__ = t.V; __typeof__(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ __typeof__(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1295 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    return 0;
  }

};
# 1354 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1373 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1401 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { std::ptrdiff_t op2 = op.to_long(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { std::ptrdiff_t op2 = op.to_long(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { std::ptrdiff_t op2 = op.to_long(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { std::ptrdiff_t op2 = op.to_long(); return op2 - i_op; }
# 1429 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1463 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1502 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1526 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1557 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1594 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1631 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1661 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1690 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 &= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp &= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 |= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp |= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp ^= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1716 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1743 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1772 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 &= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp &= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 |= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp |= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp ^= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1798 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1906 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 56 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h" 1
# 72 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<__typeof__(vval.V)>::type __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<__typeof__(vval.V)>::type __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 115 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 303 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<__typeof__(tmpVal.V)>::type __Result__ = 0; __typeof__(tmpVal.V) __Val2__ = tmpVal.V; __typeof__(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<__typeof__(tmpVal.V)>::type __Result__ = 0; __typeof__(tmpVal.V) __Val2__ = tmpVal.V; __typeof__(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<__typeof__(vval.V)>::type __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<__typeof__(vval.V)>::type __Result__ = 0; __typeof__(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 384 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret &= ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret |= ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret ^= ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 732 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    return 0;
  }

};
# 771 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 809 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 831 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1029 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1088 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1111 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1139 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1188 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1335 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1359 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 57 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_int& operator=(const ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_uint& operator=(const ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 341 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_special.h" 1
# 60 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 88 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
struct complex<ap_int<_AP_W> > {
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 220 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 342 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 2







# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h" 1
# 55 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h" 1
# 61 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 1
# 62 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h" 2
# 132 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 153 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 332 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __typeof__(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 476 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    __typeof__(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    __typeof__(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 534 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ __typeof__(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<__typeof__(ireg.V)>::type __Result__ = 0; __typeof__(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<__typeof__(ireg.V)>::type __Result__ = 0; __typeof__(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<__typeof__(man.V)>::type __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __typeof__(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ __typeof__(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<__typeof__(man.V)>::type __Result__ = 0; __typeof__(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 687 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ __typeof__(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ __typeof__(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<__typeof__(op.V)>::type __Result__ = 0; __typeof__(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ __typeof__(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<__typeof__(op.V)>::type __Result__ = 0; __typeof__(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<__typeof__(op.V)>::type __Result__ = 0; __typeof__(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 847 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<__typeof__(Base::V)>::type __Result__ = 0; __typeof__(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<__typeof__(tmp.V)>::type __Result__ = 0; __typeof__(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ __typeof__(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ __typeof__(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<__typeof__(tmp.V)>::type __Result__ = 0; __typeof__(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ __typeof__(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ __typeof__(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<__typeof__(tmp.V)>::type __Result__ = 0; __typeof__(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ __typeof__(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ __typeof__(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<__typeof__(m)>::type __Result__ = 0; __typeof__(m) __Val2__ = m; __typeof__(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1073 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1143 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1176 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }
# 1191 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1209 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1327 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1349 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1493 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1579 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ __typeof__(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ __typeof__(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1762 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2212 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2300 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 56 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h" 1
# 69 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ __typeof__(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 256 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 286 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 298 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
  }
# 310 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<__typeof__(d_bv.V)>::type __Result__ = 0; __typeof__(d_bv.V) __Val2__ = d_bv.V; __typeof__(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 632 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
    return 0;
  }

};
# 695 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 741 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 57 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 111 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 136 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  inline __attribute__((always_inline)) ap_fixed& operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 267 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 289 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 380 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_special.h" 1
# 60 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 88 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 219 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 381 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_fixed.h" 2
# 350 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 2
# 24 "firmware/myproject.h" 2


# 1 "firmware/defines.h" 1



# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 1
# 5 "firmware/defines.h" 2
# 31 "firmware/defines.h"
typedef ap_fixed<14,2,AP_RND,AP_SAT> model_default_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> input_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> input2_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> layer3_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> layer5_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> layer6_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> layer7_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> layer9_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> layer10_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> layer11_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> layer13_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> layer14_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> layer16_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> layer17_t;
typedef ap_fixed<14,2,AP_RND,AP_SAT> result_t;
# 27 "firmware/myproject.h" 2



void myproject(
    input_t input1[32*32*1],
    result_t layer19_out[10],
    unsigned short &const_size_in_1,
    unsigned short &const_size_out_1
);
# 22 "firmware/myproject.cpp" 2
# 1 "firmware/parameters.h" 1



# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/ap_int.h" 1
# 5 "firmware/parameters.h" 2


# 1 "firmware/nnet_utils/nnet_helpers.h" 1
# 25 "firmware/nnet_utils/nnet_helpers.h"
# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4






extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4
# 138 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 139 "/usr/include/math.h" 2 3 4
# 149 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 190 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 191 "/usr/include/math.h" 2 3 4
# 233 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 234 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 289 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));


extern int __isnan (double __value) throw () __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) throw ();


extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));
# 290 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();



extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();





extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();





extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();




extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();




extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();






extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();



extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();




extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();






extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();
# 182 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();






extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));




extern double nan (const char *__tagb) throw (); extern double __nan (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();





extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();




extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();







extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();






extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw (); extern double __nextafter (double __x, double __y) throw ();

extern double nexttoward (double __x, long double __y) throw (); extern double __nexttoward (double __x, long double __y) throw ();




extern double nextdown (double __x) throw (); extern double __nextdown (double __x) throw ();

extern double nextup (double __x) throw (); extern double __nextup (double __x) throw ();



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern long int llogb (double __x) throw (); extern long int __llogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));


extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();




extern double roundeven (double __x) throw () __attribute__ ((__const__)); extern double __roundeven (double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) throw ();



extern double fmaxmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) throw () __attribute__ ((__const__));


extern double fminmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) throw () __attribute__ ((__const__));


extern int canonicalize (double *__cx, const double *__x) throw ();




extern int totalorder (const double *__x, const double *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermag (const double *__x, const double *__y) throw ()

     __attribute__ ((__pure__));


extern double getpayload (const double *__x) throw (); extern double __getpayload (const double *__x) throw ();


extern int setpayload (double *__x, double __payload) throw ();


extern int setpayloadsig (double *__x, double __payload) throw ();







extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 291 "/usr/include/math.h" 2 3 4
# 306 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));


extern int __isnanf (float __value) throw () __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) throw ();


extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));
# 307 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();



extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();





extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();





extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();




extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();




extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();






extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();



extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();




extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();






extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) throw () __attribute__ ((__const__));




extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();






extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));




extern float nanf (const char *__tagb) throw (); extern float __nanf (const char *__tagb) throw ();
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();





extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();




extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();







extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();






extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw (); extern float __nextafterf (float __x, float __y) throw ();

extern float nexttowardf (float __x, long double __y) throw (); extern float __nexttowardf (float __x, long double __y) throw ();




extern float nextdownf (float __x) throw (); extern float __nextdownf (float __x) throw ();

extern float nextupf (float __x) throw (); extern float __nextupf (float __x) throw ();



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern long int llogbf (float __x) throw (); extern long int __llogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();




extern float roundevenf (float __x) throw () __attribute__ ((__const__)); extern float __roundevenf (float __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) throw ();



extern float fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern int canonicalizef (float *__cx, const float *__x) throw ();




extern int totalorderf (const float *__x, const float *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf (const float *__x, const float *__y) throw ()

     __attribute__ ((__pure__));


extern float getpayloadf (const float *__x) throw (); extern float __getpayloadf (const float *__x) throw ();


extern int setpayloadf (float *__x, float __payload) throw ();


extern int setpayloadsigf (float *__x, float __payload) throw ();







extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 308 "/usr/include/math.h" 2 3 4
# 349 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));


extern int __isnanl (long double __value) throw () __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) throw ();


extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));
# 350 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();



extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();





extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();





extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();




extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();




extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();






extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();



extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();




extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();






extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) throw () __attribute__ ((__const__));




extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();






extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));




extern long double nanl (const char *__tagb) throw (); extern long double __nanl (const char *__tagb) throw ();
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();





extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();




extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();







extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();






extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw (); extern long double __nextafterl (long double __x, long double __y) throw ();

extern long double nexttowardl (long double __x, long double __y) throw (); extern long double __nexttowardl (long double __x, long double __y) throw ();




extern long double nextdownl (long double __x) throw (); extern long double __nextdownl (long double __x) throw ();

extern long double nextupl (long double __x) throw (); extern long double __nextupl (long double __x) throw ();



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long int llogbl (long double __x) throw (); extern long int __llogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();




extern long double roundevenl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundevenl (long double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) throw ();



extern long double fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern int canonicalizel (long double *__cx, const long double *__x) throw ();




extern int totalorderl (const long double *__x, const long double *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagl (const long double *__x, const long double *__y) throw ()

     __attribute__ ((__pure__));


extern long double getpayloadl (const long double *__x) throw (); extern long double __getpayloadl (const long double *__x) throw ();


extern int setpayloadl (long double *__x, long double __payload) throw ();


extern int setpayloadsigl (long double *__x, long double __payload) throw ();







extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 351 "/usr/include/math.h" 2 3 4
# 389 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 acosf32 (_Float32 __x) throw (); extern _Float32 __acosf32 (_Float32 __x) throw ();

extern _Float32 asinf32 (_Float32 __x) throw (); extern _Float32 __asinf32 (_Float32 __x) throw ();

extern _Float32 atanf32 (_Float32 __x) throw (); extern _Float32 __atanf32 (_Float32 __x) throw ();

extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) throw (); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) throw ();


extern _Float32 cosf32 (_Float32 __x) throw (); extern _Float32 __cosf32 (_Float32 __x) throw ();

extern _Float32 sinf32 (_Float32 __x) throw (); extern _Float32 __sinf32 (_Float32 __x) throw ();

extern _Float32 tanf32 (_Float32 __x) throw (); extern _Float32 __tanf32 (_Float32 __x) throw ();




extern _Float32 coshf32 (_Float32 __x) throw (); extern _Float32 __coshf32 (_Float32 __x) throw ();

extern _Float32 sinhf32 (_Float32 __x) throw (); extern _Float32 __sinhf32 (_Float32 __x) throw ();

extern _Float32 tanhf32 (_Float32 __x) throw (); extern _Float32 __tanhf32 (_Float32 __x) throw ();



extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw (); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw ();





extern _Float32 acoshf32 (_Float32 __x) throw (); extern _Float32 __acoshf32 (_Float32 __x) throw ();

extern _Float32 asinhf32 (_Float32 __x) throw (); extern _Float32 __asinhf32 (_Float32 __x) throw ();

extern _Float32 atanhf32 (_Float32 __x) throw (); extern _Float32 __atanhf32 (_Float32 __x) throw ();





extern _Float32 expf32 (_Float32 __x) throw (); extern _Float32 __expf32 (_Float32 __x) throw ();


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) throw (); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) throw ();


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) throw (); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) throw ();


extern _Float32 logf32 (_Float32 __x) throw (); extern _Float32 __logf32 (_Float32 __x) throw ();


extern _Float32 log10f32 (_Float32 __x) throw (); extern _Float32 __log10f32 (_Float32 __x) throw ();


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) throw (); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32 exp10f32 (_Float32 __x) throw (); extern _Float32 __exp10f32 (_Float32 __x) throw ();




extern _Float32 expm1f32 (_Float32 __x) throw (); extern _Float32 __expm1f32 (_Float32 __x) throw ();


extern _Float32 log1pf32 (_Float32 __x) throw (); extern _Float32 __log1pf32 (_Float32 __x) throw ();


extern _Float32 logbf32 (_Float32 __x) throw (); extern _Float32 __logbf32 (_Float32 __x) throw ();




extern _Float32 exp2f32 (_Float32 __x) throw (); extern _Float32 __exp2f32 (_Float32 __x) throw ();


extern _Float32 log2f32 (_Float32 __x) throw (); extern _Float32 __log2f32 (_Float32 __x) throw ();






extern _Float32 powf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 sqrtf32 (_Float32 __x) throw (); extern _Float32 __sqrtf32 (_Float32 __x) throw ();



extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) throw ();




extern _Float32 cbrtf32 (_Float32 __x) throw (); extern _Float32 __cbrtf32 (_Float32 __x) throw ();






extern _Float32 ceilf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) throw (); extern _Float32 __nanf32 (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) throw (); extern _Float32 __j0f32 (_Float32) throw ();
extern _Float32 j1f32 (_Float32) throw (); extern _Float32 __j1f32 (_Float32) throw ();
extern _Float32 jnf32 (int, _Float32) throw (); extern _Float32 __jnf32 (int, _Float32) throw ();
extern _Float32 y0f32 (_Float32) throw (); extern _Float32 __y0f32 (_Float32) throw ();
extern _Float32 y1f32 (_Float32) throw (); extern _Float32 __y1f32 (_Float32) throw ();
extern _Float32 ynf32 (int, _Float32) throw (); extern _Float32 __ynf32 (int, _Float32) throw ();





extern _Float32 erff32 (_Float32) throw (); extern _Float32 __erff32 (_Float32) throw ();
extern _Float32 erfcf32 (_Float32) throw (); extern _Float32 __erfcf32 (_Float32) throw ();
extern _Float32 lgammaf32 (_Float32) throw (); extern _Float32 __lgammaf32 (_Float32) throw ();




extern _Float32 tgammaf32 (_Float32) throw (); extern _Float32 __tgammaf32 (_Float32) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) throw (); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) throw ();






extern _Float32 rintf32 (_Float32 __x) throw (); extern _Float32 __rintf32 (_Float32 __x) throw ();


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) throw ();






extern _Float32 nextdownf32 (_Float32 __x) throw (); extern _Float32 __nextdownf32 (_Float32 __x) throw ();

extern _Float32 nextupf32 (_Float32 __x) throw (); extern _Float32 __nextupf32 (_Float32 __x) throw ();



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) throw ();



extern _Float32 scalbnf32 (_Float32 __x, int __n) throw (); extern _Float32 __scalbnf32 (_Float32 __x, int __n) throw ();



extern int ilogbf32 (_Float32 __x) throw (); extern int __ilogbf32 (_Float32 __x) throw ();




extern long int llogbf32 (_Float32 __x) throw (); extern long int __llogbf32 (_Float32 __x) throw ();




extern _Float32 scalblnf32 (_Float32 __x, long int __n) throw (); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) throw ();



extern _Float32 nearbyintf32 (_Float32 __x) throw (); extern _Float32 __nearbyintf32 (_Float32 __x) throw ();



extern _Float32 roundf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) throw () __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw (); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw ();






extern long int lrintf32 (_Float32 __x) throw (); extern long int __lrintf32 (_Float32 __x) throw ();
__extension__
extern long long int llrintf32 (_Float32 __x) throw (); extern long long int __llrintf32 (_Float32 __x) throw ();



extern long int lroundf32 (_Float32 __x) throw (); extern long int __lroundf32 (_Float32 __x) throw ();
__extension__
extern long long int llroundf32 (_Float32 __x) throw (); extern long long int __llroundf32 (_Float32 __x) throw ();



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw (); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw ();




extern _Float32 roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ();



extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) throw ();




extern int totalorderf32 (const _Float32 *__x, const _Float32 *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf32 (const _Float32 *__x, const _Float32 *__y) throw ()

     __attribute__ ((__pure__));


extern _Float32 getpayloadf32 (const _Float32 *__x) throw (); extern _Float32 __getpayloadf32 (const _Float32 *__x) throw ();


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) throw ();


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) throw ();
# 390 "/usr/include/math.h" 2 3 4
# 406 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 acosf64 (_Float64 __x) throw (); extern _Float64 __acosf64 (_Float64 __x) throw ();

extern _Float64 asinf64 (_Float64 __x) throw (); extern _Float64 __asinf64 (_Float64 __x) throw ();

extern _Float64 atanf64 (_Float64 __x) throw (); extern _Float64 __atanf64 (_Float64 __x) throw ();

extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) throw (); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) throw ();


extern _Float64 cosf64 (_Float64 __x) throw (); extern _Float64 __cosf64 (_Float64 __x) throw ();

extern _Float64 sinf64 (_Float64 __x) throw (); extern _Float64 __sinf64 (_Float64 __x) throw ();

extern _Float64 tanf64 (_Float64 __x) throw (); extern _Float64 __tanf64 (_Float64 __x) throw ();




extern _Float64 coshf64 (_Float64 __x) throw (); extern _Float64 __coshf64 (_Float64 __x) throw ();

extern _Float64 sinhf64 (_Float64 __x) throw (); extern _Float64 __sinhf64 (_Float64 __x) throw ();

extern _Float64 tanhf64 (_Float64 __x) throw (); extern _Float64 __tanhf64 (_Float64 __x) throw ();



extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw (); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw ();





extern _Float64 acoshf64 (_Float64 __x) throw (); extern _Float64 __acoshf64 (_Float64 __x) throw ();

extern _Float64 asinhf64 (_Float64 __x) throw (); extern _Float64 __asinhf64 (_Float64 __x) throw ();

extern _Float64 atanhf64 (_Float64 __x) throw (); extern _Float64 __atanhf64 (_Float64 __x) throw ();





extern _Float64 expf64 (_Float64 __x) throw (); extern _Float64 __expf64 (_Float64 __x) throw ();


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) throw (); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) throw ();


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) throw (); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) throw ();


extern _Float64 logf64 (_Float64 __x) throw (); extern _Float64 __logf64 (_Float64 __x) throw ();


extern _Float64 log10f64 (_Float64 __x) throw (); extern _Float64 __log10f64 (_Float64 __x) throw ();


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) throw (); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64 exp10f64 (_Float64 __x) throw (); extern _Float64 __exp10f64 (_Float64 __x) throw ();




extern _Float64 expm1f64 (_Float64 __x) throw (); extern _Float64 __expm1f64 (_Float64 __x) throw ();


extern _Float64 log1pf64 (_Float64 __x) throw (); extern _Float64 __log1pf64 (_Float64 __x) throw ();


extern _Float64 logbf64 (_Float64 __x) throw (); extern _Float64 __logbf64 (_Float64 __x) throw ();




extern _Float64 exp2f64 (_Float64 __x) throw (); extern _Float64 __exp2f64 (_Float64 __x) throw ();


extern _Float64 log2f64 (_Float64 __x) throw (); extern _Float64 __log2f64 (_Float64 __x) throw ();






extern _Float64 powf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 sqrtf64 (_Float64 __x) throw (); extern _Float64 __sqrtf64 (_Float64 __x) throw ();



extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) throw ();




extern _Float64 cbrtf64 (_Float64 __x) throw (); extern _Float64 __cbrtf64 (_Float64 __x) throw ();






extern _Float64 ceilf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) throw (); extern _Float64 __nanf64 (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) throw (); extern _Float64 __j0f64 (_Float64) throw ();
extern _Float64 j1f64 (_Float64) throw (); extern _Float64 __j1f64 (_Float64) throw ();
extern _Float64 jnf64 (int, _Float64) throw (); extern _Float64 __jnf64 (int, _Float64) throw ();
extern _Float64 y0f64 (_Float64) throw (); extern _Float64 __y0f64 (_Float64) throw ();
extern _Float64 y1f64 (_Float64) throw (); extern _Float64 __y1f64 (_Float64) throw ();
extern _Float64 ynf64 (int, _Float64) throw (); extern _Float64 __ynf64 (int, _Float64) throw ();





extern _Float64 erff64 (_Float64) throw (); extern _Float64 __erff64 (_Float64) throw ();
extern _Float64 erfcf64 (_Float64) throw (); extern _Float64 __erfcf64 (_Float64) throw ();
extern _Float64 lgammaf64 (_Float64) throw (); extern _Float64 __lgammaf64 (_Float64) throw ();




extern _Float64 tgammaf64 (_Float64) throw (); extern _Float64 __tgammaf64 (_Float64) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) throw (); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) throw ();






extern _Float64 rintf64 (_Float64 __x) throw (); extern _Float64 __rintf64 (_Float64 __x) throw ();


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) throw ();






extern _Float64 nextdownf64 (_Float64 __x) throw (); extern _Float64 __nextdownf64 (_Float64 __x) throw ();

extern _Float64 nextupf64 (_Float64 __x) throw (); extern _Float64 __nextupf64 (_Float64 __x) throw ();



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) throw ();



extern _Float64 scalbnf64 (_Float64 __x, int __n) throw (); extern _Float64 __scalbnf64 (_Float64 __x, int __n) throw ();



extern int ilogbf64 (_Float64 __x) throw (); extern int __ilogbf64 (_Float64 __x) throw ();




extern long int llogbf64 (_Float64 __x) throw (); extern long int __llogbf64 (_Float64 __x) throw ();




extern _Float64 scalblnf64 (_Float64 __x, long int __n) throw (); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) throw ();



extern _Float64 nearbyintf64 (_Float64 __x) throw (); extern _Float64 __nearbyintf64 (_Float64 __x) throw ();



extern _Float64 roundf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) throw () __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw (); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw ();






extern long int lrintf64 (_Float64 __x) throw (); extern long int __lrintf64 (_Float64 __x) throw ();
__extension__
extern long long int llrintf64 (_Float64 __x) throw (); extern long long int __llrintf64 (_Float64 __x) throw ();



extern long int lroundf64 (_Float64 __x) throw (); extern long int __lroundf64 (_Float64 __x) throw ();
__extension__
extern long long int llroundf64 (_Float64 __x) throw (); extern long long int __llroundf64 (_Float64 __x) throw ();



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw (); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw ();




extern _Float64 roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ();



extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) throw ();




extern int totalorderf64 (const _Float64 *__x, const _Float64 *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf64 (const _Float64 *__x, const _Float64 *__y) throw ()

     __attribute__ ((__pure__));


extern _Float64 getpayloadf64 (const _Float64 *__x) throw (); extern _Float64 __getpayloadf64 (const _Float64 *__x) throw ();


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) throw ();


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) throw ();
# 407 "/usr/include/math.h" 2 3 4
# 440 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x acosf32x (_Float32x __x) throw (); extern _Float32x __acosf32x (_Float32x __x) throw ();

extern _Float32x asinf32x (_Float32x __x) throw (); extern _Float32x __asinf32x (_Float32x __x) throw ();

extern _Float32x atanf32x (_Float32x __x) throw (); extern _Float32x __atanf32x (_Float32x __x) throw ();

extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) throw (); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) throw ();


extern _Float32x cosf32x (_Float32x __x) throw (); extern _Float32x __cosf32x (_Float32x __x) throw ();

extern _Float32x sinf32x (_Float32x __x) throw (); extern _Float32x __sinf32x (_Float32x __x) throw ();

extern _Float32x tanf32x (_Float32x __x) throw (); extern _Float32x __tanf32x (_Float32x __x) throw ();




extern _Float32x coshf32x (_Float32x __x) throw (); extern _Float32x __coshf32x (_Float32x __x) throw ();

extern _Float32x sinhf32x (_Float32x __x) throw (); extern _Float32x __sinhf32x (_Float32x __x) throw ();

extern _Float32x tanhf32x (_Float32x __x) throw (); extern _Float32x __tanhf32x (_Float32x __x) throw ();



extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw (); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw ();





extern _Float32x acoshf32x (_Float32x __x) throw (); extern _Float32x __acoshf32x (_Float32x __x) throw ();

extern _Float32x asinhf32x (_Float32x __x) throw (); extern _Float32x __asinhf32x (_Float32x __x) throw ();

extern _Float32x atanhf32x (_Float32x __x) throw (); extern _Float32x __atanhf32x (_Float32x __x) throw ();





extern _Float32x expf32x (_Float32x __x) throw (); extern _Float32x __expf32x (_Float32x __x) throw ();


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) throw (); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) throw ();


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) throw (); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) throw ();


extern _Float32x logf32x (_Float32x __x) throw (); extern _Float32x __logf32x (_Float32x __x) throw ();


extern _Float32x log10f32x (_Float32x __x) throw (); extern _Float32x __log10f32x (_Float32x __x) throw ();


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) throw (); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32x exp10f32x (_Float32x __x) throw (); extern _Float32x __exp10f32x (_Float32x __x) throw ();




extern _Float32x expm1f32x (_Float32x __x) throw (); extern _Float32x __expm1f32x (_Float32x __x) throw ();


extern _Float32x log1pf32x (_Float32x __x) throw (); extern _Float32x __log1pf32x (_Float32x __x) throw ();


extern _Float32x logbf32x (_Float32x __x) throw (); extern _Float32x __logbf32x (_Float32x __x) throw ();




extern _Float32x exp2f32x (_Float32x __x) throw (); extern _Float32x __exp2f32x (_Float32x __x) throw ();


extern _Float32x log2f32x (_Float32x __x) throw (); extern _Float32x __log2f32x (_Float32x __x) throw ();






extern _Float32x powf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x sqrtf32x (_Float32x __x) throw (); extern _Float32x __sqrtf32x (_Float32x __x) throw ();



extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) throw ();




extern _Float32x cbrtf32x (_Float32x __x) throw (); extern _Float32x __cbrtf32x (_Float32x __x) throw ();






extern _Float32x ceilf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) throw (); extern _Float32x __nanf32x (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) throw (); extern _Float32x __j0f32x (_Float32x) throw ();
extern _Float32x j1f32x (_Float32x) throw (); extern _Float32x __j1f32x (_Float32x) throw ();
extern _Float32x jnf32x (int, _Float32x) throw (); extern _Float32x __jnf32x (int, _Float32x) throw ();
extern _Float32x y0f32x (_Float32x) throw (); extern _Float32x __y0f32x (_Float32x) throw ();
extern _Float32x y1f32x (_Float32x) throw (); extern _Float32x __y1f32x (_Float32x) throw ();
extern _Float32x ynf32x (int, _Float32x) throw (); extern _Float32x __ynf32x (int, _Float32x) throw ();





extern _Float32x erff32x (_Float32x) throw (); extern _Float32x __erff32x (_Float32x) throw ();
extern _Float32x erfcf32x (_Float32x) throw (); extern _Float32x __erfcf32x (_Float32x) throw ();
extern _Float32x lgammaf32x (_Float32x) throw (); extern _Float32x __lgammaf32x (_Float32x) throw ();




extern _Float32x tgammaf32x (_Float32x) throw (); extern _Float32x __tgammaf32x (_Float32x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) throw (); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) throw ();






extern _Float32x rintf32x (_Float32x __x) throw (); extern _Float32x __rintf32x (_Float32x __x) throw ();


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) throw ();






extern _Float32x nextdownf32x (_Float32x __x) throw (); extern _Float32x __nextdownf32x (_Float32x __x) throw ();

extern _Float32x nextupf32x (_Float32x __x) throw (); extern _Float32x __nextupf32x (_Float32x __x) throw ();



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) throw ();



extern _Float32x scalbnf32x (_Float32x __x, int __n) throw (); extern _Float32x __scalbnf32x (_Float32x __x, int __n) throw ();



extern int ilogbf32x (_Float32x __x) throw (); extern int __ilogbf32x (_Float32x __x) throw ();




extern long int llogbf32x (_Float32x __x) throw (); extern long int __llogbf32x (_Float32x __x) throw ();




extern _Float32x scalblnf32x (_Float32x __x, long int __n) throw (); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) throw ();



extern _Float32x nearbyintf32x (_Float32x __x) throw (); extern _Float32x __nearbyintf32x (_Float32x __x) throw ();



extern _Float32x roundf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) throw () __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw (); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw ();






extern long int lrintf32x (_Float32x __x) throw (); extern long int __lrintf32x (_Float32x __x) throw ();
__extension__
extern long long int llrintf32x (_Float32x __x) throw (); extern long long int __llrintf32x (_Float32x __x) throw ();



extern long int lroundf32x (_Float32x __x) throw (); extern long int __lroundf32x (_Float32x __x) throw ();
__extension__
extern long long int llroundf32x (_Float32x __x) throw (); extern long long int __llroundf32x (_Float32x __x) throw ();



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw (); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw ();




extern _Float32x roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ();



extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) throw ();




extern int totalorderf32x (const _Float32x *__x, const _Float32x *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf32x (const _Float32x *__x, const _Float32x *__y) throw ()

     __attribute__ ((__pure__));


extern _Float32x getpayloadf32x (const _Float32x *__x) throw (); extern _Float32x __getpayloadf32x (const _Float32x *__x) throw ();


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) throw ();


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) throw ();
# 441 "/usr/include/math.h" 2 3 4
# 457 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x acosf64x (_Float64x __x) throw (); extern _Float64x __acosf64x (_Float64x __x) throw ();

extern _Float64x asinf64x (_Float64x __x) throw (); extern _Float64x __asinf64x (_Float64x __x) throw ();

extern _Float64x atanf64x (_Float64x __x) throw (); extern _Float64x __atanf64x (_Float64x __x) throw ();

extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) throw (); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) throw ();


extern _Float64x cosf64x (_Float64x __x) throw (); extern _Float64x __cosf64x (_Float64x __x) throw ();

extern _Float64x sinf64x (_Float64x __x) throw (); extern _Float64x __sinf64x (_Float64x __x) throw ();

extern _Float64x tanf64x (_Float64x __x) throw (); extern _Float64x __tanf64x (_Float64x __x) throw ();




extern _Float64x coshf64x (_Float64x __x) throw (); extern _Float64x __coshf64x (_Float64x __x) throw ();

extern _Float64x sinhf64x (_Float64x __x) throw (); extern _Float64x __sinhf64x (_Float64x __x) throw ();

extern _Float64x tanhf64x (_Float64x __x) throw (); extern _Float64x __tanhf64x (_Float64x __x) throw ();



extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw (); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw ();





extern _Float64x acoshf64x (_Float64x __x) throw (); extern _Float64x __acoshf64x (_Float64x __x) throw ();

extern _Float64x asinhf64x (_Float64x __x) throw (); extern _Float64x __asinhf64x (_Float64x __x) throw ();

extern _Float64x atanhf64x (_Float64x __x) throw (); extern _Float64x __atanhf64x (_Float64x __x) throw ();





extern _Float64x expf64x (_Float64x __x) throw (); extern _Float64x __expf64x (_Float64x __x) throw ();


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) throw (); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) throw ();


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) throw (); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) throw ();


extern _Float64x logf64x (_Float64x __x) throw (); extern _Float64x __logf64x (_Float64x __x) throw ();


extern _Float64x log10f64x (_Float64x __x) throw (); extern _Float64x __log10f64x (_Float64x __x) throw ();


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) throw (); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64x exp10f64x (_Float64x __x) throw (); extern _Float64x __exp10f64x (_Float64x __x) throw ();




extern _Float64x expm1f64x (_Float64x __x) throw (); extern _Float64x __expm1f64x (_Float64x __x) throw ();


extern _Float64x log1pf64x (_Float64x __x) throw (); extern _Float64x __log1pf64x (_Float64x __x) throw ();


extern _Float64x logbf64x (_Float64x __x) throw (); extern _Float64x __logbf64x (_Float64x __x) throw ();




extern _Float64x exp2f64x (_Float64x __x) throw (); extern _Float64x __exp2f64x (_Float64x __x) throw ();


extern _Float64x log2f64x (_Float64x __x) throw (); extern _Float64x __log2f64x (_Float64x __x) throw ();






extern _Float64x powf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x sqrtf64x (_Float64x __x) throw (); extern _Float64x __sqrtf64x (_Float64x __x) throw ();



extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) throw ();




extern _Float64x cbrtf64x (_Float64x __x) throw (); extern _Float64x __cbrtf64x (_Float64x __x) throw ();






extern _Float64x ceilf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) throw (); extern _Float64x __nanf64x (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) throw (); extern _Float64x __j0f64x (_Float64x) throw ();
extern _Float64x j1f64x (_Float64x) throw (); extern _Float64x __j1f64x (_Float64x) throw ();
extern _Float64x jnf64x (int, _Float64x) throw (); extern _Float64x __jnf64x (int, _Float64x) throw ();
extern _Float64x y0f64x (_Float64x) throw (); extern _Float64x __y0f64x (_Float64x) throw ();
extern _Float64x y1f64x (_Float64x) throw (); extern _Float64x __y1f64x (_Float64x) throw ();
extern _Float64x ynf64x (int, _Float64x) throw (); extern _Float64x __ynf64x (int, _Float64x) throw ();





extern _Float64x erff64x (_Float64x) throw (); extern _Float64x __erff64x (_Float64x) throw ();
extern _Float64x erfcf64x (_Float64x) throw (); extern _Float64x __erfcf64x (_Float64x) throw ();
extern _Float64x lgammaf64x (_Float64x) throw (); extern _Float64x __lgammaf64x (_Float64x) throw ();




extern _Float64x tgammaf64x (_Float64x) throw (); extern _Float64x __tgammaf64x (_Float64x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) throw (); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) throw ();






extern _Float64x rintf64x (_Float64x __x) throw (); extern _Float64x __rintf64x (_Float64x __x) throw ();


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) throw ();






extern _Float64x nextdownf64x (_Float64x __x) throw (); extern _Float64x __nextdownf64x (_Float64x __x) throw ();

extern _Float64x nextupf64x (_Float64x __x) throw (); extern _Float64x __nextupf64x (_Float64x __x) throw ();



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) throw ();



extern _Float64x scalbnf64x (_Float64x __x, int __n) throw (); extern _Float64x __scalbnf64x (_Float64x __x, int __n) throw ();



extern int ilogbf64x (_Float64x __x) throw (); extern int __ilogbf64x (_Float64x __x) throw ();




extern long int llogbf64x (_Float64x __x) throw (); extern long int __llogbf64x (_Float64x __x) throw ();




extern _Float64x scalblnf64x (_Float64x __x, long int __n) throw (); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) throw ();



extern _Float64x nearbyintf64x (_Float64x __x) throw (); extern _Float64x __nearbyintf64x (_Float64x __x) throw ();



extern _Float64x roundf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) throw () __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw (); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw ();






extern long int lrintf64x (_Float64x __x) throw (); extern long int __lrintf64x (_Float64x __x) throw ();
__extension__
extern long long int llrintf64x (_Float64x __x) throw (); extern long long int __llrintf64x (_Float64x __x) throw ();



extern long int lroundf64x (_Float64x __x) throw (); extern long int __lroundf64x (_Float64x __x) throw ();
__extension__
extern long long int llroundf64x (_Float64x __x) throw (); extern long long int __llroundf64x (_Float64x __x) throw ();



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw (); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw ();




extern _Float64x roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ();



extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) throw ();




extern int totalorderf64x (const _Float64x *__x, const _Float64x *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf64x (const _Float64x *__x, const _Float64x *__y) throw ()

     __attribute__ ((__pure__));


extern _Float64x getpayloadf64x (const _Float64x *__x) throw (); extern _Float64x __getpayloadf64x (const _Float64x *__x) throw ();


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) throw ();


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) throw ();
# 458 "/usr/include/math.h" 2 3 4
# 503 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float fadd (double __x, double __y) throw ();


extern float fdiv (double __x, double __y) throw ();


extern float fmul (double __x, double __y) throw ();


extern float fsub (double __x, double __y) throw ();
# 504 "/usr/include/math.h" 2 3 4
# 517 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float faddl (long double __x, long double __y) throw ();


extern float fdivl (long double __x, long double __y) throw ();


extern float fmull (long double __x, long double __y) throw ();


extern float fsubl (long double __x, long double __y) throw ();
# 518 "/usr/include/math.h" 2 3 4
# 537 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern double daddl (long double __x, long double __y) throw ();


extern double ddivl (long double __x, long double __y) throw ();


extern double dmull (long double __x, long double __y) throw ();


extern double dsubl (long double __x, long double __y) throw ();
# 538 "/usr/include/math.h" 2 3 4
# 616 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32divf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32mulf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32subf32x (_Float32x __x, _Float32x __y) throw ();
# 617 "/usr/include/math.h" 2 3 4
# 626 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32divf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32mulf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32subf64 (_Float64 __x, _Float64 __y) throw ();
# 627 "/usr/include/math.h" 2 3 4
# 636 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32divf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32mulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32subf64x (_Float64x __x, _Float64x __y) throw ();
# 637 "/usr/include/math.h" 2 3 4
# 666 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xdivf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xmulf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xsubf64 (_Float64 __x, _Float64 __y) throw ();
# 667 "/usr/include/math.h" 2 3 4
# 676 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xdivf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xmulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xsubf64x (_Float64x __x, _Float64x __y) throw ();
# 677 "/usr/include/math.h" 2 3 4
# 706 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64divf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64mulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64subf64x (_Float64x __x, _Float64x __y) throw ();
# 707 "/usr/include/math.h" 2 3 4
# 773 "/usr/include/math.h" 3 4
extern int signgam;
# 853 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 973 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     throw () __attribute__ ((__const__));
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }



}
# 974 "/usr/include/math.h" 2 3 4
# 985 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}





}
# 1016 "/usr/include/math.h" 3 4
extern "C++" {
# 1047 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 1278 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (long double __x, long double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};
# 1321 "/usr/include/math.h" 3 4
template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 26 "firmware/nnet_utils/nnet_helpers.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 1 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 67 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 115 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 154 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 195 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 236 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };
# 275 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/codecvt.h" 3
   template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs) { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };



  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };



  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }

    protected:
      virtual
      ~codecvt_byname() { }
    };




  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);




}
# 42 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 1 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 3
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 1 3
# 36 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 37 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/c++io.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;


}
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/x86_64-unknown-linux-gnu/bits/basic_file.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _CharT>
    class __basic_file;


  template<>
    class __basic_file<char>
    {

      __c_file* _M_cfile;


      bool _M_cfile_created;

    public:
      __basic_file(__c_lock* __lock = 0) throw ();

      __basic_file*
      open(const char* __name, ios_base::openmode __mode, int __prot = 0664);

      __basic_file*
      sys_open(__c_file* __file, ios_base::openmode);

      __basic_file*
      sys_open(int __fd, ios_base::openmode __mode) throw ();

      __basic_file*
      close();

      __attribute__ ((__pure__)) bool
      is_open() const throw ();

      __attribute__ ((__pure__)) int
      fd() throw ();

      __attribute__ ((__pure__)) __c_file*
      file() throw ();

      ~__basic_file();

      streamsize
      xsputn(const char* __s, streamsize __n);

      streamsize
      xsputn_2(const char* __s1, streamsize __n1,
        const char* __s2, streamsize __n2);

      streamsize
      xsgetn(char* __s, streamsize __n);

      streamoff
      seekoff(streamoff __off, ios_base::seekdir __way) throw ();

      int
      sync();

      streamsize
      showmanyc();
    };


}
# 44 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 67 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_filebuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef __basic_file<char> __file_type;
      typedef typename traits_type::state_type __state_type;
      typedef codecvt<char_type, char, __state_type> __codecvt_type;

      friend class ios_base;

    protected:


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base::openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type* _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;
# 129 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type* _M_pback_cur_save;
      char_type* _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type* _M_codecvt;






      char* _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char* _M_ext_next;
      char* _M_ext_end;






      void
      _M_create_pback()
      {
 if (!_M_pback_init)
   {
     _M_pback_cur_save = this->gptr();
     _M_pback_end_save = this->egptr();
     this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback() throw()
      {
 if (_M_pback_init)
   {

     _M_pback_cur_save += this->gptr() != this->eback();
     this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
     _M_pback_init = false;
   }
      }

    public:







      basic_filebuf();




      virtual
      ~basic_filebuf()
      { this->close(); }





      bool
      is_open() const throw()
      { return _M_file.is_open(); }
# 265 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      open(const char* __s, ios_base::openmode __mode);
# 275 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      open(const std::string& __s, ios_base::openmode __mode)
      { return open(__s.c_str(), __mode); }
# 292 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      close();

    protected:
      void
      _M_allocate_internal_buffer();

      void
      _M_destroy_internal_buffer() throw();


      virtual streamsize
      showmanyc();






      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = _Traits::eof());
# 324 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      virtual int_type
      overflow(int_type __c = _Traits::eof());



      bool
      _M_convert_to_external(char_type*, streamsize);
# 344 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n);

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __pos,
       ios_base::openmode __mode = ios_base::in | ios_base::out);


      pos_type
      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);

      int
      _M_get_ext_pos(__state_type &__state);

      virtual int
      sync();

      virtual void
      imbue(const locale& __loc);

      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);

      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);


      bool
      _M_terminate_output();
# 390 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      _M_set_buffer(streamsize __off)
      {
  const bool __testin = _M_mode & ios_base::in;
  const bool __testout = _M_mode & ios_base::out;

 if (__testin && __off > 0)
   this->setg(_M_buf, _M_buf, _M_buf + __off);
 else
   this->setg(_M_buf, _M_buf, _M_buf);

 if (__testout && __off == 0 && _M_buf_size > 1 )
   this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 else
   this->setp(0, 0);
      }
    };
# 418 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ifstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 445 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      basic_ifstream() : __istream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 458 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 474 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ifstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 490 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      ~basic_ifstream()
      { }
# 500 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 529 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 549 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const std::string& __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 567 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 586 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ofstream : public basic_ostream<_CharT,_Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 613 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      basic_ofstream(): __ostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 627 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ofstream(const char* __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 645 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_ofstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 661 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      ~basic_ofstream()
      { }
# 671 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 700 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 721 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const std::string& __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 740 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 759 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_fstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ios<char_type, traits_type> __ios_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 787 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 799 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      explicit
      basic_fstream(const char* __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }







      explicit
      basic_fstream(const std::string& __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 830 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      ~basic_fstream()
      { }
# 840 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 869 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 890 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      open(const std::string& __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 909 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };


}


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 1 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_allocate_internal_buffer()
    {


      if (!_M_buf_allocated && !_M_buf)
 {
   _M_buf = new char_type[_M_buf_size];
   _M_buf_allocated = true;
 }
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_destroy_internal_buffer() throw()
    {
      if (_M_buf_allocated)
 {
   delete [] _M_buf;
   _M_buf = 0;
   _M_buf_allocated = false;
 }
      delete [] _M_ext_buf;
      _M_ext_buf = 0;
      _M_ext_buf_size = 0;
      _M_ext_next = 0;
      _M_ext_end = 0;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),
    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),
    _M_state_last(), _M_buf(0), _M_buf_size(8192),
    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(),
    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),
    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),
    _M_ext_end(0)
    {
      if (has_facet<__codecvt_type>(this->_M_buf_locale))
 _M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    open(const char* __s, ios_base::openmode __mode)
    {
      __filebuf_type *__ret = 0;
      if (!this->is_open())
 {
   _M_file.open(__s, __mode);
   if (this->is_open())
     {
       _M_allocate_internal_buffer();
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer(-1);


       _M_state_last = _M_state_cur = _M_state_beg;


       if ((__mode & ios_base::ate)
    && this->seekoff(0, ios_base::end, __mode)
    == pos_type(off_type(-1)))
  this->close();
       else
  __ret = this;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    close()
    {
      if (!this->is_open())
 return 0;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf *__fb;
   __close_sentry (basic_filebuf *__fbi): __fb(__fbi) { }
   ~__close_sentry ()
   {
     __fb->_M_mode = ios_base::openmode(0);
     __fb->_M_pback_init = false;
     __fb->_M_destroy_internal_buffer();
     __fb->_M_reading = false;
     __fb->_M_writing = false;
     __fb->_M_set_buffer(-1);
     __fb->_M_state_last = __fb->_M_state_cur = __fb->_M_state_beg;
   }
 } __cs (this);

 if (true)
   {
     if (!_M_terminate_output())
       __testfail = true;
   }
 if (false)
   {
     _M_file.close();
                            ;
   }
 if (false)
   { __testfail = true; }
      }

      if (!_M_file.close())
 __testfail = true;

      if (__testfail)
 return 0;
      else
 return this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    showmanyc()
    {
      streamsize __ret = -1;
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && this->is_open())
 {


   __ret = this->egptr() - this->gptr();







   if (__check_facet(_M_codecvt).encoding() >= 0)

     __ret += _M_file.showmanyc() / _M_codecvt->max_length();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }



   _M_destroy_pback();

   if (this->gptr() < this->egptr())
     return traits_type::to_int_type(*this->gptr());


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base::result __r = codecvt_base::ok;
   if (__check_facet(_M_codecvt).always_noconv())
     {
       __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()),
          __buflen);
       if (__ilen == 0)
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt->encoding();
       streamsize __blen;
       streamsize __rlen;
       if (__enc > 0)
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt->max_length() - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if (_M_reading && this->egptr() == this->eback() && __remainder)
  __rlen = 0;



       if (_M_ext_buf_size < __blen)
  {
    char* __buf = new char[__blen];
    if (__remainder)
      __builtin_memcpy(__buf, _M_ext_next, __remainder);

    delete [] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if (__remainder)
  __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if (__rlen > 0)
      {



        if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)
   {
     __throw_ios_failure(("basic_filebuf::underflow " "codecvt::max_length() " "is not valid"));


   }
        streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);
        if (__elen == 0)
   __got_eof = true;
        else if (__elen == -1)
   break;
        _M_ext_end += __elen;
      }

    char_type* __iend = this->eback();
    if (_M_ext_next < _M_ext_end)
      __r = _M_codecvt->in(_M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this->eback(),
      this->eback() + __buflen, __iend);
    if (__r == codecvt_base::noconv)
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std::min(__avail, __buflen);
        traits_type::copy(this->eback(),
     reinterpret_cast<char_type*>
     (_M_ext_buf), __ilen);
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this->eback();




    if (__r == codecvt_base::error)
      break;

    __rlen = 1;
  }
       while (__ilen == 0 && !__got_eof);
     }

   if (__ilen > 0)
     {
       _M_set_buffer(__ilen);
       _M_reading = true;
       __ret = traits_type::to_int_type(*this->gptr());
     }
   else if (__got_eof)
     {



       _M_set_buffer(-1);
       _M_reading = false;


       if (__r == codecvt_base::partial)
  __throw_ios_failure(("basic_filebuf::underflow " "incomplete character in file"));

     }
   else if (__r == codecvt_base::error)
     __throw_ios_failure(("basic_filebuf::underflow " "invalid byte sequence in file"));

   else
     __throw_ios_failure(("basic_filebuf::underflow " "error reading the file"));

 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    pbackfail(int_type __i)
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type::eq_int_type(__i, __ret);
   int_type __tmp;
   if (this->eback() < this->gptr())
     {
       this->gbump(-1);
       __tmp = traits_type::to_int_type(*this->gptr());
     }
   else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))
     {
       __tmp = this->underflow();
       if (traits_type::eq_int_type(__tmp, __ret))
  return __ret;
     }
   else
     {





       return __ret;
     }



   if (!__testeof && traits_type::eq_int_type(__i, __tmp))
     __ret = __i;
   else if (__testeof)
     __ret = traits_type::not_eof(__i);
   else if (!__testpb)
     {
       _M_create_pback();
       _M_reading = true;
       *this->gptr() = traits_type::to_char_type(__i);
       __ret = __i;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    overflow(int_type __c)
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(__c, __ret);
      const bool __testout = _M_mode & ios_base::out;
      if (__testout)
 {
          if (_M_reading)
            {
              _M_destroy_pback();
              const int __gptr_off = _M_get_ext_pos(_M_state_last);
              if (_M_seek(__gptr_off, ios_base::cur, _M_state_last)
                  == pos_type(off_type(-1)))
                return __ret;
            }
   if (this->pbase() < this->pptr())
     {

       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }



       if (_M_convert_to_external(this->pbase(),
      this->pptr() - this->pbase()))
  {
    _M_set_buffer(0);
    __ret = traits_type::not_eof(__c);
  }
     }
   else if (_M_buf_size > 1)
     {



       _M_set_buffer(0);
       _M_writing = true;
       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
       __ret = traits_type::not_eof(__c);
     }
   else
     {

       char_type __conv = traits_type::to_char_type(__c);
       if (__testeof || _M_convert_to_external(&__conv, 1))
  {
    _M_writing = true;
    __ret = traits_type::not_eof(__c);
  }
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)
    {

      streamsize __elen;
      streamsize __plen;
      if (__check_facet(_M_codecvt).always_noconv())
 {
   __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt->max_length();
   char* __buf = static_cast<char*>(__builtin_alloca(__blen));

   char* __bend;
   const char_type* __iend;
   codecvt_base::result __r;
   __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend);

   if (__r == codecvt_base::ok || __r == codecvt_base::partial)
     __blen = __bend - __buf;
   else if (__r == codecvt_base::noconv)
     {

       __buf = reinterpret_cast<char*>(__ibuf);
       __blen = __ilen;
     }
   else
     __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));


   __elen = _M_file.xsputn(__buf, __blen);
   __plen = __blen;


   if (__r == codecvt_base::partial && __elen == __plen)
     {
       const char_type* __iresume = __iend;
       streamsize __rlen = this->pptr() - __iend;
       __r = _M_codecvt->out(_M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend);
       if (__r != codecvt_base::error)
  {
    __rlen = __bend - __buf;
    __elen = _M_file.xsputn(__buf, __rlen);
    __plen = __rlen;
  }
       else
  __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));

     }
 }
      return __elen == __plen;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsgetn(_CharT* __s, streamsize __n)
    {

      streamsize __ret = 0;
      if (_M_pback_init)
 {
   if (__n > 0 && this->gptr() == this->eback())
     {
       *__s++ = *this->gptr();
       this->gbump(1);
       __ret = 1;
       --__n;
     }
   _M_destroy_pback();
 }
      else if (_M_writing)
 {
    if (overflow() == traits_type::eof())
      return __ret;
    _M_set_buffer(-1);
    _M_writing = false;
  }




      const bool __testin = _M_mode & ios_base::in;
      const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

      if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()
     && __testin)
   {

     const streamsize __avail = this->egptr() - this->gptr();
     if (__avail != 0)
       {
        traits_type::copy(__s, this->gptr(), __avail);
         __s += __avail;
        this->setg(this->eback(), this->gptr() + __avail,
     this->egptr());
        __ret += __avail;
        __n -= __avail;
       }



     streamsize __len;
     for (;;)
       {
         __len = _M_file.xsgetn(reinterpret_cast<char*>(__s),
           __n);
         if (__len == -1)
    __throw_ios_failure(("basic_filebuf::xsgetn " "error reading the file"));

         if (__len == 0)
    break;

         __n -= __len;
         __ret += __len;
         if (__n == 0)
    break;

         __s += __len;
       }

     if (__n == 0)
       {
         _M_set_buffer(0);
         _M_reading = true;
       }
     else if (__len == 0)
       {



         _M_set_buffer(-1);
         _M_reading = false;
       }
   }
      else
   __ret += __streambuf_type::xsgetn(__s, __n);

      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsputn(const _CharT* __s, streamsize __n)
    {
      streamsize __ret = 0;



      const bool __testout = _M_mode & ios_base::out;
      if (__check_facet(_M_codecvt).always_noconv()
     && __testout && !_M_reading)
 {

   const streamsize __chunk = 1ul << 10;
   streamsize __bufavail = this->epptr() - this->pptr();


   if (!_M_writing && _M_buf_size > 1)
     __bufavail = _M_buf_size - 1;

   const streamsize __limit = std::min(__chunk, __bufavail);
   if (__n >= __limit)
     {
       const streamsize __buffill = this->pptr() - this->pbase();
       const char* __buf = reinterpret_cast<const char*>(this->pbase());
       __ret = _M_file.xsputn_2(__buf, __buffill,
           reinterpret_cast<const char*>(__s),
           __n);
       if (__ret == __buffill + __n)
  {
    _M_set_buffer(0);
    _M_writing = true;
  }
       if (__ret > __buffill)
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type::xsputn(__s, __n);
 }
       else
  __ret = __streambuf_type::xsputn(__s, __n);
       return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__streambuf_type*
    basic_filebuf<_CharT, _Traits>::
    setbuf(char_type* __s, streamsize __n)
    {
      if (!this->is_open())
 {
   if (__s == 0 && __n == 0)
     _M_buf_size = 1;
   else if (__s && __n > 0)
     {
# 701 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/fstream.tcc" 3
       _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }




  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)
    {
      int __width = 0;
      if (_M_codecvt)
 __width = _M_codecvt->encoding();
      if (__width < 0)
 __width = 0;

      pos_type __ret = pos_type(off_type(-1));
      const bool __testfail = __off != 0 && __width <= 0;
      if (this->is_open() && !__testfail)
 {




   bool __no_movement = __way == ios_base::cur && __off == 0
     && (!_M_writing || _M_codecvt->always_noconv());


   if (!__no_movement)
     _M_destroy_pback();






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if (_M_reading && __way == ios_base::cur)
     {
       __state = _M_state_last;
       __computed_off += _M_get_ext_pos(__state);
     }
   if (!__no_movement)
     __ret = _M_seek(__computed_off, __way, __state);
   else
     {
       if (_M_writing)
  __computed_off = this->pptr() - this->pbase();

        off_type __file_off = _M_file.seekoff(0, ios_base::cur);
        if (__file_off != off_type(-1))
  {
    __ret = __file_off + __computed_off;
    __ret.state(__state);
  }
     }
 }
      return __ret;
    }





  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekpos(pos_type __pos, ios_base::openmode)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (this->is_open())
 {

   _M_destroy_pback();
   __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (_M_terminate_output())
 {
   off_type __file_off = _M_file.seekoff(__off, __way);
   if (__file_off != off_type(-1))
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer(-1);
       _M_state_cur = __state;
       __ret = __file_off;
       __ret.state(_M_state_cur);
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    int basic_filebuf<_CharT, _Traits>::
    _M_get_ext_pos(__state_type& __state)
    {
      if (_M_codecvt->always_noconv())
        return this->gptr() - this->egptr();
      else
        {



          const int __gptr_off =
            _M_codecvt->length(__state, _M_ext_buf, _M_ext_next,
                               this->gptr() - this->eback());
          return _M_ext_buf + __gptr_off - _M_ext_end;
        }
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_terminate_output()
    {

      bool __testvalid = true;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __testvalid = false;
 }


      if (_M_writing && !__check_facet(_M_codecvt).always_noconv()
   && __testvalid)
 {



   const size_t __blen = 128;
   char __buf[__blen];
   codecvt_base::result __r;
   streamsize __ilen = 0;

   do
     {
       char* __next;
       __r = _M_codecvt->unshift(_M_state_cur, __buf,
     __buf + __blen, __next);
       if (__r == codecvt_base::error)
  __testvalid = false;
       else if (__r == codecvt_base::ok ||
         __r == codecvt_base::partial)
  {
    __ilen = __next - __buf;
    if (__ilen > 0)
      {
        const streamsize __elen = _M_file.xsputn(__buf, __ilen);
        if (__elen != __ilen)
   __testvalid = false;
      }
  }
     }
   while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);

   if (__testvalid)
     {




       const int_type __tmp = this->overflow();
       if (traits_type::eq_int_type(__tmp, traits_type::eof()))
  __testvalid = false;
     }
 }
      return __testvalid;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_filebuf<_CharT, _Traits>::
    sync()
    {


      int __ret = 0;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __ret = -1;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    imbue(const locale& __loc)
    {
      bool __testvalid = true;

      const __codecvt_type* _M_codecvt_tmp = 0;
      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))
 _M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);

      if (this->is_open())
 {

   if ((_M_reading || _M_writing)
       && __check_facet(_M_codecvt).encoding() == -1)
     __testvalid = false;
   else
     {
       if (_M_reading)
  {
    if (__check_facet(_M_codecvt).always_noconv())
      {
        if (_M_codecvt_tmp
     && !__check_facet(_M_codecvt_tmp).always_noconv())
   __testvalid = this->seekoff(0, ios_base::cur, _M_mode)
                 != pos_type(off_type(-1));
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt->length(_M_state_last, _M_ext_buf,
          _M_ext_next,
          this->gptr() - this->eback());
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if (__remainder)
   __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer(-1);
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if (_M_writing && (__testvalid = _M_terminate_output()))
  _M_set_buffer(-1);
     }
 }

      if (__testvalid)
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }




  extern template class basic_filebuf<char>;
  extern template class basic_ifstream<char>;
  extern template class basic_ofstream<char>;
  extern template class basic_fstream<char>;


  extern template class basic_filebuf<wchar_t>;
  extern template class basic_ifstream<wchar_t>;
  extern template class basic_ofstream<wchar_t>;
  extern template class basic_fstream<wchar_t>;




}
# 921 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/fstream" 2 3
# 27 "firmware/nnet_utils/nnet_helpers.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 1 3
# 59 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 3
# 59 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 1 3
# 59 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 59 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 69 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 1 3
# 68 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace rel_ops
  {
# 86 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 99 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 112 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 125 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }


  }

}
# 70 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/utility" 2 3






namespace std __attribute__ ((__visibility__ ("default")))
{


  template<class _Tp>
    class tuple_size;

  template<std::size_t _Int, class _Tp>
    class tuple_element;


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2> >
    { static const std::size_t value = 2; };

  template<class _Tp1, class _Tp2>
    const std::size_t
    tuple_size<std::pair<_Tp1, _Tp2> >::value;

  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2> >
    { typedef _Tp1 type; };

  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2> >
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
      static _Tp1& __get(std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
      static const _Tp1& __const_get(const std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.first; }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
      static _Tp2& __get(std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
      static const _Tp2& __const_get(const std::pair<_Tp1, _Tp2>& __pair)
      { return __pair.second; }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&
    get(std::pair<_Tp1, _Tp2>& __in)
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    inline const typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&
    get(const std::pair<_Tp1, _Tp2>& __in)
    { return __pair_get<_Int>::__const_get(__in); }


}
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 2 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 1 3
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3






namespace std __attribute__ ((__visibility__ ("default")))
{
# 191 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _Predicate>
    bool
    all_of(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Predicate>
    bool
    any_of(_IIter, _IIter, _Predicate);


  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);


  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    copy_if(_IIter, _IIter, _OIter, _Predicate);

  template<typename _IIter, typename _Size, typename _OIter>
    _OIter
    copy_n(_IIter, _Size, _OIter);





  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);





  template<typename _IIter, typename _Predicate>
    _IIter
    find_if_not(_IIter, _IIter, _Predicate);






  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);


  template<typename _RAIter>
    bool
    is_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    bool
    is_heap(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    _RAIter
    is_heap_until(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    _RAIter
    is_heap_until(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _Predicate>
    bool
    is_partitioned(_IIter, _IIter, _Predicate);

  template<typename _FIter1, typename _FIter2>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2);

  template<typename _FIter1, typename _FIter2,
    typename _BinaryPredicate>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);

  template<typename _FIter>
    bool
    is_sorted(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    bool
    is_sorted(_FIter, _FIter, _Compare);

  template<typename _FIter>
    _FIter
    is_sorted_until(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    is_sorted_until(_FIter, _FIter, _Compare);


  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&, _Compare);

  template<typename _FIter>
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter, _Compare);

  template<typename _Tp>
    _Tp
    min(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    _Tp
    min(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    _Tp
    max(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    _Tp
    max(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>, _Compare);




  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);


  template<typename _IIter, typename _Predicate>
    bool
    none_of(_IIter, _IIter, _Predicate);





  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);




  template<typename _IIter, typename _OIter1,
    typename _OIter2, typename _Predicate>
    pair<_OIter1, _OIter2>
    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);

  template<typename _FIter, typename _Predicate>
    _FIter
    partition_point(_FIter, _FIter, _Predicate);


  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  template<typename _FIter>
    void
    rotate(_FIter, _FIter, _FIter);

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 532 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/algorithmfwd.h" 3
  template<typename _RAIter, typename _UGenerator>
    void
    shuffle(_RAIter, _RAIter, _UGenerator&&);


  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);

  template<typename _Tp>
    void
    swap(_Tp&, _Tp&);

  template<typename _Tp, size_t _Nm>
    void
    swap(_Tp (&)[_Nm], _Tp (&)[_Nm]);

  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);





  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,

     _Generator&&);




  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);


}
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 1 3
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__first[__parent] < __first[__child])
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first[__parent], __first[__child]))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    { return std::__is_heap_until(__first, __n) == __n; }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    { return std::__is_heap_until(__first, __n, __comp) == __n; }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && *(__first + __parent) < __value)
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 154 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;
                                                  ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value));
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,
  _Distance __topIndex, _Tp __value, _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex
      && __comp(*(__first + __parent), __value))
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 203 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;
                                                               ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value));
    }

  template<typename _RandomAccessIterator>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value));
    }
# 276 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                     ;
                                              ;

      --__last;
      std::__pop_heap(__first, __last, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(*(__first + __secondChild),
       *(__first + (__secondChild - 1))))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value), __comp);
    }
# 350 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {



                                                     ;
                                                           ;

      --__last;
      std::__pop_heap(__first, __last, __last, __comp);
    }
# 373 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value));
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 413 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 452 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;
                                              ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last);
 }
    }
# 481 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {



                                                     ;
                                                           ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 510 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      return __first + std::__is_heap_until(__first, std::distance(__first,
           __last));
    }
# 536 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {



                                                     ;

      return __first + std::__is_heap_until(__first, std::distance(__first,
           __last),
         __comp);
    }
# 558 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::is_heap_until(__first, __last) == __last; }
# 571 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
    { return std::is_heap_until(__first, __last, __comp) == __last; }



}
# 64 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 1 3
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 1 3
# 64 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
# 91 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_construct.h" 3
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template <typename _Tp> class allocator;

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 __alloc.destroy(std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 84 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len)
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 111 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {



    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __ucr(_ForwardIterator __first, _ForwardIterator __last,
       _Tp& __value)
        {
   if(__first == __last)
     return;

   _ForwardIterator __cur = __first;
   if (true)
     {
       std::_Construct(std::__addressof(*__first),
         std::move(__value));
       _ForwardIterator __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       __value = std::move(*__prev);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __ucr(_ForwardIterator, _ForwardIterator, _Tp&) { }
    };
# 230 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tempbuf.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_construct_buf(_ForwardIterator __first,
      _ForwardIterator __last,
      _Tp& __value)
    {
      typedef typename std::iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __value);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      if (true)
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if(_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            *__first);
 }
      if (false)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
                          ;
 }
    }


}
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 3





# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 76 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;

  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;

  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;

  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;

  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }

  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;

  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;

  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;

  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;

  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;

  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;

  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;

  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }

  using ::frexp;

  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;

  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
  ldexp(_Tp __x, int __exp)
  { return __builtin_ldexp(__x, __exp); }

  using ::log;

  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;

  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;

  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }

  using ::pow;

  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 371 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;

  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;

  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;

  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;

  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;

  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 480 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  inline int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  inline int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  inline int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }

  inline bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  inline bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  inline bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isfinite(_Tp __x)
    { return true; }

  inline bool
  isinf(float __x)
  { return __builtin_isinf(__x); }

  inline bool
  isinf(double __x)
  { return __builtin_isinf(__x); }

  inline bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isinf(_Tp __x)
    { return false; }

  inline bool
  isnan(float __x)
  { return __builtin_isnan(__x); }

  inline bool
  isnan(double __x)
  { return __builtin_isnan(__x); }

  inline bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isnan(_Tp __x)
    { return false; }

  inline bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  inline bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  inline bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }

  inline bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  inline bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  inline bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }

  inline bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  inline bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  inline bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }

  inline bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  inline bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  inline bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }

  inline bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  inline bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  inline bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }

  inline bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  inline bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  inline bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }

  inline bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  inline bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  inline bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }

  inline bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  inline bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  inline bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 842 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
}
# 957 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;

  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;

  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;


  inline float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  inline long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    acosh(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return acosh(__type(__x));
    }

  inline float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  inline long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    asinh(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return asinh(__type(__x));
    }

  inline float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  inline long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    atanh(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return atanh(__type(__x));
    }

  inline float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  inline long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    cbrt(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return cbrt(__type(__x));
    }

  inline float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  inline long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }

  inline float
  erf(float __x)
  { return __builtin_erff(__x); }

  inline long double
  erf(long double __x)
  { return __builtin_erfl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    erf(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return erf(__type(__x));
    }

  inline float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  inline long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    erfc(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return erfc(__type(__x));
    }

  inline float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  inline long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    exp2(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return exp2(__type(__x));
    }

  inline float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  inline long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    expm1(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return expm1(__type(__x));
    }

  inline float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  inline long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }

  inline float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  inline long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }

  template<typename _Tp, typename _Up, typename _Vp>
    inline typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }

  inline float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  inline long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }

  inline float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  inline long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }

  inline float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  inline long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }

  inline int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  inline int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }

  template<typename _Tp>
    inline int
    ilogb(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return ilogb(__type(__x));
    }

  inline float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  inline long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    lgamma(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return lgamma(__type(__x));
    }

  inline long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  inline long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }

  template<typename _Tp>
    inline long long
    llrint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return llrint(__type(__x));
    }

  inline long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  inline long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }

  template<typename _Tp>
    inline long long
    llround(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return llround(__type(__x));
    }

  inline float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  inline long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    log1p(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return log1p(__type(__x));
    }


  inline float
  log2(float __x)
  { return __builtin_log2f(__x); }

  inline long double
  log2(long double __x)
  { return __builtin_log2l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    log2(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return log2(__type(__x));
    }

  inline float
  logb(float __x)
  { return __builtin_logbf(__x); }

  inline long double
  logb(long double __x)
  { return __builtin_logbl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    logb(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return logb(__type(__x));
    }

  inline long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  inline long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }

  template<typename _Tp>
    inline long
    lrint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return lrint(__type(__x));
    }

  inline long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  inline long
  lround(long double __x)
  { return __builtin_lroundl(__x); }

  template<typename _Tp>
    inline long
    lround(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return lround(__type(__x));
    }

  inline float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  inline long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    nearbyint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return nearbyint(__type(__x));
    }

  inline float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  inline long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }

  inline float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  inline long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    nexttoward(_Tp __x, long double __y)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return nexttoward(__type(__x), __y);
    }

  inline float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  inline long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }

  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }

  inline float
  rint(float __x)
  { return __builtin_rintf(__x); }

  inline long double
  rint(long double __x)
  { return __builtin_rintl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    rint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return rint(__type(__x));
    }

  inline float
  round(float __x)
  { return __builtin_roundf(__x); }

  inline long double
  round(long double __x)
  { return __builtin_roundl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    round(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return round(__type(__x));
    }

  inline float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  inline long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    scalbln(_Tp __x, long __ex)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return scalbln(__type(__x), __ex);
    }

  inline float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  inline long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    scalbn(_Tp __x, int __ex)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return scalbn(__type(__x), __ex);
    }

  inline float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  inline long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    tgamma(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return tgamma(__type(__x));
    }

  inline float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  inline long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    trunc(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return trunc(__type(__x));
    }


}
# 38 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdio" 3
# 39 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 40 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3


# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
# 147 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 191 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;



    static constexpr bool is_integer = false;





    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;





    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 302 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() throw() { return static_cast<_Tp>(0); }


      static constexpr _Tp
      max() throw() { return static_cast<_Tp>(0); }




      static constexpr _Tp
      lowest() throw() { return static_cast<_Tp>(0); }




      static constexpr _Tp
      epsilon() throw() { return static_cast<_Tp>(0); }


      static constexpr _Tp
      round_error() throw() { return static_cast<_Tp>(0); }


      static constexpr _Tp
      infinity() throw() { return static_cast<_Tp>(0); }



      static constexpr _Tp
      quiet_NaN() throw() { return static_cast<_Tp>(0); }



      static constexpr _Tp
      signaling_NaN() throw() { return static_cast<_Tp>(0); }




      static constexpr _Tp
      denorm_min() throw() { return static_cast<_Tp>(0); }
    };


  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };






  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() throw() { return false; }

      static constexpr bool
      max() throw() { return true; }


      static constexpr bool
      lowest() throw() { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() throw() { return false; }

      static constexpr bool
      round_error() throw() { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() throw() { return false; }

      static constexpr bool
      quiet_NaN() throw() { return false; }

      static constexpr bool
      signaling_NaN() throw() { return false; }

      static constexpr bool
      denorm_min() throw() { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() throw() { return (((char)(-1) < 0) ? (char)1 << (sizeof(char) * 8 - ((char)(-1) < 0)) : (char)0); }

      static constexpr char
      max() throw() { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() throw() { return 0; }

      static constexpr char
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() throw() { return char(); }

      static constexpr char
      quiet_NaN() throw() { return char(); }

      static constexpr char
      signaling_NaN() throw() { return char(); }

      static constexpr char
      denorm_min() throw() { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() throw() { return -127 - 1; }

      static constexpr signed char
      max() throw() { return 127; }


      static constexpr signed char
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() throw() { return 0; }

      static constexpr signed char
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() throw() { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() throw() { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() throw() { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() throw() { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() throw() { return 0; }

      static constexpr unsigned char
      max() throw() { return 127 * 2U + 1; }


      static constexpr unsigned char
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() throw() { return 0; }

      static constexpr unsigned char
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() throw() { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() throw() { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() throw() { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() throw() { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() throw() { return (((wchar_t)(-1) < 0) ? (wchar_t)1 << (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) : (wchar_t)0); }

      static constexpr wchar_t
      max() throw() { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() throw() { return 0; }

      static constexpr wchar_t
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() throw() { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() throw() { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() throw() { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() throw() { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() throw() { return (((char16_t)(-1) < 0) ? (char16_t)1 << (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) : (char16_t)0); }

      static constexpr char16_t
      max() throw() { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }


      static constexpr char16_t
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed
       = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() throw() { return 0; }

      static constexpr char16_t
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() throw() { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() throw() { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() throw() { return char16_t(); }

      static constexpr char16_t
      denorm_min() throw() { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() throw() { return (((char32_t)(-1) < 0) ? (char32_t)1 << (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) : (char32_t)0); }

      static constexpr char32_t
      max() throw() { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }


      static constexpr char32_t
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed
       = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() throw() { return 0; }

      static constexpr char32_t
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() throw() { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() throw() { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() throw() { return char32_t(); }

      static constexpr char32_t
      denorm_min() throw() { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() throw() { return -32767 - 1; }

      static constexpr short
      max() throw() { return 32767; }


      static constexpr short
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() throw() { return 0; }

      static constexpr short
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() throw() { return short(); }

      static constexpr short
      quiet_NaN() throw() { return short(); }

      static constexpr short
      signaling_NaN() throw() { return short(); }

      static constexpr short
      denorm_min() throw() { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() throw() { return 0; }

      static constexpr unsigned short
      max() throw() { return 32767 * 2U + 1; }


      static constexpr unsigned short
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() throw() { return 0; }

      static constexpr unsigned short
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() throw() { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() throw() { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() throw() { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() throw() { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() throw() { return -2147483647 - 1; }

      static constexpr int
      max() throw() { return 2147483647; }


      static constexpr int
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() throw() { return 0; }

      static constexpr int
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() throw() { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() throw() { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() throw() { return static_cast<int>(0); }

      static constexpr int
      denorm_min() throw() { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() throw() { return 0; }

      static constexpr unsigned int
      max() throw() { return 2147483647 * 2U + 1; }


      static constexpr unsigned int
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() throw() { return 0; }

      static constexpr unsigned int
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() throw() { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() throw() { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() throw() { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() throw() { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() throw() { return -9223372036854775807L - 1; }

      static constexpr long
      max() throw() { return 9223372036854775807L; }


      static constexpr long
      lowest() throw() { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() throw() { return 0; }

      static constexpr long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() throw() { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() throw() { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() throw() { return static_cast<long>(0); }

      static constexpr long
      denorm_min() throw() { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() throw() { return 0; }

      static constexpr unsigned long
      max() throw() { return 9223372036854775807L * 2UL + 1; }


      static constexpr unsigned long
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() throw() { return 0; }

      static constexpr unsigned long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() throw() { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() throw() { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() throw() { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() throw() { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() throw() { return -9223372036854775807LL - 1; }

      static constexpr long long
      max() throw() { return 9223372036854775807LL; }


      static constexpr long long
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() throw() { return 0; }

      static constexpr long long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() throw() { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() throw() { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() throw() { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() throw() { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() throw() { return 0; }

      static constexpr unsigned long long
      max() throw() { return 9223372036854775807LL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() throw() { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() throw() { return 0; }

      static constexpr unsigned long long
      round_error() throw() { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() throw() { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() throw() { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() throw() { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() throw() { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() throw() { return 1.17549435e-38F; }

      static constexpr float
      max() throw() { return 3.40282347e+38F; }


      static constexpr float
      lowest() throw() { return -3.40282347e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() throw() { return 1.19209290e-7F; }

      static constexpr float
      round_error() throw() { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() throw() { return __builtin_huge_valf (); }

      static constexpr float
      quiet_NaN() throw() { return __builtin_nanf (""); }

      static constexpr float
      signaling_NaN() throw() { return __builtin_nansf (""); }

      static constexpr float
      denorm_min() throw() { return 1.40129846e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() throw() { return 2.2250738585072014e-308; }

      static constexpr double
      max() throw() { return 1.7976931348623157e+308; }


      static constexpr double
      lowest() throw() { return -1.7976931348623157e+308; }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() throw() { return 2.2204460492503131e-16; }

      static constexpr double
      round_error() throw() { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() throw() { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() throw() { return __builtin_nan (""); }

      static constexpr double
      signaling_NaN() throw() { return __builtin_nans (""); }

      static constexpr double
      denorm_min() throw() { return 4.9406564584124654e-324; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() throw() { return 3.36210314311209350626e-4932L; }

      static constexpr long double
      max() throw() { return 1.18973149535723176502e+4932L; }


      static constexpr long double
      lowest() throw() { return -1.18973149535723176502e+4932L; }


      static constexpr int digits = 64;
      static constexpr int digits10 = 18;

      static constexpr int max_digits10
  = (2 + (64) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() throw() { return 1.08420217248550443401e-19L; }

      static constexpr long double
      round_error() throw() { return 0.5L; }

      static constexpr int min_exponent = (-16381);
      static constexpr int min_exponent10 = (-4931);
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() throw() { return __builtin_huge_vall (); }

      static constexpr long double
      quiet_NaN() throw() { return __builtin_nanl (""); }

      static constexpr long double
      signaling_NaN() throw() { return __builtin_nansl (""); }

      static constexpr long double
      denorm_min() throw() { return 3.64519953188247460253e-4951L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };






}
# 43 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3






# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 1 3
# 59 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 3
# 59 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 3




# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 1 3
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   if (true)
     {
       for (; __first != __last; ++__first, ++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   if (false)
     {
       std::_Destroy(__result, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 107 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
     && __is_trivial(_ValueType2))>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 164 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill<__is_trivial(_ValueType)>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { std::fill_n(__first, __n, __x); }
    };
# 218 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill_n<__is_trivial(_ValueType)>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   for (; __first != __last; ++__first, ++__cur)
     __alloc.construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__result, __cur, __alloc);
                          ;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __cur != __last; ++__cur)
     __alloc.construct(std::__addressof(*__cur), __x);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __n > 0; --__n, ++__cur)
     __alloc.construct(std::__addressof(*__cur), __x);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill_n(__first, __n, __x); }
# 332 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
                          ;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      if (true)
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      if (false)
 {
   std::_Destroy(__first2, __mid2, __alloc);
                          ;
 }
    }





  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
                              ;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill_n(__first, __n, _ValueType());
 }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_1<__is_trivial(_ValueType)>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline void
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_n_1<__is_trivial(_ValueType)>::
 __uninit_default_n(__first, __n);
    }

 template<typename _Tp, typename _Allocator>
   inline auto
   _Construct_default_a_impl(_Tp* __ptr, _Allocator& __alloc, void*)
   -> decltype(__alloc.construct(__ptr))
   { return __alloc.construct(__ptr); }

  template<typename _Tp, typename _Allocator>
   inline void
   _Construct_default_a_impl(_Tp* __ptr, _Allocator& __alloc, ...)
   { _Construct(__ptr); }

  template<typename _Tp, typename _Allocator>
   inline void
   _Construct_default_a(_Tp* __ptr, _Allocator& __alloc)
   { _Construct_default_a_impl(__ptr, __alloc, nullptr); }




  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __cur != __last; ++__cur)
     _Construct_default_a(std::__addressof(*__cur), __alloc);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   for (; __n > 0; --__n, ++__cur)
     _Construct_default_a(std::__addressof(*__cur), __alloc);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
                          ;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { std::__uninitialized_default_n(__first, __n); }


  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   for (; __n > 0; --__n, ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__result, __cur);
                          ;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }
# 644 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }



}
# 64 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 1 3
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 typename _Tp_alloc_type::pointer _M_start;
 typename _Tp_alloc_type::pointer _M_finish;
 typename _Tp_alloc_type::pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }

 _Vector_impl(_Tp_alloc_type const& __a)
 : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }


      _Vector_base(_Vector_base&& __x)
      : _M_impl(__x._M_get_Tp_allocator())
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = 0;
 __x._M_impl._M_finish = 0;
 __x._M_impl._M_end_of_storage = 0;
      }


      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      typename _Tp_alloc_type::pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
      {
 if (__p)
   _M_impl.deallocate(__p, __n);
      }
    };
# 179 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;



      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type::pointer pointer;
      typedef typename _Tp_alloc_type::const_pointer const_pointer;
      typedef typename _Tp_alloc_type::reference reference;
      typedef typename _Tp_alloc_type::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:





      vector()
      : _Base() { }





      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }
# 236 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      explicit
      vector(size_type __n)
      : _Base(__n)
      { _M_default_initialize(__n); }
# 249 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 278 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(), __x._M_get_Tp_allocator())
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 294 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector(vector&& __x)
      : _Base(std::move(__x)) { }
# 308 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 333 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _InputIterator>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }







      ~vector()
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 361 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 372 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector&
      operator=(vector&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 393 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }
# 411 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 427 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }
# 448 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      assign(initializer_list<value_type> __l)
      { this->assign(__l.begin(), __l.end()); }



      using _Base::get_allocator;







      iterator
      begin()
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end()
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const
      { return const_iterator(this->_M_impl._M_start); }






      const_iterator
      cend() const
      { return const_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crbegin() const
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const
      { return const_reverse_iterator(begin()); }




      size_type
      size() const
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const
      { return _M_get_Tp_allocator().max_size(); }
# 588 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 608 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 640 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      shrink_to_fit()
      { std::__shrink_to_fit<vector>::_S_do_it(*this); }






      size_type
      capacity() const
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const
      { return begin() == end(); }
# 679 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 694 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      reference
      operator[](size_type __n)
      { return *(this->_M_impl._M_start + __n); }
# 709 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("vector::_M_range_check"));
      }

    public:
# 734 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 752 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      { return *(end() - 1); }





      const_reference
      back() const
      { return *(end() - 1); }
# 799 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      _Tp*



      data()
      { return std::__addressof(front()); }


      const _Tp*



      data() const
      { return std::__addressof(front()); }
# 825 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     this->_M_impl.construct(this->_M_impl._M_finish, __x);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(end(), __x);
      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>
        void
        emplace_back(_Args&&... __args);
# 856 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      pop_back()
      {
 --this->_M_impl._M_finish;
 this->_M_impl.destroy(this->_M_impl._M_finish);
      }
# 876 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename... _Args>
        iterator
        emplace(iterator __position, _Args&&... __args);
# 892 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, const value_type& __x);
# 907 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 924 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      insert(iterator __position, initializer_list<value_type> __l)
      { this->insert(__position, __l.begin(), __l.end()); }
# 942 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      insert(iterator __position, size_type __n, const value_type& __x)
      { _M_fill_insert(__position, __n, __x); }
# 960 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_insert_dispatch(__position, __first, __last, _Integral());
 }
# 985 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      erase(iterator __position);
# 1006 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1018 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      void
      swap(vector& __x)
      {
 std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 std::swap(this->_M_impl._M_end_of_storage,
    __x._M_impl._M_end_of_storage);



 std::__alloc_swap<_Tp_alloc_type>::_S_do_it(_M_get_Tp_allocator(),
          __x._M_get_Tp_allocator());
      }







      void
      clear()
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   if (true)
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   if (false)
     {
       _M_deallocate(__result, __n);
                              ;
     }
 }
# 1073 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
          _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }



      void
      _M_default_initialize(size_type __n)
      {
 std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
      _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }
# 1147 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1187 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_default_append(size_type __n);







      template<typename... _Args>
        void
        _M_insert_aux(iterator __position, _Args&&... __args);



      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos)
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }
    };
# 1271 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1288 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 65 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 1 3
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() : _M_p(0), _M_mask(0) { }

    operator bool() const
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x)
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x)
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip()
    { *_M_p ^= _M_mask; }
  };

  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename _Alloc::template rebind<_Bit_type>::other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type* _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator()
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }


      _Bvector_base(_Bvector_base&& __x)
      : _M_impl(__x._M_get_Bit_allocator())
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = _Bit_iterator();
 __x._M_impl._M_finish = _Bit_iterator();
 __x._M_impl._M_end_of_storage = 0;
      }


      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_type*
      _M_allocate(size_t __n)
      { return _M_impl.allocate((__n + int(_S_word_bit) - 1)
    / int(_S_word_bit)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   _M_impl.deallocate(_M_impl._M_start._M_p,
        _M_impl._M_end_of_storage - _M_impl._M_start._M_p);
      }
    };


}




namespace std __attribute__ ((__visibility__ ("default")))
{
# 478 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;


    template<typename> friend class hash;


  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()
    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }

    explicit
    vector(size_type __n, const bool& __value = bool(),
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_of_storage,
  __value ? ~0 : 0);
    }

    vector(const vector& __x)
    : _Base(__x._M_get_Bit_allocator())
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }


    vector(vector&& __x)
    : _Base(std::move(__x)) { }

    vector(initializer_list<bool> __l,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize_range(__l.begin(), __l.end(),
     random_access_iterator_tag());
    }


    template<typename _InputIterator>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_initialize_dispatch(__first, __last, _Integral());
      }

    ~vector() { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }


    vector&
    operator=(vector&& __x)
    {


      this->clear();
      this->swap(__x);
      return *this;
    }

    vector&
    operator=(initializer_list<bool> __l)
    {
      this->assign (__l.begin(), __l.end());
      return *this;
    }






    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }

    template<typename _InputIterator>
      void
      assign(_InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_assign_dispatch(__first, __last, _Integral());
      }


    void
    assign(initializer_list<bool> __l)
    { this->assign(__l.begin(), __l.end()); }


    iterator
    begin()
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const
    { return this->_M_impl._M_start; }

    iterator
    end()
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin()
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend()
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const
    { return const_reverse_iterator(begin()); }


    const_iterator
    cbegin() const
    { return this->_M_impl._M_start; }

    const_iterator
    cend() const
    { return this->_M_impl._M_finish; }

    const_reverse_iterator
    crbegin() const
    { return const_reverse_iterator(end()); }

    const_reverse_iterator
    crend() const
    { return const_reverse_iterator(begin()); }


    size_type
    size() const
    { return size_type(end() - begin()); }

    size_type
    max_size() const
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize = _M_get_Bit_allocator().max_size();
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const
    { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)
         - begin()); }

    bool
    empty() const
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
        __throw_out_of_range(("vector<bool>::_M_range_check"));
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n);

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x)
    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);



      std::__alloc_swap<typename _Base::_Bit_alloc_type>::
 _S_do_it(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y)
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator
    insert(iterator __position, const bool& __x = bool())
    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position, __x);
      return begin() + __n;
    }

    template<typename _InputIterator>
      void
      insert(iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_insert_dispatch(__position, __first, __last, _Integral());
      }

    void
    insert(iterator __position, size_type __n, const bool& __x)
    { _M_fill_insert(__position, __n, __x); }


    void insert(iterator __p, initializer_list<bool> __l)
    { this->insert(__p, __l.begin(), __l.end()); }


    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator
    erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

    iterator
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }


    void
    shrink_to_fit()
    { std::__shrink_to_fit<vector>::_S_do_it(*this); }


    void
    flip()
    {
      for (_Bit_type * __p = this->_M_impl._M_start._M_p;
    __p != this->_M_impl._M_end_of_storage; ++__p)
        *__p = ~*__p;
    }

    void
    clear()
    { _M_erase_at_end(begin()); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = (__q
      + ((__n + int(_S_word_bit) - 1)
         / int(_S_word_bit)));
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }





    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }
  };


}





namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>& __b) const;
    };


}
# 66 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 1 3
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
   std::make_move_iterator(this->_M_impl._M_start),
   std::make_move_iterator(this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     this->_M_impl.construct(this->_M_impl._M_finish,
        std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(end(), std::forward<_Args>(__args)...);
      }


  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    insert(iterator __position, const value_type& __x)
    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   this->_M_impl.construct(this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {

   if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     {
       _Tp __x_copy = __x;
       _M_insert_aux(__position, std::move(__x_copy));
     }
   else

     _M_insert_aux(__position, __x);
 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      this->_M_impl.destroy(this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp.swap(*this);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
     __n - size(), __val,
     _M_get_Tp_allocator());
   this->_M_impl._M_finish += __n - size();
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename vector<_Tp, _Alloc>::iterator
      vector<_Tp, _Alloc>::
      emplace(iterator __position, _Args&&... __args)
      {
 const size_type __n = __position - begin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
     && __position == end())
   {
     this->_M_impl.construct(this->_M_impl._M_finish,
        std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(__position, std::forward<_Args>(__args)...);
 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Args&&... __args)






    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   this->_M_impl.construct(this->_M_impl._M_finish,
      std::move(*(this->_M_impl._M_finish - 1)));

   ++this->_M_impl._M_finish;



   std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1);





   *__position = _Tp(std::forward<_Args>(__args)...);

 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   if (true)
     {




       this->_M_impl.construct(__new_start + __elems_before,

          std::forward<_Args>(__args)...);



       __new_finish = 0;

       __new_finish =
  std::__uninitialized_move_a(this->_M_impl._M_start,
         __position.base(), __new_start,
         _M_get_Tp_allocator());
       ++__new_finish;

       __new_finish =
  std::__uninitialized_move_a(__position.base(),
         this->_M_impl._M_finish,
         __new_finish,
         _M_get_Tp_allocator());
     }
          if (false)
     {
       if (!__new_finish)
  this->_M_impl.destroy(__new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
                              ;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish);

    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n - __elems_after;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       if (true)
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = 0;

    __new_finish =
      std::__uninitialized_move_a(this->_M_impl._M_start,
      __position.base(),
      __new_start,
      _M_get_Tp_allocator());
    __new_finish += __n;

    __new_finish =
      std::__uninitialized_move_a(__position.base(),
      this->_M_impl._M_finish,
      __new_finish,
      _M_get_Tp_allocator());
  }
       if (false)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
                           ;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       std::__uninitialized_default_n_a(this->_M_impl._M_finish,
            __n, _M_get_Tp_allocator());
       this->_M_impl._M_finish += __n;
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       const size_type __old_size = this->size();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       if (true)
  {
    __new_finish =
      std::__uninitialized_move_a(this->_M_impl._M_start,
      this->_M_impl._M_finish,
      __new_start,
      _M_get_Tp_allocator());
    std::__uninitialized_default_n_a(__new_finish, __n,
         _M_get_Tp_allocator());
    __new_finish += __n;
  }
       if (false)
  {
    std::_Destroy(__new_start, __new_finish,
    _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
                           ;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish);

      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  if (true)
    {
      __new_finish =
        std::__uninitialized_move_a(this->_M_impl._M_start,
        __position.base(),
        __new_start,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_copy_a(__first, __last,
        __new_finish,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_move_a(__position.base(),
        this->_M_impl._M_finish,
        __new_finish,
        _M_get_Tp_allocator());
    }
  if (false)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
                             ;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }




  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   _Bit_type* __q = this->_M_allocate(__n);
   this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),
          iterator(__q, 0));
   this->_M_deallocate();
   this->_M_impl._M_start = iterator(__q, 0);
   this->_M_impl._M_end_of_storage = (__q + (__n + int(_S_word_bit) - 1)
          / int(_S_word_bit));
 }
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_type * __q = this->_M_allocate(__len);
  iterator __i = _M_copy_aligned(begin(), __position,
            iterator(__q, 0));
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = (__q
         + ((__len
             + int(_S_word_bit) - 1)
            / int(_S_word_bit)));
  this->_M_impl._M_start = iterator(__q, 0);
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }


}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const
    {
      size_t __hash = 0;
      using std::_S_word_bit;
      using std::_Bit_type;

      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}
# 70 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/vector" 2 3
# 35 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __g);






  namespace __detail
  {


    template<typename _UIntType, size_t __w,
      bool = __w < static_cast<size_t>
     (std::numeric_limits<_UIntType>::digits)>
      struct _Shift
      { static const _UIntType __value = 0; };

    template<typename _UIntType, size_t __w>
      struct _Shift<_UIntType, __w, true>
      { static const _UIntType __value = _UIntType(1) << __w; };

    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool>
      struct _Mod;



    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
      inline _Tp
      __mod(_Tp __x)
      { return _Mod<_Tp, __m, __a, __c, __m == 0>::__calc(__x); }





    template<typename _Engine, typename _DInputType>
      struct _Adaptor
      {

      public:
 _Adaptor(_Engine& __g)
 : _M_g(__g) { }

 _DInputType
 min() const
 { return _DInputType(0); }

 _DInputType
 max() const
 { return _DInputType(1); }






 _DInputType
 operator()()
 {
   return std::generate_canonical<_DInputType,
                             std::numeric_limits<_DInputType>::digits,
                             _Engine>(_M_g);
 }

      private:
 _Engine& _M_g;
      };


  }
# 169 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    class linear_congruential_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(__m == 0u || (__a < __m && __c < __m),
      "template argument substituting __m out of bounds");



      static_assert(__m % __a < __m / __a,
      "sorry, not implemented yet: try a smaller 'a' constant");

    public:

      typedef _UIntType result_type;


      static constexpr result_type multiplier = __a;

      static constexpr result_type increment = __c;

      static constexpr result_type modulus = __m;
      static constexpr result_type default_seed = 1u;
# 201 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      explicit
      linear_congruential_engine(result_type __s = default_seed)
      { seed(__s); }







      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, linear_congruential_engine>::value>
        ::type>
        explicit
        linear_congruential_engine(_Sseq& __q)
        { seed(__q); }







      void
      seed(result_type __s = default_seed);
# 234 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _Sseq>
        typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);







      static constexpr result_type
      min()
      { return __c == 0u ? 1u : 0u; }




      static constexpr result_type
      max()
      { return __m - 1u; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()()
      {
 _M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
 return _M_x;
      }
# 286 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const linear_congruential_engine& __lhs,
   const linear_congruential_engine& __rhs)
      { return __lhs._M_x == __rhs._M_x; }
# 299 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::linear_congruential_engine<_UIntType1,
     __a1, __c1, __m1>&);
# 319 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::linear_congruential_engine<_UIntType1, __a1,
     __c1, __m1>&);

    private:
      _UIntType _M_x;
    };
# 341 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    inline bool
    operator!=(const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __lhs,
        const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __rhs)
    { return !(__lhs == __rhs); }
# 375 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    class mersenne_twister_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(1u <= __m && __m <= __n,
      "template argument substituting __m out of bounds");
      static_assert(__r <= __w, "template argument substituting "
      "__r out of bound");
      static_assert(__u <= __w, "template argument substituting "
      "__u out of bound");
      static_assert(__s <= __w, "template argument substituting "
      "__s out of bound");
      static_assert(__t <= __w, "template argument substituting "
      "__t out of bound");
      static_assert(__l <= __w, "template argument substituting "
      "__l out of bound");
      static_assert(__w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bound");
      static_assert(__a <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __a out of bound");
      static_assert(__b <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __b out of bound");
      static_assert(__c <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __c out of bound");
      static_assert(__d <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __d out of bound");
      static_assert(__f <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __f out of bound");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t state_size = __n;
      static constexpr size_t shift_size = __m;
      static constexpr size_t mask_bits = __r;
      static constexpr result_type xor_mask = __a;
      static constexpr size_t tempering_u = __u;
      static constexpr result_type tempering_d = __d;
      static constexpr size_t tempering_s = __s;
      static constexpr result_type tempering_b = __b;
      static constexpr size_t tempering_t = __t;
      static constexpr result_type tempering_c = __c;
      static constexpr size_t tempering_l = __l;
      static constexpr result_type initialization_multiplier = __f;
      static constexpr result_type default_seed = 5489u;


      explicit
      mersenne_twister_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, mersenne_twister_engine>::value>
        ::type>
        explicit
        mersenne_twister_engine(_Sseq& __q)
        { seed(__q); }

      void
      seed(result_type __sd = default_seed);

      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);




      static constexpr result_type
      min()
      { return 0; };




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }

      result_type
      operator()();
# 493 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const mersenne_twister_engine& __lhs,
   const mersenne_twister_engine& __rhs)
      { return std::equal(__lhs._M_x, __lhs._M_x + state_size, __rhs._M_x); }
# 510 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::mersenne_twister_engine<_UIntType1, __w1, __n1,
     __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>&);
# 536 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::mersenne_twister_engine<_UIntType1, __w1, __n1, __m1,
     __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>&);

    private:
      _UIntType _M_x[state_size];
      size_t _M_p;
    };
# 567 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    inline bool
    operator!=(const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __lhs,
        const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __rhs)
    { return !(__lhs == __rhs); }
# 599 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    class subtract_with_carry_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __s && __s < __r,
      "template argument substituting __s out of bounds");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t short_lag = __s;
      static constexpr size_t long_lag = __r;
      static constexpr result_type default_seed = 19780503u;





      explicit
      subtract_with_carry_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, subtract_with_carry_engine>::value>
        ::type>
        explicit
        subtract_with_carry_engine(_Sseq& __q)
        { seed(__q); }
# 652 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      void
      seed(result_type __sd = default_seed);





      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);





      static constexpr result_type
      min()
      { return 0; }





      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 707 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const subtract_with_carry_engine& __lhs,
   const subtract_with_carry_engine& __rhs)
      { return std::equal(__lhs._M_x, __lhs._M_x + long_lag, __rhs._M_x); }
# 724 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>&);
# 743 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>&);

    private:
      _UIntType _M_x[long_lag];
      _UIntType _M_carry;
      size_t _M_p;
    };
# 768 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    inline bool
    operator!=(const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __lhs,
        const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __rhs)
    { return !(__lhs == __rhs); }
# 783 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    class discard_block_engine
    {
      static_assert(1 <= __r && __r <= __p,
      "template argument substituting __r out of bounds");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;


      static constexpr size_t block_size = __p;
      static constexpr size_t used_block = __r;






      discard_block_engine()
      : _M_b(), _M_n(0) { }







      explicit
      discard_block_engine(const _RandomNumberEngine& __rne)
      : _M_b(__rne), _M_n(0) { }







      explicit
      discard_block_engine(_RandomNumberEngine&& __rne)
      : _M_b(std::move(__rne)), _M_n(0) { }







      explicit
      discard_block_engine(result_type __s)
      : _M_b(__s), _M_n(0) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, discard_block_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        discard_block_engine(_Sseq& __q)
 : _M_b(__q), _M_n(0)
        { }





      void
      seed()
      {
 _M_b.seed();
 _M_n = 0;
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_n = 0;
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_n = 0;
 }





      const _RandomNumberEngine&
      base() const
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 933 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const discard_block_engine& __lhs,
   const discard_block_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b && __lhs._M_n == __rhs._M_n; }
# 949 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>&);
# 967 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>&);

    private:
      _RandomNumberEngine _M_b;
      size_t _M_n;
    };
# 990 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    inline bool
    operator!=(const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __lhs,
        const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __rhs)
    { return !(__lhs == __rhs); }






  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    class independent_bits_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;






      independent_bits_engine()
      : _M_b() { }







      explicit
      independent_bits_engine(const _RandomNumberEngine& __rne)
      : _M_b(__rne) { }







      explicit
      independent_bits_engine(_RandomNumberEngine&& __rne)
      : _M_b(std::move(__rne)) { }







      explicit
      independent_bits_engine(result_type __s)
      : _M_b(__s) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, independent_bits_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
               ::type>
        explicit
        independent_bits_engine(_Sseq& __q)
        : _M_b(__q)
        { }





      void
      seed()
      { _M_b.seed(); }





      void
      seed(result_type __s)
      { _M_b.seed(__s); }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        { _M_b.seed(__q); }





      const _RandomNumberEngine&
      base() const
      { return _M_b; }




      static constexpr result_type
      min()
      { return 0U; }




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1143 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const independent_bits_engine& __lhs,
   const independent_bits_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b; }
# 1160 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::independent_bits_engine<_RandomNumberEngine,
     __w, _UIntType>& __x)
 {
   __is >> __x._M_b;
   return __is;
 }

    private:
      _RandomNumberEngine _M_b;
    };
# 1186 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    inline bool
    operator!=(const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __lhs,
        const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __rhs)
    { return !(__lhs == __rhs); }
# 1204 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __w, typename _UIntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::independent_bits_engine<_RandomNumberEngine,
        __w, _UIntType>& __x)
    {
      __os << __x.base();
      return __os;
    }







  template<typename _RandomNumberEngine, size_t __k>
    class shuffle_order_engine
    {
      static_assert(1u <= __k, "template argument substituting "
      "__k out of bound");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;

      static constexpr size_t table_size = __k;






      shuffle_order_engine()
      : _M_b()
      { _M_initialize(); }







      explicit
      shuffle_order_engine(const _RandomNumberEngine& __rne)
      : _M_b(__rne)
      { _M_initialize(); }







      explicit
      shuffle_order_engine(_RandomNumberEngine&& __rne)
      : _M_b(std::move(__rne))
      { _M_initialize(); }







      explicit
      shuffle_order_engine(result_type __s)
      : _M_b(__s)
      { _M_initialize(); }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, shuffle_order_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        shuffle_order_engine(_Sseq& __q)
        : _M_b(__q)
        { _M_initialize(); }





      void
      seed()
      {
 _M_b.seed();
 _M_initialize();
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_initialize();
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_initialize();
 }




      const _RandomNumberEngine&
      base() const
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1372 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      friend bool
      operator==(const shuffle_order_engine& __lhs,
   const shuffle_order_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b; }
# 1388 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::shuffle_order_engine<_RandomNumberEngine1,
     __k1>&);
# 1406 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::shuffle_order_engine<_RandomNumberEngine1, __k1>&);

    private:
      void _M_initialize()
      {
 for (size_t __i = 0; __i < __k; ++__i)
   _M_v[__i] = _M_b();
 _M_y = _M_b();
      }

      _RandomNumberEngine _M_b;
      result_type _M_v[__k];
      result_type _M_y;
    };
# 1436 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __k>
    inline bool
    operator!=(const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __lhs,
        const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __rhs)
    { return !(__lhs == __rhs); }





  typedef linear_congruential_engine<uint_fast32_t, 16807UL, 0UL, 2147483647UL>
  minstd_rand0;




  typedef linear_congruential_engine<uint_fast32_t, 48271UL, 0UL, 2147483647UL>
  minstd_rand;
# 1465 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  typedef mersenne_twister_engine<
    uint_fast32_t,
    32, 624, 397, 31,
    0x9908b0dfUL, 11,
    0xffffffffUL, 7,
    0x9d2c5680UL, 15,
    0xefc60000UL, 18, 1812433253UL> mt19937;




  typedef mersenne_twister_engine<
    uint_fast64_t,
    64, 312, 156, 31,
    0xb5026f5aa96619e9ULL, 29,
    0x5555555555555555ULL, 17,
    0x71d67fffeda60000ULL, 37,
    0xfff7eee000000000ULL, 43,
    6364136223846793005ULL> mt19937_64;

  typedef subtract_with_carry_engine<uint_fast32_t, 24, 10, 24>
    ranlux24_base;

  typedef subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>
    ranlux48_base;

  typedef discard_block_engine<ranlux24_base, 223, 23> ranlux24;

  typedef discard_block_engine<ranlux48_base, 389, 11> ranlux48;

  typedef shuffle_order_engine<minstd_rand0, 256> knuth_b;

  typedef minstd_rand0 default_random_engine;





  class random_device
  {
  public:

    typedef unsigned int result_type;





    explicit
    random_device(const std::string& __token = "/dev/urandom")
    {
      if ((__token != "/dev/urandom" && __token != "/dev/random")
   || !(_M_file = std::fopen(__token.c_str(), "rb")))
 std::__throw_runtime_error(("random_device::" "random_device(const std::string&)"));

    }

    ~random_device()
    { std::fclose(_M_file); }
# 1552 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
    result_type
    min() const
    { return std::numeric_limits<result_type>::min(); }

    result_type
    max() const
    { return std::numeric_limits<result_type>::max(); }

    double
    entropy() const
    { return 0.0; }

    result_type
    operator()()
    {

      result_type __ret;
      std::fread(reinterpret_cast<void*>(&__ret), sizeof(result_type),
   1, _M_file);
      return __ret;



    }


    random_device(const random_device&) = delete;
    void operator=(const random_device&) = delete;

  private:


    FILE* _M_file;



  };
# 1609 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class uniform_int_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef uniform_int_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __a = 0,
     _IntType __b = std::numeric_limits<_IntType>::max())
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _IntType _M_a;
 _IntType _M_b;
      };

    public:



      explicit
      uniform_int_distribution(_IntType __a = 0,
      _IntType __b = std::numeric_limits<_IntType>::max())
      : _M_param(__a, __b)
      { }

      explicit
      uniform_int_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::uniform_int_distribution<_IntType>& __d1,
        const std::uniform_int_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_int_distribution<_IntType>& __d1,
        const std::uniform_int_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 1754 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_int_distribution<_IntType>&);
# 1768 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_int_distribution<_IntType>&);
# 1781 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class uniform_real_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef uniform_real_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

    public:






      explicit
      uniform_real_distribution(_RealType __a = _RealType(0),
    _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      uniform_real_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return (__aurng() * (__p.b() - __p.a())) + __p.a();
 }

    private:
      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::uniform_real_distribution<_IntType>& __d1,
        const std::uniform_real_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_real_distribution<_IntType>& __d1,
        const std::uniform_real_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 1935 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_real_distribution<_RealType>&);
# 1949 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_real_distribution<_RealType>&);
# 1971 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class normal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef normal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __mean = _RealType(0),
     _RealType __stddev = _RealType(1))
 : _M_mean(__mean), _M_stddev(__stddev)
 {
                                                  ;
 }

 _RealType
 mean() const
 { return _M_mean; }

 _RealType
 stddev() const
 { return _M_stddev; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_mean == __p2._M_mean
    && __p1._M_stddev == __p2._M_stddev); }

      private:
 _RealType _M_mean;
 _RealType _M_stddev;
      };

    public:




      explicit
      normal_distribution(result_type __mean = result_type(0),
     result_type __stddev = result_type(1))
      : _M_param(__mean, __stddev), _M_saved_available(false)
      { }

      explicit
      normal_distribution(const param_type& __p)
      : _M_param(__p), _M_saved_available(false)
      { }




      void
      reset()
      { _M_saved_available = false; }




      _RealType
      mean() const
      { return _M_param.mean(); }




      _RealType
      stddev() const
      { return _M_param.stddev(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _RealType1>
 friend bool
        operator==(const std::normal_distribution<_RealType1>& __d1,
     const std::normal_distribution<_RealType1>& __d2);
# 2110 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::normal_distribution<_RealType1>&);
# 2125 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::normal_distribution<_RealType1>&);

    private:
      param_type _M_param;
      result_type _M_saved;
      bool _M_saved_available;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2155 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class lognormal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef lognormal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(0),
     _RealType __s = _RealType(1))
 : _M_m(__m), _M_s(__s)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 s() const
 { return _M_s; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_s == __p2._M_s; }

      private:
 _RealType _M_m;
 _RealType _M_s;
      };

      explicit
      lognormal_distribution(_RealType __m = _RealType(0),
        _RealType __s = _RealType(1))
      : _M_param(__m, __s), _M_nd()
      { }

      explicit
      lognormal_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      s() const
      { return _M_param.s(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        { return std::exp(__p.s() * _M_nd(__urng) + __p.m()); }






      template<typename _RealType1>
        friend bool
        operator==(const std::lognormal_distribution<_RealType1>& __d1,
     const std::lognormal_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_nd == __d2._M_nd); }
# 2286 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::lognormal_distribution<_RealType1>&);
# 2301 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::lognormal_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::lognormal_distribution<_RealType>& __d1,
        const std::lognormal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2331 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class gamma_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef gamma_distribution<_RealType> distribution_type;
 friend class gamma_distribution<_RealType>;

 explicit
 param_type(_RealType __alpha_val = _RealType(1),
     _RealType __beta_val = _RealType(1))
 : _M_alpha(__alpha_val), _M_beta(__beta_val)
 {
                                                 ;
   _M_initialize();
 }

 _RealType
 alpha() const
 { return _M_alpha; }

 _RealType
 beta() const
 { return _M_beta; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_alpha == __p2._M_alpha
    && __p1._M_beta == __p2._M_beta); }

      private:
 void
 _M_initialize();

 _RealType _M_alpha;
 _RealType _M_beta;

 _RealType _M_malpha, _M_a2;
      };

    public:




      explicit
      gamma_distribution(_RealType __alpha_val = _RealType(1),
    _RealType __beta_val = _RealType(1))
      : _M_param(__alpha_val, __beta_val), _M_nd()
      { }

      explicit
      gamma_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      alpha() const
      { return _M_param.alpha(); }




      _RealType
      beta() const
      { return _M_param.beta(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _RealType1>
        friend bool
        operator==(const std::gamma_distribution<_RealType1>& __d1,
     const std::gamma_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_nd == __d2._M_nd); }
# 2479 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::gamma_distribution<_RealType1>&);
# 2493 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::gamma_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




   template<typename _RealType>
    inline bool
     operator!=(const std::gamma_distribution<_RealType>& __d1,
  const std::gamma_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2520 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class chi_squared_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef chi_squared_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      chi_squared_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_gd(__n / 2)
      { }

      explicit
      chi_squared_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.n() / 2)
      { }




      void
      reset()
      { _M_gd.reset(); }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return 2 * _M_gd(__urng); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return 2 * _M_gd(__urng, param_type(__p.n() / 2));
 }






      template<typename _RealType1>
        friend bool
        operator==(const std::chi_squared_distribution<_RealType1>& __d1,
     const std::chi_squared_distribution<_RealType1>& __d2)
        { return __d1.param() == __d2.param() && __d1._M_gd == __d2._M_gd; }
# 2643 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::chi_squared_distribution<_RealType1>&);
# 2658 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::chi_squared_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::chi_squared_distribution<_RealType>& __d1,
        const std::chi_squared_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2685 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class cauchy_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef cauchy_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      cauchy_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      cauchy_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }

      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::cauchy_distribution<_RealType>& __d1,
        const std::cauchy_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::cauchy_distribution<_RealType>& __d1,
        const std::cauchy_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2827 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::cauchy_distribution<_RealType>&);
# 2842 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::cauchy_distribution<_RealType>&);
# 2858 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class fisher_f_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef fisher_f_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(1),
     _RealType __n = _RealType(1))
 : _M_m(__m), _M_n(__n)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_m;
 _RealType _M_n;
      };

      explicit
      fisher_f_distribution(_RealType __m = _RealType(1),
       _RealType __n = _RealType(1))
      : _M_param(__m, __n), _M_gd_x(__m / 2), _M_gd_y(__n / 2)
      { }

      explicit
      fisher_f_distribution(const param_type& __p)
      : _M_param(__p), _M_gd_x(__p.m() / 2), _M_gd_y(__p.n() / 2)
      { }




      void
      reset()
      {
 _M_gd_x.reset();
 _M_gd_y.reset();
      }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return (_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return ((_M_gd_x(__urng, param_type(__p.m() / 2)) * n())
    / (_M_gd_y(__urng, param_type(__p.n() / 2)) * m()));
 }






      template<typename _RealType1>
        friend bool
        operator==(const std::fisher_f_distribution<_RealType1>& __d1,
     const std::fisher_f_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_gd_x == __d2._M_gd_x
    && __d1._M_gd_y == __d2._M_gd_y); }
# 2998 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::fisher_f_distribution<_RealType1>&);
# 3013 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::fisher_f_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd_x, _M_gd_y;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::fisher_f_distribution<_RealType>& __d1,
        const std::fisher_f_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3042 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class student_t_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef student_t_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      student_t_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_nd(), _M_gd(__n / 2, 2)
      { }

      explicit
      student_t_distribution(const param_type& __p)
      : _M_param(__p), _M_nd(), _M_gd(__p.n() / 2, 2)
      { }




      void
      reset()
      {
 _M_nd.reset();
 _M_gd.reset();
      }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng)
        { return _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng)); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;

   const result_type __g = _M_gd(__urng, param_type(__p.n() / 2, 2));
   return _M_nd(__urng) * std::sqrt(__p.n() / __g);
        }






      template<typename _RealType1>
        friend bool
        operator==(const std::student_t_distribution<_RealType1>& __d1,
     const std::student_t_distribution<_RealType1>& __d2)
        { return (__d1.param() == __d2.param()
    && __d1._M_nd == __d2._M_nd && __d1._M_gd == __d2._M_gd); }
# 3171 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::student_t_distribution<_RealType1>&);
# 3186 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::student_t_distribution<_RealType1>&);

    private:
      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::student_t_distribution<_RealType>& __d1,
        const std::student_t_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3222 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  class bernoulli_distribution
  {
  public:

    typedef bool result_type;

    struct param_type
    {
      typedef bernoulli_distribution distribution_type;

      explicit
      param_type(double __p = 0.5)
      : _M_p(__p)
      {
                                                      ;
      }

      double
      p() const
      { return _M_p; }

      friend bool
      operator==(const param_type& __p1, const param_type& __p2)
      { return __p1._M_p == __p2._M_p; }

    private:
      double _M_p;
    };

  public:






    explicit
    bernoulli_distribution(double __p = 0.5)
    : _M_param(__p)
    { }

    explicit
    bernoulli_distribution(const param_type& __p)
    : _M_param(__p)
    { }






    void
    reset() { }




    double
    p() const
    { return _M_param.p(); }




    param_type
    param() const
    { return _M_param; }





    void
    param(const param_type& __param)
    { _M_param = __param; }




    result_type
    min() const
    { return std::numeric_limits<result_type>::min(); }




    result_type
    max() const
    { return std::numeric_limits<result_type>::max(); }




    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng)
      { return this->operator()(__urng, this->param()); }

    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);
 if ((__aurng() - __aurng.min())
      < __p.p() * (__aurng.max() - __aurng.min()))
   return true;
 return false;
      }

  private:
    param_type _M_param;
  };





  inline bool
  operator==(const std::bernoulli_distribution& __d1,
      const std::bernoulli_distribution& __d2)
  { return __d1.param() == __d2.param(); }





  inline bool
  operator!=(const std::bernoulli_distribution& __d1,
      const std::bernoulli_distribution& __d2)
  { return !(__d1 == __d2); }
# 3365 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::bernoulli_distribution&);
# 3379 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::bernoulli_distribution& __x)
    {
      double __p;
      __is >> __p;
      __x.param(bernoulli_distribution::param_type(__p));
      return __is;
    }
# 3398 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef binomial_distribution<_IntType> distribution_type;
 friend class binomial_distribution<_IntType>;

 explicit
 param_type(_IntType __t = _IntType(1), double __p = 0.5)
 : _M_t(__t), _M_p(__p)
 {


                     ;
   _M_initialize();
 }

 _IntType
 t() const
 { return _M_t; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_t == __p2._M_t && __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize();

 _IntType _M_t;
 double _M_p;

 double _M_q;

 double _M_d1, _M_d2, _M_s1, _M_s2, _M_c,
        _M_a1, _M_a123, _M_s, _M_lf, _M_lp1p;

 bool _M_easy;
      };


      explicit
      binomial_distribution(_IntType __t = _IntType(1),
       double __p = 0.5)
      : _M_param(__t, __p), _M_nd()
      { }

      explicit
      binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _IntType
      t() const
      { return _M_param.t(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return _M_param.t(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _IntType1>
 friend bool
        operator==(const std::binomial_distribution<_IntType1>& __d1,
     const std::binomial_distribution<_IntType1>& __d2)

 { return __d1.param() == __d2.param() && __d1._M_nd == __d2._M_nd; }
# 3550 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::binomial_distribution<_IntType1>&);
# 3566 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::binomial_distribution<_IntType1>&);

    private:
      template<typename _UniformRandomNumberGenerator>
 result_type
 _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t);

      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::binomial_distribution<_IntType>& __d1,
        const std::binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 3600 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class geometric_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef geometric_distribution<_IntType> distribution_type;
 friend class geometric_distribution<_IntType>;

 explicit
 param_type(double __p = 0.5)
 : _M_p(__p)
 {

                        ;
   _M_initialize();
 }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize()
 { _M_log_1_p = std::log(1.0 - _M_p); }

 double _M_p;

 double _M_log_1_p;
      };


      explicit
      geometric_distribution(double __p = 0.5)
      : _M_param(__p)
      { }

      explicit
      geometric_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::geometric_distribution<_IntType>& __d1,
        const std::geometric_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::geometric_distribution<_IntType>& __d1,
        const std::geometric_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 3744 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::geometric_distribution<_IntType>&);
# 3759 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::geometric_distribution<_IntType>&);
# 3773 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class negative_binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef negative_binomial_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __k = 1, double __p = 0.5)
 : _M_k(__k), _M_p(__p)
 {
                                                                     ;
 }

 _IntType
 k() const
 { return _M_k; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_k == __p2._M_k && __p1._M_p == __p2._M_p; }

      private:
 _IntType _M_k;
 double _M_p;
      };

      explicit
      negative_binomial_distribution(_IntType __k = 1, double __p = 0.5)
      : _M_param(__k, __p), _M_gd(__k, (1.0 - __p) / __p)
      { }

      explicit
      negative_binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.k(), (1.0 - __p.p()) / __p.p())
      { }




      void
      reset()
      { _M_gd.reset(); }




      _IntType
      k() const
      { return _M_param.k(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng);

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _IntType1>
        friend bool
        operator==(const std::negative_binomial_distribution<_IntType1>& __d1,
     const std::negative_binomial_distribution<_IntType1>& __d2)
        { return __d1.param() == __d2.param() && __d1._M_gd == __d2._M_gd; }
# 3905 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::negative_binomial_distribution<_IntType1>&);
# 3920 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::negative_binomial_distribution<_IntType1>&);

    private:
      param_type _M_param;

      std::gamma_distribution<double> _M_gd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::negative_binomial_distribution<_IntType>& __d1,
        const std::negative_binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 3956 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class poisson_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef poisson_distribution<_IntType> distribution_type;
 friend class poisson_distribution<_IntType>;

 explicit
 param_type(double __mean = 1.0)
 : _M_mean(__mean)
 {
                                       ;
   _M_initialize();
 }

 double
 mean() const
 { return _M_mean; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_mean == __p2._M_mean; }

      private:

 void
 _M_initialize();

 double _M_mean;

 double _M_lm_thr;

 double _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb;

      };


      explicit
      poisson_distribution(double __mean = 1.0)
      : _M_param(__mean), _M_nd()
      { }

      explicit
      poisson_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      double
      mean() const
      { return _M_param.mean(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);






      template<typename _IntType1>
        friend bool
        operator==(const std::poisson_distribution<_IntType1>& __d1,
     const std::poisson_distribution<_IntType1>& __d2)

        { return __d1.param() == __d2.param() && __d1._M_nd == __d2._M_nd; }
# 4092 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::poisson_distribution<_IntType1>&);
# 4107 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::poisson_distribution<_IntType1>&);

    private:
      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::poisson_distribution<_IntType>& __d1,
        const std::poisson_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4144 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class exponential_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef exponential_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __lambda = _RealType(1))
 : _M_lambda(__lambda)
 {
                                                  ;
 }

 _RealType
 lambda() const
 { return _M_lambda; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_lambda == __p2._M_lambda; }

      private:
 _RealType _M_lambda;
      };

    public:




      explicit
      exponential_distribution(const result_type& __lambda = result_type(1))
      : _M_param(__lambda)
      { }

      explicit
      exponential_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      _RealType
      lambda() const
      { return _M_param.lambda(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return -std::log(__aurng()) / __p.lambda();
 }

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::exponential_distribution<_RealType>& __d1,
        const std::exponential_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::exponential_distribution<_RealType>& __d1,
        const std::exponential_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4288 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::exponential_distribution<_RealType>&);
# 4303 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::exponential_distribution<_RealType>&);
# 4318 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class weibull_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef weibull_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(1),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      weibull_distribution(_RealType __a = _RealType(1),
      _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      weibull_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::weibull_distribution<_RealType>& __d1,
        const std::weibull_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::weibull_distribution<_RealType>& __d1,
        const std::weibull_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4463 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::weibull_distribution<_RealType>&);
# 4478 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::weibull_distribution<_RealType>&);
# 4493 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class extreme_value_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef extreme_value_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      extreme_value_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      extreme_value_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::min(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::extreme_value_distribution<_RealType>& __d1,
        const std::extreme_value_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::extreme_value_distribution<_RealType>& __d1,
        const std::extreme_value_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4638 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::extreme_value_distribution<_RealType>&);
# 4653 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::extreme_value_distribution<_RealType>&);
# 4665 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _IntType = int>
    class discrete_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef discrete_distribution<_IntType> distribution_type;
 friend class discrete_distribution<_IntType>;

 param_type()
 : _M_prob(), _M_cp()
 { }

 template<typename _InputIterator>
   param_type(_InputIterator __wbegin,
       _InputIterator __wend)
   : _M_prob(__wbegin, __wend), _M_cp()
   { _M_initialize(); }

 param_type(initializer_list<double> __wil)
 : _M_prob(__wil.begin(), __wil.end()), _M_cp()
 { _M_initialize(); }

 template<typename _Func>
   param_type(size_t __nw, double __xmin, double __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<double>
 probabilities() const
 { return _M_prob.empty() ? std::vector<double>(1, 1.0) : _M_prob; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_prob == __p2._M_prob; }

      private:
 void
 _M_initialize();

 std::vector<double> _M_prob;
 std::vector<double> _M_cp;
      };

      discrete_distribution()
      : _M_param()
      { }

      template<typename _InputIterator>
 discrete_distribution(_InputIterator __wbegin,
         _InputIterator __wend)
 : _M_param(__wbegin, __wend)
 { }

      discrete_distribution(initializer_list<double> __wl)
      : _M_param(__wl)
      { }

      template<typename _Func>
 discrete_distribution(size_t __nw, double __xmin, double __xmax,
         _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      discrete_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<double>
      probabilities() const
      {
 return _M_param._M_prob.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_prob;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      {
 return _M_param._M_prob.empty()
   ? result_type(0) : result_type(_M_param._M_prob.size() - 1);
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);
# 4815 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::discrete_distribution<_IntType1>&);
# 4831 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::discrete_distribution<_IntType1>&);

    private:
      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator==(const std::discrete_distribution<_IntType>& __d1,
        const std::discrete_distribution<_IntType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _IntType>
    inline bool
    operator!=(const std::discrete_distribution<_IntType>& __d1,
        const std::discrete_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4867 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class piecewise_constant_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_constant_distribution<_RealType> distribution_type;
 friend class piecewise_constant_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bi, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(1, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_int == __p2._M_int && __p1._M_den == __p2._M_den; }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
      };

      explicit
      piecewise_constant_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_constant_distribution(_InputIteratorB __bfirst,
     _InputIteratorB __bend,
     _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_constant_distribution(initializer_list<_RealType> __bl,
     _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_constant_distribution(size_t __nw,
     _RealType __xmin, _RealType __xmax,
     _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_constant_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }




      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);
# 5054 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::piecewise_constant_distribution<_RealType1>&);
# 5070 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::piecewise_constant_distribution<_RealType1>&);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::piecewise_constant_distribution<_RealType>& __d1,
        const std::piecewise_constant_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_constant_distribution<_RealType>& __d1,
        const std::piecewise_constant_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5106 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  template<typename _RealType = double>
    class piecewise_linear_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_linear_distribution<_RealType> distribution_type;
 friend class piecewise_linear_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp(), _M_m()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bl, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(2, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_int == __p2._M_int
    && __p1._M_den == __p2._M_den); }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
 std::vector<double> _M_m;
      };

      explicit
      piecewise_linear_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_linear_distribution(_InputIteratorB __bfirst,
          _InputIteratorB __bend,
          _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_linear_distribution(initializer_list<_RealType> __bl,
          _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_linear_distribution(size_t __nw,
          _RealType __xmin, _RealType __xmax,
          _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_linear_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }





      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(2, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, this->param()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);
# 5296 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::piecewise_linear_distribution<_RealType1>&);
# 5312 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::piecewise_linear_distribution<_RealType1>&);

    private:
      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator==(const std::piecewise_linear_distribution<_RealType>& __d1,
        const std::piecewise_linear_distribution<_RealType>& __d2)
    { return __d1.param() == __d2.param(); }





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_linear_distribution<_RealType>& __d1,
        const std::piecewise_linear_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5356 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.h" 3
  class seed_seq
  {

  public:

    typedef uint_least32_t result_type;


    seed_seq()
    : _M_v()
    { }

    template<typename _IntType>
      seed_seq(std::initializer_list<_IntType> il);

    template<typename _InputIterator>
      seed_seq(_InputIterator __begin, _InputIterator __end);


    template<typename _RandomAccessIterator>
      void
      generate(_RandomAccessIterator __begin, _RandomAccessIterator __end);


    size_t size() const
    { return _M_v.size(); }

    template<typename OutputIterator>
      void
      param(OutputIterator __dest) const
      { std::copy(_M_v.begin(), _M_v.end(), __dest); }

  private:

    std::vector<result_type> _M_v;
  };






}
# 50 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 1 3
# 33 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 1 3
# 58 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 3
# 58 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 3



# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 1 3
# 66 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 81 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)
    {





                                                     ;

      for (; __first != __last; ++__first)
 {
   *__first = __value;
   ++__value;
 }
    }


}



namespace std __attribute__ ((__visibility__ ("default")))
{
# 119 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __init + *__first;
      return __init;
    }
# 145 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _Tp, typename _BinaryOperation>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,
        _BinaryOperation __binary_op)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __binary_op(__init, *__first);
      return __init;
    }
# 173 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator1, typename _InputIterator2, typename _Tp>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __init + (*__first1 * *__first2);
      return __init;
    }
# 204 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator1, typename _InputIterator2, typename _Tp,
    typename _BinaryOperation1, typename _BinaryOperation2>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init,
    _BinaryOperation1 __binary_op1,
    _BinaryOperation2 __binary_op2)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __binary_op1(__init, __binary_op2(*__first1, *__first2));
      return __init;
    }
# 236 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __value + *__first;
   *++__result = __value;
 }
      return ++__result;
    }
# 276 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __binary_op(__value, *__first);
   *++__result = __value;
 }
      return ++__result;
    }
# 316 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    adjacent_difference(_InputIterator __first,
   _InputIterator __last, _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __tmp - __value;
   __value = std::move(__tmp);
 }
      return ++__result;
    }
# 357 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    adjacent_difference(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __binary_op(__tmp, __value);
   __value = std::move(__tmp);
 }
      return ++__result;
    }


}
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/numeric" 2 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  namespace __detail
  {
# 54 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool>
      struct _Mod
      {
 static _Tp
 __calc(_Tp __x)
 {
   if (__a == 1)
     __x %= __m;
   else
     {
       static const _Tp __q = __m / __a;
       static const _Tp __r = __m % __a;

       _Tp __t1 = __a * (__x % __q);
       _Tp __t2 = __r * (__x / __q);
       if (__t1 >= __t2)
  __x = __t1 - __t2;
       else
  __x = __m - __t2 + __t1;
     }

   if (__c != 0)
     {
       const _Tp __d = __m - __x;
       if (__d > __c)
  __x += __c;
       else
  __x = __c - __d;
     }
   return __x;
 }
      };



    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>
      struct _Mod<_Tp, __m, __a, __c, true>
      {
 static _Tp
 __calc(_Tp __x)
 { return __a * __x + __c; }
      };

    template<typename _InputIterator, typename _OutputIterator,
      typename _UnaryOperation>
      _OutputIterator
      __transform(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _UnaryOperation __unary_op)
      {
 for (; __first != __last; ++__first, ++__result)
   *__result = __unary_op(*__first);
 return __result;
      }


  }



  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::multiplier;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::increment;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::modulus;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::default_seed;





  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    void
    linear_congruential_engine<_UIntType, __a, __c, __m>::
    seed(result_type __s)
    {
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
   && (__detail::__mod<_UIntType, __m>(__s) == 0))
 _M_x = 1;
      else
 _M_x = __detail::__mod<_UIntType, __m>(__s);
    }




  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      linear_congruential_engine<_UIntType, __a, __c, __m>::
      seed(_Sseq& __q)
      {
 const _UIntType __k0 = __m == 0 ? std::numeric_limits<_UIntType>::digits
                                 : std::__lg(__m);
 const _UIntType __k = (__k0 + 31) / 32;
 uint_least32_t __arr[__k + 3];
 __q.generate(__arr + 0, __arr + __k + 3);
 _UIntType __factor = 1u;
 _UIntType __sum = 0u;
 for (size_t __j = 0; __j < __k; ++__j)
   {
     __sum += __arr[__j + 3] * __factor;
     __factor *= __detail::_Shift<_UIntType, 32>::__value;
   }
 seed(__sum);
      }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const linear_congruential_engine<_UIntType,
      __a, __c, __m>& __lcr)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__os.widen(' '));

      __os << __lcr._M_x;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        linear_congruential_engine<_UIntType, __a, __c, __m>& __lcr)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec);

      __is >> __lcr._M_x;

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::word_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::state_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::shift_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::mask_bits;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::xor_mask;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_u;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_d;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_s;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_b;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_t;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_c;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_l;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
                                              initialization_multiplier;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::default_seed;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
 __detail::_Shift<_UIntType, __w>::__value>(__sd);

      for (size_t __i = 1; __i < state_size; ++__i)
 {
   _UIntType __x = _M_x[__i - 1];
   __x ^= __x >> (__w - 2);
   __x *= __f;
   __x += __detail::__mod<_UIntType, __n>(__i);
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__x);
 }
      _M_p = state_size;
    }

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
         __s, __b, __t, __c, __l, __f>::
      seed(_Sseq& __q)
      {
 const _UIntType __upper_mask = (~_UIntType()) << __r;
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__n * __k];
 __q.generate(__arr + 0, __arr + __n * __k);

 bool __zero = true;
 for (size_t __i = 0; __i < state_size; ++__i)
   {
     _UIntType __factor = 1u;
     _UIntType __sum = 0u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);

     if (__zero)
       {
  if (__i == 0)
    {
      if ((_M_x[0] & __upper_mask) != 0u)
        __zero = false;
    }
  else if (_M_x[__i] != 0u)
    __zero = false;
       }
   }
        if (__zero)
          _M_x[0] = __detail::_Shift<_UIntType, __w - 1>::__value;
      }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    typename
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::result_type
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    operator()()
    {

      if (_M_p >= state_size)
 {
   const _UIntType __upper_mask = (~_UIntType()) << __r;
   const _UIntType __lower_mask = ~__upper_mask;

   for (size_t __k = 0; __k < (__n - __m); ++__k)
     {
       _UIntType __y = ((_M_x[__k] & __upper_mask)
          | (_M_x[__k + 1] & __lower_mask));
       _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
      ^ ((__y & 0x01) ? __a : 0));
     }

   for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
     {
       _UIntType __y = ((_M_x[__k] & __upper_mask)
          | (_M_x[__k + 1] & __lower_mask));
       _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
      ^ ((__y & 0x01) ? __a : 0));
     }

   _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
      | (_M_x[0] & __lower_mask));
   _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
      ^ ((__y & 0x01) ? __a : 0));
   _M_p = 0;
 }


      result_type __z = _M_x[_M_p++];
      __z ^= (__z >> __u) & __d;
      __z ^= (__z << __s) & __b;
      __z ^= (__z << __t) & __c;
      __z ^= (__z >> __l);

      return __z;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __n - 1; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_x[__n - 1];

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __n; ++__i)
 __is >> __x._M_x[__i];

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::word_size;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::short_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::long_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr _UIntType
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::default_seed;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    void
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    seed(result_type __value)
    {
      std::linear_congruential_engine<result_type, 40014u, 0u, 2147483563u>
 __lcg(__value == 0u ? default_seed : __value);

      const size_t __n = (__w + 31) / 32;

      for (size_t __i = 0; __i < long_lag; ++__i)
 {
   _UIntType __sum = 0u;
   _UIntType __factor = 1u;
   for (size_t __j = 0; __j < __n; ++__j)
     {
       __sum += __detail::__mod<uint_least32_t,
         __detail::_Shift<uint_least32_t, 32>::__value>
    (__lcg()) * __factor;
       __factor *= __detail::_Shift<_UIntType, 32>::__value;
     }
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__sum);
 }
      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
      _M_p = 0;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      seed(_Sseq& __q)
      {
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__r * __k];
 __q.generate(__arr + 0, __arr + __r * __k);

 for (size_t __i = 0; __i < long_lag; ++__i)
   {
     _UIntType __sum = 0u;
     _UIntType __factor = 1u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);
   }
 _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
 _M_p = 0;
      }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    typename subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      result_type
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    operator()()
    {

      long __ps = _M_p - short_lag;
      if (__ps < 0)
 __ps += long_lag;




      _UIntType __xi;
      if (_M_x[__ps] >= _M_x[_M_p] + _M_carry)
 {
   __xi = _M_x[__ps] - _M_x[_M_p] - _M_carry;
   _M_carry = 0;
 }
      else
 {
   __xi = (__detail::_Shift<_UIntType, __w>::__value
    - _M_x[_M_p] - _M_carry + _M_x[__ps]);
   _M_carry = 1;
 }
      _M_x[_M_p] = __xi;


      if (++_M_p >= long_lag)
 _M_p = 0;

      return __xi;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const subtract_with_carry_engine<_UIntType,
      __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __r; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_carry;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        subtract_with_carry_engine<_UIntType, __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __r; ++__i)
 __is >> __x._M_x[__i];
      __is >> __x._M_carry;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::block_size;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::used_block;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    typename discard_block_engine<_RandomNumberEngine,
      __p, __r>::result_type
    discard_block_engine<_RandomNumberEngine, __p, __r>::
    operator()()
    {
      if (_M_n >= used_block)
 {
   _M_b.discard(block_size - _M_n);
   _M_n = 0;
 }
      ++_M_n;
      return _M_b();
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discard_block_engine<_RandomNumberEngine,
        __p, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base() << __space << __x._M_n;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discard_block_engine<_RandomNumberEngine, __p, __r>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b >> __x._M_n;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    typename independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
      result_type
    independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
    operator()()
    {
      const long double __r = static_cast<long double>(_M_b.max())
       - static_cast<long double>(_M_b.min()) + 1.0L;
      const result_type __m = std::log(__r) / std::log(2.0L);
      result_type __n, __n0, __y0, __y1, __s0, __s1;
      for (size_t __i = 0; __i < 2; ++__i)
 {
   __n = (__w + __m - 1) / __m + __i;
   __n0 = __n - __w % __n;
   const result_type __w0 = __w / __n;
   const result_type __w1 = __w0 + 1;
   __s0 = result_type(1) << __w0;
   __s1 = result_type(1) << __w1;
   __y0 = __s0 * (__r / __s0);
   __y1 = __s1 * (__r / __s1);
   if (__r - __y0 <= __y0 / __n)
     break;
 }

      result_type __sum = 0;
      for (size_t __k = 0; __k < __n0; ++__k)
 {
   result_type __u;
   do
     __u = _M_b() - _M_b.min();
   while (__u >= __y0);
   __sum = __s0 * __sum + __u % __s0;
 }
      for (size_t __k = __n0; __k < __n; ++__k)
 {
   result_type __u;
   do
     __u = _M_b() - _M_b.min();
   while (__u >= __y1);
   __sum = __s1 * __sum + __u % __s1;
 }
      return __sum;
    }


  template<typename _RandomNumberEngine, size_t __k>
    constexpr size_t
    shuffle_order_engine<_RandomNumberEngine, __k>::table_size;

  template<typename _RandomNumberEngine, size_t __k>
    typename shuffle_order_engine<_RandomNumberEngine, __k>::result_type
    shuffle_order_engine<_RandomNumberEngine, __k>::
    operator()()
    {
      size_t __j = __k * ((_M_y - _M_b.min())
     / (_M_b.max() - _M_b.min() + 1.0L));
      _M_y = _M_v[__j];
      _M_v[__j] = _M_b();

      return _M_y;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base();
      for (size_t __i = 0; __i < __k; ++__i)
 __os << __space << __x._M_v[__i];
      __os << __space << __x._M_y;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b;
      for (size_t __i = 0; __i < __k; ++__i)
 __is >> __x._M_v[__i];
      __is >> __x._M_y;

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 typedef typename std::make_unsigned<typename
   _UniformRandomNumberGenerator::result_type>::type __urngtype;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::conditional<(sizeof(__urngtype)
        > sizeof(__utype)),
   __urngtype, __utype>::type __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {

     const __uctype __uerange = __urange + 1;
     const __uctype __scaling = __urngrange / __uerange;
     const __uctype __past = __uerange * __scaling;
     do
       __ret = __uctype(__urng()) - __urngmin;
     while (__ret >= __past);
     __ret /= __scaling;
   }
 else if (__urngrange < __urange)
   {
# 884 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
     __uctype __tmp;
     do
       {
  const __uctype __uerngrange = __urngrange + 1;
  __tmp = (__uerngrange * operator()
    (__urng, param_type(0, __urange / __uerngrange)));
  __ret = __tmp + (__uctype(__urng()) - __urngmin);
       }
     while (__ret > __urange || __ret < __tmp);
   }
 else
   __ret = __uctype(__urng()) - __urngmin;

 return __ret + __param.a();
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_int_distribution<_IntType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_real_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const bernoulli_distribution& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename geometric_distribution<_IntType>::result_type
      geometric_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {


 const double __naf =
   (1 - std::numeric_limits<double>::epsilon()) / 2;

 const double __thr =
   std::numeric_limits<_IntType>::max() + __naf;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 double __cand;
 do
   __cand = std::floor(std::log(__aurng()) / __param._M_log_1_p);
 while (__cand >= __thr);

 return result_type(__cand + __naf);
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __p;
      __is >> __p;
      __x.param(typename geometric_distribution<_IntType>::param_type(__p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng)
      {
 const double __y = _M_gd(__urng);


 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 typedef typename std::gamma_distribution<result_type>::param_type
   param_type;

 const double __y =
   _M_gd(__urng, param_type(__p.k(), (1.0 - __p.p()) / __p.p()));

 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.k() << __space << __x.p()
    << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _IntType __k;
      double __p;
      __is >> __k >> __p >> __x._M_gd;
      __x.param(typename negative_binomial_distribution<_IntType>::
  param_type(__k, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    poisson_distribution<_IntType>::param_type::
    _M_initialize()
    {

      if (_M_mean >= 12)
 {
   const double __m = std::floor(_M_mean);
   _M_lm_thr = std::log(_M_mean);
   _M_lfm = std::lgamma(__m + 1);
   _M_sm = std::sqrt(__m);

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __dx = std::sqrt(2 * __m * std::log(32 * __m
             / __pi_4));
   _M_d = std::round(std::max(6.0, std::min(__m, __dx)));
   const double __cx = 2 * __m + _M_d;
   _M_scx = std::sqrt(__cx / 2);
   _M_1cx = 1 / __cx;

   _M_c2b = std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx);
   _M_cb = 2 * __cx * std::exp(-_M_d * _M_1cx * (1 + _M_d / 2))
  / _M_d;
 }
      else

 _M_lm_thr = std::exp(-_M_mean);
      }
# 1198 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename poisson_distribution<_IntType>::result_type
      poisson_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 if (__param.mean() >= 12)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __m = std::floor(__param.mean());

     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __c1 = __param._M_sm * __spi_2;
     const double __c2 = __param._M_c2b + __c1;
     const double __c3 = __c2 + 1;
     const double __c4 = __c3 + 1;

     const double __e178 = 1.0129030479320018583185514777512983L;
     const double __c5 = __c4 + __e178;
     const double __c = __param._M_cb + __c5;
     const double __2cx = 2 * (2 * __m + __param._M_d);

     bool __reject = true;
     do
       {
  const double __u = __c * __aurng();
  const double __e = -std::log(__aurng());

  double __w = 0.0;

  if (__u <= __c1)
    {
      const double __n = _M_nd(__urng);
      const double __y = -std::abs(__n) * __param._M_sm - 1;
      __x = std::floor(__y);
      __w = -__n * __n / 2;
      if (__x < -__m)
        continue;
    }
  else if (__u <= __c2)
    {
      const double __n = _M_nd(__urng);
      const double __y = 1 + std::abs(__n) * __param._M_scx;
      __x = std::ceil(__y);
      __w = __y * (2 - __y) * __param._M_1cx;
      if (__x > __param._M_d)
        continue;
    }
  else if (__u <= __c3)


    __x = -1;
  else if (__u <= __c4)
    __x = 0;
  else if (__u <= __c5)
    __x = 1;
  else
    {
      const double __v = -std::log(__aurng());
      const double __y = __param._M_d
         + __v * __2cx / __param._M_d;
      __x = std::ceil(__y);
      __w = -__param._M_d * __param._M_1cx * (1 + __y / 2);
    }

  __reject = (__w - __e - __x * __param._M_lm_thr
       > __param._M_lfm - std::lgamma(__x + __m + 1));

  __reject |= __x + __m >= __thr;

       } while (__reject);

     return result_type(__x + __m + __naf);
   }
 else

   {
     _IntType __x = 0;
     double __prod = 1.0;

     do
       {
  __prod *= __aurng();
  __x += 1;
       }
     while (__prod > __param._M_lm_thr);

     return __x - 1;
   }
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.mean() << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __mean;
      __is >> __mean >> __x._M_nd;
      __x.param(typename poisson_distribution<_IntType>::param_type(__mean));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    binomial_distribution<_IntType>::param_type::
    _M_initialize()
    {
      const double __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;

      _M_easy = true;


      if (_M_t * __p12 >= 8)
 {
   _M_easy = false;
   const double __np = std::floor(_M_t * __p12);
   const double __pa = __np / _M_t;
   const double __1p = 1 - __pa;

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __d1x =
     std::sqrt(__np * __1p * std::log(32 * __np
          / (81 * __pi_4 * __1p)));
   _M_d1 = std::round(std::max(1.0, __d1x));
   const double __d2x =
     std::sqrt(__np * __1p * std::log(32 * _M_t * __1p
          / (__pi_4 * __pa)));
   _M_d2 = std::round(std::max(1.0, __d2x));


   const double __spi_2 = 1.2533141373155002512078826424055226L;
   _M_s1 = std::sqrt(__np * __1p) * (1 + _M_d1 / (4 * __np));
   _M_s2 = std::sqrt(__np * __1p) * (1 + _M_d2 / (4 * _M_t * __1p));
   _M_c = 2 * _M_d1 / __np;
   _M_a1 = std::exp(_M_c) * _M_s1 * __spi_2;
   const double __a12 = _M_a1 + _M_s2 * __spi_2;
   const double __s1s = _M_s1 * _M_s1;
   _M_a123 = __a12 + (std::exp(_M_d1 / (_M_t * __1p))
        * 2 * __s1s / _M_d1
        * std::exp(-_M_d1 * _M_d1 / (2 * __s1s)));
   const double __s2s = _M_s2 * _M_s2;
   _M_s = (_M_a123 + 2 * __s2s / _M_d2
    * std::exp(-_M_d2 * _M_d2 / (2 * __s2s)));
   _M_lf = (std::lgamma(__np + 1)
     + std::lgamma(_M_t - __np + 1));
   _M_lp1p = std::log(__pa / __1p);

   _M_q = -std::log(1 - (__p12 - __pa) / __1p);
 }
      else

 _M_q = -std::log(1 - __p12);
    }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t)
      {
 _IntType __x = 0;
 double __sum = 0.0;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 do
   {
     const double __e = -std::log(__aurng());
     __sum += __e / (__t - __x);
     __x += 1;
   }
 while (__sum <= _M_param._M_q);

 return __x - 1;
      }
# 1430 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 const _IntType __t = __param.t();
 const double __p = __param.p();
 const double __p12 = __p <= 0.5 ? __p : 1.0 - __p;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);


 if (!__param._M_easy)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __np = std::floor(__t * __p12);


     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __a1 = __param._M_a1;
     const double __a12 = __a1 + __param._M_s2 * __spi_2;
     const double __a123 = __param._M_a123;
     const double __s1s = __param._M_s1 * __param._M_s1;
     const double __s2s = __param._M_s2 * __param._M_s2;

     bool __reject;
     do
       {
  const double __u = __param._M_s * __aurng();

  double __v;

  if (__u <= __a1)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s1 * std::abs(__n);
      __reject = __y >= __param._M_d1;
      if (!__reject)
        {
   const double __e = -std::log(__aurng());
   __x = std::floor(__y);
   __v = -__e - __n * __n / 2 + __param._M_c;
        }
    }
  else if (__u <= __a12)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s2 * std::abs(__n);
      __reject = __y >= __param._M_d2;
      if (!__reject)
        {
   const double __e = -std::log(__aurng());
   __x = std::floor(-__y);
   __v = -__e - __n * __n / 2;
        }
    }
  else if (__u <= __a123)
    {
      const double __e1 = -std::log(__aurng());
      const double __e2 = -std::log(__aurng());

      const double __y = __param._M_d1
         + 2 * __s1s * __e1 / __param._M_d1;
      __x = std::floor(__y);
      __v = (-__e2 + __param._M_d1 * (1 / (__t - __np)
          -__y / (2 * __s1s)));
      __reject = false;
    }
  else
    {
      const double __e1 = -std::log(__aurng());
      const double __e2 = -std::log(__aurng());

      const double __y = __param._M_d2
         + 2 * __s2s * __e1 / __param._M_d2;
      __x = std::floor(-__y);
      __v = -__e2 - __param._M_d2 * __y / (2 * __s2s);
      __reject = false;
    }

  __reject = __reject || __x < -__np || __x > __t - __np;
  if (!__reject)
    {
      const double __lfx =
        std::lgamma(__np + __x + 1)
        + std::lgamma(__t - (__np + __x) + 1);
      __reject = __v > __param._M_lf - __lfx
        + __x * __param._M_lp1p;
    }

  __reject |= __x + __np >= __thr;
       }
     while (__reject);

     __x += __np + __naf;

     const _IntType __z = _M_waiting(__urng, __t - _IntType(__x));
     __ret = _IntType(__x) + __z;
   }
 else

   __ret = _M_waiting(__urng, __t);

 if (__p12 != __p)
   __ret = __t - __ret;
 return __ret;
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.t() << __space << __x.p()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __t;
      double __p;
      __is >> __t >> __p >> __x._M_nd;
      __x.param(typename binomial_distribution<_IntType>::
  param_type(__t, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.lambda();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __lambda;
      __is >> __lambda;
      __x.param(typename exponential_distribution<_RealType>::
  param_type(__lambda));

      __is.flags(__flags);
      return __is;
    }
# 1647 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/random.tcc" 3
  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename normal_distribution<_RealType>::result_type
      normal_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 if (_M_saved_available)
   {
     _M_saved_available = false;
     __ret = _M_saved;
   }
 else
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     _M_saved = __x * __mult;
     _M_saved_available = true;
     __ret = __y * __mult;
   }

 __ret = __ret * __param.stddev() + __param.mean();
 return __ret;
      }

  template<typename _RealType>
    bool
    operator==(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    {
      if (__d1._M_param == __d2._M_param
   && __d1._M_saved_available == __d2._M_saved_available)
 {
   if (__d1._M_saved_available
       && __d1._M_saved == __d2._M_saved)
     return true;
   else if(!__d1._M_saved_available)
     return true;
   else
     return false;
 }
      else
 return false;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const normal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.mean() << __space << __x.stddev()
    << __space << __x._M_saved_available;
      if (__x._M_saved_available)
 __os << __space << __x._M_saved;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        normal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      double __mean, __stddev;
      __is >> __mean >> __stddev
    >> __x._M_saved_available;
      if (__x._M_saved_available)
 __is >> __x._M_saved;
      __x.param(typename normal_distribution<_RealType>::
  param_type(__mean, __stddev));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.s()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __s;
      __is >> __m >> __s >> __x._M_nd;
      __x.param(typename lognormal_distribution<_RealType>::
  param_type(__m, __s));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_gd;
      __x.param(typename chi_squared_distribution<_RealType>::
  param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename cauchy_distribution<_RealType>::result_type
      cauchy_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 _RealType __u;
 do
   __u = __aurng();
 while (__u == 0.5);

 const _RealType __pi = 3.1415926535897932384626433832795029L;
 return __p.a() + __p.b() * std::tan(__pi * __u);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename cauchy_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.n()
    << __space << __x._M_gd_x << __space << __x._M_gd_y;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __n;
      __is >> __m >> __n >> __x._M_gd_x >> __x._M_gd_y;
      __x.param(typename fisher_f_distribution<_RealType>::
  param_type(__m, __n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_nd << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_nd >> __x._M_gd;
      __x.param(typename student_t_distribution<_RealType>::param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    gamma_distribution<_RealType>::param_type::
    _M_initialize()
    {
      _M_malpha = _M_alpha < 1.0 ? _M_alpha + _RealType(1.0) : _M_alpha;

      const _RealType __a1 = _M_malpha - _RealType(1.0) / _RealType(3.0);
      _M_a2 = _RealType(1.0) / std::sqrt(_RealType(9.0) * __a1);
    }






  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename gamma_distribution<_RealType>::result_type
      gamma_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 result_type __u, __v, __n;
 const result_type __a1 = (__param._M_malpha
      - _RealType(1.0) / _RealType(3.0));

 do
   {
     do
       {
  __n = _M_nd(__urng);
  __v = result_type(1.0) + __param._M_a2 * __n;
       }
     while (__v <= 0.0);

     __v = __v * __v * __v;
     __u = __aurng();
   }
 while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
        && (std::log(__u) > (0.5 * __n * __n + __a1
        * (1.0 - __v + std::log(__v)))));

 if (__param.alpha() == __param._M_malpha)
   return __a1 * __v * __param.beta();
 else
   {
     do
       __u = __aurng();
     while (__u == 0.0);

     return (std::pow(__u, result_type(1.0) / __param.alpha())
      * __a1 * __v * __param.beta());
   }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.alpha() << __space << __x.beta()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __alpha_val, __beta_val;
      __is >> __alpha_val >> __beta_val >> __x._M_nd;
      __x.param(typename gamma_distribution<_RealType>::
  param_type(__alpha_val, __beta_val));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename weibull_distribution<_RealType>::result_type
      weibull_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.b() * std::pow(-std::log(__aurng()),
      result_type(1) / __p.a());
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename weibull_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename extreme_value_distribution<_RealType>::result_type
      extreme_value_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.a() - __p.b() * std::log(-std::log(__aurng()));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename extreme_value_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    discrete_distribution<_IntType>::param_type::
    _M_initialize()
    {
      if (_M_prob.size() < 2)
 {
   _M_prob.clear();
   return;
 }

      const double __sum = std::accumulate(_M_prob.begin(),
        _M_prob.end(), 0.0);

      __detail::__transform(_M_prob.begin(), _M_prob.end(), _M_prob.begin(),
     std::bind2nd(std::divides<double>(), __sum));

      _M_cp.reserve(_M_prob.size());
      std::partial_sum(_M_prob.begin(), _M_prob.end(),
         std::back_inserter(_M_cp));

      _M_cp[_M_cp.size() - 1] = 1.0;
    }

  template<typename _IntType>
    template<typename _Func>
      discrete_distribution<_IntType>::param_type::
      param_type(size_t __nw, double __xmin, double __xmax, _Func __fw)
      : _M_prob(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const double __delta = (__xmax - __xmin) / __n;

 _M_prob.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_prob.push_back(__fw(__xmin + __k * __delta + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename discrete_distribution<_IntType>::result_type
      discrete_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 if (__param._M_cp.empty())
   return result_type(0);

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);

 return __pos - __param._M_cp.begin();
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      std::vector<double> __prob = __x.probabilities();
      __os << __prob.size();
      for (auto __dit = __prob.begin(); __dit != __prob.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<double> __prob_vec;
      __prob_vec.reserve(__n);
      for (; __n != 0; --__n)
 {
   double __prob;
   __is >> __prob;
   __prob_vec.push_back(__prob);
 }

      __x.param(typename discrete_distribution<_IntType>::
  param_type(__prob_vec.begin(), __prob_vec.end()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_constant_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      const double __sum = std::accumulate(_M_den.begin(),
        _M_den.end(), 0.0);

      __detail::__transform(_M_den.begin(), _M_den.end(), _M_den.begin(),
       std::bind2nd(std::divides<double>(), __sum));

      _M_cp.reserve(_M_den.size());
      std::partial_sum(_M_den.begin(), _M_den.end(),
         std::back_inserter(_M_cp));


      _M_cp[_M_cp.size() - 1] = 1.0;

      for (size_t __k = 0; __k < _M_den.size(); ++__k)
 _M_den[__k] /= _M_int[__k + 1] - _M_int[__k];
    }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp()
      {
 if (__bbegin != __bend)
   {
     for (;;)
       {
  _M_int.push_back(*__bbegin);
  ++__bbegin;
  if (__bbegin == __bend)
    break;

  _M_den.push_back(*__wbegin);
  ++__wbegin;
       }
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 _M_int.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   _M_int.push_back(*__biter);

 _M_den.reserve(_M_int.size() - 1);
 for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
   _M_den.push_back(__fw(0.5 * (_M_int[__k + 1] + _M_int[__k])));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   _M_int.push_back(__xmin + __k * __delta);

 _M_den.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_den.push_back(__fw(_M_int[__k] + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_constant_distribution<_RealType>::result_type
      piecewise_constant_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 return __param._M_int[__i] + (__p - __pref) / __param._M_den[__i];
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n);
      for (size_t __i = 0; __i < __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_constant_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_linear_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)
       && _M_den[0] == _M_den[1]))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      double __sum = 0.0;
      _M_cp.reserve(_M_int.size() - 1);
      _M_m.reserve(_M_int.size() - 1);
      for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
 {
   const _RealType __delta = _M_int[__k + 1] - _M_int[__k];
   __sum += 0.5 * (_M_den[__k + 1] + _M_den[__k]) * __delta;
   _M_cp.push_back(__sum);
   _M_m.push_back((_M_den[__k + 1] - _M_den[__k]) / __delta);
 }


      __detail::__transform(_M_den.begin(), _M_den.end(), _M_den.begin(),
     std::bind2nd(std::divides<double>(), __sum));

      __detail::__transform(_M_cp.begin(), _M_cp.end(), _M_cp.begin(),
       std::bind2nd(std::divides<double>(), __sum));

      __detail::__transform(_M_m.begin(), _M_m.end(), _M_m.begin(),
       std::bind2nd(std::divides<double>(), __sum));

      _M_cp[_M_cp.size() - 1] = 1.0;
     }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 for (; __bbegin != __bend; ++__bbegin, ++__wbegin)
   {
     _M_int.push_back(*__bbegin);
     _M_den.push_back(*__wbegin);
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 _M_int.reserve(__bl.size());
 _M_den.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   {
     _M_int.push_back(*__biter);
     _M_den.push_back(__fw(*__biter));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 _M_den.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   {
     _M_int.push_back(__xmin + __k * __delta);
     _M_den.push_back(__fw(_M_int[__k] + __delta));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_linear_distribution<_RealType>::result_type
      piecewise_linear_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 const double __a = 0.5 * __param._M_m[__i];
 const double __b = __param._M_den[__i];
 const double __cm = __p - __pref;

 _RealType __x = __param._M_int[__i];
 if (__a == 0)
   __x += __cm / __b;
 else
   {
     const double __d = __b * __b + 4.0 * __a * __cm;
     __x += 0.5 * (std::sqrt(__d) - __b) / __a;
          }

        return __x;
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_linear_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    seed_seq::seed_seq(std::initializer_list<_IntType> __il)
    {
      for (auto __iter = __il.begin(); __iter != __il.end(); ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _InputIterator>
    seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end)
    {
      for (_InputIterator __iter = __begin; __iter != __end; ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _RandomAccessIterator>
    void
    seed_seq::generate(_RandomAccessIterator __begin,
         _RandomAccessIterator __end)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
        _Type;

      if (__begin == __end)
 return;

      std::fill(__begin, __end, _Type(0x8b8b8b8bu));

      const size_t __n = __end - __begin;
      const size_t __s = _M_v.size();
      const size_t __t = (__n >= 623) ? 11
         : (__n >= 68) ? 7
         : (__n >= 39) ? 5
         : (__n >= 7) ? 3
         : (__n - 1) / 2;
      const size_t __p = (__n - __t) / 2;
      const size_t __q = __p + __t;
      const size_t __m = std::max(__s + 1, __n);

      for (size_t __k = 0; __k < __m; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    ^ __begin[(__k + __p) % __n]
    ^ __begin[(__k - 1) % __n]);
   _Type __r1 = __arg ^ (__arg >> 27);
   __r1 = __detail::__mod<_Type,
      __detail::_Shift<_Type, 32>::__value>(1664525u * __r1);
   _Type __r2 = __r1;
   if (__k == 0)
     __r2 += __s;
   else if (__k <= __s)
     __r2 += __k % __n + _M_v[__k - 1];
   else
     __r2 += __k % __n;
   __r2 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r2);
   __begin[(__k + __p) % __n] += __r1;
   __begin[(__k + __q) % __n] += __r2;
   __begin[__k % __n] = __r2;
 }

      for (size_t __k = __m; __k < __m + __n; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    + __begin[(__k + __p) % __n]
    + __begin[(__k - 1) % __n]);
   _Type __r3 = __arg ^ (__arg >> 27);
   __r3 = __detail::__mod<_Type,
     __detail::_Shift<_Type, 32>::__value>(1566083941u * __r3);
   _Type __r4 = __r3 - __k % __n;
   __r4 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r4);
   __begin[(__k + __p) % __n] ^= __r3;
   __begin[(__k + __q) % __n] ^= __r4;
   __begin[__k % __n] = __r4;
 }
    }

  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __urng)
    {
      const size_t __b
 = std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),
                   __bits);
      const long double __r = static_cast<long double>(__urng.max())
       - static_cast<long double>(__urng.min()) + 1.0L;
      const size_t __log2r = std::log(__r) / std::log(2.0L);
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
 {
   __sum += _RealType(__urng() - __urng.min()) * __tmp;
   __tmp *= __r;
 }
      return __sum / __tmp;
    }


}
# 51 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/random" 2 3
# 68 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 1 3
# 47 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
# 47 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3






# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 1 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
# 34 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3







#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 82 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const
    { return __name[0] == '*' ? __name + 1 : __name; }
# 117 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
    bool before(const type_info& __arg) const
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 138 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/typeinfo" 3
    bool operator!=(const type_info& __arg) const
    { return !operator==(__arg); }


    size_t hash_code() const throw()
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() throw() { }



    virtual ~bad_cast() throw();


    virtual const char* what() const throw();
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () throw() { }



    virtual ~bad_typeid() throw();


    virtual const char* what() const throw();
  };
}

#pragma GCC visibility pop

}
# 54 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 2 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 1 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 3
# 32 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 3







namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct __add_c_ref
    { typedef const _Tp& type; };

  template<typename _Tp>
    struct __add_c_ref<_Tp&>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct __add_ref
    { typedef _Tp& type; };

  template<typename _Tp>
    struct __add_ref<_Tp&>
    { typedef _Tp& type; };

  template<std::size_t _Idx, typename _Head, bool _IsEmpty>
    struct _Head_base;

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
      : _Head(__h) { }

      template<typename _UHead>
        _Head_base(_UHead&& __h)
 : _Head(std::forward<_UHead>(__h)) { }

      _Head& _M_head() { return *this; }
      const _Head& _M_head() const { return *this; }

      void
      _M_swap_impl(_Head& __h)
      {
 using std::swap;
 swap(__h, _M_head());
      }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      template<typename _UHead>
        _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

      _Head& _M_head() { return _M_head_impl; }
      const _Head& _M_head() const { return _M_head_impl; }

      void
      _M_swap_impl(_Head& __h)
      {
 using std::swap;
 swap(__h, _M_head());
      }

      _Head _M_head_impl;
    };
# 123 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/tuple" 3
  template<std::size_t _Idx, typename... _Elements>
    struct _Tuple_impl;





  template<std::size_t _Idx>
    struct _Tuple_impl<_Idx>
    {
    protected:
      void _M_swap_impl(_Tuple_impl&) { }
    };






  template<std::size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head, std::is_empty<_Head>::value>
    {
      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, std::is_empty<_Head>::value> _Base;

      _Head& _M_head() { return _Base::_M_head(); }
      const _Head& _M_head() const { return _Base::_M_head(); }

      _Inherited& _M_tail() { return *this; }
      const _Inherited& _M_tail() const { return *this; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail>
        explicit
        _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      _Tuple_impl(_Tuple_impl&& __in)
      : _Inherited(std::move(__in._M_tail())),
 _Base(std::forward<_Head>(__in._M_head())) { }

      template<typename... _UElements>
        _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(__in._M_tail()), _Base(__in._M_head()) { }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move(__in._M_tail())),
   _Base(std::forward<_UHead>(__in._M_head())) { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head() = __in._M_head();
 _M_tail() = __in._M_tail();
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      {
 _M_head() = std::forward<_Head>(__in._M_head());
 _M_tail() = std::move(__in._M_tail());
 return *this;
      }

      template<typename... _UElements>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)
        {
   _M_head() = __in._M_head();
   _M_tail() = __in._M_tail();
   return *this;
 }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
   _M_head() = std::forward<_UHead>(__in._M_head());
   _M_tail() = std::move(__in._M_tail());
   return *this;
 }

    protected:
      void
      _M_swap_impl(_Tuple_impl& __in)
      {
 _Base::_M_swap_impl(__in._M_head());
 _Inherited::_M_swap_impl(__in._M_tail());
      }
    };


  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        explicit
        tuple(_UElements&&... __elements)
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      constexpr tuple(const tuple&) = default;

      tuple(tuple&& __in)
      : _Inherited(static_cast<_Inherited&&>(__in)) { }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple&
        operator=(const tuple<_UElements...>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename... _UElements, typename = typename
        std::enable_if<sizeof...(_UElements)
         == sizeof...(_Elements)>::type>
        tuple&
        operator=(tuple<_UElements...>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      { _Inherited::_M_swap_impl(__in); }
    };

  template<>
    class tuple<>
    {
    public:
      void swap(tuple&) { }
    };


  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _T1& __a1, const _T2& __a2)
      : _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2>
        explicit
        tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      tuple(tuple&& __in)
      : _Inherited(static_cast<_Inherited&&>(__in)) { }

      template<typename _U1, typename _U2>
        tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2>
        tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2>
        tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2>
        tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const tuple<_U1, _U2>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(tuple<_U1, _U2>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const pair<_U1, _U2>& __in)
        {
   this->_M_head() = __in.first;
   this->_M_tail()._M_head() = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(pair<_U1, _U2>&& __in)
        {
   this->_M_head() = std::forward<_U1>(__in.first);
   this->_M_tail()._M_head() = std::forward<_U2>(__in.second);
   return *this;
 }

      void
      swap(tuple& __in)
      {
 using std::swap;
 swap(this->_M_head(), __in._M_head());
 swap(this->_M_tail()._M_head(), __in._M_tail()._M_head());
      }
    };


  template<typename _T1>
    class tuple<_T1> : public _Tuple_impl<0, _T1>
    {
      typedef _Tuple_impl<0, _T1> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _T1& __a1)
      : _Inherited(__a1) { }

      template<typename _U1, typename = typename
        std::enable_if<std::is_convertible<_U1, _T1>::value>::type>
        explicit
        tuple(_U1&& __a1)
 : _Inherited(std::forward<_U1>(__a1)) { }

      constexpr tuple(const tuple&) = default;

      tuple(tuple&& __in)
      : _Inherited(static_cast<_Inherited&&>(__in)) { }

      template<typename _U1>
        tuple(const tuple<_U1>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1>&>(__in)) { }

      template<typename _U1>
        tuple(tuple<_U1>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1>&&>(__in)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1>
        tuple&
        operator=(const tuple<_U1>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1>
        tuple&
        operator=(tuple<_U1>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      { _Inherited::_M_swap_impl(__in); }
    };



  template<std::size_t __i, typename _Tp>
    struct tuple_element;





  template<std::size_t __i, typename _Head, typename... _Tail>
    struct tuple_element<__i, tuple<_Head, _Tail...> >
    : tuple_element<__i - 1, tuple<_Tail...> > { };




  template<typename _Head, typename... _Tail>
    struct tuple_element<0, tuple<_Head, _Tail...> >
    {
      typedef _Head type;
    };


  template<typename _Tp>
    struct tuple_size;


  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...> >
    {
      static const std::size_t value = sizeof...(_Elements);
    };

  template<typename... _Elements>
    const std::size_t tuple_size<tuple<_Elements...> >::value;

  template<std::size_t __i, typename _Head, typename... _Tail>
    inline typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t)
    { return __t._M_head(); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    inline typename __add_c_ref<_Head>::type
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t)
    { return __t._M_head(); }



  template<std::size_t __i, typename... _Elements>
    inline typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...> >::type
                    >::type
    get(tuple<_Elements...>& __t)
    { return __get_helper<__i>(__t); }

  template<std::size_t __i, typename... _Elements>
    inline typename __add_c_ref<
                      typename tuple_element<__i, tuple<_Elements...> >::type
                    >::type
    get(const tuple<_Elements...>& __t)
    { return __get_helper<__i>(__t); }


  template<std::size_t __check_equal_size, std::size_t __i, std::size_t __j,
    typename _Tp, typename _Up>
    struct __tuple_compare;

  template<std::size_t __i, std::size_t __j, typename _Tp, typename _Up>
    struct __tuple_compare<0, __i, __j, _Tp, _Up>
    {
      static bool __eq(const _Tp& __t, const _Up& __u)
      {
 return (get<__i>(__t) == get<__i>(__u) &&
  __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__eq(__t, __u));
      }

      static bool __less(const _Tp& __t, const _Up& __u)
      {
 return ((get<__i>(__t) < get<__i>(__u))
  || !(get<__i>(__u) < get<__i>(__t)) &&
  __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__less(__t, __u));
      }
    };

  template<std::size_t __i, typename _Tp, typename _Up>
    struct __tuple_compare<0, __i, __i, _Tp, _Up>
    {
      static bool __eq(const _Tp&, const _Up&)
      { return true; }

      static bool __less(const _Tp&, const _Up&)
      { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      typedef tuple<_TElements...> _Tp;
      typedef tuple<_UElements...> _Up;
      return (__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,
       0, tuple_size<_Tp>::value, _Tp, _Up>::__eq(__t, __u));
    }

  template<typename... _TElements, typename... _UElements>
    bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      typedef tuple<_TElements...> _Tp;
      typedef tuple<_UElements...> _Up;
      return (__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,
       0, tuple_size<_Tp>::value, _Tp, _Up>::__less(__t, __u));
    }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    inline bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }


  template<typename... _Elements>
    inline tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }

  template<typename... _Elements>
    inline tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args)
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }

  template<std::size_t...> struct __index_holder { };

  template<std::size_t __i, typename _IdxHolder, typename... _Elements>
    struct __index_holder_impl;

  template<std::size_t __i, std::size_t... _Indexes, typename _IdxHolder,
    typename... _Elements>
    struct __index_holder_impl<__i, __index_holder<_Indexes...>,
          _IdxHolder, _Elements...>
    {
      typedef typename __index_holder_impl<__i + 1,
        __index_holder<_Indexes..., __i>,
        _Elements...>::type type;
    };

  template<std::size_t __i, std::size_t... _Indexes>
    struct __index_holder_impl<__i, __index_holder<_Indexes...> >
    { typedef __index_holder<_Indexes...> type; };

  template<typename... _Elements>
    struct __make_index_holder
    : __index_holder_impl<0, __index_holder<>, _Elements...> { };

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(const tuple<_TElements...>& __t,
         const __index_holder<_TIdx...>&,
                       const tuple<_UElements...>& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>(get<_TIdx>(__t)...,
       get<_UIdx>(__u)...); }

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(tuple<_TElements...>&& __t,
         const __index_holder<_TIdx...>&,
         const tuple<_UElements...>& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>
 (std::forward<_TElements>(get<_TIdx>(__t))..., get<_UIdx>(__u)...); }

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(const tuple<_TElements...>& __t,
         const __index_holder<_TIdx...>&,
         tuple<_UElements...>&& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>
 (get<_TIdx>(__t)..., std::forward<_UElements>(get<_UIdx>(__u))...); }

  template<typename... _TElements, std::size_t... _TIdx,
    typename... _UElements, std::size_t... _UIdx>
    inline tuple<_TElements..., _UElements...>
    __tuple_cat_helper(tuple<_TElements...>&& __t,
         const __index_holder<_TIdx...>&,
         tuple<_UElements...>&& __u,
         const __index_holder<_UIdx...>&)
    { return tuple<_TElements..., _UElements...>
 (std::forward<_TElements>(get<_TIdx>(__t))...,
  std::forward<_UElements>(get<_UIdx>(__u))...); }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(const tuple<_TElements...>& __t, const tuple<_UElements...>& __u)
    {
      return __tuple_cat_helper(__t, typename
    __make_index_holder<_TElements...>::type(),
    __u, typename
    __make_index_holder<_UElements...>::type());
    }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(tuple<_TElements...>&& __t, const tuple<_UElements...>& __u)
    {
      return __tuple_cat_helper(std::move(__t), typename
     __make_index_holder<_TElements...>::type(),
     __u, typename
     __make_index_holder<_UElements...>::type());
    }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(const tuple<_TElements...>& __t, tuple<_UElements...>&& __u)
    {
      return __tuple_cat_helper(__t, typename
    __make_index_holder<_TElements...>::type(),
    std::move(__u), typename
    __make_index_holder<_UElements...>::type());
    }

  template<typename... _TElements, typename... _UElements>
    inline tuple<_TElements..., _UElements...>
    tuple_cat(tuple<_TElements...>&& __t, tuple<_UElements...>&& __u)
    {
      return __tuple_cat_helper(std::move(__t), typename
    __make_index_holder<_TElements...>::type(),
    std::move(__u), typename
    __make_index_holder<_UElements...>::type());
    }

  template<typename... _Elements>
    inline tuple<_Elements&...>
    tie(_Elements&... __args)
    { return tuple<_Elements&...>(__args...); }

  template<typename... _Elements>
    inline void
    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    { __x.swap(__y); }



  struct _Swallow_assign
  {
    template<class _Tp>
      const _Swallow_assign&
      operator=(const _Tp&) const
      { return *this; }
  };

  const _Swallow_assign ignore{};





  template<int... _Indexes>
    struct _Index_tuple
    {
      typedef _Index_tuple<_Indexes..., sizeof...(_Indexes)> __next;
    };


  template<std::size_t _Num>
    struct _Build_index_tuple
    {
      typedef typename _Build_index_tuple<_Num-1>::__type::__next __type;
    };

  template<>
    struct _Build_index_tuple<0>
    {
      typedef _Index_tuple<> __type;
    };


  template<class _T1, class _T2>
    template<typename _Tp, typename... _Args>
      inline _Tp
      pair<_T1, _T2>::
      __cons(tuple<_Args...>&& __tuple)
      {
 typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
   _Indexes;
 return __do_cons<_Tp>(std::move(__tuple), _Indexes());
      }

  template<class _T1, class _T2>
    template<typename _Tp, typename... _Args, int... _Indexes>
      inline _Tp
      pair<_T1, _T2>::
      __do_cons(tuple<_Args...>&& __tuple,
  const _Index_tuple<_Indexes...>&)
      { return _Tp(std::forward<_Args>(get<_Indexes>(__tuple))...); }


}
# 56 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{


template<typename _Tp> class __has_result_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::result_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_result_type : integral_constant<bool, __has_result_type_helper <typename remove_cv<_Tp>::type>::value> { };


  template<bool _Has_result_type, typename _Functor>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<true, _Functor>
    { typedef typename _Functor::result_type result_type; };





  template<typename _Functor>
    struct _Weak_result_type_impl
    : _Maybe_get_result_type<__has_result_type<_Functor>::value, _Functor>
    { };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) const>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)
      const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)
      const volatile>
    { typedef _Res result_type; };





  template<typename _Functor>
    struct _Weak_result_type
    : _Weak_result_type_impl<typename remove_cv<_Functor>::type>
    { };


  template<typename _Tp>
    struct _Derives_from_unary_function : __sfinae_types
    {
    private:
      template<typename _T1, typename _Res>
 static __one __test(const volatile unary_function<_T1, _Res>*);



      static __two __test(...);

    public:
      static const bool value = sizeof(__test((_Tp*)0)) == 1;
    };


  template<typename _Tp>
    struct _Derives_from_binary_function : __sfinae_types
    {
    private:
      template<typename _T1, typename _T2, typename _Res>
 static __one __test(const volatile binary_function<_T1, _T2, _Res>*);



      static __two __test(...);

    public:
      static const bool value = sizeof(__test((_Tp*)0)) == 1;
    };





  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (!is_member_pointer<_Functor>::value
       && !is_function<_Functor>::value
       && !is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor(_Args&&...)>::type
    >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }

  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
             (is_member_pointer<_Functor>::value
              && !is_function<_Functor>::value
              && !is_function<typename remove_pointer<_Functor>::type>::value),
             typename result_of<_Functor(_Args&&...)>::type
           >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return mem_fn(__f)(std::forward<_Args>(__args)...);
    }


  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (is_pointer<_Functor>::value
       && is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor(_Args&&...)>::type
    >::type
    __invoke(_Functor __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }






  template<bool _Unary, bool _Binary, typename _Tp>
    struct _Reference_wrapper_base_impl;


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, false, _Tp>
    : _Weak_result_type<_Tp>
    { };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, false, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
    };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };


   template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };

  template<typename _Tp> class __has_argument_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::argument_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_argument_type : integral_constant<bool, __has_argument_type_helper <typename remove_cv<_Tp>::type>::value> { };
  template<typename _Tp> class __has_first_argument_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::first_argument_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_first_argument_type : integral_constant<bool, __has_first_argument_type_helper <typename remove_cv<_Tp>::type>::value> { };
  template<typename _Tp> class __has_second_argument_type_helper : __sfinae_types { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static __one __test(_Wrap_type<typename _Up::second_argument_type>*); template<typename _Up> static __two __test(...); public: static const bool value = sizeof(__test<_Tp>(0)) == 1; }; template<typename _Tp> struct __has_second_argument_type : integral_constant<bool, __has_second_argument_type_helper <typename remove_cv<_Tp>::type>::value> { };







  template<typename _Tp>
    struct _Reference_wrapper_base
    : _Reference_wrapper_base_impl<
      __has_argument_type<_Tp>::value,
      __has_first_argument_type<_Tp>::value
      && __has_second_argument_type<_Tp>::value,
      _Tp>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1)>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) volatile>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const volatile>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(*)(_T1)>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(*)(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)()>
    : unary_function<_T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2)>
    : binary_function<_T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const>
    : unary_function<const _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const>
    : binary_function<const _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() volatile>
    : unary_function<volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) volatile>
    : binary_function<volatile _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const volatile>
    : unary_function<const volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const volatile>
    : binary_function<const volatile _T1*, _T2, _Res>
    { };






  template<typename _Tp>
    class reference_wrapper
    : public _Reference_wrapper_base<typename remove_cv<_Tp>::type>
    {
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata)
      : _M_data(std::__addressof(__indata))
      { }

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper<_Tp>& __inref):
      _M_data(__inref._M_data)
      { }

      reference_wrapper&
      operator=(const reference_wrapper<_Tp>& __inref)
      {
 _M_data = __inref._M_data;
 return *this;
      }

      operator _Tp&() const
      { return this->get(); }

      _Tp&
      get() const
      { return *_M_data; }

      template<typename... _Args>
 typename result_of<_Tp&(_Args&&...)>::type
 operator()(_Args&&... __args) const
 {
   return __invoke(get(), std::forward<_Args>(__args)...);
 }
    };



  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t)
    { return reference_wrapper<_Tp>(__t); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(const _Tp& __t)
    { return reference_wrapper<const _Tp>(__t); }

  template<typename _Tp>
    void ref(const _Tp&&) = delete;

  template<typename _Tp>
    void cref(const _Tp&&) = delete;


  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(reference_wrapper<_Tp> __t)
    { return ref(__t.get()); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(reference_wrapper<_Tp> __t)
    { return cref(__t.get()); }



  template<typename _MemberPointer>
    class _Mem_fn;






  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };


  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
    : std::unary_function<_T1, _Res> { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>
    : std::binary_function<_T1, _T2, _Res> { };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...);

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(_Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(_Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res
 operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) const>
    : public _Maybe_unary_or_binary_function<_Res, const _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) const;

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(const _Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(const _Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) volatile>
    : public _Maybe_unary_or_binary_function<_Res, volatile _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) volatile;

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(volatile _Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(volatile _Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res
 operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) const volatile>
    : public _Maybe_unary_or_binary_function<_Res, const volatile _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) const volatile;

      template<typename _Tp>
 _Res
 _M_call(_Tp& __object, const volatile _Class *,
  _ArgTypes... __args) const
 { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }

      template<typename _Tp>
 _Res
 _M_call(_Tp& __ptr, const volatile void *, _ArgTypes... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_ArgTypes>(__args)...); }

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      _Res
      operator()(const volatile _Class& __object, _ArgTypes... __args) const
      { return (__object.*__pmf)(std::forward<_ArgTypes>(__args)...); }


      _Res
      operator()(const volatile _Class* __object, _ArgTypes... __args) const
      { return (__object->*__pmf)(std::forward<_ArgTypes>(__args)...); }


      template<typename _Tp>
 _Res operator()(_Tp& __object, _ArgTypes... __args) const
 {
   return _M_call(__object, &__object,
       std::forward<_ArgTypes>(__args)...);
 }

    private:
      _Functor __pmf;
    };


  template<typename _Tp, bool>
    struct _Mem_fn_const_or_non
    {
      typedef const _Tp& type;
    };

  template<typename _Tp>
    struct _Mem_fn_const_or_non<_Tp, false>
    {
      typedef _Tp& type;
    };

  template<typename _Res, typename _Class>
    class _Mem_fn<_Res _Class::*>
    {


      template<typename _Tp>
 _Res&
 _M_call(_Tp& __object, _Class *) const
 { return __object.*__pm; }

      template<typename _Tp, typename _Up>
 _Res&
 _M_call(_Tp& __object, _Up * const *) const
 { return (*__object).*__pm; }

      template<typename _Tp, typename _Up>
 const _Res&
 _M_call(_Tp& __object, const _Up * const *) const
 { return (*__object).*__pm; }

      template<typename _Tp>
 const _Res&
 _M_call(_Tp& __object, const _Class *) const
 { return __object.*__pm; }

      template<typename _Tp>
 const _Res&
 _M_call(_Tp& __ptr, const volatile void*) const
 { return (*__ptr).*__pm; }

      template<typename _Tp> static _Tp& __get_ref();

      template<typename _Tp>
 static __sfinae_types::__one __check_const(_Tp&, _Class*);
      template<typename _Tp, typename _Up>
 static __sfinae_types::__one __check_const(_Tp&, _Up * const *);
      template<typename _Tp, typename _Up>
 static __sfinae_types::__two __check_const(_Tp&, const _Up * const *);
      template<typename _Tp>
 static __sfinae_types::__two __check_const(_Tp&, const _Class*);
      template<typename _Tp>
 static __sfinae_types::__two __check_const(_Tp&, const volatile void*);

    public:
      template<typename _Tp>
 struct _Result_type
 : _Mem_fn_const_or_non<_Res,
   (sizeof(__sfinae_types::__two)
    == sizeof(__check_const<_Tp>(__get_ref<_Tp>(), (_Tp*)0)))>
 { };

      template<typename _Signature>
 struct result;

      template<typename _CVMem, typename _Tp>
 struct result<_CVMem(_Tp)>
 : public _Result_type<_Tp> { };

      template<typename _CVMem, typename _Tp>
 struct result<_CVMem(_Tp&)>
 : public _Result_type<_Tp> { };

      explicit
      _Mem_fn(_Res _Class::*__pm) : __pm(__pm) { }


      _Res&
      operator()(_Class& __object) const
      { return __object.*__pm; }

      const _Res&
      operator()(const _Class& __object) const
      { return __object.*__pm; }


      _Res&
      operator()(_Class* __object) const
      { return __object->*__pm; }

      const _Res&
      operator()(const _Class* __object) const
      { return __object->*__pm; }


      template<typename _Tp>
 typename _Result_type<_Tp>::type
 operator()(_Tp& __unknown) const
 { return _M_call(__unknown, &__unknown); }

    private:
      _Res _Class::*__pm;
    };






  template<typename _Tp, typename _Class>
    inline _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::* __pm)
    {
      return _Mem_fn<_Tp _Class::*>(__pm);
    }







  template<typename _Tp>
    struct is_bind_expression
    : public false_type { };






  template<typename _Tp>
    struct is_placeholder
    : public integral_constant<int, 0>
    { };


  template<int _Num> struct _Placeholder { };
# 855 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  namespace placeholders
  {

    extern const _Placeholder<1> _1;
    extern const _Placeholder<2> _2;
    extern const _Placeholder<3> _3;
    extern const _Placeholder<4> _4;
    extern const _Placeholder<5> _5;
    extern const _Placeholder<6> _6;
    extern const _Placeholder<7> _7;
    extern const _Placeholder<8> _8;
    extern const _Placeholder<9> _9;
    extern const _Placeholder<10> _10;
    extern const _Placeholder<11> _11;
    extern const _Placeholder<12> _12;
    extern const _Placeholder<13> _13;
    extern const _Placeholder<14> _14;
    extern const _Placeholder<15> _15;
    extern const _Placeholder<16> _16;
    extern const _Placeholder<17> _17;
    extern const _Placeholder<18> _18;
    extern const _Placeholder<19> _19;
    extern const _Placeholder<20> _20;
    extern const _Placeholder<21> _21;
    extern const _Placeholder<22> _22;
    extern const _Placeholder<23> _23;
    extern const _Placeholder<24> _24;
    extern const _Placeholder<25> _25;
    extern const _Placeholder<26> _26;
    extern const _Placeholder<27> _27;
    extern const _Placeholder<28> _28;
    extern const _Placeholder<29> _29;

  }
# 897 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<int _Num>
    struct is_placeholder<_Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };





  struct _No_tuple_element;






  template<int __i, typename _Tuple, bool _IsSafe>
    struct _Safe_tuple_element_impl
    : tuple_element<__i, _Tuple> { };






  template<int __i, typename _Tuple>
    struct _Safe_tuple_element_impl<__i, _Tuple, false>
    {
      typedef _No_tuple_element type;
    };





 template<int __i, typename _Tuple>
   struct _Safe_tuple_element
   : _Safe_tuple_element_impl<__i, _Tuple,
         (__i >= 0 && __i < tuple_size<_Tuple>::value)>
   { };
# 949 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<typename _Arg,
    bool _IsBindExp = is_bind_expression<_Arg>::value,
    bool _IsPlaceholder = (is_placeholder<_Arg>::value > 0)>
    class _Mu;





  template<typename _Tp>
    class _Mu<reference_wrapper<_Tp>, false, false>
    {
    public:
      typedef _Tp& result_type;





      template<typename _CVRef, typename _Tuple>
 result_type
 operator()(_CVRef& __arg, _Tuple&) const volatile
 { return __arg.get(); }
    };






  template<typename _Arg>
    class _Mu<_Arg, true, false>
    {
    public:
      template<typename _CVArg, typename... _Args>
 auto
 operator()(_CVArg& __arg,
     tuple<_Args...>& __tuple) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {

   typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
     _Indexes;
   return this->__call(__arg, __tuple, _Indexes());
 }

    private:


      template<typename _CVArg, typename... _Args, int... _Indexes>
 auto
 __call(_CVArg& __arg, tuple<_Args...>& __tuple,
        const _Index_tuple<_Indexes...>&) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {
   return __arg(std::forward<_Args>(get<_Indexes>(__tuple))...);
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, true>
    {
    public:
      template<typename _Signature> class result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 class result<_CVMu(_CVArg, _Tuple)>
 {



   typedef typename _Safe_tuple_element<(is_placeholder<_Arg>::value
      - 1), _Tuple>::type
     __base_type;

 public:
   typedef typename add_rvalue_reference<__base_type>::type type;
 };

      template<typename _Tuple>
 typename result<_Mu(_Arg, _Tuple)>::type
 operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 {
   return std::forward<typename result<_Mu(_Arg, _Tuple)>::type>(
       ::std::get<(is_placeholder<_Arg>::value - 1)>(__tuple));
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, false>
    {
    public:
      template<typename _Signature> struct result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 struct result<_CVMu(_CVArg, _Tuple)>
 {
   typedef typename add_lvalue_reference<_CVArg>::type type;
 };


      template<typename _CVArg, typename _Tuple>
 _CVArg&&
 operator()(_CVArg&& __arg, _Tuple&) const volatile
 { return std::forward<_CVArg>(__arg); }
    };






  template<typename _Tp>
    struct _Maybe_wrap_member_pointer
    {
      typedef _Tp type;

      static const _Tp&
      __do_wrap(const _Tp& __x)
      { return __x; }

      static _Tp&&
      __do_wrap(_Tp&& __x)
      { return static_cast<_Tp&&>(__x); }
    };






  template<typename _Tp, typename _Class>
    struct _Maybe_wrap_member_pointer<_Tp _Class::*>
    {
      typedef _Mem_fn<_Tp _Class::*> type;

      static type
      __do_wrap(_Tp _Class::* __pm)
      { return type(__pm); }
    };





  template<>
    struct _Maybe_wrap_member_pointer<void>
    {
      typedef void type;
    };


  template<size_t _Ind, typename... _Tp>
    inline auto
    __volget(volatile tuple<_Tp...>& __tuple)
    -> typename tuple_element<_Ind, tuple<_Tp...>>::type volatile&
    { return std::get<_Ind>(const_cast<tuple<_Tp...>&>(__tuple)); }


  template<size_t _Ind, typename... _Tp>
    inline auto
    __volget(const volatile tuple<_Tp...>& __tuple)
    -> typename tuple_element<_Ind, tuple<_Tp...>>::type const volatile&
    { return std::get<_Ind>(const_cast<const tuple<_Tp...>&>(__tuple)); }


  template<typename _Signature>
    struct _Bind;

   template<typename _Functor, typename... _Bound_args>
    class _Bind<_Functor(_Bound_args...)>
    : public _Weak_result_type<_Functor>
    {
      typedef _Bind __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call_v(tuple<_Args...>&& __args,
   _Index_tuple<_Indexes...>) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, int... _Indexes>
 _Result
 __call_c_v(tuple<_Args...>&& __args,
     _Index_tuple<_Indexes...>) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

     public:
      template<typename... _Args>
 explicit _Bind(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args, typename _Result
 = decltype( std::declval<_Functor>()(
       _Mu<_Bound_args>()( std::declval<_Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
         typename add_const<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<const _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const
 {
   return this->__call_c<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_volatile<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) volatile
 {
   return this->__call_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_cv<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<const volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const volatile
 {
   return this->__call_c_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };


  template<typename _Result, typename _Signature>
    struct _Bind_result;

  template<typename _Result, typename _Functor, typename... _Bound_args>
    class _Bind_result<_Result, _Functor(_Bound_args...)>
    {
      typedef _Bind_result __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Res>
 struct __enable_if_void : enable_if<is_void<_Res>::value, int> { };
      template<typename _Res>
 struct __disable_if_void : enable_if<!is_void<_Res>::value, int> { };


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0)
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0)
 {
   _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const
 {
   _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, int... _Indexes>
 void
 __call(tuple<_Args...>&& __args,
        _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

    public:
      typedef _Result result_type;

      template<typename... _Args>
 explicit _Bind_result(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind_result(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind_result(const _Bind_result&) = default;

      _Bind_result(_Bind_result&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };





  template<typename _Signature>
    struct is_bind_expression<_Bind<_Signature> >
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<_Bind_result<_Result, _Signature> >
    : public true_type { };

  template<typename _Functor, typename... _ArgTypes>
    struct _Bind_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Functor>::type>
 __maybe_type;
      typedef typename __maybe_type::type __functor_type;
      typedef _Bind<__functor_type(typename decay<_ArgTypes>::type...)> type;
    };





  template<typename _Functor, typename... _ArgTypes>
    inline
    typename _Bind_helper<_Functor, _ArgTypes...>::type
    bind(_Functor&& __f, _ArgTypes&&... __args)
    {
      typedef _Bind_helper<_Functor, _ArgTypes...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Functor>(__f)),
      std::forward<_ArgTypes>(__args)...);
    }

  template<typename _Result, typename _Functor, typename... _ArgTypes>
    struct _Bindres_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Functor>::type>
 __maybe_type;
      typedef typename __maybe_type::type __functor_type;
      typedef _Bind_result<_Result,
      __functor_type(typename decay<_ArgTypes>::type...)>
 type;
    };





  template<typename _Result, typename _Functor, typename... _ArgTypes>
    inline
    typename _Bindres_helper<_Result, _Functor, _ArgTypes...>::type
    bind(_Functor&& __f, _ArgTypes&&... __args)
    {
      typedef _Bindres_helper<_Result, _Functor, _ArgTypes...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Functor>(__f)),
      std::forward<_ArgTypes>(__args)...);
    }






  class bad_function_call : public std::exception
  {
  public:
    virtual ~bad_function_call() throw();
  };






  template<typename _Tp>
    struct __is_location_invariant
    : integral_constant<bool, (is_pointer<_Tp>::value
          || is_member_pointer<_Tp>::value)>
    { };

  class _Undefined_class;

  union _Nocopy_types
  {
    void* _M_object;
    const void* _M_const_object;
    void (*_M_function_pointer)();
    void (_Undefined_class::*_M_member_pointer)();
  };

  union _Any_data
  {
    void* _M_access() { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const
      { return *static_cast<const _Tp*>(_M_access()); }

    _Nocopy_types _M_unused;
    char _M_pod_data[sizeof(_Nocopy_types)];
  };

  enum _Manager_operation
  {
    __get_type_info,
    __get_functor_ptr,
    __clone_functor,
    __destroy_functor
  };



  template<typename _Tp>
    struct _Simple_type_wrapper
    {
      _Simple_type_wrapper(_Tp __value) : __value(__value) { }

      _Tp __value;
    };

  template<typename _Tp>
    struct __is_location_invariant<_Simple_type_wrapper<_Tp> >
    : __is_location_invariant<_Tp>
    { };



  template<typename _Functor>
    inline _Functor&
    __callable_functor(_Functor& __f)
    { return __f; }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* &__p)
    { return mem_fn(__p); }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* const &__p)
    { return mem_fn(__p); }

  template<typename _Signature>
    class function;


  class _Function_base
  {
  public:
    static const std::size_t _M_max_size = sizeof(_Nocopy_types);
    static const std::size_t _M_max_align = __alignof__(_Nocopy_types);

    template<typename _Functor>
      class _Base_manager
      {
      protected:
 static const bool __stored_locally =
 (__is_location_invariant<_Functor>::value
  && sizeof(_Functor) <= _M_max_size
  && __alignof__(_Functor) <= _M_max_align
  && (_M_max_align % __alignof__(_Functor) == 0));

 typedef integral_constant<bool, __stored_locally> _Local_storage;


 static _Functor*
 _M_get_pointer(const _Any_data& __source)
 {
   const _Functor* __ptr =
     __stored_locally? std::__addressof(__source._M_access<_Functor>())
                                 : __source._M_access<_Functor*>();
   return const_cast<_Functor*>(__ptr);
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 {
   new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 {
   __dest._M_access<_Functor*>() =
     new _Functor(*__source._M_access<_Functor*>());
 }



 static void
 _M_destroy(_Any_data& __victim, true_type)
 {
   __victim._M_access<_Functor>().~_Functor();
 }


 static void
 _M_destroy(_Any_data& __victim, false_type)
 {
   delete __victim._M_access<_Functor*>();
 }

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = _M_get_pointer(__source);
       break;

     case __clone_functor:
       _M_clone(__dest, __source, _Local_storage());
       break;

     case __destroy_functor:
       _M_destroy(__dest, _Local_storage());
       break;
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f)
 { _M_init_functor(__functor, std::move(__f), _Local_storage()); }

 template<typename _Signature>
   static bool
   _M_not_empty_function(const function<_Signature>& __f)
   { return static_cast<bool>(__f); }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp*& __fp)
   { return __fp; }

 template<typename _Class, typename _Tp>
   static bool
   _M_not_empty_function(_Tp _Class::* const& __mp)
   { return __mp; }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp&)
   { return true; }

      private:
 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 { new (__functor._M_access()) _Functor(std::move(__f)); }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    template<typename _Functor>
      class _Ref_manager : public _Base_manager<_Functor*>
      {
 typedef _Function_base::_Base_manager<_Functor*> _Base;

    public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = *_Base::_M_get_pointer(__source);
       return is_const<_Functor>::value;
       break;

     default:
       _Base::_M_manager(__dest, __source, __op);
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, reference_wrapper<_Functor> __f)
 {

   _Base::_M_init_functor(__functor, &__f.get());
 }
      };

    _Function_base() : _M_manager(0) { }

    ~_Function_base()
    {
      if (_M_manager)
 _M_manager(_M_functor, _M_functor, __destroy_functor);
    }


    bool _M_empty() const { return !_M_manager; }

    typedef bool (*_Manager_type)(_Any_data&, const _Any_data&,
      _Manager_operation);

    _Any_data _M_functor;
    _Manager_type _M_manager;
  };

  template<typename _Signature, typename _Functor>
    class _Function_handler;

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return __callable_functor(**_Base::_M_get_pointer(__functor))(
       std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 __callable_functor(**_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename _Res,
    typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Member _Class::*>
    : public _Function_handler<void(_ArgTypes...), _Member _Class::*>
    {
      typedef _Function_handler<void(_ArgTypes...), _Member _Class::*>
 _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Member _Class::*>
    : public _Function_base::_Base_manager<
   _Simple_type_wrapper< _Member _Class::* > >
    {
      typedef _Member _Class::* _Functor;
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

     public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   _Manager_operation __op)
      {
 switch (__op)
   {

   case __get_type_info:
     __dest._M_access<const type_info*>() = &typeid(_Functor);
     break;

   case __get_functor_ptr:
     __dest._M_access<_Functor*>() =
       &_Base::_M_get_pointer(__source)->__value;
     break;

   default:
     _Base::_M_manager(__dest, __source, __op);
   }
 return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };







  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
      private _Function_base
    {
      typedef _Res _Signature_type(_ArgTypes...);

      struct _Useless { };

    public:
      typedef _Res result_type;







      function() : _Function_base() { }





      function(nullptr_t) : _Function_base() { }
# 1909 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function(const function& __x);
# 1918 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function(function&& __x) : _Function_base()
      {
 __x.swap(*this);
      }
# 1941 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      template<typename _Functor>
 function(_Functor __f,
   typename enable_if<
      !is_integral<_Functor>::value, _Useless>::type
     = _Useless());
# 1959 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function&
      operator=(const function& __x)
      {
 function(__x).swap(*this);
 return *this;
      }
# 1977 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function&
      operator=(function&& __x)
      {
 function(std::move(__x)).swap(*this);
 return *this;
      }
# 1991 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      function&
      operator=(nullptr_t)
      {
 if (_M_manager)
   {
     _M_manager(_M_functor, _M_functor, __destroy_functor);
     _M_manager = 0;
     _M_invoker = 0;
   }
 return *this;
      }
# 2019 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      template<typename _Functor>
 typename enable_if<!is_integral<_Functor>::value, function&>::type
 operator=(_Functor&& __f)
 {
   function(std::forward<_Functor>(__f)).swap(*this);
   return *this;
 }


      template<typename _Functor>
 typename enable_if<!is_integral<_Functor>::value, function&>::type
 operator=(reference_wrapper<_Functor> __f)
 {
   function(__f).swap(*this);
   return *this;
 }
# 2045 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      void swap(function& __x)
      {
 std::swap(_M_functor, __x._M_functor);
 std::swap(_M_manager, __x._M_manager);
 std::swap(_M_invoker, __x._M_invoker);
      }
# 2073 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      explicit operator bool() const
      { return !_M_empty(); }
# 2086 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      _Res operator()(_ArgTypes... __args) const;
# 2099 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      const type_info& target_type() const;
# 2110 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
      template<typename _Functor> _Functor* target();


      template<typename _Functor> const _Functor* target() const;


    private:
      typedef _Res (*_Invoker_type)(const _Any_data&, _ArgTypes...);
      _Invoker_type _M_invoker;
  };


  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 {
   _M_invoker = __x._M_invoker;
   _M_manager = __x._M_manager;
   __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 }
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      function<_Res(_ArgTypes...)>::
      function(_Functor __f,
        typename enable_if<
   !is_integral<_Functor>::value, _Useless>::type)
      : _Function_base()
      {
 typedef _Function_handler<_Signature_type, _Functor> _My_handler;

 if (_My_handler::_M_not_empty_function(__f))
   {
     _M_invoker = &_My_handler::_M_invoke;
     _M_manager = &_My_handler::_M_manager;
     _My_handler::_M_init_functor(_M_functor, std::move(__f));
   }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 __throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }


  template<typename _Res, typename... _ArgTypes>
    const type_info&
    function<_Res(_ArgTypes...)>::
    target_type() const
    {
      if (_M_manager)
 {
   _Any_data __typeinfo_result;
   _M_manager(__typeinfo_result, _M_functor, __get_type_info);
   return *__typeinfo_result._M_access<const type_info*>();
 }
      else
 return typeid(void);
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      _Functor*
      function<_Res(_ArgTypes...)>::
      target()
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     if (_M_manager(__ptr, _M_functor, __get_functor_ptr)
  && !is_const<_Functor>::value)
       return 0;
     else
       return __ptr._M_access<_Functor*>();
   }
 else
   return 0;
      }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      const _Functor*
      function<_Res(_ArgTypes...)>::
      target() const
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     _M_manager(__ptr, _M_functor, __get_functor_ptr);
     return __ptr._M_access<const _Functor*>();
   }
 else
   return 0;
      }
# 2224 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t)
    { return !static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator==(nullptr_t, const function<_Res(_Args...)>& __f)
    { return !static_cast<bool>(__f); }
# 2242 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t)
    { return static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator!=(nullptr_t, const function<_Res(_Args...)>& __f)
    { return static_cast<bool>(__f); }
# 2260 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/functional" 3
  template<typename _Res, typename... _Args>
    inline void
    swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y)
    { __x.swap(__y); }


}
# 69 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator>
    void
    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c)
    {




      if (*__a < *__b)
 {
   if (*__b < *__c)
     std::iter_swap(__a, __b);
   else if (*__a < *__c)
     std::iter_swap(__a, __c);
 }
      else if (*__a < *__c)
 return;
      else if (*__b < *__c)
 std::iter_swap(__a, __c);
      else
 std::iter_swap(__a, __b);
    }


  template<typename _Iterator, typename _Compare>
    void
    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c,
   _Compare __comp)
    {





      if (__comp(*__a, *__b))
 {
   if (__comp(*__b, *__c))
     std::iter_swap(__a, __b);
   else if (__comp(*__a, *__c))
     std::iter_swap(__a, __c);
 }
      else if (__comp(*__a, *__c))
 return;
      else if (__comp(*__b, *__c))
 std::iter_swap(__a, __c);
      else
 std::iter_swap(__a, __b);
    }




  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    __find(_InputIterator __first, _InputIterator __last,
    const _Tp& __val, input_iterator_tag)
    {
      while (__first != __last && !(*__first == __val))
 ++__first;
      return __first;
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !bool(__pred(*__first)))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,
    const _Tp& __val, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (*__first == __val)
     return __first;
   ++__first;
 case 2:
   if (*__first == __val)
     return __first;
   ++__first;
 case 1:
   if (*__first == __val)
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }



  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && bool(__pred(*__first)))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if_not(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 2:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 1:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }
# 326 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        std::forward_iterator_tag)
    {
      __first = std::find(__first, __last, __val);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && *__i == __val)
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::find(++__i, __last, __val);
 }
      return __last;
    }






  template<typename _RandomAccessIter, typename _Integer, typename _Tp>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!(*__lookAhead == __val))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        *__backTrack == __val; --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 411 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::forward_iterator_tag)
    {
      while (__first != __last && !bool(__binary_pred(*__first, __val)))
        ++__first;

      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && bool(__binary_pred(*__i, __val)))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = ++__i;
   while (__first != __last
   && !bool(__binary_pred(*__first, __val)))
     ++__first;
 }
      return __last;
    }







  template<typename _RandomAccessIter, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!bool(__binary_pred(*__lookAhead, __val)))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        __binary_pred(*__backTrack, __val); --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2, __last2);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2,
      __last2, __comp);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1),
             __rlast1,
             _RevIterator2(__last2),
             __rlast2);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }

  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1), __rlast1,
         _RevIterator2(__last2), __rlast2,
         __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 649 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2));
    }
# 695 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __comp);
    }
# 730 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if_not(__first, __last, __pred); }
# 747 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if(__first, __last, __pred); }
# 764 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return !std::none_of(__first, __last, __pred); }
# 779 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
  _Predicate __pred)
    {




                                                     ;
      return std::__find_if_not(__first, __last, __pred,
    std::__iterator_category(__first));
    }
# 803 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    is_partitioned(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      __first = std::find_if_not(__first, __last, __pred);
      return std::none_of(__first, __last, __pred);
    }
# 821 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    partition_point(_ForwardIterator __first, _ForwardIterator __last,
      _Predicate __pred)
    {






                                                     ;

      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__pred(*__middle))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 874 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (!(*__first == __value))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 911 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (!bool(__pred(*__first)))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 950 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }


  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    _OutputIterator
    __copy_n(_InputIterator __first, _Size __n,
      _OutputIterator __result, input_iterator_tag)
    {
      for (; __n > 0; --__n)
 {
   *__result = *__first;
   ++__first;
   ++__result;
 }
      return __result;
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _OutputIterator>
    inline _OutputIterator
    __copy_n(_RandomAccessIterator __first, _Size __n,
      _OutputIterator __result, random_access_iterator_tag)
    { return std::copy(__first, __first + __n, __result); }
# 1008 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    inline _OutputIterator
    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
    {





      return std::__copy_n(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 1036 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator1,
    typename _OutputIterator2, typename _Predicate>
    pair<_OutputIterator1, _OutputIterator2>
    partition_copy(_InputIterator __first, _InputIterator __last,
     _OutputIterator1 __out_true, _OutputIterator2 __out_false,
     _Predicate __pred)
    {
# 1051 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__out_true = *__first;
     ++__out_true;
   }
 else
   {
     *__out_false = *__first;
     ++__out_false;
   }

      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
    }
# 1086 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {





                                                     ;

      __first = std::find(__first, __last, __value);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!(*__first == __value))
          {
            *__result = std::move(*__first);
            ++__result;
          }
      return __result;
    }
# 1129 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      __first = std::find_if(__first, __last, __pred);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!bool(__pred(*__first)))
          {
            *__result = std::move(*__first);
            ++__result;
          }
      return __result;
    }
# 1169 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {





                                                     ;


      __first = std::adjacent_find(__first, __last);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!(*__dest == *__first))
   *++__dest = std::move(*__first);
      return ++__dest;
    }
# 1209 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {






                                                     ;


      __first = std::adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__dest, *__first)))
   *++__dest = std::move(*__first);
      return ++__dest;
    }






  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result,
    forward_iterator_tag, output_iterator_tag)
    {

      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!(*__first == *__next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result,
    input_iterator_tag, output_iterator_tag)
    {

      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!(__value == *__first))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _ForwardIterator>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result,
    input_iterator_tag, forward_iterator_tag)
    {

      *__result = *__first;
      while (++__first != __last)
 if (!(*__result == *__first))
   *++__result = *__first;
      return ++__result;
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {





      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!bool(__binary_pred(*__first, *__next)))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {





      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!bool(__binary_pred(__value, *__first)))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {





      *__result = *__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__result, *__first)))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1437 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {



                                                     ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1464 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {





                                                     ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }


  template<typename _ForwardIterator>
    void
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle || __last == __middle)
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
    }


  template<typename _BidirectionalIterator>
    void
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 std::__reverse(__middle, __last, bidirectional_iterator_tag());
      else
 std::__reverse(__first, __middle, bidirectional_iterator_tag());
    }


  template<typename _RandomAccessIterator>
    void
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return;
 }

      _RandomAccessIterator __p = __first;

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*__p);
    std::move(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = std::move(__t);
    return;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*(__p + __n - 1));
    std::move_backward(__p, __p + __n - 1, __p + __n);
    *__p = std::move(__t);
    return;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
     }
 }
    }
# 1668 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline void
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {



                                                       ;
                                                      ;

      typedef typename iterator_traits<_ForwardIterator>::iterator_category
 _IterType;
      std::__rotate(__first, __middle, __last, _IterType());
    }
# 1702 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {




                                                       ;
                                                      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }




  template<typename _ForwardIterator, typename _Predicate, typename _Distance>
    _ForwardIterator
    __inplace_stable_partition(_ForwardIterator __first,
          _ForwardIterator __last,
          _Predicate __pred, _Distance __len)
    {
      if (__len == 1)
 return __pred(*__first) ? __last : __first;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __begin = std::__inplace_stable_partition(__first,
         __middle,
         __pred,
         __len / 2);
      _ForwardIterator __end = std::__inplace_stable_partition(__middle, __last,
              __pred,
              __len
              - __len / 2);
      std::rotate(__begin, __middle, __end);
      std::advance(__begin, std::distance(__middle, __end));
      return __begin;
    }


  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;
   for (; __first != __last; ++__first)
     if (__pred(*__first))
       {
  *__result1 = std::move(*__first);
  ++__result1;
       }
     else
       {
  *__result2 = std::move(*__first);
  ++__result2;
       }
   std::move(__buffer, __result2, __result1);
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std::advance(__middle, __len / 2);
   _ForwardIterator __begin =
     std::__stable_partition_adaptive(__first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size);
   _ForwardIterator __end =
     std::__stable_partition_adaptive(__middle, __last, __pred,
          __len - __len / 2,
          __buffer, __buffer_size);
   std::rotate(__begin, __middle, __end);
   std::advance(__begin, std::distance(__middle, __end));
   return __begin;
 }
    }
# 1860 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      if (__first == __last)
 return __first;
      else
 {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;
   typedef typename iterator_traits<_ForwardIterator>::difference_type
     _DistanceType;

   _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first,
        __last);
 if (__buf.size() > 0)
   return
     std::__stable_partition_adaptive(__first, __last, __pred,
       _DistanceType(__buf.requested_size()),
       __buf.begin(),
       _DistanceType(__buf.size()));
 else
   return
     std::__inplace_stable_partition(__first, __last, __pred,
      _DistanceType(__buf.requested_size()));
 }
    }


  template<typename _RandomAccessIterator>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last)
    {
      std::make_heap(__first, __middle);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (*__i < *__first)
   std::__pop_heap(__first, __middle, __i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(*__i, *__first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }
# 1942 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 1962 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last);
      while (__first != __last)
 {
   if (*__first < *__result_first)
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first));
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last);
      return __result_real_last;
    }
# 2008 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 2032 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(*__first, *__result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first),
          __comp);
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }


  template<typename _RandomAccessIterator>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__val < *__next)
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, *__next))
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last)
    {
      if (__first == __last)
 return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (*__i < *__first)
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i);
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(*__i, *__first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i, __comp);
 }
    }


  template<typename _RandomAccessIterator>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i, __comp);
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold));
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last);
 }
      else
 std::__insertion_sort(__first, __last);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last, const _Tp& __pivot)
    {
      while (true)
 {
   while (*__first < __pivot)
     ++__first;
   --__last;
   while (__pivot < *__last)
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     const _Tp& __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(*__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, *__last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1));
      return std::__unguarded_partition(__first + 1, __last, *__first);
    }



  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1), __comp);
      return std::__unguarded_partition(__first + 1, __last, *__first, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last);
   std::__introsort_loop(__cut, __last, __depth_limit);
   __last = __cut;
 }
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Size>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last);


       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2392 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;






                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2439 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;




                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__val < *__middle)
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2488 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;






                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2541 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;





                                                                  ;
                                                                  ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__val < *__middle)
     __len = __half;
   else
     {
       _ForwardIterator __left = std::lower_bound(__first, __middle,
        __val);
       std::advance(__first, __len);
       _ForwardIterator __right = std::upper_bound(++__middle, __first,
         __val);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2603 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;
# 2620 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                    ;

                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       _ForwardIterator __left = std::lower_bound(__first, __middle,
        __val, __comp);
       std::advance(__first, __len);
       _ForwardIterator __right = std::upper_bound(++__middle, __first,
         __val, __comp);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2663 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




                                                                  ;
                                                                  ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val);
      return __i != __last && !(__val < *__i);
    }
# 2696 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

                    ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (*__last2 < *__last1)
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(*__last2, *__last1))
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::move(__middle, __last, __buffer);
       std::move_backward(__first, __middle, __last);
       return std::move(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::move(__first, __middle, __buffer);
       std::move(__middle, __last, __first);
       return std::move_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last,
           *__first_cut);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle,
          *__second_cut);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer, __buffer_size);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last, *__first_cut,
           __comp);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle, *__second_cut,
          __comp);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (*__middle < *__first)
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22);
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (__comp(*__middle, *__first))
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut,
       __comp);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut,
      __comp);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }
# 3120 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;





                                                  ;
                                                 ;

      if (__first == __middle || __middle == __last)
 return;

      _DistanceType __len1 = std::distance(__first, __middle);
      _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1, __len2);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()));
    }
# 3175 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;






                                                               ;
                                                              ;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1,
        __len2, __comp);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()),
         __comp);
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result));


    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result));


    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result,
        _Distance __step_size)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step, __result);
   __first += __two_step;
 }

      __step_size = std::min(_Distance(__last - __first), __step_size);
      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result);
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first,__first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer, __step_size);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle,
          __buffer, __buffer_size);
   std::__stable_sort_adaptive(__middle, __last,
          __buffer, __buffer_size);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer);
   std::__merge_sort_with_buffer(__middle, __last, __buffer);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size);
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle);
      std::__inplace_stable_sort(__middle, __last);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 3513 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;






                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first2 < *__first1)
   return false;
 else if(*__first1 < *__first2)
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3562 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 3581 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first2, *__first1))
   return false;
 else if(__comp(*__first1, *__first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3617 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__i < *__ii)
     {
       _BidirectionalIterator __j = __last;
       while (!(*__i < *--__j))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3674 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__i, *__ii))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*__i, *--__j)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3730 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__ii < *__i)
     {
       _BidirectionalIterator __j = __last;
       while (!(*--__j < *__i))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3787 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__ii, *__i))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*--__j, *__i)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3847 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {






                                                     ;

      for (; __first != __last; ++__first, ++__result)
 if (*__first == __old_value)
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3884 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {






                                                     ;

      for (; __first != __last; ++__first, ++__result)
 if (__pred(*__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3915 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last)
    { return std::is_sorted_until(__first, __last) == __last; }
# 3929 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    { return std::is_sorted_until(__first, __last, __comp) == __last; }
# 3943 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, ++__next)
 if (*__next < *__first)
   return __next;
      return __next;
    }
# 3972 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
      _Compare __comp)
    {





                                                     ;

      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, ++__next)
 if (__comp(*__next, *__first))
   return __next;
      return __next;
    }
# 4001 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _Tp>
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b)
    {



      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
                : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 4020 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
                       : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 4039 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min, __max;
      if (*__next < *__first)
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (*__first < *__min)
  __min = __first;
       else if (!(*__first < *__max))
  __max = __first;
       break;
     }

   if (*__next < *__first)
     {
       if (*__next < *__min)
  __min = __next;
       if (!(*__first < *__max))
  __max = __first;
     }
   else
     {
       if (*__first < *__min)
  __min = __first;
       if (!(*__next < *__max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }
# 4115 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last,
     _Compare __comp)
    {





                                                     ;

      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min, __max;
      if (__comp(*__next, *__first))
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (__comp(*__first, *__min))
  __min = __first;
       else if (!__comp(*__first, *__max))
  __max = __first;
       break;
     }

   if (__comp(*__next, *__first))
     {
       if (__comp(*__next, *__min))
  __min = __next;
       if (!__comp(*__first, *__max))
  __max = __first;
     }
   else
     {
       if (__comp(*__first, *__min))
  __min = __first;
       if (!__comp(*__next, *__max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }


  template<typename _Tp>
    inline _Tp
    min(initializer_list<_Tp> __l)
    { return *std::min_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    inline _Tp
    min(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::min_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    inline _Tp
    max(initializer_list<_Tp> __l)
    { return *std::max_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    inline _Tp
    max(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::max_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end());
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _Tp, typename _Compare>
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l, _Compare __comp)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end(), __comp);
      return std::make_pair(*__p.first, *__p.second);
    }
# 4232 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {


      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!(*__first1 == *__first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::find(__first1, __scan, *__scan))
     continue;

   auto __matches = std::count(__first2, __last2, *__scan);
   if (0 == __matches
       || std::count(__scan, __last1, *__scan) != __matches)
     return false;
 }
      return true;
    }
# 4276 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__pred(*__first1, *__first2)))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   using std::placeholders::_1;

   if (__scan != std::find_if(__first1, __scan,
      std::bind(__pred, _1, *__scan)))
     continue;

   auto __matches = std::count_if(__first2, __last2,
      std::bind(__pred, _1, *__scan));
   if (0 == __matches
       || std::count_if(__scan, __last1,
          std::bind(__pred, _1, *__scan)) != __matches)
     return false;
 }
      return true;
    }
# 4326 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator,
    typename _UniformRandomNumberGenerator>
    void
    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _UniformRandomNumberGenerator&& __g)
    {



                                                     ;

      if (__first == __last)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      typedef typename __distr_type::param_type __p_type;
      __distr_type __d;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    }
# 4371 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {


                                                     ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return std::move(__f);
    }
# 4392 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {




                                                     ;
      return std::__find(__first, __last, __val,
           std::__iterator_category(__first));
    }
# 4416 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {




                                                     ;
      return std::__find_if(__first, __last, __pred,
       std::__iterator_category(__first));
    }
# 4445 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 4484 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 4516 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (*__first == *__next)
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4548 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {





                                                     ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (__binary_pred(*__first, *__next))
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4580 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {




                                                     ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (*__first == __value)
   ++__n;
      return __n;
    }
# 4605 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {




                                                     ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(*__first))
   ++__n;
      return __n;
    }
# 4645 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::find(__first1, __last1, *__first2);


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 = std::find(__first1, __last1, *__first2);
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (*__current == *__p)
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4716 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {






                                                       ;
                                                       ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   return __first1;
 }


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(*__current, *__p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4790 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {




                                                     ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 return std::find(__first, __last, __val);
      return std::__search_n(__first, __last, __count, __val,
        std::__iterator_category(__first));
    }
# 4826 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 {
   while (__first != __last && !bool(__binary_pred(*__first, __val)))
     ++__first;
   return __first;
 }
      return std::__search_n(__first, __last, __count, __val, __binary_pred,
        std::__iterator_category(__first));
    }
# 4868 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {





                                                     ;

      for (; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4904 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {






                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4937 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4969 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 5001 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {




                                                     ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 5032 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {





      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __gen();
      return __first;
    }
# 5069 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {






                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 5108 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result, __binary_pred,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 5140 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {



                                                     ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   std::iter_swap(__i, __first + (std::rand() % ((__i - __first) + 1)));
    }
# 5168 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,

     _RandomNumberGenerator&& __rand)



    {



                                                     ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __rand((__i - __first) + 1));
    }
# 5204 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 5238 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                       ;
                                                      ;

      std::__heap_select(__first, __middle, __last);
      std::sort_heap(__first, __middle);
    }
# 5277 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                       ;
                                                      ;

      std::__heap_select(__first, __middle, __last, __comp);
      std::sort_heap(__first, __middle, __comp);
    }
# 5315 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2);
    }
# 5354 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2, __comp);
    }
# 5392 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                     ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2);
   std::__final_insertion_sort(__first, __last);
 }
    }
# 5428 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;






                                                     ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2, __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }
# 5469 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5489 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5532 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5553 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5592 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;





                                                     ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()));
    }
# 5634 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;







                                                     ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 5680 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5701 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first1 < *__first2)
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5747 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5770 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first1, *__first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5814 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5833 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   ++__first1;
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5871 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5892 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   ++__first1;
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5929 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 5948 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5990 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6011 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 6048 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6069 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2, std::copy(__first1,
          __last1, __result));
    }
# 6114 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;
# 6138 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 6171 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__first < *__result)
   __result = __first;
      return __result;
    }
# 6199 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__first, *__result))
   __result = __first;
      return __result;
    }
# 6227 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__result < *__first)
   __result = __first;
      return __result;
    }
# 6255 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__result, *__first))
   __result = __first;
      return __result;
    }


}
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/algorithm" 2 3
# 28 "firmware/nnet_utils/nnet_helpers.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 1 3
# 58 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 3
# 58 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 3

# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 1 3
# 68 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 88 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
  enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;
    typedef const _Rb_tree_node_base* _Const_Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Const_Base_ptr
    _S_minimum(_Const_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }

    static _Const_Base_ptr
    _S_maximum(_Const_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;
      _Val _M_value_field;


      template<typename... _Args>
        _Rb_tree_node(_Args&&... __args)
 : _Rb_tree_node_base(),
   _M_value_field(std::forward<_Args>(__args)...) { }

    };

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Link_type __x)
      : _M_node(__x) { }

      reference
      operator*() const
      { return static_cast<_Link_type>(_M_node)->_M_value_field; }

      pointer
      operator->() const
      { return std::__addressof(static_cast<_Link_type>
    (_M_node)->_M_value_field); }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
  };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_const_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Link_type __x)
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it)
      : _M_node(__it._M_node) { }

      iterator
      _M_const_cast() const
      { return iterator(static_cast<typename iterator::_Link_type>
   (const_cast<typename iterator::_Base_ptr>(_M_node))); }

      reference
      operator*() const
      { return static_cast<_Link_type>(_M_node)->_M_value_field; }

      pointer
      operator->() const
      { return std::__addressof(static_cast<_Link_type>
    (_M_node)->_M_value_field); }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node != __y._M_node; }

  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
                                _Rb_tree_node_base* __x,
                                _Rb_tree_node_base* __p,
                                _Rb_tree_node_base& __header) throw ();

  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header) throw ();


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename _Alloc::template rebind<_Rb_tree_node<_Val> >::other
              _Node_allocator;

    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef const _Rb_tree_node_base* _Const_Base_ptr;

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef _Rb_tree_node<_Val>* _Link_type;
      typedef const _Rb_tree_node<_Val>* _Const_Link_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator()
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }

      const _Node_allocator&
      _M_get_Node_allocator() const
      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
      { return _M_impl._Node_allocator::allocate(1); }

      void
      _M_put_node(_Link_type __p)
      { _M_impl._Node_allocator::deallocate(__p, 1); }
# 398 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      template<typename... _Args>
        _Link_type
        _M_create_node(_Args&&... __args)
 {
   _Link_type __tmp = _M_get_node();
   if (true)
     {
       _M_get_Node_allocator().construct(__tmp,
          std::forward<_Args>(__args)...);
     }
   if (false)
     {
       _M_put_node(__tmp);
                              ;
     }
   return __tmp;
 }

      void
      _M_destroy_node(_Link_type __p)
      {
 _M_get_Node_allocator().destroy(__p);
 _M_put_node(__p);
      }


      _Link_type
      _M_clone_node(_Const_Link_type __x)
      {
 _Link_type __tmp = _M_create_node(__x->_M_value_field);
 __tmp->_M_color = __x->_M_color;
 __tmp->_M_left = 0;
 __tmp->_M_right = 0;
 return __tmp;
      }

    protected:
      template<typename _Key_compare,
        bool _Is_pod_comparator = __is_pod(_Key_compare)>
        struct _Rb_tree_impl : public _Node_allocator
        {
   _Key_compare _M_key_compare;
   _Rb_tree_node_base _M_header;
   size_type _M_node_count;

   _Rb_tree_impl()
   : _Node_allocator(), _M_key_compare(), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

   _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
   : _Node_allocator(__a), _M_key_compare(__comp), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

 private:
   void
   _M_initialize()
   {
     this->_M_header._M_color = _S_red;
     this->_M_header._M_parent = 0;
     this->_M_header._M_left = &this->_M_header;
     this->_M_header._M_right = &this->_M_header;
   }
 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root()
      { return this->_M_impl._M_header._M_parent; }

      _Const_Base_ptr
      _M_root() const
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost()
      { return this->_M_impl._M_header._M_left; }

      _Const_Base_ptr
      _M_leftmost() const
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost()
      { return this->_M_impl._M_header._M_right; }

      _Const_Base_ptr
      _M_rightmost() const
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin()
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }

      _Const_Link_type
      _M_begin() const
      {
 return static_cast<_Const_Link_type>
   (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end()
      { return static_cast<_Link_type>(&this->_M_impl._M_header); }

      _Const_Link_type
      _M_end() const
      { return static_cast<_Const_Link_type>(&this->_M_impl._M_header); }

      static const_reference
      _S_value(_Const_Link_type __x)
      { return __x->_M_value_field; }

      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_left); }

      static _Const_Link_type
      _S_left(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_right); }

      static _Const_Link_type
      _S_right(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x)->_M_value_field; }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Base_ptr
      _S_minimum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Const_Base_ptr
      _S_minimum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Base_ptr
      _S_maximum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

      static _Const_Base_ptr
      _S_maximum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type> iterator;
      typedef _Rb_tree_const_iterator<value_type> const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    private:

      template<typename _Arg>
        iterator
        _M_insert_(_Const_Base_ptr __x, _Const_Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
        iterator
        _M_insert_lower(_Base_ptr __x, _Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
        iterator
        _M_insert_equal_lower(_Arg&& __x);
# 592 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      _Link_type
      _M_copy(_Const_Link_type __x, _Link_type __p);

      void
      _M_erase(_Link_type __x);

      iterator
      _M_lower_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

      iterator
      _M_upper_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

    public:

      _Rb_tree() { }

      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, __a) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())
      {
 if (__x._M_root() != 0)
   {
     _M_root() = _M_copy(__x._M_begin(), _M_end());
     _M_leftmost() = _S_minimum(_M_root());
     _M_rightmost() = _S_maximum(_M_root());
     _M_impl._M_node_count = __x._M_impl._M_node_count;
   }
      }


      _Rb_tree(_Rb_tree&& __x);


      ~_Rb_tree()
      { _M_erase(_M_begin()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin()
      {
 return iterator(static_cast<_Link_type>
   (this->_M_impl._M_header._M_left));
      }

      const_iterator
      begin() const
      {
 return const_iterator(static_cast<_Const_Link_type>
         (this->_M_impl._M_header._M_left));
      }

      iterator
      end()
      { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }

      const_iterator
      end() const
      {
 return const_iterator(static_cast<_Const_Link_type>
         (&this->_M_impl._M_header));
      }

      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }

      bool
      empty() const
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const
      { return _M_impl._M_node_count; }

      size_type
      max_size() const
      { return _M_get_Node_allocator().max_size(); }

      void
      swap(_Rb_tree& __t);



      template<typename _Arg>
        pair<iterator, bool>
        _M_insert_unique(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_unique_(const_iterator __position, _Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal_(const_iterator __position, _Arg&& __x);
# 736 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      template<typename _InputIterator>
        void
        _M_insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
        void
        _M_insert_equal(_InputIterator __first, _InputIterator __last);

    private:
      void
      _M_erase_aux(const_iterator __position);

      void
      _M_erase_aux(const_iterator __first, const_iterator __last);

    public:



      iterator
      erase(const_iterator __position)
      {
 const_iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result._M_const_cast();
      }


      iterator
      erase(iterator __position)
      {
 iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result;
      }
# 782 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      size_type
      erase(const key_type& __x);




      iterator
      erase(const_iterator __first, const_iterator __last)
      {
 _M_erase_aux(__first, __last);
 return __last._M_const_cast();
      }
# 803 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_tree.h" 3
      void
      erase(const key_type* __first, const key_type* __last);

      void
      clear()
      {
        _M_erase(_M_begin());
        _M_leftmost() = _M_end();
        _M_root() = 0;
        _M_rightmost() = _M_end();
        _M_impl._M_node_count = 0;
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      lower_bound(const key_type& __k) const
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      iterator
      upper_bound(const key_type& __k)
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      upper_bound(const key_type& __k) const
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;


      bool
      __rb_verify() const;
    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _Rb_tree(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&& __x)
    : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())
    {
      if (__x._M_root() != 0)
 {
   _M_root() = __x._M_root();
   _M_leftmost() = __x._M_leftmost();
   _M_rightmost() = __x._M_rightmost();
   _M_root()->_M_parent = _M_end();

   __x._M_root() = 0;
   __x._M_leftmost() = __x._M_end();
   __x._M_rightmost() = __x._M_end();

   this->_M_impl._M_node_count = __x._M_impl._M_node_count;
   __x._M_impl._M_node_count = 0;
 }
    }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
    {
      if (this != &__x)
 {

   clear();
   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root() != 0)
     {
       _M_root() = _M_copy(__x._M_begin(), _M_end());
       _M_leftmost() = _S_minimum(_M_root());
       _M_rightmost() = _S_maximum(_M_root());
       _M_impl._M_node_count = __x._M_impl._M_node_count;
     }
 }
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_(_Const_Base_ptr __x, _Const_Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_KeyOfValue()(__v),
            _S_key(__p)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z,
        const_cast<_Base_ptr>(__p),
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_lower(_Base_ptr __x, _Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_lower(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__x, __y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
    _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
    _M_copy(_Const_Link_type __x, _Link_type __p)
    {

      _Link_type __top = _M_clone_node(__x);
      __top->_M_parent = __p;

      if (true)
 {
   if (__x->_M_right)
     __top->_M_right = _M_copy(_S_right(__x), __top);
   __p = __top;
   __x = _S_left(__x);

   while (__x != 0)
     {
       _Link_type __y = _M_clone_node(__x);
       __p->_M_left = __y;
       __y->_M_parent = __p;
       if (__x->_M_right)
  __y->_M_right = _M_copy(_S_right(__x), __y);
       __p = __y;
       __x = _S_left(__x);
     }
 }
      if (false)
 {
   _M_erase(__top);
                          ;
 }
      return __top;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {

      while (__x != 0)
 {
   _M_erase(_S_right(__x));
   _Link_type __y = _S_left(__x);
   _M_destroy_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<iterator,
            iterator>(_M_lower_bound(__x, __y, __k),
        _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<iterator, iterator>(iterator(__y),
          iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      _Const_Link_type __x = _M_begin();
      _Const_Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Const_Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<const_iterator,
            const_iterator>(_M_lower_bound(__x, __y, __k),
       _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<const_iterator, const_iterator>(const_iterator(__y),
        const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)
    {
      if (_M_root() == 0)
 {
   if (__t._M_root() != 0)
     {
       _M_root() = __t._M_root();
       _M_leftmost() = __t._M_leftmost();
       _M_rightmost() = __t._M_rightmost();
       _M_root()->_M_parent = _M_end();

       __t._M_root() = 0;
       __t._M_leftmost() = __t._M_end();
       __t._M_rightmost() = __t._M_end();
     }
 }
      else if (__t._M_root() == 0)
 {
   __t._M_root() = _M_root();
   __t._M_leftmost() = _M_leftmost();
   __t._M_rightmost() = _M_rightmost();
   __t._M_root()->_M_parent = __t._M_end();

   _M_root() = 0;
   _M_leftmost() = _M_end();
   _M_rightmost() = _M_end();
 }
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
 }

      std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);



      std::__alloc_swap<_Node_allocator>::
 _S_do_it(_M_get_Node_allocator(), __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(_KeyOfValue()(__v), _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return pair<iterator, bool>
       (_M_insert_(__x, __y, std::forward<_Arg>(__v)), true);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), _KeyOfValue()(__v)))
 return pair<iterator, bool>
   (_M_insert_(__x, __y, std::forward<_Arg>(__v)), true);
      return pair<iterator, bool>(__j, false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(_KeyOfValue()(__v), _S_key(__x)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_(__x, __y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique_(const_iterator __position, _Arg&& __v)



    {

      if (__position._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()),
     _KeyOfValue()(__v)))
     return _M_insert_(0, _M_rightmost(), std::forward<_Arg>(__v));
   else
     return _M_insert_unique(std::forward<_Arg>(__v)).first;
 }
      else if (_M_impl._M_key_compare(_KeyOfValue()(__v),
          _S_key(__position._M_node)))
 {

   const_iterator __before = __position;
   if (__position._M_node == _M_leftmost())
     return _M_insert_(_M_leftmost(), _M_leftmost(),
         std::forward<_Arg>(__v));
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node),
       _KeyOfValue()(__v)))
     {
       if (_S_right(__before._M_node) == 0)
  return _M_insert_(0, __before._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__position._M_node,
      __position._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_unique(std::forward<_Arg>(__v)).first;
 }
      else if (_M_impl._M_key_compare(_S_key(__position._M_node),
          _KeyOfValue()(__v)))
 {

   const_iterator __after = __position;
   if (__position._M_node == _M_rightmost())
     return _M_insert_(0, _M_rightmost(),
         std::forward<_Arg>(__v));
   else if (_M_impl._M_key_compare(_KeyOfValue()(__v),
       _S_key((++__after)._M_node)))
     {
       if (_S_right(__position._M_node) == 0)
  return _M_insert_(0, __position._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__after._M_node, __after._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_unique(std::forward<_Arg>(__v)).first;
 }
      else

 return __position._M_const_cast();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_(const_iterator __position, _Arg&& __v)



    {

      if (__position._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(_KeyOfValue()(__v),
      _S_key(_M_rightmost())))
     return _M_insert_(0, _M_rightmost(),
         std::forward<_Arg>(__v));
   else
     return _M_insert_equal(std::forward<_Arg>(__v));
 }
      else if (!_M_impl._M_key_compare(_S_key(__position._M_node),
           _KeyOfValue()(__v)))
 {

   const_iterator __before = __position;
   if (__position._M_node == _M_leftmost())
     return _M_insert_(_M_leftmost(), _M_leftmost(),
         std::forward<_Arg>(__v));
   else if (!_M_impl._M_key_compare(_KeyOfValue()(__v),
        _S_key((--__before)._M_node)))
     {
       if (_S_right(__before._M_node) == 0)
  return _M_insert_(0, __before._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__position._M_node,
      __position._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_equal(std::forward<_Arg>(__v));
 }
      else
 {

   const_iterator __after = __position;
   if (__position._M_node == _M_rightmost())
     return _M_insert_(0, _M_rightmost(),
         std::forward<_Arg>(__v));
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node),
        _KeyOfValue()(__v)))
     {
       if (_S_right(__position._M_node) == 0)
  return _M_insert_(0, __position._M_node,
      std::forward<_Arg>(__v));
       else
  return _M_insert_(__after._M_node, __after._M_node,
      std::forward<_Arg>(__v));
     }
   else
     return _M_insert_equal_lower(std::forward<_Arg>(__v));
 }
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_unique(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_equal(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (const_cast<_Base_ptr>(__position._M_node),
     this->_M_impl._M_header));
      _M_destroy_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   erase(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      erase(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
 erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  __attribute__ ((__pure__)) unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
                       const _Rb_tree_node_base* __root) throw ();

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
   _Const_Link_type __L = _S_left(__x);
   _Const_Link_type __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }


}
# 60 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 1 3
# 64 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 86 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename _Alloc::template rebind<value_type>::other
        _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

    public:


      typedef typename _Pair_alloc_type::pointer pointer;
      typedef typename _Pair_alloc_type::const_pointer const_pointer;
      typedef typename _Pair_alloc_type::reference reference;
      typedef typename _Pair_alloc_type::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      map()
      : _M_t() { }






      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a) { }
# 172 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map(const map& __x)
      : _M_t(__x._M_t) { }
# 183 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map(map&& __x)
      : _M_t(std::move(__x._M_t)) { }
# 197 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map(initializer_list<value_type> __l,
   const _Compare& __c = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__c, __a)
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }
# 213 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_unique(__first, __last); }
# 229 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, __a)
        { _M_t._M_insert_unique(__first, __last); }
# 252 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map&
      operator=(const map& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 267 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map&
      operator=(map&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 288 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      map&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const
      { return _M_t.get_allocator(); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }







      const_iterator
      cbegin() const
      { return _M_t.begin(); }






      const_iterator
      cend() const
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const
      { return _M_t.rend(); }






      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 444 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
          __i = insert(__i, value_type(__k, mapped_type()));
 return (*__i).second;
      }


      mapped_type&
      operator[](key_type&& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
          __i = insert(__i, std::make_pair(std::move(__k), mapped_type()));
 return (*__i).second;
      }
# 481 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 516 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        std::pair<iterator, bool>
        insert(_Pair&& __x)
        { return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }
# 537 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      void
      insert(std::initializer_list<value_type> __list)
      { insert(__list.begin(), __list.end()); }
# 565 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_unique_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_unique_(__position,
     std::forward<_Pair>(__x)); }
# 591 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_unique(__first, __last); }
# 612 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 647 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 666 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 697 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      void
      swap(map& __x)
      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 740 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 755 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 767 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
# 782 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 797 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 836 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 855 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);
    };
# 880 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 897 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 61 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 2 3
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 1 3
# 63 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 85 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
  template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename _Alloc::template rebind<value_type>::other
        _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

    public:


      typedef typename _Pair_alloc_type::pointer pointer;
      typedef typename _Pair_alloc_type::const_pointer const_pointer;
      typedef typename _Pair_alloc_type::reference reference;
      typedef typename _Pair_alloc_type::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;






      multimap()
      : _M_t() { }






      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a) { }
# 170 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap(const multimap& __x)
      : _M_t(__x._M_t) { }
# 181 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap(multimap&& __x)
      : _M_t(std::move(__x._M_t)) { }
# 194 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a)
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }
# 210 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_equal(__first, __last); }
# 226 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
        : _M_t(__comp, __a)
        { _M_t._M_insert_equal(__first, __last); }
# 249 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap&
      operator=(const multimap& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 264 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap&
      operator=(multimap&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 285 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      multimap&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const
      { return _M_t.get_allocator(); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }







      const_iterator
      cbegin() const
      { return _M_t.begin(); }






      const_iterator
      cend() const
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const
      { return _M_t.rend(); }




      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 439 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        iterator
        insert(_Pair&& __x)
        { return _M_t._M_insert_equal(std::forward<_Pair>(__x)); }
# 472 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_equal_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_convertible<_Pair,
        value_type>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_equal_(__position,
           std::forward<_Pair>(__x)); }
# 499 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_equal(__first, __last); }
# 512 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 533 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 568 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 588 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 622 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      void
      swap(multimap& __x)
      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 665 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 680 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }






      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }
# 704 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 719 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 756 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 773 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);
  };
# 798 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 815 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
         multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 62 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/map" 2 3
# 29 "firmware/nnet_utils/nnet_helpers.h" 2
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/hls_stream.h" 1
# 66 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/hls_stream.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_enum.h" 1
# 58 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/etc/autopilot_enum.h"
enum SsdmDataTypes {
    _ssdm_sc_int = 0,
    _ssdm_c_int = _ssdm_sc_int,
    _ssdm_sc_uint = 1,
    _ssdm_c_uint = _ssdm_sc_uint,
    _ssdm_sc_bigint = 2,
    _ssdm_sc_biguint = 3,
};



enum SsdmPortTypes {
    _ssdm_sc_in = 0,
    _ssdm_sc_out = 1,
    _ssdm_sc_inout = 2,
    _ssdm_sc_in_clk,

    _ssdm_fifo_in,
    _ssdm_sc_fifo_in = _ssdm_fifo_in,
    _ssdm_tlm_fifo_in = _ssdm_fifo_in,
    _ssdm_fifo_out,
    _ssdm_sc_fifo_out = _ssdm_fifo_out,
    _ssdm_tlm_fifo_out = _ssdm_fifo_out,
    _ssdm_fifo_inout,
    _ssdm_sc_fifo_inout = _ssdm_fifo_inout,
    _ssdm_tlm_fifo_inout = _ssdm_fifo_inout,
    _ssdm_sc_bus,
    _ssdm_hls_bus_port = _ssdm_sc_bus,
    _ssdm_AXI4M_bus_port = _ssdm_sc_bus,
    _ssdm_port_end,
};



enum SsdmProcessTypes {
    _ssdm_method = 0,
    _ssdm_sc_method = _ssdm_method,
    _ssdm_thread = 1,
    _ssdm_sc_thread = _ssdm_thread,
    _ssdm_cthread = 2,
    _ssdm_sc_cthread = _ssdm_cthread,
    _ssdm_process_end,
};



enum SsdmSensitiveTypes {
    _ssdm_sensitive = 0,
    _ssdm_sensitive_pos,
    _ssdm_sensitive_neg,
    _ssdm_sensitive_reset0,
    _ssdm_sensitive_reset1,
    _ssdm_sensitive_end,
};



enum SsdmChannelTypes {
    _ssdm_sc_sig,
    _ssdm_fifo,
    _ssdm_sc_fifo = _ssdm_fifo,
    _ssdm_mem_fifo,
    _ssdm_sc_mem_fifo = _ssdm_mem_fifo,
};


enum SsdmRegionTypes {
    _ssdm_region_reset,
    _ssdm_region_protocol,
    _ssdm_region_pipeline,
    _ssdm_region_parallel,
};
# 67 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/hls_stream.h" 2


namespace hls {
# 78 "/home/filipe/Xilinx/Vivado/2018.3/common/technology/autopilot/hls_stream.h"
template<typename __STREAM_T__>
class stream
{
  public:

    inline __attribute__((always_inline)) stream() {
    }

    inline __attribute__((always_inline)) stream(const char* name) {
    }


  private:
    inline __attribute__((always_inline)) stream(const stream< __STREAM_T__ >& chn):V(chn.V) {
    }

    inline __attribute__((always_inline)) stream& operator= (const stream< __STREAM_T__ >& chn) {
        V = chn.V;
        return *this;
    }

  public:

    inline __attribute__((always_inline)) void operator >> (__STREAM_T__& rdata) {
        read(rdata);
    }

    inline __attribute__((always_inline)) void operator << (const __STREAM_T__& wdata) {
        write(wdata);
    }


  public:


    inline __attribute__((always_inline)) bool empty() const {
        bool tmp = _ssdm_StreamCanRead(&V);
        return !tmp;
    }

    inline __attribute__((always_inline)) bool full() const {
        bool tmp = _ssdm_StreamCanWrite(&V);
        return !tmp;
    }



    inline __attribute__((always_inline)) void read(__STREAM_T__& dout) {

        __STREAM_T__ tmp;
        _ssdm_StreamRead(&V, &tmp);
        dout = tmp;



    }

    inline __attribute__((always_inline)) __STREAM_T__ read() {

        __STREAM_T__ tmp;
        _ssdm_StreamRead(&V, &tmp);
        return tmp;





    }



    inline __attribute__((always_inline)) bool read_nb(__STREAM_T__& dout) {
        __STREAM_T__ tmp;
        bool empty_n = _ssdm_StreamNbRead(&V, &tmp);
        dout = tmp;
        return empty_n;
    }



    inline __attribute__((always_inline)) void write(const __STREAM_T__& din) {

        __STREAM_T__ tmp = din;
        _ssdm_StreamWrite(&V, &tmp);



    }



    inline __attribute__((always_inline)) bool write_nb(const __STREAM_T__& din) {
        __STREAM_T__ tmp = din;
        bool full_n = _ssdm_StreamNbWrite(&V, &tmp);
        return full_n;
    }


    inline __attribute__((always_inline)) unsigned size() {
        unsigned size = _ssdm_StreamSize(&V);
        return size;
    }


  public:
    __STREAM_T__ V;
};


}
# 30 "firmware/nnet_utils/nnet_helpers.h" 2

namespace nnet {
# 166 "firmware/nnet_utils/nnet_helpers.h"
template <class dataType, unsigned int nrows>
int read_file_1D(const char * filename, dataType data[nrows])
{
  FILE *fp;
  fp = fopen(filename, "r");
  if (fp == 0) {
    return -1;
  }

  float newval;
  for (int ii = 0; ii < nrows; ii++){
    if (fscanf(fp, "%f\n", &newval) != 0){
      data[ii] = newval;
    } else {
      return -2;
    }
  }
  fclose(fp);
  return 0;
}

template <class dataType, unsigned int nrows, unsigned int ncols>
int read_file_2D(const char * filename, dataType data[nrows][ncols])
{
  FILE *fp;
  fp = fopen(filename, "r");
  if (fp == 0) {
    return -1;
  }

  float newval;
  for (int ii = 0; ii < nrows; ii++) {
    for (int jj = 0; jj < ncols; jj++){
      if (fscanf(fp, "%f\n", &newval) != 0){
        data[ii][jj] = newval;
      } else {
        return -2;
      }
    }
  }
  fclose(fp);
  return 0;
}

template<class in_T, class out_T, int N_IN>
void change_type(hls::stream<in_T> &in, hls::stream<out_T> &out)
{
    in_T datareg;
    hls::stream<out_T> input_trunc;
    for (int ii=0; ii<N_IN; ii++) {
        out << (out_T) in.read();
    }
}

template<class data_T, int N_IN>
void hls_stream_debug(hls::stream<data_T> &data, hls::stream<data_T> &res)
{
    data_T datareg;
    for (int ii=0; ii<N_IN; ii++) {
        datareg = data.read();
        std::cout << "[" << ii << "]: " << datareg << std::endl;
        res << datareg;
    }
}

constexpr int ceillog2(int x){
  return (x <= 2) ? 1 : 1 + ceillog2((x+1) / 2);
}

constexpr int floorlog2(int x){
  return (x < 2) ? 0 : 1 + floorlog2(x / 2);
}

constexpr int pow2(int x){
  return x == 0 ? 1 : 2 * pow2(x - 1);
}

}
# 8 "firmware/parameters.h" 2

# 1 "firmware/nnet_utils/nnet_activation.h" 1
# 23 "firmware/nnet_utils/nnet_activation.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cmath" 3
# 24 "firmware/nnet_utils/nnet_activation.h" 2

# 1 "firmware/nnet_utils/nnet_common.h" 1
# 29 "firmware/nnet_utils/nnet_common.h"
namespace nnet {


enum io_type {io_parallel = 0, io_serial};


typedef ap_fixed<16,4> weight_t_def;
typedef ap_fixed<16,4> bias_t_def;
typedef ap_fixed<32,10> accum_t_def;

 template<class data_T, int NIN1, int NIN2>
   void merge(
       data_T data1[NIN1],
       data_T data2[NIN2],
       data_T res[NIN1+NIN2])
 {
   for(int ii=0; ii<NIN1; ii++){
     res[ii] = data1[ii];
   }
   for(int ii=0; ii<NIN2; ii++){
     res[NIN1+ii] = data2[ii];
   }
 }
# 61 "firmware/nnet_utils/nnet_common.h"
 template<class T, int N, class Op>
 T reduce(T* x, Op op){
 static constexpr int leftN = pow2(floorlog2(N - 1)) > 0 ? pow2(floorlog2(N - 1)) : 0;
_ssdm_SpecConstant(&leftN);
# 63 "firmware/nnet_utils/nnet_common.h"

 static constexpr int rightN = N - leftN > 0 ? N - leftN : 0;
_ssdm_SpecConstant(&rightN);
# 64 "firmware/nnet_utils/nnet_common.h"

 if(N == 1){
  return x[0];
 }else if(N == 2){
  return op(x[0],x[1]);
 }else{
  T left[leftN];
  T right[rightN];
#pragma HLS array_partition variable=&left complete
#pragma HLS array_partition variable=&right complete
 for(int i = 0; i < leftN; i++){
   left[i] = x[i];
  }
  for(int i = 0; i < rightN; i++){
   right[i] = x[i+leftN];
  }
  return op(reduce<T,leftN,Op>(left, op), reduce<T,rightN,Op>(right, op));
 }
 }

 template<class T>
 class Op_add{
 public:
  T operator()(T a, T b){
   return a + b;
  }
 };

 template<class T>
 class Op_and{
 public:
  T operator()(T a, T b){
   return a && b;
  }
 };

 template<class T>
 class Op_or{
 public:
  T operator()(T a, T b){
   return a || b;
  }
 };

 template<class T>
 class Op_max{
 public:
     T operator()(T a, T b){
        return a >= b ? a : b;
     }
 };

 template<class T>
 class Op_min{
 public:
     T operator()(T a, T b){
        return a <= b ? a : b;
     }
 };

}
# 26 "firmware/nnet_utils/nnet_activation.h" 2

namespace nnet {

struct activ_config
{

    static const unsigned n_in = 10;


    static const unsigned table_size = 1024;


    static const unsigned io_type = io_parallel;
    static const unsigned reuse_factor = 1;


    typedef ap_fixed<18,8> table_t;
};




template<class data_T, class res_T, typename CONFIG_T>
void linear(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        res[ii] = data[ii];
    }
}






template<class data_T, class res_T, typename CONFIG_T>
void relu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{




    data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {



        datareg = data[ii];
        if (datareg > 0) res[ii] = datareg;
        else res[ii] = 0;
    }
}

template<class data_T, class res_T, int MAX_INT, typename CONFIG_T>
void relu_max(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = data[ii];
        if (datareg < 0) res[ii] = 0;
        else if (datareg > MAX_INT) res[ii] = MAX_INT;
        else res[ii] = datareg;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void relu6(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    relu_max<data_T, res_T, 6, CONFIG_T>(data, res);
}

template<class data_T, class res_T, typename CONFIG_T>
void relu1(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    relu_max<data_T, res_T, 1, CONFIG_T>(data, res);
}




inline float sigmoid_fcn_float(float input) {
    return 1.0 / (1 + std::exp(-input));
}

template<typename CONFIG_T, int N_TABLE>
void init_sigmoid_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);

        typename CONFIG_T::table_t real_val = sigmoid_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void sigmoid(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t sigmoid_table[CONFIG_T::table_size];




    if (!initialized) {
        init_sigmoid_table<CONFIG_T, CONFIG_T::table_size>(sigmoid_table);
        initialized = true;
    }

    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }


    int data_round;
    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        data_round = data[ii]*CONFIG_T::table_size/16;
        index = data_round + 8*CONFIG_T::table_size/16;
        if (index < 0) index = 0;
        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
        res[ii] = (res_T) sigmoid_table[index];
    }
}




inline float exp_fcn_float(float input) {
    return std::exp(input);
}

template<class data_T, typename CONFIG_T>
inline float softmax_real_val_from_idx(unsigned i){

    static constexpr int N = ceillog2(CONFIG_T::table_size);
_ssdm_SpecConstant(&N);
# 184 "firmware/nnet_utils/nnet_activation.h"

    data_T x(0);
    x(x.width-1, x.width-N) = i;
    return (float) x;
}

template<class data_T, typename CONFIG_T>
inline unsigned softmax_idx_from_real_val(data_T x){

    static constexpr int N = ceillog2(CONFIG_T::table_size);
_ssdm_SpecConstant(&N);
# 193 "firmware/nnet_utils/nnet_activation.h"

    ap_uint<N> y = x(x.width-1, x.width-N);
    return (unsigned) y(N-1, 0);
}

template<class data_T, typename CONFIG_T>
void init_exp_table(typename CONFIG_T::exp_table_t table_out[CONFIG_T::table_size]){

    for(unsigned i = 0; i < CONFIG_T::table_size; i++){

        float x = softmax_real_val_from_idx<data_T, CONFIG_T>(i);
        typename CONFIG_T::exp_table_t exp_x = exp_fcn_float(x);
        table_out[i] = exp_x;
    }
}

template<class data_T, typename CONFIG_T>
void init_invert_table(typename CONFIG_T::inv_table_t table_out[CONFIG_T::table_size]){

    for(unsigned i = 0; i < CONFIG_T::table_size; i++){
        float x = softmax_real_val_from_idx<data_T, CONFIG_T>(i);
        typename CONFIG_T::inv_table_t inv_x = 1 / x;
        table_out[i] = inv_x;
    }
}

template <class data_T, class res_T, typename CONFIG_T>
void softmax(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in]){


    bool initialized = false;
    typename CONFIG_T::exp_table_t exp_table[CONFIG_T::table_size];
    typename CONFIG_T::inv_table_t invert_table[CONFIG_T::table_size];






    if (!initialized) {

        init_exp_table<data_T, CONFIG_T>(exp_table);

        init_invert_table<typename CONFIG_T::exp_table_t, CONFIG_T>(invert_table);
        initialized = true;
    }



    typename CONFIG_T::exp_table_t exp_res[CONFIG_T::n_in];

    typename CONFIG_T::exp_table_t exp_sum(0);
    for(unsigned i = 0; i < CONFIG_T::n_in; i++){

     unsigned x = softmax_idx_from_real_val<data_T, CONFIG_T>(data[i]);
        exp_res[i] = exp_table[x];
    }



    Op_add<typename CONFIG_T::exp_table_t> op_add;
    exp_sum = reduce<typename CONFIG_T::exp_table_t, CONFIG_T::n_in, Op_add<typename CONFIG_T::exp_table_t>>(exp_res, op_add);

    typename CONFIG_T::inv_table_t inv_exp_sum = invert_table[softmax_idx_from_real_val<typename CONFIG_T::exp_table_t,CONFIG_T>(exp_sum)];
    for(unsigned i = 0; i < CONFIG_T::n_in; i++){

        res[i] = exp_res[i] * inv_exp_sum;
    }
}




template<typename CONFIG_T, int N_TABLE>
void init_tanh_table(typename CONFIG_T::table_t table_out[N_TABLE])
{

    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2*4.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);

        typename CONFIG_T::table_t real_val = tanh(in_val);

        table_out[ii] = real_val;
    }
}


template<class data_T, class res_T, typename CONFIG_T>
void tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t tanh_table[CONFIG_T::table_size];




    if (!initialized) {
        init_tanh_table<CONFIG_T, CONFIG_T::table_size>(tanh_table);
        initialized = true;
    }

    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }


    int data_round;
    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        data_round = data[ii]*CONFIG_T::table_size/8;
        index = data_round + 4*CONFIG_T::table_size/8;

        if (index < 0) index = 0;
        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
        res[ii] = (res_T) tanh_table[index];
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void hard_sigmoid(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;
    data_T slope = (data_T) 0.2;
    data_T shift = (data_T) 0.5;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = slope * data[ii] + shift;
        if (datareg > 1) datareg = 1;
        else if (datareg < 0) datareg = 0;
        res[ii] = datareg;
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void leaky_relu(data_T data[CONFIG_T::n_in], data_T alpha, res_T res[CONFIG_T::n_in])
{
    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = data[ii];
        if (datareg > 0) res[ii] = datareg;
        else res[ii] = alpha * datareg;
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void thresholded_relu(data_T data[CONFIG_T::n_in], data_T theta, res_T res[CONFIG_T::n_in])
{
    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = data[ii];
        if (datareg > theta) res[ii] = datareg;
        else res[ii] = 0;
    }
}




inline float softplus_fcn_float(float input) {
    return std::log(std::exp(input) + 1.);
}

template<typename CONFIG_T, int N_TABLE>
void init_softplus_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);

        typename CONFIG_T::table_t real_val = softplus_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void softplus(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t softplus_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softplus_table<CONFIG_T, CONFIG_T::table_size>(softplus_table);
        initialized = true;
    }

    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }


    int data_round;
    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        data_round = data[ii]*CONFIG_T::table_size/16;
        index = data_round + 8*CONFIG_T::table_size/16;
        if (index < 0) index = 0;
        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
        res[ii] = (res_T) softplus_table[index];
    }
}




inline float softsign_fcn_float(float input) {
    return input / (std::abs(input) + 1.);
}

template<typename CONFIG_T, int N_TABLE>
void init_softsign_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);

        typename CONFIG_T::table_t real_val = softsign_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void softsign(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t softsign_table[CONFIG_T::table_size];




    if (!initialized) {
        init_softsign_table<CONFIG_T, CONFIG_T::table_size>(softsign_table);
        initialized = true;
    }

    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }


    int data_round;
    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        data_round = data[ii]*CONFIG_T::table_size/16;
        index = data_round + 8*CONFIG_T::table_size/16;
        if (index < 0) index = 0;
        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
        res[ii] = (res_T) softsign_table[index];
    }
}




inline float elu_fcn_float(float input) {
    return std::exp(input) - 1.;
}

template<typename CONFIG_T, int N_TABLE>
void init_elu_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = -8.0*ii/float(N_TABLE);

        typename CONFIG_T::table_t real_val = elu_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void elu(data_T data[CONFIG_T::n_in], const res_T alpha, res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t elu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_elu_table<CONFIG_T, CONFIG_T::table_size>(elu_table);
        initialized = true;
    }

    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;

    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = data[ii];
        if (datareg >= 0) {
            res[ii] = datareg;
        } else {
            index = datareg*CONFIG_T::table_size/-8;
            if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
            res[ii] = alpha * elu_table[index];
        }
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void elu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
 elu<data_T, res_T, CONFIG_T>(data, 1.0, res);
}




inline float selu_fcn_float(float input) {
    return 1.0507009873554804934193349852946 * (1.6732632423543772848170429916717 * (std::exp(input) - 1.));
}

template<typename CONFIG_T, int N_TABLE>
void init_selu_table(typename CONFIG_T::table_t table_out[N_TABLE])
{


    for (int ii = 0; ii < N_TABLE; ii++) {

        float in_val = -8.0*ii/float(N_TABLE);

        typename CONFIG_T::table_t real_val = selu_fcn_float(in_val);

        table_out[ii] = real_val;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void selu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{


    bool initialized = false;
    typename CONFIG_T::table_t selu_table[CONFIG_T::table_size];




    if (!initialized) {
        init_selu_table<CONFIG_T, CONFIG_T::table_size>(selu_table);
        initialized = true;
    }

    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;

    int index;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = data[ii];
        if (datareg >= 0) {
            res[ii] = res_T(1.0507009873554804934193349852946) * datareg;
        } else {
            index = datareg*CONFIG_T::table_size/-8;
            if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;
            res[ii] = selu_table[index];
        }
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void prelu(data_T data[CONFIG_T::n_in], data_T alpha[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{
    if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

    data_T datareg;
    for (int ii=0; ii<CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        datareg = data[ii];
        if (datareg > 0) res[ii] = datareg;
        else res[ii] = alpha[ii] * datareg;
    }
}




template<class data_T, class res_T, typename CONFIG_T>
void binary_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{

 if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

 data_T datareg;
 res_T cache;
 for (int ii=0; ii<CONFIG_T::n_in; ii++) {

  if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
  datareg = data[ii];
  if( datareg > 0 ) cache = 1;
  else cache = -1;

  res[ii] = (res_T) cache;

 }

}




template<class data_T, class res_T, typename CONFIG_T>
void ternary_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])
{

 if (CONFIG_T::io_type == io_parallel){
#pragma HLS PIPELINE
 }

 data_T datareg;
 res_T cache;
 for (int ii=0; ii<CONFIG_T::n_in; ii++) {

  if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
  datareg = 2*data[ii];
  if( datareg > 1 ) cache = 1;
  else if( datareg > -1 && datareg <= 1) cache=0;
  else cache = -1;

  res[ii] = (res_T) cache;

 }

}

}
# 10 "firmware/parameters.h" 2
# 1 "firmware/nnet_utils/nnet_conv2d.h" 1
# 24 "firmware/nnet_utils/nnet_conv2d.h"
# 1 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 1 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 41 "/home/filipe/Xilinx/Vivado/2018.3/lnx64/tools/gcc/lib/gcc/x86_64-unknown-linux-gnu/4.6.3/../../../../include/c++/4.6.3/cstdlib" 3
# 25 "firmware/nnet_utils/nnet_conv2d.h" 2

namespace nnet {

struct conv2d_config
{

    typedef float bias_t;
    typedef float weight_t;
    typedef float accum_t;


    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_height = 10;
    static const unsigned in_width = 10;
    static const unsigned n_chan = 1;
    static const unsigned filt_height = 1;
    static const unsigned filt_width = 1;
    static const unsigned n_filt = 1;
    static const unsigned stride_height = 1;
    static const unsigned stride_width = 1;
    static const unsigned out_height = 10;
    static const unsigned out_width = 10;
    static const unsigned dilation_height = 1;
    static const unsigned dilation_width = 1;

    static const unsigned reuse_factor = 1;
    static const bool store_weights_in_bram = false;
    static const unsigned n_zeros = 0;
};




template<typename CONFIG_T>
    int compute_multiplier_limit_conv2d(
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt]
)
{
    int n_mult = 0;

    for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            for(int ff = 0; ff < CONFIG_T::n_filt; ff++){
                for(int cc = 0; cc < CONFIG_T::n_chan; cc++){
                    for(int fh = 0; fh < CONFIG_T::filt_height; fh++){
                        for(int fw = 0; fw < CONFIG_T::filt_width; fw++){

                                int index_weight = fh*CONFIG_T::filt_width*CONFIG_T::n_chan*CONFIG_T::n_filt
                                                 + fw*CONFIG_T::n_chan*CONFIG_T::n_filt
                                                 + cc*CONFIG_T::n_filt
                                                  + ff;

                                if ((oh*CONFIG_T::stride_height+fh) < CONFIG_T::pad_top
                                || (oh*CONFIG_T::stride_height+fh) >= (CONFIG_T::pad_top+CONFIG_T::in_height)
                                || (ow*CONFIG_T::stride_width+fw) < CONFIG_T::pad_left
                                || (ow*CONFIG_T::stride_width+fw) >= (CONFIG_T::pad_left+CONFIG_T::in_width)) {

                                    continue;
                                } else {
                                    if (weights[index_weight] > 1e-20 || weights[index_weight] < -1e-20) {
                                          n_mult++;
                                    }
                                }

                        }
                    }
                }
            }
        }
    }

    return ceil( float(n_mult) / float(CONFIG_T::reuse_factor) );

}

template<class data_T, class res_T, typename CONFIG_T>
void conv_2d_latency_cf(
    data_T data[CONFIG_T::in_height*CONFIG_T::in_width*CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_height*CONFIG_T::out_width*CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{

    typename CONFIG_T::accum_t mult[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt * CONFIG_T::n_chan * CONFIG_T::filt_height * CONFIG_T::filt_width];
    typename CONFIG_T::accum_t acc[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt];
# 125 "firmware/nnet_utils/nnet_conv2d.h"
    const int multiplier_limit = compute_multiplier_limit_conv2d<CONFIG_T>(weights);
#pragma HLS ALLOCATION instances=mul limit=multiplier_limit operation


 ConvOutHeight: for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        ConvOutWidth: for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            ConvFilt: for(int ff = 0; ff < CONFIG_T::n_filt; ff++){
                ConvChan: for(int cc = 0; cc < CONFIG_T::n_chan; cc++){
                    ConvFiltHeight: for(int fh = 0; fh < CONFIG_T::filt_height; fh++){
                        ConvFiltWidth: for(int fw = 0; fw < CONFIG_T::filt_width; fw++){

                            int index_mult = oh*CONFIG_T::out_width*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ow*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ff*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + cc*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + fh*CONFIG_T::filt_width
                                           + fw;

                                int index_weight = fh*CONFIG_T::filt_width*CONFIG_T::n_chan*CONFIG_T::n_filt
                                                 + fw*CONFIG_T::n_chan*CONFIG_T::n_filt
                                                 + cc*CONFIG_T::n_filt
                                                 + ff;

                                if ((oh*CONFIG_T::stride_height+fh) < CONFIG_T::pad_top
                                || (oh*CONFIG_T::stride_height+fh) >= (CONFIG_T::pad_top+CONFIG_T::in_height)
                                || (ow*CONFIG_T::stride_width+fw) < CONFIG_T::pad_left
                                || (ow*CONFIG_T::stride_width+fw) >= (CONFIG_T::pad_left+CONFIG_T::in_width)) {
                                    mult[index_mult] = 0;
                                } else {
                                    int index_data = cc*CONFIG_T::in_height*CONFIG_T::in_width
                                                   + (oh*CONFIG_T::stride_height+fh-CONFIG_T::pad_top)*CONFIG_T::in_width
                                                   + (ow*CONFIG_T::stride_width+fw-CONFIG_T::pad_left);
                                    mult[index_mult] = data[index_data] * weights[index_weight];
                                }

                        }
                    }
                  }
            }
        }
    }



    for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {
                acc[oh*CONFIG_T::out_width*CONFIG_T::n_filt + ow*CONFIG_T::n_filt + ff]=biases[ff];
            }
        }
    }



    AccumOutHeight: for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        AccumOutWidth: for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            AccumFilt: for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {

                AccumChan: for(int cc = 0; cc < CONFIG_T::n_chan; cc++){
                    AccumDotHeight: for(int fh = 0; fh < CONFIG_T::filt_height; fh++){
                        AccumDotWidth: for(int fw = 0; fw < CONFIG_T::filt_width; fw++){

                            int index_mult = oh*CONFIG_T::out_width*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ow*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ff*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + cc*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + fh*CONFIG_T::filt_width
                                           + fw;
                            int index_acc = oh*CONFIG_T::out_width*CONFIG_T::n_filt
                                          + ow*CONFIG_T::n_filt
                                          + ff;

                            acc[index_acc] += mult[index_mult];

                        }
                    }
                }
            }
        }
    }


    for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {
        for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
            for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
                int res_index = ff*CONFIG_T::out_height*CONFIG_T::out_width + oh*CONFIG_T::out_width + ow;
                int acc_index = oh*CONFIG_T::out_width*CONFIG_T::n_filt + ow*CONFIG_T::n_filt + ff;
                res[res_index] = acc[acc_index];
            }
        }
    }

}

template<class data_T, class res_T, typename CONFIG_T>
void conv_2d_latency_cl(
    data_T data[CONFIG_T::in_height*CONFIG_T::in_width*CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_height*CONFIG_T::out_width*CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{

    typename CONFIG_T::accum_t mult[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt * CONFIG_T::n_chan * CONFIG_T::filt_height * CONFIG_T::filt_width];
    typename CONFIG_T::accum_t acc[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt];
# 241 "firmware/nnet_utils/nnet_conv2d.h"
    const int multiplier_limit = compute_multiplier_limit_conv2d<CONFIG_T>(weights);
#pragma HLS ALLOCATION instances=mul limit=multiplier_limit operation


 ConvOutHeight: for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        ConvOutWidth: for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            ConvFilt: for(int ff = 0; ff < CONFIG_T::n_filt; ff++){
                ConvChan: for(int cc = 0; cc < CONFIG_T::n_chan; cc++){
                    ConvFiltHeight: for(int fh = 0; fh < CONFIG_T::filt_height; fh++){
                        ConvFiltWidth: for(int fw = 0; fw < CONFIG_T::filt_width; fw++){

                            int index_mult = oh*CONFIG_T::out_width*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ow*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ff*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + cc*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + fh*CONFIG_T::filt_width
                                           + fw;

                                int index_weight = fh*CONFIG_T::filt_width*CONFIG_T::n_chan*CONFIG_T::n_filt
                                                 + fw*CONFIG_T::n_chan*CONFIG_T::n_filt
                                                 + cc*CONFIG_T::n_filt
                                                 + ff;

                                if ((oh*CONFIG_T::stride_height+fh) < CONFIG_T::pad_top
                                || (oh*CONFIG_T::stride_height+fh) >= (CONFIG_T::pad_top+CONFIG_T::in_height)
                                || (ow*CONFIG_T::stride_width+fw) < CONFIG_T::pad_left
                                || (ow*CONFIG_T::stride_width+fw) >= (CONFIG_T::pad_left+CONFIG_T::in_width)) {
                                    mult[index_mult] = 0;
                                } else {
                                    int index_data = (oh*CONFIG_T::stride_height+fh-CONFIG_T::pad_top)*CONFIG_T::in_width*CONFIG_T::n_chan
                                                   + (ow*CONFIG_T::stride_width+fw-CONFIG_T::pad_left)*CONFIG_T::n_chan
                                                   + cc;
                                    mult[index_mult] = data[index_data] * weights[index_weight];
                                }

                        }
                    }
                  }
            }
        }
    }



    for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {
                acc[oh*CONFIG_T::out_width*CONFIG_T::n_filt + ow*CONFIG_T::n_filt + ff]=biases[ff];
            }
        }
    }



    AccumOutHeight: for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        AccumOutWidth: for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
            AccumFilt: for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {

                AccumChan: for(int cc = 0; cc < CONFIG_T::n_chan; cc++){
                    AccumDotHeight: for(int fh = 0; fh < CONFIG_T::filt_height; fh++){
                        AccumDotWidth: for(int fw = 0; fw < CONFIG_T::filt_width; fw++){

                            int index_mult = oh*CONFIG_T::out_width*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ow*CONFIG_T::n_filt*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + ff*CONFIG_T::n_chan*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + cc*CONFIG_T::filt_height*CONFIG_T::filt_width
                                           + fh*CONFIG_T::filt_width
                                           + fw;
                            int index_acc = oh*CONFIG_T::out_width*CONFIG_T::n_filt
                                          + ow*CONFIG_T::n_filt
                                          + ff;

                            acc[index_acc] += mult[index_mult];

                        }
                    }
                }
            }
        }
    }


    for(int oh = 0; oh < CONFIG_T::out_height; oh++) {
        for(int ow = 0; ow < CONFIG_T::out_width; ow++) {
              for(int ff = 0; ff < CONFIG_T::n_filt; ff++) {
                int index = oh*CONFIG_T::out_width*CONFIG_T::n_filt + ow*CONFIG_T::n_filt + ff;
                res[index] = (res_T)(acc[index]);
            }
        }
    }

}


template<class data_T, int N1, int N2, int N3>
void flatten(
    data_T data[N1][N2][N3],
    data_T res[N1*N2*N3]
)
{
    for(int i1=0; i1<N1; i1++){
        for(int i2=0; i2<N2; i2++){
            for(int i3=0; i3<N3; i3++){
                res[i1*N2*N3+i2*N3+i3] = data[i1][i2][i3];
            }
        }
    }
}


template<class data_T, int N1, int N2, int N3>
void unflatten(
    data_T data[N1*N2*N3],
    data_T res[N1][N2][N3]
)
{
    for(int i1=0; i1<N1; i1++){
        for(int i2=0; i2<N2; i2++){
            for(int i3=0; i3<N3; i3++){
                res[i1][i2][i3] = data[i1*N2*N3+i2*N3+i3];
            }
        }
    }
}


}
# 11 "firmware/parameters.h" 2
# 1 "firmware/nnet_utils/nnet_conv2d_large.h" 1





# 1 "firmware/nnet_utils/nnet_dense_large.h" 1
# 24 "firmware/nnet_utils/nnet_dense_large.h"
# 1 "firmware/nnet_utils/nnet_dense.h" 1
# 28 "firmware/nnet_utils/nnet_dense.h"
namespace nnet {

struct dense_config
{

    typedef float bias_t;
    typedef float weight_t;
    typedef float accum_t;


    static const unsigned n_in = 10;
    static const unsigned n_out = 10;


    static const unsigned io_type = io_parallel;
    static const unsigned reuse_factor = 1;
    static const bool store_weights_in_bram = false;
    static const unsigned n_zeros = 0;

};







template<class data_T, class weight_T, class ret_T>
inline typename std::enable_if<std::is_same<data_T, ap_uint<1>>::value
        and std::is_same<weight_T, ap_uint<1>>::value, ap_uint<1>>::type
product(ap_uint<1> a, ap_uint<1> w){

#pragma HLS inline off
 return a == w;
}

template<class data_T, class weight_T, class ret_T>
inline typename std::enable_if<(not std::is_same<data_T, ap_uint<1>>::value)
        and std::is_same<weight_T, ap_uint<1>>::value, ret_T>::type
product(data_T a, ap_uint<1> w){

#pragma HLS inline off
 return w == 0 ? (data_T) -a : a;
}

template<class data_T, class weight_T, class ret_T>
inline typename std::enable_if<(not std::is_same<data_T, ap_uint<2>>::value)
        and std::is_same<weight_T, ap_int<2>>::value, ret_T>::type
product(data_T a, ap_int<2> w){

#pragma HLS inline off
 if (w == 0) return (data_T) 0;
    else if(w == -1) return (data_T) -a;
    else return (data_T) a;
}

template<class data_T, class weight_T, class ret_T>
inline typename std::enable_if<(not std::is_same<data_T, ap_uint<1>>::value)
        and (not std::is_same<weight_T, ap_uint<1>>::value), ret_T>::type
product(data_T a, weight_T w){

#pragma HLS inline off
 return a * w;
}

template<class data_T, class res_T, typename CONFIG_T>
inline typename std::enable_if<std::is_same<data_T, ap_uint<1>>::value
        and std::is_same<typename CONFIG_T::weight_t, ap_uint<1>>::value, ap_int<nnet::ceillog2(CONFIG_T::n_in) + 2>>::type
cast(typename CONFIG_T::accum_t x){
  return (ap_int<nnet::ceillog2(CONFIG_T::n_in) + 2>) (x - CONFIG_T::n_in / 2) * 2;
}

template<class data_T, class res_T, typename CONFIG_T>
inline typename std::enable_if<(not std::is_same<data_T, ap_uint<1>>::value), res_T>::type
cast(typename CONFIG_T::accum_t x){
  return (res_T) x;
}

template<class data_T, class res_T, typename CONFIG_T>
void dense_latency(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out])
{
    data_T cache;
    typename CONFIG_T::accum_t mult[CONFIG_T::n_in*CONFIG_T::n_out];
    typename CONFIG_T::accum_t acc[CONFIG_T::n_out];


#pragma HLS function_instantiate variable=&weights,&biases

 if (CONFIG_T::io_type == io_parallel){



#pragma HLS PIPELINE II=CONFIG_T::reuse_factor


#pragma HLS ARRAY_PARTITION variable=&biases complete
#pragma HLS ARRAY_PARTITION variable=&mult complete
#pragma HLS ARRAY_PARTITION variable=&acc complete

 int multiplier_limit = ceil(float(CONFIG_T::n_in*CONFIG_T::n_out) / float(CONFIG_T::reuse_factor)) - floor(float(CONFIG_T::n_zeros) / float(CONFIG_T::reuse_factor));
#pragma HLS ALLOCATION instances=product limit=multiplier_limit function

 } else if (CONFIG_T::io_type == io_serial){


        int cycle_factor = CONFIG_T::n_out / CONFIG_T::reuse_factor;
        int reused_cycle = ((CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
        if (cycle_factor != reused_cycle) {
            cycle_factor = CONFIG_T::n_out;
        }






#pragma HLS ARRAY_PARTITION variable=&weights cyclic factor=cycle_factor
#pragma HLS ARRAY_PARTITION variable=&mult cyclic factor=cycle_factor
#pragma HLS ARRAY_PARTITION variable=&acc complete
#pragma HLS DATAFLOW
#pragma HLS STREAM variable=&mult depth=1
#pragma HLS STREAM variable=&acc depth=1
 if (CONFIG_T::store_weights_in_bram){
#pragma HLS RESOURCE variable=&weights core=ROM_2P_BRAM
 }
    }


    Product1: for(int ii = 0; ii < CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        cache = data[ii];
        Product2: for(int jj = 0; jj < CONFIG_T::n_out; jj++) {
            if (CONFIG_T::io_type == io_serial) {
                int multiplier_limit = ceil(float(CONFIG_T::n_out) / float(CONFIG_T::reuse_factor));
#pragma HLS ALLOCATION instances=product limit=multiplier_limit function
 }
        int index = ii*CONFIG_T::n_out+jj;
        mult[index] = product<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::accum_t>(cache, weights[index]);
        }
    }


    ResetAccum: for(int iacc = 0; iacc < CONFIG_T::n_out; iacc++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS UNROLL
 }
        acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];
    }


    Accum1: for(int ii = 0; ii < CONFIG_T::n_in; ii++) {
        if (CONFIG_T::io_type == io_serial){
#pragma HLS PIPELINE
 }
        Accum2: for(int jj = 0; jj < CONFIG_T::n_out; jj++) {
        int index = ii*CONFIG_T::n_out+jj;
        acc[jj] += mult[index];
        }
    }


    Result: for(int ires = 0; ires < CONFIG_T::n_out; ires++){
        if (CONFIG_T::io_type == io_serial){
#pragma HLS UNROLL
 }

        res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

}
# 25 "firmware/nnet_utils/nnet_dense_large.h" 2


# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 28 "firmware/nnet_utils/nnet_dense_large.h" 2

namespace nnet {

template<class data_T, class res_T, typename CONFIG_T>
void dense_large_rf_leq_nin(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = CONFIG_T::reuse_factor;
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in*CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in*CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit/CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    (static_cast <bool> ((multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed") ? void (0) : __assert_fail ("(multiplier_limit % nout == 0 || rufactor >= nin) && \"The current Reuse Factor is not allowed\"", "firmware/nnet_utils/nnet_dense_large.h", 46, __extension__ __PRETTY_FUNCTION__));
    (static_cast <bool> ((multiplier_limit == block_factor) && "This function is correct only for RF <= N_IN") ? void (0) : __assert_fail ("(multiplier_limit == block_factor) && \"This function is correct only for RF <= N_IN\"", "firmware/nnet_utils/nnet_dense_large.h", 47, __extension__ __PRETTY_FUNCTION__));



#pragma HLS ARRAY_RESHAPE variable=&weights block factor=block_factor


 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];


    InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {

        acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];
    }

    ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {


        int w_index = ir;
        int in_index = ir;
        int out_index = 0;
        int acc_step = 0;

        MultLoop:
        for (int im = 0; im < block_factor; im++) {


            acc[out_index] += product<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::accum_t>(data[in_index], weights[w_index]);


            w_index += rufactor;

            in_index += rufactor;
            if (in_index >= nin) {
                in_index = ir;
            }

            if (acc_step + 1 >= multscale) {
                acc_step = 0;
                out_index++;
            } else {
                acc_step++;
            }
        }
    }


    Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {

        res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void dense_large_rf_gt_nin_rem0(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = (CONFIG_T::reuse_factor > CONFIG_T::n_in * CONFIG_T::n_out ? CONFIG_T::n_in * CONFIG_T::n_out : CONFIG_T::reuse_factor);
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in*CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in*CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit/CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    (static_cast <bool> ((multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed") ? void (0) : __assert_fail ("(multiplier_limit % nout == 0 || rufactor >= nin) && \"The current Reuse Factor is not allowed\"", "firmware/nnet_utils/nnet_dense_large.h", 118, __extension__ __PRETTY_FUNCTION__));
    (static_cast <bool> ((rufactor > nin && rufactor % nin == 0) && "This function is correct only for RF > N_IN && RF % N_IN == 0") ? void (0) : __assert_fail ("(rufactor > nin && rufactor % nin == 0) && \"This function is correct only for RF > N_IN && RF % N_IN == 0\"", "firmware/nnet_utils/nnet_dense_large.h", 119, __extension__ __PRETTY_FUNCTION__));



#pragma HLS ARRAY_RESHAPE variable=&weights block factor=block_factor


 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];


    InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {

        acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];
    }

    int w_index;
    int in_index = 0;
    int out_index;
    int outstep = 0;
    const int outscale = rufactor / nin;

    int outidx[rufactor];
    IndexLoop:
    for (int ir = 0; ir < rufactor; ir++) {
        outidx[ir] = outstep;
        if ((ir + 1) % nin == 0) {
            outstep++;
        }
    }

    ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {


        w_index = ir;
        out_index = outidx[ir] ;

        MultLoop:
        for (int im = 0; im < block_factor; im++) {

            acc[out_index] += product<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::accum_t>(data[in_index], weights[w_index]);

            w_index += rufactor;
            if (w_index >= CONFIG_T::n_in * CONFIG_T::n_out) break;
            out_index += outscale;
        }

        in_index++;
        if (in_index >= nin) {
            in_index = 0;

        }
    }


    Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {

        res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void dense_large_rf_gt_nin(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {

    const int rufactor = CONFIG_T::reuse_factor;
    const int multfactor = (CONFIG_T::n_in > CONFIG_T::reuse_factor ? CONFIG_T::reuse_factor : CONFIG_T::n_in);
    const int multiplier_limit = ((CONFIG_T::n_in*CONFIG_T::n_out + multfactor - 1) / multfactor);
    const int block_factor = ((CONFIG_T::n_in*CONFIG_T::n_out + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);
    const int multscale = multiplier_limit/CONFIG_T::n_out;
    const int nin = CONFIG_T::n_in;
    const int nout = CONFIG_T::n_out;

    (static_cast <bool> ((multiplier_limit % nout == 0 || rufactor >= nin) && "The current Reuse Factor is not allowed") ? void (0) : __assert_fail ("(multiplier_limit % nout == 0 || rufactor >= nin) && \"The current Reuse Factor is not allowed\"", "firmware/nnet_utils/nnet_dense_large.h", 197, __extension__ __PRETTY_FUNCTION__));
    (static_cast <bool> ((rufactor > nin) && "This function is correct only for RF > N_IN") ? void (0) : __assert_fail ("(rufactor > nin) && \"This function is correct only for RF > N_IN\"", "firmware/nnet_utils/nnet_dense_large.h", 198, __extension__ __PRETTY_FUNCTION__));



#pragma HLS ARRAY_RESHAPE variable=&weights block factor=block_factor


 typename CONFIG_T::accum_t acc[CONFIG_T::n_out];


    InitAccum:
    for (int iacc = 0; iacc < nout; iacc++) {

        acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];
    }

    ReuseLoop:
    for (int ir = 0; ir < rufactor; ir++) {

        typename CONFIG_T::accum_t tmpmult[block_factor];


        MultLoop:
        for (int im = 0; im < block_factor; im++) {

            int w_index = ir + rufactor * im;
            int in_index = w_index % nin;
            if (w_index >= CONFIG_T::n_in*CONFIG_T::n_out) continue;
            tmpmult[im] = product<data_T, typename CONFIG_T::weight_t, typename CONFIG_T::accum_t>(data[in_index], weights[w_index]);
        }

        typename CONFIG_T::accum_t mult[multiplier_limit];


        ResetMult:
        for (int imult = 0; imult < multiplier_limit; imult++) {

            mult[imult] = 0;
        }

        AccumLoop1:
        for (int im = 0; im < block_factor; im++) {

            int w_index = ir + rufactor * im;
            int out_index = w_index / multfactor;
            if (out_index >= multiplier_limit) continue;
            mult[out_index] += tmpmult[im];
        }

        AccumLoop2:
        for (int im = 0; im < multiplier_limit; im++) {



            acc[im] += mult[im];
        }
    }


    Result:
    for (int ires = 0; ires < CONFIG_T::n_out; ires++) {

        res[ires] = cast<data_T, res_T, CONFIG_T>(acc[ires]);
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void dense_large(
    data_T data[CONFIG_T::n_in],
    res_T res[CONFIG_T::n_out],
    typename CONFIG_T::weight_t weights[CONFIG_T::n_in*CONFIG_T::n_out],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_out]) {



    if (CONFIG_T::reuse_factor <= CONFIG_T::n_in) {
        dense_large_rf_leq_nin<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else if (CONFIG_T::reuse_factor % CONFIG_T::n_in == 0) {
        dense_large_rf_gt_nin_rem0<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    } else {
        dense_large_rf_gt_nin<data_T, res_T, CONFIG_T>(data, res, weights, biases);
    }
}

}
# 7 "firmware/nnet_utils/nnet_conv2d_large.h" 2

namespace nnet {

template<class data_T, typename CONFIG_T>
void im2col_2d(
    data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
    data_T data_col[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::out_height * CONFIG_T::out_width])
{
    const int output_h = (CONFIG_T::in_height + CONFIG_T::pad_top + CONFIG_T::pad_bottom -
        (CONFIG_T::dilation_height * (CONFIG_T::filt_height - 1) + 1)) / CONFIG_T::stride_height + 1;
    const int output_w = (CONFIG_T::in_width + CONFIG_T::pad_left + CONFIG_T::pad_right -
        (CONFIG_T::dilation_width * (CONFIG_T::filt_width - 1) + 1)) / CONFIG_T::stride_width + 1;
    const int channel_size = CONFIG_T::in_height * CONFIG_T::in_width;

    for (int channel = CONFIG_T::n_chan; channel--; data += channel_size) {
        for (int kernel_row = 0; kernel_row < CONFIG_T::filt_height; kernel_row++) {
            for (int kernel_col = 0; kernel_col < CONFIG_T::filt_width; kernel_col++) {
                int input_row = -CONFIG_T::pad_top + kernel_row * CONFIG_T::dilation_height;
                for (int output_rows = output_h; output_rows; output_rows--) {
                    if (input_row < 0 || input_row > CONFIG_T::in_height) {
                        for (int output_cols = output_w; output_cols; output_cols--) {
                            *(data_col++) = 0;
                        }
                    } else {
                        int input_col = -CONFIG_T::pad_left + kernel_col * CONFIG_T::dilation_width;
                        for (int output_col = output_w; output_col; output_col--) {
                            if (input_col >= 0 && input_col < CONFIG_T::in_width) {
                                *(data_col++) = data[input_row * CONFIG_T::in_width + input_col];
                            } else {
                                *(data_col++) = 0;
                            }
                            input_col += CONFIG_T::stride_width;
                        }
                    }
                    input_row += CONFIG_T::stride_height;
                }
            }
        }
    }
}


template<class data_T, class res_T, typename CONFIG_T>
void conv_2d_full(
    data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{
    data_T data_conv[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::out_height * CONFIG_T::out_width];
    data_T data_col[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan];
    res_T res_col[CONFIG_T::n_filt];





    im2col_2d<data_T, CONFIG_T>(data, data_conv);

    for (int i = 0; i < CONFIG_T::out_height * CONFIG_T::out_width; i++) {
        for (int j = 0; j < CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan; j++) {
            data_col[j] = data[j * CONFIG_T::out_height * CONFIG_T::out_width + i];
        }
        dense_large<data_T, res_T, typename CONFIG_T::mult_config>(data_col, res_col, weights, biases);
        for (int j = 0; j < CONFIG_T::n_filt; j++) {

            res[j * CONFIG_T::out_height * CONFIG_T::out_width + i] = res_col[j];
        }
    }
}

template<class data_T, typename CONFIG_T>
void im2col_2d_cf(
    data_T data[CONFIG_T::n_chan * CONFIG_T::in_height * CONFIG_T::in_width],
    data_T data_col[CONFIG_T::n_chan * CONFIG_T::filt_height * CONFIG_T::filt_width],
    const int row,
    const int col)
{
    const int channel_size = CONFIG_T::in_height * CONFIG_T::in_width;
    int index = 0;
    for (int channel = CONFIG_T::n_chan; channel--; data += channel_size) {

        for (int kernel_row = 0; kernel_row < CONFIG_T::filt_height; kernel_row++) {
            int input_row = -CONFIG_T::pad_top + kernel_row * CONFIG_T::dilation_height + row * CONFIG_T::stride_height;
            for (int kernel_col = 0; kernel_col < CONFIG_T::filt_width; kernel_col++) {
                if (input_row < 0 || input_row > CONFIG_T::in_height) {
                    data_col[index++] = 0;
                } else {
                    int input_col = -CONFIG_T::pad_left + kernel_col * CONFIG_T::dilation_width + col * CONFIG_T::stride_width;
                    if (input_col >= 0 && input_col < CONFIG_T::in_width) {

                        data_col[index++] = data[input_row * CONFIG_T::in_width + input_col];
                    } else {

                        data_col[index++] = 0;
                    }
                    input_col += CONFIG_T::stride_width;
                }
            }
            input_row += CONFIG_T::stride_height;
        }
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void conv_2d_large_cf(
    data_T data[CONFIG_T::n_chan * CONFIG_T::in_height * CONFIG_T::in_width],
    res_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{
    const int nin = CONFIG_T::n_chan * CONFIG_T::filt_width;
    const int nout = CONFIG_T::n_filt;
    const int rufactor = CONFIG_T::reuse_factor;
    const int block_factor = ((nin*nout + rufactor - 1) / rufactor);



#pragma HLS ARRAY_RESHAPE variable=&weights block factor=block_factor


 data_T data_col[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan];
    res_T res_col[CONFIG_T::n_filt];




    HeightLoop:
    for (int i = 0; i < CONFIG_T::out_height; i++) {
        WidthLoop:
        for (int j = 0; j < CONFIG_T::out_width; j++) {

            im2col_2d_cf<data_T, CONFIG_T>(data, data_col, i, j);
            dense_large<data_T, res_T, typename CONFIG_T::mult_config>(data_col, res_col, weights, biases);
            FiltLoop:
            for (int k = 0; k < CONFIG_T::n_filt; k++) {

                res[k * CONFIG_T::out_height * CONFIG_T::out_width + i * CONFIG_T::out_width + j] = res_col[k];
            }
        }
    }
}

template<class data_T, typename CONFIG_T>
void im2col_2d_cl(
    data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
    data_T data_col[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan],
    const int row,
    const int col)
{
    int index = 0;
    for (int channel = CONFIG_T::n_chan; channel--; data++) {

        for (int kernel_row = 0; kernel_row < CONFIG_T::filt_height; kernel_row++) {
            int input_row = -CONFIG_T::pad_top + kernel_row * CONFIG_T::dilation_height + row * CONFIG_T::stride_height;
            for (int kernel_col = 0; kernel_col < CONFIG_T::filt_width; kernel_col++) {
                if (input_row < 0 || input_row >= CONFIG_T::in_height) {
                    data_col[index++] = 0;
                } else {
                    int input_col = -CONFIG_T::pad_left + kernel_col * CONFIG_T::dilation_width + col * CONFIG_T::stride_width;
                    if (input_col >= 0 && input_col < CONFIG_T::in_width) {

                        data_col[index++] = data[input_row * CONFIG_T::in_width * CONFIG_T::n_chan + input_col * CONFIG_T::n_chan];
                    } else {

                        data_col[index++] = 0;
                    }
                }
            }
        }
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void conv_2d_large_cl(
    data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_chan],
    res_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt],
    typename CONFIG_T::weight_t weights[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan * CONFIG_T::n_filt],
    typename CONFIG_T::bias_t biases[CONFIG_T::n_filt])
{
    const int nin = CONFIG_T::n_chan * CONFIG_T::filt_width;
    const int nout = CONFIG_T::n_filt;
    const int rufactor = CONFIG_T::reuse_factor;
    const int block_factor = ((nin*nout + rufactor - 1) / rufactor);






    data_T data_col[CONFIG_T::filt_height * CONFIG_T::filt_width * CONFIG_T::n_chan];
    res_T res_col[CONFIG_T::n_filt];




    HeightLoop:
    for (int i = 0; i < CONFIG_T::out_height; i++) {
        WidthLoop:
        for (int j = 0; j < CONFIG_T::out_width; j++) {

            im2col_2d_cl<data_T, CONFIG_T>(data, data_col, i, j);
            dense_large<data_T, res_T, typename CONFIG_T::mult_config>(data_col, res_col, weights, biases);
            FiltLoop:
            for (int k = 0; k < CONFIG_T::n_filt; k++) {
                res[i * CONFIG_T::out_width * CONFIG_T::n_filt + j * CONFIG_T::n_filt + k] = res_col[k];

            }
        }
    }
}

}
# 12 "firmware/parameters.h" 2

# 1 "firmware/nnet_utils/nnet_dense_compressed.h" 1
# 28 "firmware/nnet_utils/nnet_dense_compressed.h"
namespace nnet {

template<typename CONFIG_T>
void fill_mult(typename CONFIG_T::index_t index,
        typename CONFIG_T::accum_t mult[CONFIG_T::n_out],
        typename CONFIG_T::accum_t weight) {
    for(unsigned k = 0; k < CONFIG_T::n_out; k++) {
#pragma HLS UNROLL
 if (k == index) mult[k] += weight;
    }
}

template<class data_T, class res_T, typename CONFIG_T>
void dense_compressed(
        data_T data[CONFIG_T::n_in],
        res_T res[CONFIG_T::n_out],
        typename CONFIG_T::weight_t weights[CONFIG_T::n_nonzeros],
        typename CONFIG_T::bias_t biases[CONFIG_T::n_out])
{

    const int multiplier_limit = ((CONFIG_T::n_nonzeros + CONFIG_T::reuse_factor - 1) / CONFIG_T::reuse_factor);

    typename CONFIG_T::accum_t acc [CONFIG_T::n_out];
#pragma HLS ARRAY_PARTITION variable=&acc complete
#pragma HLS ARRAY_PARTITION variable=&biases complete
#pragma HLS ARRAY_RESHAPE variable=&weights block factor=multiplier_limit


#pragma HLS data_pack variable=&weights struct_level


 InitAccum:
    for(unsigned i = 0; i < CONFIG_T::n_out; i++) {
#pragma HLS UNROLL
 acc[i] = (typename CONFIG_T::accum_t) (biases[i]);
    }


    const int rufactor = CONFIG_T::reuse_factor;
    ReuseLoop:
    for(unsigned ir = 0; ir < rufactor; ir++) {
#pragma HLS PIPELINE II=1 rewind

 typename CONFIG_T::accum_t mult[CONFIG_T::n_out];
#pragma HLS ARRAY_PARTITION variable=&mult complete

 ResetMult:
        for(int imult = 0; imult < CONFIG_T::n_out; imult++) {
#pragma HLS UNROLL
 mult[imult] = 0;
        }

        CompressedMultLoop:
        for(unsigned im = 0; im < multiplier_limit; im++) {
#pragma HLS UNROLL
 unsigned w = im * rufactor + ir;
            auto row = weights[w].row_index;
            auto col = weights[w].col_index;
            auto weight_cache = weights[w].weight;
            data_T data_cache = data[row];

            typename CONFIG_T::accum_t prod = product<data_T, decltype(weight_cache), typename CONFIG_T::accum_t>(data_cache, weight_cache);
            fill_mult<CONFIG_T>(col, mult, prod);
        }

        for (int im = 0; im < CONFIG_T::n_out; im++){
            acc[im] += mult[im];
        }
    }


    ResultLoop:
    for(unsigned i = 0; i < CONFIG_T::n_out; i++){
#pragma HLS UNROLL

 res[i] = cast<data_T, res_T, CONFIG_T>(acc[i]);
    }
}

}
# 14 "firmware/parameters.h" 2

# 1 "firmware/nnet_utils/nnet_pooling.h" 1






namespace nnet{


template<typename T, int N>
T max(T x[N]){
  T y = x[0];
  for(int i = 1; i < N; i++){
    y = x[i] > y ? x[i] : y;
  }
  return y;
}

template<int W, int N>
ap_int<W> avg(ap_int<W> (&x)[N]){

  ap_int<W + ceillog2(N)> tmp = 0;
  for(int i = 0; i < N; i++){
    tmp += x[i];
  }
  tmp /= N;

  ap_int<W> y = tmp;
  return tmp;
}

template<int W, int I, int N>
ap_fixed<W, I> avg(ap_fixed<W, I> (&x)[N]){

  ap_fixed<W + ceillog2(N), I + ceillog2(N)> tmp = 0;
  for(int i = 0; i < N; i++){
    tmp += x[i];
  }
  tmp /= N;

  ap_fixed<W, I> y = tmp;
  return y;
}


template<typename T, int N>
T avg(T (&x)[N]){
  T y = 0;
  for(int i = 0; i < N; i++){
    y += x[i];
  }
  y /= N;
  return y;
}


enum Pool_Op { Max, Average };
template<typename T, int N, Pool_Op op>
T pool_op(T (&x)[N]){
 switch(op){
 case Max: return max<T, N>(x);
 case Average: return avg(x);

 }
}

template<typename T, Pool_Op op>
T pad_val(){







  switch(op){
    case Max:{
      T x = 0;
      x[x.width - 1] = 1;
      return x;
      break;}
    case Average: return 0;
  }
}

struct pooling1d_config{

  static const unsigned n_in = 10;
  static const unsigned pool_size = 2;
  static const unsigned n_out = n_in / pool_size;
  static const unsigned pad_left = 0;
  static const unsigned pad_right = 0;

  static const Pool_Op pool_op = Max;
};

template<class data_T, typename CONFIG_T>
void pooling1d(data_T data[CONFIG_T::n_in], data_T res[CONFIG_T::n_out]){
  for(int ii = 0; ii < CONFIG_T::n_out; ii ++){
    data_T pool[CONFIG_T::pool_size];
    for(int jj = 0; jj < CONFIG_T::pool_size; jj++){
      pool[jj] = data[ii * CONFIG_T::pool_size + jj];
    }
    res[ii] = pool_op<data_T, CONFIG_T::pool_size, CONFIG_T::pool_op>(pool);
  }
}

struct pooling2d_config{

  static const unsigned in_height = 10;
  static const unsigned in_width = 10;
  static const unsigned n_filt = 4;
  static const unsigned stride_height = 2;
  static const unsigned stride_width = 2;
  static const unsigned pool_height = 2;
  static const unsigned pool_width = 2;
  static const unsigned out_height = (in_height - pool_height) / stride_height + 1;
  static const unsigned out_width = (in_width - pool_width) / stride_width + 1;

  static const unsigned pad_top = 0;
  static const unsigned pad_bottom = 0;
  static const unsigned pad_left = 0;
  static const unsigned pad_right = 0;

  static const Pool_Op pool_op = Max;

  static const unsigned reuse = 1;
};

template<typename CONFIG_T>
constexpr int pool_op_limit(){
  return (CONFIG_T::out_height * CONFIG_T::out_width) * CONFIG_T::n_filt / CONFIG_T::reuse;
}

template<class data_T, typename CONFIG_T>
void pooling2d_cl(data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_filt],
               data_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt]){


  const int limit = pool_op_limit<CONFIG_T>();
#pragma HLS ALLOCATION instances=pool_op limit=limit function

 unsigned padded_height = CONFIG_T::in_height + CONFIG_T::pad_top + CONFIG_T::pad_bottom;
  unsigned padded_width = CONFIG_T::in_width + CONFIG_T::pad_left + CONFIG_T::pad_right;
  if (CONFIG_T::pad_top == 0 && CONFIG_T::pad_bottom == 0 && CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0) {
    padded_height -= padded_height - (padded_height / CONFIG_T::stride_height * CONFIG_T::stride_height);
    padded_width -= padded_width - (padded_width / CONFIG_T::stride_width * CONFIG_T::stride_width);
  }

  for(int ff = 0; ff < CONFIG_T::n_filt; ff++){

   for(int ii = 0; ii < padded_height; ii += CONFIG_T::stride_height){

    for(int jj = 0; jj < padded_width; jj += CONFIG_T::stride_width){
     data_T pool[CONFIG_T::pool_height * CONFIG_T::pool_width];

        unsigned img_overlap = 0;

     for(int kk = 0; kk < CONFIG_T::stride_height; kk++){

      for(int ll = 0; ll < CONFIG_T::stride_width; ll++){
            if(ii+kk < CONFIG_T::pad_top || ii+kk >= (padded_height - CONFIG_T::pad_bottom) || jj+ll < CONFIG_T::pad_left || jj+ll >= (padded_width - CONFIG_T::pad_right)){

              pool[kk * CONFIG_T::stride_width + ll] = pad_val<data_T, CONFIG_T::pool_op>();
            }else{
         pool[kk * CONFIG_T::stride_width + ll] = data[(ii + kk) * CONFIG_T::in_width * CONFIG_T::n_filt + (jj + ll) * CONFIG_T::n_filt + ff];
              img_overlap++;
            }
      }
     }



     res[(ii/CONFIG_T::stride_height) * CONFIG_T::out_width * CONFIG_T::n_filt + (jj/CONFIG_T::stride_width)* CONFIG_T::n_filt + ff] =
       pool_op<data_T, CONFIG_T::pool_height*CONFIG_T::pool_width, CONFIG_T::pool_op>(pool);

        if(CONFIG_T::pool_op == Average){
          data_T rescale = CONFIG_T::pool_height * CONFIG_T::pool_width / img_overlap;
          res[(ii/CONFIG_T::stride_height) * CONFIG_T::out_width * CONFIG_T::n_filt + (jj/CONFIG_T::stride_width)* CONFIG_T::n_filt + ff] *= rescale;
        }
    }
   }
  }
}

template<class data_T, typename CONFIG_T>
void pooling2d_cf(data_T data[CONFIG_T::in_height * CONFIG_T::in_width * CONFIG_T::n_filt],
               data_T res[CONFIG_T::out_height * CONFIG_T::out_width * CONFIG_T::n_filt]){


  const int limit = pool_op_limit<CONFIG_T>();
#pragma HLS ALLOCATION instances=pool_op limit=limit function

 unsigned padded_height = CONFIG_T::in_height + CONFIG_T::pad_top + CONFIG_T::pad_bottom;
  unsigned padded_width = CONFIG_T::in_width + CONFIG_T::pad_left + CONFIG_T::pad_right;
  if (CONFIG_T::pad_top == 0 && CONFIG_T::pad_bottom == 0 && CONFIG_T::pad_left == 0 && CONFIG_T::pad_right == 0) {
    padded_height -= padded_height - (padded_height / CONFIG_T::stride_height * CONFIG_T::stride_height);
    padded_width -= padded_width - (padded_width / CONFIG_T::stride_width * CONFIG_T::stride_width);
  }

  for(int ff = 0; ff < CONFIG_T::n_filt; ff++){

   for(int ii = 0; ii < padded_height; ii += CONFIG_T::stride_height){

    for(int jj = 0; jj < padded_width; jj += CONFIG_T::stride_width){
     data_T pool[CONFIG_T::pool_height * CONFIG_T::pool_width];

        unsigned img_overlap = 0;

     for(int kk = 0; kk < CONFIG_T::stride_height; kk++){

      for(int ll = 0; ll < CONFIG_T::stride_width; ll++){
            if(ii+kk < CONFIG_T::pad_top || ii+kk >= (padded_height - CONFIG_T::pad_bottom) || jj+ll < CONFIG_T::pad_left || jj+ll >= (padded_width - CONFIG_T::pad_right)){

              pool[kk * CONFIG_T::stride_width + ll] = pad_val<data_T, CONFIG_T::pool_op>();
            }else{
         pool[kk * CONFIG_T::stride_width + ll] = data[(ii + kk) * CONFIG_T::in_width + ff * CONFIG_T::in_width*CONFIG_T::in_height + ll + jj];
              img_overlap++;
            }
      }
     }



     res[(ii/CONFIG_T::stride_height) * CONFIG_T::out_width + (jj/CONFIG_T::stride_width) + ff* CONFIG_T::out_height* CONFIG_T::out_width] =
       pool_op<data_T, CONFIG_T::pool_height*CONFIG_T::pool_width, CONFIG_T::pool_op>(pool);

        if(CONFIG_T::pool_op == Average){
          data_T rescale = CONFIG_T::pool_height * CONFIG_T::pool_width / img_overlap;
          res[(ii/CONFIG_T::stride_height) * CONFIG_T::out_width + (jj/CONFIG_T::stride_width) + ff* CONFIG_T::out_height* CONFIG_T::out_width] *= rescale;
        }
    }
   }
  }
}

}
# 16 "firmware/parameters.h" 2


# 1 "firmware/weights/w3.h" 1
# 12 "firmware/weights/w3.h"
model_default_t w3[128] = {-0.077627792954, 0.133722573519, -0.153526738286, -0.154735818505, -0.124185606837, 0.097241222858, 0.101873099804, -0.111804090440, 0.146352291107, -0.189012810588, 0.034967228770, -0.149682193995, -0.124871566892, 0.130826592445, 0.154393702745, -0.006628200412, -0.172835513949, -0.111145719886, 0.066494494677, 0.105398893356, 0.120577335358, -0.178004816175, -0.113619707525, -0.173499718308, 0.174662083387, -0.046706393361, 0.176134735346, 0.027740672231, -0.083324313164, -0.006571844220, 0.188298463821, -0.135466709733, 0.024083390832, 0.014485970140, -0.180916324258, 0.029711872339, -0.062900334597, -0.071547880769, -0.192862853408, -0.193138793111, -0.010261192918, -0.168827205896, 0.069808334112, -0.164177551866, 0.036413475871, -0.135521411896, 0.093053728342, 0.003107145429, -0.109649941325, 0.082419097424, -0.144638344646, -0.049967661500, 0.115142852068, -0.077935993671, 0.096373766661, -0.165935263038, -0.188628539443, 0.103160589933, 0.055237323046, 0.158223539591, -0.055427178741, 0.049305111170, -0.098192706704, 0.085490465164, 0.199006676674, -0.196038812399, -0.012932717800, 0.201252013445, 0.159124523401, 0.131301045418, 0.031095772982, 0.054214209318, -0.019693151116, -0.088028460741, -0.145732626319, -0.005102977157, -0.005081608891, -0.182549297810, 0.114263325930, 0.157796531916, 0.027440145612, 0.171830773354, 0.195010870695, -0.194626405835, -0.187910750508, -0.033826723695, 0.088434398174, 0.110039174557, -0.177262797952, -0.004678994417, 0.102529704571, 0.076447367668, -0.064828366041, 0.085960656404, 0.009402170777, 0.197800844908, 0.040202781558, 0.042462244630, -0.201743125916, -0.103567637503, -0.049358353019, -0.071357980371, -0.007653221488, -0.073397025466, -0.141970217228, 0.006346508861, -0.200712203979, 0.082785874605, -0.175020068884, -0.150992989540, -0.079850606620, -0.045492827892, -0.009382948279, -0.203327432275, 0.161840856075, 0.021677598357, -0.182628870010, 0.153141647577, -0.161144971848, -0.051167160273, -0.176682293415, 0.161271214485, -0.071816757321, -0.161355018616, -0.165552407503, 0.111603677273, 0.172013759613, -0.078521847725};
# 19 "firmware/parameters.h" 2
# 1 "firmware/weights/b3.h" 1
# 12 "firmware/weights/b3.h"
model_default_t b3[8] = {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000};
# 20 "firmware/parameters.h" 2
# 1 "firmware/weights/w7.h" 1
# 12 "firmware/weights/w7.h"
model_default_t w7[512] = {-0.029379904270, -0.101500213146, 0.195738971233, -0.052944839001, 0.246243417263, 0.020489990711, 0.165331542492, 0.186139047146, 0.239496886730, -0.243144452572, -0.059918642044, -0.113038599491, -0.117352306843, -0.130599498749, -0.169521570206, -0.051619946957, 0.105566859245, -0.032522141933, -0.051431357861, 0.057012736797, 0.238411486149, 0.090024113655, 0.224989950657, 0.210077643394, -0.143493890762, -0.136240184307, 0.009944915771, 0.228130280972, -0.045830309391, -0.247634768486, -0.121437370777, 0.012432038784, 0.118089020252, -0.194665312767, -0.173235356808, 0.122476160526, -0.007717192173, -0.189262807369, -0.144507348537, 0.172153890133, 0.097232282162, -0.028432667255, 0.177189648151, -0.156610906124, -0.081910431385, -0.173780798912, -0.241472005844, 0.190826773643, -0.240888595581, -0.123775184155, -0.202656865120, -0.036174893379, 0.042529642582, -0.018640697002, -0.111369609833, 0.217358231544, -0.192167043686, -0.226098716259, 0.237733781338, 0.050664424896, -0.202322483063, -0.041336476803, -0.122175395489, -0.137283742428, -0.218694627285, -0.133099257946, -0.147117733955, 0.106831610203, -0.175510168076, 0.138052225113, 0.244163036346, -0.181507647038, 0.095476150513, -0.187662363052, 0.217544376850, 0.132173299789, -0.074663937092, -0.196221649647, 0.036335766315, 0.173884928226, -0.166342437267, 0.115491211414, -0.072773873806, 0.120980799198, 0.014499247074, 0.000274658203, -0.004813909531, 0.090931057930, -0.168995499611, -0.129492104053, -0.045041322708, 0.227133929729, -0.145004868507, 0.216776192188, -0.015876889229, 0.214096605778, -0.210977315903, 0.053551375866, 0.188520967960, 0.197585344315, -0.139690458775, 0.181050539017, 0.140740752220, 0.000767529011, -0.126869440079, -0.217071056366, -0.047188341618, 0.057578444481, -0.076743066311, 0.126636266708, 0.183900833130, -0.048442006111, 0.054478764534, 0.148764789104, -0.131023406982, 0.104912638664, 0.241228103638, -0.118261396885, -0.198758363724, 0.127080976963, -0.121091246605, -0.232980072498, -0.138915359974, 0.235728740692, 0.053761363029, -0.047403931618, -0.118146538734, -0.157116413116, 0.014597058296, 0.201324939728, 0.231160938740, 0.209033548832, -0.074205517769, 0.176250576973, 0.002572178841, 0.248779833317, -0.224300861359, -0.144453346729, 0.047130227089, 0.114949703217, 0.224869370461, 0.095777392387, -0.059528589249, 0.191206514835, 0.001800060272, 0.133851230145, -0.086807549000, 0.016086339951, -0.233429193497, -0.058432459831, 0.197151660919, 0.234874486923, -0.141428470612, -0.047175824642, 0.180827796459, 0.205746233463, -0.131782174110, -0.097225904465, 0.069057285786, -0.005008220673, -0.243522107601, 0.089366853237, 0.099445223808, 0.207894980907, 0.139185369015, 0.051030218601, 0.226652503014, -0.153937280178, 0.235979497433, -0.202334880829, -0.242984294891, 0.231789290905, 0.057440340519, 0.050396323204, 0.095552980900, 0.130595564842, -0.066138446331, 0.115598738194, 0.040800690651, -0.035678207874, 0.052305102348, 0.067647993565, 0.024980425835, 0.141397297382, -0.119760096073, 0.163159370422, 0.079130232334, -0.000338971615, -0.197409629822, 0.050921499729, 0.081420898438, -0.157789349556, -0.200960040092, 0.137615740299, 0.177874088287, -0.226471841335, 0.218143820763, -0.201540231705, 0.162416756153, 0.171003162861, -0.078733026981, 0.101001143456, 0.178528308868, -0.013677179813, 0.193875193596, 0.183763265610, -0.171481907368, 0.054878592491, 0.210712790489, -0.182886958122, 0.007331550121, -0.222555696964, -0.084247827530, 0.029343485832, -0.077219605446, 0.207400500774, 0.215580284595, -0.103034675121, -0.065016925335, -0.063427150249, -0.164543986320, -0.098740220070, -0.108722448349, 0.109970211983, 0.247154772282, 0.012989938259, 0.214662194252, 0.171803057194, -0.150612056255, 0.227565705776, 0.067415297031, -0.022797882557, -0.120760023594, -0.124983012676, -0.070367097855, 0.228725850582, 0.062521696091, -0.123587191105, -0.147714495659, -0.088015019894, 0.038096249104, 0.188533425331, 0.033745169640, -0.188955187798, -0.092229604721, -0.116904377937, 0.009588062763, 0.118062198162, 0.174312889576, 0.195120632648, -0.114616096020, -0.204494714737, -0.164739489555, 0.168087959290, 0.104968547821, 0.067245841026, -0.001799941063, 0.068411231041, -0.069243788719, 0.137562215328, -0.218033790588, -0.020818173885, 0.070441305637, 0.035662293434, -0.031469166279, 0.074026107788, -0.006379425526, 0.094912350178, -0.183813631535, 0.115045905113, 0.184777081013, 0.109439432621, -0.231297671795, 0.221629321575, -0.136838555336, -0.120062887669, 0.008442699909, 0.001097738743, -0.191417932510, -0.150252938271, -0.168577253819, 0.057031810284, 0.037958145142, -0.236718177795, -0.237784206867, -0.046909749508, -0.133229255676, 0.010662794113, 0.065480649471, 0.016731739044, -0.194990813732, -0.171374499798, 0.017604649067, 0.221631646156, -0.078038811684, -0.043485581875, -0.182965695858, -0.188944935799, -0.123799204826, -0.013577520847, 0.153458833694, -0.021654367447, 0.146812915802, 0.160251080990, -0.008443892002, -0.182668566704, 0.098230957985, 0.151034057140, -0.058674693108, 0.095371901989, -0.083381593227, 0.007337093353, 0.030220091343, -0.093325674534, -0.135837137699, 0.014652490616, 0.140604376793, -0.222893893719, -0.184493422508, 0.084605991840, -0.167500615120, -0.112061321735, -0.116549432278, -0.177663266659, -0.201028347015, 0.199476420879, -0.184425294399, -0.214092314243, 0.172500967979, -0.123100996017, -0.076518714428, -0.217594087124, 0.154091835022, -0.200787603855, -0.063053786755, -0.242578029633, 0.174870967865, -0.142661452293, -0.119468569756, 0.043002486229, -0.061650872231, -0.067038774490, -0.158593118191, -0.160456955433, 0.191087722778, -0.079122245312, -0.116994500160, 0.064419209957, -0.033815562725, 0.212452232838, 0.003631234169, -0.222512722015, 0.108561396599, -0.169587075710, -0.143759310246, -0.193341732025, 0.102865874767, -0.100802719593, -0.105657517910, -0.194582402706, 0.221373736858, 0.064255714417, 0.018780589104, 0.230122447014, 0.202135860920, -0.089179396629, 0.166069507599, 0.011378407478, -0.040078461170, 0.059708237648, -0.179498672485, 0.080099761486, 0.215278387070, 0.105018556118, -0.199973523617, 0.080989480019, -0.080718934536, 0.037669539452, 0.100849568844, 0.196436345577, 0.073274850845, -0.082976937294, 0.122178435326, -0.219992399216, 0.221893429756, 0.191430270672, 0.100844800472, -0.210269093513, 0.096028387547, -0.009188711643, -0.134509921074, 0.152065515518, -0.247455894947, -0.091437637806, 0.173110783100, -0.039592862129, 0.207853436470, 0.227158188820, -0.122789978981, 0.079140245914, -0.203001558781, 0.218368947506, -0.245882928371, -0.116643607616, -0.082420766354, 0.125144362450, 0.114199578762, 0.221287190914, -0.115523219109, 0.106307029724, -0.062554657459, 0.048613786697, 0.171513557434, -0.177912116051, 0.211267352104, 0.022988140583, 0.089287519455, -0.052107572556, 0.093817770481, -0.111257493496, -0.170795321465, -0.074123144150, 0.062168598175, 0.106840848923, 0.156978189945, 0.085391163826, -0.215534925461, -0.133848428726, -0.025226235390, -0.137032032013, -0.041661322117, 0.056631207466, -0.205045342445, 0.036509096622, 0.119726359844, 0.188458383083, -0.149959146976, -0.105041086674, -0.008384883404, 0.087221086025, -0.100156009197, 0.057907104492, 0.098566055298, 0.242953538895, 0.185509681702, 0.008542180061, -0.179512262344, 0.043225526810, -0.044945478439, -0.235303223133, -0.101374387741, -0.245886802673, 0.161388516426, -0.076473534107, 0.172356605530, 0.210355043411, -0.137905180454, 0.046511888504, 0.130072891712, 0.064611494541, -0.211726903915, 0.025601923466, -0.229682385921, 0.145685017109, -0.125643134117, -0.047448575497, 0.041566550732, -0.133459568024, 0.034189701080, 0.063432574272, -0.177243888378, -0.218742668629, 0.143856942654, -0.019478738308, 0.145582437515, 0.036401629448, -0.207917332649, -0.075927078724, -0.136584937572, 0.054807305336, 0.229326605797, -0.105779290199, 0.120759010315, -0.229158580303, 0.055529057980, -0.163910925388, -0.175317704678, 0.051380395889, -0.192841351032, -0.032336652279, 0.132369458675, 0.218389928341, 0.213506817818, -0.068226218224, -0.222906708717, -0.097027659416, 0.230365812778, 0.234884262085, 0.038622558117, 0.124779939651, -0.132510721684, -0.158770561218, -0.008564054966, -0.140925168991, -0.161867201328, -0.223439157009, 0.202033162117, -0.215855419636, 0.025557100773, 0.126077771187, 0.135536313057, 0.068886637688};
# 21 "firmware/parameters.h" 2
# 1 "firmware/weights/b7.h" 1
# 12 "firmware/weights/b7.h"
model_default_t b7[16] = {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000};
# 22 "firmware/parameters.h" 2
# 1 "firmware/weights/w11.h" 1
# 12 "firmware/weights/w11.h"
model_default_t w11[69120] = {-0.045154716820, 0.044839374721, -0.014426618814, -0.068234577775, -0.056455641985, 0.053807362914, -0.051658160985, 0.019343413413, -0.061355002224, 0.035196974874, -0.034657552838, 0.025789454579, 0.016004286706, 0.027348451316, -0.004923172295, -0.060344956815, 0.020862936974, 0.026568263769, 0.009704999626, -0.007196240127, 0.025113366544, -0.056066501886, 0.044705443084, 0.011209852993, 0.050845950842, 0.036736235023, -0.028859157115, 0.060058265924, 0.070631921291, -0.060791701078, 0.053911298513, -0.070985049009, -0.008582524955, -0.054777726531, 0.037932150066, -0.033736702055, 0.008347585797, 0.018278077245, -0.069550588727, -0.069364741445, -0.039248935878, -0.016840312630, 0.040388293564, -0.035543370992, 0.066205605865, -0.071631826460, 0.028460450470, -0.049083016813, 0.018380641937, 0.048499070108, 0.058001577854, -0.065824203193, -0.008072867990, -0.066077634692, 0.001228138804, 0.055390805006, -0.006475381553, 0.025648467243, -0.064616665244, -0.051769003272, -0.070055790246, -0.036552473903, 0.031813941896, 0.030757173896, -0.033536728472, 0.008310340345, 0.041128665209, -0.037078749388, 0.032409019768, 0.013157285750, 0.038108184934, 0.048321947455, -0.011549282819, -0.062641732395, 0.039299130440, 0.058436945081, 0.008028320968, 0.034104071558, -0.008291378617, 0.068550899625, 0.044361591339, -0.071596667171, 0.039329014719, -0.042940065265, 0.040247164667, -0.018876034766, -0.006001502275, -0.028792500496, 0.025130242109, -0.046037834138, 0.040285810828, 0.024695284665, -0.064629979432, 0.062563568354, 0.039667531848, -0.040132414550, 0.024465970695, 0.050288118422, 0.057324483991, -0.059537734836, 0.047134414315, -0.038695167750, -0.006352059543, -0.020866435021, -0.017007060349, 0.062778294086, 0.063814684749, 0.014562480152, 0.042504072189, -0.049620684236, -0.030983008444, 0.057819321752, 0.042851850390, -0.053283333778, -0.036385226995, -0.054171856493, -0.028457026929, 0.039843603969, -0.035462878644, -0.050232645124, 0.060389220715, 0.054593086243, 0.019535258412, -0.024873025715, 0.027825519443, -0.060721755028, 0.047954782844, 0.002494804561, 0.067759305239, -0.014291413128, -0.020674102008, 0.010334044695, 0.050786383450, -0.008223153651, -0.049893267453, 0.059696286917, -0.027851913124, -0.014992125332, -0.065407603979, -0.055921368301, 0.017627157271, -0.061655752361, 0.068983957171, 0.027312301099, 0.009090133011, -0.017653364688, -0.004831880331, 0.061352610588, 0.008905231953, 0.029818207026, 0.057353451848, 0.056560009718, 0.034184649587, 0.048805631697, -0.024919826537, -0.036844931543, -0.019992485642, -0.067871302366, 0.005586154759, -0.046793624759, -0.052479833364, -0.064269781113, 0.024091839790, -0.022264383733, -0.063459739089, 0.047386780381, 0.047820724547, -0.065439589322, 0.063203230500, -0.065338626504, -0.001341991127, -0.046547777951, -0.053599454463, -0.032256212085, -0.000389516354, 0.069908559322, -0.040283676237, 0.038531616330, -0.058276817203, 0.007145531476, -0.016334377229, 0.053993821144, 0.042104899883, 0.015898108482, 0.014318890870, 0.013756193221, 0.070375889540, -0.039318844676, 0.047524221241, -0.024145968258, 0.036527916789, -0.068094447255, 0.065315723419, 0.032848820090, 0.010646276176, -0.066884964705, 0.051835522056, -0.009020015597, -0.012094069272, 0.037323199213, -0.043815474957, 0.055113926530, -0.056931778789, -0.025300189853, -0.057584449649, 0.004257030785, 0.045541033149, -0.015286181122, -0.038034718484, 0.013400532305, -0.050488300622, -0.009912922978, -0.006581299007, -0.015135299414, 0.005024984479, -0.018379542977, 0.000320725143, -0.021207824349, -0.011424914002, 0.051674745977, 0.063114479184, 0.048973068595, 0.055598333478, 0.014771386981, 0.034927539527, -0.061506487429, 0.062850326300, 0.039808712900, 0.022915884852, -0.006163015962, -0.003144018352, -0.010158509016, 0.020882263780, -0.037205044180, 0.011328525841, 0.019578516483, 0.004553563893, -0.004604667425, 0.047298841178, -0.026781864464, 0.018762491643, -0.023887407035, -0.060144741088, -0.070851065218, -0.019243959337, -0.018882401288, 0.025289006531, -0.047060821205, -0.030685562640, 0.014788985252, -0.057662874460, -0.066689565778, 0.071289360523, 0.052222922444, 0.002029649913, 0.055669501424, 0.020761147141, 0.062421336770, -0.019433125854, -0.030803374946, -0.038244102150, -0.023375656456, -0.023547839373, 0.034153699875, -0.059221155941, -0.024093300104, -0.059131838381, 0.058305472136, 0.036437965930, 0.001809678972, 0.053570926189, 0.008260354400, 0.023901566863, 0.029968380928, 0.021426863968, 0.054878696799, 0.026695199311, -0.061645362526, 0.037792161107, -0.057059329003, -0.031992886215, -0.008209727705, -0.017158236355, -0.063429974020, 0.043780647218, -0.035929430276, -0.070666611195, 0.006651848555, -0.011312402785, 0.006314933300, -0.017492417246, 0.052969217300, -0.042301952839, 0.049954675138, 0.069787025452, 0.006888434291, -0.026255331933, -0.031647313386, 0.062904775143, -0.023897353560, 0.052449651062, -0.019532561302, -0.070035360754, 0.046819843352, 0.010028012097, 0.039379514754, -0.009913574904, -0.058789670467, -0.055383287370, -0.000833563507, -0.048857428133, 0.030303858221, -0.018807552755, 0.034313231707, 0.062391951680, -0.058241974562, -0.004093222320, 0.015132166445, 0.067763611674, 0.061760023236, 0.010346904397, -0.055623285472, -0.030627369881, 0.051086440682, -0.051411658525, 0.003558345139, 0.049869380891, 0.048955366015, -0.034720458090, -0.011528600007, 0.036526009440, 0.046540692449, -0.050767973065, 0.053926303983, -0.055788807571, 0.066924601793, -0.026701357216, -0.035875506699, -0.008852697909, 0.017418377101, 0.028865404427, 0.047042258084, 0.064346373081, -0.061106286943, -0.042056813836, 0.033716142178, -0.014925155789, 0.011019013822, 0.066930443048, 0.017063170671, -0.058031179011, 0.003873310983, -0.003920435905, -0.062492053956, 0.031799949706, -0.009726267308, -0.014667578042, -0.067652575672, 0.047479003668, -0.068664617836, 0.040996260941, 0.056405499578, -0.014275409281, 0.056296363473, 0.014876328409, 0.027340054512, -0.059486012906, 0.015543103218, 0.034988395870, -0.008516915143, 0.058773875237, -0.048917628825, -0.026173293591, -0.023692339659, -0.036905564368, 0.001144088805, 0.066204190254, 0.043126620352, -0.006202071905, -0.056615557522, 0.010294973850, 0.054510921240, 0.008524537086, -0.031290866435, -0.055676691234, 0.050643324852, -0.005746535957, 0.025397218764, 0.067116633058, -0.063300527632, 0.051048867404, -0.067349307239, -0.059241905808, 0.026378341019, -0.060003478080, -0.014635864645, 0.017638847232, 0.016866192222, -0.049117483199, -0.045097108930, 0.005508348346, 0.032406702638, -0.060600470752, -0.052404880524, 0.046040102839, -0.059496439993, 0.053944230080, -0.032962862402, 0.009273581207, 0.022433780134, -0.065633542836, 0.016649700701, -0.056097336113, -0.048613507301, 0.018010519445, 0.052253395319, 0.070266559720, -0.048189282417, 0.000257961452, 0.006464831531, 0.006736524403, -0.023173466325, 0.044435165823, -0.037265591323, 0.029432505369, -0.067718870938, -0.031005930156, -0.065515883267, 0.005251780152, 0.047111220658, -0.030884742737, 0.028205953538, 0.028154060245, -0.028715070337, 0.036648742855, -0.045496918261, -0.018059883267, 0.037607170641, -0.048720326275, 0.012968569994, 0.017753146589, -0.030861582607, 0.004501722753, -0.024249449372, 0.036234378815, -0.005617521703, -0.013567987829, 0.071717217565, -0.036556225270, -0.010046306998, -0.018070999533, 0.069446623325, 0.009042434394, -0.066650867462, -0.038579918444, 0.050873517990, 0.056556716561, 0.009395718575, -0.011218663305, 0.013233445585, -0.031011469662, -0.036409489810, -0.015269301832, -0.046885557473, -0.072054311633, 0.063029900193, -0.004257857800, 0.024222172797, -0.061196930707, 0.019381590188, -0.059135518968, -0.055405158550, 0.011682875454, -0.042443111539, -0.002602845430, 0.050263360143, 0.069048047066, -0.036681987345, -0.065481849015, -0.021264277399, -0.006165802479, -0.064216993749, -0.014265324920, -0.054602690041, -0.064816616476, -0.027689587325, -0.007987290621, 0.051154941320, -0.017213638872, 0.008134759963, -0.025476142764, -0.050676070154, 0.025080844760, 0.007504306734, 0.023010417819, -0.069665320218, -0.036095507443, 0.059382855892, -0.028209168464, 0.032401762903, 0.029151611030, -0.007176645100, -0.064363658428, 0.058149427176, -0.004681445658, 0.063277304173, -0.026168871671, 0.022400900722, -0.031425144523, 0.003274463117, 0.023024730384, -0.012343373150, -0.054933428764, -0.005597099662, 0.071556240320, 0.071803092957, -0.048890925944, -0.035933766514, 0.038705646992, -0.064047008753, -0.039973154664, -0.001586809754, 0.000077292323, 0.016771145165, -0.038080949336, 0.006938524544, -0.056808955967, -0.000660158694, 0.037403553724, -0.056295417249, -0.032078575343, 0.031186632812, -0.038853604347, -0.069227024913, -0.053411729634, 0.006137154996, -0.003335095942, 0.067321419716, 0.060785964131, 0.002303071320, 0.000356152654, -0.060439176857, -0.056588649750, 0.052743121982, -0.001817010343, 0.013810046017, -0.017614461482, 0.033798180521, 0.052186034620, 0.011938303709, -0.059606820345, 0.053995907307, 0.000807017088, -0.038492560387, -0.022282414138, 0.014261767268, 0.041759729385, 0.033361226320, -0.013776149601, -0.022912237793, 0.010459825397, 0.002125300467, -0.011688206345, 0.054021507502, -0.065407119691, 0.058205857873, -0.004036463797, -0.071467675269, 0.028403893113, 0.044935211539, 0.025694437325, -0.049008619040, 0.011143282056, 0.061767131090, 0.028688043356, 0.000199526548, -0.061964917928, 0.022235065699, 0.050352744758, -0.060809321702, -0.018139496446, 0.026559866965, -0.040101770312, 0.017878428102, -0.071579292417, -0.010621979833, 0.016459725797, -0.038177426904, 0.060022622347, -0.016021512449, -0.020222656429, -0.004943430424, -0.025873713195, -0.001371845603, 0.057981759310, -0.009660333395, 0.021859124303, -0.046151772141, 0.033891297877, 0.058916896582, 0.041276864707, 0.017631739378, 0.047735534608, 0.045410491526, -0.030462171882, -0.025428257883, -0.054757766426, -0.005562119186, 0.008401684463, 0.019390076399, 0.020735546947, -0.058427769691, 0.005735985935, -0.058041296899, 0.006379336119, -0.013322245330, -0.039436072111, 0.055087372661, -0.039946965873, -0.024576146156, -0.013992950320, 0.027388356626, 0.018762573600, 0.051498860121, -0.045147404075, -0.037934679538, 0.003887124360, -0.005089178681, 0.036689266562, -0.015162795782, -0.045614849776, -0.008598409593, 0.029424764216, 0.067549064755, -0.047602601349, -0.048715561628, -0.009188823402, 0.061103343964, 0.003834284842, -0.015546150506, -0.001606993377, 0.041750192642, -0.070179603994, -0.002358630300, -0.030039686710, 0.002689339221, -0.069462284446, 0.009175866842, -0.030507426709, -0.033294979483, 0.012411959469, 0.038584753871, -0.011301029474, -0.025303285569, -0.058876752853, -0.007134884596, -0.034307487309, -0.069268062711, -0.002179652452, 0.026309341192, -0.001547731459, -0.033069729805, -0.063861384988, 0.017970651388, -0.022120967507, -0.052621562034, -0.020086091012, 0.049238376319, 0.022239997983, -0.040167428553, -0.052091468126, -0.006505437195, 0.052663944662, 0.005934029818, 0.021933794022, 0.060283631086, 0.015119671822, -0.010048437864, 0.047862671316, -0.047190405428, -0.067786045372, -0.020901948214, -0.064273856580, -0.061034932733, -0.070252045989, 0.033676341176, -0.010171309114, 0.049965776503, 0.007865950465, 0.017911687493, -0.065710641444, -0.041310381144, -0.017757620662, 0.000962786376, 0.016627073288, 0.032607138157, -0.018106065691, -0.019556820393, 0.065886974335, -0.049501858652, 0.010035134852, -0.039335329086, -0.049402676523, 0.015569552779, 0.067743778229, -0.027514118701, 0.007745504379, -0.023221023381, -0.051142759621, 0.067599609494, -0.015563204885, -0.049852058291, 0.035052388906, 0.036670885980, 0.034940250218, -0.021094676107, -0.011118005961, 0.056261777878, -0.009313695133, -0.059487991035, 0.002276562154, -0.008185110986, 0.004384405911, 0.045914202929, -0.028273124248, -0.048091776669, -0.032803978771, -0.029592234641, 0.004030749202, 0.068252012134, 0.051641277969, -0.032615635544, 0.054490670562, -0.007390692830, 0.050851561129, 0.010603807867, 0.069957092404, -0.014922231436, -0.037285223603, 0.070083662868, -0.046438604593, 0.060969054699, 0.009462147951, 0.030981682241, -0.046490892768, 0.067045837641, -0.004532799125, -0.069022014737, -0.008008226752, -0.013607371598, -0.007828094065, 0.020971462131, 0.025824315846, -0.018238022923, -0.061967309564, 0.057334899902, -0.021105568856, 0.009740836918, -0.022954188287, -0.040572158992, 0.065596014261, -0.028687816113, -0.054856121540, 0.028617784381, -0.002454660833, 0.013716325164, 0.054380178452, 0.041178628802, -0.007233679295, 0.017442584038, 0.047773420811, 0.057325765491, 0.059865951538, 0.013695642352, -0.018030960113, 0.033463276923, 0.058470502496, 0.070893973112, -0.013708803803, 0.033096380532, -0.029044229537, -0.059060789645, 0.019392140210, -0.061504699290, 0.005158849061, 0.043098449707, 0.003009587526, -0.038860108703, -0.050602633506, -0.040219254792, -0.058026205748, 0.010492794216, -0.007861234248, -0.025736235082, -0.024752922356, -0.054982312024, 0.056635454297, -0.011018190533, 0.053575843573, 0.052749477327, -0.041270289570, -0.000389464200, -0.001088753343, -0.067056663334, 0.027269326150, 0.016115598381, 0.065052896738, 0.055995851755, 0.032010301948, 0.014676079154, 0.061035946012, -0.039268001914, -0.003777526319, -0.002629205585, 0.030621640384, -0.059336025268, 0.031764678657, -0.022543385625, 0.061212420464, -0.048402506858, -0.051459975541, 0.068727597594, -0.041999980807, 0.002229258418, 0.067469239235, 0.000448964536, -0.065790325403, -0.007086962461, 0.057803809643, 0.003268279135, -0.048930484802, 0.017857469618, 0.039931975305, 0.044333457947, 0.034147143364, 0.057461410761, 0.046293780208, 0.065110743046, -0.005784869194, -0.021049696952, 0.017809063196, -0.062605991960, -0.072031423450, 0.034662403166, -0.044312015176, 0.070272341371, 0.036497622728, 0.005514957011, -0.002355068922, 0.037142686546, 0.031404443085, 0.017089150846, 0.042315080762, -0.006345368922, -0.023394051939, -0.008198663592, 0.038592495024, 0.047757387161, 0.045951008797, -0.007126145065, -0.053415223956, -0.019382003695, 0.036279343069, 0.054746821523, 0.057009577751, -0.063983999193, 0.056257113814, -0.059229139239, 0.043530791998, -0.037826228887, 0.033982962370, 0.071418926120, 0.038535386324, 0.013508662581, -0.017101403326, 0.064376085997, -0.017755605280, -0.037334933877, -0.029781609774, -0.055072613060, -0.006040915847, 0.068579629064, 0.028594486415, 0.051498085260, -0.058988627046, 0.063919126987, -0.038225568831, 0.005446091294, 0.000967152417, 0.012528873980, -0.018162157387, 0.003905363381, -0.033230919391, 0.068108767271, 0.066701501608, 0.028966866434, 0.039407938719, -0.020572859794, 0.025470569730, 0.051561459899, -0.060602448881, 0.020927913487, 0.009798549116, -0.020485725254, -0.042704582214, -0.033180952072, 0.056021794677, -0.022707052529, 0.060218632221, 0.050446294248, -0.027717083693, 0.022430270910, 0.006934463978, -0.068250790238, -0.012325048447, -0.009097337723, -0.047338876873, -0.060330208391, -0.063300721347, 0.052092343569, 0.015716388822, -0.048122387379, 0.025109991431, -0.046850182116, -0.030330888927, -0.032040875405, -0.039532516152, -0.009228229523, -0.050150915980, 0.023022338748, -0.052564557642, -0.066242247820, 0.060705810785, 0.016170158982, -0.005539886653, -0.048263341188, -0.017697449774, 0.056514054537, 0.043694444001, 0.052304431796, 0.046935476363, 0.030096814036, -0.010768510401, 0.022400639951, -0.016781758517, 0.001450397074, 0.051841974258, 0.061353489757, -0.060265220702, 0.058215737343, 0.027655087411, -0.035558048636, -0.016201283783, -0.023434486240, -0.046423032880, -0.005216889083, -0.067352458835, -0.049694359303, 0.053078070283, -0.048517361283, 0.057327374816, -0.011749617755, 0.011822313070, 0.040022984147, -0.015863146633, -0.008257634938, 0.052526116371, -0.049297824502, 0.067563980818, -0.063509739935, 0.021681293845, -0.010141834617, 0.023055620492, 0.050662115216, -0.067327454686, -0.066186226904, -0.002877660096, -0.049075912684, -0.068809233606, -0.070761851966, 0.069300279021, 0.002873651683, -0.050156507641, 0.062780067325, -0.067652642727, 0.012700133026, 0.019215807319, 0.071759566665, -0.051620546728, -0.010521959513, 0.050339706242, 0.048225194216, 0.017920389771, 0.041970588267, 0.031988054514, 0.001886092126, -0.002478495240, 0.032893523574, -0.069222413003, 0.018165275455, -0.027539633214, -0.008756466210, 0.035836845636, -0.012073475868, 0.053411737084, 0.048368901014, 0.060138732195, -0.061772808433, 0.050597026944, -0.058000050485, 0.059929788113, -0.014249686152, 0.035152629018, -0.022601783276, 0.018171519041, -0.020853355527, -0.042611375451, -0.020296953619, 0.032151751220, -0.035480465740, 0.015659146011, -0.058118466288, 0.023771248758, -0.055443115532, 0.058892995119, 0.057847142220, -0.059825699776, 0.024412602186, 0.015180893242, 0.069948390126, -0.003500565886, -0.014699097723, -0.040701154619, 0.020389281213, -0.036452401429, -0.058474518359, 0.047332391143, 0.068537443876, 0.062085777521, 0.056279122829, -0.022551782429, -0.038903828710, -0.026118423790, 0.039222560823, -0.002403177321, -0.056527890265, -0.027339715511, 0.051477685571, -0.070524401963, 0.019906319678, 0.030150234699, -0.054115936160, -0.061956193298, -0.009352974594, 0.070559263229, -0.004113376141, 0.051217518747, 0.066212385893, 0.021558679640, 0.063509926200, 0.039473414421, 0.066439554095, 0.054497107863, -0.045287035406, 0.031874865294, -0.047542136163, -0.063528515399, -0.000060632825, 0.022025249898, -0.013603776693, 0.064166024327, 0.063429832458, 0.000466652215, 0.026069112122, -0.000773206353, -0.038057584316, 0.007803089917, -0.039914753288, -0.027264177799, -0.054088287055, 0.029135420918, 0.054392755032, -0.044880792499, 0.068775117397, -0.056806892157, 0.004180304706, 0.066703692079, -0.045727342367, 0.055410012603, 0.039177976549, -0.014883808792, 0.015686333179, -0.068867616355, 0.021048218012, 0.068839594722, -0.047338277102, -0.030076079071, -0.050727069378, -0.060587134212, 0.039145082235, -0.047712702304, -0.059425927699, -0.057985961437, -0.038523826748, -0.008233472705, -0.064493000507, -0.018285598606, 0.059514284134, -0.003249719739, -0.068213015795, 0.019167736173, 0.058729097247, -0.019371319562, 0.052156127989, -0.038440287113, 0.039613559842, 0.065452501178, 0.021729141474, 0.023991867900, -0.064671121538, -0.037053145468, -0.070034228265, -0.023433830589, 0.015679709613, -0.058115299791, 0.037125565112, -0.004383705556, -0.065621614456, 0.062995672226, -0.002767115831, -0.006765753031, -0.059366412461, 0.005443908274, -0.027507647872, -0.006850376725, 0.041866511106, 0.053856149316, 0.019262537360, 0.032159015536, -0.071052119136, 0.042289718986, 0.070383071899, -0.019981492311, 0.069825842977, 0.017732374370, 0.027716808021, -0.052718229592, 0.033850729465, -0.050501599908, 0.017460927367, 0.007363349199, -0.071278557181, 0.047781512141, -0.034286461771, -0.019991986454, 0.007546596229, -0.031050302088, -0.010450277478, -0.000644616783, 0.026907406747, 0.014257721603, -0.013257049024, 0.012434378266, 0.016440160573, 0.018537431955, 0.037276141346, -0.006022423506, -0.014994498342, -0.000507280231, -0.055511839688, 0.030165292323, -0.012694194913, 0.056813433766, -0.001844905317, -0.012594673783, -0.058492586017, 0.036169938743, 0.017570309341, -0.021113965660, -0.021075386554, 0.030365675688, -0.015404440463, -0.059668209404, -0.021323539317, -0.066596806049, -0.017912030220, -0.041791625321, 0.038424439728, -0.002272740006, 0.000457018614, -0.035432595760, -0.011457830667, 0.017139688134, -0.053778722882, 0.057687312365, -0.009033851326, -0.008426375687, 0.061180472374, -0.063097834587, -0.004732787609, 0.004694677889, -0.059105373919, -0.066730156541, 0.013578496873, 0.037737645209, -0.011197239161, -0.038704853505, 0.008769571781, 0.023724481463, -0.000419527292, -0.030418898910, -0.027055844665, -0.023016851395, 0.031185925007, -0.010461099446, -0.039222851396, 0.048292972147, 0.001066364348, 0.001112200320, -0.020437289029, -0.055494405329, 0.050808094442, -0.062454972416, -0.013839349151, 0.005284868181, 0.049953043461, -0.052571903914, 0.009181909263, -0.025707483292, -0.070176988840, 0.008934289217, 0.016149371862, -0.047826986760, -0.058715082705, -0.005413658917, 0.043524563313, -0.046747665852, -0.004789069295, 0.057716563344, 0.019397489727, -0.067490398884, -0.002345643938, 0.053154394031, 0.031590513885, -0.071540057659, 0.071248143911, -0.006583936512, 0.000743262470, 0.001955986023, 0.032905407250, 0.006348893046, 0.012076504529, 0.046053528786, 0.044705271721, 0.004357345402, 0.007382325828, -0.017164722085, -0.050821721554, -0.033100858331, 0.063005715609, 0.041813373566, -0.042170837522, -0.014180723578, -0.043935939670, 0.062757715583, -0.029122706503, -0.068042710423, -0.035246852785, -0.034417178482, -0.051659397781, -0.016628984362, 0.044225417078, -0.057350203395, 0.009120292962, 0.069850474596, -0.018363904208, 0.060308799148, -0.067310117185, -0.057682197541, 0.070814862847, 0.055203020573, 0.064519003034, 0.017085827887, -0.027455393225, 0.004375979304, 0.033002026379, 0.020850397646, -0.042795360088, -0.026963993907, -0.005608282983, -0.021547719836, -0.009560793638, -0.051966514438, 0.034066580236, 0.057959809899, 0.042651601136, -0.019160144031, -0.006964281201, 0.030206777155, -0.006324410439, -0.022166322917, -0.021161418408, -0.000008843839, -0.012349259108, 0.031364403665, -0.050716936588, -0.059364106506, 0.020332470536, 0.024116359651, 0.043282248080, 0.038586422801, 0.069100961089, 0.012785471976, -0.056843973696, 0.010535553098, -0.064021736383, 0.029401861131, -0.063057385385, 0.061179712415, -0.053141266108, 0.059801176190, -0.040345586836, 0.020139947534, 0.018854439259, 0.039037697017, 0.036049872637, -0.058401923627, -0.070358261466, -0.050100587308, 0.028391554952, -0.063437476754, 0.007910117507, 0.059319898486, -0.021874364465, 0.053228050470, 0.022325828671, 0.001123197377, -0.042855393142, -0.000507056713, -0.002253070474, -0.026911154389, -0.044500097632, 0.002326458693, -0.064983293414, -0.013260766864, -0.028790261596, 0.011832118034, -0.025054860860, -0.059781894088, 0.033718720078, -0.030926398933, -0.051517531276, 0.026227839291, 0.032448187470, 0.060564711690, 0.007834032178, -0.038525976241, 0.025350242853, -0.016413748264, 0.043586805463, 0.023387201130, -0.013365432620, -0.038713302463, -0.011823929846, -0.014070637524, -0.069283545017, 0.068845838308, 0.052011594176, -0.030534595251, 0.009586036205, -0.036283951253, -0.011191785336, -0.057345263660, 0.062380209565, 0.071312874556, 0.028062395751, 0.035669937730, 0.043410092592, 0.011786319315, 0.048330172896, 0.012249544263, -0.035093355924, 0.023168340325, -0.020734149963, -0.056938245893, -0.051384046674, 0.039442837238, -0.034594472498, 0.016025833786, -0.047180339694, -0.035268843174, 0.002492003143, 0.005467377603, 0.045326776803, 0.034526370466, -0.061551570892, 0.027416020632, 0.031621679664, -0.063237912953, -0.003444060683, -0.022642716765, 0.010436080396, 0.039988413453, 0.029397472739, -0.061217300594, -0.045196820050, -0.006500452757, 0.015289999545, -0.021189894527, 0.048925325274, -0.018192045391, 0.036016218364, 0.055956885219, 0.070162400603, 0.032408453524, -0.057937182486, -0.056472830474, -0.033162508160, 0.007696792483, 0.059477612376, 0.001403369009, 0.049173921347, 0.016803115606, -0.054244760424, 0.047879539430, -0.070690803230, -0.047581329942, 0.030916228890, -0.032258898020, 0.015175752342, -0.019175354391, -0.068253457546, -0.014081459492, -0.069687709212, -0.000549793243, -0.041397616267, 0.056232437491, 0.014401584864, -0.035559803247, 0.010304041207, 0.067406252027, 0.035284809768, -0.013816688210, -0.030711114407, -0.018190994859, -0.001690059900, -0.055968046188, -0.065816603601, -0.041850075126, -0.039940737188, 0.055649846792, -0.028585232794, 0.065270900726, -0.041152201593, 0.058712184429, -0.014803420752, 0.054157465696, 0.055298715830, -0.011740617454, -0.033412791789, -0.051540572196, 0.019830211997, 0.027023009956, 0.007028974593, 0.063374787569, 0.020596444607, 0.023869134486, 0.001076601446, 0.062812000513, -0.050528716296, -0.017506320029, -0.021479118615, 0.049927286804, -0.051610328257, -0.024576198310, -0.001997731626, 0.013674683869, -0.020203694701, -0.021208927035, 0.057377621531, 0.059229433537, 0.019599251449, -0.031940460205, 0.018016576767, 0.042813889682, 0.026785619557, -0.044350352138, 0.067770287395, -0.064610332251, 0.041161835194, 0.053648591042, 0.056616544724, 0.028909176588, -0.048887379467, 0.041909679770, 0.069446787238, 0.040634460747, 0.048741817474, -0.048587627709, -0.018875863403, -0.015987340361, 0.052280910313, 0.058421194553, -0.001364417374, 0.060064390302, 0.059396952391, -0.027129091322, 0.020304232836, -0.004093982279, 0.035316318274, -0.002934925258, -0.004888415337, -0.071423314512, 0.034221902490, -0.005143724382, -0.021770164371, 0.036084510386, -0.009996801615, -0.040742415935, -0.062032382935, -0.051426682621, -0.052659757435, 0.053820177913, -0.049587149173, -0.055792491883, -0.029169145972, 0.036690883338, 0.024184525013, 0.052961304784, 0.003782324493, -0.036354787648, -0.009529583156, 0.051993377507, 0.027357973158, -0.032252788544, -0.020902480930, 0.065762817860, 0.000342734158, 0.039060369134, -0.069619156420, -0.051235638559, 0.009613394737, -0.002467535436, -0.000384837389, -0.001445442438, -0.006995409727, 0.033521242440, -0.053298339248, -0.001607075334, -0.064424604177, -0.049365773797, 0.050096184015, -0.059971079230, -0.070160485804, -0.055381394923, 0.000365808606, -0.039755854756, -0.028793513775, 0.006822086871, 0.057418361306, -0.069877959788, -0.055981159210, -0.037934385240, -0.000049971044, 0.038532033563, 0.056152731180, -0.007494822145, -0.026380371302, -0.022021997720, 0.034216962755, -0.067932829261, -0.022838231176, -0.009562514722, 0.008325152099, -0.027770388871, -0.033760223538, -0.014239154756, 0.004479490221, 0.062822625041, -0.033091548830, 0.027499370277, 0.064358606935, -0.047014433891, -0.029456254095, 0.023795560002, -0.015143401921, -0.065495319664, 0.069281637669, -0.062479112297, -0.010019671172, -0.002234816551, -0.012927480042, 0.058038845658, 0.050225347281, 0.038584545255, 0.071611210704, -0.034839872271, -0.007793471217, -0.058431535959, -0.023245111108, 0.014835856855, 0.054326936603, 0.039498016238, -0.024281229824, 0.029932007194, 0.011091232300, -0.001469679177, -0.048451267183, -0.053597591817, 0.025225512683, 0.018448315561, -0.052024446428, 0.054763719440, -0.063216611743, -0.049317128956, -0.039888031781, 0.041295617819, 0.071979612112, 0.060366451740, -0.004416599870, -0.047508344054, 0.018012993038, 0.032748267055, -0.047094926238, -0.003250718117, 0.066280633211, -0.007519409060, -0.050660826266, -0.004597164690, -0.009795092046, 0.067384302616, 0.040408164263, -0.016942035407, 0.006899192929, 0.017111316323, 0.055625423789, 0.041112042964, 0.000202812254, 0.019807912409, 0.042039103806, -0.032443057746, 0.038704805076, 0.059335291386, 0.042716935277, -0.004713654518, -0.011059157550, 0.052842199802, 0.046783141792, -0.040420293808, -0.048880755901, -0.058813001961, -0.059580270201, 0.036735996604, -0.054789651185, 0.056721821427, -0.007898554206, -0.052939433604, 0.069149419665, 0.061494439840, -0.037605814636, -0.055889878422, 0.032189466059, -0.054798461497, -0.015932537615, 0.062305778265, 0.032150529325, -0.000791303813, 0.019493706524, 0.016328766942, -0.057848483324, 0.068481951952, -0.005772396922, 0.020237572491, -0.020541612059, -0.069588273764, 0.069136157632, 0.029122911394, -0.035473391414, 0.056698769331, -0.011155497283, -0.047612767667, 0.006398260593, 0.007985532284, 0.031921051443, -0.002181716263, -0.059782512486, 0.072055861354, 0.011711642146, 0.042391076684, -0.042896226048, -0.039125926793, -0.023877635598, -0.052009098232, 0.022357657552, 0.052990287542, -0.055565334857, 0.016793563962, -0.056994631886, 0.044634565711, 0.003371283412, -0.023671641946, 0.066048651934, 0.041614159942, -0.017980873585, 0.052705302835, 0.022643886507, 0.011301077902, -0.032723400742, -0.034592717886, 0.051284231246, -0.026343911886, -0.061030782759, 0.042072728276, -0.060414157808, -0.010285403579, -0.017741274089, -0.000513218343, 0.066441312432, 0.023795165122, 0.056691065431, -0.071849808097, 0.003399498761, 0.058943510056, 0.003282427788, -0.043914325535, 0.066923469305, -0.051892563701, 0.019892022014, 0.020723879337, 0.044868022203, 0.051086805761, 0.043167583644, -0.018965642899, 0.013751029968, -0.058350149542, 0.005611859262, -0.014381382614, -0.053306031972, 0.015025295317, 0.055878400803, -0.065330311656, -0.005000382662, 0.026176512241, -0.004434905946, 0.058228462934, 0.061660468578, -0.028260014951, -0.059060513973, -0.051630593836, -0.038502834737, -0.053775679320, 0.034543178976, 0.063656702638, 0.039732009172, 0.023007079959, 0.054836317897, 0.024801425636, -0.017354335636, -0.051244035363, -0.031206261367, 0.017624765635, -0.010078601539, 0.048060767353, 0.037176616490, -0.036361999810, 0.044288992882, 0.072090402246, -0.043515913188, 0.026730522513, 0.060119718313, -0.062564335763, 0.022117197514, -0.016487047076, 0.048524774611, 0.020634628832, -0.069572687149, -0.061769902706, 0.003205895424, 0.009004853666, 0.022778488696, 0.008298724890, -0.008828319609, -0.022405717522, 0.047096177936, -0.056689649820, -0.010799031705, -0.058313675225, -0.034404635429, -0.014805935323, 0.063232168555, -0.018416743726, -0.056991707534, 0.048419967294, -0.022111196071, 0.008374668658, 0.000131472945, 0.057789787650, -0.025712557137, 0.040683329105, -0.008875481784, -0.036642618477, 0.056393459439, -0.031971327960, 0.059611156583, 0.004275836051, 0.031507030129, 0.027193203568, 0.008276753128, -0.064927272499, 0.036083444953, -0.063426665962, 0.068566143513, -0.054423652589, -0.053813360631, -0.035207897425, -0.065965004265, -0.042643427849, 0.031472548842, 0.047607988119, -0.035811480135, 0.062136739492, 0.069131553173, 0.047665126622, 0.040137387812, 0.059262186289, -0.026600819081, -0.017833705992, 0.046242780983, -0.042729392648, 0.049630925059, 0.030563980341, 0.019523598254, 0.029341690242, -0.041231524199, 0.010823138058, -0.052869215608, -0.063876628876, 0.014021217823, -0.042864341289, -0.056393958628, -0.021146982908, 0.025659233332, -0.027555894107, -0.006369970739, 0.049897141755, 0.012291856110, -0.063822828233, -0.059767905623, 0.010458104312, 0.059563979506, 0.004560723901, 0.061928674579, -0.038960490376, 0.020692594349, 0.065879315138, 0.050108194351, -0.004595138133, 0.031486712396, -0.064451754093, -0.069943651557, -0.065330162644, 0.049157783389, -0.061589181423, -0.063170671463, -0.000434786081, -0.030498150736, 0.042021207511, -0.050819847733, -0.029805179685, -0.056026034057, 0.058369487524, 0.003583006561, 0.041317865252, -0.025542285293, 0.055799081922, -0.004265688360, 0.051904603839, 0.045896500349, -0.063713535666, 0.045176118612, -0.022160507739, -0.015022631735, 0.013267114758, -0.061258681118, -0.003613941371, 0.060411453247, 0.067806020379, 0.050536580384, 0.009655892849, 0.064120203257, -0.069214582443, 0.005958758295, 0.006128430367, -0.021010123193, -0.058069463819, -0.046837069094, -0.010449036956, -0.027278337628, -0.068888641894, -0.071558937430, -0.014942895621, -0.069693371654, -0.047077700496, -0.054154805839, 0.041201911867, 0.049336656928, 0.000724866986, 0.067269921303, 0.027285583317, 0.001539453864, 0.059147134423, 0.048452459276, 0.025763764977, 0.048110775650, -0.028405476362, -0.007308326662, 0.012395247817, 0.002770274878, -0.069300189614, -0.018059231341, 0.020908743143, 0.038731954992, -0.031911171973, 0.034431286156, -0.038668651134, -0.033672865480, 0.069314375520, -0.043564330786, -0.001366786659, -0.038920689374, -0.059641145170, -0.055463075638, 0.067220076919, -0.036709636450, 0.061854287982, -0.039473529905, 0.029787920415, -0.023172449321, -0.060947727412, -0.035393089056, -0.001125954092, -0.001102305949, 0.029203541577, -0.069908775389, -0.029218479991, 0.005412593484, 0.035812377930, -0.064737915993, 0.055802941322, 0.013373225927, 0.041417062283, -0.050141382962, -0.053196169436, -0.043449133635, 0.003417551517, -0.001932531595, -0.033606827259, -0.045409612358, -0.059897657484, 0.051667280495, -0.064146757126, 0.042546749115, -0.038080744445, -0.030352775007, 0.011330038309, -0.043505210429, -0.064734905958, 0.069084167480, -0.034972358495, -0.037095129490, 0.010513387620, -0.066038474441, -0.009548440576, -0.026816245168, -0.026035126299, 0.070489391685, 0.051967240870, -0.004640422761, -0.050549242646, -0.021686058491, 0.060887590051, 0.060265585780, 0.042714253068, -0.051852867007, 0.013358585536, -0.041779838502, 0.031562499702, 0.010471507907, 0.041935041547, -0.011616334319, -0.033298850060, 0.009940035641, -0.023927722126, 0.055419608951, -0.047024998814, -0.052994251251, -0.039664145559, 0.049669444561, -0.011682562530, 0.046896241605, 0.049007877707, -0.052408874035, 0.004536688328, 0.021933816373, -0.013303007931, 0.008405797184, -0.029838889837, 0.069798678160, 0.038209617138, -0.009487651289, 0.033184804022, 0.032957457006, -0.032789628953, 0.061570778489, -0.057726986706, -0.025538567454, 0.054735884070, -0.018419291824, -0.013134714216, 0.051575876772, -0.011791203171, -0.034037984908, -0.049679528922, -0.004124246538, 0.030634321272, -0.017867378891, -0.038800451905, 0.059813961387, 0.067798346281, -0.020300205797, -0.037969488651, 0.040270276368, 0.004669636488, -0.026555310935, 0.052836373448, -0.069989591837, 0.034581996500, -0.053155697882, 0.038225501776, -0.064142502844, 0.024958595634, 0.018084540963, 0.049619115889, -0.002531714737, 0.001454040408, -0.024702869356, -0.049269519746, -0.049884632230, 0.025608718395, -0.040805287659, 0.068695351481, 0.020976744592, -0.026161558926, -0.033702649176, -0.056728191674, 0.064130440354, 0.054651930928, -0.048911109567, -0.045367971063, -0.013133268803, 0.048722252250, 0.050230927765, 0.008529908955, -0.058996729553, -0.036901541054, -0.027010161430, -0.036393918097, 0.008892804384, -0.011613015085, 0.011224806309, 0.022585846484, -0.011358462274, -0.071842394769, 0.053458914161, -0.071805246174, -0.023852825165, -0.041012298316, -0.061261642724, -0.008961200714, -0.011642660946, 0.036945894361, 0.008487321436, -0.061460308731, -0.023017764091, -0.001573316753, -0.020967021585, 0.061215713620, 0.051652409136, -0.059746827930, -0.007347829640, -0.061516072601, -0.002282634377, -0.046739064157, -0.008037269115, -0.057478852570, -0.047920744866, -0.032054364681, -0.002598471940, 0.009260386229, 0.013184837997, 0.051174730062, -0.009881898761, -0.012861527503, 0.033223368227, 0.061090797186, 0.024672485888, -0.042386382818, 0.064208090305, 0.047938175499, 0.051602616906, 0.035769961774, -0.014601230621, 0.057502508163, -0.061434876174, -0.027420464903, 0.058482185006, 0.050478830934, 0.046027146280, 0.009212948382, -0.040514621884, -0.015850551426, -0.050453662872, 0.030884161592, -0.034660134465, -0.066585481167, -0.069386012852, 0.066981330514, -0.009329713881, -0.038150876760, -0.030285134912, -0.011739514768, -0.054690938443, -0.050616264343, -0.003072679043, 0.058833897114, -0.048493422568, 0.066028371453, -0.013416036963, 0.043717622757, 0.071005403996, -0.040137354285, 0.016187056899, 0.015559092164, 0.071002796292, -0.031166482717, 0.042964808643, 0.041328348219, 0.030833415687, -0.027541648597, -0.051651433110, -0.061371814460, -0.022179521620, 0.037233330309, 0.021598085761, 0.005217194557, 0.071000292897, -0.034054141492, 0.012635417283, -0.012671019882, -0.026091165841, 0.006754241884, -0.042851865292, -0.066138565540, 0.024834290147, 0.067331343889, -0.008827388287, -0.012068279088, -0.043327331543, 0.007873125374, 0.034758694470, 0.068213209510, 0.001440912485, 0.046173714101, 0.008602000773, 0.066698387265, -0.054984737188, -0.071960464120, 0.047197557986, -0.001984119415, 0.056554079056, 0.020514786243, 0.011917002499, -0.028784070164, -0.013577293605, -0.033792261034, 0.060167178512, 0.070513948798, 0.015084370971, 0.017917998135, -0.052830569446, -0.047642655671, 0.071915015578, -0.043462228030, -0.020057938993, 0.006671346724, 0.025479033589, 0.042195647955, 0.024660058320, 0.024387337267, 0.003760248423, 0.013672173023, -0.052669875324, 0.010101884604, 0.014255292714, 0.026342637837, 0.039515636861, 0.055206179619, -0.024079967290, -0.006892666221, 0.039379671216, -0.014975607395, 0.028093338013, 0.070367559791, -0.033097069710, 0.036416694522, 0.068275123835, -0.008522629738, -0.062114011496, 0.012306794524, 0.044369556010, -0.059985857457, -0.014893859625, -0.023261733353, 0.045982412994, 0.006675183773, 0.033494934440, -0.069904610515, 0.027894414961, -0.039939876646, 0.029778115451, 0.058144554496, -0.007613942027, -0.069707803428, 0.069888681173, 0.021899625659, 0.068440347910, -0.043425302953, -0.047065809369, -0.064747244120, 0.064368337393, 0.058085247874, 0.034580849111, -0.057488471270, -0.002098195255, 0.032086417079, -0.033267430961, 0.010545447469, -0.054261483252, 0.065011307597, 0.015630654991, 0.060517802835, -0.021623618901, 0.005814433098, 0.002279996872, -0.024775896221, -0.055265031755, 0.053109586239, -0.063636429608, 0.067579835653, -0.005877472460, 0.038961157203, -0.063923276961, -0.051370948553, 0.027216106653, 0.039397098124, 0.014358207583, -0.040957856923, -0.031696885824, 0.030443280935, 0.028348676860, 0.046495251358, 0.043666794896, -0.013842668384, -0.057480677962, -0.031505841762, 0.037514947355, 0.038459114730, 0.044788964093, 0.058572471142, 0.022962689400, 0.000473447144, -0.066541641951, 0.011836372316, 0.048629820347, 0.020123586059, 0.007246658206, -0.033107087016, 0.001602724195, 0.068583413959, -0.011252127588, -0.018339764327, -0.053899306804, -0.056497141719, 0.052439242601, 0.041964530945, 0.067339152098, -0.018972028047, 0.051772341132, -0.033527351916, 0.045187994838, -0.067139096558, 0.041956789792, 0.041058495641, 0.024076834321, -0.041187770665, -0.037080571055, 0.006410084665, 0.058102339506, 0.039634823799, -0.053309008479, 0.020574644208, -0.008990094066, -0.046025633812, -0.011511687189, 0.046258382499, 0.033585593104, 0.059736490250, 0.038281969726, -0.063558399677, -0.065656222403, -0.007029116154, -0.013912890106, 0.060914158821, 0.045577354729, 0.009178176522, -0.026207018644, -0.037309315056, -0.011651109904, 0.064850300550, 0.006938561797, 0.060604378581, -0.044329673052, -0.019270971417, -0.040158689022, -0.054722651839, -0.041978951544, 0.015173219144, -0.067242026329, 0.005024299026, 0.052804395556, 0.067254155874, -0.009511843324, 0.002505004406, 0.055790305138, -0.055053509772, 0.059598520398, 0.005955696106, -0.018488854170, 0.005967326462, -0.048331718892, -0.006688825786, 0.054450988770, 0.032443709671, 0.014161162078, -0.030927777290, -0.029052231461, -0.020958814770, -0.046493388712, -0.041196197271, -0.031688161194, -0.017962098122, 0.050702445209, -0.049246840179, 0.002413056791, 0.036665774882, 0.032352842391, 0.027004770935, -0.038564451039, -0.013403546065, 0.062295109034, -0.024234358221, 0.036808021367, -0.070635005832, -0.016580410302, -0.056265477091, -0.069702059031, 0.032142221928, 0.006306409836, 0.061412572861, 0.029724657536, -0.008974812925, -0.006473161280, -0.007837660611, 0.056601434946, 0.000634692609, -0.004345849156, 0.001067481935, 0.052767716348, -0.041778154671, -0.026780419052, 0.055992379785, 0.026793844998, 0.063455030322, 0.005029939115, -0.022567663342, 0.009547077119, -0.022374674678, 0.063766241074, -0.010013286024, 0.042402587831, -0.010585207492, -0.021592475474, 0.032571844757, -0.055013541132, 0.042989775538, 0.045210175216, 0.012622907758, -0.059531420469, 0.016791306436, -0.017143093050, 0.055288687348, -0.060775596648, 0.020388633013, -0.026900280267, -0.011947661638, -0.018334101886, -0.012706447393, 0.052821516991, 0.026573739946, -0.052340343595, 0.060904592276, -0.014012340456, -0.068274945021, -0.046827193350, -0.023038189858, -0.001831725240, 0.019378907979, -0.006559550762, -0.037820376456, 0.067885443568, -0.029727634043, 0.054253473878, -0.051788240671, 0.017122156918, 0.048016704619, 0.029199913144, 0.067889824510, -0.046172026545, -0.014831982553, -0.001395091414, -0.028078936040, 0.019816190004, -0.042477697134, 0.003832787275, -0.033857747912, -0.046220824122, 0.050192244351, 0.060594260693, 0.021274343133, -0.038020540029, -0.042386639863, -0.005257152021, 0.026335254312, -0.037741262466, -0.051323562860, -0.005085602403, 0.071738868952, -0.029604107141, 0.041337415576, 0.043689750135, 0.045170083642, 0.046712271869, 0.071091234684, 0.056687161326, 0.062784016132, 0.060954004526, -0.018150232732, 0.017833188176, 0.046275608242, 0.022756725550, -0.068908520043, -0.034975472838, 0.064045354724, 0.050147816539, 0.044050291181, -0.062736816704, -0.053104564548, -0.030584715307, -0.062104098499, -0.063520200551, -0.023989424109, 0.030977897346, 0.033054299653, 0.050554111600, 0.053085118532, -0.026743032038, 0.066012546420, 0.058437496424, -0.043875940144, 0.015743061900, -0.028956994414, -0.011503908783, -0.052776180208, -0.003233097494, -0.000231496990, -0.038500495255, -0.009476445615, -0.004332996905, -0.004511736333, -0.065353356302, -0.003452718258, 0.007295899093, -0.070599958301, 0.046401865780, 0.054399877787, 0.070025414228, 0.015121862292, -0.015759907663, 0.039642170072, -0.069983586669, -0.071123771369, -0.030785977840, -0.066613808274, 0.038560114801, 0.049608275294, 0.069067299366, -0.051888380200, 0.052205733955, -0.045626461506, -0.044370759279, 0.058319270611, 0.066121175885, -0.018109608442, -0.013158526272, 0.068479403853, 0.024805299938, 0.039846614003, -0.020619712770, 0.050255939364, 0.038540534675, -0.007441259921, -0.009216703475, 0.000973209739, 0.048858731985, 0.005936130881, 0.052679702640, 0.062817990780, 0.062660470605, -0.010962821543, -0.048017218709, -0.004599623382, 0.041950352490, -0.016053136438, -0.000182732940, 0.006224565208, -0.024793256074, 0.026619181037, 0.053779944777, -0.048812344670, 0.043128885329, 0.057441040874, -0.017890676856, 0.056517258286, -0.004995182157, -0.041833575815, -0.030196264386, 0.045485436916, -0.025829922408, 0.016255281866, 0.040682211518, -0.044716760516, 0.070608496666, -0.005255810916, -0.015546083450, -0.026919275522, -0.042928349227, 0.000898376107, 0.061239823699, 0.051715046167, 0.003662049770, -0.033195648342, -0.056440982968, -0.035909317434, -0.003732047975, -0.068153962493, 0.024566151202, 0.022818669677, -0.027926847339, 0.029966540635, -0.019609369338, -0.063765101135, -0.019524145871, 0.018280863762, 0.050594650209, 0.032515063882, -0.019873712212, -0.037957873195, -0.035516306758, -0.033749055117, -0.049333214760, 0.020392842591, 0.005318753421, -0.033792708069, -0.031873162836, 0.033458076417, 0.028683066368, 0.062118798494, -0.069006301463, 0.041507117450, 0.027259826660, -0.025518178940, 0.019471392035, 0.056947037578, 0.054726123810, -0.055591572076, -0.008781015873, -0.021430924535, -0.010925002396, -0.054766148329, 0.009683631361, 0.060091257095, -0.071746073663, -0.050517529249, -0.008794888854, 0.036164231598, -0.044241145253, -0.050690885633, 0.003932312131, -0.045052923262, 0.033246248960, -0.035209465772, -0.007581166923, 0.063920646906, 0.068486541510, 0.069502070546, -0.039804928005, 0.016187757254, -0.012056957930, -0.047868713737, 0.041760809720, -0.056044653058, 0.028530672193, -0.067620843649, -0.024500936270, -0.044806666672, -0.021633047611, -0.039818294346, 0.025704488158, -0.064841136336, -0.022977259010, 0.056793913245, -0.041140880436, 0.067159190774, -0.034080021083, 0.010329417884, 0.051707230508, 0.004697337747, 0.026335500181, 0.009309820831, 0.013811454177, -0.063890226185, 0.030677922070, -0.056191556156, 0.071992039680, -0.028744254261, -0.065794490278, -0.069693282247, 0.057215496898, -0.010683938861, -0.061459653080, -0.041221562773, -0.069648653269, 0.011169262230, 0.055971249938, 0.046889550984, 0.040104232728, 0.064419150352, -0.036236617714, 0.026580274105, -0.064871795475, 0.028782881796, -0.028173759580, 0.019372589886, -0.026871010661, 0.016184195876, -0.054240167141, 0.037323459983, 0.034546867013, 0.063715770841, -0.001030489802, 0.061446174979, 0.037997826934, -0.036957994103, -0.008720606565, -0.022864781320, -0.026053760201, -0.050954557955, -0.044897790998, 0.031244911253, -0.003180131316, -0.061267938465, 0.028796389699, 0.067649886012, -0.057483807206, -0.056905847043, -0.003012046218, 0.037928864360, -0.061754036695, -0.009233444929, 0.064994111657, -0.050930175930, 0.006711021066, -0.033273659647, 0.034842312336, -0.012874551117, 0.004123218358, 0.065826267004, 0.046661809087, -0.017920047045, -0.005256652832, -0.001537851989, -0.039000578225, -0.036520536989, 0.037441909313, -0.019537016749, -0.055956177413, -0.015373744071, 0.058838874102, -0.033284690231, 0.042991459370, -0.045909717679, -0.066502496600, 0.006263703108, 0.001255311072, -0.042340353131, -0.055646941066, 0.050948239863, 0.044974684715, 0.044941268861, 0.049005329609, -0.024959608912, 0.067866951227, 0.058558031917, -0.049597144127, -0.025261338800, -0.001288950443, -0.019996099174, -0.002653293312, 0.060899928212, 0.054009690881, -0.066802993417, 0.033650465310, 0.035354889929, -0.061454027891, 0.027810238302, -0.028892934322, 0.058816879988, 0.067227795720, 0.063372775912, -0.010366566479, 0.049366869032, -0.031891729683, -0.036592528224, 0.020159609616, 0.014113552868, -0.069226682186, 0.060337573290, -0.048888172954, 0.038491874933, -0.049848858267, 0.008120290935, 0.037134513259, 0.007933259010, -0.012988835573, -0.007528014481, -0.020896561444, -0.047581605613, 0.044831290841, -0.026467315853, 0.044141791761, 0.018553897738, -0.010278813541, -0.058415360749, -0.057733647525, -0.019408829510, 0.006253622472, 0.025417760015, 0.062591820955, -0.030882935971, -0.008278146386, 0.069081053138, -0.034763921052, -0.034376226366, 0.063690885901, -0.016774844378, -0.058235693723, 0.046598829329, -0.013581044972, 0.047819912434, 0.064237073064, -0.068649612367, -0.035768311471, 0.043633826077, 0.005845710635, -0.046648524702, -0.011038821191, -0.000996612012, 0.051656574011, 0.035042271018, -0.060893442482, -0.021453652531, -0.070883326232, -0.007128946483, -0.006694316864, -0.038818914443, 0.066006213427, 0.062419533730, 0.007640093565, 0.016583286226, 0.004218176007, -0.010507710278, -0.051947809756, 0.019194126129, -0.053134672344, -0.068865880370, 0.044855132699, -0.053499482572, 0.006909184158, -0.040600307286, -0.008161790669, 0.040700279176, 0.006124213338, 0.040073312819, 0.047459736466, -0.004310056567, 0.031622946262, 0.068464621902, -0.071602076292, 0.023362599313, -0.027696885169, 0.010386012495, 0.018241114914, -0.022049337626, -0.012346524745, 0.040247254074, 0.035290285945, -0.055824287236, 0.050126709044, -0.001940451562, 0.017371058464, -0.039912242442, 0.004118241370, -0.007637843490, 0.037229456007, 0.044949218631, -0.036050580442, 0.035236544907, 0.034572966397, 0.043401680887, -0.012853045017, -0.068640924990, 0.070764690638, 0.052387505770, -0.029271543026, 0.012078173459, -0.011779777706, -0.012722242624, -0.042324990034, 0.006839022040, -0.011052895337, 0.022286474705, 0.043155267835, 0.070734456182, -0.015925895423, 0.027528569102, -0.070522271097, -0.052318438888, -0.065170295537, -0.021918810904, 0.071322232485, -0.036528747529, 0.021134510636, -0.049517497420, -0.062421213835, 0.070715665817, -0.068206928670, -0.066375225782, -0.034330699593, -0.067791014910, 0.006486959755, -0.001010581851, 0.015557162464, 0.066219881177, 0.021322555840, 0.070776790380, 0.019395701587, 0.001125022769, -0.066619209945, 0.068803161383, -0.019866794348, 0.004219815135, 0.027409091592, 0.070611611009, -0.056456521153, -0.041393898427, -0.058382414281, 0.053788349032, -0.050082415342, -0.024403065443, -0.050097525120, 0.042832389474, 0.067433848977, 0.024182789028, 0.022484950721, -0.003101862967, 0.046621970832, -0.008279122412, 0.058074161410, 0.027996912599, -0.022915095091, -0.018060039729, 0.016602844000, -0.056968152523, -0.014489404857, -0.030745096505, 0.001571804285, 0.054086208344, 0.036086648703, -0.069612070918, -0.029387116432, 0.041667237878, 0.046822272241, -0.015282463282, 0.038914993405, -0.067993946373, 0.003273271024, -0.034540463239, -0.066239908338, -0.045545026660, 0.047484375536, -0.038856457919, -0.072149991989, 0.065899565816, 0.067942023277, -0.009146913886, 0.056226894259, -0.002046041191, -0.055568292737, -0.024068076164, -0.021169506013, 0.016702234745, 0.008750252426, 0.028468020260, 0.012877993286, -0.051497437060, 0.056841909885, 0.012131996453, -0.060308940709, -0.006829731166, -0.016121465713, 0.019165046513, 0.004707649350, -0.015313573182, -0.013558283448, 0.055157572031, -0.066099077463, -0.061037030071, -0.021427877247, 0.067003339529, 0.016552604735, 0.001391291618, 0.044789731503, -0.041164487600, -0.071586281061, -0.018354542553, 0.065209031105, 0.059445485473, -0.029533956200, 0.006458878517, -0.036277912557, -0.029838096350, 0.070127338171, 0.063994243741, 0.048461973667, -0.000608384609, 0.035035125911, 0.031151682138, 0.034128576517, 0.057237118483, -0.029860429466, -0.029846340418, -0.065096788108, 0.047488898039, 0.070358082652, 0.021955147386, 0.025047823787, 0.044505521655, 0.057954847813, -0.015706583858, 0.016185402870, 0.028933830559, 0.004900977015, -0.019168008119, 0.054336696863, -0.045694909990, 0.020659305155, 0.002908550203, -0.062790945172, 0.046722799540, -0.007113061845, -0.065295949578, 0.012928634882, 0.006446748972, 0.017672829330, -0.037688989192, -0.025788471103, -0.034539259970, 0.024337634444, 0.067933306098, 0.054304420948, -0.053555436432, 0.041859760880, -0.059725061059, 0.014730826020, -0.041100069880, -0.050040021539, -0.045340888202, -0.070495583117, -0.065323688090, -0.033715538681, 0.053512334824, -0.044892095029, 0.020271331072, -0.019306812435, 0.031680643559, -0.035137902945, 0.054482445121, -0.015504170209, 0.023195005953, 0.047883443534, -0.018142353743, -0.051740460098, -0.035731934011, 0.039462901652, -0.057704463601, 0.003842391074, 0.044834680855, -0.058683317155, 0.065908595920, 0.030670076609, -0.018009178340, -0.007760629058, 0.041649930179, -0.003971613944, -0.024786219001, 0.053584069014, 0.054433554411, 0.061280637980, 0.011342458427, 0.014879852533, -0.055482741445, -0.004829280078, 0.059653282166, 0.002014949918, -0.029657635838, -0.048374302685, 0.001290909946, -0.020457644016, 0.026612259448, 0.014033727348, -0.039892181754, 0.031902745366, 0.012759633362, 0.046018168330, -0.037427332252, -0.038357060403, -0.070343084633, -0.031389527023, -0.028278216720, -0.026249758899, -0.051338739693, -0.065532468259, -0.071752749383, 0.027585424483, 0.040025956929, 0.061927929521, -0.045436576009, -0.048850387335, -0.036555983126, -0.030515633523, 0.062743499875, -0.049655165523, 0.018533423543, -0.062875717878, -0.053877010942, 0.037455037236, -0.056746721268, -0.035993058234, 0.010961480439, -0.037340749055, 0.066162586212, 0.024895876646, 0.024385742843, 0.029291436076, -0.064252406359, 0.051103755832, 0.048033013940, 0.035541512072, -0.071283839643, -0.056465379894, -0.010800305754, 0.052790686488, -0.026366900653, -0.055111892521, -0.010141868144, 0.000973194838, -0.027539946139, 0.003107331693, -0.057846173644, -0.071164116263, -0.062957093120, -0.032392591238, 0.049678444862, 0.043358609080, 0.008237794042, 0.024732224643, -0.014502257109, 0.047290958464, -0.044773094356, -0.042534582317, 0.057966247201, 0.007012717426, -0.012160211802, 0.040009871125, -0.019912254065, 0.007544174790, 0.031044296920, -0.032387427986, -0.050125364214, 0.000415429473, 0.053697943687, 0.057455763221, 0.066755563021, 0.047413520515, 0.040335141122, 0.011798791587, 0.046792574227, 0.037105180323, -0.054966792464, 0.013592697680, 0.071652486920, 0.016682773829, 0.061400339007, 0.024799585342, -0.022723879665, -0.016938354820, -0.009685195982, -0.019728470594, 0.007740803063, 0.061838239431, -0.058993808925, 0.064021512866, -0.034559905529, 0.070538759232, 0.036162391305, 0.009008191526, -0.042802602053, 0.065176278353, 0.032082580030, 0.035870581865, -0.002247154713, 0.060581862926, -0.012905471027, -0.043261602521, -0.069102413952, 0.010382726789, -0.030034113675, 0.044833593071, -0.057637583464, 0.043063335121, -0.036836069077, 0.061455190182, 0.017247550189, 0.002961732447, 0.005290046334, -0.008724771440, -0.061432726681, 0.032726615667, 0.052198849618, -0.011272724718, -0.045455947518, 0.057778403163, -0.034790437669, -0.006166867912, 0.071537256241, 0.021630071104, -0.021798226982, 0.037562213838, -0.043481513858, -0.059672873467, -0.071440592408, -0.002363726497, 0.044350765646, -0.069347813725, 0.071967929602, -0.045588284731, -0.023190293461, -0.034387823194, -0.044898994267, 0.034136474133, -0.029422804713, 0.051497191191, -0.024057991803, -0.064311906695, 0.058406606317, -0.031328015029, 0.011394456029, -0.050654321909, 0.051021695137, -0.000087082386, -0.039761170745, 0.068880766630, -0.061270900071, -0.043942544609, 0.064505025744, -0.046537645161, -0.003551393747, 0.053883358836, 0.071422830224, -0.045630455017, -0.040795221925, 0.062668159604, -0.067703418434, -0.067344285548, 0.060362264514, -0.026650562882, 0.015911698341, -0.013022698462, -0.005486063659, 0.014859758317, -0.032953001559, -0.062349155545, 0.006496988237, 0.070282176137, -0.030208930373, 0.026346407831, 0.012097857893, -0.026438511908, -0.023044142872, -0.015597876161, -0.052636757493, -0.000467620790, 0.010220691562, 0.000123851001, 0.020099699497, -0.065092019737, 0.061204984784, 0.030056878924, 0.021977879107, 0.001957021654, -0.070330075920, 0.027189038694, 0.051792435348, 0.022951692343, -0.013141818345, -0.041372772306, 0.043519735336, 0.000736400485, -0.014755863696, -0.039967373013, 0.045561954379, 0.058758869767, -0.030772902071, 0.045651227236, 0.055731996894, -0.020480237901, -0.044894158840, -0.018142800778, 0.027370892465, 0.040590636432, 0.021753855050, 0.046305097640, -0.054980576038, -0.038992870599, 0.061216205359, 0.051636412740, 0.025111608207, 0.025970913470, -0.015413988382, -0.012982282788, -0.031456544995, -0.026380956173, -0.000693485141, -0.061540592462, -0.023601144552, -0.048804238439, 0.071860164404, -0.070017777383, 0.051858820021, -0.011099282652, -0.041691727936, -0.000030383468, 0.045312330127, 0.070613518357, 0.012850843370, -0.067972131073, 0.022966988385, -0.028950404376, 0.050748370588, -0.050506141037, -0.061859391630, 0.069356158376, 0.071832880378, -0.004789017141, -0.022213209420, -0.029606189579, -0.018269129097, 0.047707505524, 0.036021344364, -0.054089128971, 0.053101763129, 0.066545084119, 0.025488205254, 0.053263694048, 0.035042203963, -0.002837158740, 0.070913076401, 0.065931707621, -0.005881637335, -0.048916082829, -0.071539476514, -0.023116458207, 0.010836765170, 0.056442633271, 0.053147956729, -0.021537292749, 0.049111820757, 0.024418160319, 0.020155124366, 0.010134674609, -0.069028429687, -0.029526490718, 0.057366520166, -0.065690904856, -0.058804586530, -0.046223677695, 0.072078883648, 0.052937835455, 0.018366813660, 0.054296314716, -0.002449244261, 0.025047965348, -0.019220694900, 0.046938724816, -0.019326515496, 0.028510794044, 0.021169401705, 0.006788671017, -0.052046388388, -0.018305521458, -0.011419426650, -0.053633607924, -0.018849328160, -0.037953175604, -0.048636082560, -0.044912692159, -0.017871644348, -0.041436471045, -0.069356106222, -0.026559885591, -0.060134347528, -0.041179426014, -0.070834547281, 0.000812023878, 0.037636026740, 0.022524528205, 0.068971395493, -0.032770011574, -0.001858823001, -0.007733613253, 0.029212318361, 0.031793363392, 0.036993265152, -0.022775996476, -0.048212841153, 0.055920451880, -0.062966160476, 0.052706353366, 0.069335386157, -0.054935596883, -0.019053570926, -0.064278192818, -0.028445273638, -0.022562690079, -0.049147166312, 0.020811408758, -0.045323632658, -0.008819252253, 0.054097205400, 0.024056479335, -0.033314663917, -0.064853630960, -0.039551734924, 0.020490236580, 0.054019972682, -0.035752065480, 0.033058337867, 0.035655163229, 0.048838466406, -0.021910104901, 0.029837474227, 0.063261419535, 0.002470351756, -0.049482479692, 0.058362156153, 0.010745741427, -0.048293039203, 0.066959649324, 0.047003664076, -0.058765716851, -0.067432418466, -0.044011130929, -0.036592513323, 0.031713180244, 0.032548844814, 0.064308255911, 0.036497242749, 0.019454032183, -0.036821600050, 0.013667367399, -0.064571358263, 0.066661208868, 0.016759268939, -0.043182779104, -0.026364818215, 0.064377292991, -0.001883961260, 0.005504697561, 0.061564803123, 0.063492983580, 0.026786200702, 0.019519604743, 0.033866330981, 0.001624330878, -0.030363149941, -0.013937097043, 0.027394793928, -0.041872341186, -0.022571671754, -0.053701743484, 0.012071631849, 0.047103509307, 0.034243308008, -0.015909962356, -0.071690462530, -0.057425532490, 0.052843049169, -0.035579416901, 0.049772202969, 0.001034326851, -0.023994430900, -0.053989656270, 0.070250257850, -0.001048743725, 0.015682734549, 0.039200723171, 0.035708345473, -0.027810584754, 0.009118482471, 0.070164158940, -0.050476633012, -0.054802659899, -0.027415368706, 0.066044926643, 0.004430674016, -0.005806788802, 0.009642675519, 0.004525229335, -0.033595249057, -0.021778974682, -0.044565051794, 0.006765909493, 0.048916839063, 0.032922871411, -0.039345446974, 0.014739520848, 0.049116589129, 0.057759210467, -0.058383651078, 0.047292508185, -0.049032345414, -0.040928639472, 0.039519697428, -0.065281860530, 0.034864857793, -0.005832277238, -0.044702172279, -0.047508738935, -0.034815542400, -0.000614270568, 0.027375966311, -0.051893129945, -0.069572612643, 0.043332323432, 0.012878507376, -0.028500612825, 0.053365513682, 0.033079467714, -0.032262079418, 0.057817354798, -0.018015593290, 0.040668547153, -0.007058277726, 0.060644179583, -0.011794112623, 0.066675767303, -0.003795757890, 0.051691055298, -0.063908174634, 0.007360696793, -0.011611036956, -0.016993895173, 0.005426928401, -0.009475208819, 0.037902675569, -0.048580057919, 0.063085466623, 0.066683456302, 0.040465012193, 0.024598993361, -0.006215579808, 0.014219008386, 0.046064555645, 0.060549899936, 0.030813455582, -0.064523920417, -0.012413833290, 0.001546062529, -0.045046590269, -0.043248645961, 0.018961839378, 0.054799050093, -0.051317200065, -0.043363720179, 0.035480462015, -0.046207368374, -0.021771334112, -0.017637055367, -0.062426701188, -0.061392650008, 0.056911900640, 0.049908787012, -0.014593880624, 0.062679320574, -0.025157757103, 0.049421504140, -0.044737204909, 0.062006264925, -0.006778724492, 0.019089564681, 0.006549611688, -0.006238549948, 0.024870291352, -0.049452111125, -0.062996909022, 0.011584386230, 0.022389866412, -0.024212334305, 0.063104391098, 0.065374806523, 0.017222039402, -0.016850896180, 0.028806641698, 0.019392207265, 0.036862134933, 0.005645208061, 0.048920318484, -0.012412648648, 0.049768038094, -0.041136011481, -0.053990520537, -0.016731068492, 0.054377511144, 0.005050398409, 0.039512455463, -0.006082504988, 0.026822246611, -0.044448204339, 0.069383710623, -0.006270058453, -0.002059824765, -0.069752469659, 0.050758093596, 0.029630675912, -0.058927528560, -0.055602036417, -0.038779255003, 0.051985301077, 0.048741005361, 0.055424794555, 0.020893618464, 0.060457661748, 0.030389904976, -0.056075707078, -0.028043419123, 0.066736683249, -0.010108266026, -0.035000063479, 0.036190740764, -0.020773794502, 0.005472108722, 0.008244112134, 0.012103021145, -0.019156619906, -0.029887340963, 0.061858862638, 0.053401976824, -0.025909502059, 0.044188804924, -0.068772539496, 0.005091644824, 0.040900766850, 0.017346590757, 0.017885960639, -0.069900393486, 0.041045986116, -0.053104646504, -0.008218348026, -0.039224728942, -0.038268622011, -0.026138108224, -0.034353774041, 0.061835944653, 0.059374451637, -0.054243832827, 0.061788305640, -0.052397999913, 0.001576550305, -0.062971092761, 0.034624189138, -0.067229591310, 0.016579121351, 0.037291660905, 0.012380316854, 0.069797635078, -0.027473770082, -0.013495773077, -0.051609396935, 0.024768792093, -0.064227692783, 0.033119373024, 0.030704490840, 0.033745683730, 0.016291685402, 0.068331345916, 0.011398226023, 0.041646987200, 0.015096858144, -0.057614129037, -0.023329507560, 0.030926778913, 0.054703101516, -0.041349492967, 0.063915893435, -0.040690898895, 0.033887960017, 0.035598188639, -0.059991709888, 0.010116800666, -0.062534257770, 0.049037627876, 0.039389081299, 0.016719751060, 0.071633905172, -0.051404587924, 0.049892924726, 0.056808486581, -0.037531431764, 0.070071861148, 0.071686923504, -0.067858427763, 0.025494538248, 0.038370206952, -0.021678417921, -0.033585369587, -0.046494506299, -0.038178063929, -0.012311078608, 0.017518125474, 0.060672938824, 0.036350794137, 0.005538269877, -0.059732958674, -0.006313137710, -0.051677413285, 0.058684319258, 0.059659317136, -0.050714664161, 0.061970740557, -0.007636569440, 0.061132192612, 0.067463278770, 0.040926389396, -0.050858959556, 0.010907068849, 0.016441777349, 0.035513140261, 0.011477150023, -0.064463384449, -0.067330539227, 0.071700796485, 0.004260867834, 0.014908641577, -0.016265343875, 0.025027953088, 0.069349154830, -0.047144927084, -0.021302804351, 0.015362784266, 0.040148846805, -0.036763664335, 0.029585920274, -0.042403485626, 0.051886521280, 0.007253229618, 0.064744144678, -0.048578303307, -0.050530504435, -0.064393579960, 0.008711948991, 0.068502321839, -0.062735661864, -0.058551535010, 0.017835445702, 0.029186509550, 0.046572089195, 0.024065084755, 0.025334656239, -0.049622900784, -0.035956237465, 0.035899817944, 0.015756949782, -0.055525600910, -0.004442855716, 0.068301334977, -0.045550271869, -0.070326939225, -0.026401691139, 0.071116834879, -0.040253013372, 0.044917128980, 0.010597325861, 0.044319622219, 0.027002573013, 0.066301718354, 0.064616546035, 0.064679101110, 0.058473303914, 0.033799402416, -0.011126540601, 0.054070740938, 0.026698090136, 0.046866737306, -0.039829187095, -0.046340376139, 0.027213692665, -0.070921786129, 0.047341026366, 0.006567172706, -0.005648300052, -0.012791357934, -0.057629875839, 0.036306388676, -0.030082926154, 0.024621292949, -0.066796384752, 0.059434473515, 0.035928830504, 0.059081196785, 0.052397675812, 0.012381814420, -0.007368579507, -0.026758294553, -0.032580640167, 0.022624649107, -0.016627933830, 0.053573280573, 0.059405848384, -0.029871579260, 0.066960036755, -0.043471276760, -0.057687222958, 0.021721072495, 0.030307605863, 0.048423565924, -0.002247564495, 0.017929509282, 0.055131763220, -0.054024688900, -0.029191896319, 0.061922371387, -0.021500643343, 0.071874052286, -0.052492961287, 0.043700724840, -0.034581206739, -0.065790653229, 0.003492258489, 0.062014788389, -0.071277372539, -0.066159076989, -0.036919966340, -0.034360516816, -0.029728941619, -0.062482107431, 0.013372227550, 0.005021356046, -0.052959717810, -0.014410857111, 0.021635182202, -0.052385766059, 0.034716241062, -0.038419175893, 0.066215455532, 0.004589267075, -0.013557989150, -0.069880954921, 0.008582286537, -0.005594395101, -0.051133207977, -0.071319490671, 0.029348917305, 0.011516831815, 0.029344908893, 0.052149519324, 0.040289632976, -0.043637804687, -0.021003723145, -0.009450554848, -0.060701366514, -0.062549471855, -0.006848514080, 0.064822718501, 0.010484449565, 0.026873834431, -0.002942584455, 0.031414732337, -0.068595774472, -0.017773620784, 0.020234078169, -0.035721506923, 0.026345737278, 0.041952885687, 0.054545417428, 0.019242033362, -0.070370577276, 0.020032495260, -0.025917708874, 0.010763831437, -0.035031843930, -0.019618369639, -0.056648731232, 0.068653732538, -0.002280361950, -0.029298782349, 0.065389215946, -0.015314467251, -0.043711379170, 0.038221746683, -0.063122235239, -0.051008619368, -0.025277201086, 0.041691310704, -0.025120347738, -0.001079559326, -0.023688107729, 0.048043392599, -0.022894788533, -0.031269308180, 0.058104425669, -0.043231010437, 0.009991884232, -0.051811054349, 0.059726446867, -0.027213849127, -0.024275895208, 0.039815194905, 0.032126873732, -0.032622847706, 0.056999742985, 0.054267555475, 0.056137174368, -0.039546333253, -0.017161212862, 0.007930420339, -0.001348994672, -0.022507939488, 0.051301158965, -0.008200578392, 0.033532962203, 0.014419443905, -0.062390964478, -0.064693301916, -0.009569242597, 0.066914007068, -0.008329249918, -0.063641279936, -0.064488746226, 0.053300023079, 0.014685750008, -0.041292294860, -0.059952788055, 0.041148781776, -0.033593490720, 0.047054298222, 0.041618600488, 0.010931983590, 0.039241403341, 0.049010887742, 0.048308938742, 0.037963703275, 0.030817344785, 0.031327292323, -0.001190163195, -0.034811981022, -0.014504477382, -0.016715239733, -0.030876141042, -0.004602946341, 0.059629723430, -0.011085193604, -0.025989718735, -0.042966149747, 0.035400353372, -0.066048197448, 0.029732212424, -0.048800300807, 0.004652172327, -0.053271051496, -0.028382282704, -0.051541518420, -0.038280632347, 0.045949235559, 0.031133480370, -0.055031590164, -0.059591695666, -0.025777719915, -0.002635933459, 0.070100203156, -0.055409342051, 0.029852598906, 0.060230389237, -0.071933969855, -0.014945168048, 0.066902846098, 0.027905203402, -0.016659010202, 0.048986442387, 0.035691983998, 0.037435472012, -0.043647125363, 0.013424523175, -0.030462276191, 0.024018056691, 0.028843894601, 0.018754161894, 0.051996439695, 0.016332328320, 0.012658424675, -0.049985889345, -0.032721456140, -0.061245553195, -0.054809920490, 0.070347741246, -0.008947916329, 0.024644762278, 0.033056035638, 0.030621245503, -0.057730481029, -0.070790208876, 0.061436399817, -0.013675045222, 0.060420796275, 0.026265762746, -0.061554528773, -0.052880328149, -0.025393191725, 0.056450903416, -0.047746755183, -0.048040434718, -0.052562765777, 0.055361226201, -0.027725290507, -0.012087978423, 0.057203739882, -0.032146573067, 0.069164544344, -0.068519398570, -0.038615003228, 0.016833946109, 0.025226049125, 0.026786148548, 0.025683224201, -0.033977795392, -0.044933184981, 0.043556161225, 0.026412084699, 0.026938684285, -0.057877540588, 0.068829223514, -0.044134069234, 0.052561409771, -0.044662289321, 0.051911555231, 0.068045347929, 0.033778980374, -0.002267763019, 0.044199056923, 0.058790683746, -0.030076198280, -0.030814096332, 0.009963028133, -0.001072593033, 0.016180910170, 0.012024216354, 0.010684765875, -0.043390151113, -0.037552025169, 0.008236467838, -0.019408434629, -0.066458448768, -0.030937585980, 0.020916864276, -0.069713465869, -0.071723535657, 0.053065434098, -0.050680767745, -0.029688246548, 0.062972307205, 0.034687027335, 0.070113942027, 0.061165720224, -0.068572871387, 0.032304063439, -0.013407830149, 0.010105580091, -0.000686809421, -0.052695050836, -0.035206176341, -0.005625486374, -0.047240681946, 0.005562014878, -0.034790970385, 0.029123462737, 0.048772133887, 0.041309610009, 0.008506506681, -0.050962917507, -0.030527520925, 0.001100413501, 0.041269637644, -0.003801509738, -0.069331847131, -0.010720469058, 0.027691565454, -0.032014239579, 0.045470088720, 0.034510418773, -0.056309439242, -0.000419989228, -0.021592233330, -0.044246114790, -0.018397610635, -0.003340512514, -0.050240870565, 0.026369735599, -0.031314197928, -0.027571689337, -0.022244352847, -0.010522492230, -0.006969511509, 0.026714071631, 0.029898494482, -0.058366790414, -0.027036212385, 0.026192888618, 0.065661489964, -0.059091057628, 0.030392862856, -0.064316324890, -0.000917375088, -0.049449391663, -0.003567107022, -0.041082430631, 0.013092800975, 0.063883632421, 0.041648380458, -0.046182092279, 0.004575915635, 0.004569843411, -0.066164635122, 0.022032953799, -0.028029739857, 0.011835753918, -0.031522259116, -0.000545889139, -0.006698697805, -0.000292815268, 0.036147542298, -0.050228945911, 0.045210428536, 0.042036145926, 0.011114373803, 0.068235665560, 0.012569479644, -0.003084808588, -0.037884727120, 0.056608587503, 0.009494081140, -0.012995563447, -0.012473180890, -0.002702705562, 0.015783205628, -0.063320934772, -0.039926592261, 0.029263250530, -0.013762228191, 0.002967208624, 0.042268812656, 0.059162393212, 0.062774389982, -0.024148169905, -0.045278567821, -0.040787357837, -0.071878425777, -0.038683500141, -0.029888391495, 0.021192841232, 0.070127531886, -0.067140787840, -0.023969843984, 0.050386212766, 0.063474461436, 0.065446436405, -0.052918627858, -0.029308054596, 0.040907353163, 0.057565629482, -0.020138002932, -0.010653983802, 0.021919652820, 0.033782541752, 0.028947062790, 0.033485054970, 0.068644836545, 0.022850774229, -0.006275147200, 0.064788311720, 0.000644825399, 0.018293254077, 0.040422461927, 0.060480579734, 0.036464445293, 0.020521134138, 0.037639021873, 0.062612369657, -0.018042884767, 0.053191781044, -0.046993561089, 0.044175848365, -0.046637199819, -0.060232028365, -0.014738570899, 0.057090505958, -0.019881799817, 0.004537165165, -0.011189308017, -0.018463235348, -0.008611343801, 0.062018617988, -0.066874571145, 0.013654053211, 0.072117283940, 0.024606257677, -0.056056559086, -0.068180225790, -0.043756164610, 0.054862141609, -0.065612703562, -0.013702593744, -0.034722421318, -0.046125672758, 0.038568735123, 0.038269668818, 0.011820212007, -0.014936409891, -0.007070995867, -0.051601223648, 0.056936144829, 0.067302495241, 0.030205212533, -0.029981080443, -0.019781485200, -0.029993727803, 0.057072177529, 0.043026909232, 0.049674764276, -0.003691263497, 0.064056351781, 0.063314363360, 0.051440842450, -0.027644369751, 0.036339491606, -0.015412285924, 0.029518984258, 0.035825707018, -0.002836368978, -0.035590533167, 0.027942508459, 0.014955200255, 0.015530891716, 0.018705762923, -0.018353529274, 0.021138861775, -0.021159511060, 0.043035082519, -0.011347055435, 0.021628610790, -0.008524902165, -0.031030826271, 0.055865973234, 0.043469853699, -0.061891395599, -0.002961717546, 0.023549854755, 0.032382145524, -0.007825560868, 0.038464069366, 0.014458447695, 0.031488634646, 0.053068414330, -0.010317597538, -0.041119046509, 0.024180211127, -0.006277248263, -0.047604560852, -0.036749657243, -0.032920293510, -0.041031964123, -0.003403373063, -0.038526836783, -0.041980449110, -0.009509071708, 0.034977778792, 0.042093373835, -0.032886002213, -0.002084225416, 0.031593732536, -0.036890648305, 0.059451356530, 0.037577338517, 0.046565517783, -0.001172080636, -0.037325970829, 0.027140498161, -0.028841126710, -0.042279236019, 0.052574224770, 0.029128715396, -0.016263246536, 0.070471912622, 0.056761592627, 0.053325712681, 0.036881871521, 0.040351554751, -0.059303350747, 0.035381235182, 0.063229799271, 0.071506515145, -0.065306551754, -0.049403384328, -0.061909358948, 0.009036339819, -0.050005830824, 0.034588485956, 0.069721654058, -0.028832316399, -0.059356532991, 0.001799978316, -0.006993204355, -0.000248044729, 0.070634350181, -0.009164854884, -0.031399987638, -0.059935010970, -0.008457660675, -0.047830291092, -0.063314639032, -0.025664947927, -0.026134371758, 0.013904683292, 0.035059042275, 0.027282074094, 0.052376389503, -0.061268113554, 0.027480408549, 0.020973511040, -0.065007127821, 0.039856180549, 0.050662785769, 0.069727152586, 0.057722106576, 0.015079550445, 0.036568202078, -0.039373509586, -0.005132369697, 0.042066983879, -0.065381020308, 0.035993263125, -0.022818427533, -0.070951171219, 0.009797945619, -0.009132236242, -0.033848457038, 0.071573063731, 0.037234947085, -0.064616866410, -0.046105556190, 0.021813005209, -0.035265661776, -0.017388541251, 0.039000511169, -0.064142301679, 0.052100002766, 0.038080692291, -0.023512963206, 0.023012168705, 0.021477498114, 0.004870645702, 0.037921480834, -0.046440135688, 0.065859958529, 0.063774034381, 0.033154249191, -0.002455949783, 0.030432924628, 0.006180271506, -0.056990191340, 0.029867827892, -0.065105773509, -0.029047980905, -0.052657164633, 0.045899353921, 0.027350842953, -0.036363735795, 0.034158758819, 0.064347013831, -0.054254308343, 0.061943411827, -0.063405558467, -0.070401653647, 0.071896687150, -0.039801862091, -0.011134143919, 0.046447366476, -0.009663842618, 0.026653714478, 0.052993491292, -0.052957102656, -0.019383829087, -0.057713326067, -0.027364026755, 0.059779360890, 0.060342669487, 0.001559086144, 0.052875697613, -0.039940290153, -0.046678304672, 0.006025604904, -0.019099701196, 0.026914767921, 0.015381850302, -0.051037199795, 0.049460031092, 0.057180896401, 0.009776718915, -0.071957401931, 0.066238328815, 0.045845240355, -0.012662932277, 0.038219287992, -0.060354623944, -0.062733873725, 0.035325229168, -0.057992741466, 0.069173082709, 0.014932535589, 0.017202489078, 0.049002096057, -0.059886664152, -0.032920930535, -0.006090149283, 0.062626242638, 0.049339391291, -0.020446512848, 0.061309367418, 0.028673514724, -0.002060323954, 0.058743506670, 0.025048941374, 0.059615030885, 0.057572692633, -0.054270122200, 0.071724146605, -0.004634283483, -0.036417040974, -0.003416359425, 0.004567757249, -0.058373875916, -0.071425966918, 0.024280026555, -0.067180037498, 0.056284114718, 0.007802024484, -0.014243748039, -0.069617435336, -0.048027046025, 0.032692722976, -0.025670763105, -0.064453117549, -0.057419180870, 0.064724773169, 0.021445788443, 0.022101201117, 0.014024332166, -0.047216884792, 0.001926049590, -0.025939080864, -0.009585328400, -0.008213117719, 0.045879207551, -0.009719572961, -0.048927456141, -0.006368353963, -0.042480468750, 0.019245795906, 0.063725352287, 0.003466159105, -0.031138453633, -0.056567776948, 0.009868718684, -0.001651331782, 0.056677579880, -0.017907522619, 0.052054248750, 0.009342461824, -0.025160990655, -0.003054045141, 0.027267947793, 0.008799239993, -0.012314159423, 0.070417791605, -0.011283308268, -0.016803715378, 0.006617091596, -0.023394532502, -0.071804039180, 0.032273970544, 0.064666420221, 0.034477248788, -0.069406934083, 0.061532333493, -0.034272972494, -0.036292001605, 0.025614619255, -0.021553415805, 0.046042069793, -0.035953588784, -0.049907565117, -0.065967448056, 0.043519556522, 0.019145451486, -0.028311219066, -0.071603052318, -0.050523728132, -0.042241159827, -0.064150266349, 0.052229396999, 0.067205205560, -0.054966084659, -0.010411337018, -0.050570942461, 0.011092178524, 0.028482630849, -0.016312077641, 0.067304551601, 0.019293956459, -0.045732025057, -0.003157407045, 0.032537519932, 0.023359879851, 0.031827427447, -0.055479850620, 0.044898062944, 0.070546716452, -0.030942332000, 0.071371927857, 0.069562897086, -0.040688112378, 0.041918799281, -0.035668838769, -0.050714544952, 0.043115481734, 0.025366231799, -0.065883584321, -0.015780504793, -0.039129815996, -0.068944841623, 0.041321843863, 0.047566451132, 0.061837121844, -0.050290599465, 0.030681505799, 0.066586643457, 0.027559235692, 0.025117456913, 0.006492055953, -0.002399154007, -0.047173298895, 0.062200635672, 0.043961919844, 0.003405094147, 0.060365855694, -0.069769337773, -0.067122854292, -0.062036480755, -0.000418014824, 0.059618189931, -0.032801777124, -0.055407032371, 0.002531938255, -0.000825479627, 0.005768045783, -0.017112087458, -0.033233586699, 0.013932861388, -0.010251630098, 0.050558000803, -0.054206043482, 0.004641883075, -0.026329509914, 0.029440455139, -0.015809167176, 0.026456408203, -0.024228680879, 0.053890630603, 0.065823018551, -0.035158429295, 0.043802812696, -0.014797724783, 0.042499274015, -0.010718628764, 0.069831818342, -0.031670954078, 0.023033767939, 0.045858718455, 0.057918280363, 0.006290517747, -0.001410335302, 0.011953078210, -0.064917705953, -0.000537611544, 0.057272061706, 0.023515231907, -0.003101639450, 0.016014821827, 0.039525255561, 0.010602951050, -0.023077540100, 0.061711952090, -0.016428735107, 0.061557322741, 0.023081377149, 0.000640802085, -0.016933381557, 0.063513889909, 0.068013802171, 0.059915259480, -0.016028739512, 0.024435572326, -0.003413416445, -0.002888657153, 0.070958957076, 0.022407263517, -0.025168284774, -0.045166328549, 0.012249819934, -0.026419036090, 0.025134235620, 0.016801580787, 0.066735863686, -0.016896922141, 0.026984728873, 0.007329866290, 0.026562914252, 0.022365950048, 0.065540865064, -0.033114846796, -0.027292225510, -0.071835130453, 0.012272618711, 0.008707769215, -0.072087466717, -0.030758105218, 0.061869531870, -0.016091112047, 0.061439320445, 0.010107219219, 0.066328242421, -0.058451339602, 0.064692869782, 0.036793552339, -0.048955418169, 0.054779738188, -0.014148648828, -0.019582357258, 0.039797730744, 0.031176872551, 0.040786467493, 0.020075663924, -0.041122745723, 0.032132789493, -0.052213996649, 0.065882533789, -0.067435204983, -0.046228773892, 0.051086597145, -0.001267023385, -0.001688390970, -0.009011477232, -0.027140360326, -0.038396015763, 0.022076353431, -0.008159577847, 0.052233301103, 0.055028766394, 0.019506096840, 0.009314469993, -0.035867832601, -0.022131189704, -0.055174574256, -0.029578693211, -0.040344003588, -0.040346447378, -0.054579697549, -0.057005282491, -0.013834357262, 0.039057530463, -0.053118534386, -0.056359767914, 0.013589635491, -0.056910905987, -0.025369651616, 0.054636985064, 0.049803331494, 0.069476678967, -0.055283218622, 0.021257497370, -0.029813699424, 0.023272745311, 0.069671332836, -0.047609224916, -0.045500546694, -0.036534938961, -0.010506901890, -0.068769797683, -0.002508550882, 0.002732284367, 0.064828589559, 0.032583840191, 0.031503796577, 0.026565201581, -0.068900272250, -0.003767043352, 0.031337685883, 0.000494614244, 0.056483656168, -0.036222454160, 0.056425392628, 0.045895829797, -0.018223654479, -0.020095605403, 0.048006244004, 0.030553281307, -0.014855213463, -0.020681325346, 0.029391042888, 0.004281409085, -0.008968152106, -0.047662392259, 0.060541033745, -0.064858704805, 0.069247499108, 0.053228929639, -0.040393434465, 0.013706944883, 0.007507726550, 0.033855840564, 0.020344309509, -0.047263685614, -0.031153440475, -0.016584075987, -0.060092672706, -0.030450318009, -0.067051365972, 0.042943917215, -0.061664994806, 0.000826768577, -0.031058337539, 0.034649431705, -0.070181190968, -0.002384938300, -0.051217779517, 0.030614607036, -0.042809229344, 0.020635955036, -0.054090179503, 0.071748092771, -0.032832559198, 0.055072247982, 0.008216455579, 0.030668012798, 0.071687966585, 0.057063221931, -0.034819170833, 0.020969584584, 0.037960417569, 0.031754456460, -0.049211241305, -0.069918185472, -0.039074737579, -0.009413354099, 0.061140596867, 0.054420888424, 0.036271184683, 0.007534086704, 0.027157828212, 0.003863982856, 0.022950626910, 0.028596691787, 0.021986432374, -0.068488530815, -0.023729383945, -0.049304705113, 0.038743585348, 0.056230455637, 0.022864542902, 0.051565334201, 0.052620321512, -0.048574846238, -0.043784830719, -0.011461924762, 0.003372177482, 0.038417421281, -0.006400220096, 0.031230732799, -0.067128516734, -0.061624608934, -0.057022713125, -0.054182868451, 0.060046479106, -0.029545228928, -0.004372932017, 0.054463893175, 0.012441553175, 0.025882922113, 0.008282579482, 0.001990571618, 0.030557855964, -0.065997801721, 0.047194048762, 0.006106577814, 0.004040867090, -0.060742303729, -0.023406419903, -0.067915759981, 0.010291241109, -0.071994878352, -0.016487270594, 0.036288507283, 0.062040701509, -0.014780707657, 0.041255064309, 0.030859157443, 0.004095256329, -0.062225148082, -0.049025222659, -0.033887550235, -0.057045940310, -0.008650660515, 0.024841554463, -0.062133524567, -0.059176556766, -0.013137415051, -0.068276166916, 0.067791000009, -0.059508398175, 0.053854867816, 0.025811165571, 0.037870272994, 0.013621479273, 0.014992505312, 0.058592543006, -0.002916567028, -0.001217074692, 0.037614673376, 0.011635214090, -0.006386488676, -0.024285580963, 0.057383149862, 0.023191392422, 0.051895208657, 0.004919752479, -0.037370532751, -0.022961430252, -0.002423226833, -0.010295711458, -0.068119175732, 0.002921007574, -0.036358505487, -0.071905300021, 0.001759335399, 0.039364874363, 0.034538380802, 0.064545035362, 0.008652709424, 0.071612074971, 0.058112964034, -0.039878517389, 0.010089941323, 0.056555360556, 0.019065372646, 0.066218897700, 0.055948257446, -0.023294616491, 0.052082054317, 0.050965860486, -0.062599435449, 0.032330788672, -0.031656071544, -0.019299052656, -0.003094241023, -0.022684168071, -0.051432497799, -0.018443223089, -0.056376770139, 0.011337302625, 0.036343157291, 0.042795687914, 0.005580507219, -0.001327268779, -0.010517813265, 0.042626053095, 0.002041399479, 0.065934151411, -0.011483587325, 0.027186661959, 0.023990787566, -0.014269404113, 0.029978036880, -0.014549456537, 0.036924682558, -0.059893287718, -0.051834389567, -0.051894009113, -0.046129129827, 0.059593677521, -0.062785334885, 0.012241326272, -0.005929522216, 0.036787442863, -0.019799053669, 0.065853402019, 0.066692978144, -0.043673954904, 0.055826976895, -0.070793651044, 0.005163222551, 0.023368790746, -0.014293976128, -0.039128370583, -0.065564833581, -0.011742733419, 0.036979675293, 0.026366621256, -0.017503619194, -0.024785187095, 0.040105655789, 0.027173653245, -0.038671679795, 0.029012069106, -0.069688998163, -0.043594181538, 0.051087319851, -0.001134090126, 0.040363013744, -0.051418870687, 0.045464344323, 0.041763320565, -0.021361410618, 0.025029860437, 0.055686190724, 0.068086266518, 0.030590087175, 0.023434430361, 0.030616424978, 0.006769262254, -0.046278879046, 0.047096319497, -0.031316470355, -0.014883466065, -0.027049340308, -0.045196339488, -0.070656217635, 0.039944760501, -0.048835590482, 0.043522998691, -0.068102069199, -0.059649955481, -0.007372021675, 0.048233181238, -0.024101026356, 0.024950951338, 0.060999944806, -0.009596012533, -0.010235074908, 0.066804945469, -0.008435286582, -0.054954987019, 0.054485082626, 0.016149841249, -0.041222233325, -0.017695643008, -0.064452476799, 0.061702877283, -0.070889644325, -0.053248114884, 0.026236921549, 0.025728143752, -0.055445093662, 0.038397327065, 0.061172172427, 0.028737023473, 0.038834176958, -0.060658145696, -0.070570617914, -0.008088491857, 0.047527663410, -0.037680901587, 0.020314745605, 0.071754768491, -0.061725921929, 0.029714591801, -0.000222340226, 0.070547357202, -0.045067377388, -0.030593320727, -0.011876668781, 0.071689233184, 0.036146193743, 0.029803790152, 0.025469675660, 0.044338859618, 0.000250592828, 0.027623519301, 0.007198423147, 0.039103917778, -0.067886009812, -0.017779935151, -0.032523188740, -0.038267657161, -0.062875807285, 0.007945820689, 0.035397805274, -0.049148797989, -0.014652881771, -0.010762743652, -0.031645264477, -0.003849737346, 0.000622041523, 0.002986200154, 0.022927485406, -0.013999041170, -0.048998624086, 0.059882536530, 0.015502415597, 0.051112681627, -0.018125269562, 0.025751791894, 0.022585347295, -0.002487093210, 0.052034653723, 0.022627592087, 0.025374054909, 0.033386066556, 0.031982079148, -0.012355986983, -0.064600646496, 0.066206052899, -0.026096723974, 0.055623307824, -0.049846656621, -0.018625181168, 0.053994908929, 0.041205041111, 0.030496016145, -0.041128456593, -0.040432993323, -0.021990165114, -0.046878211200, -0.028138313442, -0.031179487705, -0.003925807774, 0.045583307743, 0.003672786057, 0.063555300236, 0.056109100580, 0.058267563581, -0.072009950876, 0.012644089758, -0.054875113070, 0.023860633373, 0.046004295349, -0.043981738389, 0.030094109476, -0.071693614125, -0.060463577509, -0.007916361094, -0.027783378959, -0.025753337890, -0.008206598461, 0.013242565095, 0.015073217452, 0.034900657833, -0.032062243670, -0.047308370471, -0.050134655088, -0.001402765512, -0.062707595527, -0.030710510910, -0.035001661628, 0.018644385040, 0.008539974689, -0.030107703060, 0.051182262599, 0.038484714925, 0.051323756576, 0.020855814219, 0.045931890607, 0.059648916125, 0.004161432385, -0.005729153752, 0.039940856397, -0.011327404529, -0.028082288802, 0.018822953105, 0.026737578213, -0.021205399185, 0.058742493391, 0.055055975914, 0.029110282660, 0.012064702809, -0.016906745732, -0.051913760602, 0.044261515141, -0.013498250395, -0.006908409297, 0.056812524796, 0.042191483080, 0.014488771558, 0.016647689044, -0.007317990065, 0.000978730619, 0.005731992424, -0.054872103035, 0.015429027379, 0.006194397807, 0.045370779932, 0.029886312783, 0.000015847385, 0.050016686320, -0.071837648749, -0.050585582852, -0.061928577721, 0.058007612824, -0.065402634442, 0.035113796592, -0.060143262148, -0.034066308290, -0.012341342866, 0.001600831747, -0.004457980394, -0.034638520330, 0.017717115581, 0.026001691818, -0.060852438211, 0.032694302499, 0.047120735049, -0.070269525051, 0.056884422898, 0.031275175512, 0.057755067945, -0.005751974881, -0.001411318779, 0.004965230823, -0.018018160015, -0.016805917025, 0.057269200683, -0.017776563764, 0.031464911997, 0.068377196789, -0.006807275116, 0.020252287388, -0.069527983665, 0.048385798931, 0.051013641059, 0.051552958786, 0.041228547692, 0.026860825717, 0.055387452245, -0.015039391816, 0.022646896541, 0.070149108768, 0.038545161486, -0.063570395112, 0.039841145277, -0.002857483923, 0.008749425411, -0.041842319071, 0.007384337485, 0.056594550610, 0.068134173751, 0.031840026379, -0.041053630412, -0.038632173091, -0.050494007766, -0.047000683844, -0.027324795723, -0.031772181392, -0.062717132270, -0.072120502591, 0.026061981916, -0.033261597157, -0.041121043265, -0.003423556685, 0.050337433815, 0.061207413673, -0.000758439302, 0.005808442831, -0.041973687708, -0.025234460831, -0.043154045939, 0.043850921094, 0.054291442037, 0.032487623394, 0.061747327447, -0.008223839104, 0.047347843647, 0.022836372256, -0.016869839281, 0.050727240741, -0.007342860103, 0.052614159882, 0.032976314425, -0.000359371305, -0.059299547225, 0.050888121128, -0.057638373226, 0.033130913973, -0.000080764294, 0.067341312766, 0.048972174525, -0.033804599196, 0.000738307834, 0.004522010684, 0.023988172412, 0.056722506881, 0.032420635223, -0.045125119388, 0.049323119223, 0.070582479239, -0.056918837130, -0.057874359190, -0.064570821822, 0.049673281610, -0.054030179977, -0.004519596696, -0.007922261953, 0.017407089472, -0.034377224743, -0.033746387810, -0.057996626943, 0.004494324327, 0.020138636231, 0.047615163028, 0.070555001497, 0.013296589255, -0.004704393446, 0.038542494178, -0.058235727251, -0.039485611022, -0.005419045687, 0.071626245975, 0.034365408123, 0.021617680788, -0.070211850107, 0.041969589889, -0.070699289441, 0.065447956324, -0.027952279896, 0.057954236865, 0.016798175871, -0.032141275704, 0.002523422241, -0.014727834612, -0.029972773045, 0.012512855232, -0.070021390915, -0.016612604260, 0.022218890488, -0.016836442053, -0.047862760723, 0.005797311664, -0.031022068113, -0.019540064037, -0.022770162672, 0.026944674551, -0.027483403683, 0.049391821027, 0.007688462734, 0.063582211733, -0.055755376816, -0.054277367890, -0.001293472946, 0.008318975568, 0.041905581951, 0.013425342739, -0.031072206795, 0.016492590308, 0.002134278417, -0.005283594131, -0.045153494924, -0.051255237311, 0.067061156034, -0.034450385720, -0.054171461612, 0.032095231116, 0.028741277754, 0.067156031728, -0.047462627292, 0.038663111627, 0.048523642123, 0.019226752222, 0.006853699684, -0.069041609764, 0.056618139148, 0.062358513474, -0.056696206331, 0.068287745118, 0.016839005053, 0.009121291339, 0.012291878462, -0.012968361378, 0.048373028636, 0.017395026982, -0.036396447569, -0.017223086208, 0.042535476387, 0.016543351114, 0.047409489751, -0.002459309995, -0.042326245457, 0.049200847745, 0.028021760285, -0.024163141847, 0.012490421534, -0.008808292449, 0.019846938550, 0.019344322383, -0.052368335426, 0.065617144108, 0.004545167089, -0.007564611733, -0.030598636717, 0.055014058948, 0.063418045640, -0.017091028392, -0.055386178195, -0.000948809087, 0.043624021113, 0.019505374134, 0.004772223532, 0.054422989488, -0.068378649652, -0.053270347416, -0.000512577593, -0.007619418204, 0.007139220834, -0.065849721432, -0.034646179527, 0.008554801345, -0.066875375807, 0.044386021793, -0.062309905887, 0.042384371161, -0.032668236643, 0.030898064375, 0.029568612576, -0.024430580437, -0.038651823997, -0.067713290453, -0.015131324530, 0.042477697134, 0.031998068094, -0.029895566404, 0.000175312161, -0.023550093174, 0.008146427572, -0.040459834039, -0.063457898796, 0.040001578629, 0.000355809927, 0.067037850618, -0.004945367575, -0.013414092362, 0.016840659082, -0.011285938323, 0.013913504779, -0.000499986112, -0.070490956306, -0.069034472108, -0.021292444319, 0.030423872173, -0.056880176067, -0.017250977457, -0.068389832973, -0.029134888202, -0.027287613600, 0.029050871730, 0.060927510262, 0.047618277371, 0.019028604031, 0.006918750703, 0.014773257077, 0.033789046109, 0.021756075323, -0.004423245788, 0.009125247598, 0.026219353080, -0.026790056378, 0.041801452637, 0.034764610231, -0.050833303481, 0.025643236935, 0.003182128072, 0.001980163157, 0.020624943078, 0.042095802724, -0.015113584697, 0.041811451316, -0.031392727047, 0.030120760202, 0.012081943452, -0.063458241522, -0.032879669219, -0.013670366257, -0.041066739708, -0.023346561939, -0.053555317223, -0.003820054233, 0.056247293949, -0.024915456772, -0.065324053168, 0.050605870783, 0.033282473683, -0.071529068053, -0.010649871081, 0.050433337688, -0.030837908387, 0.035057552159, -0.057910613716, 0.023492209613, -0.009839657694, -0.008457727730, 0.041811294854, -0.015591491014, -0.062525928020, 0.058297172189, -0.022524286062, 0.062414944172, 0.003623798490, -0.061985634267, -0.058540865779, 0.033450126648, 0.050852298737, 0.056013435125, -0.068482071161, 0.021380752325, -0.055989693850, -0.021330453455, 0.049570873380, 0.007996164262, -0.015223138034, 0.053930222988, 0.020990148187, 0.071784600616, -0.051738392562, -0.007575586438, 0.044128336012, -0.042160116136, 0.047451563179, -0.051649644971, 0.040537588298, -0.060484137386, -0.009844973683, -0.070720829070, 0.001487061381, 0.051200799644, 0.068721383810, 0.025648117065, -0.059173252434, -0.069731034338, 0.022426947951, 0.065576300025, -0.067193470895, 0.010521598160, 0.014530152082, -0.027328167111, -0.026801448315, -0.060601916164, 0.008967652917, 0.049448192120, 0.034725449979, 0.010503292084, 0.067671969533, -0.007576070726, -0.004522986710, -0.045573331416, -0.061006970704, -0.000195793808, -0.058149129152, -0.065431006253, -0.048419833183, -0.000293195248, -0.057821124792, -0.040648486465, -0.052825838327, -0.057639028877, -0.002414368093, -0.068024866283, -0.020065698773, 0.016040287912, -0.061559967697, 0.002175867558, -0.011116456240, 0.054887309670, 0.019909173250, -0.014644522220, -0.070172443986, -0.005964055657, -0.011654566973, -0.060708388686, -0.035796511918, -0.028518471867, -0.034251276404, -0.044588848948, 0.039602167904, -0.067228816450, 0.039026781917, -0.045456737280, -0.030707210302, 0.012140370905, 0.006333842874, -0.032485403121, -0.047413967550, -0.062971867621, 0.058062225580, -0.057216558605, -0.038762204349, -0.059132248163, -0.045510441065, -0.011012014002, 0.017731979489, -0.005856841803, 0.016135610640, -0.020957197994, -0.033559113741, 0.040598109365, -0.038478158414, -0.027040839195, 0.026785790920, 0.028637968004, 0.033754199743, -0.033641394228, 0.051037438214, 0.049318432808, -0.062307909131, 0.027351945639, -0.018678832799, 0.051260210574, -0.049062903970, -0.059415776283, -0.069163426757, 0.006786949933, 0.000838175416, 0.026510417461, -0.061792612076, -0.048709072173, 0.027109265327, -0.068944148719, -0.044568270445, -0.023092612624, -0.066146858037, 0.048543378711, -0.007835581899, 0.042085066438, 0.017418242991, 0.040877573192, 0.005644395947, 0.041240021586, 0.057549655437, 0.022762112319, -0.057650692761, -0.039939168841, -0.012905333191, 0.051692053676, -0.033100944012, 0.050839170814, 0.038853585720, -0.049961507320, -0.055811762810, 0.027548737824, -0.069245971739, -0.037934061140, -0.010427255183, 0.017185434699, 0.062440231442, 0.009709164500, 0.044076099992, 0.028169907629, 0.013519346714, -0.001377664506, 0.068500578403, 0.028444498777, -0.064420491457, 0.015339024365, 0.018671929836, -0.011160090566, -0.020187657326, -0.049721289426, 0.005508206785, -0.006964042783, -0.037355892360, -0.016022216529, 0.024210922420, -0.057193540037, -0.048672437668, -0.043546795845, 0.019810326397, 0.051909990609, -0.064508572221, -0.015945322812, -0.049526065588, -0.015760682523, 0.062303036451, 0.017831414938, 0.055617943406, 0.065405726433, 0.024130985141, -0.016092937440, -0.034652423114, 0.046202622354, -0.052113696933, 0.007890000939, 0.024769358337, -0.051971763372, 0.069860622287, -0.000049814582, 0.037979401648, -0.046166606247, -0.018875189126, 0.005398176610, -0.040119081736, 0.025442399085, -0.010641317815, 0.037209123373, -0.032714866102, 0.051553338766, -0.071777939796, 0.028918191791, -0.070116460323, 0.013362385333, 0.042316131294, -0.022451363504, -0.054816991091, -0.069398730993, 0.020701959729, 0.021735906601, 0.030847869813, -0.010677400976, 0.041555725038, 0.013703368604, 0.016098991036, -0.066656596959, 0.044234775007, -0.009192183614, -0.015326615423, -0.059613373131, 0.067119345069, -0.068912133574, -0.057245761156, -0.050202399492, 0.048960402608, 0.046584375203, 0.069641068578, -0.001670740545, 0.053072884679, -0.034934058785, 0.062397450209, 0.000524602830, 0.021768480539, 0.047082103789, 0.048210881650, -0.001193523407, -0.019233219326, -0.036594733596, 0.008485257626, -0.007334768772, 0.060009166598, -0.064135521650, -0.049746170640, -0.053026735783, 0.001344248652, 0.020205006003, 0.011008158326, 0.018992953002, 0.022734992206, -0.036511607468, -0.033438943326, -0.050682231784, 0.059092059731, 0.038863807917, -0.022230967879, -0.040816627443, -0.056354418397, -0.020147360861, 0.025389008224, 0.067052349448, -0.007556319237, 0.047143757343, 0.058467224240, 0.006763949990, -0.067189201713, 0.020652301610, 0.041463397443, 0.061437472701, -0.014554738998, 0.029916025698, -0.009322464466, -0.056863795966, 0.010974638164, 0.051001377404, 0.069324657321, 0.031881645322, -0.024429701269, -0.036478828639, 0.061369985342, -0.028022479266, -0.013894114643, 0.029184922576, 0.014366619289, -0.055156700313, 0.051249094307, -0.059364553541, -0.043225347996, 0.009993463755, -0.026781745255, -0.053552754223, 0.013148233294, 0.023113861680, -0.036615502089, -0.007282011211, 0.013249292970, -0.060634277761, -0.071077123284, 0.009208783507, 0.057366803288, 0.048025876284, 0.043210670352, 0.037794381380, -0.003912404180, -0.070996835828, -0.047197181731, 0.048946261406, -0.040495812893, -0.066274188459, 0.057541504502, 0.032526575029, -0.024865470827, 0.017044246197, -0.000638529658, -0.032006822526, -0.066980972886, -0.065907672048, 0.011714860797, 0.039626963437, 0.041154921055, 0.036648280919, 0.071433857083, -0.065029785037, 0.050537332892, -0.023639481515, -0.040349956602, 0.024588502944, 0.032048702240, -0.055836297572, 0.062670141459, 0.063746646047, 0.034483902156, 0.053933456540, 0.060536369681, 0.003605835140, -0.005224496126, -0.044275283813, 0.043826058507, 0.061488315463, 0.013104721904, -0.058727588505, -0.008624389768, 0.029846616089, -0.000058017671, -0.016638189554, 0.055756807327, -0.009060002863, 0.002664238214, -0.030968006700, 0.025907486677, -0.016050849110, -0.053230136633, 0.012052640319, 0.029704853892, 0.063160061836, -0.034058805555, -0.021189071238, 0.020597122610, 0.054620876908, 0.025953650475, -0.001235626638, -0.047902815044, 0.013440504670, 0.033799007535, -0.049715436995, -0.042433854192, 0.056513398886, -0.033645402640, 0.016140185297, 0.024764500558, -0.013364642859, 0.017288535833, -0.057264029980, 0.040330894291, 0.071457937360, -0.017892241478, -0.071851000190, -0.060201454908, -0.036013089120, -0.065590098500, -0.006812229753, -0.044878639281, 0.000855900347, -0.064524970949, -0.020152576268, -0.059545304626, 0.057859987020, 0.047695860267, -0.068045340478, 0.043894827366, 0.042426832020, 0.028796650469, 0.013390414417, -0.007609501481, -0.041983634233, 0.024704970419, -0.044417940080, 0.056003734469, -0.026685871184, -0.059480868280, -0.017038874328, -0.046535439789, 0.052697889507, 0.023205213249, -0.065556868911, -0.033915046602, 0.067581817508, -0.034547396004, -0.067701853812, 0.041199781001, -0.016810633242, -0.050832942128, 0.066064611077, -0.030061900616, -0.022070020437, 0.002775907516, 0.031064294279, -0.054471127689, 0.047106072307, 0.018526025116, -0.054343454540, 0.047003045678, -0.017654053867, -0.066741153598, -0.015299413353, -0.010260060430, -0.050876058638, -0.066264621913, 0.050183951855, 0.046453401446, 0.002329282463, 0.051338434219, 0.054279670119, 0.071137189865, -0.052965071052, -0.001201421022, 0.028193600476, 0.057687327266, 0.039658032358, -0.070827081800, 0.038950562477, 0.048020727932, -0.024622928351, 0.011085085571, 0.012125611305, 0.058185294271, 0.009251780808, -0.046017184854, 0.000831976533, -0.016397178173, -0.067191682756, -0.007020406425, 0.026378273964, -0.018615461886, -0.046153269708, -0.000070944428, 0.045846156776, 0.068186163902, 0.061665698886, -0.014087155461, 0.008814841509, -0.056784078479, -0.006696186960, -0.028612624854, -0.003409631550, -0.020320370793, 0.055302485824, 0.041819401085, -0.003244742751, 0.017450742424, -0.036283243448, 0.049137011170, -0.029340781271, 0.043814614415, 0.020107768476, 0.034858949482, 0.013974092901, -0.033579625189, 0.066231414676, 0.028111211956, -0.040249142796, -0.025965441018, 0.067375734448, -0.022029634565, 0.069673001766, -0.037689916790, 0.052445471287, -0.052233628929, -0.005299754441, -0.034092806280, -0.012057010084, 0.059252992272, -0.033195525408, 0.002938106656, -0.060705911368, -0.000572711229, -0.070217646658, 0.016632147133, 0.052267968655, -0.061107195914, -0.039556413889, -0.037816144526, -0.040040548891, -0.017707340419, 0.048375338316, 0.048680424690, 0.059414938092, 0.036529310048, -0.031960021704, 0.066937476397, -0.025504980236, -0.014094967395, -0.061256032437, -0.024009779096, -0.050559669733, -0.004373669624, -0.027811150998, 0.018839128315, 0.032416284084, -0.069001622498, -0.040505312383, 0.047588147223, 0.006653979421, -0.047903832048, -0.055795587599, -0.048259366304, 0.071932092309, -0.034701205790, 0.045804634690, -0.063488200307, -0.010700251907, 0.021076299250, -0.069939866662, -0.071839593351, 0.042318001390, -0.016146171838, 0.025766842067, 0.041898220778, -0.012364022434, -0.004262194037, -0.040527336299, -0.020361617208, -0.032523512840, 0.054511815310, 0.065163582563, -0.012626968324, -0.026675239205, 0.048219911754, -0.004842579365, 0.035478293896, 0.020352169871, 0.067492529750, 0.049061700702, -0.043931014836, 0.054141595960, -0.046341575682, -0.046230424196, -0.055836211890, -0.025655243546, 0.046687513590, 0.052725605667, 0.058304488659, -0.018225528300, 0.049414210021, -0.035953208804, -0.063351735473, 0.052013881505, 0.049596302211, -0.046632178128, -0.050994649529, -0.019512653351, -0.052922740579, -0.062775954604, 0.038791656494, -0.061988767236, 0.016155891120, -0.023025505245, 0.015999302268, 0.012874141335, -0.002353899181, -0.015923574567, -0.053849857301, 0.018176905811, 0.065227001905, 0.019967712462, -0.036292914301, -0.018708083779, -0.009167350829, -0.046755891293, -0.046701468527, -0.028048787266, 0.070544317365, 0.005308479071, 0.062328726053, 0.019836083055, 0.033374644816, -0.026803977787, -0.029538620263, -0.048078492284, -0.067421026528, 0.018238484859, -0.066147804260, -0.049957655370, 0.041980929673, 0.060136839747, 0.014395132661, 0.048824131489, 0.013997443020, 0.069021821022, -0.064484395087, -0.066010691226, 0.055488660932, 0.032690055668, 0.046686597168, 0.044763050973, 0.035144783556, 0.010308578610, -0.010487493128, -0.027366846800, -0.061637688428, -0.046856530011, 0.068441033363, -0.067627020180, 0.018862113357, -0.009102210402, -0.032569557428, 0.022171281278, 0.056479662657, -0.063838861883, 0.057850569487, -0.052787154913, -0.009707443416, 0.024651437998, 0.014099285007, -0.024510435760, 0.066048011184, -0.031242687255, 0.018534556031, 0.013179384172, 0.049112215638, -0.009063184261, 0.050953060389, 0.054662391543, -0.018701080233, 0.022454686463, 0.044901661575, 0.061562716961, -0.027190208435, 0.021441504359, 0.071215808392, 0.055675253272, -0.056366428733, -0.033493883908, -0.035406444222, 0.061961323023, 0.000071182847, -0.003283359110, 0.014226302505, -0.068983227015, 0.024603933096, 0.069917455316, -0.034689642489, 0.053883776069, 0.030076615512, -0.069418273866, 0.026897437871, 0.011589840055, -0.048015035689, -0.030584990978, 0.037475802004, -0.052743658423, 0.057804465294, -0.026180915534, 0.038142398000, 0.051457241178, 0.018503427505, 0.019700370729, -0.058691766113, 0.006548643112, -0.055154856294, -0.032249432057, 0.022325187922, -0.035358317196, 0.023683063686, 0.071943894029, 0.024927191436, -0.053464293480, -0.026566632092, -0.027642305940, -0.039432235062, 0.009418822825, 0.036794789135, 0.001363106072, -0.040276158601, -0.012223206460, -0.037715382874, 0.042101494968, -0.031168337911, -0.047133363783, 0.052411623299, -0.012472268194, 0.016091644764, -0.026070639491, 0.063772574067, -0.069087363780, 0.033936038613, -0.036027766764, -0.052093051374, -0.052051067352, -0.052195739001, 0.053821101785, -0.040224038064, 0.049005761743, -0.042223077267, 0.060359254479, -0.032140139490, -0.001614592969, 0.034529261291, 0.050997227430, -0.011456884444, 0.023272313178, -0.042678445578, -0.018167387694, 0.027200132608, -0.023981820792, 0.065093919635, -0.071402117610, -0.023378841579, 0.042338803411, 0.010062843561, -0.035868830979, 0.024871408939, -0.025448955595, -0.035985197872, 0.038324229419, -0.036604624242, 0.056330844760, 0.018875330687, 0.038018509746, -0.056985426694, -0.001750402153, 0.022616028786, -0.056209143251, 0.067338585854, 0.021648965776, -0.034796185791, -0.028921701014, 0.055019110441, -0.063284270465, -0.004366070032, 0.038291484118, -0.031141292304, 0.070107132196, 0.022810809314, -0.066964112222, 0.002542689443, -0.053326386958, -0.041012469679, 0.016279280186, 0.059686899185, -0.020530547947, 0.033909454942, -0.059530869126, -0.061190526932, 0.019588202238, 0.003174349666, 0.024668455124, -0.040006946772, 0.010053962469, 0.066544860601, -0.046250142157, 0.025609388947, -0.007011100650, -0.035319291055, 0.026456616819, 0.022880025208, 0.023237027228, -0.036108721048, 0.065418362617, -0.026532288641, 0.053443998098, 0.033243134618, -0.051573708653, 0.035097882152, 0.022024802864, 0.020506232977, 0.044403053820, -0.023372299969, 0.007198564708, -0.052194345742, -0.029993314296, 0.056769475341, -0.069695055485, 0.066999003291, -0.013371247798, 0.006889998913, -0.018357984722, -0.011867877096, -0.028702855110, -0.042717225850, 0.055018752813, 0.023500800133, 0.051193676889, -0.047396451235, 0.065679892898, 0.040894106030, -0.052996143699, 0.037020608783, 0.050257734954, -0.066173888743, -0.060438953340, 0.042690485716, -0.044466685504, 0.008519239724, 0.020023562014, 0.054222598672, -0.065263636410, 0.034961313009, 0.059372380376, -0.009433314204, 0.048388242722, -0.028664931655, -0.015732496977, 0.013730108738, -0.002623178065, -0.040707007051, -0.020216926932, -0.037784088403, 0.069267943501, 0.048837497830, 0.055800944567, -0.028619661927, 0.018738381565, 0.019000075758, 0.069129839540, 0.052688613534, -0.008085258305, 0.070285215974, 0.041136421263, -0.018546134233, -0.009977377951, -0.052926801145, -0.014468569309, -0.026821043342, 0.034383267164, 0.023563258350, 0.068941667676, 0.064565271139, 0.067281290889, -0.005558229983, 0.054206252098, -0.059280157089, 0.013107992709, 0.053820461035, -0.036511901766, -0.051420919597, 0.059763401747, -0.001961611211, -0.065894164145, -0.023592732847, -0.053185984492, 0.052083142102, 0.064201578498, -0.024285856634, -0.070132285357, 0.020243890584, 0.071949154139, 0.066828444600, -0.021974507719, 0.000768966973, -0.057683989406, 0.017516039312, 0.057837828994, -0.053653806448, 0.041613593698, 0.026844792068, -0.022893860936, -0.022022150457, -0.051077391952, -0.009220726788, 0.016705743968, -0.056472074240, -0.048497483134, 0.049548603594, 0.029365129769, 0.011906176805, 0.010481916368, 0.053414091468, 0.053729876876, -0.052310418338, -0.070772521198, 0.062810346484, 0.051294878125, 0.057026758790, -0.068267337978, 0.009734563529, -0.068259581923, 0.064284369349, -0.006069719791, 0.006536051631, -0.060610774904, -0.010103568435, 0.022388681769, -0.011191062629, -0.029052797705, 0.012595809996, 0.012221366167, -0.054211121053, -0.055565953255, -0.068969927728, 0.006006285548, 0.050924323499, 0.031950503588, -0.025580793619, 0.060235500336, 0.033644028008, -0.016811251640, -0.049106232822, 0.055931881070, 0.044355340302, -0.062343459576, 0.029147520661, 0.012711226940, 0.067449226975, 0.013414502144, 0.052612565458, 0.025738365948, 0.061505615711, -0.071287505329, -0.058439105749, 0.018330261111, 0.060336261988, 0.041949324310, 0.065174892545, -0.044725708663, -0.060298204422, -0.052312843502, 0.022985607386, -0.053190026432, 0.037565067410, -0.065277419984, 0.045851916075, 0.027047157288, -0.019220195711, 0.064393907785, -0.019621945918, 0.070923417807, -0.064836315811, -0.030147124082, 0.009406521916, 0.001052856445, -0.011487890035, 0.002967581153, 0.068495973945, -0.014033764601, 0.036850713193, -0.063636414707, -0.021792393178, 0.049360744655, -0.031419210136, -0.042116604745, -0.048812277615, 0.053167015314, -0.013379078358, -0.008262500167, 0.054712861776, -0.013309407979, -0.024099323899, 0.051045164466, 0.019593589008, 0.000467479229, 0.009492188692, -0.019284255803, 0.036714866757, -0.006313934922, 0.065291076899, 0.064690530300, 0.002332620323, -0.000786796212, -0.008344642818, -0.007677964866, -0.032129075378, 0.019622586668, 0.012201592326, 0.055724501610, 0.002432174981, 0.029949747026, -0.027563706040, 0.045070663095, -0.019372902811, 0.013104960322, -0.017817240208, -0.064051173627, 0.035911194980, 0.021478891373, 0.010775029659, 0.039389513433, -0.052927523851, -0.043057981879, -0.009865757078, 0.037830680609, 0.023266531527, 0.045889273286, -0.001225262880, -0.027588278055, 0.054795578122, 0.032352827489, -0.067673563957, -0.025643818080, -0.048256527632, -0.069941207767, 0.030055619776, 0.004772812128, -0.071048542857, -0.008333876729, -0.024155620486, -0.029333401471, 0.011469751596, 0.061520457268, 0.015652507544, -0.010654207319, 0.062887117267, -0.035228114575, -0.024412978441, 0.023925006390, -0.010989576578, 0.067659795284, 0.052330411971, 0.062860563397, 0.018285304308, -0.061632506549, -0.010578826070, -0.044601805508, -0.049636755139, -0.052531864494, 0.002563923597, 0.042447358370, 0.009151592851, -0.063607282937, 0.000822328031, 0.020228475332, 0.017677009106, -0.057361401618, 0.011171087623, -0.013511616737, -0.059655908495, 0.016573026776, 0.054470703006, 0.033811137080, -0.041250519454, -0.050479006022, -0.071253195405, -0.064938768744, 0.055739328265, 0.038418158889, 0.055192619562, 0.009874381125, 0.001062817872, -0.024885930121, 0.068271726370, -0.032777894288, -0.018252406269, 0.009687051177, 0.064116999507, 0.060060814023, -0.052240837365, -0.012703452259, -0.026302307844, 0.001067005098, -0.053800508380, 0.040001958609, -0.071846559644, -0.066745229065, 0.059790283442, -0.010674785823, -0.013905439526, 0.034030273557, -0.033382233232, 0.022852927446, 0.012276403606, 0.058591499925, 0.013513751328, 0.062203362584, 0.072139963508, -0.003483034670, -0.035227805376, 0.037814922631, -0.041206091642, 0.056990027428, -0.012001983821, -0.068242371082, 0.054354846478, 0.070098131895, -0.005323655903, -0.004270724952, -0.019187279046, 0.018752649426, 0.009405314922, 0.064008250833, -0.039281919599, -0.000272065401, -0.039441715926, -0.059596288949, -0.021753612906, -0.003820039332, -0.001092620194, 0.013028018177, -0.012063562870, 0.065034642816, -0.035692103207, 0.036286547780, 0.006924204528, -0.017090976238, -0.025166653097, -0.028834275901, -0.006669022143, -0.054591864347, 0.017392776906, -0.066141322255, 0.020463615656, 0.007347643375, 0.008110813797, -0.029359038919, -0.017985552549, -0.041902262717, 0.043366402388, -0.029460899532, 0.068555817008, 0.035557724535, -0.030197642744, -0.057044152170, 0.070709377527, 0.068132236600, -0.043177101761, -0.056508105248, -0.010484311730, -0.034289147705, -0.030850347131, -0.010721381754, -0.036286585033, -0.017728660256, -0.042206007987, 0.047716885805, -0.009867891669, 0.031615450978, 0.010292373598, -0.039827983826, -0.064215049148, -0.056703001261, -0.044020008296, 0.047132708132, -0.055147081614, -0.031159084290, 0.071482509375, -0.011571306735, -0.019591681659, -0.019399538636, -0.040709983557, 0.057490468025, -0.059338055551, -0.058056369424, 0.031708225608, 0.014164000750, -0.003944285214, 0.064794659615, 0.041266523302, -0.067930921912, 0.052327588201, 0.026814796031, 0.040228359401, -0.065139584243, -0.065370269120, -0.040101218969, -0.025510400534, 0.018166474998, -0.059957809746, -0.069906525314, 0.034416936338, -0.020238485187, 0.049334093928, -0.010798893869, -0.053026169538, 0.013060964644, -0.041579075158, 0.012543998659, 0.018304251134, 0.050855726004, -0.033636216074, -0.035678818822, -0.005021214485, -0.018958229572, 0.016026623547, 0.051189266145, -0.016498148441, 0.041233815253, 0.048829503357, -0.068569257855, -0.061750352383, 0.047184824944, 0.002870745957, 0.046821892262, 0.045770391822, -0.005938969553, -0.055645994842, 0.068713873625, 0.019223466516, 0.063948869705, -0.039960883558, 0.042094871402, -0.028880286962, 0.032333128154, -0.019572686404, 0.003895506263, -0.061812728643, -0.071384273469, -0.011009708047, 0.053814172745, -0.027301549911, 0.070685625076, -0.043008305132, 0.047470264137, -0.025855664164, -0.066154502332, -0.044716522098, -0.059883378446, -0.018145639449, -0.053935114294, 0.046965122223, -0.009947955608, 0.003109969199, -0.066413164139, -0.042774073780, -0.011105220765, -0.038138248026, -0.070275820792, 0.006228432059, -0.055115848780, 0.026769183576, 0.041930377483, -0.015904802829, -0.026860687882, 0.026175081730, 0.067024007440, 0.051221154630, -0.012265637517, -0.028374642134, 0.054008349776, -0.006587736309, -0.040017664433, 0.038119718432, 0.015874177217, 0.018568679690, 0.048451855779, 0.031967319548, -0.035926796496, -0.000149093568, -0.009308837354, -0.001502096653, -0.067021943629, -0.037502903491, -0.051973879337, -0.037733089179, -0.002070687711, 0.037887930870, -0.065319888294, 0.054141104221, -0.018637657166, 0.022701904178, 0.067073583603, -0.052006073296, 0.056678324938, -0.041000388563, 0.045275181532, -0.043887846172, 0.057940512896, 0.003886371851, -0.030359245837, -0.043490104377, -0.016525540501, -0.030469693244, 0.068791478872, 0.023701272905, 0.019926831126, -0.055057365447, -0.031502626836, 0.006446182728, 0.026679024100, -0.058350753039, 0.036003932357, 0.052918866277, 0.070963755250, 0.032146967947, 0.037551954389, 0.029914923012, -0.033442731947, 0.046966083348, 0.005429007113, 0.064610749483, -0.038873907179, 0.009827800095, -0.042314857244, -0.022475831211, -0.006555698812, 0.061634078622, 0.016674429178, -0.002912178636, -0.028614360839, 0.013795554638, -0.030482236296, 0.020284287632, 0.026779487729, -0.017100490630, 0.054554909468, -0.038280665874, 0.030399695039, 0.062461256981, -0.024912960827, 0.035834521055, -0.026195745915, -0.005400687456, 0.022077850997, 0.046478830278, -0.011306982487, 0.042974308133, 0.066205546260, -0.024149738252, 0.015874035656, -0.007263123989, -0.025782793760, -0.062949463725, -0.002952978015, 0.025163643062, 0.065419390798, 0.051747046411, -0.068694092333, 0.055085733533, 0.068692281842, -0.064602516592, -0.017865039408, 0.009031280875, 0.028032496572, -0.057595513761, 0.019196622074, -0.022573012859, -0.072148062289, -0.025416642427, 0.060752332211, 0.055628314614, 0.057027623057, 0.007921338081, 0.033093884587, 0.055487334728, 0.007389970124, -0.015445116907, 0.031681969762, 0.062405243516, 0.024066440761, 0.003110550344, -0.039336174726, -0.041065223515, 0.012854903936, 0.046822048724, 0.048865355551, 0.027687646449, -0.000826269388, -0.064954578876, 0.026455268264, 0.007486790419, 0.037535987794, -0.006257168949, 0.000600792468, 0.020964063704, 0.052478075027, 0.012611210346, -0.023580413312, 0.059048816562, -0.027321439236, -0.018873780966, 0.025770217180, 0.021568194032, 0.012327283621, 0.003800027072, 0.072051793337, 0.007952481508, -0.059063233435, 0.000506713986, -0.057366237044, -0.042241383344, -0.004988268018, -0.010937217623, -0.032760377973, 0.026772536337, -0.026627644897, -0.031891316175, 0.016812406480, -0.045599672943, 0.016482762992, 0.066567629576, -0.006293334067, -0.035864993930, 0.042344465852, 0.030940078199, -0.028037156910, -0.033824641258, -0.018357742578, 0.001102581620, -0.066565573215, -0.065471731126, 0.069501787424, 0.054032489657, -0.049575567245, -0.023243565112, 0.012910753489, 0.017339833081, -0.026326600462, -0.043167635798, 0.033265903592, 0.012882120907, 0.042732127011, -0.043991375715, 0.024111419916, -0.021039944142, -0.043062336743, -0.015299912542, -0.021723639220, 0.066931381822, -0.033528711647, -0.070357605815, 0.020797811449, -0.027368724346, 0.013428203762, 0.038677632809, 0.042980067432, 0.016413420439, -0.042654301971, 0.027032099664, 0.056851968169, 0.067796230316, 0.062651440501, -0.035089638084, 0.053710058331, 0.039846614003, 0.003731340170, -0.020823899657, -0.011100299656, 0.056826725602, 0.063304260373, 0.041410043836, 0.037410832942, -0.052226625383, -0.031250551343, 0.057260602713, 0.063923463225, -0.052777554840, -0.059971094131, 0.040842950344, 0.060585364699, 0.059596359730, 0.014869011939, -0.059717748314, -0.011575970799, -0.029110904783, -0.039330992848, -0.017157375813, -0.064539030194, 0.018944896758, 0.009207993746, -0.002420820296, 0.011871986091, 0.016719006002, -0.015037789941, 0.039716534317, -0.008700489998, -0.066417843103, -0.002158038318, 0.022257342935, -0.026588603854, 0.000716492534, -0.035557892174, -0.045595441014, -0.002974018455, 0.039626859128, 0.019040443003, 0.043970778584, -0.051623523235, -0.044809557498, -0.061761606485, 0.021210610867, -0.013203211129, 0.051714114845, 0.068324804306, 0.026658631861, -0.059830516577, 0.063864409924, -0.060952976346, -0.049356669188, -0.061306964606, -0.053892165422, -0.060331810266, 0.054198324680, -0.013621069491, -0.054597608745, -0.024533130229, 0.048649638891, 0.051000960171, -0.062296483666, 0.063548818231, -0.011790774763, -0.034381322563, -0.023878753185, 0.062826246023, -0.050321895629, 0.018946394324, -0.028600029647, 0.059278294444, 0.010796919465, -0.041967906058, 0.046762995422, 0.009988546371, -0.011907964945, 0.031570434570, 0.013506717980, 0.069215670228, -0.022142268717, -0.002676658332, 0.067142218351, 0.049567513168, -0.032332539558, 0.055991292000, 0.007354438305, -0.021930973977, 0.066534563899, 0.061056599021, -0.060433257371, 0.012518569827, -0.054639268667, 0.060054153204, -0.030409436673, 0.064827993512, 0.043898463249, 0.033816866577, -0.036408197135, 0.052367150784, -0.030491199344, -0.022371716797, -0.030914079398, -0.017529360950, 0.040160253644, -0.036804459989, -0.068990886211, 0.035091929138, 0.015484876931, 0.005797810853, -0.064204737544, -0.071316070855, 0.030391663313, 0.068719759583, 0.034007474780, -0.066339619458, -0.029023926705, 0.016284272075, 0.047206610441, -0.029158204794, 0.003684349358, 0.028160184622, 0.019132733345, -0.068979732692, 0.038996279240, 0.063864722848, -0.020867757499, -0.040650155395, -0.053089678288, 0.032819427550, 0.060855582356, -0.059593722224, -0.059863746166, -0.028850570321, -0.037518166006, -0.031775347888, 0.024256467819, 0.044712975621, 0.012630395591, -0.057157248259, -0.054250024259, 0.048462554812, -0.009454168379, -0.049791783094, 0.068225458264, -0.070044070482, -0.033999115229, 0.037133000791, 0.004780806601, -0.061248153448, 0.015965335071, 0.066444873810, 0.014847449958, 0.000157661736, -0.060488350689, -0.045204475522, -0.060331724584, 0.064976036549, -0.019611109048, 0.048839494586, 0.042649693787, -0.024932526052, -0.013116594404, 0.040916286409, 0.013309977949, -0.061200421304, 0.057233974338, -0.050585273653, -0.039572142065, -0.054090417922, 0.009790256619, 0.057584688067, -0.039518233389, 0.005888625979, 0.027195490897, -0.067454114556, 0.015205346048, -0.003969147801, -0.004221931100, 0.037134066224, 0.054801166058, -0.064478754997, -0.031830973923, 0.029411636293, -0.066873602569, 0.043629437685, 0.039795964956, -0.029531307518, 0.006893701851, -0.042660687119, 0.010375551879, -0.055249236524, 0.004413761199, -0.055482000113, -0.032102420926, 0.028007596731, 0.003068499267, -0.027721762657, 0.033598639071, -0.022665515542, -0.067422263324, 0.018275789917, -0.009890519083, -0.035416077822, -0.030367899686, -0.004752539098, -0.008471973240, -0.026870410889, -0.024126768112, -0.048129905015, 0.036379203200, -0.069504268467, -0.061842374504, -0.009902097285, 0.025848351419, 0.001721307635, -0.034143872559, -0.001133695245, 0.049261949956, -0.044150896370, 0.025660820305, 0.054267987609, 0.000279359519, 0.054118633270, -0.046334899962, -0.009259112179, -0.035751465708, 0.025677591562, 0.027173414826, -0.026746112853, -0.051566176116, 0.041641779244, -0.006083793938, -0.010348640382, -0.017976604402, -0.025353565812, -0.020119246095, 0.000912778080, -0.063455559313, -0.068311817944, -0.026988893747, -0.022552553564, 0.015229672194, 0.046580456197, -0.049561306834, 0.041832529008, -0.047860056162, -0.016017932445, -0.030855491757, -0.001600213349, 0.031741380692, 0.041433490813, 0.039982184768, -0.024073220789, -0.008901923895, 0.040679164231, -0.052932411432, -0.067111052573, -0.043247804046, -0.068536549807, 0.004017964005, -0.047479055822, -0.039375215769, -0.063443444669, -0.069394014776, -0.025925744325, -0.053364686668, 0.001501277089, 0.056207165122, 0.058472380042, -0.035438600928, -0.052591435611, 0.004582576454, 0.041403949261, 0.071446150541, 0.046752445400, 0.061365708709, -0.002243436873, 0.040355220437, 0.018313646317, -0.029069747776, -0.038293451071, 0.054221123457, 0.022496357560, -0.047411933541, 0.005889557302, -0.045312155038, -0.000260539353, 0.020961448550, 0.015705429018, 0.049011714756, -0.028827909380, 0.031151458621, -0.019337646663, 0.010396435857, -0.012114875019, -0.003249615431, -0.058691956103, 0.035554140806, 0.056435853243, -0.015151232481, -0.033424902707, 0.044470369816, -0.025090772659, 0.029331251979, -0.055343836546, -0.068045683205, -0.051873259246, 0.054038673639, -0.049005761743, -0.068194732070, 0.049867026508, -0.017907969654, 0.064205497503, 0.066352516413, 0.040737204254, -0.059964247048, 0.066011771560, 0.055128499866, -0.016682632267, -0.024855285883, 0.014717355371, -0.003524847329, 0.058760985732, -0.004822656512, 0.042285084724, -0.066074386239, 0.039985939860, -0.025821957737, 0.060388982296, -0.064572237432, -0.031822200865, -0.041163817048, -0.004389069974, -0.036357078701, -0.030798420310, -0.018450796604, 0.031046189368, -0.069349862635, 0.026070676744, -0.034634150565, 0.063809663057, -0.009693007916, -0.009981110692, -0.020390864462, 0.016906470060, 0.057099610567, 0.002363845706, 0.002183675766, -0.015766497701, -0.051894608885, -0.045727912337, 0.044774353504, 0.058269038796, 0.054196804762, -0.042780872434, 0.067429602146, 0.052414968610, 0.024700410664, 0.062814950943, 0.064856305718, 0.033961176872, -0.026376344264, 0.049035102129, -0.068866968155, -0.018167972565, -0.027447495610, 0.021233081818, -0.030200533569, 0.020387336612, -0.062337744981, -0.031540498137, -0.030798953027, 0.055263549089, -0.018321264535, 0.027284674346, -0.011046923697, -0.054319314659, -0.032246764749, 0.007531143725, -0.042822234333, 0.068827107549, -0.021368548274, -0.060852903873, -0.068659573793, 0.072149574757, 0.055091172457, 0.020047411323, 0.039315767586, 0.068484365940, -0.066993534565, -0.034959439188, -0.009162910283, -0.045730426908, -0.021604243666, 0.051364600658, 0.032856799662, 0.007352769375, -0.053749747574, 0.038733176887, -0.023380871862, -0.021804127842, 0.052855536342, 0.067997142673, 0.062746167183, -0.013484552503, -0.027759686112, -0.058830812573, -0.066667675972, 0.058922886848, 0.024973131716, 0.011711813509, 0.043782316148, -0.020839747041, 0.000353708863, -0.031880408525, -0.014729365706, 0.027729146183, 0.054202452302, -0.041777089238, -0.057728931308, 0.005711071193, 0.049169480801, -0.025296162814, -0.022614944726, -0.015246436000, 0.045031256974, -0.029723331332, 0.005737848580, -0.051352642477, -0.052230581641, -0.060539558530, -0.024837646633, 0.038658052683, 0.007201090455, 0.049378655851, 0.043106004596, 0.060853734612, 0.050025723875, 0.042865939438, 0.054178416729, -0.058016620576, 0.010502547026, -0.031641978770, 0.070766478777, -0.005912132561, 0.003546305001, -0.009689223021, 0.032370947301, 0.018597051501, 0.026393689215, 0.047373838723, -0.062868937850, 0.068086668849, 0.049321122468, -0.061920475215, 0.033087886870, 0.059669673443, 0.035716347396, 0.026811234653, -0.061515796930, -0.033738609403, -0.006654359400, 0.004343301058, 0.011664062738, 0.020159907639, 0.051511406898, 0.067057684064, -0.024609629065, -0.059512890875, 0.054462254047, -0.068238601089, -0.061947435141, 0.017740175128, 0.065959170461, -0.037289921194, -0.013822417706, 0.024019122124, -0.043676499277, -0.040449030697, 0.012837678194, 0.050269193947, -0.063450120389, 0.032124862075, -0.045577496290, -0.053122334182, -0.025000333786, -0.041230782866, -0.065164424479, 0.027586832643, 0.047462590039, 0.045600295067, 0.053884670138, 0.034477971494, -0.004106663167, -0.067907109857, -0.050541363657, 0.036213010550, 0.046460628510, -0.061568345875, 0.005325376987, -0.029423493892, 0.046851575375, 0.042046435177, 0.026937223971, -0.022261112928, 0.035530865192, -0.070123270154, -0.057530216873, 0.054348364472, 0.024606153369, -0.040855426341, -0.007353782654, 0.017209403217, -0.041886657476, -0.029599927366, 0.041834793985, 0.023030132055, 0.023489013314, 0.033669233322, 0.054378673434, 0.068311288953, -0.018483262509, 0.066506296396, -0.041270822287, -0.046217296273, 0.071355804801, -0.010773655027, 0.024225860834, 0.023818857968, -0.009585469961, 0.002444885671, 0.071336925030, -0.064052015543, -0.055646561086, -0.021692048758, -0.048011388630, 0.070469766855, -0.042937569320, -0.026311632246, 0.008812367916, 0.010289378464, -0.026375021785, 0.045038245618, 0.064827993512, -0.029427655041, 0.051866151392, 0.057476207614, -0.031372629106, -0.047200519592, -0.004003576934, -0.049185983837, -0.044283352792, -0.027649153024, -0.068266272545, -0.017874296755, -0.041639607400, -0.069098770618, 0.012246884406, -0.068792477250, 0.018602386117, 0.054167479277, 0.020158790052, -0.035765830427, 0.056706488132, -0.013405453414, -0.033702649176, 0.005100846291, -0.001548178494, -0.009480334818, -0.039708554745, -0.054534412920, 0.051173970103, -0.016160782427, -0.010998439044, 0.070456147194, 0.070915177464, -0.002669692039, -0.013353645802, 0.043908610940, -0.033940508962, 0.042852282524, 0.050781026483, -0.064114890993, 0.006201520562, -0.030621711165, 0.006140701473, -0.059305876493, 0.007989503443, 0.063707634807, -0.054713290185, 0.016646124423, -0.054339341819, 0.047996468842, -0.029306851327, -0.064881660044, 0.019403837621, -0.044427074492, 0.026446513832, -0.026965595782, 0.042722821236, -0.011076331139, 0.044416375458, 0.039851471782, -0.004537254572, 0.059773907065, -0.053725197911, -0.050333648920, -0.023656275123, 0.051991753280, 0.050235815346, 0.055763378739, -0.053099557757, -0.035396102816, 0.015755556524, -0.069963596761, -0.007615782320, -0.005785644054, 0.004098184407, 0.005900703371, -0.028349384665, 0.039229817688, 0.060639441013, -0.055623043329, -0.069373317063, 0.058976948261, 0.072159200907, -0.051415033638, -0.015300530940, 0.066657304764, 0.057275801897, -0.052615918219, 0.064020082355, 0.007432810962, -0.031943108886, -0.027868174016, 0.001158915460, -0.058781564236, -0.009969513863, -0.036394465715, 0.055134296417, 0.047960013151, -0.000321395695, 0.020686455071, -0.007767513394, -0.005532778800, 0.010531693697, -0.066870212555, -0.002109952271, 0.065101385117, -0.043011628091, -0.056300081313, 0.056160688400, -0.051596388221, -0.046652980149, -0.013522133231, 0.009055010974, 0.030419535935, -0.057080663741, -0.056092448533, 0.043089471757, -0.052435562015, -0.005876116455, 0.000219963491, 0.055687353015, -0.025508835912, -0.013837780803, -0.005543805659, -0.050319328904, 0.004736728966, 0.013736903667, -0.068582333624, -0.047494009137, 0.011895336211, 0.006885789335, -0.045060340315, 0.025421939790, -0.054402321577, -0.001859903336, -0.062360629439, 0.043550342321, -0.045829739422, -0.053871929646, -0.023654848337, 0.043221890926, 0.014180794358, -0.031794894487, 0.002478472888, -0.036209221929, 0.055670171976, 0.022365987301, 0.055158555508, -0.009379491210, 0.033588998020, 0.060575008392, -0.055676244199, 0.008657045662, 0.066179588437, -0.015726249665, -0.023546617478, -0.057158470154, 0.055296897888, -0.014003705233, -0.060373105109, 0.023681364954, -0.030010160059, -0.062485240400, 0.020381592214, 0.067931801081, 0.018208257854, 0.016320906579, -0.070713639259, 0.068854674697, -0.069801732898, 0.004818201065, 0.031991593540, -0.054290115833, -0.035363029689, 0.003044895828, -0.067626059055, -0.044527731836, -0.071122907102, -0.059262812138, 0.007626898587, -0.029410846531, 0.045179374516, -0.015291154385, 0.047103598714, 0.015232324600, 0.041040502489, 0.058111771941, 0.065184921026, -0.000811077654, -0.061840586364, -0.059958945960, -0.029874522239, 0.065366685390, -0.021060075611, 0.003702074289, -0.069939166307, -0.037465356290, -0.000572815537, 0.066129624844, -0.061792477965, -0.012425310910, -0.003716729581, -0.000138513744, -0.025790777057, -0.044776726514, 0.054796695709, 0.052890896797, -0.057902630419, 0.047126621008, -0.067065373063, 0.032035179436, -0.057411730289, -0.036210652441, 0.003122046590, 0.043884783983, -0.038879740983, -0.056400150061, 0.051329068840, -0.038699366152, 0.063140302896, 0.046182781458, -0.034228596836, -0.051408544183, 0.061329290271, -0.048365581781, -0.062230393291, 0.022533506155, -0.049221511930, 0.002325460315, 0.015952274203, -0.041282076389, 0.040528245270, -0.022321283817, -0.057792492211, 0.009448759258, -0.019279886037, -0.066662035882, -0.019292961806, -0.065578483045, 0.039768241346, 0.042997293174, -0.008595615625, 0.040014572442, -0.072096362710, -0.010249219835, -0.067880198359, -0.017259597778, -0.033138677478, 0.008899480104, 0.037126302719, -0.069183960557, 0.052722342312, 0.009009622037, -0.063989676535, 0.004319608212, 0.025467194617, 0.063466623425, -0.036457769573, 0.008869662881, 0.005239188671, -0.031472273171, 0.000374533236, 0.017026156187, -0.020598545671, 0.011743545532, -0.020083095878, -0.035472806543, -0.037477076054, -0.049051098526, -0.046344161034, -0.060441311449, -0.028979998082, 0.030456565320, 0.050056330860, 0.065026968718, -0.067918688059, -0.063643693924, 0.051854036748, -0.060848619789, -0.061207167804, -0.007334373891, 0.011523716152, -0.037237167358, -0.034700103104, 0.013795234263, 0.016152247787, 0.068254724145, -0.025626972318, -0.011428888887, -0.070206895471, -0.017728470266, 0.002440728247, -0.058218400925, 0.040594048798, -0.044598951936, 0.010995805264, -0.011154484004, 0.044716075063, -0.024507354945, 0.068840622902, 0.011333309114, -0.066639840603, 0.042621456087, 0.051467649639, 0.022553779185, 0.029274843633, 0.062920615077, 0.008432589471, -0.031019125134, -0.048067413270, 0.064301997423, 0.014940246940, 0.018647171557, -0.067231997848, -0.014078482985, -0.040006585419, -0.014917757362, -0.019666064531, -0.003228880465, -0.071463339031, 0.042102426291, 0.046483136714, 0.002888709307, 0.034786671400, -0.012920785695, 0.072057589889, -0.036204714328, -0.050628565252, 0.004499688745, -0.000521145761, 0.013162396848, -0.006785646081, -0.026177510619, 0.014069534838, 0.071330383420, 0.002343662083, -0.046246238053, 0.065858736634, -0.009587600827, 0.053404867649, -0.019104138017, -0.036022499204, -0.023353409022, -0.040307525545, -0.070396371186, 0.036075495183, -0.038033202291, 0.040861673653, 0.061290353537, -0.038940582424, 0.049144446850, 0.006235830486, 0.055560618639, -0.065247721970, -0.019345905632, 0.061798200011, 0.019407868385, 0.009819939733, -0.059360854328, -0.052632022649, 0.021891191602, -0.037774041295, -0.052716299891, 0.067199006677, -0.013812128454, -0.045407615602, 0.005726628006, -0.032872974873, -0.010052274913, 0.040629096329, 0.038786791265, -0.043540690094, -0.059353351593, -0.040754444897, -0.041268981993, -0.013642884791, 0.048867024481, 0.040151052177, -0.014111038297, -0.064824983478, 0.052612148225, -0.068811871111, 0.070032984018, 0.069023847580, 0.000248149037, 0.046032071114, -0.060431793332, -0.026571620256, -0.012798808515, -0.046467099339, -0.043888255954, -0.009040936828, -0.067397110164, -0.006234005094, -0.014583904296, 0.013495445251, 0.023908242583, -0.006670705974, -0.064026601613, 0.000818297267, 0.045768775046, -0.006878748536, 0.053106620908, 0.022142559290, -0.048028182238, 0.040824852884, -0.061511531472, 0.048279173672, 0.011657096446, -0.070360064507, 0.020389422774, -0.034273728728, -0.001485377550, 0.052383512259, -0.039151772857, 0.060282394290, 0.043019540608, -0.004918202758, 0.047112718225, -0.034433439374, -0.003112636507, -0.009033001959, -0.041975766420, 0.046220064163, 0.059144437313, 0.064204901457, -0.037930771708, 0.021788969636, -0.037884712219, 0.015947699547, -0.036025337875, 0.055187463760, -0.042701862752, -0.053669378161, -0.018975745887, -0.027472838759, 0.059369996190, 0.011353902519, 0.009156733751, 0.043095767498, 0.064238384366, 0.003169395030, 0.034870482981, 0.039256267250, -0.027360379696, -0.068602189422, -0.030178096145, 0.048190057278, -0.048682298511, -0.059132061899, 0.015066228807, 0.045368403196, 0.014296159148, 0.002344869077, -0.057277143002, -0.050210379064, -0.030485194176, -0.022957146168, -0.026270180941, 0.066571235657, -0.056333735585, -0.011693883687, 0.018819324672, 0.058176115155, 0.063602551818, 0.035428412259, 0.044348150492, -0.031686972827, 0.067384377122, -0.018662657589, -0.000146389008, 0.029972858727, -0.065219111741, 0.055169746280, -0.020387236029, -0.040725503117, -0.016603861004, 0.014421798289, -0.048446554691, 0.040187358856, 0.048646047711, 0.045039072633, 0.013079896569, 0.047744810581, 0.066825583577, -0.071316428483, -0.063666030765, 0.030888147652, -0.019534282386, 0.041538931429, -0.004157833755, 0.024767033756, -0.070667751133, 0.009946681559, 0.049575239420, 0.017335653305, 0.062072739005, -0.068941175938, 0.049742043018, -0.003677360713, 0.013631530106, -0.023342292756, -0.010563496500, 0.033478572965, 0.059151083231, 0.018215104938, 0.051626227796, -0.034767020494, -0.020123876631, 0.023102074862, 0.000353232026, 0.069889113307, -0.060934428126, -0.057944029570, -0.009536840022, -0.067291155457, -0.069801494479, -0.041674762964, -0.072139479220, -0.012497354299, -0.011424072087, -0.022668197751, -0.056716233492, 0.003387369215, 0.042392402887, -0.066234216094, -0.023659199476, -0.025199912488, 0.039706349373, 0.045961640775, -0.070566348732, -0.031895842403, 0.059745624661, 0.065955802798, -0.016597013921, -0.048005193472, 0.048896998167, 0.064821094275, 0.020478397608, 0.057897642255, -0.044971983880, 0.000606402755, -0.058577671647, -0.059846986085, 0.029739335179, -0.044068545103, -0.011430229992, 0.016985639930, -0.062764167786, -0.056300234050, -0.028689004481, 0.045959100127, 0.013127781451, -0.013273689896, 0.016400039196, -0.058592159301, 0.046435557306, -0.065758131444, 0.060745075345, 0.037739165127, 0.030340887606, 0.002222619951, 0.017426341772, 0.027693375945, -0.008154653013, -0.055297859013, -0.065242804587, 0.021792016923, -0.021338008344, 0.002377986908, -0.049268022180, 0.024274431169, -0.044310018420, -0.013637054712, 0.065701574087, 0.022258460522, -0.031129971147, -0.063387215137, -0.058037459850, -0.002825215459, 0.028089895844, 0.036214575171, 0.067867830396, -0.042295377702, -0.045344553888, -0.066495597363, 0.016149461269, -0.045840062201, 0.064888447523, 0.015740878880, 0.038054242730, 0.001630529761, 0.069274738431, -0.000673890114, 0.017045035958, 0.020845524967, 0.069630697370, -0.069668211043, 0.047910302877, -0.001577340066, 0.042221754789, 0.035693667829, 0.039005674422, -0.034179490060, 0.008164361119, 0.023334674537, 0.027227289975, -0.061658419669, -0.021157205105, -0.050971075892, 0.039033390582, -0.030441816896, -0.018120020628, -0.010747998953, -0.035560730845, 0.064430162311, -0.065289653838, 0.022364646196, -0.063155740499, -0.030900351703, 0.031963668764, -0.000990264118, 0.003039248288, 0.047224417329, -0.009451135993, 0.069422602654, -0.000579938293, -0.027264919132, 0.047204032540, 0.016050353646, 0.051206804812, 0.051560856402, 0.064398825169, 0.001139387488, -0.037741452456, -0.044370930642, -0.035976093262, -0.054990295321, 0.040649347007, 0.019317343831, -0.006145447493, 0.022758722305, 0.002797290683, -0.055084623396, -0.054139956832, -0.009029045701, -0.037467747927, 0.053566187620, 0.001747891307, 0.029681280255, 0.024074703455, -0.063420146704, -0.066873058677, -0.033901058137, -0.068270146847, -0.032078333199, 0.053978949785, -0.029098842293, 0.046959474683, -0.022916331887, 0.032689988613, 0.056423574686, 0.012051761150, 0.048543304205, 0.049267612398, -0.042078696191, 0.011568039656, 0.064492657781, -0.012057043612, 0.013839520514, -0.038315422833, -0.049344450235, -0.058326870203, 0.007007226348, -0.060908395797, 0.036890648305, -0.025266621262, -0.043396003544, -0.057646427304, -0.013532884419, 0.035749264061, -0.069897092879, 0.061917185783, 0.031322956085, 0.042948029935, 0.013598874211, 0.050133436918, 0.039918623865, 0.030224308372, -0.065160363913, -0.053513627499, 0.046236291528, 0.063947811723, 0.009829334915, -0.020142938942, -0.054938197136, -0.020064976066, 0.023674666882, 0.046839304268, -0.060547508299, 0.061320766807, -0.043371394277, 0.007976546884, -0.003723032773, -0.024871047586, 0.026064395905, -0.065002173185, 0.047347448766, -0.043792899698, -0.030761785805, 0.005009256303, 0.024821855128, 0.019440509379, -0.035133585334, 0.066279560328, 0.050882980227, 0.058668881655, -0.032885208726, 0.040715143085, 0.021112330258, 0.001658640802, 0.060087993741, 0.047303892672, 0.056815415621, -0.062440745533, 0.027329236269, 0.046910695732, 0.028790071607, 0.042688369751, 0.016234233975, -0.014382433146, 0.014755949378, 0.070949465036, 0.039679750800, -0.035741914064, 0.013759732246, 0.058525636792, 0.041298575699, 0.068725377321, -0.068821452558, -0.070381127298, 0.031774297357, -0.014875635505, -0.007473535836, 0.011136934161, -0.032985452563, -0.070546217263, 0.046105161309, 0.050489842892, 0.054332464933, -0.055822275579, -0.020869031549, 0.000829041004, -0.024437788874, -0.071678280830, 0.059308990836, 0.001884736121, -0.023672327399, -0.017337389290, 0.046496197581, 0.005606092513, -0.052743829787, 0.039401262999, -0.045126341283, 0.047722838819, -0.023661591113, -0.054120667279, 0.045291699469, 0.060265019536, -0.050101034343, 0.066437184811, -0.057995751500, -0.053568515927, -0.068729758263, 0.007466487586, -0.046509563923, 0.003487184644, 0.018113277853, 0.049995712936, -0.056567519903, 0.064339965582, -0.026981495321, -0.020008817315, 0.012735992670, -0.024145074189, 0.026845887303, 0.058448761702, 0.061964705586, 0.033855080605, 0.046221427619, 0.061300814152, -0.011646963656, -0.019289072603, 0.011521890759, -0.051860041916, 0.009497456253, -0.039675999433, 0.051845401525, 0.064098298550, 0.030089020729, -0.035269722342, 0.024634681642, -0.054413810372, -0.031993266195, -0.065927788615, -0.051487196237, 0.005139134824, 0.032226428390, 0.041126929224, -0.034965734929, 0.024129949510, -0.001825943589, 0.036324210465, 0.005640402436, 0.011217713356, 0.046994425356, 0.049254685640, 0.039189971983, 0.070957183838, 0.034743808210, -0.055263116956, 0.001305826008, -0.061143383384, -0.001547470689, -0.048175156116, 0.071764439344, 0.008680775762, -0.028145298362, -0.014083694667, -0.009950879961, 0.003613546491, -0.018818479031, 0.025811150670, 0.070161938667, 0.050848014653, -0.054670669138, -0.011436097324, 0.066821902990, -0.037032134831, -0.006565712392, -0.045807268471, -0.052720926702, -0.012683320791, -0.039891887456, -0.040494780988, 0.029452189803, 0.061669439077, -0.031937930733, 0.061557471752, -0.054616950452, 0.002511084080, 0.017980545759, -0.046094063669, -0.023765277117, -0.070621863008, -0.012438818812, -0.035079058260, 0.027976296842, -0.055770777166, -0.022277664393, 0.060506045818, 0.067282617092, 0.002164512873, 0.040765814483, -0.006841339171, 0.066490545869, 0.004472866654, -0.043245546520, 0.020655795932, -0.009791702032, -0.007834218442, 0.036678873003, -0.051499329507, 0.048741556704, 0.060084506869, -0.026084113866, 0.052661567926, -0.021103657782, 0.053116783500, -0.048261791468, 0.045798286796, 0.004792541265, 0.025985196233, -0.011843115091, -0.028335187584, -0.005007609725, -0.036521468312, 0.019621171057, 0.004044204950, 0.031349800527, 0.056574761868, 0.021135143936, -0.038977231830, 0.048610568047, 0.038608856499, -0.058150984347, 0.043872788548, -0.031310051680, -0.011620137841, 0.024067804217, -0.054373446852, 0.011303283274, -0.060586929321, -0.036648590118, 0.057623594999, -0.006110504270, 0.046196371317, -0.059104032815, -0.041859418154, 0.018940888345, -0.031778186560, -0.020905714482, 0.061775624752, 0.058959499002, 0.041831180453, -0.064188808203, -0.047334663570, 0.059293374419, -0.036492560059, -0.040531396866, 0.035145595670, 0.017976537347, 0.035340882838, 0.012983590364, -0.011323928833, -0.009789947420, 0.063561484218, -0.065054222941, 0.000718571246, -0.032051578164, -0.035206109285, -0.006489694118, -0.052909977734, 0.049356408417, 0.001957379282, 0.013237021863, 0.039593786001, 0.048823840916, -0.066143438220, -0.003763049841, -0.065957881510, -0.036283846945, -0.044686444104, -0.031239110976, 0.000912606716, 0.063981458545, 0.044970937073, 0.062989592552, 0.009790152311, 0.031176701188, -0.054799288511, -0.045825041831, -0.047518767416, 0.011879354715, -0.038189452142, -0.070555530488, -0.002662360668, 0.071421593428, -0.010242097080, -0.065449155867, 0.008403390646, -0.028096467257, -0.022803887725, -0.012424055487, -0.039375316352, 0.000515088439, 0.023595556617, 0.002181187272, 0.070288777351, 0.037715449929, -0.025523304939, -0.069797433913, 0.009903356433, -0.034121796489, 0.048236742616, 0.027047000825, 0.041638664901, 0.011159524322, -0.031173244119, 0.048727810383, -0.056459687650, 0.011996954679, -0.003447473049, -0.035527694970, -0.012877907604, 0.018087051809, 0.030807487667, -0.021942779422, 0.034632243216, 0.032766878605, 0.023187793791, -0.046594411135, 0.020496666431, 0.055082812905, 0.043005399406, 0.030874297023, -0.065653756261, 0.010580509901, 0.070058405399, 0.036423027515, -0.010135330260, -0.050896279514, 0.048422448337, -0.056469388306, -0.036708053201, 0.015757359564, 0.013353288174, 0.065777108073, -0.004542946815, -0.023012325168, -0.032565705478, 0.001863688231, 0.017022043467, -0.004453077912, 0.051194466650, -0.061607386917, 0.065946564078, 0.040230609477, -0.064479753375, -0.014781948179, -0.065810799599, 0.017091959715, 0.014337144792, -0.026084128767, -0.036087248474, -0.046334832907, 0.063523247838, -0.024894602597, -0.061192419380, 0.023924469948, 0.021579399705, 0.026536196470, 0.012032456696, 0.025136165321, 0.046507604420, 0.028668150306, -0.017587929964, 0.046995848417, 0.029106996953, 0.060524895787, -0.038059908897, -0.023612037301, -0.029001988471, 0.050899408758, -0.057538267225, 0.056218519807, -0.051620133221, -0.055215232074, -0.031431715935, -0.012089837343, -0.003363952041, 0.004247136414, 0.065979748964, -0.050532571971, -0.033000286669, 0.043033465743, 0.053450509906, -0.010716736317, 0.029187470675, -0.000645510852, 0.053976386786, -0.035697229207, -0.005860924721, 0.035406738520, 0.015742629766, 0.016966059804, -0.051617227495, -0.063098043203, -0.037168033421, 0.014897555113, -0.016115322709, 0.003920681775, -0.025352481753, -0.036051560193, 0.008954092860, -0.053782597184, 0.015445098281, 0.021109163761, 0.021962203085, 0.045063473284, -0.048427969217, 0.010213740170, -0.039076406509, -0.071670003235, 0.026849023998, -0.038216244429, -0.068027451634, -0.066566698253, -0.059346985072, 0.010688342154, 0.015009224415, 0.034981220961, -0.008470438421, -0.001680113375, -0.051468838006, -0.063857123256, -0.001350805163, -0.049591571093, 0.048598520458, -0.036117754877, -0.040993355215, -0.010824240744, -0.023393861949, -0.030902776867, 0.059593915939, 0.022302441299, -0.015691924840, 0.059365853667, -0.049870260060, 0.006150558591, 0.000003904104, 0.050750985742, 0.033223107457, -0.007302939892, 0.070543363690, 0.051186770201, 0.043449945748, 0.001380175352, 0.001799978316, -0.055616967380, 0.059606656432, 0.023298382759, 0.058889582753, 0.003931879997, 0.024801239371, -0.057341098785, -0.039161372930, 0.017468862236, 0.037175774574, 0.059723377228, 0.047701448202, -0.025069400668, -0.054096266627, -0.055981591344, 0.052290596068, -0.033111266792, -0.040141656995, -0.020038429648, -0.033744961023, 0.010278813541, -0.070828959346, 0.034904599190, 0.013012699783, -0.038175877184, -0.049781754613, -0.036710426211, 0.029797211289, 0.059458583593, 0.008939176798, 0.057238519192, 0.001737862825, -0.061866119504, 0.005970560014, 0.051836088300, 0.026772640646, -0.033130194992, 0.004101380706, 0.033864200115, -0.036166653037, -0.061716370285, 0.023142576218, -0.041572794318, 0.039546519518, -0.045060768723, 0.029443435371, -0.013782344759, -0.009937837720, 0.025423817337, -0.023948956281, 0.042182140052, 0.058920741081, 0.033246472478, 0.069645643234, 0.065441548824, -0.010072030127, 0.038819223642, 0.070637360215, 0.067493498325, 0.046089179814, 0.039891868830, -0.008510082960, 0.009707652032, -0.026334345341, -0.061658989638, 0.056537613273, 0.068043604493, 0.034693069756, -0.029557753354, -0.020968809724, -0.024145159870, 0.000682368875, 0.022730037570, 0.071516975760, -0.052645549178, 0.056882187724, 0.053997799754, -0.020008418709, 0.052980989218, -0.018986001611, -0.006004251540, 0.040640659630, 0.027177885175, -0.043748319149, 0.055639743805, 0.016573250294, 0.047037646174, -0.052756305784, -0.054285399616, 0.038829930127, -0.041109308600, 0.047613061965, -0.015171792358, 0.017450861633, -0.035944674164, 0.044690847397, 0.034872405231, -0.025825843215, -0.070856556296, 0.050059705973, 0.069186434150, -0.006226405501, -0.038556896150, 0.017524011433, 0.032290607691, -0.015864040703, -0.069044239819, 0.026794344187, -0.006463922560, -0.011564321816, 0.030126303434, -0.028007425368, 0.030065633357, -0.025716755539, -0.055502772331, 0.016795389354, 0.052775539458, 0.012175783515, -0.059214908630, -0.052116364241, 0.007913313806, -0.026369169354, -0.001476168633, -0.033934969455, 0.029578402638, -0.043957151473, 0.035759843886, -0.005706168711, 0.007638014853, -0.055526599288, -0.018405042589, -0.059668261558, 0.070125699043, -0.053784660995, 0.043328307569, 0.067470163107, 0.000342868268, 0.053801909089, 0.057257637382, 0.008154571056, 0.008635245264, -0.029652390629, -0.016218163073, -0.057058949023, -0.024456132203, 0.013469427824, 0.003099158406, -0.019162829965, 0.039800196886, -0.054767575115, 0.070186913013, -0.026744339615, -0.004946246743, 0.012141682208, -0.023929048330, 0.001330897212, -0.019264072180, -0.048767283559, -0.066447108984, -0.062628760934, -0.040240831673, 0.026590958238, -0.067717336118, -0.066735781729, 0.026856698096, 0.010504148901, 0.036618188024, -0.018834017217, 0.047444269061, 0.050369985402, 0.028802499175, 0.026535198092, 0.047089882195, 0.012337625027, -0.059774700552, 0.004431210458, 0.031141772866, -0.027335379273, 0.018291980028, -0.065983138978, -0.057679310441, 0.030526079237, 0.022903032601, -0.066708080471, -0.031754836440, -0.010919872671, 0.037433162332, -0.007670737803, -0.024810548872, 0.018774650991, 0.001812227070, -0.028942417353, -0.034116413444, -0.010807927698, -0.017471633852, -0.045173093677, -0.058045770973, 0.026367969811, -0.008217871189, 0.003853812814, -0.070997804403, 0.049121662974, -0.033355340362, -0.042155042291, -0.050719156861, -0.044020541012, 0.055129319429, 0.035210393369, -0.019266482443, -0.067299254239, -0.057105768472, 0.049313329160, -0.040248833597, -0.053689129651, 0.002664424479, -0.025103192776, -0.013418771327, -0.014212004840, 0.027981065214, -0.060228761286, -0.030044455081, 0.062483727932, -0.044255457819, 0.013309784234, -0.045758485794, -0.019901499152, -0.065481282771, 0.011059418321, -0.058025293052, -0.022275634110, -0.061130065471, 0.060885801911, 0.068836763501, 0.065049394965, 0.015664190054, 0.014904938638, 0.001795895398, 0.065262854099, 0.043431825936, 0.015650488436, 0.062794849277, -0.011574849486, 0.011127762496, -0.050144307315, 0.007021076977, 0.033827789128, 0.016802355647, 0.063556417823, -0.062139544636, -0.012470066547, 0.030725724995, -0.024642337114, -0.058039590716, 0.012533158064, -0.043425612152, 0.034978970885, -0.043706767261, 0.044769033790, 0.058277457952, 0.006899759173, -0.005729362369, -0.013832140714, 0.000089973211, -0.070678025484, -0.034854702652, 0.069499880075, 0.036084406078, 0.027724348009, 0.024174600840, 0.022284962237, -0.023212265223, 0.006593883038, -0.038541153073, 0.024434916675, -0.025075957179, -0.057842977345, 0.044568240643, -0.000215649605, -0.049189474434, -0.039570849389, 0.007305711508, -0.017187848687, 0.071161553264, -0.004680171609, -0.036015119404, 0.071815490723, -0.066698342562, -0.003842182457, 0.026258759201, 0.036817677319, 0.056618466973, -0.017465505749, 0.020263589919, 0.042011506855, 0.039427779615, 0.046360589564, -0.033699981868, -0.058681063354, 0.002623647451, -0.023959003389, 0.002047076821, 0.020345479250, -0.038485970348, 0.034604780376, 0.012636139989, -0.066617213190, -0.010545082390, 0.035899884999, 0.010453321040, 0.071834400296, -0.024150375277, 0.041040226817, 0.045114643872, -0.067169606686, -0.021512929350, 0.000226780772, 0.047407664359, 0.020038768649, -0.011117298156, -0.012886870652, -0.015406403691, -0.024360790849, -0.001335337758, 0.032964155078, 0.030523754656, -0.017738573253, -0.037989221513, 0.047997534275, -0.066926620901, -0.028354648501, -0.001403905451, -0.017563119531, 0.005341395736, -0.007521905005, 0.043623641133, 0.035392537713, 0.048516497016, -0.053889051080, 0.040037401021, -0.024783276021, 0.014815412462, -0.026583511382, -0.065583281219, 0.029162593186, 0.052568309009, -0.014406934381, 0.038490928710, -0.003330603242, 0.040522187948, 0.071393117309, -0.032118096948, -0.053633727133, -0.024613123387, 0.004307806492, 0.045776933432, 0.023465253413, -0.047463156283, -0.004650868475, -0.006214596331, -0.038262151182, 0.029734961689, -0.011849533767, -0.030179180205, 0.004503667355, -0.017226837575, 0.002104528248, 0.008960872889, -0.038595024496, -0.068344302475, 0.012037016451, -0.010411165655, 0.040021501482, 0.049624212086, -0.043109014630, 0.061523750424, 0.038913443685, -0.004472747445, -0.014309238642, -0.056734696031, -0.000736124814, -0.020094778389, -0.047900542617, 0.057937040925, -0.012278694659, 0.060213491321, 0.018305383623, 0.058584317565, -0.016538530588, -0.063251733780, -0.043470606208, -0.068568952382, 0.047224469483, 0.036656126380, -0.022396389395, -0.036861088127, 0.054940104485, 0.050156146288, 0.036573432386, -0.052807390690, 0.055522963405, 0.000666610897, -0.065044805408, 0.063269004226, -0.037311859429, -0.005475513637, 0.054451629519, -0.049388226122, 0.052542582154, 0.002194792032, 0.015558749437, 0.023407727480, -0.038453623652, -0.009039804339, 0.020999848843, 0.016872040927, 0.022177435458, -0.054222218692, -0.003922231495, -0.024898368865, 0.048476785421, -0.030011039227, 0.059814378619, -0.050062801689, 0.042161561549, 0.044096715748, 0.062073335052, 0.026361443102, -0.063708506525, 0.043041326106, 0.004672698677, -0.024455424398, 0.000733643770, 0.021387428045, 0.040220268071, -0.004120066762, 0.056732654572, 0.023924887180, -0.046435974538, -0.031991697848, -0.041385624558, -0.025534264743, -0.045028060675, 0.067708596587, 0.013901032507, 0.042166434228, 0.022691115737, 0.024432785809, -0.051922447979, 0.004429385066, 0.003987237811, 0.018404163420, -0.023235976696, -0.071762502193, 0.027732141316, -0.030460573733, 0.032556444407, 0.069149658084, 0.047937609255, -0.009510464966, 0.034479722381, 0.030631676316, 0.039761960506, -0.040995419025, -0.015992794186, 0.005660757422, 0.050344675779, 0.015991799533, 0.054689332843, 0.016545601189, -0.060756582767, -0.062182750553, -0.010573957115, 0.030042700469, -0.033544160426, -0.028601665050, -0.042521536350, -0.007195807993, -0.064938008785, -0.036250330508, -0.032372269779, 0.017199113965, -0.018022287637, -0.034758001566, -0.071141168475, 0.041206836700, -0.051754720509, 0.003937922418, -0.063680477440, -0.031455256045, -0.002798929811, 0.032924816012, -0.006167799234, 0.010347798467, 0.028848916292, -0.041313461959, -0.026386547834, -0.045056451112, 0.006897605956, -0.035788752139, -0.022153712809, 0.069150418043, -0.065623871982, 0.061798721552, -0.002285301685, 0.038656815886, 0.058859050274, 0.032639533281, 0.002301476896, -0.059663824737, -0.024238437414, -0.016091544181, -0.020001623780, 0.028200946748, 0.029299676418, -0.017582818866, -0.040267433971, -0.043065346777, -0.038015738130, -0.002314358950, 0.005169190466, -0.034219909459, -0.040266264230, 0.045626103878, 0.058173224330, -0.053204618394, 0.042146369815, 0.020175822079, 0.058210715652, 0.054887413979, -0.010061170906, 0.031758517027, -0.033856544644, -0.057571783662, 0.063148990273, -0.016765259206, -0.027760341763, -0.065648354590, 0.054347038269, -0.011753831059, -0.068725578487, 0.024362079799, 0.031921669841, 0.039254806936, 0.018609337509, 0.006722480059, 0.071666017175, -0.055882722139, -0.057918269187, 0.033378154039, -0.052989780903, -0.055539146066, 0.035831250250, -0.047531761229, -0.059083677828, 0.024177476764, -0.054886676371, 0.038150243461, 0.000803813338, -0.044517014176, -0.070038959384, -0.043534956872, 0.026148192585, -0.062068119645, 0.059122741222, -0.011832997203, 0.028841592371, -0.057615473866, -0.014597322792, -0.036844756454, 0.026348367333, -0.014714930207, -0.054427560419, -0.002106666565, 0.052631318569, -0.016666151583, -0.000918202102, -0.016362149268, 0.002796038985, 0.032325416803, 0.026999026537, -0.067615352571, 0.065852254629, -0.071023218334, -0.051248215139, -0.017706688493, -0.065263137221, -0.070082746446, 0.070015907288, -0.040443491191, -0.056392475963, 0.004053138196, 0.004983328283, -0.012077517807, 0.047460973263, 0.038351558149, -0.024962481111, 0.045975565910, -0.066925823689, 0.069743067026, 0.024949558079, -0.056124486029, -0.020234100521, -0.048142276704, -0.012481611222, -0.014292597771, 0.015959687531, 0.044553592801, 0.043950937688, 0.059636846185, 0.032646022737, 0.015476502478, 0.006287194788, -0.003382928669, -0.011343874037, 0.055694222450, -0.055002130568, 0.055725723505, 0.071148499846, 0.056349322200, -0.064125612378, 0.029428742826, -0.071203932166, -0.020704969764, 0.032060936093, -0.043416559696, 0.056897982955, -0.047436248511, 0.008512921631, 0.001739911735, 0.032904498279, 0.029768064618, 0.065695405006, -0.009485431015, 0.048053421080, 0.020178712904, 0.033700928092, -0.037980552763, -0.015670415014, -0.039956498891, 0.030638381839, -0.037473753095, 0.069205582142, 0.068522304296, -0.014863919467, -0.063351616263, 0.055939316750, -0.034154281020, -0.023604363203, 0.011768512428, -0.043663095683, -0.036106258631, -0.018310789019, -0.004969663918, -0.019087035209, 0.066553071141, 0.014321230352, 0.003695964813, -0.005695775151, 0.029936015606, -0.040319312364, 0.028121329844, 0.057918190956, -0.055074088275, -0.061237622052, -0.008446849883, -0.020931251347, 0.064798399806, 0.033440135419, -0.006533831358, 0.031466335058, 0.050518080592, 0.016753248870, 0.069062560797, -0.024263143539, 0.053595706820, 0.000797845423, 0.020602867007, -0.012282017618, 0.009611807764, 0.037612974644, 0.014560326934, 0.060891598463, 0.063174232841, 0.013203985989, -0.048040159047, 0.024090290070, -0.038079436868, -0.064179822803, 0.044647902250, -0.011164531112, -0.027035161853, -0.013544104993, -0.005205325782, -0.002664610744, -0.054577805102, 0.032967522740, 0.029131703079, 0.070486649871, 0.001741632819, -0.062060773373, 0.027462929487, -0.033340472728, -0.048699472100, 0.002078756690, 0.055559143424, -0.065665818751, -0.014262624085, -0.032076939940, 0.012414351106, -0.050167277455, 0.060011342168, -0.010407861322, -0.032082274556, -0.024378582835, 0.056968271732, 0.007066920400, -0.008148252964, -0.051142551005, -0.011154085398, 0.023125030100, -0.015204813331, 0.053935378790, 0.071621179581, -0.063054375350, 0.031199775636, 0.015968084335, 0.067440450191, -0.054988231510, 0.019166186452, 0.006229743361, 0.023848660290, -0.039635770023, -0.012750785798, -0.001289740205, -0.048426769674, 0.031323194504, 0.011525362730, 0.036558084190, 0.018367603421, 0.046170011163, 0.041877932847, -0.001571752131, -0.058562751859, 0.043067671359, 0.002373553813, 0.027824088931, -0.033522773534, -0.002853110433, 0.016062811017, 0.021863631904, -0.041403569281, -0.054955985397, 0.024947181344, -0.067443586886, -0.022099770606, 0.012912683189, 0.033853791654, -0.059307962656, -0.030601199716, 0.038925282657, -0.007519483566, -0.014401670545, -0.022255297750, 0.056438058615, 0.053266033530, 0.038299456239, -0.065245106816, 0.018150925636, -0.022196453065, 0.052906915545, -0.034874696285, -0.071989543736, 0.071749016643, 0.027233995497, -0.048629235476, -0.067439869046, -0.016673512757, 0.053479373455, 0.029369756579, 0.061132028699, 0.065572887659, -0.067100539804, -0.046541601419, 0.058351874352, -0.052206698805, 0.039146281779, -0.022371768951, 0.051226489246, -0.048449650407, -0.057836178690, -0.028130572289, -0.039618100971, -0.034632429481, -0.015855934471, -0.024429287761, -0.012549661100, 0.006107695401, 0.006057456136, 0.044410005212, 0.036778256297, 0.039815247059, 0.027190171182, 0.020455218852, -0.045935921371, -0.017995409667, -0.065734371543, 0.038804359734, -0.018882211298, -0.044730111957, -0.006184265018, 0.009215801954, 0.043682433665, 0.021641358733, -0.051933959126, -0.013631582260, -0.012419838458, 0.061863094568, -0.039190143347, 0.037270292640, 0.013803526759, 0.032739818096, 0.008517161012, -0.023421633989, 0.050958737731, -0.031761616468, -0.046364892274, -0.030411500484, -0.013948954642, 0.064464315772, 0.029480546713, -0.005709335208, 0.029500029981, -0.030506167561, -0.069438904524, -0.060409717262, -0.023017711937, -0.053675539792, 0.034608684480, 0.058630540967, -0.047380946577, 0.028186678886, -0.001919046044, -0.053911868483, 0.058950826526, 0.049197562039, 0.042743153870, -0.027397405356, -0.009492173791, -0.058496385813, 0.032266572118, -0.018719147891, 0.072065830231, 0.065956562757, -0.025493778288, 0.054294854403, -0.065127655864, 0.038637682796, 0.023701667786, -0.063162721694, 0.008803077042, -0.034162867814, -0.045120045543, 0.028220199049, -0.065324425697, 0.054968610406, 0.017254866660, 0.044423840940, 0.032881408930, 0.057176008821, -0.057919215411, 0.002705737948, -0.032327275723, 0.063252493739, 0.047093391418, -0.026959471405, -0.066203385592, -0.037078730762, -0.032777566463, 0.001873239875, -0.018430717289, -0.061202365905, 0.024634905159, -0.010532334447, 0.071353644133, -0.047611597925, -0.008024729788, 0.010922335088, -0.070114202797, -0.052779328078, 0.043651357293, -0.031970843673, -0.049249146134, 0.009266734123, -0.069155067205, -0.071322627366, 0.006528891623, -0.044864840806, -0.020965784788, -0.050482001156, 0.047778189182, -0.022245645523, -0.016080461442, -0.053865619004, 0.064345642924, -0.025404803455, -0.061657335609, 0.056115478277, 0.022577419877, -0.035962399095, 0.046194255352, -0.043065309525, -0.032805114985, -0.053971763700, -0.008147858083, 0.046260982752, 0.014520443976, -0.071993120015, 0.011448450387, 0.020428307354, 0.070743665099, -0.055807460099, -0.016727231443, 0.018058493733, -0.065810196102, 0.034727737308, 0.012497730553, 0.070058509707, -0.066145792603, 0.055246412754, -0.061418563128, -0.009455658495, 0.064981251955, -0.024954084307, -0.045367456973, -0.031738627702, -0.017040353268, -0.051555421203, 0.000787809491, -0.065919563174, -0.027044557035, 0.033756129444, -0.020732466131, -0.059315927327, -0.064594760537, -0.018780142069, -0.069963991642, 0.033870689571, 0.061681360006, -0.008286967874, -0.032244063914, -0.002226591110, -0.029177252203, 0.058164060116, 0.006888180971, 0.032644838095, -0.070568434894, -0.025075681508, -0.059629391879, 0.031108081341, -0.035568699241, 0.050239749253, 0.010276012123, -0.032061867416, 0.033245116472, -0.059900134802, 0.056778222322, -0.010946903378, 0.041550256312, 0.009410962462, 0.060309842229, 0.064233437181, 0.064159855247, -0.001462869346, 0.009332500398, 0.066926062107, -0.062611036003, 0.042936071754, -0.041285485029, 0.031884729862, -0.072024039924, 0.030510850251, 0.046223007143, 0.046263821423, -0.056702896953, 0.029833070934, -0.071913421154, -0.017013702542, -0.025922734290, 0.012971803546, 0.025703541934, 0.034679040313, -0.052377521992, 0.034500166774, 0.028117187321, 0.047319985926, 0.016610145569, -0.062325924635, -0.022484935820, -0.018624268472, 0.025566868484, 0.068561688066, -0.030345082283, 0.018760576844, -0.051737636328, 0.014022096992, 0.069422230124, -0.006334356964, 0.052108861506, -0.059429608285, 0.042866557837, -0.049497485161, 0.049909420311, -0.035294152796, -0.045514039695, 0.018139913678, 0.007866173983, -0.054598078132, 0.063576757908, 0.035732381046, -0.068807877600, 0.035897344351, -0.038146145642, -0.045587420464, -0.008316963911, -0.022919256240, -0.066386751831, 0.017963975668, 0.039898701012, -0.019737180322, -0.046608965844, -0.050216816366, -0.022243991494, -0.011078171432, -0.019632082433, 0.069595351815, 0.057543590665, 0.028743274510, 0.039573468268, -0.002271018922, 0.023831456900, 0.023567162454, 0.027945294976, 0.021779745817, 0.012955419719, 0.024907521904, -0.030727427453, -0.021135695279, -0.003876283765, -0.004567205906, 0.009838730097, -0.058170534670, -0.050603322685, -0.014786764979, -0.021369531751, -0.045953176916, 0.046031728387, 0.069062232971, -0.047641828656, 0.007814086974, 0.058066174388, 0.047268092632, 0.016686387360, -0.062409926206, 0.039335623384, -0.006847023964, -0.012240532786, 0.034823045135, 0.028926931322, 0.070658802986, -0.036791693419, -0.032713420689, 0.018626041710, -0.047873236239, -0.020836684853, 0.018943704665, 0.013552121818, 0.043385624886, -0.069576524198, -0.070357516408, 0.065259769559, 0.001471579075, 0.013463683426, 0.056026533246, -0.007471784949, -0.040281422436, -0.063397765160, -0.030480016023, 0.055137410760, -0.021661899984, 0.062082856894, 0.028068609536, -0.024476934224, -0.003174044192, -0.003779105842, 0.042320601642, 0.052364826202, 0.036423735321, 0.002341911197, 0.019860357046, -0.071502484381, -0.067718319595, 0.043677255511, -0.057470127940, -0.035546779633, 0.032254971564, 0.057351127267, -0.070913322270, -0.029314782470, 0.038186565042, 0.065215513110, 0.057947799563, 0.004299171269, -0.037527110428, 0.051999032497, -0.044038899243, 0.010176934302, -0.012125127017, 0.047232814133, -0.046597726643, 0.039708085358, -0.044319003820, 0.071056872606, 0.015597395599, -0.045819554478, 0.021904923022, -0.038995571434, 0.015231169760, 0.002461835742, 0.051742434502, 0.047936141491, 0.060812354088, 0.049246579409, -0.032565686852, -0.014775201678, 0.026398211718, -0.033482305706, -0.055414088070, -0.063340589404, -0.055964469910, -0.014172602445, 0.046205423772, 0.033699154854, 0.001912303269, 0.036650791764, 0.022326879203, 0.056457564235, 0.035490907729, -0.046340286732, -0.038501337171, -0.009968739003, 0.003252178431, 0.015642546117, -0.019027192146, 0.019273482263, -0.026019796729, -0.064912505448, -0.002109572291, -0.064621806145, -0.056152120233, 0.044409543276, -0.031004395336, 0.023914955556, -0.009657561779, 0.024376757443, -0.047943715006, -0.063977479935, 0.065714538097, -0.041168756783, 0.009355917573, -0.017350465059, -0.008314378560, 0.037927590311, 0.046942666173, -0.071084886789, -0.048696599901, -0.010092109442, 0.020219355822, -0.071555308998, 0.013405732810, -0.069446563721, 0.059098556638, 0.070621654391, -0.002205975354, -0.036426454782, -0.004766218364, 0.005280531943, 0.042398169637, 0.028915300965, 0.006979562342, -0.037488088012, -0.002027481794, 0.056121870875, 0.041531726718, -0.026451539248, -0.068323433399, 0.048240557313, -0.068029202521, 0.051609963179, 0.003354810178, 0.037921033800, -0.033597018570, 0.030021622777, 0.057641461492, -0.039761275053, -0.061093240976, 0.008841276169, -0.061934102327, 0.029211282730, -0.059567380697, -0.011825066060, 0.044654890895, 0.071904644370, -0.054750163108, -0.018418017775, 0.063286349177, -0.028738748282, 0.072061792016, 0.007485270500, -0.025050681084, -0.039421636611, 0.037918157876, 0.022936411202, -0.039232917130, -0.019771847874, -0.000083573163, -0.023021772504, -0.039404310286, 0.031474821270, -0.013064872473, 0.014311045408, -0.034612335265, 0.067276924849, -0.041944298893, 0.033356867731, -0.035070523620, -0.069649748504, 0.053415134549, -0.010031629354, 0.042380772531, -0.064110830426, 0.029094249010, 0.066453754902, 0.057882755995, 0.001608729362, -0.034151066095, -0.045858267695, -0.021816361696, -0.035209737718, -0.044080764055, 0.025108978152, -0.012517485768, 0.053615868092, 0.012490212917, 0.040839478374, -0.038200672716, -0.005688220263, -0.028595522046, -0.013523232192, 0.032578885555, -0.040465738624, -0.005757786334, 0.025301635265, -0.007087804377, -0.025200288743, 0.048511698842, 0.003481782973, -0.024444345385, 0.046851195395, -0.037698712200, 0.017193630338, -0.027904994786, 0.010293729603, 0.036757782102, -0.019817169756, -0.070313692093, 0.026132568717, -0.071804642677, -0.024755675346, 0.018512889743, -0.065765634179, 0.049960613251, -0.042017221451, 0.027642078698, 0.000647678971, -0.020126592368, -0.071105100214, 0.006863936782, -0.063869282603, -0.053820535541, -0.022536244243, -0.001302130520, 0.061623677611, -0.065815724432, -0.049351077527, -0.000629477203, 0.021747484803, -0.035489272326, -0.035183500499, -0.067725233734, 0.017496012151, -0.031565599144, 0.016012705863, -0.026963084936, 0.035416543484, 0.060983985662, -0.049357183278, -0.054531455040, -0.008217558265, 0.025357797742, 0.018951036036, -0.007084004581, -0.012348260731, -0.070333942771, 0.016363643110, 0.001744002104, -0.029700789601, 0.065475001931, -0.041322443634, 0.025698520243, 0.056602597237, -0.020981147885, 0.070802778006, 0.037006191909, 0.003082178533, -0.066949933767, 0.041485197842, -0.061805739999, -0.070211708546, -0.048377230763, 0.025837890804, 0.061406254768, 0.010229274631, 0.065197244287, 0.050364911556, 0.014757893980, -0.002454817295, -0.010870438069, 0.005845263600, -0.002124674618, -0.046135634184, 0.015535570681, 0.053774952888, 0.051154270768, -0.047799456865, 0.022971957922, -0.032863650471, -0.030566547066, 0.046956293285, -0.021280057728, -0.020445410162, 0.037280358374, -0.069865584373, -0.044690094888, -0.047093048692, -0.023625925183, -0.035813529044, -0.038682416081, -0.032321874052, 0.059135958552, -0.039767280221, -0.002617366612, 0.010562874377, 0.042283095419, 0.069260299206, -0.007950499654, -0.012858565897, -0.071177899837, -0.030775602907, 0.002382017672, 0.024445585907, -0.046083740890, -0.063973128796, -0.060414452106, -0.044956341386, 0.062372758985, -0.040432251990, -0.065938092768, -0.044098109007, 0.058450594544, 0.006186418235, 0.033823765814, 0.054891526699, -0.012635521591, 0.070343732834, 0.008293323219, 0.051673144102, -0.060145944357, 0.054420977831, 0.048184417188, -0.011611878872, -0.022838182747, 0.036371499300, 0.064269036055, 0.010604098439, 0.012518532574, -0.003120183945, -0.035652615130, -0.046886764467, -0.020433280617, -0.066232480109, 0.053786739707, -0.008576378226, -0.023865934461, -0.020035073161, 0.034816622734, -0.054233372211, 0.013858295977, 0.010313883424, 0.043824128807, -0.052536286414, 0.070312649012, 0.025771610439, -0.039995040745, -0.028629004955, -0.057817026973, -0.068495929241, 0.006168760359, -0.036917094141, 0.065862238407, 0.038652718067, -0.017900932580, -0.018629845232, -0.058978889138, 0.049895249307, 0.028530187905, -0.037543594837, 0.045247197151, 0.057969644666, 0.034493729472, -0.001569017768, 0.012395046651, -0.025547843426, -0.026603970677, 0.015543207526, -0.053168259561, -0.033851072192, -0.058227449656, -0.050015449524, -0.004429079592, -0.004344366491, 0.031617529690, 0.019237972796, 0.036960095167, -0.046057637781, -0.000161275268, -0.058172184974, -0.002454593778, 0.000344589353, -0.055542998016, 0.005192197859, -0.069562621415, 0.027913324535, 0.021495826542, 0.024997428060, 0.064324140549, 0.003458552063, 0.058376371861, -0.051224611700, 0.019619487226, -0.005346879363, 0.070596188307, -0.044847980142, -0.030545830727, 0.001403659582, -0.057479836047, -0.011372864246, 0.047423824668, -0.029981769621, 0.060068503022, 0.004177190363, 0.026108443737, 0.012836061418, -0.003630235791, -0.044557001442, 0.047980435193, -0.071767009795, 0.031790554523, 0.014918684959, 0.041608154774, 0.006598494947, -0.071779869497, -0.051114745438, -0.046944145113, -0.046682402492, 0.032223850489, 0.064948439598, -0.064579874277, 0.066426590085, 0.059326961637, -0.012310579419, -0.000869266689, -0.001001700759, -0.046612270176, -0.070916637778, 0.033896304667, 0.028333552182, -0.000558674335, 0.005321912467, -0.004324547946, 0.007593572140, 0.000526167452, -0.048305533826, 0.014396041632, -0.060705721378, -0.064769297838, 0.054748669267, 0.032022088766, -0.040845170617, 0.048289462924, -0.020191736519, 0.042812839150, -0.046669498086, -0.071128830314, 0.020857557654, -0.034276638180, 0.036321893334, -0.026209287345, -0.009026274085, 0.051658347249, -0.022058438510, -0.030521981418, 0.002550862730, 0.049765840173, 0.014050692320, -0.002787247300, -0.021546032280, 0.057030826807, -0.019340984523, -0.038654576987, 0.017499245703, 0.039865821600, 0.033949919045, -0.049018304795, -0.027700822800, 0.071102738380, 0.000485733151, 0.013245105743, -0.044192619622, -0.039946433157, 0.062588065863, -0.065568119287, 0.036210998893, -0.032052937895, 0.044891558588, -0.062005527318, -0.052052564919, -0.058885026723, -0.026514910161, 0.044760465622, 0.070229247212, -0.041564844549, 0.016283944249, 0.025822423398, -0.028487842530, -0.070516072214, -0.036954756826, 0.015365280211, 0.033272176981, 0.014754660428, 0.065116748214, 0.015878736973, -0.012287367135, 0.025559127331, 0.069862246513, 0.033180713654, -0.049824614078, -0.063553065062, 0.036619059741, -0.050235711038, -0.071466557682, 0.038070403039, 0.005754828453, 0.038247816265, -0.047804825008, -0.002356894314, 0.019732706249, 0.064141064882, 0.004444852471, 0.026771955192, -0.039817556739, 0.015534609556, -0.059474330395, 0.070844590664, 0.049600951374, -0.002079628408, -0.008437782526, -0.047437213361, 0.003037422895, 0.009009502828, 0.052114956081, -0.018089152873, 0.012539424002, 0.058455243707, 0.029280923307, -0.026359707117, 0.026997238398, -0.046649917960, -0.010842807591, 0.008036792278, 0.063933953643, 0.025962203741, 0.017093472183, -0.005975119770, -0.043000943959, 0.065721884370, -0.048113092780, -0.067056678236, 0.035200461745, 0.008184142411, -0.032622501254, -0.041691809893, 0.038557603955, -0.006626039743, 0.009985119104, -0.012362904847, -0.013980008662, -0.021489474922, 0.048912383616, -0.005442105234, -0.068830728531, -0.055360283703, 0.058102712035, 0.036520197988, -0.036702856421, -0.018812749535, 0.009422473609, 0.059123545885, -0.069806963205, -0.031045071781, 0.000532262027, -0.030985847116, -0.013284511864, 0.044033534825, -0.061934549361, 0.025977879763, 0.003826424479, 0.011908106506, 0.035308539867, -0.023732412606, 0.015232771635, 0.067580714822, 0.051437884569, 0.028412774205, 0.010249927640, -0.021682668477, 0.037202619016, -0.032138451934, 0.029785253108, 0.004806600511, 0.050728105009, 0.002088442445, 0.040081501007, 0.042328946292, 0.058852046728, 0.026323914528, -0.056663975120, 0.051381930709, 0.003217369318, 0.060931488872, -0.007489211857, -0.058291409165, -0.003554098308, -0.022288523614, -0.020919840783, -0.022886220366, 0.017037481070, -0.067547254264, 0.004178464413, -0.019227527082, -0.034784190357, 0.024176940322, -0.048451509327, 0.010606765747, -0.044174246490, -0.065771609545, 0.018810525537, -0.052690371871, 0.003902271390, 0.008404366672, 0.062217250466, 0.069223120809, 0.009681791067, 0.024487465620, 0.044054627419, -0.060385905206, -0.068223804235, 0.031275384128, 0.012365363538, -0.009338676929, -0.033460952342, -0.000525534153, -0.028161626309, 0.033376365900, 0.048792213202, -0.050462469459, 0.017444826663, 0.016686245799, 0.068980649114, 0.001155063510, 0.018805950880, 0.039872050285, 0.037008956075, -0.031117528677, -0.044345416129, -0.072078414261, 0.005894646049, -0.066796965897, 0.000906601548, 0.021409951150, 0.034584149718, 0.028134942055, 0.027234137058, 0.017495118082, 0.041333436966, 0.054767310619, -0.010570582002, -0.061786092818, -0.032074082643, 0.007589630783, -0.009066402912, -0.031927365810, -0.021528001875, -0.039660342038, -0.026910413057, -0.026709288359, 0.044502042234, 0.067379832268, -0.045608051121, -0.053604990244, 0.008118912578, 0.043123655021, -0.012597493827, 0.033280111849, 0.015727624297, 0.018416091800, -0.040509786457, 0.012444682419, -0.024647895247, -0.031164657325, 0.048182725906, 0.064360976219, 0.054308876395, 0.053816929460, -0.015830144286, -0.059132885188, -0.029246352613, -0.071943670511, 0.006355039775, -0.025038532913, -0.047908786684, 0.045673593879, 0.013245180249, 0.049180753529, -0.035681158304, 0.004890382290, -0.034283693880, -0.002703741193, -0.021492626518, -0.012529872358, -0.056095823646, -0.051085546613, 0.016807742417, -0.019848659635, -0.000664249063, -0.051038008183, 0.048701487482, -0.031825553626, 0.028112143278, 0.024179674685, 0.049541138113, -0.043644838035, -0.040284655988, -0.038040686399, -0.035484369844, 0.030627712607, 0.033563569188, 0.059078410268, -0.037011831999, -0.037144303322, 0.035884283483, -0.020431783050, -0.046827346087, -0.031302548945, 0.006765894592, -0.048847325146, 0.020937494934, -0.043926402926, -0.009921681136, -0.002273201942, 0.058454647660, -0.014225561172, -0.050546094775, 0.039879396558, -0.006500087678, 0.007188551128, 0.048312358558, 0.064200565219, -0.004042364657, -0.071401998401, 0.025298140943, -0.016572821885, 0.015641063452, 0.032413959503, -0.061208903790, 0.017333343625, -0.023115787655, 0.069532245398, -0.032933540642, -0.063463762403, 0.004466600716, 0.024736471474, 0.045938380063, 0.012082062662, 0.044915616512, 0.042226016521, -0.007335752249, 0.037102490664, 0.031095519662, 0.065892890096, -0.040010403842, 0.036628216505, -0.005385197699, -0.033003848046, 0.013445973396, -0.067889608443, 0.037871569395, -0.030675515532, -0.060549385846, -0.071874350309, 0.053643658757, 0.041181348264, -0.035568218678, -0.045857183635, 0.070697873831, 0.023986309767, -0.044609874487, -0.010234165937, -0.044487386942, 0.036733590066, 0.019430838525, -0.034037642181, -0.000591449440, 0.033300362527, -0.015683647245, -0.030765023082, -0.025056101382, -0.026494812220, 0.000670224428, 0.016375124454, -0.041485145688, 0.040975078940, 0.065514579415, -0.006443597376, 0.020122811198, -0.053724803030, 0.013055235147, 0.045211344957, 0.048173829913, 0.028584890068, -0.060976341367, 0.003489211202, 0.045843489468, -0.019068315625, 0.065765768290, -0.007721863687, -0.059882275760, -0.047745585442, 0.043287307024, 0.048243552446, -0.042146731168, 0.056140333414, -0.012147601694, -0.041432254016, -0.000600725412, -0.019997511059, 0.046007037163, 0.011874429882, -0.010942105204, 0.019289970398, 0.019206501544, 0.044895432889, 0.070966660976, 0.009043604136, 0.018364973366, 0.012641645968, -0.001970440149, 0.034284055233, -0.002670705318, 0.071740120649, 0.020049646497, 0.064225748181, -0.054315149784, -0.042546659708, -0.059270001948, -0.042499531060, 0.020246520638, -0.016164995730, 0.030723258853, 0.025500610471, 0.048023536801, -0.023418724537, -0.020698256791, 0.048843763769, 0.068138256669, -0.000451199710, -0.026515785605, 0.066687092185, 0.066087216139, -0.063322864473, 0.046823255718, 0.057478547096, -0.000255391002, 0.018743716180, 0.058835208416, -0.029563240707, 0.066693201661, -0.042795397341, 0.034870602190, 0.002863913774, 0.013188481331, 0.016083665192, -0.053023107350, -0.046279564500, -0.068065389991, 0.053926959634, -0.029093887657, 0.035088293254, -0.023414269090, 0.029465317726, -0.047729566693, -0.004995696247, -0.071217730641, 0.032032892108, -0.018900897354, -0.031587537378, -0.065463647246, 0.017113804817, -0.034268707037, 0.042623363435, -0.041972603649, -0.032133877277, 0.011158816516, 0.030345343053, 0.033099979162, -0.059632316232, 0.061652705073, 0.029909297824, -0.061370112002, 0.022352494299, 0.058023765683, -0.009346060455, -0.004971645772, -0.069558605552, 0.057215273380, 0.009409584105, 0.054605886340, -0.065864451230, -0.028712525964, -0.030705403537, -0.044698163867, 0.041406683624, 0.005491673946, -0.016462445259, -0.017776083201, -0.060840375721, -0.000438593328, 0.025038689375, -0.010442413390, 0.011566452682, -0.004764035344, 0.028089724481, 0.068932548165, -0.070050783455, -0.005333475769, -0.048096522689, 0.056992754340, -0.067676007748, -0.000014387071, -0.050582796335, -0.066937528551, 0.044313251972, 0.068526059389, 0.044600501657, 0.016563341022, 0.009314775467, -0.039732400328, -0.059420302510, -0.025187540799, -0.066011339426, -0.028519950807, 0.050861351192, 0.046263098717, -0.021013770252, -0.021289486438, 0.070323884487, -0.028939116746, -0.014207012951, 0.040572695434, 0.060120344162, 0.036037057638, 0.052422948182, -0.034708257765, -0.012357603759, 0.000092707574, 0.021341569722, 0.066965356469, -0.067891538143, -0.017337527126, 0.066396862268, -0.027451261878, 0.018083319068, 0.035741694272, -0.061906121671, 0.022684767842, 0.043189734221, -0.039533291012, -0.020029876381, -0.019791122526, 0.035192690790, 0.026061467826, -0.068260475993, 0.071471974254, -0.023797575384, 0.047576569021, -0.003089852631, -0.062251612544, -0.002131097019, -0.065892718732, -0.039259467274, -0.065222673118, 0.041743069887, -0.017333500087, 0.020221695304, -0.012245744467, 0.037762962282, -0.048178669065, 0.034821256995, 0.050937384367, -0.025238644332, 0.014867655933, 0.024633146822, 0.062220409513, 0.002503633499, 0.024182014167, 0.056356579065, 0.031237147748, -0.011982399970, -0.028572309762, -0.005143776536, 0.039187923074, -0.054242506623, 0.019521981478, 0.009701058269, 0.019322007895, 0.006995372474, 0.006462253630, -0.000212863088, -0.009171739221, 0.047940909863, -0.038901727647, 0.053666695952, -0.026245251298, 0.043110892177, -0.043306957930, 0.007101349533, -0.048472363502, 0.034839473665, -0.033301740885, 0.005496248603, -0.048972450197, 0.027763366699, -0.026342846453, -0.033089794219, 0.057403013110, 0.024300895631, 0.025282450020, 0.063174530864, -0.062907606363, 0.044824317098, -0.050830326974, -0.072110347450, 0.044893302023, -0.036633498967, 0.002303212881, 0.037553623319, 0.067616701126, -0.018804367632, -0.057547576725, 0.026080049574, 0.009792841971, 0.045195683837, 0.065058887005, 0.060886502266, 0.009176693857, -0.018429096788, -0.044055983424, 0.047628410161, 0.049999535084, 0.042550586164, 0.047728598118, 0.069442495704, -0.042606364936, -0.005469016731, 0.049000099301, 0.016381829977, -0.068493708968, -0.015623494983, -0.040569990873, -0.067427739501, 0.027373418212, 0.059783607721, 0.069240435958, 0.056827098131, 0.035856753588, 0.058523803949, -0.020016696304, -0.001327246428, -0.018104791641, 0.029109083116, -0.065753042698, 0.031299397349, 0.046863034368, 0.062449678779, -0.041935779154, 0.054946243763, 0.050763167441, -0.034907493740, 0.055562257767, -0.060894079506, -0.050601415336, -0.035271354020, 0.030214644969, -0.003588251770, -0.046886488795, 0.066416978836, -0.011390157044, 0.054934903979, 0.035950802267, 0.050035133958, -0.045419640839, 0.017541989684, -0.059551998973, -0.051095992327, -0.051980659366, 0.059153378010, 0.059719011188, -0.045563951135, 0.029271163046, 0.047218225896, -0.037758607417, -0.033062022179, 0.012110553682, -0.063067123294, -0.039788957685, -0.068604260683, -0.060106698424, -0.002490557730, -0.038766108453, 0.060620754957, -0.069703213871, 0.047209553421, 0.059901207685, -0.038378294557, 0.052039042115, 0.063733085990, -0.014265291393, -0.054378762841, -0.029947839677, -0.055627912283, 0.060101702809, -0.068132631481, 0.040113814175, -0.053517431021, 0.003465399146, -0.020346131176, 0.034654699266, 0.059394761920, -0.045530933887, 0.061957836151, -0.049832511693, -0.039787203074, 0.070313334465, -0.030856370926, 0.014529757202, -0.016289692372, 0.018699705601, -0.017490163445, 0.017783068120, 0.001886367798, 0.021501794457, -0.032746165991, -0.035757210106, -0.062200162560, 0.000633381307, 0.015008591115, 0.046903282404, 0.063754335046, 0.061193957925, 0.001693107188, 0.043338753283, 0.071105614305, 0.005200751126, -0.063667699695, -0.015661984682, 0.064754471183, 0.048007428646, 0.059669300914, -0.067086361349, -0.015769131482, -0.055212259293, -0.006448246539, 0.071631237864, -0.043859489262, 0.003185227513, -0.018225099891, 0.041613161564, -0.019973199815, 0.030323557556, -0.056266576052, 0.036166600883, -0.049498535693, 0.016985706985, 0.019466660917, -0.002117678523, -0.018874693662, -0.059393424541, 0.048769928515, -0.038701325655, -0.046765267849, -0.039228100330, 0.005083486438, -0.036820273846, -0.063939109445, -0.070040628314, -0.024313628674, 0.059821635485, 0.049760863185, -0.051583744586, 0.033284224570, 0.032064035535, -0.055080041289, 0.028761684895, -0.038828566670, -0.003350824118, 0.006983429193, 0.004182718694, -0.010675285012, -0.060582850128, -0.030576940626, 0.028370633721, -0.059751231223, -0.036986798048, 0.040889889002, 0.010792978108, 0.065359994769, 0.067590326071, -0.002704925835, -0.051287326962, -0.021851018071, 0.002185523510, 0.002347692847, -0.060823619366, 0.036565259099, 0.064276352525, 0.055525809526, 0.015359908342, 0.033468402922, -0.024443052709, -0.043378293514, 0.010897330940, -0.066070929170, 0.047226481140, 0.067709475756, -0.045363653451, -0.031995311379, 0.021301582456, 0.053154170513, -0.050339154899, -0.045545835048, 0.015544481575, -0.021793015301, 0.071723043919, -0.069772109389, 0.071655660868, 0.055103644729, 0.022216513753, -0.037413015962, 0.050833523273, 0.017961531878, -0.063885182142, -0.033231299371, -0.047752670944, -0.041896931827, 0.035022258759, -0.031234238297, 0.011533126235, 0.062846228480, 0.063324168324, 0.004131421447, 0.023953549564, -0.038926318288, 0.034795202315, -0.070317924023, 0.055127844214, -0.063518255949, -0.066970407963, 0.001476548612, -0.023641701788, -0.012444030493, -0.005680583417, 0.001173064113, -0.068324483931, 0.047989331186, 0.017143711448, -0.037192482501, 0.025171622634, 0.053892374039, 0.035496570170, 0.019675925374, 0.062019586563, 0.016177386045, -0.059407673776, -0.064856074750, -0.025136109442, 0.005613870919, 0.010105498135, -0.000825025141, -0.032265093178, 0.053518131375, 0.027331523597, -0.013633627445, 0.054831072688, 0.015364728868, 0.028001382947, -0.058412436396, -0.047669962049, -0.034887634218, -0.023202713579, 0.013076126575, 0.064323171973, -0.009988252074, 0.012964852154, 0.031652167439, -0.000296086073, 0.022194832563, -0.047094754875, 0.027619816363, 0.053804606199, 0.038194894791, 0.013464063406, 0.041920743883, 0.065099805593, 0.052632816136, 0.044381201267, 0.022931769490, -0.057045303285, 0.062680304050, 0.005725130439, 0.041047468781, 0.034491769969, 0.019772246480, 0.014506563544, -0.048583138734, 0.028480634093, 0.043225571513, 0.070995047688, 0.033578418195, 0.066736504436, -0.005785576999, -0.007186397910, 0.036775209010, -0.024971168488, 0.045970968902, 0.050366595387, 0.071306169033, 0.064465910196, 0.057365655899, -0.014421232045, 0.056199982762, -0.069767370820, 0.015476725996, 0.069079324603, -0.008098199964, -0.014016386122, -0.036884263158, 0.043022453785, -0.018070258200, -0.014592334628, -0.057321913540, 0.028304167092, 0.026844218373, 0.056256398559, 0.056494191289, 0.030343674123, -0.048564523458, -0.036594111472, 0.003599129617, 0.060374632478, 0.030810564756, 0.040515191853, 0.066459313035, -0.019238177687, -0.068328075111, 0.065711751580, 0.070302739739, -0.012750443071, 0.030818670988, 0.029422871768, -0.054024279118, 0.057242870331, -0.002117142081, 0.063669711351, 0.009209558368, 0.066228121519, -0.065949141979, 0.037382476032, -0.002480469644, 0.059804290533, 0.004907548428, 0.070706993341, -0.054889086634, -0.006078585982, -0.058356102556, 0.030084148049, 0.041578993201, -0.011911820620, 0.023146040738, -0.015311524272, 0.018120877445, 0.014706842601, 0.065694317222, -0.044005382806, 0.048542529345, -0.020503912121, 0.055866286159, -0.052129615098, 0.024053536355, -0.033685926348, 0.002421192825, -0.066898450255, 0.029948681593, -0.045321427286, -0.071134902537, -0.047717314214, 0.044889807701, 0.071064993739, -0.039700828493, -0.042976081371, -0.067706309259, -0.001490488648, 0.070624440908, 0.021743133664, 0.015421353281, 0.058521986008, 0.046582862735, 0.016362421215, 0.063913077116, -0.019901741296, -0.034361533821, 0.034358777106, 0.041370652616, -0.056782890111, -0.041659981012, 0.017039582133, 0.030266880989, -0.033503778279, -0.033449821174, -0.029843620956, 0.018197566271, -0.045495953411, -0.060647822917, -0.033151686192, 0.054554745555, 0.066912874579, 0.027334652841, -0.016010258347, 0.044559977949, -0.032155796885, 0.001041740179, 0.003030166030, 0.048455655575, 0.007635712624, 0.030869863927, 0.030871234834, -0.018161572516, 0.028016269207, -0.034793034196, 0.028562985361, -0.071974128485, 0.035227976739, -0.010934084654, 0.013543590903, 0.050036735833, 0.060206398368, -0.061756085604, -0.045217089355, 0.034059047699, 0.024193406105, 0.050902232528, 0.052452214062, 0.062914103270, 0.044078253210, -0.047552578151, 0.045482188463, 0.005339056253, -0.072139978409, 0.050131268799, -0.046537093818, -0.064383760095, -0.028362840414, -0.019080031663, -0.044891424477, -0.018003534526, -0.020460791886, -0.068373143673, -0.001965291798, 0.029223844409, 0.021748930216, -0.032123103738, 0.019342795014, 0.016794562340, -0.022472027689, -0.029866676778, 0.042555436492, 0.036084547639, -0.025215018541, 0.029219925404, 0.003247685730, -0.067830793560, 0.052350081503, 0.028752528131, -0.004063181579, -0.029745046049, -0.038794584572, 0.027071036398, 0.002949468791, -0.025442488492, 0.033820860088, -0.038621693850, -0.059451926500, 0.023275464773, -0.000879555941, -0.004488728940, -0.017758186907, -0.036153063178, -0.029076904058, 0.029438085854, -0.070145793259, 0.055894702673, 0.007825151086, -0.014149185270, 0.030736118555, -0.040728013963, 0.014275185764, -0.012758322060, 0.016369923949, 0.015295319259, -0.028565153480, -0.023196004331, -0.062326785177, 0.035452142358, -0.009630650282, -0.026735253632, -0.024185717106, -0.019312817603, 0.051728926599, -0.059008158743, -0.025674961507, 0.007996097207, -0.007676228881, -0.056875079870, 0.051866956055, -0.054294899106, -0.061407223344, 0.008952856064, 0.040780909359, -0.029989805073, 0.047303259373, 0.050827346742, -0.046005416662, -0.052180167288, 0.071198374033, 0.025105021894, -0.001158662140, -0.014581941068, -0.052091173828, 0.034547239542, -0.065580375493, -0.011730000377, -0.015015747398, -0.040768638253, -0.046651311219, -0.037244945765, 0.052943035960, -0.009277142584, 0.026305854321, -0.011587101966, 0.002427920699, -0.007349289954, 0.061619505286, 0.007771380246, 0.053623870015, 0.028246246278, -0.025058146566, -0.069783844054, -0.026904359460, -0.064731545746, 0.030212320387, -0.004959255457, -0.011078447104, -0.059583090246, -0.005031712353, 0.027330063283, 0.071594655514, -0.020278923213, 0.007474571466, -0.047336243093, 0.065539881587, -0.057492569089, -0.048890531063, 0.035048209131, -0.057151656598, 0.052505023777, -0.044255994260, 0.058063313365, 0.039797857404, -0.056280326098, -0.051084205508, -0.022056065500, -0.070245146751, -0.007146976888, 0.016638964415, 0.067674711347, 0.042135767639, 0.031085699797, 0.050813615322, 0.046402640641, 0.063993141055, -0.028341006488, -0.033799745142, -0.024030342698, -0.024245008826, 0.000137344003, 0.057084679604, -0.032305836678, 0.039975032210, 0.013032406569, 0.047916911542, 0.027182616293, -0.015136364847, -0.030887980014, -0.013635899872, 0.062283471227, 0.044150277972, -0.017738312483, -0.051728844643, 0.003495506942, 0.024278730154, 0.039822027087, 0.007280431688, -0.016625147313, -0.024292670190, 0.034903071821, -0.035317745060, 0.002794921398, -0.024882245809, -0.056000344455, 0.035336568952, 0.034179612994, 0.044370241463, 0.023555979133, -0.024411186576, -0.057116262615, 0.033850073814, 0.015178143978, -0.013398244977, 0.021902926266, -0.057475376874, -0.034361705184, 0.055023759604, 0.068390130997, -0.003944993019, 0.042298234999, -0.030192136765, -0.020524457097, -0.008790776134, 0.028708942235, -0.051520146430, -0.029860086739, 0.064150422812, -0.017318237573, -0.059648476541, -0.056162633002, -0.037078436464, -0.025346353650, 0.047865562141, 0.010877370834, 0.027429461479, 0.033468708396, 0.051736071706, -0.027238421142, -0.011710315943, -0.036059010774, -0.002168774605, 0.012425571680, 0.058443456888, 0.001624315977, -0.001975119114, 0.049244187772, -0.038057498634, -0.020969808102, 0.055573418736, 0.021035879850, 0.042623259127, 0.039416678250, -0.071226663888, -0.048765458167, 0.045147404075, 0.002906516194, 0.053884670138, 0.035109102726, 0.030537262559, 0.000893093646, -0.000435084105, 0.013664878905, 0.036213248968, 0.043726243079, 0.053376883268, 0.068544432521, 0.021053120494, 0.010427288711, -0.008187673986, 0.053456708789, 0.040524087846, -0.060872949660, -0.059386748821, 0.043570287526, -0.009242437780, 0.016667529941, -0.054236724973, -0.045748837292, -0.008488215506, 0.026053935289, -0.038122106344, 0.017409294844, 0.061179846525, -0.004515662789, 0.012976758182, 0.029922872782, 0.064176082611, 0.004108250141, -0.020717389882, 0.012299478054, 0.067714855075, 0.013841755688, -0.037860553712, 0.024092391133, 0.024433352053, 0.046592049301, -0.043803069741, 0.061492994428, 0.030194133520, 0.042952559888, -0.010729260743, -0.015371885151, 0.011186242104, 0.053030073643, 0.053128838539, -0.006548918784, -0.005750678480, -0.014187812805, -0.012303438038, -0.012882433832, 0.009280607104, -0.040344312787, 0.044264800847, -0.004035346210, -0.043677017093, -0.052061513066, 0.014476791024, -0.001889087260, -0.014012202621, 0.061333626509, -0.043760448694, 0.047459267080, 0.032258361578, -0.024750482291, 0.045463070273, 0.046040572226, 0.057775169611, 0.000875204802, 0.060313403606, 0.003470629454, 0.053162664175, 0.001875802875, 0.052695460618, -0.065033897758, -0.041561938822, -0.064118675888, -0.059425942600, 0.058735042810, 0.066072016954, 0.054664641619, -0.070474967360, 0.006708219647, -0.057108692825, -0.022393397987, 0.011537045240, -0.061227057129, 0.018484160304, 0.013666644692, 0.065753608942, 0.032461434603, -0.010732892901, 0.063246533275, 0.021503947675, -0.069089062512, 0.040849097073, 0.037042215466, -0.032386928797, -0.013516761363, -0.047530002892, -0.004477739334, -0.051810625941, -0.021310497075, -0.052660860121, -0.005083777010, 0.053384214640, -0.000730820000, -0.036399353296, -0.020950160921, 0.035057961941, -0.001550704241, -0.012581836432, -0.032632514834, 0.029964253306, 0.049412727356, 0.016208663583, -0.057893253863, -0.021347042173, -0.070237107575, 0.006806842983, -0.053369335830, 0.005616955459, 0.007668644190, 0.028126493096, -0.058969564736, -0.045046575367, 0.029972516000, 0.008358649909, 0.064961612225, 0.062081590295, -0.043749198318, -0.065198995173, 0.066778168082, 0.032188124955, -0.015275787562, 0.000565692782, -0.069411456585, 0.044843949378, 0.047170028090, -0.041341576725, -0.060681030154, -0.024189949036, -0.009787160903, -0.049178738147, 0.028464704752, 0.016623854637, -0.042096160352, 0.053739756346, 0.017033278942, 0.029202014208, 0.033328138292, -0.014548938721, -0.006290636957, -0.025629553944, 0.001021854579, 0.070083662868, -0.020834378898, -0.037545539439, 0.012542054057, -0.043845415115, 0.041953019798, 0.020438663661, -0.047695755959, -0.044447600842, -0.062223289162, -0.020155724138, -0.007547371089, -0.021357435733, 0.036727838218, 0.040508240461, -0.059599384665, -0.053375218064, -0.030685719103, -0.019331280142, 0.010591506958, 0.025955274701, -0.005820520222, 0.061514765024, 0.057623445988, 0.018995344639, -0.020916674286, 0.020132154226, -0.009964093566, -0.038528282195, -0.046627528965, 0.017810098827, 0.041674144566, 0.010051518679, -0.036004967988, -0.019728299230, 0.013883896172, -0.051819041371, -0.053933374584, 0.003646992147, 0.064604207873, 0.022021375597, -0.067808873951, -0.027458198369, -0.045367561281, -0.062236502767, -0.037320893258, 0.055968225002, -0.045924514532, 0.012444086373, 0.008038043976, 0.015996940434, -0.063861630857, -0.033107273281, 0.012958534062, 0.003977030516, 0.047243468463, -0.053660053760, -0.033738747239, -0.014045052230, 0.036255143583, -0.045306354761, 0.064029157162, 0.045617565513, 0.029072739184, -0.011068604887, 0.028161510825, 0.050605922937, 0.045434765518, 0.024464130402, 0.011718951166, 0.036341883242, -0.062379434705, 0.071068733931, 0.012692958117, -0.035192068666, -0.055239565670, -0.044468801469, 0.009210728109, -0.071642369032, -0.008793041110, 0.062513634562, -0.012803282589, 0.029486447573, 0.042801693082, -0.023344118148, 0.002514988184, 0.013722330332, 0.060292184353, -0.010448090732, -0.036661081016, 0.004000551999, 0.043145060539, -0.019395254552, -0.053179789335, -0.011655103415, -0.027053657919, -0.046033702791, -0.030096229166, 0.060166612267, 0.066612750292, 0.035591684282, 0.041890099645, 0.068829357624, 0.004434190691, 0.029427520931, -0.003301404417, 0.025325842202, 0.061215475202, -0.063962131739, 0.031590431929, 0.033182039857, -0.021586555988, -0.069966793060, -0.031711149961, 0.069137930870, 0.047219067812, 0.023452758789, -0.013033248484, 0.071855217218, 0.068576171994, 0.039193689823, 0.007433176041, 0.068930983543, 0.042351022363, 0.000501789153, 0.031679749489, -0.016398813576, -0.047783490270, 0.026068210602, 0.020932629704, -0.067572459579, -0.012586481869, 0.016584642231, 0.022261716425, 0.004847928882, -0.032477814704, -0.069613240659, 0.023494847119, -0.045924857259, 0.057005271316, -0.020186178386, 0.062190353870, 0.025178596377, 0.023664519191, 0.055594205856, -0.006871588528, 0.066267654300, -0.034381613135, 0.025824368000, 0.024129450321, -0.020571310073, 0.015423350036, 0.008347675204, 0.043059132993, -0.030017096549, 0.033442951739, 0.021337077022, 0.041802689433, -0.052265115082, -0.061266236007, -0.001391805708, 0.043523967266, -0.014733925462, 0.071025416255, -0.000375993550, -0.018678367138, -0.066705517471, -0.055293850601, -0.010393582284, 0.049987882376, 0.030231244862, -0.014801099896, -0.046372242272, 0.016249999404, -0.009563237429, -0.002841219306, -0.070055440068, 0.030388601124, -0.029631897807, -0.067183405161, -0.053989037871, -0.005161054432, -0.010020289570, -0.024494417012, -0.051580712199, -0.028619680554, -0.039724402130, -0.054733715951, 0.011663191020, -0.003283806145, 0.002919852734, 0.039221473038, 0.040841452777, -0.015124820173, 0.052916288376, -0.040151257068, 0.034229733050, 0.045748680830, -0.028859052807, -0.000661857426, 0.064908161759, -0.019251424819, 0.068231031299, 0.067995473742, 0.008663773537, 0.023958005011, 0.066613271832, 0.070674791932, -0.027058836073, -0.012876410037, -0.070176489651, 0.006136067212, 0.058783859015, -0.024335995317, -0.020562104881, 0.069431483746, 0.039459235966, 0.053952321410, 0.060545787215, -0.010960292071, 0.026794716716, 0.071566164494, -0.025312680751, -0.058317802846, -0.020210441202, 0.059781238437, -0.064008556306, 0.032424800098, 0.066627636552, 0.041265077889, 0.056970849633, -0.003549948335, -0.004885457456, 0.070008903742, 0.011347092688, 0.052259556949, -0.019790638238, -0.062377646565, -0.029095694423, -0.006515331566, -0.019569415599, -0.056762382388, 0.013885013759, 0.004549816251, -0.019951585680, -0.020095638931, -0.066274873912, -0.049488350749, -0.020191717893, -0.023679625243, 0.003679409623, -0.032012004405, 0.044930204749, 0.071082726121, 0.007081851363, 0.003619171679, -0.031074702740, -0.030330475420, -0.010569449514, -0.019193198532, -0.017731018364, 0.012828610837, -0.061150506139, -0.050378676504, 0.023589774966, 0.008835628629, 0.046396121383, 0.052001275122, -0.042736325413, -0.021582890302, 0.004880592227, -0.010986343026, -0.043915838003, -0.031103540212, -0.043218791485, -0.063411839306, -0.010300289840, 0.008106306195, 0.018578916788, 0.002740651369, -0.023184735328, 0.040839768946, -0.058643776923, 0.036068044603, 0.069359868765, -0.065816223621, 0.046343438327, 0.012193523347, 0.061602011323, -0.061376802623, -0.019937098026, -0.049898155034, -0.001123592257, 0.038724072278, 0.003041431308, -0.067462578416, 0.012803904712, -0.019887130708, -0.006031922996, -0.019677523524, 0.065443605185, 0.035898201168, 0.044058546424, -0.043615914881, -0.045138940215, -0.045058362186, 0.066465139389, -0.000828675926, -0.033953621984, -0.066916003823, 0.037392370403, -0.038500543684, 0.036721780896, -0.006339676678, 0.040015086532, -0.069826409221, 0.049420267344, -0.043461006135, -0.045588884503, -0.003542795777, 0.054234161973, -0.062027513981, -0.052895419300, -0.032985884696, 0.027595400810, 0.021171264350, -0.031990237534, 0.014322414994, -0.026223950088, 0.002299234271, -0.037432581186, 0.069168820977, -0.067974880338, -0.004056006670, 0.030980840325, 0.044256560504, 0.065058618784, -0.027422234416, -0.020849157125, 0.019684992731, 0.050291821361, 0.040126308799, -0.002867549658, -0.047029815614, 0.011297672987, -0.025980323553, 0.038921535015, 0.016384981573, -0.067378044128, 0.035996623337, -0.055733904243, 0.055991485715, 0.028073512018, -0.025897748768, -0.038119804114, -0.048756800592, -0.042827382684, 0.061740443110, -0.041747614741, 0.029704712331, -0.041268073022, 0.043500080705, 0.029891781509, -0.035563226789, 0.036590807140, 0.061771288514, -0.031758155674, -0.017808705568, 0.050032928586, -0.042711168528, 0.059320434928, 0.061428830028, 0.028560541570, -0.035386674106, 0.024952881038, 0.069145575166, 0.039486177266, -0.066532917321, 0.040001392365, 0.053562521935, 0.039887875319, -0.070896282792, 0.019655913115, 0.016690567136, 0.040038004518, -0.071379579604, -0.014662157744, 0.018043175340, 0.044079147279, 0.026653006673, 0.058392003179, 0.040421381593, 0.069858208299, 0.064112618566, 0.038960024714, -0.045971624553, 0.025128453970, -0.004240684211, 0.002569735050, 0.054895594716, -0.069731533527, 0.041860952973, 0.022553607821, -0.064800165594, 0.064350575209, 0.036173604429, -0.000540569425, 0.018605276942, 0.063470542431, -0.045829549432, 0.037595212460, -0.007398016751, 0.007040485740, 0.020715326071, 0.063990697265, -0.039721820503, -0.012313246727, -0.039361380041, 0.035266987979, 0.051747649908, -0.061316497624, 0.006716974080, -0.061671033502, -0.023098960519, -0.024677302688, 0.054270103574, 0.013126142323, 0.007289960980, -0.057320140302, -0.048346895725, -0.024944931269, 0.057776898146, -0.068089701235, 0.057655006647, -0.067784942687, 0.048057705164, -0.050718590617, 0.067788004875, 0.004969611764, 0.016461394727, -0.010377287865, 0.012808635831, 0.041299417615, -0.006939880550, 0.067113026977, -0.032327067107, -0.070306040347, 0.039647452533, 0.056862279773, 0.044309869409, -0.005138114095, -0.004976339638, -0.052429314703, -0.002021126449, -0.059780277312, 0.044152654707, 0.067372515798, -0.004503697157, -0.035356819630, -0.047482550144, -0.056132748723, 0.000930368900, 0.011808581650, 0.009110584855, -0.039054177701, 0.013835012913, 0.064639672637, -0.039994832128, 0.046317920089, 0.039862051606, -0.050034221262, -0.056625194848, -0.040681779385, -0.055695809424, -0.072034627199, 0.020429201424, 0.031007513404, 0.019707240164, -0.060111928731, -0.046946089715, 0.055870562792, 0.000085622072, -0.028113845736, -0.008436821401, 0.043371826410, -0.005510412157, -0.029712457210, 0.065705776215, 0.039150290191, 0.067112326622, 0.030395701528, -0.015989318490, -0.044455260038, 0.013231053948, -0.069002673030, 0.008386574686, 0.068323731422, 0.038705751300, -0.020722862333, -0.032468557358, -0.053030572832, 0.051921762526, -0.032365370542, 0.031266227365, 0.038594387472, -0.006144039333, -0.046995386481, 0.066172719002, -0.060556989163, 0.052094034851, -0.033501077443, 0.024188160896, 0.018214158714, -0.000921398401, -0.041487485170, -0.012438852340, 0.057974368334, 0.044022776186, 0.036851607263, -0.036552112550, 0.031039841473, -0.049236722291, 0.027178749442, 0.038887791336, -0.065939694643, -0.016280811280, 0.024878665805, 0.066835418344, -0.042365439236, -0.001669242978, -0.038913000375, 0.019575439394, 0.037689812481, -0.059733472764, -0.020063824952, 0.062728807330, 0.003430008888, -0.068565368652, 0.059803113341, 0.000606045127, 0.054691493511, 0.015971645713, 0.015434689820, 0.001556143165, -0.046407803893, -0.057579271495, -0.071128107607, 0.024647928774, 0.030420206487, -0.019102092832, -0.009272292256, 0.000231474638, 0.060161396861, 0.043964587152, -0.051330655813, -0.052583500743, -0.068831436336, -0.062641732395, 0.055538341403, 0.062194198370, 0.054701998830, 0.033755935729, -0.003325581551, -0.005670927465, 0.007592037320, -0.064723804593, -0.053841426969, 0.025313317776, 0.057250156999, -0.019017055631, -0.060844711959, -0.056345038116, 0.043873876333, 0.001637510955, 0.030177749693, 0.018038481474, 0.001515850425, 0.011509567499, 0.009186863899, 0.034366950393, 0.019615136087, -0.057008534670, 0.025749310851, 0.050186790526, -0.070762038231, -0.056006107479, -0.000885285437, -0.000415362418, 0.006815031171, 0.026221521199, -0.028843276203, 0.044550202787, -0.005125157535, -0.032860226929, -0.062016278505, 0.050165951252, 0.039284981787, -0.042928263545, -0.004686310887, -0.011774979532, -0.012291789055, 0.033183015883, 0.033336706460, 0.067341178656, 0.029831424356, -0.021848075092, 0.007326371968, 0.045888602734, 0.010019794106, 0.022370427847, 0.028822921216, -0.061337400228, 0.003566741943, -0.012138377875, -0.067734837532, 0.032124392688, -0.050424993038, -0.002978540957, 0.064320281148, 0.045794382691, 0.069714009762, -0.055394902825, 0.008807860315, 0.037561595440, -0.057288087904, -0.008132643998, -0.026709288359, -0.021764039993, -0.063901633024, -0.029229629785, 0.019145831466, 0.054152190685, 0.003668248653, -0.042313668877, -0.047582484782, -0.053556676954, -0.005490161479, 0.054293543100, 0.004171721637, -0.052596576512, 0.059779822826, -0.027351930737, -0.049837965518, 0.047185502946, -0.035170387477, 0.003025464714, -0.012756567448, -0.019393652678, 0.045418456197, -0.020252835006, 0.061029389501, -0.046200968325, -0.063174508512, -0.060700714588, 0.013483367860, -0.028927277774, 0.035489931703, -0.046019800007, 0.045256145298, 0.059620335698, -0.022500779480, -0.012748498470, -0.003648631275, 0.002906121314, -0.017606701702, -0.034754045308, 0.034048721194, -0.022011019289, -0.061564113945, -0.005198284984, -0.061411231756, 0.002045117319, -0.043639678508, -0.023678660393, -0.056352354586, 0.052268847823, 0.044874250889, 0.006328485906, -0.036377485842, 0.005372241139, 0.006962753832, -0.010449312627, 0.067329078913, -0.027535401285, 0.069049507380, 0.052605338395, 0.004929423332, -0.029279112816, 0.002213723958, 0.068060040474, 0.018497131765, 0.003828264773, -0.015492811799, -0.068735472858, -0.030611783266, -0.028545245528, -0.035824265331, -0.022549215704, 0.013302266598, 0.040953502059, 0.053993552923, 0.061671406031, -0.045394107699, -0.010397747159, 0.010011754930, -0.016880523413, 0.066010922194, 0.021102711558, -0.014903906733, -0.021359067410, -0.001816302538, 0.027777962387, 0.039212614298, -0.011673185974, -0.007857859135, 0.063362494111, -0.002839103341, -0.065139167011, -0.033530671149, 0.050178013742, -0.045309796929, -0.068686179817, 0.046782642603, -0.008231602609, -0.030998133123, 0.008950948715, 0.011818423867, 0.052447088063, 0.029619164765, -0.058155909181, 0.030241742730, -0.002598166466, -0.072009056807, -0.055994078517, -0.070849224925, 0.001158021390, -0.067031115294, -0.035142704844, -0.004734523594, 0.028490662575, -0.060539506376, -0.000274837017, -0.026842880994, -0.008543983102, -0.046431481838, 0.017564147711, 0.012749768794, 0.066602259874, -0.018919222057, -0.066326357424, 0.035847559571, -0.042617291212, -0.032730266452, 0.033151686192, -0.053485892713, -0.038835071027, -0.007059551775, -0.056231096387, 0.066016867757, -0.049540363252, -0.049285039306, 0.070213347673, 0.040939860046, 0.019745126367, -0.048449568450, 0.069171950221, -0.064789019525, 0.070940211415, -0.058594189584, 0.048002406955, 0.011791683733, 0.054877474904, 0.051253445446, 0.058896467090, 0.025872439146, 0.026191927493, 0.051644787192, 0.002590231597, -0.047608830035, -0.000039041042, -0.038595508784, 0.048325918615, 0.005932830274, 0.014558285475, -0.005291409791, -0.036068338901, -0.008717522025, 0.031393624842, 0.038368143141, 0.000182956457, 0.031450763345, 0.071560740471, 0.031292796135, -0.005062803626, -0.048009045422, 0.016879282892, -0.035410828888, -0.035279888660, -0.064878575504, -0.011393718421, -0.004780396819, 0.016554325819, 0.068149626255, 0.019955925643, 0.059226900339, 0.072156637907, -0.018436271697, -0.047113180161, 0.055096507072, -0.040150962770, -0.004249319434, 0.030373699963, 0.064031317830, 0.066561907530, 0.029754459858, 0.046535611153, -0.004739046097, 0.031004451215, -0.051535889506, -0.026554070413, -0.062861010432, -0.046907566488, -0.047934442759, -0.000080250204, -0.043944884092, -0.049629785120, -0.061041589826, -0.016134764999, -0.058340858668, -0.001352459192, 0.031547121704, -0.065181888640, -0.007048539817, 0.045010268688, -0.021526437253, -0.020721796900, 0.062135547400, 0.050307132304, 0.010473571718, 0.049389652908, 0.060819074512, 0.070566013455, 0.064017236233, -0.051045905799, -0.047146752477, -0.057121254504, 0.009220674634, -0.068925961852, -0.035744890571, -0.066003099084, 0.024474561214, -0.030742723495, -0.064102634788, 0.008516982198, -0.061886146665, -0.033958077431, 0.061752498150, -0.003438852727, 0.064975485206, -0.021660868078, 0.014868550003, 0.032839149237, -0.016668867320, -0.032243255526, -0.055698029697, -0.000158071518, 0.065441146493, -0.070585414767, -0.040310725570, -0.033370222896, -0.020220160484, 0.004715323448, 0.026834845543, -0.016647893935, -0.007569894195, 0.041765607893, -0.008997373283, 0.056874588132, -0.043504558504, -0.037051130086, 0.051892526448, 0.052693985403, -0.013648048043, -0.049282029271, -0.038891904056, -0.060470767319, 0.044746033847, -0.035955946892, 0.029927864671, -0.052645154297, 0.003613889217, -0.000340513885, -0.048662494868, 0.019397214055, 0.046284519136, -0.016649648547, 0.000767372549, 0.014323860407, 0.003895469010, 0.005590043962, 0.010301060975, -0.004073455930, 0.043163970113, -0.044700883329, 0.001214027405, 0.016610607505, 0.060942500830, -0.050984289497, -0.016568832099, -0.058489486575, -0.064753435552, 0.071513667703, -0.052018031478, -0.040034167469, 0.070547819138, 0.025968953967, -0.069456435740, 0.042301759124, 0.055549591780, -0.037117790431, 0.027385778725, 0.009872369468, 0.036144524813, 0.009925015271, -0.061094410717, 0.045365594327, -0.069817580283, 0.058370098472, -0.052446968853, 0.062383025885, 0.048718951643, -0.034885555506, 0.021799050272, -0.032542441040, 0.029696077108, -0.042787857354, 0.006940536201, -0.046807803214, -0.048110634089, 0.019524008036, -0.019630070776, -0.017652746290, 0.068288773298, 0.046540446579, 0.013968586922, 0.038552269340, -0.010362852365, 0.007168039680, -0.038888618350, 0.012501396239, -0.031625565141, 0.010712608695, -0.054615523666, -0.035900644958, -0.054588817060, -0.020501211286, -0.012814346701, -0.014440987259, -0.029270749539, 0.027791000903, 0.058873847127, 0.054366052151, -0.055777937174, 0.069299519062, -0.039112146944, 0.011913716793, -0.039294242859, -0.014530785382, 0.058364197612, -0.021183133125, -0.025855094194, 0.033556640148, 0.013447664678, -0.068474709988, -0.004712067544, 0.048561565578, -0.062164682895, 0.008340463042, -0.064904212952, -0.056617587805, -0.006921641529, -0.065222546458, -0.059177432209, 0.057379424572, 0.053302764893, -0.070315450430, 0.019027866423, -0.067093759775, -0.055446438491, 0.049290135503, -0.031961709261, 0.071673765779, 0.022495672107, 0.042650088668, 0.029623158276, 0.068942189217, 0.012110985816, 0.005239963531, 0.027625583112, 0.000809185207, 0.032737649977, 0.007816873491, -0.052816249430, -0.059909272939, -0.046387091279, 0.017238155007, -0.004204414785, -0.043031640351, 0.029521033168, 0.007554426789, -0.061340928078, -0.006575606763, -0.068506591022, -0.059395179152, -0.013538803905, 0.006454214454, -0.047080367804, -0.006586015224, -0.068427257240, 0.040028646588, 0.032619476318, -0.014422696084, 0.058575794101, -0.052695136517, -0.001416414976, 0.035685442388, 0.044272474945, 0.015919201076, 0.007023558021, -0.048777587712, 0.025099016726, 0.056060329080, -0.039981376380, -0.022613052279, 0.040723159909, 0.017172604799, -0.012082267553, 0.038911849260, 0.030944831669, -0.016398143023, 0.026399865746, 0.022615619004, -0.048304341733, 0.020244523883, 0.009888283908, -0.071074441075, -0.046470798552, 0.058317601681, 0.051447965205, -0.001196809113, -0.008319765329, 0.025512121618, -0.000800162554, 0.003916516900, -0.010150525719, 0.004084005952, -0.012638427317, -0.027765415609, 0.067861616611, 0.007725581527, 0.004851937294, -0.043724901974, -0.052459701896, 0.064651370049, -0.018920358270, 0.002053804696, 0.036842294037, -0.002537615597, -0.069114945829, -0.025766722858, 0.041969023645, 0.003472261131, 0.039162114263, -0.016975883394, -0.060333907604, -0.065617129207, 0.034276314080, 0.055959537625, 0.016847558320, -0.012929525226, -0.038876727223, 0.020320937037, 0.040706142783, -0.050060652196, -0.062162101269, 0.052788518369, -0.024607427418, 0.056485116482, -0.000919423997, -0.021316707134, -0.044311638921, 0.050990328193, 0.035111591220, 0.034590221941, -0.010925378650, -0.054348841310, -0.049390099943, -0.060275405645, 0.024533510208, 0.057701691985, -0.054934959859, -0.068954750896, -0.003529943526, -0.004399776459, -0.043752793223, -0.013362646103, 0.005248785019, 0.041399352252, -0.003313571215, 0.005392119288, -0.064939402044, -0.049022622406, -0.037276137620, 0.030659854412, 0.070462465286, -0.019692767411, -0.072162792087, 0.004572972655, -0.001225575805, -0.014499727637, -0.056753225625, -0.061078704894, 0.039122901857, -0.062684901059, 0.054999142885, -0.026631981134, -0.055232957006, 0.041304446757, -0.056291148067, 0.015478275716, -0.049662288278, -0.009401172400, -0.061607852578, 0.045404657722, -0.046481862664, -0.007512979209, 0.043354257941, 0.018024645746, 0.050893247128, -0.053857132792, 0.063125297427, -0.064935170114, 0.038129799068, -0.022830765694, 0.032795101404, 0.002576343715, -0.006945684552, 0.006431214511, -0.031838666648, -0.066749945283, 0.022702597082, 0.068167805672, -0.031769204885, -0.050450205803, 0.067486912012, -0.041816558689, 0.066359966993, 0.037813648582, -0.039459988475, -0.068716153502, 0.066488683224, -0.013327062130, 0.008115872741, 0.024271659553, 0.041204892099, 0.069772869349, 0.029295615852, -0.066331483424, -0.060139425099, 0.037057168782, 0.064745277166, 0.038525409997, 0.069262042642, 0.034322954714, 0.024694025517, -0.050755292177, 0.003769919276, -0.010344080627, 0.001462079585, -0.019095156342, 0.037122264504, 0.024654053152, 0.032491303980, -0.048765286803, 0.032141707838, 0.046082727611, -0.055724337697, 0.040600359440, -0.001005522907, -0.066746689379, -0.058080647141, 0.023937292397, -0.003701128066, -0.012693714350, 0.068322733045, 0.019750051200, 0.004767626524, 0.059668660164, 0.001191452146, 0.020547978580, -0.053136944771, 0.066240981221, -0.069119758904, 0.019863590598, -0.054213821888, -0.055542413145, 0.041257061064, 0.007863536477, 0.039292074740, -0.052362415940, -0.058101929724, -0.009772069752, -0.066584728658, 0.031809516251, -0.010331414640, -0.012012772262, 0.026390470564, 0.007861249149, -0.014629431069, 0.065127938986, 0.005843833089, 0.035821393132, -0.015329506248, -0.039642669261, -0.064657703042, -0.054614678025, -0.062449261546, -0.033579796553, -0.004046045244, 0.002365291119, -0.003690369427, 0.008568607271, 0.040725640953, 0.064777165651, -0.043851353228, -0.031913340092, -0.043423444033, 0.018745526671, -0.018532302231, 0.015938423574, 0.072158411145, -0.063088923693, -0.059123851359, -0.000727139413, 0.049635581672, -0.061801526695, -0.018707722425, 0.026567615569, 0.014736279845, 0.067301392555, 0.028497703373, -0.039907544851, -0.062924548984, 0.043739885092, -0.071215294302, -0.006087079644, -0.029944121838, -0.016767065972, 0.071270346642, 0.025118336082, -0.019828442484, 0.000116489828, -0.063592694700, -0.053535856307, 0.022507525980, -0.001699201763, 0.016152247787, 0.046992100775, -0.013735525310, 0.009043037891, -0.015718232840, -0.016659662127, -0.029135301709, -0.009677883238, 0.051747962832, 0.002282112837, -0.050519526005, 0.051641918719, -0.050336450338, -0.036785516888, -0.038899887353, 0.030795305967, -0.070977687836, -0.037655711174, -0.006829380989, -0.037242416292, 0.027323938906, 0.013959810138, 0.042129747570, 0.070698529482, 0.069842204452, -0.068659625947, 0.000828623772, -0.058260761201, -0.066476806998, -0.063395246863, -0.009117715061, -0.011856779456, -0.018776133657, -0.055381171405, 0.037541426718, 0.000514656305, 0.021298982203, 0.014853008091, -0.063135124743, 0.018204346299, -0.039798576385, 0.036300621927, 0.038441732526, -0.009086668491, -0.011943995953, -0.045648779720, -0.053495388478, 0.045804604888, 0.070124000311, 0.016292080283, 0.020140632987, 0.023703269660, -0.069073885679, 0.061527326703, 0.054159805179, 0.039296112955, -0.005049988627, -0.041627943516, 0.026523977518, 0.024894066155, -0.055226214230, 0.057435423136, -0.000363126397, 0.058524489403, -0.058758683503, 0.058532312512, 0.016836903989, 0.068064287305, 0.055769771338, 0.034243322909, -0.052178446203, 0.015354715288, -0.026518315077, 0.008958153427, -0.024082630873, 0.017865449190, -0.048252291977, 0.012013822794, -0.037079643458, -0.016207635403, 0.038936369121, 0.043349683285, 0.004422709346, 0.010769784451, -0.056847002357, 0.067100942135, 0.044007174671, -0.055747911334, 0.029563054442, -0.034810706973, 0.045707233250, -0.029228940606, 0.004804089665, 0.069573253393, -0.040720701218, 0.028779044747, 0.048543117940, -0.011836063117, -0.006303764880, 0.016926534474, 0.070471510291, -0.009679362178, -0.025014754385, 0.009580492973, -0.032167065889, 0.043391667306, 0.064234897494, 0.020945407450, 0.025615654886, 0.026118941605, -0.042457684875, 0.052870571613, 0.009745299816, -0.015966419131, 0.039934009314, -0.019915763289, -0.027893655002, 0.044310882688, 0.072093859315, -0.006876766682, 0.056619286537, 0.045909114182, -0.053695499897, -0.025042165071, -0.040400575846, 0.014933057129, -0.048680681735, -0.002621755004, 0.002971179783, 0.043647795916, 0.015832431614, 0.022596240044, -0.027941558510, 0.064741075039, 0.027220934629, 0.050326041877, -0.066967464983, 0.058895856142, 0.062679678202, 0.032709769905, -0.062076345086, -0.007097922266, -0.057077839971, -0.022859189659, 0.007132574916, 0.022168442607, 0.001902505755, 0.034366950393, -0.010411888361, -0.066868595779, -0.050448156893, 0.043398000300, -0.013959053904, 0.013358168304, -0.039923772216, 0.071891978383, -0.037631209940, -0.041231248528, 0.019540816545, 0.026310220361, 0.060857221484, 0.000957004726, 0.067590281367, -0.015631373972, 0.017583042383, 0.002428852022, -0.005900360644, 0.041666038334, 0.016649752855, -0.046392336488, -0.067909426987, 0.059007525444, -0.021942090243, -0.018547512591, 0.042249679565, 0.037485800683, 0.010498590767, 0.020694576204, 0.056693911552, -0.010834529996, -0.019572943449, -0.007935017347, 0.023452796042, 0.037168376148, 0.063838645816, 0.004431106150, -0.046637095511, -0.060166023672, -0.047333851457, -0.053623110056, 0.006055340171, 0.050588212907, -0.048834729940, -0.070036962628, -0.021674271673, -0.008392535150, 0.012511856854, -0.008563786745, -0.057517636567, 0.031682968140, 0.051961250603, 0.053598701954, -0.014086879790, -0.042552597821, -0.003038130701, -0.053836554289, -0.009676214308, -0.061019927263, -0.010521408170, -0.029004294425, 0.060494869947, 0.049869708717, -0.037892006338, 0.059012606740, -0.029423784465, 0.050809904933, -0.034230783582, -0.061033830047, 0.028984986246, -0.052241921425, -0.059180118144, 0.064280793071, -0.025334741920, 0.029411308467, 0.013691358268, 0.064494684339, 0.002236194909, -0.054633263499, 0.007972419262, 0.000048607588, 0.010169349611, -0.042860813439, -0.057654254138, -0.005785576999, -0.056775301695, -0.004518292844, -0.044328656048, -0.051804706454, 0.044472999871, 0.065413981676, 0.043921001256, -0.005346551538, 0.015640616417, 0.063773676753, -0.058150865138, -0.017044208944, -0.072096705437, -0.021105721593, 0.035863824189, 0.002712793648, 0.022066354752, 0.057471379638, 0.018274925649, -0.027866333723, -0.050787605345, -0.070198878646, -0.067833758891, -0.018146347255, 0.039212249219, -0.050988949835, -0.004443615675, 0.019966967404, -0.058109246194, 0.000424377620, -0.024837493896, 0.008020855486, -0.028049357235, -0.027482990175, -0.034828789532, 0.034400366247, 0.050835818052, -0.062784403563, -0.058208387345, -0.005617558956, -0.054988950491, 0.004776872694, 0.013989955187, 0.047162152827, -0.054718382657, 0.035909026861, -0.055984035134, -0.051130406559, -0.062986582518, 0.007779069245, 0.044537387788, 0.040863029659, -0.056207284331, 0.069702640176, 0.041563846171, -0.024400658906, 0.026593901217, -0.029942128807, -0.033909194171, 0.070779591799, 0.041213661432, 0.020663432777, 0.026734754443, -0.043724626303, -0.022694181651, 0.068590238690, 0.002796933055, 0.069786489010, 0.041673175991, -0.026558164507, 0.013287745416, -0.065105326474, -0.018231913447, 0.037573531270, -0.038623224944, -0.012528378516, -0.053713943809, 0.052124813199, 0.042577013373, 0.063324227929, -0.009126432240, 0.047715097666, -0.057180460542, 0.070025309920, 0.044966392219, 0.032809704542, -0.026596743613, 0.018675304949, -0.011633921415, -0.025599770248, -0.023161936551, -0.055854331702, -0.020591080189, 0.057279273868, -0.014676764607, 0.008936852217, -0.008216373622, -0.002275317907, 0.034118458629, 0.007454626262, -0.043771874160, -0.038204543293, 0.036948665977, 0.016658529639, -0.062230892479, 0.011581681669, 0.012994498014, -0.050841595978, -0.010045479983, 0.024436019361, -0.061653465033, -0.051078356802, -0.040814079344, 0.004755534232, -0.023004412651, -0.038519367576, -0.009184196591, -0.013313468546, 0.055546715856, 0.001357667148, 0.011640064418, -0.043771702796, 0.000620670617, 0.020830400288, 0.008417069912, -0.007919423282, 0.013518325984, -0.025293532759, 0.001836180687, -0.004189424217, 0.029590740800, -0.036035250872, -0.016740705818, 0.050763741136, 0.007598921657, -0.049911953509, -0.060221929103, -0.045966237783, -0.024753596634, -0.007267318666, -0.045295156538, -0.007423005998, 0.045825004578, 0.050671771169, 0.029528588057, 0.009674735367, 0.024355866015, 0.052853181958, 0.009608112276, 0.028153710067, 0.039010234177, -0.061922762543, 0.035523444414, 0.059744492173, 0.022107027471, 0.068058088422, -0.062778070569, -0.011372402310, 0.000123865902, 0.000719830394, -0.047432340682, -0.042106244713, -0.022174444050, -0.027280196548, 0.064057767391, 0.033944293857, -0.018839228898, 0.021003633738, -0.070146240294, 0.031222231686, -0.021852273494, 0.005887813866, -0.015574183315, -0.070821985602, 0.002778351307, -0.016390003264, -0.042218066752, 0.059947386384, -0.065683886409, 0.065564125776, -0.041037783027, 0.043732382357, -0.046304084361, 0.041257761419, -0.020424522460, -0.031283296645, 0.022088207304, 0.017596669495, 0.037684567273, -0.047270223498, -0.019880939275, 0.071286529303, -0.021054394543, -0.024875175208, -0.046530142426, 0.057259559631, -0.038518268615, 0.001604117453, -0.065767064691, -0.069918461144, 0.029049269855, -0.022286545485, -0.049947865307, 0.062200009823, 0.064731806517, -0.016286678612, 0.007065750659, -0.034999616444, -0.053415618837, -0.063129670918, 0.016014873981, 0.034667395055, 0.005768217146, 0.038447484374, -0.005788758397, -0.008765652776, -0.031344875693, -0.039989482611, 0.041237823665, -0.000586703420, -0.071302421391, 0.060652226210, 0.055101141334, -0.039576802403, -0.068102158606, -0.063597358763, 0.063277319074, -0.025032114238, 0.056036338210, -0.070397093892, -0.071046374738, 0.037271477282, -0.016421508044, 0.065311074257, -0.066410079598, 0.026070639491, -0.008285835385, -0.060246415436, 0.043227396905, 0.015803836286, -0.020519740880, -0.069636225700, -0.022265482694, 0.033689811826, 0.022918380797, 0.033421717584, 0.034078679979, 0.039054781199, 0.047764301300, 0.045433148742, 0.017359927297, -0.027662713081, 0.018108628690, -0.054074108601, -0.046728085726, -0.030041702092, 0.016154021025, -0.031728614122, 0.019485607743, 0.054470539093, -0.060656286776, 0.012672603130, -0.063844665885, -0.038330804557, 0.053751364350, -0.029586866498, 0.019044309855, -0.048161067069, 0.065735355020, 0.067503467202, 0.070633560419, -0.056052997708, -0.061730738729, 0.056519001722, 0.000693313777, -0.060987904668, 0.066167265177, -0.015475347638, 0.050202675164, -0.048787809908, -0.035578109324, -0.059963628650, -0.037645027041, -0.015001054853, 0.013463437557, 0.020485520363, -0.012594241649, -0.032691325992, -0.021303217858, -0.020371336490, 0.007577106357, 0.055560112000, 0.038949683309, 0.055201813579, -0.068561725318, 0.024701341987, 0.051286704838, -0.068685472012, 0.010500468314, -0.045543238521, -0.028605241328, -0.017834343016, -0.033117495477, 0.048921883106, 0.009593434632, 0.054059028625, -0.040207400918, -0.012220676988, -0.063528992236, -0.046717569232, -0.067557752132, 0.057725518942, 0.060702085495, -0.038734175265, 0.050992392004, -0.021339558065, -0.066880680621, 0.070282176137, 0.058331206441, -0.045135825872, 0.065048605204, -0.056220620871, 0.058805868030, 0.027858003974, -0.007774323225, 0.015546597540, 0.057907789946, -0.010605152696, -0.044641364366, 0.046329014003, 0.010568656027, 0.011838644743, -0.045872531831, 0.008641935885, -0.041741710156, 0.064193323255, 0.047171145678, -0.003435306251, 0.051974169910, 0.037807211280, 0.070471838117, -0.004397846758, -0.027248915285, -0.026424627751, -0.047708570957, -0.068497374654, 0.069149732590, -0.006893664598, -0.034957323223, -0.063457436860, 0.041452281177, 0.066969841719, 0.023980341852, 0.040664553642, -0.024424780160, 0.055881708860, -0.061556920409, 0.023912996054, 0.057838723063, -0.042341869324, -0.014662794769, 0.021210134029, -0.054513573647, -0.068204484880, 0.048016346991, 0.050355240703, -0.027451727539, 0.055711999536, 0.014529220760, -0.058557435870, 0.048343367875, -0.070134609938, 0.045039415359, 0.018898107111, 0.020125180483, -0.067357480526, -0.065370574594, 0.034902587533, -0.030013669282, -0.025286681950, -0.014102693647, -0.008536942303, 0.035296857357, 0.050479903817, -0.013382345438, 0.026348523796, -0.069386541843, -0.040341921151, -0.045536629856, -0.039557430893, 0.002144828439, -0.071996904910, 0.063653379679, 0.051032379270, 0.033830218017, 0.020994223654, -0.036517355591, 0.005508102477, -0.035585783422, 0.022172637284, 0.068967729807, 0.058663398027, -0.059903267771, 0.046340666711, 0.044610098004, 0.036220513284, 0.064376875758, 0.023441143334, 0.008608147502, -0.013696208596, 0.009229429066, -0.053250093013, 0.069080621004, 0.003219589591, -0.014911718667, -0.017899364233, -0.038425404578, 0.039133392274, 0.010287679732, 0.061290279031, 0.050322137773, -0.042328190058, -0.046560786664, -0.066759541631, 0.030718341470, -0.059395644814, -0.039560388774, 0.018246896565, -0.015944942832, -0.054277744144, 0.070581912994, -0.012452565134, 0.060495302081, -0.058526620269, -0.027881473303, 0.052973479033, 0.004786007106, 0.057165116072, -0.018449451774, 0.048609033227, -0.022564411163, 0.039032511413, 0.032471120358, -0.066659957170, -0.012981507927, 0.022377274930, 0.062207326293, -0.045841954648, -0.065153934062, -0.016276165843, 0.036714248359, 0.057378754020, 0.057607337832, -0.038749296218, -0.041014466435, -0.006107889116, -0.071697086096, 0.001480899751, 0.042836830020, 0.015217989683, 0.049109414220, 0.045553684235, 0.006371453404, -0.039906084538, -0.070308670402, -0.069387987256, -0.028084903955, -0.046027958393, -0.032928396016, 0.060280486941, 0.048115417361, -0.048301883042, 0.008342958987, -0.069526657462, -0.034078299999, 0.015517465770, 0.062552079558, 0.024990834296, -0.061868891120, -0.007133096457, -0.033074684441, 0.001709058881, -0.062839932740, 0.011168092489, 0.063387677073, 0.051695547998, 0.037423543632, -0.059181734920, -0.068336509168, 0.010797537863, 0.048171617091, -0.042518064380, -0.034813065082, 0.072053328156, -0.064414747059, -0.054259128869, -0.053763411939, -0.010599609464, 0.013810150325, -0.034402500838, -0.048304393888, -0.044526666403, -0.066252715886, -0.071834065020, -0.017344545573, 0.057377889752, 0.008380606771, -0.012645982206, 0.004127018154, -0.062283493578, 0.050348252058, -0.028201665729, -0.006560139358, 0.016598545015, -0.056299597025, -0.058133162558, -0.034212473780, -0.043724298477, -0.020759597421, 0.068717986345, 0.015816278756, 0.060717284679, 0.014023266733, -0.030077077448, -0.066157080233, -0.035538259894, -0.019572582096, 0.042186751962, 0.061673775315, 0.053121864796, 0.021789744496, 0.066830232739, -0.035204406828, -0.017853509635, 0.032724641263, -0.022749945521, 0.001032248139, -0.026752855629, -0.021515786648, -0.010124042630, -0.035382129252, 0.040466852486, -0.061275132000, -0.057410992682, -0.038889445364, -0.017692804337, -0.065355539322, 0.037182934582, 0.047890976071, -0.000905930996, 0.040889203548, -0.004095666111, -0.000509016216, 0.001913845539, -0.055683366954, 0.020600184798, -0.061319593340, 0.019053295255, 0.053715109825, -0.019659526646, -0.003266081214, -0.003673717380, 0.024779886007, -0.062727175653, -0.062238223851, 0.018885895610, 0.010458327830, -0.019172824919, 0.042242556810, 0.005738392472, -0.012722447515, 0.039321877062, 0.052604921162, -0.033125065267, -0.025960002095, -0.014708098024, 0.033337928355, -0.016069620848, 0.056225642562, 0.062452152371, 0.020538218319, -0.066337935627, -0.034664623439, 0.031047962606, -0.041733294725, -0.013843614608, -0.067343682051, -0.032555673271, -0.035590704530, -0.067871004343, 0.033186353743, -0.000337965786, 0.019143231213, -0.068126074970, 0.060811728239, -0.043166898191, 0.031835258007, 0.038967013359, 0.061747133732, -0.000673852861, 0.017760030925, 0.064611271024, 0.005184955895, -0.035329494625, 0.002100467682, 0.009238518775, 0.064928591251, 0.037920728326, 0.027413234115, 0.023886166513, 0.014355026186, 0.044645458460, -0.010250873864, -0.014577914029, -0.055334869772, -0.042542237788, -0.056316081434, -0.016121722758, -0.058640096337, 0.064648240805, 0.050936125219, -0.063261643052, 0.029065079987, 0.004222407937, 0.055757790804, -0.045127410442, 0.063100472093, -0.002042345703, -0.036538656801, -0.030896391720, -0.026155211031, 0.004592552781, -0.006286211312, 0.025203593075, -0.036117393523, 0.004515111446, -0.056310176849, -0.038810551167, 0.048372946680, -0.043817918748, 0.005608834326, 0.049438498914, 0.041210912168, -0.000987850130, 0.071066334844, -0.005996145308, -0.050750076771, 0.010829284787, -0.071802183986, 0.046362414956, 0.022772900760, 0.030851177871, 0.007204823196, 0.039268895984, 0.063159093261, 0.024926915765, -0.071485824883, -0.019460760057, -0.055121924728, 0.010500349104, -0.053195789456, 0.019372336566, -0.067762948573, -0.025257706642, 0.070806279778, 0.009401187301, 0.061401233077, 0.043282248080, -0.071305334568, 0.055419266224, 0.053475931287, 0.006125763059, 0.040688715875, -0.049132540822, 0.030999444425, -0.059228535742, 0.035299278796, 0.064007326961, -0.028012223542, 0.065097630024, 0.071700289845, 0.017586812377, 0.032771714032, -0.064266994596, 0.055674642324, -0.068014867604, 0.015169419348, -0.023415539414, 0.035814389586, -0.042970158160, 0.033607915044, -0.036683946848, 0.047850146890, -0.000645942986, 0.012444995344, -0.023722331971, -0.042699038982, 0.036334261298, 0.071008279920, -0.031221129000, -0.005995683372, 0.014089651406, 0.009551689029, -0.068642057478, 0.022630259395, 0.071845263243, 0.053877919912, -0.027822095901, -0.026715364307, 0.029877930880, -0.067960619926, 0.004661999643, -0.000413827598, 0.036290451884, 0.061776056886, -0.058280963451, 0.070470392704, 0.030612468719, -0.023479875177, 0.031951025128, 0.045634068549, -0.010310232639, 0.032905578613, 0.025546066463, 0.018146894872, -0.070214927197, 0.024852566421, 0.056966274977, -0.057336591184, 0.063587754965, -0.064775407314, 0.001447796822, 0.021951124072, -0.043424390256, 0.042718380690, -0.008253194392, -0.001368612051, 0.022444069386, 0.036332011223, -0.038679216057, -0.059730790555, -0.002229154110, 0.025547876954, -0.021464735270, 0.050092048943, -0.038242038339, -0.044391542673, 0.024337477982, -0.016307722777, 0.022297434509, 0.034238338470, -0.015126798302, -0.049438193440, 0.052284486592, -0.000838480890, 0.025953136384, 0.016311369836, -0.046545799822, -0.004195034504, 0.063246920705, -0.008580148220, -0.010029874742, 0.030399985611, -0.011888470501, 0.066840365529, 0.048630282283, 0.004063427448, -0.036298643798, 0.011341668665, 0.018021978438, 0.021841466427, -0.066858775914, 0.015668921173, 0.055536955595, -0.024301722646, 0.029264554381, -0.036244995892, 0.045293867588, 0.053756192327, 0.001817680895, 0.026046618819, -0.034306440502, -0.022548958659, -0.020415868610, -0.019984468818, 0.042677149177, -0.017762161791, 0.037631846964, 0.060941070318, -0.068124249578, -0.032380186021, 0.007986925542, 0.010899916291, -0.006056249142, 0.038048155606, -0.062185712159, -0.030814301223, -0.056578047574, -0.071147948503, -0.054726332426, 0.028225861490, 0.029223591089, -0.070740908384, -0.052968822420, 0.044816523790, 0.011942327023, 0.039776608348, -0.012860942632, 0.012803025544, -0.038124483079, 0.018302701414, -0.032063003629, 0.037096194923, -0.048195995390, -0.032228287309, -0.063607990742, 0.021239280701, -0.065798193216, -0.042109258473, 0.060856163502, -0.038828585297, 0.068889483809, 0.048503734171, -0.069607064128, 0.032353170216, 0.027305833995, 0.011248067021, 0.019499368966, -0.059638150036, -0.004467397928, -0.060646496713, 0.053810551763, -0.013540301472, 0.040118046105, 0.026028826833, -0.060982070863, 0.005407966673, 0.064902439713, 0.066385269165, 0.057233899832, 0.066859155893, 0.045484460890, -0.034034751356, -0.037401076406, 0.034578129649, 0.022324085236, -0.003691010177, -0.012783013284, 0.011130087078, 0.048092290759, 0.008126415312, -0.022460035980, 0.059564679861, 0.066635131836, 0.065390288830, 0.039081394672, -0.001225315034, 0.060705468059, 0.009993568063, 0.007420644164, 0.040284000337, 0.000494576991, -0.017983488739, 0.065094903111, -0.024822026491, 0.043018490076, -0.029514495283, 0.024196006358, 0.030421689153, 0.044296666980, 0.052911430597, -0.047485440969, 0.047780357301, -0.019621517509, 0.003745928407, 0.018680654466, 0.027299694717, -0.048103943467, 0.035688400269, 0.053373590112, 0.061786785722, -0.041552957147, 0.008383683860, -0.030069626868, 0.027705520391, 0.003776371479, 0.000060945749, -0.068133540452, -0.061833873391, -0.038136646152, 0.002676077187, -0.018921062350, -0.020266000181, 0.035736307502, 0.012983843684, 0.063095718622, 0.001186206937, 0.002634041011, 0.007483929396, 0.048228189349, -0.000465795398, -0.012792065740, -0.052265338600, -0.070192903280, 0.006185658276, -0.037981841713, -0.031690448523, 0.001545734704, -0.065649166703, -0.056798119098, 0.032512344420, 0.039751894772, -0.070348501205, 0.044124968350, 0.051956325769, -0.060988023877, -0.009394012392, 0.024177819490, -0.034422170371, -0.001198202372, 0.065766438842, 0.000210382044, -0.010534726083, 0.044600583613, -0.041301779449, 0.030531220138, -0.071361511946, -0.046470902860, 0.058015584946, -0.034897152334, -0.014219678938, 0.048780992627, 0.004441618919, 0.018433004618, 0.041099570692, -0.020781397820, 0.062058344483, -0.033404033631, -0.027908246964, -0.000291682780, -0.067614272237, -0.008805401623, 0.033540152013, -0.047014933079, -0.033787012100, -0.031489808112, -0.023167148232, -0.010904647410, 0.043681316078, -0.064193367958, -0.047036662698, -0.050647284836, 0.007328644395, 0.008830241859, -0.066374503076, 0.016064479947, -0.062307499349, 0.034073017538, 0.006146393716, -0.054284542799, 0.068176224828, -0.039517406374, -0.027150511742, -0.065144501626, 0.025164209306, 0.065422579646, -0.025138724595, -0.069591470063, 0.041909538209, 0.008246138692, 0.024453051388, 0.030704818666, -0.002459943295, 0.022741980851, 0.063571140170, 0.032848522067, 0.023917883635, 0.008370779455, -0.063253484666, 0.046332255006, 0.005249649286, -0.061713345349, 0.046358063817, 0.024574249983, -0.046869419515, 0.028390802443, 0.053628697991, 0.025627575815, -0.058586254716, -0.025991354138, -0.064417414367, -0.016569346189, 0.055154845119, -0.069699928164, -0.023332312703, 0.052101671696, 0.050149179995, 0.002289600670, -0.001779429615, -0.044055074453, -0.071656875312, 0.058168560266, -0.025875847787, -0.062096875161, -0.055582229048, 0.051752947271, -0.013773363084, -0.003419287503, 0.054254725575, -0.052939899266, 0.059814423323, 0.021996974945, 0.040488481522, 0.054341122508, 0.017109885812, 0.050155095756, 0.010697275400, 0.051700867712, -0.042011059821, -0.049021936953, 0.067441567779, 0.054646357894, 0.069217041135, 0.011536806822, 0.023500524461, -0.008250117302, -0.004144899547, 0.019286729395, 0.035423509777, -0.060184642673, 0.021024405956, 0.015410929918, -0.040014430881, 0.009901806712, -0.047694586217, -0.023126233369, -0.045633018017, 0.021643489599, 0.007366068661, -0.026861444116, 0.013869270682, 0.043691158295, 0.069819107652, 0.062895283103, 0.056753635406, -0.014562427998, 0.043466359377, -0.065686866641, 0.058630481362, -0.063670776784, 0.036706261337, -0.012212641537, 0.026849299669, 0.066200509667, 0.022037789226, 0.039258107543, -0.033044110984, -0.063204497099, 0.049702242017, -0.046461366117, 0.051782868803, 0.002534002066, 0.059979006648, -0.010372228920, -0.035565361381, 0.013572044671, 0.039165109396, 0.044313929975, 0.031766310334, 0.005153171718, 0.052188873291, 0.013362422585, -0.060986183584, -0.023299224675, -0.040271494538, -0.034302875400, -0.061994563788, 0.008647046983, 0.054918870330, 0.013410910964, -0.047892145813, -0.023345682770, 0.034348130226, 0.010276921093, -0.023248672485, -0.025126166642, -0.035011556000, 0.068734288216, -0.030790917575, 0.059162154794, 0.030299656093, 0.013373695314, -0.000672079623, 0.011792980134, -0.057329107076, -0.003086030483, 0.036237061024, -0.031279027462, -0.042821429670, -0.005598969758, 0.000179015100, -0.006533436477, -0.046905878931, -0.056649919599, 0.005437888205, -0.048750162125, -0.042816851288, 0.017313316464, -0.044705249369, -0.062958329916, 0.020901605487, -0.005485221744, 0.045444674790, -0.006895937026, -0.053337227553, -0.066791683435, 0.040780939162, -0.048132434487, 0.049517631531, 0.049058653414, -0.037848044187, -0.007723152637, -0.060245055705, 0.026965647936, 0.016923710704, 0.028828561306, 0.033119387925, 0.054961919785, 0.025389283895, -0.028579294682, 0.017528168857, -0.032696336508, 0.030644230545, 0.068657919765, 0.060090005398, -0.003032810986, 0.036492511630, 0.068882599473, 0.010963506997, -0.053988128901, 0.016868598759, 0.041221238673, 0.019032649696, 0.010192647576, 0.055556997657, 0.036053732038, -0.001731768250, -0.057104185224, 0.027032010257, -0.011890053749, -0.043234571815, 0.014979749918, -0.049248456955, -0.035483509302, 0.007354438305, -0.047578580678, 0.007121443748, 0.033988274634, 0.046416200697, -0.026893395931, -0.052962973714, 0.029362410307, 0.003534600139, -0.064334392548, 0.062520757318, -0.065724253654, 0.040815971792, 0.042361877859, -0.043539121747, 0.030099891126, -0.043795019388, -0.051758076996, -0.023746505380, -0.065887436271, -0.053898051381, 0.062280476093, 0.036893814802, -0.016674771905, 0.002545319498, 0.020930543542, 0.006993494928, -0.056860852987, -0.018091682345, -0.054251141846, -0.033409107476, 0.055209904909, -0.023108612746, -0.004095412791, -0.063259646297, 0.047152653337, -0.011958055198, -0.040713597089, -0.017897404730, -0.023836683482, -0.069055095315, 0.026317514479, 0.048192605376, 0.070693776011, 0.010163106024, 0.010983534157, 0.022713087499, 0.033488139510, 0.012466020882, 0.055084854364, 0.070782467723, 0.040987901390, -0.050863310695, -0.014736488461, -0.030250895768, -0.065199874341, -0.072025731206, -0.016357399523, -0.010847415775, -0.044187098742, 0.032602958381, 0.030221074820, 0.049874268472, -0.021980565041, -0.067591749132, -0.026886172593, 0.057462483644, -0.024766601622, 0.067011684179, 0.018808998168, 0.044890031219, 0.038257107139, 0.024264313281, -0.008419908583, -0.005316101015, 0.027914851904, -0.050682835281, 0.025221921504, -0.066964864731, -0.033259723336, -0.038559392095, -0.015538323671, 0.048522919416, -0.016002897173, 0.066861867905, 0.013227351010, -0.069043911994, -0.006089046597, 0.034346751869, -0.042710326612, 0.008300237358, 0.025292858481, 0.022187143564, 0.028418518603, 0.001310318708, 0.015221193433, 0.062647372484, -0.056421421468, 0.053115829825, 0.003730259836, 0.002174042165, 0.042493768036, -0.049972847104, 0.031404241920, -0.031878568232, -0.067598834634, -0.063639253378, 0.001640491188, -0.063140116632, 0.010632976890, 0.029962927103, 0.042930789292, 0.050271205604, -0.043631434441, -0.001736864448, 0.020048253238, -0.052675656974, 0.002445764840, 0.014003083110, 0.006403334439, 0.005117811263, 0.028990440071, -0.033831801265, 0.021683670580, -0.044391922653, -0.009773034602, 0.013350203633, -0.065896213055, -0.062507145107, -0.041248455644, -0.048345915973, 0.065285354853, 0.058365941048, -0.013243731111, -0.031390577555, -0.044003486633, 0.012045256793, 0.069453477859, -0.066897571087, -0.047390908003, -0.031317811459, -0.020050179213, 0.000099278986, -0.026786029339, -0.061256013811, -0.066842891276, 0.004808925092, 0.042410433292, -0.010871369392, -0.003644399345, -0.056932516396, -0.055654034019, 0.010412283242, -0.068344235420, 0.052169978619, 0.041294552386, 0.016827359796, -0.021228749305, 0.036276258528, -0.028414785862, -0.046023331583, 0.052795670927, -0.030732948333, -0.063130095601, -0.052869491279, 0.066956803203, 0.059344634414, -0.008360080421, -0.003222912550, 0.050390310585, 0.057047560811, 0.034473113716, -0.023829992861, 0.022315569222, -0.067815966904, 0.034504860640, 0.061877280474, 0.071276590228, -0.048061341047, 0.024630159140, 0.014113925397, 0.070179075003, 0.057972043753, 0.001875787973, 0.058772966266, -0.044009219855, 0.013514317572, 0.031712405384, 0.028940476477, 0.070419326425, 0.017336077988, -0.069586709142, 0.004216425121, -0.004472933710, -0.071938268840, 0.043824732304, 0.007543072104, -0.059946283698, 0.021765656769, -0.026727199554, 0.053470984101, -0.018380627036, 0.035672247410, -0.059568017721, 0.010953634977, -0.004323154688, 0.007558315992, -0.039462056011, 0.005674183369, 0.005701817572, -0.039052166045, -0.052300095558, -0.019076161087, -0.066599339247, 0.019304469228, -0.031287614256, -0.043761827052, 0.033212460577, 0.060845091939, -0.069488890469, 0.050819620490, -0.055444698781, 0.062928408384, -0.032586902380, -0.053139422089, -0.059382360429, -0.007945179939, -0.059426531196, 0.070424452424, -0.045404262841, 0.030889026821, 0.039621524513, -0.062471922487, 0.045404054224, -0.006299823523, 0.036898404360, 0.031050957739, 0.025072842836, 0.022533975542, 0.017639838159, 0.018749378622, 0.028683841228, -0.052714616060, -0.059950515628, 0.058572009206, 0.016382448375, 0.051926352084, 0.012782707810, 0.058467075229, -0.045262273401, -0.016830813140, 0.022984519601, -0.001584962010, 0.030906960368, 0.004331000149, 0.003601863980, 0.059277907014, 0.068345695734, -0.068641990423, -0.002537027001, 0.013929300010, 0.025736577809, 0.064880132675, 0.028921358287, 0.066060125828, -0.018563412130, -0.009553067386, -0.065297998488, -0.066434599459, 0.064540758729, 0.068263918161, -0.028147760779, -0.014196176082, -0.061195328832, -0.055162064731, -0.027989376336, -0.062159832567, 0.008513145149, -0.033527556807, 0.032540962100, -0.039258264005, 0.019885204732, 0.021946892142, -0.059176832438, 0.035509303212, -0.001934066415, -0.068829193711, -0.056324787438, -0.028761908412, -0.062194641680, -0.035711683333, -0.038199432194, 0.033312544227, -0.016335289925, -0.036941803992, -0.024982612580, 0.041989035904, -0.059249460697, 0.049522347748, -0.041899099946, 0.033601686358, 0.068048834801, -0.053526341915, -0.013416640460, -0.021055806428, -0.058321207762, -0.003575466573, 0.051795192063, 0.029405198991, 0.009613685310, -0.054072696716, -0.003755085170, -0.036518283188, -0.046756938100, 0.018116116524, 0.037255063653, -0.058555610478, -0.001249231398, -0.001354746521, 0.024006493390, 0.025633119047, 0.056686535478, 0.014785923064, 0.019291482866, -0.043165899813, -0.035151463002, 0.060502991080, -0.062042552978, -0.040914274752, 0.067549020052, 0.032901383936, 0.056141421199, -0.063896507025, 0.045432150364, -0.027777202427, -0.035209875554, -0.044779360294, 0.033329322934, 0.069139376283, -0.010582163930, -0.052421193570, 0.015033639967, -0.066758804023, -0.046816371381, 0.030271336436, -0.061308287084, 0.063361406326, 0.007671289146, -0.021751735359, -0.061979714781, 0.068918913603, 0.051611877978, 0.019944705069, 0.044541925192, 0.031640380621, -0.024737887084, 0.013325460255, -0.014286782593, 0.015219487250, 0.003790445626, 0.031167700887, 0.012567333877, 0.009686365724, -0.023661524057, -0.023233737797, 0.042965218425, 0.029110267758, 0.047623157501, 0.040630280972, -0.036265507340, -0.017397128046, 0.017512857914, -0.021180484444, -0.069928079844, -0.059057176113, -0.032013878226, 0.064508259296, -0.039430756122, 0.065702155232, 0.045909889042, -0.032659478486, 0.069522127509, -0.020696226507, 0.002450890839, -0.069554701447, -0.035970348865, -0.060414537787, 0.030109338462, -0.007258564234, -0.030289281160, 0.023271337152, -0.045094199479, -0.030231039971, 0.036898426712, 0.029299780726, 0.022377736866, 0.039600253105, -0.040838256478, -0.007588066161, -0.061970405281, -0.015828423202, 0.013013064861, 0.049836724997, 0.052688188851, -0.013385958970, -0.000331707299, 0.008090473711, 0.048344105482, 0.043895430863, 0.023224122822, 0.003033258021, -0.018393032253, -0.019862115383, -0.026034023613, 0.015955850482, -0.055477634072, 0.026069588959, -0.057850185782, 0.039701052010, -0.058819781989, 0.047717161477, -0.066939473152, -0.059442479163, 0.029068835080, 0.041685737669, 0.010121926665, 0.028718151152, 0.006527066231, -0.024883143604, -0.052954435349, 0.048246413469, 0.061227947474, -0.028610251844, -0.048686310649, 0.036895208061, -0.012679655105, -0.014273226261, 0.030819460750, 0.001964695752, -0.060569584370, 0.035513877869, -0.034595642239, -0.040010094643, -0.049842610955, -0.020371302962, -0.011808961630, 0.036889240146, -0.007445476949, -0.069822333753, -0.044282265007, 0.030382968485, 0.071205914021, 0.019599489868, -0.036568854004, 0.031099133193, -0.014567591250, -0.033672831953, 0.037853583694, -0.031858950853, -0.030668802559, 0.037199430168, 0.069763317704, -0.010324463248, -0.047670029104, 0.016640029848, 0.033972844481, 0.065976694226, -0.043566327542, 0.045803584158, 0.026057600975, -0.019613500684, 0.025465562940, -0.034401092678, -0.049328174442, -0.036241795868, 0.034054003656, -0.068865723908, 0.026396997273, -0.020100440830, 0.049118667841, -0.033519331366, -0.001182660460, -0.068126693368, 0.003101430833, 0.007382467389, -0.015337232500, 0.015371814370, 0.006429389119, -0.070389054716, 0.023553036153, 0.069315254688, -0.020156119019, 0.018323808908, -0.054356824607, 0.044716589153, 0.039897650480, 0.027393087745, 0.063506022096, 0.028374813497, -0.020002812147, 0.001985050738, 0.006290860474, 0.019329197705, 0.064327970147, -0.063537061214, 0.006692267954, 0.004585124552, -0.045911967754, 0.067445218563, -0.030660614371, -0.017052330077, -0.022639844567, -0.006263189018, -0.027910467237, -0.046766936779, 0.024299293756, 0.012843027711, 0.034271702170, -0.000712133944, -0.023560211062, 0.025803871453, 0.031637974083, 0.043806977570, 0.052664116025, -0.018143489957, -0.045443832874, 0.003216043115, 0.016997061670, -0.024399109185, 0.044342145324, -0.057498451322, 0.046723693609, -0.072110541165, -0.029196057469, -0.037870105356, -0.019041713327, 0.022204421461, 0.052748903632, 0.068552076817, -0.051420383155, -0.049777656794, -0.011198394001, -0.057830981910, -0.062487684190, 0.054177030921, 0.058213859797, 0.017667785287, -0.039923995733, -0.055653311312, -0.049092859030, 0.061100006104, -0.013294886798, 0.061627864838, -0.003898002207, 0.044214166701, 0.031654350460, -0.000963181257, -0.063545703888, -0.052062440664, 0.052269756794, -0.040637146682, -0.046982549131, 0.019844323397, -0.052254464477, 0.034338183701, 0.016481474042, 0.039690829813, 0.043737597764, -0.013004407287, 0.018736921251, 0.002594582736, -0.030747815967, 0.048303194344, -0.013257343322, -0.011435978115, -0.022530857474, 0.006164528430, 0.055408015847, 0.037014812231, 0.029200151563, -0.008669175208, -0.024679798633, 0.070063769817, 0.024849087000, 0.023216791451, -0.056906450540, -0.009768061340, 0.019092820585, -0.023243598640, 0.041318863630, -0.002661153674, 0.001120634377, -0.026632599533, 0.009371437132, -0.041586715728, -0.029482647777, -0.059470389038, -0.061405710876, -0.056477133185, 0.009883791208, 0.006860338151, -0.001686118543, 0.027714967728, 0.010149665177, 0.070333033800, 0.004064045846, -0.013042554259, -0.026993021369, -0.001797668636, 0.070217400789, 0.019102588296, -0.039796821773, -0.020589049906, 0.056380897760, 0.066339328885, -0.014723308384, 0.064653158188, -0.041451543570, -0.042870812118, -0.021749757230, -0.059651244432, -0.027140654624, 0.055402040482, -0.068013682961, 0.061182186007, 0.043638855219, 0.021698392928, 0.050063453615, 0.046599775553, 0.064276665449, 0.014320783317, 0.049678705633, 0.059357389808, 0.033375985920, -0.062636084855, 0.056172370911, -0.012259494513, 0.000839635730, -0.036689575762, -0.063517466187, -0.071093522012, 0.025048270822, 0.015903010964, 0.006947577000, 0.000871211290, 0.039085336030, 0.066331878304, 0.002881914377, 0.047251380980, 0.010805107653, -0.071026623249, 0.031168513000, 0.019017264247, -0.061389897019, -0.022726960480, -0.060876734555, -0.021334689111, 0.056283801794, 0.072132900357, 0.008652776480, -0.070774875581, 0.010349191725, 0.052427731454, -0.052840255201, -0.022251203656, -0.039341215044, 0.064071118832, 0.020365208387, -0.061585329473, -0.011766668409, 0.012642458081, 0.044167399406, 0.002625815570, 0.039701946080, -0.049521367997, -0.024613294750, -0.020377513021, 0.052952155471, -0.018191769719, -0.034108221531, -0.066270574927, 0.023860208690, 0.011442467570, -0.047683503479, 0.068416401744, -0.038991495967, 0.036643303931, 0.052465550601, -0.038750879467, -0.030679833144, -0.006878286600, -0.046717986465, 0.055899843574, -0.057590298355, 0.040596865118, -0.048594597727, 0.029011793435, -0.020274206996, 0.009245023131, -0.048220172524, 0.066487208009, -0.045404363424, -0.005255617201, -0.014384962618, -0.004997938871, 0.024343498051, -0.063382759690, 0.046909935772, 0.035551838577, 0.043562144041, 0.046174243093, -0.071453101933, -0.045100517571, -0.035582721233, 0.043902553618, 0.044544234872, -0.051477164030, -0.046065054834, -0.066521182656, -0.050089661032, -0.002397261560, 0.032512828708, 0.068508043885, 0.060006543994, 0.020116008818, 0.014456093311, -0.002005368471, -0.045624639839, 0.020530395210, 0.028602011502, -0.043828964233, -0.045983873308, 0.033634066582, 0.008505664766, 0.066921219230, 0.007585830986, 0.068006724119, -0.054495628923, 0.052433878183, -0.035147108138, -0.033811237663, -0.049752123654, 0.064014747739, -0.070165120065, 0.034362688661, -0.048824079335, 0.048416323960, -0.001746997237, -0.026211474091, -0.027079433203, -0.063557349145, -0.017812300473, 0.052868694067, 0.068690955639, -0.046650569886, -0.001172013581, 0.029745146632, 0.002390377223, 0.003477565944, -0.011112809181, 0.017298348248, 0.024407297373, -0.021574735641, 0.021364197135, -0.064107440412, 0.066060826182, -0.043415136635, 0.012592576444, -0.055996902287, -0.044264785945, -0.037855718285, -0.069509051740, -0.064208149910, -0.068809270859, 0.000731393695, -0.065769627690, 0.019080758095, -0.011308100075, -0.069132186472, 0.068980440497, 0.007419444621, 0.054730236530, 0.025328032672, -0.061949845403, 0.069053024054, 0.002963349223, -0.057986494154, 0.050320915878, -0.027962379158, 0.001879401505, -0.012628313154, -0.029428429902, -0.020338438451, 0.055516541004, 0.011938728392, -0.047092121094, -0.068894013762, -0.043297804892, -0.010898899287, -0.064038030803, -0.007008604705, 0.012579873204, -0.016676217318, -0.016818255186, 0.036855824292, -0.060680426657, -0.003923177719, 0.041681624949, 0.067194625735, -0.068469241261, -0.045303516090, 0.039838977158, 0.028470754623, 0.067753866315, 0.049427196383, -0.067904643714, 0.048396430910, 0.029337480664, 0.004600696266, 0.026864387095, -0.025640945882, -0.044671803713, 0.001410752535, -0.062670931220, 0.015794731677, 0.024613328278, -0.062922298908, -0.072088256478, -0.071081772447, -0.000966876745, -0.028413340449, -0.034461278468, -0.069538667798, -0.027094885707, 0.019839555025, -0.006166785955, -0.052704032511, 0.027465872467, 0.027252182364, 0.005127809942, 0.003133468330, -0.002940446138, 0.045411318541, -0.040659755468, -0.012097135186, 0.004100844264, -0.021708305925, -0.013661779463, 0.023428976536, -0.050223872066, 0.052031472325, 0.010123923421, -0.035386223346, -0.009450517595, -0.012159902602, -0.050501786172, -0.009484499693, -0.040044661611, -0.001685537398, -0.064185485244, -0.054477594793, 0.045004107058, -0.046893969178, 0.039069734514, 0.023762851954, 0.040073052049, -0.003530249000, 0.011331260204, -0.024725615978, 0.020420081913, -0.028669938445, 0.018931284547, -0.042149312794, 0.027260497212, 0.070382967591, -0.050522126257, 0.031149759889, -0.053224384785, 0.031443692744, -0.065488368273, 0.021568350494, 0.055051341653, 0.003433100879, 0.013375982642, 0.019321799278, -0.001764580607, -0.067881867290, -0.060489937663, 0.058870494366, 0.040173999965, 0.061814174056, -0.036583893001, -0.058250799775, 0.070254251361, -0.017703007907, -0.056691281497, -0.038106277585, -0.021675717086, 0.019818894565, 0.013437993824, -0.026343431324, -0.005400449038, 0.053481400013, -0.036024238914, -0.056969303638, 0.005247414112, 0.032196968794, -0.007540434599, 0.014793530107, -0.030963085592, 0.041302122176, 0.009115748107, 0.041038177907, 0.052025534213, 0.013901121914, 0.051249817014, -0.050550773740, -0.071673013270, 0.023563139141, -0.051510669291, -0.060274355114, 0.048831939697, 0.037431530654, 0.033605568111, -0.000185847282, 0.054843276739, 0.041634343565, -0.002134017646, -0.022942330688, -0.057271931320, 0.022033318877, -0.070226803422, 0.071613311768, -0.052845846862, -0.049420572817, 0.063292250037, 0.036521762609, 0.057957857847, 0.004925914109, 0.021424368024, -0.001545406878, -0.051947087049, -0.024204142392, 0.035770684481, 0.004508361220, 0.020224064589, 0.025392711163, -0.037623155862, -0.057157300413, -0.015425674617, -0.054660122842, 0.024102471769, 0.046432048082, 0.063692644238, 0.004641763866, 0.002005800605, 0.030296958983, -0.061795450747, -0.056896470487, 0.049593672156, 0.060261473060, 0.022698536515, 0.040368765593, -0.012967862189, 0.054457873106, 0.039911210537, 0.050264067948, 0.029609128833, -0.028518695384, -0.050153322518, 0.010248206556, 0.063353598118, 0.045357681811, 0.064559444785, 0.012222483754, 0.048392906785, -0.013351548463, 0.009033896029, -0.071923300624, -0.033153764904, -0.070155806839, 0.031847752631, 0.024344459176, 0.001595824957, 0.063869014382, 0.062650352716, -0.021143041551, 0.018314421177, -0.063541591167, -0.035550717264, 0.048525907099, -0.043872203678, -0.023682858795, -0.069185160100, -0.007433965802, -0.051557656378, -0.042048037052, 0.060855641961, 0.046957552433, 0.048847861588, -0.033723089844, 0.068976536393, -0.008111618459, -0.054611686617, 0.035592183471, -0.002464517951, -0.058963745832, -0.069850444794, -0.046131435782, -0.021614499390, -0.001916982234, 0.057417646050, -0.005337364972, -0.023719679564, 0.030864030123, 0.014898277819, 0.049936503172, -0.042398840189, -0.027647655457, -0.028072912246, 0.047787122428, 0.036994040012, -0.065454289317, -0.032921273261, -0.053641743958, -0.018741514534, -0.028483144939, -0.004356674850, -0.021714467555, -0.045574657619, 0.020170450211, 0.070364922285, -0.001985751092, -0.069968312979, -0.010620139539, 0.013752922416, -0.007669396698, -0.059149678797, 0.030408106744, -0.045189283788, -0.024524837732, -0.032104488462, 0.065896898508, -0.048115007579, 0.018409498036, 0.021425247192, 0.059127002954, 0.045062005520, 0.041347801685, -0.063576638699, -0.019980631769, 0.004628174007, 0.032788872719, -0.002291336656, -0.050979729742, 0.025058783591, -0.035112902522, -0.064834617078, 0.022966712713, 0.012772984803, 0.024168856442, 0.054124400020, 0.051367230713, -0.013768974692, 0.071007743478, -0.056191645563, -0.001017466187, 0.036714263260, -0.055385321379, -0.014950107783, -0.004522025585, 0.053168624640, -0.059551861137, 0.041202478111, 0.038634255528, 0.038639932871, 0.002820760012, -0.053198494017, -0.031421773136, -0.016810372472, -0.063617505133, 0.020153604448, 0.042810037732, 0.044880568981, -0.040887843817, 0.071406707168, 0.011223614216, -0.018673308194, -0.069648154080, 0.035657554865, -0.061242267489, -0.039523757994, -0.022600304335, -0.057720430195, 0.011029049754, 0.048961676657, -0.071007899940, 0.071857392788, 0.033038951457, 0.030748248100, 0.009282924235, 0.001212172210, -0.032847717404, 0.012406162918, 0.055274322629, 0.052656076849, -0.010025795549, 0.024440750480, -0.054010011256, 0.001701846719, -0.069303125143, -0.041349321604, -0.003355123103, -0.005019068718, -0.041876524687, 0.052621938288, 0.004136897624, 0.064169690013, -0.009117230773, 0.026932388544, 0.003081299365, 0.055251076818, -0.045137718320, -0.033726789057, 0.052851751447, -0.000077769160, 0.004315562546, -0.060843147337, -0.030703991652, 0.067923665047, -0.027544144541, 0.025302030146, -0.010629568249, -0.017208408564, 0.036051340401, -0.032397873700, 0.043402485549, 0.028660200536, -0.038284983486, 0.034182980657, -0.066224411130, -0.022368121892, -0.018315434456, -0.067929163575, -0.014249186963, 0.055504724383, 0.004885971546, -0.016651488841, 0.064681485295, 0.041738629341, -0.020337939262, 0.018048442900, 0.052534103394, -0.016714997590, -0.011963441968, 0.043268986046, 0.051449894905, -0.071870476007, 0.066736713052, 0.050299406052, -0.069322913885, 0.058308154345, 0.014786593616, -0.040638711303, 0.001815497875, -0.053699418902, 0.040209032595, 0.030480444431, 0.010894134641, -0.064305655658, 0.043377369642, 0.047065071762, -0.058144345880, -0.036547172815, 0.065479919314, -0.032418865710, 0.039293073118, 0.011460587382, -0.032661043108, 0.021098166704, 0.045211069286, 0.041862189770, 0.043206453323, -0.062817543745, -0.061735384166, 0.017084851861, -0.043342936784, 0.070814996958, 0.037815734744, 0.047773852944, -0.001135863364, 0.050659038126, -0.044814117253, -0.057487610728, 0.014670707285, -0.060061343014, 0.068804278970, -0.070768184960, 0.049655541778, -0.044053662568, -0.018597275019, -0.026644576341, 0.063221871853, -0.017364196479, 0.013602018356, 0.043479122221, -0.039032910019, -0.050809249282, 0.032173797488, -0.025367364287, -0.004475347698, -0.017612103373, -0.038735207170, -0.021449591964, 0.069818437099, -0.033338598907, -0.045594461262, -0.057133503258, 0.038672246039, 0.038360022008, 0.001353301108, -0.030471533537, 0.028235182166, -0.003659553826, 0.051161721349, -0.022482130677, 0.031213335693, 0.055419176817, -0.027187902480, -0.063215978444, -0.020554516464, 0.006317012012, -0.049201708287, -0.006983242929, -0.062747791409, 0.000086873770, -0.035698141903, -0.017303593457, 0.031565308571, -0.031147811562, 0.006991729140, -0.022097859532, -0.049258660525, -0.036085784435, -0.020312372595, 0.024268463254, -0.000302866101, 0.060229212046, -0.010419804603, -0.014549609274, -0.050006985664, -0.070957466960, -0.004833973944, 0.071530267596, -0.065136641264, 0.018651232123, 0.062954753637, 0.017017915845, -0.066404253244, -0.012275788933, 0.010002687573, 0.065389618278, -0.041009269655, 0.049376010895, -0.070515125990, 0.042160890996, 0.026196829975, 0.024427741766, -0.006750747561, -0.002541162074, -0.017050404102, -0.031749758869, -0.069663569331, 0.041068822145, -0.006749548018, 0.055102050304, 0.064983606339, -0.044849544764, 0.050574831665, 0.058730214834, -0.000819072127, -0.019494343549, -0.014950312674, 0.024546518922, 0.044778943062, 0.016543798149, -0.000426441431, 0.056017965078, -0.021797712892, 0.043764472008, -0.022749122232, -0.057376012206, 0.008012771606, -0.014502137899, -0.054753087461, -0.016337972134, 0.005303211510, 0.034378878772, -0.037373632193, 0.050931446254, -0.024308089167, -0.071754589677, -0.022011946887, -0.006722442806, -0.013418514282, 0.016680344939, 0.022060848773, 0.065316647291, 0.062025129795, 0.023315399885, -0.016673997045, 0.063401684165, 0.020356178284, -0.028439220041, 0.032760947943, 0.027014993131, -0.069144107401, 0.025879703462, 0.028514035046, -0.018964871764, -0.070266768336, -0.017528861761, -0.016556646675, 0.029977329075, -0.046423841268, -0.000046901405, -0.009243920445, -0.002759367228, 0.017533659935, -0.045734245330, -0.021039821208, 0.030794769526, 0.065089240670, -0.009330809116, -0.058531507850, -0.025150630623, -0.002178192139, -0.028248950839, 0.013500280678, 0.030223727226, 0.052339896560, -0.013599731028, 0.000434167683, 0.071492627263, -0.043255664408, -0.038213714957, 0.015024662018, 0.047233641148, -0.027613107115, 0.021659992635, 0.002233579755, 0.002377562225, -0.050784491003, -0.005449034274, -0.003490038216, -0.018190771341, -0.001227609813, 0.014648735523, 0.068239226937, -0.029390729964, 0.029336631298, -0.014055255800, 0.052160844207, -0.014518551528, -0.047468267381, 0.036351621151, 0.058497563004, 0.068547129631, -0.029019005597, -0.037226635963, -0.033755492419, -0.058334853500, 0.034394964576, 0.040600672364, 0.005664095283, 0.050563767552, 0.035621263087, -0.042023602873, 0.067052051425, 0.069901257753, 0.014784857631, -0.053347051144, 0.069194108248, 0.016919910908, 0.065863028169, -0.007202833891, -0.055836915970, 0.007173635066, 0.061261326075, -0.056550879031, -0.014883380383, -0.064942948520, 0.039490617812, -0.064722307026, -0.053322155029, -0.022201940417, -0.022005442530, 0.012180685997, 0.052230410278, 0.035763643682, -0.064584471285, -0.067410841584, -0.030312322080, -0.065659455955, -0.002230100334, -0.046425595880, 0.007417999208, -0.013704966754, -0.044273387641, -0.025323126465, -0.003048472106, -0.039636682719, 0.026257880032, 0.063809514046, 0.046324633062, -0.068643696606, -0.066388092935, 0.054652377963, 0.010107509792, -0.039831131697, -0.069232068956, -0.038088195026, -0.051369555295, 0.033989049494, 0.036600567400, 0.030911982059, -0.026448596269, -0.001545168459, -0.013572718948, -0.037900954485, 0.063492372632, -0.057673424482, -0.006875582039, 0.000302508473, 0.070775285363, -0.004005543888, 0.059495240450, 0.022453911602, -0.017372246832, -0.014761041850, 0.061333566904, -0.050537042320, -0.053463608027, -0.046098574996, -0.038568578660, 0.017355233431, 0.000543206930, 0.034356817603, -0.013429768384, 0.018659800291, 0.059499382973, 0.006404608488, 0.040939308703, 0.050306789577, 0.069949835539, -0.034142136574, -0.041115622967, -0.022528484464, 0.021547496319, -0.048813447356, 0.035830803216, 0.010052256286, 0.046677432954, -0.000928543508, -0.051162011921, -0.005838848650, -0.050682488829, 0.007333889604, 0.055540263653, 0.032730765641, -0.060134347528, 0.023432113230, -0.036076493561, 0.054206788540, -0.070278778672, -0.029247194529, -0.054087217897, 0.026521325111, 0.003445833921, 0.028701737523, 0.028967991471, 0.001813225448, 0.024038307369, -0.070996664464, 0.061963543296, -0.005968034267, -0.019338335842, -0.057705994695, 0.057489350438, 0.062074139714, 0.001823775470, 0.070017591119, 0.046228982508, 0.045465752482, 0.064898490906, 0.047028698027, 0.071133613586, -0.032123103738, 0.001745395362, 0.064427375793, 0.005130596459, 0.008599489927, 0.011225320399, 0.058496192098, 0.010292738676, -0.003657631576, 0.061323583126, 0.020710974932, -0.026984039694, 0.071114093065, -0.057029526681, -0.061588425189, -0.069837369025, -0.012251544744, 0.027182415128, 0.053173020482, 0.066108062863, 0.014149874449, 0.067352458835, 0.060995861888, 0.070504277945, -0.046536095440, 0.034467212856, 0.045805566013, 0.027473546565, 0.009450331330, -0.049440342933, 0.036334708333, -0.049562163651, 0.031310789287, 0.063858896494, -0.036687888205, -0.031062263995, 0.004977479577, -0.008489280939, -0.055806666613, 0.045253001153, 0.043363742530, 0.006315104663, 0.040563672781, -0.047142192721, 0.051155559719, 0.028622739017, -0.045679699630, 0.017771244049, 0.051183521748, -0.014485344291, -0.003725282848, -0.020815916359, 0.016057580709, -0.027291208506, -0.062966160476, -0.019102659076, -0.000519804657, 0.042848974466, 0.023818805814, -0.048688612878, -0.000557832420, 0.000852562487, -0.037894435227, -0.043642722070, -0.005464948714, 0.048484839499, 0.005651019514, 0.063045874238, 0.000425018370, -0.007877476513, 0.015651956201, 0.065387234092, 0.020869910717, -0.059439487755, 0.056394428015, -0.056884665042, -0.066457241774, 0.017713688314, -0.022494450212, -0.056298755109, -0.061568845063, 0.015715964139, 0.033787801862, -0.056383274496, -0.017684731632, 0.035571433604, -0.052884697914, 0.071485728025, 0.047816701233, 0.061479926109, 0.046715162694, -0.016754418612, 0.042934872210, 0.042571209371, -0.015524264425, 0.013467416167, 0.050299890339, -0.032942213118, 0.052621684968, -0.069462992251, -0.068572252989, -0.026681981981, 0.041905775666, -0.023888286203, -0.027953293175, -0.007953733206, -0.034255612642, 0.006340481341, -0.004705429077, 0.053559496999, 0.028269648552, -0.050152171403, -0.061567917466, -0.039184566587, 0.036627978086, -0.033779423684, -0.027342863381, -0.071240738034, -0.048896431923, -0.021120760590, -0.006207942963, -0.028850417584, -0.062980435789, -0.056698098779, -0.019914869219, -0.048884868622, 0.063227310777, 0.024047344923, 0.039287738502, -0.057923674583, -0.029267173260, 0.016976773739, -0.029609717429, 0.062173351645, -0.025014992803, -0.060908772051, 0.022141166031, -0.015556443483, 0.063332930207, 0.064071103930, -0.002912849188, 0.033802203834, 0.037064380944, -0.009443879128, -0.026267703623, 0.054151222110, -0.050562493503, 0.049766607583, 0.029233157635, 0.023907519877, -0.050804276019, 0.053111553192, -0.004823409021, 0.053900256753, -0.010840877891, -0.018727060407, -0.026038069278, 0.047150276601, -0.047630421817, 0.020496785641, 0.051344007254, -0.018861941993, -0.030550990254, 0.017416454852, -0.035498067737, 0.000998400152, 0.053237304091, -0.038262754679, -0.001070477068, 0.001154825091, 0.043602876365, 0.037469334900, 0.030647724867, -0.007253214717, 0.046199299395, 0.040271498263, -0.046355772763, -0.006453186274, -0.008103810251, -0.013416726142, -0.052997503430, 0.060781940818, -0.030866265297, 0.031616941094, 0.030774034560, 0.053776592016, -0.062011376023, -0.002764187753, 0.055500313640, -0.029645711184, 0.018424198031, -0.043759278953, 0.039489962161, -0.035364493728, -0.055922400206, -0.062546938658, -0.009248532355, 0.054631561041, -0.043637990952, -0.041274126619, 0.022549390793, -0.024835634977, 0.071241512895, 0.041978694499, -0.017151109874, -0.050718314946, 0.005579046905, -0.026975695044, -0.043109152466, -0.041213009506, 0.013189546764, 0.016825862229, -0.028932988644, -0.025429531932, 0.019804418087, -0.063686035573, -0.045393057168, -0.031698588282, 0.027085386217, 0.049572058022, -0.031367812306, 0.038632981479, -0.025726564229, 0.039354547858, 0.036863975227, 0.040924094617, -0.053671874106, 0.003085583448, -0.031880803406, -0.024604570121, 0.050238497555, -0.013329695910, 0.016371436417, -0.033762305975, -0.013279933482, 0.067873358727, -0.071939818561, 0.065225198865, -0.068921230733, -0.057251676917, 0.038773626089, 0.004147648811, 0.013831451535, 0.005497023463, -0.058123819530, 0.054151207209, -0.064244814217, -0.034258190542, -0.007029697299, -0.005670465529, 0.028510779142, 0.020468637347, 0.044830597937, 0.022897526622, 0.008879214525, 0.042640641332, -0.032331489027, -0.041481874883, -0.029475953430, -0.051657095551, 0.018131308258, -0.036707762629, 0.032795116305, -0.050535444170, 0.058000400662, -0.039314027876, -0.008364073932, -0.064345166087, -0.070016473532, -0.000853799284, -0.038053266704, 0.023584574461, -0.027751531452, 0.051981262863, 0.009833551943, 0.058695539832, -0.044810518622, 0.035095594823, 0.061889439821, -0.007971487939, -0.019272487611, -0.003653086722, -0.024451278150, 0.041081935167, 0.023304216564, -0.033870257437, 0.022288352251, -0.067566588521, -0.003569655120, 0.001189783216, -0.034186698496, -0.027399644256, -0.046847600490, 0.046912640333, 0.038548052311, -0.001448743045, -0.019174702466, 0.063631311059, 0.053509414196, -0.059041194618, -0.010096788406, 0.023368827999, 0.057204291224, -0.000796191394, -0.016738381237, 0.005656063557, 0.014136053622, -0.042835555971, -0.003882586956, 0.051140077412, 0.024736113846, -0.057517465204, 0.071110457182, -0.049457635731, 0.042198538780, 0.053207322955, 0.016343459487, 0.014786526561, -0.043170921504, 0.024736993015, 0.012839585543, 0.057117119431, -0.027554605156, 0.046341612935, -0.069813020527, -0.032222662121, -0.009965848178, 0.040229700506, -0.068205535412, -0.015147067606, 0.000098749995, -0.026218220592, -0.064892873168, 0.035803511739, 0.015432059765, -0.063137188554, -0.059838727117, -0.008179739118, 0.000804193318, 0.028461635113, -0.008302211761, -0.026906613261, -0.022580686957, 0.003470972180, -0.046334162354, 0.064519226551, 0.036108449101, 0.000401921570, 0.038736671209, 0.002560071647, 0.062119573355, -0.016799241304, -0.032335776836, 0.032600097358, 0.006389692426, 0.032928414643, 0.058721154928, -0.008214101195, 0.064013957977, -0.032697007060, -0.014296058565, 0.059351906180, 0.008688703179, 0.004147164524, -0.039270289242, 0.007001586258, 0.044349804521, -0.046669341624, 0.009472161531, -0.068291254342, -0.051846776158, -0.011452667415, -0.023062516004, 0.025093525648, 0.002782389522, 0.059314653277, -0.039060562849, 0.005107901990, 0.026995979249, 0.021728366613, -0.039866853505, -0.021652508527, 0.065623402596, -0.062528736889, -0.046818919480, 0.068062916398, 0.061865746975, 0.072159335017, 0.028432644904, 0.065973803401, 0.055717051029, 0.067549869418, -0.036282092333, 0.019388854504, -0.036165725440, -0.052739512175, 0.003063492477, 0.006710283458, -0.031360808760, -0.009906969965, -0.053566191345, 0.017728298903, -0.056715115905, 0.068456724286, -0.017304576933, -0.061321415007, -0.034029707313, 0.065101176500, 0.064226970077, -0.054718092084, 0.067945688963, 0.071323677897, 0.071940302849, -0.027226977050, 0.004743300378, -0.045869313180, 0.060442239046, -0.067514091730, -0.026253353804, 0.045212768018, -0.033768806607, 0.026753678918, -0.025688812137, -0.016569588333, 0.033055640757, -0.055122595280, 0.056048527360, -0.042051184922, -0.039634756744, -0.013412218541, 0.044950015843, 0.021306008101, -0.009448297322, 0.011142060161, -0.065593846142, -0.034551389515, 0.019057437778, 0.048683591187, 0.036687299609, -0.039269533008, 0.057725831866, 0.066654771566, -0.026646416634, 0.049786262214, -0.055096510798, 0.022986173630, -0.048021540046, 0.020599856973, -0.008014246821, 0.048830844462, 0.035715535283, 0.006496436894, 0.004633814096, 0.049211375415, -0.046772442758, 0.039419844747, -0.064932659268, -0.051572196186, -0.047792315483, 0.047664575279, -0.063147909939, 0.050935253501, -0.051952868700, -0.007857829332, -0.032287441194, -0.071625284851, -0.021960519254, -0.014159474522, 0.038257353008, 0.011210590601, -0.022364869714, -0.001808255911, 0.066761434078, -0.066401064396, 0.067558348179, -0.064566008747, -0.059671256691, 0.063199907541, 0.044520832598, -0.071749269962, -0.004023455083, 0.005067832768, 0.000470593572, 0.025780059397, 0.036119304597, -0.042140830308, -0.054748959839, -0.058750301600, -0.041015893221, -0.041446432471, -0.016747277230, -0.067346766591, 0.029925435781, 0.042714044452, 0.039954759181, 0.044024825096, 0.004760473967, -0.021236147732, -0.069040402770, -0.065104328096, -0.009117834270, -0.021076779813, -0.003262601793, 0.022070400417, 0.023743428290, -0.063918255270, -0.065325304866, 0.022075936198, -0.063353888690, 0.001773513854, -0.007547013462, -0.058716699481, -0.011504132301, -0.064874932170, 0.037010453641, -0.053875837475, -0.006258681417, -0.029579915106, -0.005335167050, -0.006482414901, -0.037357371300, 0.043156214058, -0.070380337536, 0.044103734195, 0.034513175488, -0.026247248054, -0.034220974892, -0.024010587484, -0.051676243544, -0.061885219067, 0.041976973414, 0.050728984177, 0.023155912757, 0.063352882862, 0.018542557955, 0.069742307067, 0.037263028324, -0.058203604072, 0.061917155981, 0.069882005453, 0.022497698665, 0.040375784039, 0.019445650280, 0.071574971080, 0.003096751869, 0.050713270903, 0.047268517315, -0.056295640767, -0.001274354756, -0.007661841810, 0.059048607945, -0.070917122066, 0.065306723118, 0.061979025602, -0.007637329400, -0.035207435489, 0.018740892410, 0.037084870040, 0.054880812764, 0.045773148537, 0.058668509126, -0.038442902267, -0.002621285617, -0.027597654611, 0.002455130219, 0.054436683655, 0.063987493515, 0.013559192419, -0.004638805985, 0.055211797357, -0.001547247171, -0.000135533512, -0.051468960941, 0.068507552147, 0.032005049288, 0.052078753710, -0.020974781364, 0.001958705485, -0.012933690101, -0.006973139942, 0.061643421650, 0.049788311124, -0.002083092928, -0.064714357257, -0.070766672492, 0.063002705574, -0.025533165783, 0.021501965821, -0.053757891059, -0.029508732259, 0.004779793322, -0.027220163494, 0.040431752801, -0.055812072009, 0.051117345691, 0.070289835334, -0.045611184090, 0.003961615264, 0.051358461380, 0.064697176218, -0.009916983545, 0.041286379099, 0.017651490867, 0.030714042485, 0.009618036449, -0.068315170705, 0.023116387427, 0.058950483799, -0.039070505649, 0.037753321230, 0.017743736506, -0.061265256256, -0.029447495937, -0.020987737924, -0.032248865813, 0.059905037284, 0.017118453979, -0.052266664803, -0.019783619791, -0.049417320639, 0.058993518353, -0.023017574102, 0.026671901345, 0.050436854362, 0.040698386729, 0.019768029451, -0.054625846446, 0.055088594556, 0.049036197364, -0.041753824800, -0.026085127145, 0.067899838090, 0.020950108767, 0.035426191986, 0.005765825510, 0.049541294575, -0.058062165976, -0.070717908442, 0.009604752064, 0.059046998620, -0.044288411736, -0.041439291090, 0.027621127665, 0.012193679810, -0.032079160213, -0.015390366316, -0.032154902816, 0.043855823576, 0.065579950809, 0.047794677317, 0.056397020817, 0.030575715005, -0.067915730178, -0.012866843492, -0.014733597636, 0.045330569148, 0.050304792821, -0.065457105637, -0.032807782292, -0.040206782520, -0.016583867371, -0.025818344206, 0.006501913071, 0.065362811089, 0.002979561687, 0.026155516505, -0.053673990071, -0.041193909943, -0.053764548153, -0.061394974589, -0.038211442530, -0.051235623658, 0.042292296886, -0.033133205026, -0.066474311054, -0.017642680556, 0.044921830297, 0.035534821451, 0.058797717094, -0.050349924713, -0.038391903043, 0.008888162673, 0.065116122365, 0.000861868262, -0.002563543618, -0.022909242660, 0.003214478493, 0.017349690199, -0.053695291281, -0.007710881531, -0.032240968198, 0.043309368193, 0.000861197710, -0.011319145560, 0.024043418467, 0.027417279780, 0.059622332454, -0.069703713059, -0.037587780505, 0.008219264448, 0.027114741504, -0.005619823933, 0.063710004091, -0.032139107585, 0.057504147291, 0.002106405795, -0.061845041811, -0.029061641544, 0.010034292936, -0.014202352613, -0.042225278914, -0.045091055334, 0.040602818131, -0.058092124760, 0.071663632989, 0.007348500192, 0.000416718423, -0.013100884855, 0.063309594989, -0.017802339047, -0.052131559700, 0.019944205880, -0.038749124855, 0.016495116055, 0.054410651326, 0.037401713431, -0.015812195837, 0.045189954340, 0.063616573811, -0.057991072536, 0.013682097197, -0.018657445908, -0.034417558461, -0.025246728212, -0.041024737060, 0.068138480186, -0.016338851303, -0.026558425277, -0.016882091761, -0.027740933001, -0.046768020838, 0.062557041645, 0.033462435007, 0.037077941000, -0.015641391277, 0.044282712042, 0.063240960240, 0.041409112513, -0.013391949236, 0.001278728247, 0.064832463861, 0.061434134841, -0.052730239928, 0.013149335980, 0.061086878181, 0.070642590523, -0.070092216134, -0.046312842518, -0.061424087733, 0.034715041518, 0.069852560759, -0.031717084348, -0.030824471265, -0.051697682589, -0.011383224279, -0.025169663131, 0.062291443348, 0.004615388811, 0.046427279711, -0.041149176657, -0.045041225851, 0.023014083505, -0.040972121060, -0.008669450879, -0.044787876308, -0.003658711910, 0.023904785514, 0.052535906434, -0.001917704940, -0.048473827541, 0.013674944639, -0.044047415257, 0.026172019541, 0.068488433957, -0.021017745137, -0.039607036859, 0.007593534887, -0.008177347481, 0.020396009088, -0.062767185271, -0.031856577843, -0.040380496532, 0.044326007366, -0.069824479520, -0.025843739510, -0.058882497251, -0.057516295463, -0.005124405026, -0.063150316477, -0.050943598151, 0.004443943501, 0.026846028864, -0.056774683297, -0.055236503482, 0.030648104846, -0.006677828729, -0.006562255323, -0.010837815702, 0.045555330813, 0.071645379066, -0.009971406311, -0.019208580256, 0.031964823604, -0.043941840529, 0.045576378703, -0.014127023518, 0.004586100578, -0.023816414177, -0.047444917262, 0.009021304548, -0.069708473980, -0.023388080299, 0.017028898001, 0.038695856929, -0.063783511519, 0.039212338626, 0.065517261624, 0.070885166526, 0.028085716069, -0.002743847668, 0.068998306990, -0.030085645616, -0.036284949630, 0.006804488599, 0.054180011153, -0.037923682481, -0.030151631683, 0.071052327752, 0.027590379119, 0.015418566763, -0.039085078984, -0.007809959352, 0.055545613170, -0.009367667139, -0.059789568186, 0.049861215055, -0.061843425035, 0.055883854628, -0.060124233365, -0.010390743613, -0.047733437270, 0.003080271184, -0.028245475143, 0.000677607954, -0.030946154147, 0.053662165999, -0.053016394377, -0.055605940521, -0.050384957343, 0.069250971079, -0.024850279093, -0.069032937288, 0.008358448744, 0.032291553915, 0.036142684519, -0.035117253661, -0.037279270589, 0.049893803895, -0.012586671859, -0.062516950071, -0.020265139639, 0.020254507661, -0.024822145700, -0.060116417706, -0.044234499335, -0.030970189720, 0.012244418263, -0.032417368144, -0.070209957659, -0.057575039566, 0.031484402716, -0.067455217242, 0.004669830203, -0.010600402951, 0.006553202868, 0.057831898332, -0.065741457045, 0.035130485892, -0.058739908040, 0.072149723768, -0.021887768060, 0.004293493927, -0.038965050131, -0.035886690021, 0.002493239939, -0.031127113849, -0.040352087468, 0.022395722568, 0.031801983714, -0.050109893084, 0.070202440023, 0.049813725054, 0.035430632532, 0.062609165907, 0.025415182114, -0.029384002090, -0.018696896732, -0.071291066706, -0.007345229387, -0.024388439953, -0.025058146566, -0.039793431759, -0.013588495553, 0.006150625646, -0.051899891347, -0.043079853058, 0.057157710195, 0.046740300953, 0.015744507313, 0.068171292543, 0.044999018312, -0.030089981854, 0.068656489253, -0.030736666173, 0.020525746047, 0.020553879440, -0.041577577591, -0.035251498222, 0.032965287566, 0.046837568283, 0.069554865360, -0.065473541617, 0.052768863738, 0.046243555844, -0.036449339241, -0.061578430235, -0.039262700826, -0.026119180024, 0.045051082969, -0.025368876755, 0.071971446276, -0.023053605109, 0.009636171162, -0.051787570119, -0.025462791324, -0.003902524710, 0.048418320715, -0.031965751201, -0.042359471321, -0.013781223446, 0.058375492692, 0.071933507919, -0.008856453001, 0.023892551661, -0.053036957979, -0.041625224054, 0.048441842198, -0.006086774170, -0.062607698143, -0.037936776876, -0.034842863679, -0.051063422114, -0.042252123356, 0.001405104995, -0.045281358063, 0.041837185621, -0.048863500357, 0.034163936973, -0.022627610713, -0.012494515628, 0.059621289372, 0.042164988816, -0.072056271136, -0.054864946753, 0.000160209835, -0.040599551052, 0.012960188091, 0.027168199420, 0.043258696795, 0.025953926146, 0.004783600569, -0.051147989929, -0.015011720359, -0.052039608359, 0.056486651301, 0.056366890669, -0.017903529108, -0.029195610434, 0.056539848447, 0.061910584569, -0.043347273022, -0.038743242621, -0.006989434361, -0.037583515048, -0.026419311762, -0.056517273188, 0.070915356278, 0.055855721235, -0.042059857398, -0.051595151424, -0.023741170764, 0.001287035644, -0.023562379181, -0.040377900004, -0.016970425844, -0.034335725009, -0.050203721970, -0.017909999937, -0.026704780757, 0.066235587001, 0.040441356599, -0.065639548004, 0.065201595426, -0.005415640771, 0.016999624670, 0.069825083017, 0.071808263659, -0.004045911133, 0.015139155090, 0.064536780119, 0.038953229785, 0.061483085155, 0.040537938476, -0.005087010562, -0.054162271321, 0.007743455470, 0.055162429810, -0.013180620968, -0.061741698533, 0.054945573211, 0.059334859252, -0.049044080079, 0.016657285392, 0.017070159316, -0.014746744186, 0.047491081059, -0.049007844180, -0.059773202986, -0.028787974268, 0.060274973512, -0.067837350070, -0.064692750573, -0.039358161390, 0.066935017705, -0.006963163614, -0.038898427039, -0.013651452959, -0.072115875781, 0.047556124628, 0.058729186654, -0.050379104912, -0.036634996533, -0.016722001135, 0.060789331794, 0.044668719172, 0.042676977813, -0.039965685457, 0.071017697453, -0.017988890409, 0.041438363492, 0.031772524118, 0.064100950956, 0.005903989077, 0.022570982575, 0.026149220765, 0.057266101241, -0.063040509820, 0.068553745747, -0.052557297051, 0.022415131330, -0.001915089786, 0.034951165318, -0.066423982382, -0.062345780432, -0.029910191894, -0.013527534902, -0.050220564008, -0.069791808724, -0.020337078720, 0.057930067182, 0.021194286644, 0.049666777253, -0.061392962933, 0.059922024608, -0.047461263835, -0.044273011386, 0.011353798211, -0.054291751236, 0.005906619132, 0.053205922246, -0.014323364943, 0.049400061369, 0.019286885858, 0.028551660478, 0.020095154643, 0.008447468281, -0.044512316585, 0.018689066172, -0.014004804194, 0.052735932171, -0.023469656706, 0.048881515861, -0.066287450492, -0.014027155936, 0.061406448483, -0.051948569715, -0.042191982269, -0.026420496404, 0.025092802942, 0.032360188663, 0.005224771798, -0.026539359242, -0.060919873416, -0.036811463535, -0.070470407605, 0.027725547552, -0.043710310012, 0.009194947779, 0.060580253601, 0.004900775850, -0.007218778133, -0.031575769186, -0.065252624452, -0.043452214450, 0.040629424155, 0.070641785860, 0.043207697570, 0.000537186861, -0.000960737467, 0.014981143177, 0.054919436574, 0.006504751742, 0.000093773007, -0.041168168187, -0.044346842915, 0.068464562297, 0.023930907249, 0.035066857934, 0.043325744569, -0.036922186613, 0.062135219574, 0.046055473387, 0.017723344266, -0.048022072762, -0.066729366779, 0.059798434377, 0.009985856712, -0.041031897068, 0.050908342004, 0.066407009959, 0.027248740196, -0.002036750317, -0.041547399014, -0.059830483049, 0.004174746573, -0.026045087725, 0.025735132396, -0.014927703887, 0.059740111232, 0.055949494243, -0.035590671003, -0.039942439646, -0.004118449986, -0.012094449252, -0.026732705534, 0.068554818630, -0.005986012518, -0.070317201316, 0.034667879343, 0.043934546411, -0.030522789806, 0.005574077368, 0.065911516547, 0.014013320208, 0.001917220652, -0.008817978203, -0.037448100746, 0.028929598629, -0.037664830685, 0.009341739118, -0.001244209707, 0.036555401981, 0.001214653254, -0.025283034891, 0.027979791164, 0.067286595702, -0.011051192880, 0.045753777027, 0.032435156405, 0.025701463223, 0.065176725388, -0.021121207625, -0.029906511307, -0.060544341803, 0.019740566611, -0.019282825291, 0.071839630604, -0.006910786033, -0.024165894836, -0.049788497388, 0.031737186015, 0.046752482653, 0.034311823547, -0.011833325028, 0.058296278119, 0.017577245831, 0.028801776469, -0.049518339336, -0.000009343028, -0.037982236594, 0.063560873270, -0.027064498514, -0.066492743790, 0.045471057296, 0.002322480083, -0.065758012235, -0.019527208060, -0.015946079046, -0.032050751150, 0.044368885458, 0.048397704959, -0.022448576987, 0.066052019596, -0.016066007316, -0.039760395885, 0.068865567446, -0.008762694895, 0.004198610783, -0.020984966308, -0.012399088591, -0.061739943922, -0.020809654146, -0.071339868009, 0.065798580647, -0.027190275490, -0.065417736769, -0.028058011085, 0.001473724842, 0.025497376919, -0.039411157370, 0.060491859913, 0.070902720094, -0.056099660695, 0.025664262474, -0.003278397024, -0.063082180917, 0.038177102804, -0.062719568610, 0.006878435612, -0.013315673918, 0.053477153182, 0.046403415501, 0.000304706395, -0.066752269864, 0.002780050039, -0.043743088841, 0.016220986843, -0.046044304967, 0.060145393014, -0.029451452196, -0.055344112217, -0.039322476834, -0.065145604312, 0.052926510572, -0.026157204062, 0.025827221572, 0.048167690635, -0.051528200507, -0.030079897493, 0.023492194712, 0.046423047781, -0.047700915486, 0.000591948628, -0.035459388047, -0.033020537347, 0.063648074865, -0.020777836442, -0.011456195265, 0.024141378701, -0.047117948532, 0.049677446485, 0.028060629964, 0.010604478419, -0.052733868361, 0.052741214633, -0.010223615915, 0.018849745393, -0.024942316115, -0.051274403930, -0.068781949580, 0.040803037584, 0.059427082539, 0.000049844384, 0.035286240280, 0.026710703969, -0.030356008559, 0.043321341276, 0.067210122943, 0.000091627240, 0.013154141605, -0.005451530218, -0.039341729134, 0.032745458186, -0.015070497990, 0.042917281389, 0.015042074025, 0.028141014278, 0.057018890977, -0.040584530681, 0.039029128850, -0.040841922164, -0.023764606565, -0.005549363792, -0.034313663840, 0.009476415813, 0.065026402473, 0.065795317292, 0.013377629220, -0.015860669315, 0.030800245702, -0.005797795951, 0.023025199771, 0.055838212371, -0.029471792281, 0.006307534873, -0.063807994127, 0.062585398555, -0.058285180479, 0.010528117418, 0.019753217697, -0.064287744462, 0.030472785234, -0.016833893955, -0.030969414860, -0.027943830937, -0.041807197034, 0.066990286112, 0.059060871601, 0.057011574507, 0.023983523250, 0.066891223192, -0.006453663111, -0.003343597054, 0.012767009437, -0.030103143305, -0.029170591384, 0.003800012171, -0.056850373745, -0.005573183298, -0.033342037350, -0.016442723572, 0.049392201006, 0.048808075488, 0.023219525814, -0.067662589252, -0.013237141073, -0.010329108685, -0.021246314049, 0.008422881365, -0.027867794037, -0.022431440651, -0.036567788571, 0.020925775170, -0.041143476963, 0.067973718047, 0.021660596132, 0.001073144376, -0.051068823785, 0.067610695958, 0.051854297519, -0.019352495670, 0.050043411553, -0.061422109604, -0.018709372729, -0.012131787837, 0.037887223065, 0.000716321170, 0.033882305026, -0.041832767427, -0.017538305372, 0.071939289570, 0.042592048645, -0.042472895235, -0.030484557152, 0.013029165566, 0.067204236984, -0.032110303640, 0.065781891346, -0.050068959594, 0.039605490863, -0.009226046503, -0.019579052925, -0.039606314152, 0.048922657967, -0.046075843275, -0.058599833399, -0.040332887322, 0.058312252164, -0.020081013441, -0.017168059945, -0.016919288784, 0.045804359019, 0.009013786912, 0.067314594984, 0.019567228854, -0.000828228891, 0.034486040473, -0.020466368645, -0.067810766399, 0.063273966312, 0.062975704670, 0.008917324245, 0.013350635767, -0.019000437111, -0.029253080487, -0.011795729399, 0.032110385597, -0.004410669208, 0.037200585008, 0.026726372540, 0.001770585775, 0.017756745219, 0.047343850136, 0.033779561520, -0.043484650552, 0.013708323240, -0.057818990201, -0.003423057497, -0.017188485712, 0.062108352780, 0.065008327365, -0.045569129288, -0.057856515050, -0.054467581213, -0.044499121606, 0.032311104238, -0.070919238031, 0.045755892992, -0.034187559038, 0.008985482156, 0.047052375972, 0.026470221579, -0.047748766840, -0.063927680254, 0.051335848868, -0.021335151047, -0.003174871206, 0.019770957530, -0.066433124244, -0.012911751866, -0.052932601422, 0.068351566792, -0.043476752937, 0.022645436227, 0.060104668140, -0.009379401803, -0.053178258240, 0.070469617844, 0.004225492477, -0.053140796721, 0.069734290242, -0.054202742875, 0.033345237374, -0.002173855901, 0.047950044274, 0.051264405251, -0.063311919570, -0.053432051092, -0.071722671390, -0.046229429543, 0.070903435349, 0.005991674960, 0.006133832037, -0.014649529010, -0.046452179551, 0.055866241455, -0.018789760768, 0.036137558520, -0.042340233922, 0.069870650768, -0.008605927229, 0.005510620773, 0.013441383839, -0.047676242888, -0.028170660138, 0.048289977014, 0.056191235781, -0.011776886880, 0.040148623288, 0.029155038297, 0.017160348594, 0.039227500558, -0.033856183290, -0.045163422823, 0.037867233157, 0.029128178954, 0.017310321331, -0.021557766944, -0.044514983892, 0.062049165368, -0.038091860712, -0.018623959273, 0.016556009650, 0.055900767446, -0.000120632350, -0.002476654947, -0.035447292030, 0.039214611053, -0.071444809437, -0.005135193467, 0.042496316135, 0.024415664375, 0.043640121818, -0.013705033809, 0.046653151512, -0.059395920485, 0.028480529785, 0.048260986805, -0.066982075572, 0.027771733701, -0.038416009396, -0.006529286504, 0.015176974237, -0.060504801571, 0.067422419786, -0.062315620482, 0.004903838038, -0.013766102493, -0.024510521442, -0.059083331376, 0.068672254682, 0.037974014878, -0.000670842826, -0.068820625544, 0.025654278696, -0.056699112058, 0.069503188133, -0.030708052218, -0.042912103236, 0.059912294149, 0.018871009350, -0.042506292462, 0.019234135747, 0.013022169471, 0.008313864470, 0.061803743243, 0.033207587898, -0.062235556543, -0.005305118859, -0.043239131570, -0.036463998258, -0.004409015179, -0.065528877079, 0.006657443941, 0.029216565192, -0.042907685041, 0.025629058480, 0.044036887586, -0.051447656006, -0.041652873158, 0.057782799006, -0.028967469931, -0.010980404913, -0.049965448678, 0.055697098374, -0.062710180879, -0.060529064387, -0.052869401872, 0.067883968353, -0.004351750016, -0.000167280436, -0.030525613576, -0.067907899618, -0.049452319741, -0.042645733804, 0.024529173970, 0.053017109632, 0.041738577187, 0.061559140682, 0.072064444423, 0.016283981502, -0.016951929778, -0.014585349709, -0.023853581399, -0.042634598911, 0.040312774479, -0.027403619140, -0.056229308248, 0.054209351540, -0.017072204500, -0.006223067641, 0.066118434072, -0.004559934139, -0.044840939343, 0.059597045183, -0.052501618862, 0.039517082274, -0.043068580329, -0.038062434644, 0.039543971419, 0.038782887161, -0.000731527805, 0.056953787804, -0.048128236085, 0.055552184582, -0.042980380356, -0.037403948605, 0.065765187144, 0.030683770776, -0.004633486271, 0.070309609175, -0.065263934433, 0.057388037443, -0.061023555696, -0.025144524872, 0.019397251308, -0.050611168146, -0.054391443729, 0.041703492403, -0.023848865181, -0.026016682386, -0.041051581502, -0.067194178700, 0.071528792381, -0.039269033819, 0.049221977592, -0.029137264937, -0.021816447377, 0.025539860129, -0.022593762726, -0.010022938251, 0.069515570998, 0.045867957175, 0.070296362042, -0.052338052541, 0.032741688192, -0.023887306452, 0.046519562602, -0.063903167844, 0.046562679112, -0.062985084951, -0.032345220447, 0.033847115934, -0.034993920475, -0.030112762004, -0.035202771425, -0.069833859801, -0.037558116019, -0.053412951529, 0.045234948397, -0.035262838006, -0.022716533393, -0.016520448029, -0.040014587343, 0.014790810645, 0.070800691843, -0.004700027406, -0.005621805787, 0.069143608212, 0.007300078869, 0.064256861806, 0.021706484258, 0.006288036704, 0.004407502711, 0.019125133753, 0.068880051374, -0.060382429510, -0.032100856304, -0.001166887581, 0.020887337625, -0.035762924701, -0.017711266875, -0.071430489421, 0.023017883301, 0.035129331052, 0.057366266847, 0.002385854721, 0.038632534444, 0.040941886604, -0.017959121615, 0.015550471842, -0.031069230288, 0.001049317420, 0.061425685883, 0.009019255638, 0.048864737153, 0.052618995309, -0.051156662405, 0.014365591109, 0.018134765327, -0.021680846810, -0.064145483077, -0.010264910758, 0.023781247437, -0.050048846751, 0.013820610940, -0.021511226892, 0.071781635284, 0.035773128271, -0.009330295026, 0.036009162664, 0.062905877829, -0.023021824658, -0.000003509223, 0.047262445092, 0.012174062431, 0.036043129861, 0.037758417428, 0.020523235202, 0.038103900850, -0.036328531802, 0.047856017947, -0.044158950448, 0.070644095540, -0.032018058002, -0.058825701475, 0.050887107849, 0.030503056943, 0.064128488302, -0.040501680225, 0.007518395782, -0.002053357661, 0.007549434900, -0.037989120930, -0.063574470580, 0.064955964684, -0.044604592025, 0.062871471047, -0.066339105368, 0.014872111380, -0.067699790001, -0.057242110372, -0.032937362790, 0.007563836873, 0.009725235403, 0.038553625345, -0.046380463988, 0.025051333010, -0.041057467461, 0.034545518458, 0.048484772444, 0.047623127699, 0.030761994421, -0.006444267929, 0.058769464493, 0.029543504119, -0.054279293865, 0.024706497788, -0.059947486967, -0.010840516537, -0.020668800920, 0.000337913632, -0.005296677351, -0.019869029522, 0.001325115561, -0.068311780691, -0.046527095139, -0.007060639560, -0.054121527821, 0.053381502628, 0.005985341966, 0.000308871269, 0.068192020059, -0.044208295643, 0.053192138672, 0.063586071134, 0.042442798615, 0.028524562716, -0.036604128778, -0.071871854365, -0.066941089928, -0.008907414973, -0.063923798501, -0.003728345037, -0.042905550450, 0.012257806957, -0.050248473883, -0.047450013459, 0.052502766252, -0.066114611924, -0.021391160786, 0.018725462258, 0.039377190173, 0.040310487151, -0.033687233925, -0.041443575174, 0.071638256311, -0.052966706455, -0.045417919755, -0.022766277194, -0.048515692353, -0.069063395262, -0.056974396110, 0.054437920451, 0.023016281426, 0.006390050054, -0.066701814532, 0.007483810186, -0.062743321061, 0.026339113712, -0.051589936018, 0.030294843018, -0.047458719462, -0.040916338563, -0.039620541036, 0.011080078781, 0.028204403818, 0.028117440641, 0.042183861136, 0.029910400510, 0.056631520391, -0.046321619302, 0.027735687792, 0.005067087710, 0.012510709465, 0.059819713235, -0.057981796563, -0.065640494227, -0.059022594243, 0.065706580877, -0.065225765109, -0.001870743930, -0.004017829895, -0.042477265000, 0.057704821229, 0.068328142166, 0.053501412272, -0.006306342781, -0.049395643175, 0.067854568362, 0.061767041683, -0.009777318686, -0.063502579927, -0.061815619469, 0.056520819664, -0.005679532886, 0.055183008313, -0.039420913905, -0.045779034495, 0.017989337444, 0.063950017095, -0.064412832260, -0.050612166524, -0.021447975188, -0.017574388534, -0.033318053931, 0.030459627509, -0.002634845674, 0.061167225242, 0.048066571355, -0.039066392928, -0.044808886945, 0.050371125340, 0.046055346727, 0.066815763712, 0.003645963967, -0.035449184477, -0.036556895822, 0.051430292428, 0.020106889307, 0.033047705889, 0.062370225787, 0.018896162510, 0.008567586541, -0.033722143620, -0.013512391597, -0.019106153399, 0.028507307172, -0.002692691982, 0.023002654314, -0.033024426550, 0.036383010447, -0.069983989000, -0.021212056279, 0.023203574121, 0.067562207580, 0.022943861783, 0.044914580882, -0.069325238466, 0.014674372971, 0.011042729020, -0.012583937496, -0.051591672003, -0.019495464861, -0.034576803446, -0.051912382245, -0.051092069596, -0.049557246268, 0.058115810156, -0.059738773853, 0.019385911524, 0.071320563555, 0.064664334059, -0.023618388921, -0.068440265954, -0.042901042849, 0.022491045296, 0.010411955416, -0.004225783050, 0.066019371152, -0.008833855391, 0.001862868667, -0.055211536586, 0.063521400094, 0.069072514772, -0.056700214744, -0.020199067891, -0.029757950455, -0.067053914070, 0.036938652396, -0.033966045827, 0.044576682150, 0.020788714290, 0.069494634867, -0.010158561170, 0.006380863488, -0.056089852005, -0.050879932940, 0.068184703588, -0.044546917081, -0.048672817647, -0.018003772944, -0.021962806582, -0.025196056813, 0.050191558897, -0.020978551358, -0.055418167263, -0.066167458892, 0.013433486223, -0.029314249754, -0.047525666654, -0.000222787261, 0.028817050159, -0.028834812343, -0.043106488883, -0.069108366966, -0.046258229762, 0.013637430966, -0.019053637981, 0.046865940094, 0.032258257270, 0.015200063586, 0.009260572493, 0.066873371601, -0.032539617270, -0.052184313536, 0.024138212204, -0.071601368487, 0.059014037251, -0.004921935499, 0.007061444223, 0.001249663532, -0.022124100477, -0.016403943300, 0.009258218110, -0.014108628035, -0.033891972154, 0.064176604152, 0.058196172118, 0.064671337605, 0.036168992519, 0.049255147576, -0.050792641938, -0.009983021766, -0.032517544925, -0.028428032994, 0.054515853524, 0.004929162562, -0.000768244267, 0.047520458698, -0.023955598474, 0.019718080759, 0.041551731527, -0.016046755016, 0.064104169607, -0.039653647691, -0.016468673944, 0.067350223660, -0.008943207562, 0.053758874536, 0.056672170758, 0.071033105254, 0.043249696493, -0.042841799557, 0.023798465729, -0.070519313216, 0.023949898779, -0.065843872726, 0.006439246237, -0.055758595467, -0.068380765617, -0.062448572367, -0.001768559217, -0.000414051116, -0.016231361777, 0.071846306324, 0.063031405210, -0.071966953576, -0.003434807062, -0.071057476103, -0.038588952273, 0.040987454355, 0.001910582185, -0.014634680003, -0.061950877309, 0.038524121046, 0.040065772831, 0.057660266757, -0.015250340104, -0.052715562284, 0.039607428014, 0.055077180266, -0.008553288877, 0.009582906961, -0.025110557675, 0.047833025455, 0.027247473598, -0.024441521615, -0.053175553679, 0.051100589335, -0.033687558025, -0.020911771804, 0.024970620871, -0.042884610593, 0.033711887896, -0.064256116748, 0.015956625342, 0.011453427374, 0.068944916129, -0.009942620993, -0.066357158124, -0.033084735274, 0.018876582384, 0.002927869558, -0.053289633244, -0.058390602469, 0.019797191024, -0.060626879334, -0.033215571195, 0.001329883933, 0.028158716857, -0.036395050585, 0.029995635152, 0.041781030595, -0.011392585933, 0.005359701812, 0.040794603527, 0.009465456009, -0.028992298990, -0.047690026462, -0.044315353036, 0.007110156119, 0.062134057283, 0.060406416655, 0.039165347815, -0.002340190113, 0.066765218973, -0.027157463133, -0.058736607432, 0.047520287335, 0.060286745429, -0.004368215799, 0.009848535061, -0.010338056833, 0.039175584912, -0.032642323524, 0.009204566479, 0.027208551764, -0.045990567654, -0.005411319435, -0.027529604733, 0.051564007998, -0.013364057988, -0.044566895813, 0.057332202792, 0.031513638794, 0.046423345804, 0.040866523981, -0.019995342940, -0.015673119575, 0.027543388307, -0.029154796153, 0.033122397959, 0.058060184121, 0.047847345471, 0.069518521428, -0.022496532649, -0.003215424716, -0.057082608342, 0.014236435294, 0.016820922494, 0.023529566824, 0.022914752364, 0.055556640029, -0.015939507633, -0.060105562210, 0.000673748553, -0.002699077129, 0.045772187412, 0.058088958263, -0.053947210312, -0.028043627739, -0.052106093615, 0.050189234316, 0.059840992093, -0.060902733356, -0.052061527967, 0.044412776828, 0.056552484632, 0.069874480367, -0.015660386533, -0.041360899806, -0.020952153951, -0.057224147022, 0.059467718005, 0.000608108938, 0.046269983053, -0.038333125412, -0.021127678454, -0.004068687558, 0.045257024467, -0.064847916365, -0.030956495553, 0.030135609210, -0.004897624254, -0.011232752353, 0.032199189067, 0.050700798631, 0.014803662896, -0.026423595846, 0.015589818358, 0.019350223243, 0.048651896417, -0.061155565083, 0.046051204205, 0.064268514514, -0.045475944877, 0.024887599051, -0.037580985576, -0.049271840602, 0.015140876174, -0.020207516849, -0.055115625262, 0.005217164755, -0.034728873521, -0.024060830474, 0.069399580359, 0.040109619498, -0.058070287108, 0.049522332847, -0.006186448038, -0.060323499143, 0.059152886271, -0.062940776348, -0.045104335994, -0.023567318916, -0.011279918253, 0.053994387388, 0.033671885729, -0.056601554155, 0.052831321955, 0.015878371894, -0.018676474690, -0.067050814629, -0.069561704993, -0.014166735113, -0.029301308095, -0.018411118537, 0.023509226739, 0.057627379894, 0.029986344278, -0.029771905392, 0.028893776238, -0.049664251506, 0.014055013657, -0.063783995807, -0.065831311047, 0.041302740574, 0.060386106372, 0.031487569213, 0.014209903777, -0.051219638437, -0.060289792717, -0.013752732426, 0.030801773071, -0.021293513477, 0.039683707058, 0.015012703836, -0.063530713320, 0.046250246465, -0.028764005750, -0.071211025119, -0.016405437142, -0.036580175161, 0.002710878849, -0.049512229860, -0.066830500960, -0.009256169200, 0.028247401118, 0.015267647803, 0.064371734858, -0.019334789366, 0.034451559186, -0.029864940792, 0.054880902171, -0.051304019988, 0.020553931594, 0.033300966024, 0.014042779803, 0.006569415331, 0.046774178743, 0.055892691016, 0.059564337134, 0.043658450246, -0.061655461788, 0.052902147174, -0.015489026904, -0.069087140262, -0.068170554936, -0.024028003216, -0.055447708815, -0.006180152297, 0.012352772057, -0.045672178268, 0.070061117411, 0.024888060987, 0.024220950902, 0.013780228794, 0.058240905404, -0.011856827885, 0.057789102197, -0.064367681742, -0.036748524755, -0.055889584124, 0.017788365483, 0.070597618818, 0.061146602035, 0.049364790320, -0.007533282042, -0.003135241568, 0.053058177233, -0.024148706347, 0.024374157190, 0.023863352835, 0.058196112514, 0.037812173367, -0.051050432026, -0.019949126989, -0.061132248491, 0.032485418022, -0.036009766161, 0.072076037526, -0.060145568103, 0.054923728108, 0.066110521555, -0.064710915089, -0.001083120704, 0.068521052599, 0.063942894340, 0.008417256176, -0.042631730437, -0.002536945045, -0.022971738130, 0.019613087177, 0.051913969219, 0.057671755552, 0.019454412162, 0.040971279144, 0.041100218892, -0.014559142292, 0.055330187082, 0.034996740520, -0.067806929350, -0.019877687097, -0.059955127537, -0.028437979519, -0.003636293113, -0.010520823300, 0.006915897131, 0.014703266323, -0.022819306701, 0.048428468406, -0.017063770443, 0.034572124481, -0.029177818447, -0.028686217964, 0.023954756558, 0.066250562668, -0.064093932509, 0.049181804061, -0.058661397547, 0.015418753028, -0.030833125114, -0.028857506812, 0.016365781426, -0.017516229302, -0.054091777653, -0.000425599515, 0.072140961885, 0.005905210972, -0.024790037423, -0.045045644045, -0.017282687128, 0.018720023334, -0.031538192183, 0.040667772293, -0.065018720925, -0.048076979816, 0.067908167839, -0.000342972577, -0.034518834203, -0.069600455463, -0.034638971090, -0.057280894369, 0.051708437502, 0.034287527204, 0.044259987772, -0.012785010040, 0.028501436114, 0.050124607980, 0.054626479745, -0.065386593342, 0.035590738058, 0.032780833542, 0.003965638578, 0.029794961214, 0.052397452295, -0.069436997175, -0.042351264507, -0.025619611144, 0.039534308016, -0.067151501775, 0.016021564603, -0.016687743366, 0.004080958664, -0.036379773170, 0.060315430164, 0.037356920540, -0.069291017950, -0.027727786452, 0.026707135141, 0.009940609336, -0.018351908773, 0.039126239717, 0.070905938745, -0.009133815765, 0.051995046437, 0.037995539606, -0.064391158521, 0.022695347667, -0.062241941690, 0.065784335136, 0.015961773694, 0.062557861209, -0.071752645075, -0.032088004053, -0.070619590580, 0.031340919435, -0.019374862313, -0.002426803112, 0.067893251777, 0.060865774751, -0.047342542559, -0.059836763889, -0.047676675022, 0.055711194873, 0.062674611807, -0.002545922995, -0.047603201121, -0.045857269317, 0.015114963055, 0.003261126578, 0.027438171208, -0.059298031032, -0.049095444381, -0.055331103504, 0.034182608128, -0.030520468950, 0.009281657636, -0.070121049881, 0.046584859490, 0.004101656377, -0.065647028387, -0.063956439495, -0.009742405266, 0.018848985434, 0.011060364544, 0.071218386292, 0.053084939718, -0.026273038238, -0.046846568584, 0.037244856358, -0.005982451141, 0.007013060153, -0.046327777207, 0.067935675383, -0.042814835906, -0.048749350011, -0.003858119249, 0.046531997621, -0.023209132254, -0.063104204834, 0.015887856483, -0.063397228718, 0.016308926046, 0.051059395075, -0.045306496322, -0.002194568515, -0.048741504550, 0.067279264331, 0.036317966878, 0.065502285957, 0.035185270011, 0.031041666865, -0.067485362291, 0.047329947352, 0.039083048701, -0.059403285384, -0.004434667528, -0.044896706939, 0.068397521973, -0.052054613829, 0.058401942253, 0.063949942589, 0.020624406636, 0.047994524240, 0.050407476723, 0.036033630371, -0.017772693187, 0.032236531377, -0.025350138545, 0.030138723552, 0.045556865633, -0.061212465167, 0.001171082258, -0.052857547998, 0.004066780210, 0.008320353925, 0.069047138095, -0.053662031889, -0.001654103398, 0.032298833132, 0.068202763796, 0.033873319626, -0.004540883005, -0.036495123059, 0.052723906934, -0.036183223128, 0.057471856475, 0.049190245569, -0.022855266929, 0.037663161755, -0.049443732947, -0.007414638996, -0.037531655282, 0.067444756627, -0.050341337919, -0.065198116004, -0.021713968366, 0.054330408573, 0.046871036291, -0.022504292428, -0.018453650177, 0.029085487127, -0.002696432173, -0.028790969402, -0.057543944567, -0.045033290982, 0.048296444118, -0.057746328413, -0.043033048511, -0.004219383001, -0.006424792111, -0.046220771968, 0.010425776243, 0.039392814040, 0.013189084828, -0.043033257127, 0.011547043920, 0.056945875287, -0.020146932453, 0.059997752309, -0.048104718328, 0.004913143814, 0.064327269793, 0.030592322350, -0.009054116905, 0.030914165080, -0.065828159451, -0.056924842298, 0.000942081213, 0.065462648869, 0.037393398583, 0.011382274330, -0.013250201941, 0.005821228027, -0.028819255531, 0.047667726874, 0.070403635502, -0.003173530102, 0.053984045982, 0.054252862930, -0.021952636540, -0.064794577658, -0.052087388933, -0.034562882036, 0.021730385721, -0.060800682753, -0.048859991133, -0.011282738298, 0.014236539602, 0.003574192524, -0.017026588321, 0.004108473659, -0.013455647975, -0.051369383931, -0.049128428102, 0.027927845716, 0.000025346875, -0.060877576470, -0.039353240281, -0.057762499899, 0.008004926145, -0.006548404694, -0.041001833975, 0.011681683362, 0.052747048438, -0.069644741714, 0.026505872607, 0.019059643149, 0.005960926414, 0.071773275733, 0.058132767677, 0.060229361057, -0.064166650176, 0.070578962564, 0.030769236386, -0.057402700186, 0.031350709498, 0.050157025456, -0.040421344340, -0.020231034607, 0.057112440467, 0.014928303659, -0.031148329377, -0.025449678302, 0.006040230393, 0.048778623343, 0.003928780556, 0.014170899987, 0.006870560348, -0.015672396868, -0.060564059764, -0.027668062598, 0.018585778773, 0.006087206304, -0.012907914817, 0.047063417733, -0.003067225218, -0.012370027602, -0.007510013878, 0.068734928966, -0.033926710486, -0.067796953022, 0.055254742503, 0.021974474192, -0.019712194800, -0.060485634953, 0.015743784606, 0.037258401513, -0.065413765609, 0.055217623711, 0.061208754778, -0.047432340682, -0.012402564287, 0.071861058474, 0.057231381536, -0.031867347658, 0.026682123542, -0.029605656862, 0.010773047805, -0.067757964134, 0.056095495820, -0.031878516078, 0.016814537346, 0.061657994986, -0.062287829816, 0.023044846952, 0.055024340749, 0.045517928898, -0.044305667281, 0.037145711482, 0.020861752331, 0.043551221490, -0.054480228573, -0.014010380954, -0.010447077453, 0.004112035036, 0.000157594681, -0.048427611589, -0.067908033729, 0.052618362010, 0.015202954412, -0.042173713446, 0.014092847705, 0.028376415372, 0.053297206759, -0.038748782128, -0.024298846722, 0.001368544996, 0.042403809726, 0.031186461449, 0.016270473599, 0.048789702356, -0.035871047527, -0.047513745725, 0.023676231503, -0.056107334793, -0.047700244933, 0.039202272892, -0.064653962851, -0.052319690585, -0.019386425614, -0.021179091185, -0.030069351196, 0.060156136751, 0.003533281386, -0.014568880200, -0.030573289841, -0.065888486803, -0.021859344095, 0.040796443820, -0.010600350797, -0.058294195682, -0.030660457909, -0.023843877017, 0.045592769980, -0.011845059693, 0.022471718490, 0.019897267222, -0.008149474859, 0.051409013569, 0.049917317927, -0.030078832060, 0.011811591685, -0.045363705605, 0.019457370043, -0.026652146131, -0.057764083147, 0.027516476810, -0.010720983148, 0.038323231041, 0.028764247894, -0.034397374839, 0.014303423464, -0.005242303014, 0.061342611909, 0.071553573012, 0.041073381901, -0.011355832219, -0.027965854853, 0.015263535082, 0.012794889510, -0.067844048142, 0.024361394346, -0.070543333888, -0.042491804808, 0.021146275103, -0.005601570010, -0.053654737771, -0.017996340990, 0.053115606308, 0.040960162878, 0.032043337822, 0.059972614050, -0.041820190847, 0.068788006902, -0.050925564021, 0.052842572331, 0.007235400379, 0.030830182135, -0.018042437732, 0.014282725751, -0.044891338795, 0.011303521693, -0.042028233409, 0.029021777213, 0.066180944443, 0.045579783618, -0.031626787037, -0.034312184900, 0.013246707618, 0.062251195312, 0.054974451661, -0.018084470183, 0.023108869791, 0.056164532900, 0.026581481099, 0.052503563464, -0.042068012059, 0.037467047572, 0.041772596538, 0.019409656525, -0.021282088012, -0.061615079641, -0.003684781492, -0.008031837642, -0.040158964694, 0.065910428762, 0.010867305100, -0.056909184903, -0.060400031507, -0.048919677734, -0.052197303623, 0.031230919063, -0.009068034589, -0.047076202929, -0.013008195907, -0.067196324468, -0.012534674257, -0.009554497898, -0.034725636244, -0.008590184152, -0.006246551871, 0.041125535965, 0.066384956241, -0.009410582483, 0.012764297426, 0.017152041197, -0.019329302013, 0.014469087124, -0.068949654698, -0.067431949079, -0.009773619473, -0.011531818658, -0.023912116885, -0.033738523722, 0.012868084013, -0.059610690922, 0.023464731872, 0.019358210266, 0.039983667433, -0.026864610612, -0.043237961829, -0.069416567683, 0.010284908116, -0.034836102277, 0.038432873785, 0.028785876930, -0.002453148365, -0.067855834961, 0.048769846559, 0.002490088344, -0.057274423540, -0.038547415286, -0.047000877559, -0.055882878602, -0.043347254395, 0.055286139250, -0.033984903246, -0.060466654599, -0.053659796715, 0.035813577473, 0.069350257516, -0.042926475406, 0.025083355606, 0.034937210381, 0.019403010607, -0.017728213221, 0.007396347821, 0.039867520332, 0.050980553031, -0.043845154345, -0.030960846692, 0.059678256512, 0.051543720067, -0.013326838613, -0.058669432998, -0.020213793963, -0.036501489580, -0.039906926453, 0.067991033196, -0.021291036159, -0.055673595518, -0.031876880676, 0.020220972598, 0.015060588717, -0.002538181841, -0.023245662451, -0.017914678901, 0.004887610674, 0.034202188253, 0.003320142627, 0.055524468422, 0.021843239665, 0.000234194100, -0.043278876692, 0.005470804870, -0.065847419202, -0.062550276518, -0.030526094139, 0.012163326144, -0.049784213305, 0.023991592228, 0.024360895157, 0.069676443934, -0.019837904721, 0.009908087552, 0.053808882833, 0.054658845067, 0.006464108825, 0.018264792860, 0.071269243956, 0.021200664341, 0.040918558836, 0.038797341287, -0.046403985471, 0.051903352141, -0.051247358322, 0.045856170356, -0.008948437870, 0.002815909684, -0.002162963152, -0.048458650708, 0.008283063769, 0.001793697476, 0.000924602151, 0.016660355031, -0.024555671960, -0.054592624307, 0.031335055828, 0.067930012941, 0.033267326653, -0.013020239770, -0.065082728863, 0.024520620704, -0.068636126816, 0.038536384702, 0.044263079762, 0.035211078823, 0.060347765684, -0.027439475060, 0.004298962653, 0.021040096879, -0.057623475790, 0.043859057128, 0.048505507410, -0.015118815005, -0.039892610162, -0.043706230819, -0.013796623796, 0.032230541110, -0.063952103257, 0.031782746315, 0.045257471502, -0.028434056789, -0.048258110881, -0.038651257753, 0.002033360302, -0.004020065069, 0.049610838294, -0.063281632960, -0.034731764346, -0.070224925876, -0.046841837466, -0.010086618364, -0.032051250339, -0.008798122406, 0.042288526893, 0.068854227662, 0.070559948683, -0.041853450239, 0.008254691958, 0.009485132992, 0.011007525027, -0.005866222084, -0.028222091496, -0.008750066161, -0.027939803898, 0.022454082966, -0.007292322814, -0.045786138624, 0.062063395977, 0.024690777063, 0.058538168669, -0.025929357857, -0.001428693533, 0.009877063334, 0.028814539313, 0.070592418313, -0.012601796538, -0.049072436988, 0.060434326530, 0.019478499889, 0.028184033930, -0.022151507437, 0.005061805248, -0.051230117679, 0.051170170307, -0.041514173150, -0.000593692064, -0.053320728242, -0.006367959082, -0.005452170968, 0.028702460229, -0.048038043082, 0.007045619190, -0.010726731271, 0.069637283683, -0.069408945739, 0.043200895190, 0.005198337138, 0.034663766623, 0.014837868512, -0.031558595598, 0.060655102134, 0.068537920713, -0.021370083094, 0.057618334889, -0.052796840668, -0.058779932559, -0.047927886248, -0.049360215664, 0.031106188893, -0.058235622942, -0.000960096717, -0.058139819652, -0.010736022145, 0.009455733001, 0.056289702654, -0.010517466813, 0.048939689994, 0.021385878325, -0.045547880232, -0.041004933417, -0.019473627210, 0.056959077716, -0.060679741204, -0.003335081041, -0.032854236662, -0.021439045668, 0.021926812828, 0.067113399506, -0.036153800786, 0.004394218326, 0.029192306101, 0.020336285233, -0.015435136855, 0.069291502237, 0.015684820712, 0.005647443235, 0.042112477124, -0.014428116381, -0.044265195727, -0.021625559777, -0.000921845436, -0.056693073362, 0.038252048194, -0.065840348601, -0.000917047262, 0.035480238497, 0.062731817365, 0.010610587895, 0.026795357466, 0.038815230131, 0.030988514423, -0.007662221789, 0.049916923046, 0.001253381371, 0.018030703068, 0.019582025707, -0.061053685844, 0.070913150907, 0.063443124294, -0.063010960817, 0.043878018856, 0.032299399376, -0.040504693985, -0.049286998808, 0.042647674680, 0.037293411791, 0.062473714352, -0.010588839650, 0.030987672508, -0.040957633406, -0.026969518512, -0.019173342735, -0.059009447694, 0.034826382995, -0.058365464211, -0.011143986136, -0.013551209122, -0.064886368811, 0.059376180172, -0.063109159470, -0.032572086900, 0.066216349602, -0.036180917174, -0.039523068815, 0.061822593212, 0.027513191104, 0.026186339557, 0.020991131663, 0.041587024927, -0.005213446915, 0.012302443385, 0.006478786469, 0.059260129929, 0.047867976129, 0.012782275677, 0.029424250126, -0.058876957744, -0.064447417855, -0.015683580190, -0.024131465703, -0.045567341149, 0.027146659791, -0.033075012267, -0.013771675527, -0.042475491762, 0.030945122242, -0.044620834291, -0.056678999215, -0.069379493594, -0.058879055083, 0.018291927874, -0.050412829965, 0.023714400828, 0.062811091542, -0.049471642822, 0.022172480822, -0.033239986748, 0.067280337214, -0.040774248540, -0.025468125939, -0.050739545375, 0.054887622595, -0.018478602171, 0.031174100935, -0.023148946464, -0.051025446504, 0.068784892559, 0.026284001768, -0.050245240331, 0.029604747891, -0.018678210676, -0.060687791556, 0.024435140193, 0.064255192876, 0.047869317234, -0.037446156144, -0.053494390100, 0.050240077078, 0.013348743320, -0.037782076746, -0.046335846186, 0.044660724699, -0.016435410827, -0.007270328701, 0.000281803310, 0.055307105184, 0.014262661338, 0.004810936749, 0.029303170741, -0.004278644919, 0.029925525188, -0.049903571606, 0.062328696251, 0.022408053279, -0.053462214768, 0.018220834434, -0.053310073912, -0.024301480502, 0.067553669214, -0.034551817924, -0.056404452771, 0.070490881801, -0.049129027873, 0.017596930265, 0.057299703360, 0.010429129004, 0.031513720751, -0.010342150927, -0.055958598852, 0.011260971427, 0.067069575191, 0.019150272012, -0.021210215986, -0.022596001625, 0.044904328883, -0.044942475855, -0.036574669182, 0.024907246232, -0.033196505159, -0.009841069579, -0.034881044179, -0.021748054773, 0.058273270726, 0.016165509820, 0.004288710654, 0.043051406741, -0.048913344741, -0.025542370975, -0.004020340741, -0.003150761127, 0.030198276043, 0.027916163206, 0.014371424913, -0.059671275318, -0.025941748172, 0.069919750094, -0.020174376667, 0.046933360398, -0.010013595223, 0.022057801485, 0.069045513868, -0.018608611077, -0.042781077325, -0.047301627696, 0.070368289948, -0.009663432837, -0.066351272166, 0.039965942502, 0.019869722426, 0.016329385340, 0.031744375825, 0.062461853027, 0.048160605133, -0.019103709608, -0.062318716198, 0.006209939718, 0.052939087152, -0.046473927796, 0.069433242083, 0.043314784765, 0.016231738031, 0.049154184759, 0.057564228773, 0.023528814316, 0.056641012430, 0.006162032485, -0.042049616575, -0.045854844153, 0.062047228217, 0.032171227038, -0.026166498661, 0.006319835782, -0.058782733977, -0.058522507548, -0.021867588162, 0.033242776990, -0.015096258372, -0.016656480730, -0.015489283949, -0.064710870385, 0.033348694444, 0.022747367620, -0.018726218492, -0.002461403608, 0.009882934391, 0.033144630492, -0.007378853858, 0.058362245560, 0.068928837776, 0.046382904053, 0.058679565787, -0.028741482645, -0.010038424283, 0.044757403433, -0.001436747611, 0.045774608850, -0.027495466173, 0.013070151210, 0.002313256264, 0.044083639979, -0.008580341935, -0.064236007631, -0.057067982852, 0.069546222687, -0.022838059813, -0.046687357128, 0.003469221294, -0.004549384117, -0.012168351561, -0.055872380733, 0.001019977033, 0.019294545054, 0.035574376583, -0.023324724287, -0.020074132830, -0.038625583053, 0.052729532123, -0.043763376772, -0.008689001203, 0.004828967154, -0.031059060246, -0.066466316581, -0.012267131358, 0.060973763466, -0.062433019280, -0.021757189184, -0.047536268830, 0.013640098274, -0.014339983463, -0.037697162479, 0.007532075047, 0.031851790845, -0.058558244258, 0.007070563734, -0.047704409808, 0.000356070697, -0.056621890515, 0.002552069724, 0.004962906241, 0.037802651525, 0.014775149524, -0.009530410171, -0.019774671644, -0.031670197845, -0.043046124279, 0.035532407463, 0.000834390521, -0.037062626332, -0.067450188100, 0.004587583244, 0.026133663952, 0.018871903419, 0.067656308413, 0.013969205320, 0.012345850468, -0.028437670320, 0.002564609051, 0.008097372949, 0.014893941581, -0.038670200855, -0.069936014712, -0.061512544751, -0.026187505573, -0.041411124170, -0.003018379211, -0.066222622991, -0.033926229924, 0.069617956877, 0.061295136809, 0.016809545457, -0.002977393568, -0.013222739100, -0.033846992999, -0.041453968734, 0.055869311094, -0.049881514162, 0.038788340986, -0.031235065311, -0.008730620146, 0.044995456934, -0.020446427166, -0.046761654317, 0.049995504320, 0.069272652268, -0.070398949087, -0.049578148872, 0.014081805944, -0.049958787858, 0.035174965858, -0.020310338587, -0.061775699258, -0.045231387019, -0.022030342370, -0.056770812720, -0.067253626883, -0.031986657530, -0.011500794441, 0.017403133214, 0.032692223787, 0.051267281175, -0.012009106576, 0.017119109631, -0.003351286054, -0.020611934364, -0.009247846901, 0.064293473959, 0.009085431695, 0.057721987367, 0.025554761291, -0.012773137540, 0.011795848608, -0.049006052315, -0.026507440954, 0.047761090100, -0.024181500077, 0.056457549334, 0.025075353682, 0.033435642719, -0.056651964784, -0.047760210931, -0.070189811289, -0.011512923986, -0.041199639440, 0.061860039830, 0.002091348171, -0.002192422748, -0.067842736840, 0.039235360920, 0.066413983703, -0.016819287091, -0.069651439786, 0.003008246422, -0.041690625250, -0.034014035016, 0.061897963285, 0.056493982673, 0.053847104311, 0.037564948201, -0.035327725112, -0.043778050691, -0.014573268592, -0.036022000015, 0.046291008592, -0.040337461978, -0.072050645947, 0.030822783709, -0.005448400974, 0.071174934506, 0.040307767689, -0.005695000291, 0.065336555243, 0.010007157922, -0.020981889218, -0.035156141967, -0.050106696784, -0.032960884273, -0.041088417172, 0.066384449601, 0.009168624878, -0.023918002844, -0.014078997076, -0.057966291904, 0.068892672658, 0.035746976733, -0.000901319087, -0.043428093195, -0.037403397262, 0.062451690435, 0.059323951602, -0.071364261210, 0.060524240136, 0.069998130202, 0.041123792529, -0.007391378284, -0.057895023376, 0.042554020882, -0.034624945372, 0.032636940479, 0.062500417233, 0.067501723766, 0.017883658409, 0.068827971816, 0.016113616526, 0.059543833137, -0.007013976574, -0.008824653924, -0.032640621066, -0.043880827725, 0.058560863137, 0.049736261368, 0.043610118330, 0.003218829632, 0.005229279399, -0.035633739084, -0.013879645616, -0.035590156913, -0.067149765790, 0.023481182754, 0.059254497290, -0.008341670036, -0.064201198518, 0.040274314582, -0.057496815920, -0.024210613221, -0.021732982248, -0.071715958416, 0.048724696040, -0.031248021871, 0.041157379746, 0.022591717541, 0.067948132753, 0.044844828546, -0.013306312263, 0.006432428956, -0.038052868098, 0.027072861791, 0.071762666106, 0.033787630498, 0.052733145654, 0.056762397289, -0.001745037735, 0.046159431338, -0.062873244286, -0.061369094998, 0.028570316732, -0.007272101939, -0.014881331474, 0.012843526900, -0.069444566965, -0.037129506469, -0.052810695022, -0.030477538705, -0.053752347827, -0.059177294374, 0.034611560404, -0.001578532159, 0.011335358024, 0.019716322422, -0.050152119249, 0.049624465406, 0.050928674638, -0.013562496752, 0.052455022931, -0.023480545729, 0.036007441580, -0.030990853906, -0.038161288947, 0.070263519883, -0.018576692790, 0.055345937610, 0.061845436692, -0.038244582713, -0.019380595535, 0.023671589792, -0.051494646817, -0.023125529289, 0.020567283034, 0.018372558057, -0.066898517311, 0.065529316664, 0.023085348308, 0.044352263212, 0.000719398260, -0.037230044603, 0.025646656752, 0.041322477162, -0.051017962396, -0.041711892933, 0.058909907937, 0.012770608068, -0.051454141736, -0.032148327678, -0.052592396736, 0.037085942924, -0.028168629855, 0.034502282739, 0.070775836706, -0.066167503595, -0.030739538372, 0.027849040926, 0.020115494728, -0.053578391671, 0.044216416776, 0.052980706096, -0.056786969304, -0.032829340547, 0.036585338414, 0.026051059365, 0.031572587788, 0.006890021265, -0.051818970591, 0.070706710219, 0.014211520553, -0.030671279877, 0.001136481762, 0.042562112212, 0.041338928044, 0.018004804850, -0.032824572176, -0.069176606834, 0.054480686784, -0.006545133889, 0.020778305829, 0.017587170005, -0.064301975071, -0.055913865566, -0.039741933346, -0.034790419042, -0.047995887697, 0.028277583420, -0.017763726413, 0.061333239079, -0.033157568425, 0.071723416448, 0.031511329114, 0.009426496923, -0.020965214819, -0.034973479807, -0.008249647915, -0.022830780596, 0.000672355294, -0.020081683993, -0.054212979972, -0.002765566111, -0.022405423224, 0.045470438898, 0.052369058132, -0.061422519386, 0.042745567858, 0.058790296316, 0.000047557056, 0.066532924771, -0.014462046325, 0.029756419361, 0.012666992843, -0.039103783667, 0.048760451376, 0.029420226812, -0.063619054854, 0.044317796826, 0.013130649924, -0.001028716564, -0.068083629012, -0.057776197791, -0.044073469937, 0.026990599930, 0.059477046132, -0.000290103257, 0.016178295016, -0.016182031482, 0.016672171652, 0.024329595268, -0.039545953274, -0.013983037323, 0.046353280544, 0.011944614351, -0.042954586446, 0.068710565567, 0.043118104339, 0.001724421978, 0.043527595699, -0.018353011459, -0.027940440923, -0.059825114906, -0.048457205296, -0.027476299554, 0.061711430550, -0.014886390418, 0.008239977062, -0.059467464685, 0.057559385896, 0.041095577180, 0.040723055601, 0.010693900287, -0.022976260632, -0.056178826839, 0.027315713465, 0.042433179915, -0.053221426904, -0.009339310229, -0.068373881280, 0.051342234015, 0.035017132759, 0.053601861000, -0.068603500724, 0.028648398817, 0.028916642070, -0.005147635937, -0.065540492535, 0.059337377548, -0.031828995794, -0.003248423338, -0.048961404711, 0.008886836469, -0.062461771071, -0.012849498540, -0.014173168689, -0.018007542938, -0.067122980952, 0.018429353833, -0.028695646673, 0.069606766105, -0.003614149988, -0.056745365262, 0.044253721833, 0.050841495395, 0.071446537971, -0.001527138054, -0.021894447505, -0.001596994698, -0.003312967718, 0.017356932163, -0.054049484432, 0.030492283404, 0.067932680249, -0.015536431223, 0.045290216804, -0.009894356132, 0.013613805175, 0.010207027197, 0.019460655749, 0.025799088180, -0.016881745309, 0.020982831717, 0.013760991395, 0.008725650609, 0.054191857576, 0.054434835911, 0.042110323906, -0.067511379719, -0.009040303528, -0.065320365131, 0.026985123754, -0.047585565597, 0.001714497805, -0.028895463794, -0.049204513431, 0.037182554603, 0.070003807545, -0.048616554588, 0.033826068044, 0.047551736236, 0.053369894624, 0.028622053564, -0.052003026009, -0.016118180007, 0.041825264692, -0.043811190873, -0.039606176317, -0.052085362375, -0.017811682075, -0.017567418516, 0.068549185991, -0.015094242990, -0.030722782016, -0.036896444857, 0.024222396314, -0.011263087392, -0.029110852629, -0.031138572842, -0.065270952880, -0.062462784350, -0.039256557822, -0.037086110562, -0.068454235792, -0.024718787521, 0.065656065941, -0.045825507492, -0.022621966898, -0.028369206935, -0.045487694442, 0.070156857371, 0.006967827678, -0.040493320674, 0.017706155777, -0.068423606455, 0.033192567527, -0.050069376826, -0.040269169956, -0.038879774511, -0.059888109565, -0.025767292827, 0.033043064177, 0.042052097619, 0.050533533096, -0.010407105088, -0.028022550046, 0.038975372910, 0.044777996838, -0.057844161987, -0.001317076385, 0.005100332201, 0.004112668335, 0.008711524308, 0.032595366240, -0.044168964028, -0.020633716136, -0.018904097378, -0.026825740933, -0.005729950964, 0.071774169803, -0.058823809028, -0.001332789660, 0.006958365440, -0.000591397285, -0.006435699761, -0.035760790110, 0.065281108022, 0.002102777362, -0.032613210380, -0.048549398780, -0.009592294693, 0.037434436381, -0.065556421876, -0.035598326474, 0.036628060043, 0.038141362369, -0.037873700261, 0.050374411047, -0.068334303796, 0.050201795995, 0.029473394156, -0.001614838839, -0.010676350445, 0.070125311613, -0.030676580966, -0.056758593768, -0.041074585170, -0.055861402303, -0.047452919185, -0.011787712574, -0.031254868954, 0.028366282582, -0.057756394148, -0.041393592954, 0.026328578591, 0.048693068326, -0.000258542597, -0.007419392467, -0.067733697593, 0.030415058136, -0.011520083994, 0.014272846282, 0.063501536846, 0.052000381052, 0.001570872962, -0.072097085416, 0.032561622560, 0.009595066309, -0.022756502032, 0.067955762148, -0.003338843584, 0.034253925085, 0.019921697676, -0.014277715236, 0.023595534265, 0.027801238000, 0.020171709359, -0.071832068264, 0.017311647534, 0.054638057947, 0.029456198215, -0.068456865847, 0.036474183202, -0.009590804577, -0.000111803412, -0.003480799496, -0.027179658413, 0.027947545052, 0.066932216287, 0.065571755171, -0.006465345621, -0.030856285244, 0.046841748059, 0.030252203345, -0.013997130096, -0.061130218208, -0.012554876506, -0.030332524329, 0.007246486843, 0.061932921410, -0.050915598869, 0.064054489136, 0.056665554643, 0.026557236910, -0.047013606876, -0.062083676457, -0.045539572835, -0.016004942358, -0.043398395181, -0.045862622559, -0.019404750317, 0.048085652292, 0.004842408001, -0.053227469325, 0.007399685681, 0.029537193477, 0.029811516404, -0.018572099507, -0.007339484990, -0.007905744016, -0.055709160864, 0.065835118294, 0.010941863060, 0.072107419372, -0.063484944403, -0.005220554769, -0.001032620668, -0.014762606472, 0.052550673485, -0.006551280618, -0.065565526485, -0.029052454978, 0.029363818467, 0.010039351881, -0.045223508030, 0.018194042146, 0.061468601227, 0.037169769406, 0.055523619056, 0.051303744316, -0.071121588349, 0.017532907426, 0.017566643655, 0.053859189153, 0.046143859625, 0.031663931906, -0.071185864508, 0.023153573275, -0.046466186643, -0.026437774301, 0.062508791685, -0.018300533295, 0.027543641627, -0.055469527841, 0.029380254447, -0.008342251182, 0.023236595094, -0.044729940593, -0.024979636073, -0.052506022155, 0.046775422990, -0.019958160818, 0.038990877569, -0.025923456997, -0.043644495308, -0.047260794789, -0.019451208413, -0.068626195192, 0.020986668766, -0.057625815272, -0.017172068357, 0.001433879137, -0.023460414261, -0.003497228026, -0.070442222059, -0.037600394338, 0.019987136126, -0.014039579779, -0.009526312351, -0.045066863298, -0.000447280705, -0.061991501600, 0.024018228054, -0.001041606069, 0.017106771469, 0.068349927664, 0.062670186162, -0.002990707755, -0.017930749804, -0.053041465580, 0.012161999941, 0.053113326430, 0.011857792735, 0.013521634042, 0.055099353194, 0.043236017227, -0.011961374432, 0.048417530954, 0.010024696589, -0.012490283698, 0.002865828574, 0.062429219484, 0.025738365948, 0.036209516227, 0.062744483352, -0.064601071179, 0.030594699085, 0.036458477378, -0.045970089734, -0.052147302777, -0.068082630634, 0.018140412867, 0.049294091761, 0.005597062409, 0.031430840492, 0.029004789889, -0.024419996887, 0.036250315607, 0.005445048213, 0.066217988729, 0.062240660191, -0.021957419813, 0.057358935475, 0.070147648454, -0.013908963650, -0.047889396548, 0.059632048011, -0.012737415731, 0.030772969127, 0.012261472642, -0.017225906253, 0.003855913877, -0.062815688550, 0.063395470381, 0.016868926585, 0.029272124171, 0.051525875926, -0.028631016612, -0.009980767965, -0.049152396619, 0.000637188554, -0.016401171684, 0.036074668169, -0.023685663939, -0.052752692252, -0.009000763297, -0.063407123089, -0.066315241158, -0.051472194493, 0.056455969810, -0.003696307540, 0.067345678806, -0.032724052668, -0.058538112789, 0.006715409458, 0.058027818799, -0.058409254998, -0.022173464298, 0.001187138259, -0.032975558192, -0.050831358880, 0.048119425774, -0.041626408696, 0.004390686750, 0.042079180479, 0.030297234654, 0.029013983905, -0.005164600909, 0.022754423320, 0.004188753664, 0.020212352276, -0.064385376871, 0.026674769819, -0.018437270075, 0.031077355146, 0.008008845150, -0.031753115356, -0.070522628725, -0.059458378702, -0.003837570548, -0.016954563558, -0.016431558877, 0.068446159363, -0.004845708609, 0.053362905979, -0.050927199423, 0.062458992004, -0.015299085528, 0.014886699617, -0.020675286651, 0.031010091305, 0.057972207665, -0.071320921183, 0.022210232913, 0.036375038326, -0.040298078209, 0.015910707414, -0.059858240187, 0.037417337298, 0.019840486348, 0.041620232165, -0.068100571632, 0.059006348252, -0.045787531883, -0.055453523993, 0.054014831781, -0.025208961219, -0.032525043935, -0.052907291800, -0.006484977901, -0.016816686839, -0.025383330882, 0.030758790672, 0.040244340897, -0.061500553042, -0.052492927760, 0.040808692575, -0.028553485870, 0.020734325051, -0.048784814775, -0.013516005129, -0.013841617852, 0.027467489243, -0.054175317287, 0.026036880910, 0.030274935067, -0.005540043116, -0.057112134993, -0.003999277949, -0.024591252208, 0.028303734958, 0.026575513184, 0.023736804724, 0.003940567374, -0.047841493040, -0.042440116405, 0.053243070841, -0.030368138105, 0.051096267998, -0.045537438244, 0.021041750908, 0.030352205038, -0.045425012708, -0.002226144075, -0.045458681881, -0.002895660698, 0.042759589851, -0.033034559339, -0.014325857162, 0.058316737413, -0.021398968995, 0.013127915561, -0.045185431838, -0.066948056221, 0.021246470511, 0.004937112331, 0.010878540576, -0.048119649291, -0.026862580329, -0.042356047779, 0.014738120139, -0.023584697396, -0.052968442440, 0.012710697949, 0.058357551694, 0.036423444748, -0.035753786564, 0.045489758253, -0.019310444593, 0.038305200636, -0.059678085148, -0.019128452986, 0.035912550986, -0.050867989659, 0.012621223927, 0.051360644400, 0.019765228033, -0.052482604980, 0.008074507117, 0.022970363498, 0.064050406218, 0.012661330402, -0.022317670286, -0.035059735179, -0.055673096329, 0.016301788390, -0.028106153011, 0.023336701095, -0.011196620762, 0.039838805795, 0.039029471576, -0.008573576808, -0.034664452076, 0.027806915343, 0.041752427816, -0.024433694780, 0.050097160041, -0.027759291232, 0.020980738103, 0.027762301266, 0.025417298079, 0.051008723676, 0.019801117480, 0.065217494965, -0.055403813720, 0.005805209279, -0.051078114659, 0.032567583025, -0.029773470014, -0.064645066857, -0.014971029013, -0.037105537951, 0.030982285738, -0.034331869334, -0.067421026528, -0.070964179933, -0.006294488907, -0.019135542214, 0.071373403072, 0.033272884786, -0.040599018335, 0.012330263853, -0.036196835339, -0.057711757720, 0.032557547092, 0.033940508962, 0.068389683962, -0.066076695919, -0.021159801632, -0.062470871955, 0.039315491915, 0.059855446219, -0.034171145409, -0.024518933147, -0.060063630342, -0.069488078356, 0.007908016443, -0.066913917661, -0.003929108381, -0.066609419882, -0.057963248342, 0.007456332445, -0.051998294890, -0.039211858064, -0.026637021452, 0.053349897265, -0.067019291222, 0.060315340757, -0.053949393332, 0.062023714185, -0.003222756088, -0.026740364730, 0.013019673526, 0.044900357723, 0.025618955493, -0.042381271720, -0.059499107301, -0.016804590821, 0.056675687432, -0.041569769382, -0.020683821291, -0.042304325849, -0.035170335323, -0.061362799257, 0.054732292891, 0.011912815273, -0.022429529577, -0.066094636917, -0.069417119026, 0.010310702026, -0.045754633844, -0.062089785933, -0.065331257880, 0.054661795497, 0.021115683019, -0.056772101671, 0.035231024027, 0.070181086659, 0.004926837981, 0.039261683822, -0.017092678696, 0.026578590274, -0.032399628311, 0.011385597289, 0.044839613140, 0.015112020075, -0.013268578798, -0.047377042472, -0.009321242571, 0.054376900196, 0.048159658909, 0.011566698551, 0.031774781644, 0.022661574185, -0.063882656395, -0.004228137434, 0.040445417166, -0.036737062037, -0.029714003205, -0.049463659525, 0.068333610892, 0.004377633333, -0.022671934217, -0.026810359210, -0.040239542723, -0.037846185267, 0.058244377375, 0.011690288782, -0.068487323821, -0.071337662637, -0.060267474502, 0.053513914347, -0.068984173238, -0.020687554032, -0.006110452116, 0.008083954453, -0.001210413873, 0.064789265394, -0.066075608134, 0.068194657564, 0.037849143147, 0.038153216243, -0.026355355978, 0.040674038231, 0.030227527022, 0.034789815545, 0.059043005109, 0.028931647539, 0.065372034907, -0.065182358027, 0.036533802748, 0.019551694393, -0.022447407246, 0.035782434046, 0.012315705419, -0.058503631502, -0.053544048220, -0.007024191320, -0.003667972982, 0.000007346272, 0.071099847555, 0.058068573475, 0.039203010499, -0.049395725131, 0.060220256448, 0.048281542957, -0.034473150969, 0.064664319158, 0.040966801345, -0.038639005274, -0.069883599877, -0.036961261183, -0.049677859992, -0.071682028472, 0.016388952732, -0.018618781120, -0.033113468438, -0.056390050799, 0.039767213166, 0.043022155762, 0.004248939455, 0.033958144486, -0.018675200641, -0.005765430629, -0.009740669280, 0.046417027712, 0.042714715004, 0.043442852795, -0.021045587957, -0.018587708473, 0.043644480407, -0.065010033548, 0.035274729133, 0.003554545343, 0.068389698863, -0.005661673844, 0.062349200249, 0.011963956058, -0.017681755126, -0.051409199834, 0.061041757464, -0.012842033058, -0.016023062170, 0.052651397884, 0.055281981826, 0.003414399922, -0.070454634726, -0.004622444510, -0.066531248391, -0.057678569108, -0.032444003969, -0.056397035718, -0.002819471061, 0.011989958584, 0.034692719579, -0.062472797930, -0.032444331795, 0.006611049175, -0.046023931354, 0.050356291234, 0.045827999711, 0.021073013544, 0.029595643282, 0.006422348320, 0.000752002001, -0.015373900533, -0.039070505649, 0.070132315159, -0.012816257775, 0.013195380569, 0.018739245832, 0.007345519960, -0.029395308346, -0.041354980320, -0.041760571301, 0.021725103259, -0.054164439440, -0.019751582295, -0.029830716550, 0.036247216165, 0.045677512884, -0.030682329088, 0.013560742140, 0.027592442930, 0.044524237514, 0.067323520780, 0.016789913177, -0.024080257863, -0.057485356927, -0.068480581045, 0.012497283518, 0.024048991501, -0.021315932274, 0.048059359193, -0.029240846634, -0.049137871712, -0.010816257447, 0.028004035354, -0.006240047514, -0.054985735565, 0.066792905331, -0.067636258900, 0.031608648598, -0.039964910597, 0.059332340956, 0.039176739752, 0.046920694411, 0.063133448362, 0.060656011105, 0.039429947734, 0.064618602395, 0.071940585971, -0.013353750110, 0.033672019839, 0.007234767079, 0.013870626688, 0.068687230349, -0.020435448736, -0.006164647639, 0.032087624073, -0.001159742475, 0.004675284028, 0.004905141890, -0.056883323938, 0.008572317660, 0.004854917526, 0.061501309276, -0.056357342750, -0.016016762704, 0.002427324653, 0.038894660771, -0.069131977856, 0.031113334000, 0.064637824893, -0.029291603714, 0.014596804976, 0.017519928515, 0.063532620668, 0.059720218182, -0.027405511588, -0.050261154771, 0.068042755127, -0.037935417145, 0.006736673415, -0.057742144912, -0.052540190518, -0.029936708510, -0.024504207075, -0.063135586679, -0.027010537684, 0.047492079437, 0.036961264908, 0.059479475021, -0.015011601150, 0.071433275938, -0.007459983230, 0.070140197873, 0.009999178350, -0.013683889061, -0.062937282026, 0.047568567097, -0.033426504582, -0.062248446047, -0.057648818940, -0.069692306221, 0.061531960964, -0.035026337951, -0.022284083068, -0.005435355008, -0.020199291408, -0.026621896774, -0.007400669158, 0.039180472493, -0.010882243514, 0.046697355807, -0.002664439380, 0.047930262983, 0.061104223132, 0.038969196379, -0.059355501086, -0.022231500596, 0.024632945657, 0.026424556971, 0.070981562138, -0.012951068580, -0.002364210784, 0.051788926125, -0.055532675236, -0.058003064245, 0.046099498868, 0.014297880232, -0.030961193144, 0.047647476196, -0.015148736537, -0.040013916790, 0.047819212079, -0.011553257704, 0.065951630473, -0.005236431956, 0.058189749718, 0.021746799350, 0.025055117905, 0.045552715659, -0.049366615713, 0.009285591543, 0.050360731781, 0.059327408671, 0.000446245074, -0.056644137949, -0.050329517573, 0.065992087126, -0.057319436222, 0.029718980193, 0.039070382714, 0.063501760364, 0.068736940622, 0.008507177234, -0.045472860336, 0.000593431294, 0.000825561583, 0.038965292275, -0.062847606838, 0.040275797248, -0.035171799362, -0.025012876838, -0.049084980041, 0.050897754729, -0.017000865191, 0.055749297142, 0.061656802893, -0.032042786479, -0.066349260509, -0.056592810899, -0.027512103319, -0.037111923099, -0.050094790757, 0.059537068009, 0.009605802596, -0.067996837199, -0.063371419907, -0.071858949959, -0.065350785851, -0.070130445063, 0.042739041150, 0.007487885654, -0.047191366553, 0.065346106887, -0.009192109108, -0.002992793918, -0.011514268816, 0.025961622596, -0.049904640764, 0.027883470058, -0.035941630602, 0.024979427457, 0.038528762758, -0.058496437967, 0.057550877333, -0.062245436013, -0.032423544675, 0.035296753049, 0.018669433892, 0.007134661078, -0.032201599330, 0.050031229854, -0.002133026719, 0.046850539744, 0.051354154944, 0.062319293618, -0.049711257219, 0.019442453980, 0.004453368485, 0.069155037403, 0.027795873582, -0.018850568682, 0.048683844507, -0.066639378667, -0.012234199792, -0.053345948458, 0.001690782607, 0.067879199982, 0.018845044076, 0.044587127864, 0.016167357564, -0.017246607691, 0.029382176697, -0.046429879963, 0.071803569794, 0.069007351995, 0.022067040205, -0.059323824942, -0.000934600830, -0.055761314929, -0.021237436682, -0.023636590689, -0.032163247466, 0.028867878020, -0.003167159855, -0.058299168944, 0.071562647820, -0.051460236311, -0.056932553649, 0.006524950266, -0.056538179517, -0.037691190839, 0.021570652723, -0.052841410041, 0.067981094122, -0.009736314416, -0.006736949086, -0.065883979201, 0.061099156737, -0.059291973710, 0.038463205099, -0.026000127196, -0.057157594711, -0.040434610099, 0.006758838892, -0.039670303464, -0.068662725389, 0.041295513511, -0.006718091667, -0.048213046044, -0.030404187739, -0.056100465357, -0.065903201699, 0.035771839321, 0.047675795853, -0.000302106142, -0.013379938900, -0.014549009502, 0.039991892874, -0.038277018815, 0.002347812057, 0.044228218496, -0.024757482111, -0.047751519829, 0.040760569274, -0.020376481116, -0.053445283324, -0.062909014523, 0.002994529903, -0.041035868227, 0.053100645542, 0.018409602344, 0.053865477443, -0.052775643766, -0.028419706970, -0.060806017369, 0.020285807550, 0.041969507933, 0.012932330370, -0.049254789948, -0.030310790986, 0.057099193335, -0.046736568213, 0.021493040025, 0.037894517183, 0.027365915477, -0.048982877284, -0.068140290678, 0.049269005656, 0.056185707450, -0.036982513964, 0.036970898509, 0.017492689192, -0.047272220254, 0.008573748171, -0.052188184112, 0.056256845593, -0.015128500760, -0.025532063097, 0.066438376904, -0.043227225542, -0.071856036782, 0.021085076034, -0.028383057564, 0.022050403059, -0.026514858007, -0.066354900599, 0.015527710319, -0.038913894445, 0.002468682826, -0.048283904791, 0.002649471164, -0.008809097111, 0.068488344550, 0.034918248653, 0.070168018341, -0.036093391478, 0.049903094769, 0.015847988427, 0.017455093563, -0.029518146068, 0.041632570326, -0.062394700944, 0.016753591597, 0.041005417705, 0.023992106318, 0.046101152897, 0.018072046340, -0.054312177002, 0.067801907659, 0.009100243449, -0.018840759993, -0.041650794446, -0.035822577775, -0.049054436386, -0.022394429892, -0.000934235752, 0.050045199692, -0.041125983000, -0.005156427622, -0.039242621511, -0.067592643201, 0.054295629263, -0.042951665819, 0.071497172117, 0.015499867499, -0.048430293798, -0.016293458641, 0.002864964306, -0.033541221172, 0.031589485705, 0.001108780503, -0.016105566174, 0.057402417064, 0.041347734630, 0.002304606140, -0.065924160182, -0.067324362695, 0.066374540329, 0.016101405025, -0.010288983583, 0.066016629338, 0.045442685485, 0.025979101658, -0.043786533177, 0.044725455344, 0.005064368248, -0.029559593648, 0.021934039891, 0.025335602462, -0.069409415126, 0.070942074060, -0.011945217848, -0.038143187761, 0.045729599893, -0.052919216454, -0.034475889057, -0.072068162262, -0.048793487251, 0.066762015224, -0.043412655592, 0.012735389173, -0.049929849803, -0.008616641164, 0.009356915951, -0.064679257572, 0.019211024046, -0.039989173412, 0.065186500549, 0.042515605688, 0.029733344913, 0.026942931116, -0.025218080729, 0.051656059921, 0.041008785367, -0.032593026757, 0.028945945203, 0.044465512037, -0.053043875843, 0.032304205000, -0.008959189057, -0.046379517764, 0.041422910988, 0.065965577960, -0.057196412235, 0.066553801298, 0.047148935497, 0.010650865734, -0.032611250877, 0.030779249966, -0.017603930086, -0.000974074006, -0.020878531039, 0.032599151134, 0.022617146373, 0.069760769606, -0.006746314466, 0.039324440062, 0.007412917912, 0.006349205971, 0.010177902877, -0.023092128336, 0.023787662387, 0.047525703907, -0.006368324161, 0.025509335101, 0.007821813226, -0.025433298200, -0.036993093789, -0.025875519961, -0.019892293960, 0.024296969175, -0.010402716696, -0.062814377248, 0.026681415737, 0.029547691345, 0.027291655540, -0.006083264947, 0.014850564301, 0.005577467382, -0.053619585931, -0.034143701196, 0.022280402482, -0.062530905008, -0.025283191353, 0.001439794898, 0.026089496911, 0.053555950522, -0.053084015846, -0.043268810958, 0.013697810471, -0.016303319484, -0.016168508679, 0.053843915462, 0.063859045506, -0.007328279316, 0.061134636402, 0.002076193690, 0.070206984878, 0.040279842913, -0.052594944835, 0.063574701548, -0.018051572144, 0.054051533341, 0.070543587208, -0.064986258745, 0.067033335567, -0.008460134268, 0.035101853311, 0.020264312625, -0.002109125257, -0.048778362572, 0.049695134163, -0.016239345074, 0.029580950737, 0.026074565947, -0.027111969888, -0.065708234906, -0.006399519742, -0.039477713406, 0.006510943174, -0.018767323345, 0.067357018590, 0.061405241489, -0.007964573801, 0.063848391175, 0.068105697632, 0.006494447589, 0.033369518816, -0.034395948052, -0.068732805550, -0.063991710544, -0.020870957524, 0.042602337897, 0.034995310009, -0.002531744540, -0.061578288674, 0.032229110599, 0.022440545261, -0.060348913074, 0.039194189012, -0.006696633995, -0.016801066697, 0.030387014151, 0.065860837698, 0.020673945546, 0.065331041813, -0.004438728094, 0.057288244367, -0.029589120299, -0.024820890278, 0.004359215498, -0.068493634462, 0.012484639883, -0.056261397898, 0.048879005015, 0.007377371192, 0.033535078168, -0.069864541292, 0.046832628548, 0.029012173414, -0.028960779309, 0.057711347938, -0.005351290107, 0.060712128878, 0.025190375745, -0.034797180444, 0.026290208101, 0.023463480175, -0.021791964769, 0.052788019180, 0.028414376080, 0.058430239558, -0.000578306615, -0.014155101031, 0.019471839070, -0.023145023733, -0.055064901710, -0.025503225625, 0.002622477710, -0.035359244794, -0.034291140735, -0.018969208002, 0.045969165862, -0.020656928420, 0.019157394767, -0.064343065023, 0.029806733131, -0.051355980337, 0.001638181508, -0.002125039697, 0.055865079165, 0.005237452686, -0.052317440510, -0.007066503167, -0.057007417083, -0.023633837700, -0.033446326852, 0.041422910988, 0.012874066830, 0.016375310719, -0.053001768887, 0.004112683237, 0.023007988930, 0.045022882521, 0.023719184101, 0.019848935306, -0.009506903589, 0.071583181620, 0.065290883183, -0.029602129012, 0.000402800739, -0.064450412989, 0.005312830210, -0.016480527818, 0.036508820951, 0.058304384351, -0.031423956156, -0.029292002320, 0.060624226928, 0.004039593041, 0.001066401601, 0.050288274884, 0.066695138812, 0.017221264541, -0.020615890622, 0.019941538572, 0.064390718937, 0.028474733233, 0.033289149404, 0.032110303640, -0.043542101979, -0.026465009898, 0.017427511513, 0.040077149868, -0.069268509746, 0.022241845727, -0.013305485249, -0.029009938240, 0.002443887293, -0.063175901771, 0.050774283707, -0.031368054450, 0.061817005277, -0.033390682191, 0.031317763031, -0.021448403597, -0.064565390348, -0.002094157040, -0.054546110332, -0.003344297409, -0.059604857117, -0.024903874844, -0.066785097122, 0.070790752769, -0.056604992598, 0.001216664910, -0.020074922591, -0.034363597631, -0.069989971817, -0.052199661732, 0.060633510351, 0.047036975622, 0.034298919141, -0.051758661866, 0.049126639962, -0.038260947913, -0.056921746582, -0.032300107181, 0.000948429108, -0.011392273009, 0.005249857903, -0.053932927549, -0.034222695976, 0.045704990625, -0.049782045186, -0.036740712821, 0.023658409715, 0.038244254887, 0.027279712260, 0.024219647050, -0.036293964833, 0.011897921562, 0.016698241234, 0.011707268655, 0.054265573621, -0.023010708392, 0.012042656541, 0.007370986044, 0.006061099470, 0.001583538949, -0.046498894691, 0.004527620971, -0.012924503535, -0.015729364008, 0.049280270934, -0.036860466003, -0.017450157553, -0.006273344159, -0.002429142594, 0.007099628448, 0.060084879398, -0.004527270794, 0.032241813838, 0.045803107321, 0.019548185170, 0.057927489281, 0.025854513049, -0.061330124736, -0.021048959345, -0.029710374773, -0.013632766902, 0.030007377267, -0.005030751228, 0.017747573555, 0.000116214156, 0.017148546875, 0.066187143326, 0.019657306373, 0.006591781974, -0.042076718062, 0.043328583241, 0.001678399742, 0.021577484906, 0.048821344972, -0.036453466862, -0.070385068655, 0.037607394159, 0.057520791888, 0.028180934489, -0.017073769122, -0.062641113997, 0.019163258374, -0.070375360548, -0.004819400609, 0.065306514502, -0.031144112349, -0.018351275474, 0.039254784584, -0.043087162077, 0.060534238815, -0.048494301736, -0.071098424494, -0.044904742390, 0.014373607934, 0.067774236202, -0.047757506371, 0.045994453132, 0.018737353384, 0.059208810329, 0.017197877169, -0.063125044107, 0.047627650201, 0.030159838498, 0.051870882511, 0.027323760092, 0.038004264235, 0.016844049096, 0.035477504134, -0.029937930405, -0.043921362609, 0.012660212815, 0.047119133174, -0.037022586912, -0.053488299251, 0.046335145831, -0.008699014783, -0.001295998693, 0.009270519018, 0.024427324533, 0.002870365977, 0.005737088621, -0.035410709679, -0.049544371665, 0.040040858090, -0.068875312805, -0.030850883573, 0.066683441401, -0.007074519992, -0.070354022086, 0.044944576919, 0.054429024458, -0.001485131681, -0.054760918021, 0.071308672428, -0.062718711793, -0.030491527170, 0.017080686986, -0.060780741274, -0.027201391757, 0.028634972870, 0.051338881254, 0.056082233787, 0.022221229970, 0.069205045700, -0.068801149726, -0.029746558517, -0.046478282660, 0.060723379254, 0.020353943110, -0.001977100968, 0.061512842774, -0.011226903647, -0.027533818036, 0.052426852286, -0.049161892384, 0.057044103742, 0.064285978675, 0.023741632700, 0.021327309310, -0.008323550224, -0.055074401200, 0.040434487164, -0.003328315914, 0.071925163269, 0.016411922872, -0.029757726938, 0.048288583755, -0.071372829378, -0.001344561577, 0.028253696859, -0.025492385030, 0.047729067504, -0.064895838499, -0.016727112234, 0.003763720393, -0.046752259135, -0.067622736096, 0.022752992809, -0.015889126807, 0.066439658403, -0.069488666952, -0.051407359540, 0.033714815974, -0.030462138355, 0.036827221513, 0.014431096613, -0.054541673511, -0.063313879073, -0.033248040825, 0.019044138491, -0.045198127627, 0.030352912843, 0.026877306402, -0.054401785135, 0.047981709242, 0.057007297873, 0.050123281777, 0.007570080459, 0.067475661635, 0.011195018888, 0.010835528374, 0.055519476533, 0.020130790770, 0.067695781589, -0.054890774190, 0.032814025879, 0.011990003288, 0.024682708085, -0.007923103869, 0.052577912807, -0.049336485565, -0.019329283386, -0.040971606970, 0.015798434615, 0.048492617905, -0.019100800157, 0.062118038535, -0.061766251922, -0.054035738111, 0.047557584941, -0.038387946784, 0.061736404896, 0.064786404371, -0.037738390267, 0.039441734552, 0.043662920594, -0.009939763695, -0.006891548634, -0.036392971873, 0.057575136423, -0.012146446854, 0.013807810843, 0.027880251408, 0.034341268241, 0.023396082222, 0.009514763951, -0.018830318004, -0.040311861783, 0.044121146202, -0.045775540173, 0.003884755075, -0.026301685721, 0.041331820190, 0.062536686659, 0.045579992235, 0.028172433376, -0.060728810728, -0.068672634661, -0.006567396224, -0.020313128829, 0.004407674074, -0.025861669332, -0.021367777139, -0.051375113428, -0.046417493373, -0.005766697228, 0.045526444912, -0.020715069026, -0.007586598396, -0.012950792909, 0.009408570826, -0.065391205251, -0.050789374858, 0.015765756369, -0.011666338891, -0.039798248559, -0.002708747983, -0.013686917722, -0.003998123109, 0.017901979387, -0.061099179089, -0.022481955588, -0.071276508272, 0.046164385974, -0.069111637771, -0.025668133050, 0.023779422045, 0.004768230021, 0.035930827260, -0.034385621548, -0.051949359477, 0.065518558025, -0.055273614824, -0.028703697026, 0.045231766999, 0.053311601281, 0.033341437578, -0.022829562426, 0.046832077205, -0.003311969340, 0.058120474219, 0.061369821429, 0.003159880638, -0.071745194495, 0.066217124462, 0.048060595989, -0.064317703247, 0.002452112734, 0.005608797073, 0.064295396209, 0.038350537419, 0.040882803500, 0.069334343076, 0.043186359107, 0.021492607892, -0.009759131819, -0.055363982916, 0.040223971009, -0.060735005885, 0.023300446570, 0.071960270405, 0.003763824701, -0.028852704912, 0.029912449419, -0.011732701212, 0.050786450505, -0.053038440645, -0.055887833238, -0.000009790063, -0.053423706442, -0.045360211283, -0.068808391690, 0.011743217707, -0.023348506540, -0.067356504500, 0.002925999463, 0.026675805449, 0.055510923266, -0.053929746151, -0.038713388145, 0.061648473144, -0.022042799741, -0.051707249135, 0.007753387094, -0.020052794367, -0.031964030117, 0.035357251763, -0.027580723166, -0.014553569257, 0.071716770530, 0.070387393236, -0.046191416681, -0.020247604698, 0.005437493324, 0.015029773116, -0.053570233285, -0.042536489666, 0.014317825437, 0.023567900062, -0.065552055836, -0.047749008983, -0.056968927383, 0.041321374476, -0.004588805139, -0.068370752037, 0.027498513460, 0.008058935404, 0.055033445358, -0.020273260772, 0.025549665093, -0.058051638305, 0.059754833579, 0.069284349680, -0.031254407018, 0.003244191408, -0.012591954321, -0.028671350330, 0.017516613007, 0.052738100290, -0.019513841718, -0.030863460153, -0.021059609950, -0.011521372944, -0.020855661482, -0.007466584444, -0.066653996706, 0.006506368518, 0.036051064730, -0.004707165062, 0.071108907461, -0.003555953503, -0.011281929910, 0.045183658600, 0.038646593690, 0.049742728472, 0.012464761734, -0.016462840140, -0.020879097283, 0.009156353772, -0.031485382468, -0.062048539519, 0.036721095443, 0.000765480101, 0.048476167023, 0.019306108356, 0.035998702049, 0.041986353695, -0.016026642174, 0.066001638770, -0.059632662684, -0.068416349590, 0.070820316672, -0.045894093812, 0.049414344132, 0.032852053642, -0.018449436873, -0.010767698288, -0.034883625805, -0.030287545174, 0.028034716845, -0.049416631460, -0.027577903122, -0.022042267025, -0.001773722470, -0.060492172837, -0.052783165127, 0.024996362627, -0.052462901920, 0.012553274632, 0.037305578589, -0.039196286350, 0.060987442732, 0.032956600189, 0.069855466485, -0.038137663156, 0.047738082707, -0.064363002777, -0.008228689432, -0.024082511663, -0.019927307963, -0.032370515168, -0.020100474358, -0.041409283876, 0.023761011660, -0.000922568142, 0.055069059134, -0.068696245551, 0.071036890149, -0.043791230768, -0.031961999834, 0.050133585930, 0.014750324190, 0.003880277276, 0.053755685687, 0.019866518676, -0.001873672009, 0.060784608126, -0.042086835951, -0.031840730458, -0.060670208186, -0.051821947098, 0.013641133904, -0.052100811154, -0.007319681346, -0.039141982794, 0.059430286288, -0.031168289483, 0.027744494379, 0.030933849514, -0.061643280089, 0.015321508050, 0.033178247511, 0.003922984004, 0.062306463718, 0.016377203166, 0.045850470662, 0.019315831363, -0.059331707656, -0.038381785154, -0.027169369161, -0.033158686012, 0.014150150120, 0.040956616402, 0.006065383554, 0.011869393289, 0.055140644312, 0.035481065512, 0.065649718046, -0.049956262112, -0.025874745101, 0.028938136995, -0.061502944678, -0.019869253039, 0.001889467239, 0.049466118217, -0.064783856273, -0.042222112417, -0.007743045688, -0.050034325570, -0.014972388744, 0.066770672798, 0.065610766411, -0.065778486431, 0.040765918791, 0.035149633884, 0.056691035628, 0.058057412505, -0.024810254574, 0.058206528425, -0.018236093223, 0.016067318618, -0.046105973423, 0.027154363692, 0.059028729796, -0.015931006521, -0.017834857106, 0.020112983882, 0.044634290040, -0.055426716805, 0.041912123561, -0.064869664609, -0.008049882948, 0.059236869216, 0.057835668325, -0.032781094313, 0.056516245008, 0.033119596541, 0.057230830193, 0.056155160069, 0.003009222448, -0.065686173737, 0.033169388771, -0.028067510575, -0.016541060060, 0.000950001180, 0.017185471952, -0.015159007162, -0.071277320385, 0.045962885022, -0.018954977393, 0.058721020818, -0.044997502118, 0.028788648546, 0.050027854741, -0.056893460453, 0.056656703353, 0.067691028118, -0.021623719484, 0.030621245503, 0.063579976559, 0.050115212798, 0.007527805865, 0.066449761391, -0.046766798943, -0.053884662688, 0.014404214919, 0.005719229579, -0.015640184283, -0.041605658829, -0.022731207311, -0.021682634950, 0.004753969610, 0.016784496605, 0.015447609127, 0.016920149326, -0.011002670974, -0.025530237705, 0.040212646127, -0.045371532440, -0.025012034923, 0.026186749339, 0.017499372363, -0.044363636523, 0.036345809698, -0.026346854866, -0.069186672568, -0.058748304844, -0.068657010794, -0.057747807354, 0.056415155530, -0.009642384946, 0.020622827113, 0.041591450572, -0.006497919559, 0.062567099929, 0.005534946918, -0.013716045767, 0.037372186780, -0.056225024164, 0.046332336962, 0.062734678388, -0.021964184940, -0.017960190773, -0.034006033093, 0.052753657103, -0.045094870031, 0.023081339896, 0.016042076051, -0.065596476197, -0.060486324131, 0.006461031735, -0.045704513788, -0.054290220141, 0.058941334486, 0.009416893125, -0.033937379718, 0.043897569180, 0.052225038409, -0.031290985644, -0.055708900094, 0.016083940864, -0.011241614819, -0.010712038726, 0.020352527499, 0.027443155646, 0.069727525115, -0.047023173422, 0.002397522330, -0.061422452331, -0.022950332612, -0.025553468615, -0.068917982280, -0.038181710988, 0.064017415047, -0.004231803119, -0.062578104436, 0.049073591828, -0.012746501714, -0.037223316729, 0.059682443738, -0.045864358544, -0.013864554465, 0.044661924243, -0.001723408699, 0.017811663449, -0.014439508319, -0.015468481928, -0.001961819828, 0.050620801747, 0.007704399526, -0.035139314830, -0.054353728890, -0.071052670479, -0.016659576446, -0.055138014257, 0.014454804361, 0.041299402714, 0.031300246716, 0.071746438742, 0.032816074789, 0.032831110060, 0.066077470779, -0.004518806934, -0.010013613850, 0.068904519081, -0.033753424883, -0.065908037126, -0.008137963712, 0.036160670221, 0.015969775617, 0.046515204012, -0.048648007214, 0.058573633432, -0.033372029662, -0.057923518121, -0.069745607674, 0.035085529089, -0.028743926436, 0.063574761152, 0.030918918550, 0.039820186794, -0.015248466283, -0.047312844545, -0.045077629387, 0.019944943488, 0.035350866616, -0.046433959156, -0.023740172386, 0.052937269211, 0.059607699513, -0.035575736314, 0.027638517320, 0.068427190185, 0.040459178388, -0.017829973251, 0.070675492287, 0.000822462142, -0.022707238793, -0.068997681141, -0.057017758489, 0.059261992574, -0.004774890840, 0.009997814894, -0.065401375294, -0.003056727350, 0.035802416503, -0.006248548627, -0.021173000336, -0.054835848510, 0.067147731781, -0.071137428284, -0.014867912978, -0.048550173640, -0.010920956731, 0.026195801795, -0.057497728616, -0.065924361348, -0.055020939559, 0.031460933387, -0.029596280307, 0.025823846459, -0.006090715528, 0.009373672307, 0.071754172444, 0.006565183401, -0.018354903907, 0.018290929496, 0.061624750495, -0.057414054871, -0.046047002077, -0.047276228666, 0.001842215657, 0.067289605737, -0.020579997450, -0.065010257065, -0.024864628911, 0.072138741612, -0.046957634389, 0.017094917595, -0.032733157277, -0.048609826714, -0.027918606997, -0.014068521559, 0.012328527868, -0.012143813074, -0.039387483150, 0.007780238986, 0.035512223840, 0.065368995070, 0.065251708031, -0.050345793366, -0.067518107593, -0.033398903906, -0.070434071124, 0.003079667687, 0.057600885630, 0.020463973284, 0.054139226675, 0.039770670235, -0.069678500295, 0.018276751041, 0.000202447176, 0.025941818953, 0.050777643919, 0.043010972440, -0.067866966128, 0.012327596545, 0.048271134496, 0.039903499186, -0.004593297839, 0.031684257090, -0.063999176025, 0.039837412536, -0.007097169757, 0.031516648829, -0.038343243301, -0.024380285293, 0.066870644689, 0.054873034358, 0.000319451094, -0.065147235990, 0.001248359680, -0.046183899045, -0.038338806480, -0.001073457301, 0.025154799223, -0.025786288083, -0.012813728303, 0.020509868860, -0.052821397781, -0.002162516117, -0.063985168934, -0.005004562438, 0.047807939351, 0.071576535702, -0.017921768129, -0.069016039371, 0.044917851686, -0.022323675454, -0.048685945570, -0.040110804141, 0.044417098165, -0.002844028175, -0.052714906633, 0.067403495312, 0.002208970487, -0.041517823935, 0.001818388700, 0.004723250866, 0.016583956778, -0.070773348212, -0.014951001853, 0.025801636279, -0.021630708128, -0.061615902930, -0.020288728178, -0.068714618683, 0.006945699453, 0.056043714285, -0.014218248427, -0.056689288467, 0.015952736139, -0.017919443548, -0.040221560746, -0.062694244087, 0.026054278016, 0.033773489296, 0.068064868450, 0.019474267960, 0.037512451410, -0.033767379820, 0.070207923651, 0.057387232780, -0.035949856043, 0.025437481701, -0.019156187773, 0.062450960279, 0.056949064136, 0.053770899773, -0.052258402109, 0.063290745020, -0.041346084327, 0.017168626189, 0.039080381393, 0.024528056383, 0.062350958586, -0.020514681935, -0.043843381107, 0.049051083624, -0.046495676041, -0.007125265896, -0.068397745490, 0.071418881416, -0.040377091616, -0.056912109256, 0.013001225889, -0.059326834977, -0.010345645249, -0.035382490605, 0.022003605962, -0.065873257816, 0.049679838121, -0.014312833548, -0.019196707755, 0.066408947110, -0.002334184945, 0.067098662257, -0.018217202276, -0.042026735842, 0.063516348600, -0.043666347861, -0.063011772931, -0.003118120134, -0.052824683487, 0.017496012151, -0.070317275822, -0.014545034617, 0.055310264230, 0.015699133277, 0.016380801797, -0.028738576919, -0.014563668519, -0.047112442553, 0.046053148806, -0.053085878491, -0.053351543844, -0.011898778379, -0.063288211823, 0.035300396383, 0.023988425732, 0.024489529431, 0.057989090681, -0.031746283174, 0.024216569960, -0.012335769832, -0.027610301971, -0.060245864093, 0.060122132301, -0.049953646958, 0.002186313272, 0.059535294771, 0.004846401513, 0.016925603151, -0.040520418435, 0.045030333102, -0.034876417369, 0.071662917733, -0.018069621176, 0.021741479635, -0.014980114996, -0.058691147715, -0.057756204158, -0.046224951744, -0.009523935616, -0.019129585475, -0.007195435464, -0.068766616285, 0.008142471313, -0.022120330483, -0.026180416346, 0.056734010577, 0.015249498188, -0.026514686644, 0.022104687989, 0.056100904942, -0.012903045863, -0.050503849983, 0.025657102466, -0.043170474470, 0.019603535533, -0.028877291828, 0.007657490671, -0.014310546219, 0.069567039609, 0.035357676446, 0.015231244266, 0.038509272039, -0.054238222539, 0.000528976321, 0.050920419395, -0.006821349263, -0.030328530818, -0.069637894630, 0.007396265864, 0.059587925673, 0.030159235001, -0.002610087395, -0.012982882559, 0.058487325907, -0.008971065283, 0.021713934839, 0.012109972537, 0.055522009730, -0.042865201831, -0.004013024271, 0.065308496356, -0.013616234064, -0.061252884567, 0.023243285716, -0.012331966311, 0.024098925292, 0.064971372485, -0.059464778751, 0.048100516200, 0.028067059815, -0.012441553175, 0.052241884172, 0.053204134107, 0.002791218460, 0.013803318143, 0.012369871140, -0.030517540872, -0.027924023569, -0.041426885873, -0.034919828176, 0.015233665705, 0.037014618516, 0.067094787955, -0.032643303275, -0.041739270091, 0.025891162455, 0.051671974361, -0.006105616689, 0.007935822010, -0.039499960840, 0.061484694481, -0.035217810422, -0.022344667464, -0.071533314884, 0.000473000109, 0.060352221131, 0.043862119317, 0.039883248508, -0.003439329565, 0.058045282960, -0.060697928071, -0.046747766435, 0.044796563685, -0.037802170962, 0.014813400805, -0.045413292944, 0.014627657831, -0.065313003957, 0.043924100697, -0.014707617462, 0.071413636208, 0.054319441319, 0.028930872679, -0.042080331594, 0.054917350411, -0.071249358356, -0.008975312114, 0.036436125636, 0.015058055520, -0.002524018288, 0.055775031447, -0.010713931173, 0.034482389688, 0.005304895341, -0.046876333654, 0.001785628498, 0.015522249043, -0.071630552411, -0.050592102110, 0.008966296911, 0.027370460331, -0.035079676658, -0.016759976745, 0.016037791967, -0.043987832963, 0.059725433588, -0.046868383884, 0.047445453703, -0.065316081047, -0.014341466129, -0.059671480209, 0.068795099854, 0.023260734975, -0.013001311570, 0.015618644655, -0.011216685176, -0.034880187362, -0.061677195132, 0.033125720918, 0.050579592586, -0.070867106318, -0.012222308666, 0.030986659229, 0.047764480114, -0.042028643191, 0.004235990345, -0.057183489203, 0.018900707364, -0.036610838026, -0.007019892335, 0.026658840477, 0.038960285485, 0.063723534346, -0.061970219016, 0.008782476187, 0.032759360969, 0.011430524290, 0.050375662744, -0.008738979697, 0.022378787398, -0.023130360991, -0.027660612017, -0.027526196092, 0.066624149680, 0.040253303945, -0.049414828420, -0.029870461673, -0.058541554958, -0.040451955050, -0.008297808468, -0.042406994849, -0.038552630693, 0.060387432575, -0.043077062815, -0.007200524211, -0.018548268825, -0.070223793387, -0.005974620581, -0.036675207317, -0.036682520062, 0.031466424465, 0.056569635868, 0.002559617162, -0.042943008244, -0.071465991437, -0.044953901321, 0.001689188182, 0.047328777611, -0.049756664783, -0.003562048078, -0.037488982081, 0.033282473683, 0.043675690889, -0.059690009803, -0.018617901951, 0.022182151675, 0.069897145033, 0.063291043043, -0.048011735082, 0.028282351792, 0.011974811554, 0.028276413679, 0.015753522515, 0.063270777464, 0.050588198006, 0.019212730229, 0.063837245107, -0.030429463834, 0.069111391902, -0.059330362827, -0.052692279220, -0.070734903216, -0.021278869361, -0.028895530850, -0.045049324632, -0.058993756771, 0.030030637980, 0.017995856702, 0.057891890407, 0.050043821335, 0.050195671618, 0.065691679716, 0.050047539175, 0.017833381891, -0.069452442229, 0.004545204341, 0.038174018264, 0.017320938408, 0.042872413993, -0.018788971007, -0.057912454009, 0.033168151975, -0.010213155299, -0.042881391943, 0.014905370772, 0.040999464691, -0.045987058431, -0.019180104136, -0.063104823232, 0.010117538273, -0.050315633416, 0.013017863035, -0.041623122990, -0.050044286996, -0.028708018363, -0.026078436524, 0.071413949132, 0.032771557570, 0.025005444884, 0.032562226057, 0.002541430295, 0.059125155210, 0.002230271697, 0.034539550543, 0.069859892130, 0.004411265254, 0.007676295936, 0.061965823174, -0.015990369022, 0.052117034793, -0.021287318319, 0.067095011473, -0.044675521553, -0.020161420107, -0.051816631109, 0.062289312482, -0.024575665593, -0.023279540241, 0.065957367420, 0.052376337349, 0.063126280904, -0.031301222742, -0.008332498372, -0.060277435929, -0.026485949755, 0.016810886562, -0.053908444941, 0.036720238626, 0.035203717649, 0.035884864628, -0.040783867240, 0.002138048410, -0.040998965502, 0.037397049367, 0.018675819039, 0.014561139047, 0.058867394924, -0.065609507263, -0.018494550139, -0.036620195955, -0.059042982757, -0.004165679216, 0.071490883827, 0.032258518040, 0.062869220972, 0.068371281028, -0.011100850999, -0.010673530400, 0.000456109643, 0.036457233131, -0.027764245868, 0.071961224079, -0.054814979434, -0.036323215812, -0.067838229239, -0.068192370236, 0.067711472511, 0.003108948469, 0.012287214398, -0.069885358214, -0.064490295947, -0.028147589415, -0.048434320837, 0.046816371381, 0.024063169956, 0.071001082659, -0.025382917374, -0.010428942740, 0.070620283484, 0.028878480196, -0.052475858480, 0.052638255060, 0.001587837934, 0.038214884698, 0.008442811668, -0.052327625453, 0.002577759326, 0.012246206403, -0.059606973082, -0.033687371761, -0.070057556033, 0.054930970073, -0.011829506606, -0.029330525547, -0.023476675153, -0.016420666128, -0.034393418580, -0.064650796354, 0.038205213845, 0.054508253932, -0.001997709274, 0.061693027616, -0.018528755754, -0.039400972426, 0.062955319881, 0.004676625133, -0.064949519932, -0.056190080941, 0.027551643550, -0.009436100721, 0.056463137269, 0.030444964767, 0.039898805320, -0.037832301110, 0.044016018510, -0.064299307764, 0.001883029938, -0.044148296118, -0.059571150690, 0.017545633018, 0.009143382311, 0.035155214369, 0.007054477930, -0.057649213821, 0.056988060474, 0.021416731179, -0.032189674675, 0.038966633379, 0.041370548308, -0.046099346131, 0.070517674088, -0.004884824157, 0.011189036071, 0.069898292422, -0.025157120079, 0.016057178378, 0.023629054427, 0.003334820271, -0.042300160974, 0.050689406693, -0.011861886829, -0.006316669285, 0.034529797733, -0.061911009252, 0.030418433249, -0.031261581928, 0.035614229739, -0.023103520274, 0.060664638877, 0.051335662603, 0.055446475744, 0.028673432767, -0.064323708415, 0.031047828496, 0.017548523843, -0.010485533625, -0.038727808744, -0.029288716614, -0.021141029894, -0.063258305192, -0.051635704935, -0.050241265446, 0.025387011468, 0.033117614686, -0.004354365170, 0.012497492135, 0.068272247910, -0.043691158295, -0.052325561643, 0.002255894244, 0.020631879568, 0.047280527651, 0.026155039668, 0.071756929159, 0.047690950334, -0.014218319207, 0.046375751495, 0.058885887265, 0.043185636401, 0.001122698188, -0.050401922315, 0.004963904619, -0.010498903692, 0.045913584530, -0.065177746117, 0.003901652992, -0.030514083803, -0.012453477830, 0.002361677587, 0.057250186801, 0.004672341049, 0.001479744911, -0.035206057131, 0.001384824514, 0.033747591078, -0.002067297697, -0.013898778707, 0.060731709003, 0.005180649459, -0.024299778044, -0.023358795792, 0.011141113937, 0.066332399845, 0.040048778057, -0.055947110057, -0.048615727574, 0.007951408625, 0.059281036258, 0.006461493671, -0.010467808694, 0.002138838172, -0.000018924475, 0.010952048004, 0.034083887935, 0.046151742339, 0.000506296754, -0.056273702532, -0.056197755039, -0.047430880368, -0.009879112244, 0.006348721683, -0.003381036222, -0.051712378860, 0.032613880932, -0.007066056132, -0.005477651954, -0.055903233588, 0.066697910428, -0.014343891293, -0.028388217092, -0.015376515687, 0.013300172985, 0.052248165011, -0.040938895196, 0.016616977751, -0.022680450231, 0.054521694779, 0.061106249690, 0.052836120129, 0.055724725127, 0.047067858279, -0.001572750509, 0.008362419903, -0.019523974508, 0.015097372234, 0.011862218380, 0.009697772563, 0.008819647133, 0.015137605369, -0.038590706885, -0.032487690449, 0.067725643516, 0.012512013316, -0.015607148409, -0.012878682464, -0.008600041270, -0.003838777542, 0.032808899879, -0.025891177356, 0.068931013346, 0.035717740655, -0.043891664594, -0.016435995698, -0.063267901540, 0.042310036719, 0.036539740860, 0.035239487886, 0.061350807548, -0.017109833658, 0.037079297006, -0.046295844018, -0.041794482619, -0.021881215274, 0.034771889448, -0.064521543682, -0.051298342645, -0.018835030496, 0.040721252561, 0.026649601758, 0.063249871135, 0.065883263946, -0.047598365694, 0.061987534165, 0.064836040139, -0.002891547978, 0.069856449962, -0.035755407065, 0.018894068897, 0.028740741313, 0.007208421826, -0.036123774946, -0.045435883105, -0.058327592909, -0.055826455355, 0.064214393497, 0.018912956119, 0.011079892516, -0.019654415548, 0.000300630927, -0.058197855949, 0.058035463095, 0.046376146376, -0.063101366162, -0.006910532713, -0.069167628884, 0.036863632500, -0.049064986408, -0.045569613576, 0.006363175809, -0.039863754064, -0.069319374859, -0.010405607522, -0.009906623513, -0.039492923766, -0.053968131542, -0.062693439424, 0.066212281585, 0.007096096873, 0.062567785382, -0.013463336974, 0.017419204116, 0.036494955420, -0.051275283098, -0.004791043699, 0.015466794372, 0.004334971309, -0.040352467448, -0.009673975408, -0.066091798246, -0.067219816148, 0.042856805027, 0.046282440424, -0.067280590534, 0.041500359774, 0.064580053091, -0.002776280046, -0.017099440098, -0.060723666102, 0.025540098548, -0.003860488534, -0.007878854871, -0.005855970085, -0.024455700070, 0.021847985685, 0.022970363498, -0.007783666253, 0.039787843823, 0.057647556067, -0.025923095644, 0.011164568365, -0.039432339370, 0.035976387560, 0.060527741909, 0.002202175558, -0.004107370973, -0.025463443249, -0.045102424920, 0.033598154783, -0.003248512745, -0.031084302813, -0.008172839880, -0.049161463976, -0.039340097457, -0.062513977289, 0.012687087059, -0.003797084093, -0.041082292795, 0.039633519948, 0.049124538898, -0.017780296504, 0.004007898271, -0.043181385845, 0.071321919560, 0.037162028253, 0.068174824119, -0.042705252767, 0.019714191556, 0.063475281000, 0.054767787457, -0.007288895547, -0.025174446404, 0.061715662479, -0.034907869995, -0.064133629203, 0.068574488163, -0.016584265977, 0.015327356756, -0.023561831564, 0.003314003348, 0.059468090534, 0.008455112576, 0.004041865468, -0.041491717100, -0.025123275816, 0.021339990199, 0.049546040595, -0.013957075775, -0.049482274801, -0.071567639709, 0.036423407495, 0.039860121906, 0.037246942520, 0.030389443040, -0.031219735742, 0.046080112457, 0.064877539873, -0.061129443347, 0.004033640027, -0.017273433506, -0.063468322158, 0.019946925342, 0.067703157663, 0.014718510211, 0.015821956098, 0.056785687804, 0.004073232412, -0.011801354587, -0.027562949806, -0.060025416315, -0.059040486813, -0.055178530514, -0.054027546197, -0.007837384939, 0.032221041620, -0.012345869094, 0.040428057313, 0.060601413250, 0.055585801601, -0.055256012827, -0.015661176294, 0.068648546934, 0.063644960523, 0.055221527815, -0.058243572712, -0.057513009757, 0.017086967826, 0.064232677221, 0.030597567558, 0.020146571100, 0.000433377922, 0.048955172300, 0.067271739244, -0.010917514563, -0.029864422977, -0.048849083483, -0.042212769389, -0.070940159261, 0.071134030819, 0.046278260648, -0.000353865325, 0.003818251193, -0.047030076385, -0.052875667810, 0.049227535725, -0.009559348226, -0.041315663606, 0.002359442413, 0.031118184328, -0.053211688995, -0.010352011770, 0.049230821431, 0.024482436478, 0.066946446896, 0.063323691487, -0.068556129932, -0.000561341643, -0.069082751870, -0.046669185162, 0.023776136339, -0.054069012403, -0.068554155529, -0.004649870098, -0.071861304343, -0.068306088448, 0.032276622951, 0.014447301626, -0.069040298462, -0.037868607789, -0.037682104856, -0.066494844854, 0.068063974380, -0.044800609350, 0.009431071579, -0.071344509721, -0.038191035390, -0.042000666261, -0.065996512771, -0.053117968142, 0.055182442069, -0.046444937587, -0.055798791349, 0.042506985366, -0.050813447684, -0.009865500033, 0.011908188462, 0.065450578928, 0.003159590065, 0.042253978550, -0.055801749229, -0.048258163035, 0.005446955562, -0.045789942145, 0.020962685347, -0.037815816700, -0.052746444941, -0.029238920659, -0.058512009680, -0.030794117600, 0.032091289759, -0.053336281329, 0.005917839706, -0.011182047427, -0.014952048659, -0.001322567463, -0.047518700361, 0.042686358094, 0.068167716265, -0.067760907114, -0.049131300300, 0.037250056863, 0.002125658095, 0.048202432692, -0.037549462169, -0.036267913878, -0.063985243440, -0.043013468385, -0.059937506914, 0.056985437870, 0.067173629999, 0.072135835886, 0.059061288834, 0.030765913427, -0.013320490718, -0.002425856888, -0.070475399494, -0.002338774502, 0.004657663405, 0.055872306228, -0.064113602042, -0.027095418423, 0.007162690163, 0.018705017865, -0.032424062490, -0.037074428052, 0.043260961771, 0.011068329215, 0.038167379797, 0.061243355274, -0.057237088680, 0.014697685838, 0.050988279283, -0.056657437235, 0.061354964972, 0.042973548174, 0.038726806641, -0.028011295944, -0.041187442839, -0.040583945811, 0.046714596450, 0.049788430333, 0.066149547696, 0.060624003410, 0.055836677551, -0.059074863791, 0.032234497368, -0.013898521662, -0.065997987986, -0.030505806208, 0.055854916573, 0.030300088227, 0.008522264659, -0.024846732616, 0.015570983291, -0.016904871911, 0.005151741207, 0.030672006309, -0.017523836344, -0.031988188624, -0.039406511933, 0.023135006428, 0.007199302316, 0.057607576251, 0.032290674746, -0.046140555292, 0.015207648277, 0.067614376545, 0.055427193642, 0.065372407436, -0.018868617713, 0.028340056539, -0.051093842834, 0.031208738685, 0.028487585485, 0.042976357043, 0.011732310057, -0.019989699125, 0.000504694879, -0.032976593822, 0.016907557845, 0.022512912750, 0.043173953891, 0.060697093606, -0.051549158990, 0.028446190059, 0.029775366187, -0.070717133582, 0.008711881936, -0.043566688895, -0.008408330381, -0.019467554986, -0.064425513148, -0.034991271794, -0.070670120418, -0.070986896753, -0.069528684020, -0.071695193648, -0.041672401130, -0.002470821142, 0.035041995347, -0.041281886399, -0.016669195145, 0.048846051097, 0.055132761598, -0.014209095389, -0.064755603671, 0.062757313251, -0.013337042183, 0.001351580024, -0.027581222355, 0.067228019238, 0.032317399979, 0.039015322924, -0.069762267172, 0.062218800187, 0.017481543124, 0.025375038385, -0.012180343270, 0.071715354919, 0.018276356161, 0.019230432808, -0.036618702114, -0.014978066087, -0.025160234421, -0.047596301883, -0.027707997710, 0.010983705521, 0.055055111647, -0.003885805607, -0.024095777422, -0.042307749391, 0.001524880528, 0.041260086000, -0.006929300725, 0.069374039769, 0.064939707518, 0.029746957123, -0.052695877850, -0.019094604999, -0.009345971048, -0.033630244434, -0.002967551351, 0.058818280697, -0.047171425074, 0.068379595876, -0.070892415941, -0.027694232762, 0.009275101125, 0.033650115132, 0.023259893060, -0.021356385201, 0.022014357150, -0.032085921615, 0.063881754875, -0.005157180130, 0.022416763008, 0.009934708476, -0.020926691592, -0.054273806512, -0.029355492443, 0.026890143752, -0.061285987496, 0.039718464017, -0.021108716726, -0.007378749549, 0.044864632189, -0.059762708843, 0.039443507791, 0.066886231303, 0.012026257813, 0.069125488400, 0.040609665215, 0.050127580762, -0.008274875581, -0.047517463565, -0.054330483079, 0.040122628212, 0.043777331710, 0.014985188842, -0.068010121584, 0.060429245234, -0.016409430653, -0.061791926622, -0.026141270995, 0.063088998199, 0.002625383437, 0.043775588274, 0.032341934741, 0.004576206207, -0.048451665789, -0.039131812751, 0.063033849001, -0.041765559465, -0.054371673614, 0.014068022370, -0.056196462363, 0.067703187466, 0.031323991716, 0.012821815908, 0.016621932387, 0.030063256621, -0.041883576661, 0.032229542732, 0.003592021763, 0.048912279308, -0.021026194096, 0.005990438163, -0.069646000862, -0.067711129785, 0.013245932758, 0.029248572886, 0.048994459212, -0.024801120162, 0.031651102006, 0.003183268011, -0.065615423024, 0.070409372449, -0.030920155346, -0.054915256798, -0.004159674048, -0.041704114527, -0.048173420131, -0.032121073455, 0.068951621652, -0.033792279661, 0.032241538167, 0.022871181369, -0.046154081821, -0.029398303479, -0.007876239717, 0.057630643249, -0.059982448816, 0.050600141287, 0.021417796612, 0.010546736419, 0.027232863009, -0.039256885648, 0.006620481610, 0.036851122975, 0.036652632058, -0.061441965401, -0.004847623408, -0.043799556792, 0.002497062087, -0.052847068757, -0.017976932228, -0.052529044449, -0.028120607138, 0.031365796924, 0.046387739480, 0.020362958312, 0.046377763152, 0.009866788983, -0.020413886756, -0.001775905490, -0.045805290341, -0.043317575008, -0.033126614988, 0.062059581280, -0.024959314615, -0.022157859057, -0.015091869980, 0.031940028071, -0.057918064296, 0.022006683052, 0.051807321608, 0.039984099567, -0.016861494631, 0.053028881550, -0.018551625311, 0.068163499236, 0.015082523227, -0.015084110200, -0.011824999005, 0.012121826410, 0.064804241061, -0.055466499180, -0.039403535426, -0.047865167260, 0.057187154889, 0.032426260412, 0.016327165067, -0.067875549197, 0.069694846869, -0.002940036356, 0.039658531547, 0.061590731144, -0.011425446719, -0.003074347973, 0.017960637808, -0.028672657907, -0.068910613656, 0.034771323204, 0.052611321211, 0.039366804063, -0.037140950561, 0.017349831760, 0.058848544955, 0.064562499523, -0.027846887708, -0.051900804043, 0.063929080963, 0.054733112454, 0.001162499189, 0.007637530565, -0.014183338732, -0.039848614484, -0.012611828744, -0.003121979535, 0.034733481705, 0.069418877363, 0.003414347768, 0.037684515119, -0.015646845102, -0.044045988470, -0.055291991681, -0.055237583816, -0.049215525389, -0.017451379448, -0.059599936008, -0.056744571775, -0.068347178400, -0.059221755713, 0.054608643055, 0.016906142235, -0.031162694097, 0.057846963406, 0.048200093210, 0.067808076739, 0.000384956598, 0.004101067781, -0.037050854415, -0.060369681567, -0.020392399281, 0.049614541233, 0.066949158907, 0.009997986257, -0.054696649313, -0.032880496234, 0.015147052705, 0.002924136817, -0.008628651500, 0.013230331242, -0.008079394698, 0.021137259901, 0.009559229016, 0.038235291839, -0.001798413694, 0.055824190378, -0.067163877189, 0.001910112798, 0.023852087557, -0.019355215132, 0.071334481239, -0.072103276849, 0.052487440407, -0.053176194429, 0.013388387859, 0.031863130629, 0.051821276546, 0.004117242992, 0.036117650568, 0.015106081963, -0.049696907401, -0.030356440693, 0.023862287402, 0.038821652532, 0.071143403649, -0.066241115332, 0.039207004011, 0.011082902551, 0.009896658361, -0.011901754886, -0.031086247414, -0.066322326660, 0.015777975321, 0.038351155818, -0.024959020317, -0.044090054929, -0.044757694006, 0.019168920815, -0.041741210967, 0.070954754949, -0.004615642130, -0.004300065339, -0.037570454180, -0.054330792278, -0.002987183630, 0.027311980724, 0.033504068851, 0.041889809072, 0.067274615169, 0.027222797275, -0.049365460873, 0.053473711014, 0.026424504817, -0.005468584597, 0.042041599751, -0.067272797227, 0.069393634796, -0.042680300772, 0.061814859509, -0.054505798966, 0.038364924490, 0.054032146931, -0.001167416573, -0.048827659339, -0.007050156593, 0.051856569946, -0.036483097821, 0.017379321158, 0.061801657081, -0.030613966286, -0.013308789581, 0.068334102631, -0.030620180070, 0.059681832790, -0.054943475872, 0.034450389445, -0.009712949395, 0.033957302570, -0.009051106870, -0.000821240246, 0.065141245723, 0.041308127344, 0.072163790464, -0.014144796878, -0.001434668899, -0.003345765173, -0.008955076337, -0.067454852164, 0.035421960056, 0.016345821321, -0.064772948623, 0.012731529772, 0.020676374435, -0.066626764834, 0.047624692321, 0.051087804139, -0.017687123269, -0.020565148443, -0.027598705143, 0.013140887022, 0.057502925396, 0.052050329745, -0.055948071182, 0.060567483306, -0.016730640084, -0.002755880356, 0.037030622363, 0.025373831391, -0.057185985148, -0.020365279168, -0.031482182443, -0.015725683421, -0.066198579967, -0.039364717901, 0.001307956874, 0.033853054047, 0.008137807250, 0.054690152407, -0.040256351233, -0.025085281581, -0.062671117485, 0.040278978646, -0.028650287539, 0.010435052216, -0.009154736996, -0.024547703564, 0.058848276734, -0.053901836276, 0.014749459922, 0.044707506895, -0.005825303495, -0.039927657694, 0.069410666823, -0.070485241711, 0.005323842168, -0.029953069985, -0.070848397911, -0.067754127085, -0.060968961567, -0.009223878384, -0.004054665565, 0.020039893687, -0.027090616524, 0.050452783704, -0.037703562528, 0.059732511640, 0.000898726285, -0.025151457638, -0.003932878375, 0.066286161542, -0.024603728205, -0.013437680900, -0.010456625372, 0.001493066549, -0.022750858217, -0.061870783567, -0.013610795140, -0.027060229331, -0.040947016329, -0.038806837052, -0.002542965114, -0.038125719875, -0.038822185248, -0.000602364540, -0.071630291641, 0.018406920135, -0.031998220831, -0.033314678818, 0.004851371050, -0.059191215783, 0.022519193590, 0.057164371014, -0.062327664346, 0.034872308373, -0.056671101600, -0.071972906590, -0.030236441642, 0.023845545948, -0.044235087931, -0.033099945635, 0.039070367813, -0.008847780526, 0.008305534720, -0.042337086052, 0.049233317375, 0.067813485861, -0.057158265263, 0.018333807588, -0.001922331750, -0.029626663774, -0.048754222691, -0.015509091318, 0.069390967488, -0.006484054029, 0.043000601232, 0.001227848232, -0.021350808442, -0.001023434103, -0.050117414445, 0.029235064983, 0.053702086210, 0.035557396710, -0.049548350275, -0.027443449944, 0.005550689995, 0.020909965038, -0.006899364293, -0.035742465407, -0.010991659015, 0.024326257408, -0.055187068880, -0.069039426744, -0.009946148843, 0.069968670607, -0.039299573749, 0.014233991504, 0.015617042780, 0.008440054953, -0.040484767407, 0.037640124559, 0.039442062378, 0.024476177990, 0.045222662389, 0.029517166317, 0.054862037301, 0.042815901339, -0.038825299591, 0.058637857437, 0.045052461326, 0.043346688151, 0.038526065648, -0.028012741357, -0.027134906501, -0.062404576689, 0.007675595582, 0.014028981328, 0.032629229128, 0.067294433713, -0.022228732705, -0.046336710453, 0.020534969866, -0.040272131562, -0.058732718229, -0.006968528032, 0.017676539719, -0.010226044804, -0.054029472172, -0.059725698084, -0.033271662891, 0.003214702010, -0.011546734720, 0.052115865052, -0.046858027577, -0.041281424463, 0.021688282490, -0.054553218186, -0.036137353629, 0.057193741202, -0.055259007961, -0.026746783406, 0.010804541409, 0.000936374068, 0.037614420056, -0.009951189160, 0.024262957275, -0.044877953827, -0.017619796097, 0.003035098314, 0.004396796227, -0.019047494978, -0.044388860464, -0.025013599545, 0.050415135920, -0.027632463723, 0.033188916743, 0.036961555481, 0.010228797793, -0.034330338240, -0.041876919568, 0.021541543305, -0.015596222132, -0.011442277580, -0.017874948680, -0.020179983228, 0.070546343923, 0.065992236137, 0.014379493892, -0.010788466781, -0.044071696699, 0.034937486053, 0.031662166119, -0.053730994463, 0.032182119787, 0.001051411033, 0.001003772020, -0.028360601515, 0.016013562679, -0.018534936011, -0.030528452247, 0.023334652185, -0.061820194125, 0.065125435591, 0.043155953288, -0.054661482573, -0.053980417550, -0.002004250884, 0.036268174648, -0.060941636562, -0.040515258908, 0.019692629576, 0.039522297680, -0.054819453508, 0.055101260543, 0.040058240294, -0.005832172930, 0.046544648707, -0.070242665708, -0.026024509221, -0.058463282883, 0.017932333052, 0.027244083583, -0.008395716548, 0.039576426148, 0.070078596473, -0.033915251493, 0.028672948480, -0.038995984942, -0.030938446522, 0.071086540818, 0.039665482938, -0.043986469507, -0.014414746314, 0.064270526171, -0.044913329184, 0.036860808730, 0.015772379935, -0.026054397225, -0.037716038525, -0.060957279056, -0.044125743210, 0.065127834678, -0.066500894725, -0.057536460459, -0.030924197286, -0.041204512119, 0.028866969049, -0.069602705538, 0.049085497856, 0.007333561778, -0.040991615504, -0.044256851077, -0.066618621349, 0.061002820730, 0.056132853031, 0.007754981518, 0.032951623201, -0.064966998994, -0.069304317236, 0.054783061147, 0.015351906419, -0.006324619055, -0.055477838963, -0.037486933172, 0.046097539365, -0.067649714649, -0.056078512222, 0.069740206003, -0.065859206021, -0.016735404730, 0.059149608016, -0.047908596694, 0.047047108412, 0.051014177501, -0.008666165173, 0.041382908821, -0.067948989570, 0.035732403398, 0.047231562436, 0.048892609775, -0.013683889061, 0.017845213413, -0.000526033342, -0.059046201408, 0.026512585580, 0.030809275806, -0.041421949863, -0.009512081742, -0.057814307511, -0.022925693542, 0.026929289103, 0.035684138536, 0.057481721044, -0.013723220676, 0.061071872711, 0.067801088095, -0.040602374822, -0.067265860736, -0.035237528384, 0.024683065712, 0.044379159808, 0.035845167935, 0.015835650265, 0.016380369663, -0.024882350117, -0.029006924480, -0.069837763906, -0.005898848176, 0.049292385578, -0.035957407206, -0.067289739847, -0.006814107299, 0.001495011151, 0.028552986681, -0.061097010970, -0.051917716861, -0.020258273929, 0.068469882011, 0.062839344144, -0.068399518728, 0.065794914961, -0.035329256207, 0.002431280911, 0.011945508420, -0.010538838804, 0.016844645143, 0.057165354490, 0.032631687820, -0.008590750396, -0.004561580718, -0.032350726426, 0.002495117486, -0.012219384313, -0.053074743599, -0.005822829902, 0.002382293344, 0.036129713058, -0.053645566106, 0.005106694996, 0.035009168088, 0.060981929302, 0.034903638065, 0.042523980141, -0.024397820234, 0.038891628385, -0.067051418126, -0.071467898786, 0.022578813136, -0.041188769042, -0.026518419385, 0.013435773551, -0.062967501581, -0.011837817729, 0.040653541684, -0.048751089722, 0.020334288478, -0.060801010579, -0.030561383814, -0.058570668101, 0.061083883047, 0.018458984792, 0.028811670840, 0.062177389860, 0.049501441419, 0.000415720046, -0.050584360957, 0.053946748376, 0.011701613665, -0.041397772729, 0.027743704617, -0.040276259184, 0.051739044487, -0.066418103874, -0.004593104124, -0.055517584085, -0.054219141603, -0.015823140740, 0.044220991433, 0.007676713169, -0.061772741377, 0.019826069474, -0.022536173463, 0.027088604867, 0.025692045689, 0.052029371262, 0.015575595200, 0.053713649511, 0.033935882151, 0.048880033195, -0.008343853056, 0.038188092411, -0.014188811183, -0.022074785084, 0.000935651362, -0.011547956616, -0.028324607760, -0.016326978803, 0.055069133639, -0.052011422813, 0.018521636724, 0.061992540956, 0.058008402586, -0.016411665827, -0.070701867342, 0.064610451460, 0.042516842484, -0.037604559213, -0.053653374314, -0.022472288460, -0.005867063999, 0.005382657051, 0.054979234934, -0.051187649369, -0.017859395593, -0.034396942705, 0.033963754773, -0.027923528105, 0.028011843562, 0.066283628345, 0.061341792345, -0.031208515167, 0.037921175361, -0.063509657979, -0.042315009981, 0.011774063110, 0.070864364505, -0.035948958248, 0.009729780257, 0.003924153745, 0.071547567844, -0.008815020323, 0.029329136014, -0.052849166095, 0.035650238395, -0.021383211017, -0.041464105248, -0.011198807508, 0.002968274057, -0.033627267927, -0.000399529934, -0.046992547810, -0.049196735024, 0.006142556667, 0.067449092865, 0.032277047634, -0.026969190687, -0.062716908753, -0.012535292655, -0.053585600108, 0.010908909142, 0.007060997188, -0.039817970246, 0.048063762486, 0.005206562579, -0.071421764791, -0.047699265182, -0.040313649923, 0.062538623810, 0.014160439372, -0.023639105260, 0.030068218708, -0.015460480005, 0.018713660538, -0.042714782059, -0.042648762465, -0.013516023755, -0.043126307428, -0.023124683648, 0.007574006915, -0.014093350619, 0.020209699869, 0.067907765508, -0.030196178705, -0.002253107727, 0.066650226712, -0.037603884935, 0.004633642733, 0.030733875930, -0.066051229835, -0.023190669715, -0.040741745383, -0.020999457687, 0.049988470972, 0.028637245297, 0.008111998439, 0.053182676435, 0.013927876949, 0.036372445524, -0.004415005445, -0.006453044713, 0.066555768251, 0.063378959894, 0.029705159366, -0.028425127268, 0.071795672178, 0.008092537522, 0.066771343350, -0.035248644650, 0.001285731792, -0.059543635696, 0.038051284850, -0.019695729017, -0.021795731038, -0.045768655837, 0.021096102893, 0.067873179913, -0.042218964547, -0.045507911593, -0.012509569526, -0.069436825812, -0.002691872418, 0.036076925695, -0.019894756377, -0.062521077693, -0.033055208623, -0.040796168149, -0.067231602967, -0.065974056721, 0.010604053736, -0.022112123668, 0.024628743529, -0.050646785647, -0.043451115489, 0.069688618183, -0.013606734574, -0.038961451501, -0.054174453020, -0.047585494816, 0.067509353161, -0.030583616346, -0.010986238718, -0.068782702088, -0.019054479897, -0.070510618389, 0.069110676646, -0.007592953742, -0.016508400440, 0.030492506921, -0.039391886443, 0.014110416174, -0.021322403103, -0.060195792466, 0.066838935018, -0.023269131780, -0.010117352009, -0.009719848633, 0.044353917241, 0.065832033753, 0.003985151649, 0.036913461983, 0.045756645501, -0.069103635848, 0.021713897586, -0.070556357503, -0.009579978883, 0.059992328286, -0.058968357742, -0.053597971797, -0.015145193785, 0.016319409013, 0.010928496718, -0.010670673102, -0.034154403955, -0.068696573377, -0.028800535947, 0.004977598786, 0.033156968653, 0.062502995133, 0.054843783379, -0.005613446236, -0.068836271763, -0.066824771464, -0.056490708143, 0.012326769531, -0.000297598541, -0.014702040702, 0.051844298840, -0.002223372459, -0.015039391816, -0.047795861959, -0.006690047681, -0.027832347900, 0.028118632734, -0.067752331495, 0.002358131111, 0.066306442022, 0.031635403633, 0.031930461526, 0.023349195719, -0.010854918510, 0.064614027739, 0.035633653402, -0.063638359308, 0.013755433261, 0.028556689620, 0.039973013103, -0.063945800066, 0.057074159384, 0.069029346108, -0.053679272532, 0.026156842709, -0.063522525132, -0.001472793519, 0.047515347600, 0.021692119539, 0.011914573610, 0.018669731915, -0.051854345948, 0.002669863403, 0.044869862497, -0.027779664844, 0.063542947173, -0.072153382003, 0.062729701400, -0.060465279967, 0.002371609211, 0.044370949268, 0.002341926098, 0.035065993667, 0.041989117861, -0.065079376101, -0.066095583141, 0.022476814687, -0.015153776854, 0.040654458106, -0.060108006001, -0.032257091254, -0.029432352632, 0.044028006494, 0.014100849628, 0.037128575146, -0.022393308580, -0.070286318660, 0.045685552061, -0.024241704494, 0.009304642677, 0.011703245342, -0.048727653921, 0.040231779218, -0.044679269195, 0.019673287868, 0.029206573963, 0.000847622752, 0.044438071549, 0.014245972037, -0.048738807440, 0.045610666275, -0.014803044498, 0.060941979289, -0.049396827817, 0.002204805613, -0.004930123687, 0.020855560899, -0.030079521239, -0.033054813743, -0.011267732829, -0.026517920196, 0.051088131964, -0.002789810300, 0.021504133940, -0.016328319907, -0.004356570542, 0.057334840298, 0.001279845834, -0.013608936220, 0.006089009345, 0.000783495605, -0.046380154788, -0.032418109477, -0.032543454319, -0.013285405934, -0.024406716228, 0.048363342881, -0.048016067594, -0.047521695495, -0.001331306994, -0.011880934238, 0.034318745136, -0.004951052368, -0.030405167490, 0.045852228999, 0.033946290612, -0.039883010089, -0.061065196991, -0.041614398360, 0.070977777243, 0.063710108399, -0.035466406494, -0.015094399452, -0.037006981671, 0.031403310597, -0.030165605247, 0.024349763989, -0.059933342040, -0.071843653917, 0.060593098402, 0.020380280912, 0.036268323660, 0.032828308642, 0.060120254755, 0.038309499621, -0.047427885234, 0.033477060497, 0.043589293957, 0.001007929444, 0.060858532786, -0.023484606296, 0.005477391183, 0.032660715282, -0.067498423159, 0.031649120152, 0.012359082699, -0.035973668098, 0.006727799773, 0.062200337648, -0.020196139812, -0.045358181000, -0.012386888266, -0.034053832293, -0.015223223716, -0.070211470127, -0.064323984087, 0.039556138217, -0.041961316019, -0.027442313731, 0.065332680941, 0.005043789744, 0.053988948464, 0.022691465914, -0.012174580246, 0.061014607549, 0.056884512305, -0.012022372335, -0.036818485707, 0.009235300124, -0.039655506611, -0.057623129338, 0.066611126065, -0.039163935930, 0.020726114511, 0.014966644347, 0.071198225021, -0.000540845096, -0.053699664772, -0.010079462081, 0.008228674531, 0.012785993516, 0.030722163618, 0.046511389315, 0.016436338425, 0.037464000285, 0.049581348896, -0.068118713796, -0.055389724672, -0.050598092377, -0.044444024563, -0.016424711794, -0.013874553144, -0.027537845075, -0.013247586787, -0.022728353739, 0.045008465648, 0.041427142918, -0.021435707808, 0.032696768641, 0.009453356266, -0.017125800252, -0.049150057137, -0.035013619810, -0.053929209709, -0.049631543458, 0.052637889981, -0.017726752907, 0.026003912091, 0.029124222696, 0.063627287745, -0.019273210317, 0.017727419734, -0.004829503596, -0.064808614552, -0.021474763751, -0.037751708180, 0.003484874964, 0.064916387200, 0.011579826474, -0.057030178607, 0.000094875693, -0.060112580657, -0.014671344310, -0.018950399011, 0.015576869249, -0.027664501220, 0.029071860015, -0.022582303733, 0.063926562667, 0.056532800198, 0.066991567612, -0.003943905234, 0.037614226341, 0.068958953023, 0.027052454650, 0.042908214033, 0.057408452034, 0.043381102383, -0.040212992579, -0.000645637512, 0.010592766106, 0.004593275487, 0.040152996778, -0.043745994568, -0.010188601911, -0.016948163509, 0.000237070024, -0.009761195630, 0.008220553398, -0.038883127272, -0.045840390027, -0.009663671255, 0.036905065179, 0.070522367954, -0.014399707317, -0.045035168529, 0.027712747455, -0.037925232202, -0.048315219581, 0.063650339842, -0.033882249147, -0.061479199678, 0.053433656693, -0.025159716606, -0.036840576679, 0.018014617264, 0.068238943815, -0.047868918628, 0.002623990178, -0.059613168240, -0.060434222221, -0.032002780586, -0.003143809736, -0.015484761447, -0.064994670451, 0.054324731231, 0.072139516473, -0.017673481256, 0.000986978412, 0.049515776336, -0.009242527187, 0.019632168114, 0.015850104392, 0.008044034243, 0.001472026110, -0.066175885499, 0.043019935489, -0.038699552417, 0.007054410875, -0.047662872821, 0.055998086929, -0.070398144424, 0.048616051674, -0.058871556073, -0.045173849910, -0.047990411520, -0.061528701335, 0.061269581318, 0.057293713093, -0.048811141402, -0.000600069761, -0.066900670528, -0.004345469177, 0.022444874048, 0.011467084289, 0.069416284561, -0.034140534699, -0.061850391328, -0.016152195632, -0.004382140934, -0.002690389752, -0.045023001730, -0.013187933713, -0.049097917974, -0.048194892704, -0.051581624895, -0.065969459713, -0.011806242168, -0.046442285180, -0.000364914536, -0.003408208489, -0.052934322506, -0.032178524882, 0.019318327308, -0.028053384274, 0.019753299654, -0.040416371077, 0.036822408438, 0.065964907408, -0.007100209594, 0.048928111792, 0.052230253816, 0.001320503652, -0.033884022385, 0.006033316255, -0.035479500890, -0.022261183709, 0.052570767701, 0.019314505160, 0.047011457384, 0.014927104115, 0.029411830008, 0.037801034749, -0.003281272948, -0.015009243041, 0.034101061523, 0.061648160219, -0.043294534087, 0.060147240758, -0.026280108839, -0.047211498022, -0.006941191852, 0.055837944150, 0.005603857338, 0.055192604661, -0.035822801292, -0.034501936287, -0.024377979338, 0.039809919894, 0.002585448325, 0.030907146633, -0.012351959944, 0.001207336783, 0.029549859464, 0.011176474392, -0.023449145257, 0.062093809247, -0.039456050843, -0.055696066469, -0.048296343535, 0.027569934726, -0.057837538421, -0.001486666501, -0.004503838718, 0.005795106292, -0.008709713817, -0.011502273381, 0.057617396116, -0.016875103116, 0.014568947256, -0.031658034772, -0.028455685824, 0.027946032584, -0.053187653422, 0.046209052205, -0.004041537642, 0.010456405580, 0.071144893765, 0.036532737315, -0.045237563550, 0.064622566104, 0.001982674003, -0.048498243093, -0.053129665554, 0.058919683099, 0.006066679955, -0.051528133452, -0.000033035874, -0.067163154483, -0.020407073200, 0.035285912454, 0.009884893894, -0.029839664698, -0.050600569695, -0.015413060784, -0.057606093585, -0.011718489230, -0.061680514365, 0.033557586372, -0.005137100816, 0.001352459192, 0.026440389454, -0.068779259920, -0.002465054393, 0.048345312476, 0.044079884887, 0.005912490189, 0.009709835052, 0.030569747090, -0.026477381587, -0.000531695783, 0.005491308868, -0.031703989953, -0.055471904576, 0.046466320753, -0.068082489073, -0.051888965070, -0.068181082606, -0.009483724833, -0.048622578382, -0.038708932698, 0.047422468662, 0.014285802841, 0.055492222309, 0.019849501550, -0.031033236533, -0.057769004256, 0.028382487595, -0.039682779461, 0.015589646995, -0.033262509853, 0.009034246206, 0.016411498189, -0.030404377729, -0.048159208149, 0.048101775348, 0.028799138963, -0.009978614748, -0.022760700434, -0.045811828226, 0.030858144164, 0.025840312243, 0.027076490223, -0.034832593054, -0.021014150232, 0.042445294559, -0.038454759866, -0.036142688245, 0.039082616568, 0.062721997499, 0.031017147005, 0.022963084280, -0.054827094078, -0.013454202563, -0.036451559514, 0.053226262331, -0.031413357705, 0.048002131283, 0.025598719716, -0.046574808657, -0.066686898470, -0.033053435385, 0.017541833222, 0.009071685374, 0.016598783433, -0.006362020969, -0.030998926610, 0.017498835921, 0.058548852801, -0.014019686729, -0.005341395736, 0.052654184401, -0.067722775042, -0.022494189441, -0.058880038559, 0.029288284481, -0.006657250226, 0.008562393486, -0.015386804938, 0.071100100875, 0.003647029400, 0.068085238338, 0.041261963546, -0.020480100065, 0.027063757181, 0.014800809324, -0.062425892800, 0.029263250530, 0.035454601049, 0.044354327023, -0.029050957412, -0.002662308514, -0.052247546613, -0.043483838439, -0.004459567368, -0.022119954228, 0.019361853600, 0.058627307415, 0.048045128584, -0.055831000209, -0.071491092443, 0.007768608630, -0.048879742622, -0.061899844557, 0.019419565797, -0.005165696144, -0.055112700909, 0.048048637807, 0.036248318851, 0.010674320161, -0.047798596323, -0.003695584834, -0.062646001577, 0.027585648000, -0.070881679654, -0.051218554378, 0.009383842349, -0.004039302468, 0.043637372553, 0.042418144643, 0.024230934680, -0.006959982216, -0.025174170732, 0.006661072373, 0.021987445652, -0.058166027069, -0.000869899988, -0.041960626841, 0.030012398958, 0.014153912663, -0.034076526761, -0.069051794708, -0.008134849370, 0.055136308074, -0.053751315922, 0.013352699578, -0.030767139047, -0.056654427201, -0.053217642009, -0.054442375898, -0.068786934018, 0.018503136933, 0.031946927309, -0.072023712099, -0.001371331513, 0.020963788033, 0.021443448961, 0.031503468752, -0.018509726971, 0.007296122611, -0.015043348074, -0.065239980817, -0.058132298291, 0.020097620785, 0.035285204649, -0.047270257026, 0.001290269196, 0.031723350286, 0.058870732784, 0.008379817009, -0.014224581420, -0.011010810733, -0.067749030888, 0.039249226451, -0.029608219862, -0.027912892401, 0.004301682115, 0.056469872594, 0.044938586652, -0.012798912823, 0.069648385048, 0.038410298526, 0.006078913808, 0.027262419462, 0.002763360739, -0.018901895732, 0.024320818484, -0.027993865311, 0.039838701487, -0.063112773001, 0.065437704325, -0.066449075937, -0.033622108400, -0.034240383655, 0.055571705103, 0.029004670680, 0.049743622541, -0.038011074066, -0.045573934913, -0.059823893011, 0.046072952449, 0.008921951056, 0.057815134525, 0.008169367909, 0.036179974675, -0.006054736674, 0.031262114644, 0.013108767569, 0.043336123228, 0.046475425363, -0.000550001860, 0.014374859631, -0.043705664575, 0.039078079164, 0.062850460410, -0.070134475827, 0.048410937190, -0.047039967030, -0.029639896005, -0.044552184641, -0.021188586950, 0.029808126390, -0.038709584624, 0.015584059060, 0.011023372412, -0.007281117141, -0.069832928479, 0.030300259590, -0.059111274779, -0.055382981896, -0.014324635267, 0.052226915956, 0.002328380942, 0.047377847135, -0.055005609989, 0.029083475471, 0.053928315639, 0.024882607162, -0.052306186408, -0.005115404725, 0.067579761147, 0.062003135681, -0.066312849522, 0.011488631368, -0.055796276778, 0.021583579481, 0.024090737104, -0.031102027744, -0.044399648905, -0.014767441899, -0.054273769259, -0.051039248705, -0.045906081796, -0.006580770016, -0.049241833389, 0.027501314878, 0.035329923034, -0.051531124860, -0.037646196783, -0.049891442060, 0.026078931987, 0.056794270873, 0.037383832037, 0.044871427119, -0.009099647403, -0.055904693902, -0.035912260413, -0.063099473715, -0.028869103640, -0.066005252302, -0.058844644576, -0.029629368335, -0.010552275926, -0.065532952547, -0.061107181013, 0.008930988610, 0.054986551404, 0.054903611541, -0.055286243558, -0.063188202679, -0.007498696446, 0.035692736506, 0.018185764551, -0.059585966170, 0.041972756386, -0.048190385103, 0.014107368886, 0.044006258249, -0.030309293419, 0.048272028565, -0.028976488858, 0.053950667381, -0.039323732257, -0.030879203230, -0.029363080859, -0.065256275237, -0.046415872872, -0.025577194989, -0.063995838165, 0.046675808728, 0.038698591292, 0.031112588942, 0.037532821298, 0.016047358513, -0.060441464186, -0.007159970701, 0.067035183311, 0.051004216075, 0.069118887186, -0.066174805164, 0.058541610837, 0.040789976716, 0.035786136985, 0.002371795475, 0.013007886708, -0.020221382380, -0.012432951480, -0.034975543618, -0.033061504364, 0.035787910223, -0.047410868108, 0.005827941000, 0.041326627135, 0.022733174264, 0.031321682036, 0.001179650426, -0.010700389743, -0.060407619923, -0.004464022815, -0.059520270675, -0.062362592667, -0.014841515571, -0.034591220319, -0.039325281978, -0.024112537503, 0.024744786322, 0.049167759717, 0.048562526703, 0.064528450370, -0.055690370500, 0.050972178578, -0.024391915649, -0.014089889824, -0.040937706828, -0.018852718174, 0.017261542380, 0.056140735745, -0.054839052260, -0.034339167178, -0.006770007312, 0.058542624116, -0.036109324545, 0.050135239959, 0.018655292690, -0.008653968573, 0.038092099130, 0.058896094561, 0.030340611935, 0.001874670386, 0.017767257988, 0.049590162933, -0.042602479458, -0.009429149330, -0.017455149442, 0.017835669219, -0.062380176038, -0.045514140278, 0.043432377279, 0.065966188908, -0.026421856135, 0.032381854951, 0.055390149355, -0.051394231617, 0.039928361773, 0.015558421612, -0.023930061609, -0.024157807231, 0.055337056518, -0.044555902481, 0.013814039528, 0.064069166780, -0.036539584398, -0.009516865015, -0.000893317163, -0.012564852834, -0.050935216248, -0.013171054423, 0.012618638575, 0.017727471888, -0.050062648952, 0.015603348613, -0.016270022839, 0.033609703183, -0.010786972940, 0.027515612543, -0.004915624857, -0.037632379681, 0.023020826280, 0.014272831380, -0.031597740948, 0.013351373374, -0.061815600842, 0.013150528073, 0.001160569489, 0.009668141603, 0.033337809145, -0.047762706876, 0.044972807169, 0.053967460990, -0.001120686531, 0.059018015862, -0.025934625417, -0.038554694504, 0.037943519652, 0.070068567991, -0.021470841020, -0.012357965112, 0.009317561984, 0.030894652009, 0.024181090295, -0.057704720646, -0.005093365908, 0.024590447545, 0.033114552498, -0.016747433692, 0.028688140213, -0.039933457971, -0.014192767441, -0.030495792627, -0.059127688408, 0.014276698232, 0.034186907113, 0.041982822120, -0.023538205773, -0.054248046130, -0.058316994458, -0.011703640223, -0.029879614711, 0.047997638583, 0.049500927329, -0.025477156043, -0.054962128401, 0.071462482214, -0.054633263499, -0.050218243152, 0.037283472717, -0.028437566012, -0.004492774606, -0.067891120911, 0.001965001225, 0.023162610829, -0.043684497476, -0.023362580687, 0.070938616991, -0.063978560269, -0.000591576099, 0.026828803122, -0.019089117646, -0.015442673117, -0.043411847204, -0.064846195281, 0.004863172770, 0.055121868849, -0.009006693959, -0.032252512872, 0.007447436452, -0.023699637502, 0.000618502498, -0.010374929756, -0.065704844892, -0.069415248930, 0.059277817607, -0.047535132617, -0.033677905798, 0.069014459848, 0.057538181543, 0.044282406569, -0.068757221103, -0.038272321224, -0.032882265747, 0.015361577272, -0.037662971765, -0.003650642931, 0.049709431827, -0.004993326962, 0.036137320101, -0.009573735297, 0.010759353638, 0.039107002318, 0.005439966917, 0.013538978994, 0.052433341742, 0.006612271070, 0.000669635832, 0.026670590043, -0.069451719522, 0.050866425037, -0.067606374621, -0.032289300114, -0.023434039205, 0.044176124036, -0.013025969267, -0.029880959541, -0.070049695671, 0.007243297994, 0.057577580214, 0.062708467245, 0.052159160376, 0.004108570516, 0.062866359949, -0.067237094045, -0.059123765677, -0.012384258211, 0.055069059134, 0.028033785522, 0.066171810031, -0.060588940978, 0.043091639876, 0.061043143272, 0.050746120512, 0.005696810782, -0.015486326069, -0.068288058043, -0.021921545267, -0.008101053536, 0.013606131077, -0.009063288569, -0.021969825029, -0.009248755872, 0.064275860786, 0.051261223853, 0.025838457048, -0.030120488256, 0.061352372169, 0.052315495908, -0.013106647879, -0.040710017085, -0.047601930797, 0.066106289625, -0.024131912738, 0.011523939669, -0.017505425960, 0.028509750962, 0.036294929683, -0.023811530322, -0.020242046565, 0.037604853511, -0.018524799496, 0.017649233341, -0.016744818538, -0.015733305365, -0.062686137855, -0.006814055145, 0.035339646041, 0.018976658583, -0.054267317057, 0.036869622767, 0.007222995162, -0.067522749305, 0.042803086340, 0.011949896812, -0.011705879122, 0.010801509023, -0.071492999792, -0.001504629850, 0.056954577565, 0.040842264891, -0.070985414088, -0.046249955893, -0.061861112714, 0.058967486024, 0.065706983209, 0.044345311821, -0.011136293411, 0.006870403886, 0.050466328859, -0.043329223990, 0.059248104692, -0.009646534920, 0.026157580316, 0.005364194512, 0.026243992150, -0.044599208981, 0.060959428549, 0.070269152522, 0.004217505455, 0.006727986038, -0.020168490708, -0.066976502538, -0.049342647195, 0.017460294068, -0.023620571941, -0.053589317948, 0.053009405732, 0.018047526479, 0.030476815999, -0.056988231838, 0.032740414143, 0.038255818188, 0.010783858597, 0.048826418817, -0.004771761596, -0.068186402321, 0.050071902573, 0.015476465225, -0.058985445648, 0.047535307705, -0.008771687746, -0.069090679288, -0.062558382750, 0.002835728228, -0.067667491734, -0.003899209201, 0.064396455884, -0.062229845673, -0.005053028464, 0.005604855716, -0.032443158329, 0.051828071475, 0.072082489729, 0.011928528547, -0.039398580790, -0.000119976699, 0.036308057606, -0.065048813820, 0.006774187088, -0.036714524031, -0.018409430981, -0.039467647672, -0.050461094826, 0.018476642668, -0.071526259184, 0.007374085486, -0.056418873370, -0.046497020870, 0.059391707182, 0.027500182390, 0.009535379708, -0.027158480138, -0.048971641809, -0.051787674427, 0.015095725656, 0.027081482112, 0.056359648705, 0.022847026587, 0.053772240877, -0.000717781484, 0.054805502295, -0.023391727358, 0.064021825790, 0.054169312119, 0.036200121045, 0.039034336805, 0.044991910458, -0.043955348432, -0.016736902297, 0.006653793156, -0.068137720227, -0.055987387896, 0.019544862211, -0.023057080805, 0.051277898252, -0.002790719271, 0.009656026959, 0.062589615583, -0.025652661920, -0.016671914607, -0.008562445641, -0.035056706518, -0.063772656024, 0.034672312438, -0.049209795892, 0.050568997860, -0.002004198730, -0.040435831994, -0.056382428855, 0.025716394186, 0.052224390209, 0.051841132343, 0.004378229380, -0.051737427711, -0.002347193658, 0.065054953098, 0.058839604259, -0.049964707345, 0.064766079187, 0.066907539964, 0.064010366797, -0.022497426718, 0.024062827229, -0.064526706934, 0.049393028021, -0.018969859928, -0.003719896078, -0.007163345814, -0.064078845084, 0.031077578664, -0.053422346711, 0.007036373019, -0.033297199756, 0.038287527859, -0.038167618215, -0.053361572325, 0.028425246477, -0.003750696778, -0.012169402093, 0.005509071052, 0.051020301878, 0.010371677577, 0.042680233717, -0.004585087299, 0.069786772132, -0.042646832764, -0.031913463026, -0.036464065313, 0.035152167082, 0.059125944972, -0.014259047806, 0.023111365736, -0.004673369229, -0.005057968199, -0.015718560666, 0.071400120854, -0.040212459862, 0.067814692855, -0.005024574697, -0.049334041774, -0.038113452494, 0.041964791715, -0.019620861858, 0.047139540315, 0.042571179569, -0.054528716952, -0.027925625443, -0.059757236391, -0.053797721863, -0.002577051520, 0.033544607460, -0.052828758955, 0.046139232814, -0.039732418954, 0.049997039139, -0.049474962056, -0.059240750968, -0.028763901442, -0.058164358139, -0.029873285443, 0.071217015386, -0.070860788226, -0.069743253291, 0.026779249310, 0.006027758121, 0.041827969253, 0.070194080472, 0.033509850502, 0.054109707475, 0.003473453224, 0.046128392220, 0.044753655791, -0.043545696884, -0.055350393057, -0.015915967524, -0.029561523348, -0.011930130422, -0.011760387570, 0.015302509069, 0.055051848292, 0.057275518775, 0.067152559757, 0.065344825387, 0.033432111144, -0.020481079817, -0.058808922768, 0.021410293877, 0.071582168341, 0.013327546418, -0.053586617112, -0.057525243610, 0.063196107745, -0.000342644751, -0.046338807791, 0.048605248332, -0.012580201030, -0.032477106899, -0.001647375524, -0.013908758759, 0.052745692432, 0.006180308759, 0.061407431960, -0.013092126697, 0.041002422571, -0.027690052986, 0.060940891504, -0.037467923015, 0.054159268737, 0.003561995924, 0.021880611777, -0.029903482646, -0.054422348738, -0.048429504037, -0.051394246519, -0.019608579576, -0.041856564581, 0.049248717725, -0.032425247133, -0.026168666780, 0.010236181319, 0.047351986170, -0.043250676244, -0.054284267128, -0.018299791962, 0.035829856992, 0.015099249780, -0.014892999083, -0.022949129343, -0.035321958363, -0.070146910846, -0.030023925006, 0.033479124308, -0.055369198322, -0.055389087647, 0.060242429376, 0.055252224207, 0.021061070263, 0.064762324095, 0.062822446227, 0.066166251898, -0.064767956734, -0.031316347420, 0.007243901491, -0.016543142498, -0.029028039426, 0.037325643003, 0.061569958925, -0.017287369817, 0.028213433921, 0.006858684123, 0.052630633116, -0.001785434783, 0.033263608813, 0.065373882651, 0.008230790496, -0.052840240300, 0.044070109725, -0.058384906501, -0.029949251562, 0.053191661835, -0.042791783810, -0.068453855813, 0.070084929466, -0.044863928109, -0.018469706178, 0.071993932128, -0.028495293111, -0.071873776615, 0.025867037475, 0.016557373106, -0.065606012940, 0.047897964716, 0.065235972404, 0.070730805397, -0.007641300559, -0.039767965674, -0.047993972898, -0.042050257325, 0.029087297618, -0.034503348172, -0.060795880854, -0.025271989405, 0.003677859902, 0.040946841240, -0.040941700339, 0.049203529954, 0.056453153491, 0.065714508295, -0.003867857158, 0.046649895608, 0.003317885101, -0.006448641419, 0.052198424935, 0.018387027085, 0.007016241550, -0.023579843342, 0.058199629188, 0.018797211349, -0.002364136279, 0.057008609176, 0.050621941686, -0.006127394736, 0.007300548255, -0.022725719959, 0.011811681092, 0.063531666994, 0.010221153498, 0.045659497380, 0.060126453638, -0.039327174425, -0.024784427136, 0.045292764902, -0.020709890872, -0.010208699852, 0.010367035866, -0.013633836061, -0.021356366575, 0.046059407294, -0.004217423499, -0.023263316602, 0.012755915523, 0.033491007984, 0.061540648341, -0.070887506008, -0.031077023596, 0.066738381982, -0.030926607549, -0.012153517455, -0.046034444124, -0.029149118811, -0.026759117842, -0.032108910382, 0.012640789151, 0.006476841867, 0.045491307974, -0.009743921459, 0.000057913363, 0.069684535265, 0.068735405803, 0.043347582221, 0.005103394389, 0.025964148343, 0.046792536974, -0.015011154115, 0.022379890084, 0.067479938269, 0.030229195952, -0.030279491097, 0.049345470965, -0.067988924682, 0.013910926878, 0.060250520706, -0.003116726875, -0.021875191480, 0.067078977823, 0.053312793374, -0.028633788228, -0.060426976532, -0.009184367955, 0.039399236441, -0.031691189855, -0.056811727583, 0.066386416554, -0.066141732037, 0.053479760885, 0.039775483310, -0.039203152061, 0.023486651480, 0.005270414054, 0.014213688672, 0.028245404363, -0.000583603978, -0.050666950643, 0.067969605327, 0.007457226515, -0.045359369367, 0.017727077007, -0.035055812448, -0.021392483264, -0.016736473888, 0.054327607155, 0.057212918997, -0.065501742065, -0.031274091452, -0.032553747296, -0.047484114766, -0.056668020785, -0.029763661325, -0.030795510858, -0.062589839101, 0.064940318465, -0.022233910859, -0.022940438241, -0.059257581830, -0.024501934648, 0.015780895948, -0.040759861469, 0.002762466669, 0.030082717538, -0.022215310484, 0.056828111410, -0.024379529059, -0.036308366805, 0.067566767335, 0.007569633424, 0.040460400283, -0.034661080688, -0.046090379357, -0.051936816424, 0.023842327297, -0.026056461036, -0.002554319799, 0.053037032485, -0.071921803057, 0.054313287139, -0.027051024139, 0.056955292821, 0.002303227782, 0.070913091302, 0.010103203356, -0.033918760717, -0.025817483664, -0.009903717786, -0.017306469381, 0.038698554039, -0.053470440209, -0.045666433871, -0.009770039469, 0.032213181257, 0.020607478917, 0.070410296321, -0.026187125593, 0.036236375570, 0.018274687231, 0.010142676532, 0.002447746694, -0.018816277385, -0.033457819372, -0.004995115101, -0.068433962762, 0.029065579176, -0.040130317211, 0.038956768811, 0.001183882356, -0.037337962538, -0.020281072706, 0.031618855894, 0.045872598886, -0.069262005389, -0.012265067548, -0.050439070910, -0.003495924175, 0.024361118674, -0.019176233560, -0.043380565941, 0.062678068876, -0.025403685868, 0.066833376884, 0.017527155578, 0.022822245955, 0.026296645403, -0.032566700131, 0.021646969020, -0.012695759535, 0.002677090466, 0.039232693613, 0.002309665084, 0.048972845078, 0.007329933345, 0.032219700515, -0.037456978112, -0.023478638381, -0.008357226849, -0.028947219253, 0.032806247473, 0.018207184970, 0.000732816756, -0.015329644084, 0.046621389687, -0.014418341219, -0.055590607226, 0.044552512467, 0.048196665943, -0.051059462130, -0.013584934175, -0.063615679741, 0.064211130142, 0.068693324924, -0.047039672732, -0.010969668627, 0.039555981755, 0.001298964024, -0.001484461129, 0.054653137922, 0.003514505923, -0.057783253491, -0.060525845736, 0.035583734512, 0.039458937943, -0.036750964820, -0.030403774232, 0.060281276703, 0.043168500066, -0.004245981574, 0.009101346135, -0.005296207964, 0.023762814701, 0.011124596000, 0.039291039109, 0.010414421558, 0.035894051194, -0.044144324958, 0.050970591605, -0.040118306875, -0.055618930608, -0.026906441897, -0.031423941255, 0.017774581909, 0.043402917683, 0.013262569904, -0.059278022498, -0.061716355383, 0.021940022707, -0.051577240229, 0.013649851084, -0.018495395780, -0.023488979787, -0.016847040504, -0.065757974982, 0.001709543169, 0.067249163985, -0.057952322066, -0.038548842072, -0.053208284080, -0.071073062718, -0.057431176305, 0.019130565226, -0.051979988813, -0.064712807536, -0.019147362560, -0.056706581265, 0.027230903506, 0.014305897057, -0.062769904733, -0.072157718241, 0.000298306346, -0.009814415127, -0.058617606759, -0.055617898703, 0.001673661172, -0.012794509530, 0.042647384107, 0.050621338189, 0.000470437109, -0.045652098954, 0.051778122783, 0.011640287936, -0.035126321018, -0.040491338819, -0.019228316844, -0.044988073409, -0.066855899990, -0.020880937576, -0.038903433830, 0.030594870448, -0.042316935956, 0.040112473071, 0.003010511398, 0.024714469910, -0.001343987882, 0.006489284337, -0.068311713636, -0.030556809157, -0.049861364067, 0.015883035958, -0.001835145056, 0.011470563710, 0.041723951697, -0.006464593112, 0.003756634891, 0.030942559242, -0.015176817775, -0.004010856152, -0.020796127617, 0.035832211375, 0.050738580525, 0.012812577188, -0.059222429991, -0.042897306383, 0.015633612871, -0.055873584002, 0.011855743825, -0.013814553618, -0.061607524753, 0.063322126865, 0.020270131528, -0.001241683960, 0.043984353542, 0.009355708957, 0.038734361529, 0.069800421596, -0.058223959059, 0.003794744611, -0.021626025438, 0.024304822087, -0.013796795160, -0.014904543757, -0.020808018744, -0.064028270543, -0.029538325965, 0.026094317436, 0.061370000243, 0.043113164604, -0.044411383569, 0.013967245817, -0.037714574486, -0.049241095781, -0.022208977491, -0.044677257538, 0.070303350687, -0.017841998488, 0.052112616599, 0.028704263270, -0.006809473038, -0.030854754150, 0.008811265230, 0.053199589252, 0.020624905825, 0.000537648797, 0.036872476339, 0.024331316352, 0.024411961436, 0.030354514718, 0.040292814374, -0.028089929372, -0.023267719895, 0.012463182211, 0.072114914656, 0.018076486886, 0.007477201521, -0.057597406209, 0.038281217217, -0.021182034165, 0.024818807840, 0.026896715164, 0.063793078065, -0.051664903760, -0.051809351891, 0.002526208758, 0.030437633395, -0.065946817398, -0.013222239912, 0.005160070956, -0.046951681376, -0.059574730694, -0.019488152117, 0.020223051310, 0.063693955541, 0.063645586371, 0.058488547802, 0.041958458722, -0.025555379689, 0.018066234887, -0.039318777621, 0.069748997688, 0.036648571491, -0.047502525151, -0.043497897685, 0.070436343551, -0.050838209689, -0.014934808016, -0.053148195148, 0.031765215099, 0.031211785972, 0.060492485762, 0.027234219015, 0.042692624032, -0.029490906745, -0.031284414232, 0.041549533606, -0.026506889611, -0.050395295024, -0.025575682521, -0.022271659225, 0.020050279796, -0.018890574574, 0.013035692275, -0.037912551314, -0.003356069326, 0.002096183598, 0.056327283382, 0.054668515921, 0.060206368566, 0.026371754706, 0.036294206977, -0.047087818384, 0.070195317268, -0.038555707783, -0.021006148309, 0.001216247678, 0.057300433517, 0.004833564162, -0.030875451863, 0.002889312804, 0.045184291899, -0.013052828610, 0.010600641370, 0.010809801519, 0.051913052797, -0.049574069679, -0.035478726029, 0.064263418317, 0.024563603103, -0.035749040544, 0.049031607807, -0.062728293240, 0.064901649952, -0.019509382546, -0.063331618905, 0.008609160781, -0.069139689207, -0.058139115572, 0.067643672228, -0.003890104592, 0.008865259588, -0.048655837774, -0.010051209480, -0.071236900985, -0.021862838417, -0.038593873382, 0.055951371789, -0.034691724926, 0.038745135069, 0.005328349769, -0.070470668375, 0.063773274422, -0.068397141993, 0.059380069375, -0.019444789737, 0.008378081024, 0.050958409905, -0.021161969751, -0.028388082981, 0.067621961236, -0.021803889424, -0.005107834935, -0.037649843842, 0.017242304981, -0.020117286593, 0.058931738138, -0.026619352400, -0.001757271588, -0.015171103179, -0.022924419492, -0.035365611315, -0.018532749265, -0.005662687123, -0.067994356155, -0.000539921224, -0.000493533909, 0.009351015091, -0.035644009709, -0.058517087251, 0.009908221662, -0.019635971636, 0.046329930425, 0.001055918634, -0.007226951420, 0.031470432878, -0.006828248501, -0.028429202735, 0.005539886653, -0.055549364537, 0.024069897830, -0.017729505897, 0.015674903989, 0.007329158485, 0.022353544831, 0.035772763193, 0.001162655652, -0.071955837309, 0.060825660825, -0.001024402678, 0.050313480198, 0.029312267900, -0.069798380136, 0.041615210474, -0.034179147333, -0.029625374824, -0.011263895780, 0.030156016350, -0.013270575553, -0.053905881941, -0.022913459688, 0.023135401309, 0.065470635891, -0.043902747333, 0.025252543390, 0.034086197615, -0.055467274040, -0.007796362042, 0.029847182333, -0.003102324903, 0.012888833880, -0.010885372758, 0.010033145547, -0.036295823753, 0.043258674443, 0.024160131812, 0.051291681826, -0.013817753643, 0.070564225316, -0.033625118434, 0.037217535079, -0.026898834854, 0.025978669524, 0.022491835058, 0.022934950888, 0.002472348511, 0.070037260652, 0.005812317133, 0.009163670242, 0.041071869433, -0.045676190406, -0.032454568893, 0.048187337816, 0.013697825372, 0.012273088098, -0.043233245611, -0.055470764637, 0.009498074651, 0.017485000193, -0.055861901492, -0.041654836386, 0.026626855135, -0.014231465757, 0.055529281497, -0.041136614978, 0.017624869943, -0.007755585015, 0.002538748085, 0.018977805972, -0.004071630538, 0.053188309073, -0.015390984714, 0.026493817568, -0.062610276043, -0.034297492355, 0.013119310141, -0.026107773185, -0.048304431140, 0.038209483027, 0.014588236809, -0.066023766994, 0.012851461768, 0.023829713464, -0.055443305522, -0.002161100507, -0.030592665076, 0.066121548414, 0.028020843863, 0.033585593104, 0.068577259779, 0.067404955626, -0.040830597281, -0.007756322622, -0.062403596938, 0.060125738382, 0.032601147890, -0.042975511402, -0.045897722244, -0.001790441573, 0.060880377889, -0.002057023346, 0.011583089828, -0.006119742990, -0.023683048785, -0.070169128478, -0.035284087062, 0.058194965124, 0.027526937425, 0.035989373922, -0.055895712227, 0.004204414785, 0.051106333733, 0.040197506547, 0.049129284918, 0.013985037804, -0.004467323422, 0.052064538002, 0.060817375779, -0.028903361410, 0.012128069997, -0.045100189745, 0.009251907468, -0.048337124288, 0.015446372330, -0.008461527526, -0.016464903951, 0.003144018352, 0.070529267192, 0.030315056443, 0.061519846320, 0.062569946051, -0.058433547616, -0.067212447524, 0.049489401281, -0.043465171009, 0.029626064003, -0.061683386564, -0.002031676471, 0.017245210707, -0.040129560977, -0.031422305852, -0.062239289284, -0.032235842198, 0.002045840025, -0.071849226952, 0.047995045781, -0.004905730486, -0.038610890508, -0.038403637707, -0.038060940802, 0.041779823601, -0.029377412051, -0.010569240898, -0.061718694866, 0.058503404260, -0.050766680390, 0.046526424587, -0.039695493877, 0.004992708564, -0.018864762038, 0.028582513332, -0.042107708752, 0.007147081196, 0.068392664194, -0.041543010622, 0.050919957459, -0.048363946378, 0.053507968783, 0.018807001412, 0.069049179554, -0.030635181814, -0.022385258228, -0.010451737791, -0.063740670681, 0.003087222576, -0.053260881454, 0.042941205204, -0.032132927328, 0.063961431384, 0.001162633300, -0.049892079085, 0.040752977133, 0.025297336280, 0.019135922194, -0.047226004303, 0.034170508385, -0.055910408497, -0.050291992724, -0.022397216409, 0.045013502240, -0.009674888104, 0.003986597061, 0.021955907345, 0.071242600679, 0.053494796157, -0.069976314902, 0.041143223643, -0.018045723438, 0.017247706652, -0.013015884906, 0.010093592107, -0.044800970703, 0.024548910558, -0.048086270690, -0.056874807924, 0.037047296762, 0.000165298581, -0.009906020015, -0.059015866369, -0.059180289507, 0.052583485842, 0.016545720398, 0.043823495507, -0.044640794396, -0.017376031727, 0.009195245802, -0.041485782713, 0.045012384653, 0.028202645481, -0.028226993978, 0.030227340758, 0.032525628805, 0.004567205906, 0.020708322525, -0.013343065977, 0.001799911261, 0.053068786860, -0.016977980733, 0.000025361776, 0.030529916286, -0.071412496269, 0.069241419435, -0.017826668918, 0.042064189911, 0.069035813212, 0.017524197698, -0.039826296270, -0.031083598733, 0.031809329987, -0.005203761160, -0.049254480749, 0.004118584096, -0.060503840446, -0.055063422769, -0.058318112046, -0.067641459405, -0.056679256260, -0.060320280492, -0.002201125026, 0.032061643898, 0.064235031605, -0.043883990496, 0.069634169340, -0.021754954010, 0.040278807282, -0.035659547895, -0.003804281354, 0.063786193728, 0.022468894720, -0.028453122824, -0.002183765173, 0.065890312195, 0.000656232238, 0.055761486292, -0.071398779750, -0.027258947492, 0.031459026039, -0.015977207571, -0.058113820851, 0.058835476637, -0.071581475437, -0.041692122817, 0.053228005767, -0.067041814327, 0.022178679705, 0.019147358835, -0.020480357111, 0.060952752829, -0.067069083452, -0.023922424763, 0.025808744133, -0.042334608734, 0.041768349707, -0.005229569972, 0.054626703262, 0.017507113516, 0.065221741796, -0.058447401971, -0.006502769887, -0.000634402037, 0.021887063980, 0.004544496536, 0.069262698293, -0.057743385434, 0.029337823391, -0.067593432963, 0.011554889381, -0.042504418641, -0.038564950228, 0.040851503611, 0.024412944913, -0.000965878367, 0.066880717874, 0.044193342328, 0.023320868611, 0.041653014719, 0.013634696603, -0.063584469259, 0.064330264926, -0.015492055565, 0.030499823391, 0.013361148536, -0.058017395437, 0.010880075395, 0.060059443116, -0.063038557768, -0.021878357977, 0.049297995865, -0.061436597258, 0.045891992748, -0.012504063547, 0.030525356531, -0.069711953402, -0.064051382244, -0.041287805885, 0.004903748631, 0.042253717780, 0.051808528602, -0.048527456820, 0.013053603470, -0.069040745497, -0.037200517952, -0.051718760282, 0.015652284026, 0.042318485677, -0.036369364709, 0.049220860004, 0.060672447085, -0.000917650759, -0.069975361228, 0.001288533211, -0.045285671949, 0.002316959202, -0.056816615164, 0.068089306355, -0.071674682200, -0.066654272377, -0.042189732194, -0.054453626275, 0.052937507629, -0.068279884756, 0.038489550352, -0.013894751668, -0.057806909084, 0.057747811079, 0.017172932625, 0.069262430072, -0.056079253554, -0.035516873002, -0.006629891694, 0.003503836691, 0.054337918758, -0.047620594501, -0.036235291511, 0.016603842378, 0.025327891111, -0.037339493632, 0.020244888961, -0.034493558109, 0.048991620541, -0.070167608559, 0.066092312336, -0.031967591494, 0.070216894150, 0.044705390930, 0.064471334219, -0.042688317597, 0.058488637209, 0.062607914209, 0.045137338340, -0.059143383056, 0.039501525462, 0.033313147724, -0.029212076217, -0.006323650479, -0.016672190279, -0.016411442310, -0.021075010300, 0.028905458748, -0.049483254552, -0.045383371413, -0.041019178927, -0.033589020371, -0.000070564449, -0.005498901010, 0.021108902991, -0.032869189978, 0.053840905428, -0.062585741282, 0.063604399562, 0.002045050263, -0.017175439745, -0.016773741692, -0.054749183357, 0.051133811474, -0.020571257919, 0.048303827643, 0.040646918118, -0.061303816736, 0.042378522456, -0.007310889661, -0.041988499463, 0.044296771288, 0.047169223428, -0.025109302253, -0.069991707802, -0.047550808638, 0.044002868235, -0.052690230310, 0.035023309290, 0.012756295502, -0.054204292595, 0.062283858657, 0.021678417921, 0.067114561796, -0.026380371302, -0.014942724258, -0.038461640477, 0.012493841350, 0.013827338815, 0.034005343914, -0.071856930852, 0.026182927191, 0.062836349010, 0.070169746876, -0.064728297293, 0.024111382663, 0.036521144211, -0.022125441581, 0.030241429806, -0.070583507419, -0.052004884928, -0.066824808717, -0.003439866006, -0.071850307286, 0.012161225080, -0.058069240302, -0.058001685888, -0.015229761600, 0.004417896271, 0.006123580039, 0.058707073331, -0.057106576860, 0.019288055599, 0.014928922057, -0.021258428693, 0.028025597334, 0.057482048869, 0.061806052923, 0.070733189583, -0.044000566006, -0.026328116655, -0.029134426266, -0.048513263464, 0.028161525726, 0.022872097790, 0.049999140203, 0.005336366594, 0.052659690380, 0.010383054614, 0.001382276416, -0.049070715904, -0.054323118180, 0.053323462605, 0.006635591388, 0.033003054559, -0.014703761786, -0.029911946505, -0.062294248492, -0.039701741189, -0.021776907146, -0.046241402626, 0.059785947204, 0.056509092450, 0.055026322603, -0.025601286441, -0.069837301970, 0.015769384801, -0.066131703556, 0.067898452282, -0.005156874657, -0.025126405060, 0.033563815057, -0.014253970236, 0.034997880459, 0.049568980932, 0.021772518754, -0.066056355834, -0.003159500659, -0.019783705473, 0.065305486321, 0.023029290140, 0.012886032462, -0.041140846908, 0.029290042818, -0.052795328200, 0.035505570471, -0.002134919167, -0.069889262319, -0.009011052549, -0.024768479168, 0.035513326526, -0.002794213593, 0.057539761066, 0.057043239474, -0.045126654208, -0.044313065708, 0.032245509326, 0.069706246257, -0.055300287902, 0.005910441279, 0.010384187102, -0.055036805570, -0.070522375405, -0.012789484113, -0.038201533258, 0.050307787955, 0.004046186805, 0.062093272805, -0.005835391581, -0.048327486962, 0.053397864103, -0.026035469025, -0.004314668477, 0.004871711135, 0.027129724622, 0.000005818903, 0.062883138657, -0.009087771177, -0.007518790662, 0.037391804159, 0.056263014674, 0.021949164569, -0.043211840093, 0.026154279709, 0.059275195003, -0.018887512386, 0.062757030129, -0.039261497557, 0.040420621634, 0.017799913883, -0.062696464360, 0.069312334061, 0.019910566509, 0.045560061932, 0.046902112663, -0.062562048435, -0.054942511022, -0.062997452915, -0.042789492756, -0.018492918462, -0.045045986772, 0.070843324065, 0.032587125897, 0.035006821156, -0.018055927008, 0.045191988349, -0.012390881777, -0.071872800589, 0.003182269633, 0.002880036831, -0.037660047412, 0.050137892365, -0.033003795892, -0.022425796837, 0.056120648980, -0.060106422752, 0.021458387375, -0.005359925330, -0.017776906490, -0.070652112365, -0.051036905497, 0.041243985295, 0.035075753927, 0.015302181244, 0.062199264765, 0.061249271035, 0.023367486894, -0.069519020617, 0.030282676220, -0.034164521843, -0.009654186666, -0.024581771344, 0.003159523010, -0.057466138154, 0.033926434815, 0.003425225616, -0.001070290804, 0.029377155006, 0.071642741561, 0.025392346084, 0.050593703985, 0.051327422261, 0.030417777598, -0.036901265383, -0.019619710743, 0.061016842723, -0.031494468451, 0.007302954793, -0.071048922837, 0.061971738935, 0.027963548899, 0.062250927091, 0.047176465392, -0.041286636144, 0.066922664642, 0.036366097629, 0.008196242154, 0.070007398725, 0.014923848212, -0.046495594084, 0.021072648466, -0.068532146513, 0.022979155183, 0.057996556163, -0.067177690566, -0.021618884057, -0.059328194708, 0.070426777005, -0.048748027533, -0.056760661304, -0.071101330221, -0.063563130796, 0.011171966791, 0.045299194753, -0.001411333680, 0.002568691969, 0.052354946733, 0.059893131256, 0.033957064152, -0.011817581952, 0.028245203197, 0.046037130058, -0.048419438303, -0.069803252816, -0.005786851048, 0.055849447846, -0.052904553711, -0.041544646025, 0.006895355880, 0.054323464632, 0.036785379052, -0.071419566870, 0.031842999160, 0.026894874871, 0.025998458266, -0.046894505620, -0.045440152287, 0.002117499709, 0.031586900353, -0.038745582104, -0.027214244008, -0.036618992686, -0.008482247591, 0.040478400886, -0.022450417280, 0.033666826785, 0.049669913948, -0.006289720535, -0.053899634629, 0.012992843986, 0.044251486659, 0.058839321136, 0.059655636549, -0.022576745600, -0.034314423800, -0.071920081973, -0.060613460839, 0.044603615999, -0.042985677719, 0.022354185581, -0.052740305662, 0.050766974688, -0.045637249947, 0.051043875515, 0.065847575665, -0.063257239759, -0.000647783279, 0.005568705499, 0.001149572432, 0.046570546925, 0.042986176908, -0.059375133365, -0.029741808772, 0.024950660765, -0.057731460780, -0.071388438344, -0.044273853302, 0.048920691013, -0.042131382972, 0.006809942424, -0.008478030562, 0.014881387353, -0.014025676996, 0.031624741852, -0.047239013016, 0.031617134809, -0.015142250806, 0.053826317191, 0.011761866510, -0.046364858747, 0.057712987065, -0.016579464078, 0.000324182212, -0.048117019236, 0.036349952221, -0.064263910055, -0.059356912971, -0.032557565719, -0.033272869885, 0.031338289380, -0.001212984324, 0.046331204474, -0.003813654184, 0.058207780123, 0.066292136908, -0.065061531961, 0.054019749165, 0.009057179093, 0.038763821125, 0.064814224839, -0.049072109163, 0.060289010406, -0.034486416727, 0.029589720070, 0.051442719996, 0.052690923214, -0.009172841907, -0.060593534261, 0.008841514587, -0.061480075121, -0.015136212111, 0.031362533569, -0.005572356284, -0.009754586965, -0.023646123707, -0.030378688127, -0.051372189075, -0.053891599178, -0.060986854136, -0.014152675867, -0.036638420075, 0.011624664068, -0.038149964064, 0.042563192546, -0.047324769199, 0.052099123597, 0.006061635911, 0.037346668541, -0.049503698945, -0.031089499593, 0.061886996031, 0.022476471961, 0.029481135309, 0.000847600400, 0.060135021806, 0.069648236036, 0.045258797705, -0.063987337053, 0.006698049605, -0.004894644022, -0.061726748943, -0.002390325069, 0.037291519344, -0.057394661009, 0.007234901190, 0.067085310817, 0.032553054392, -0.030513346195, -0.018234457821, 0.002210035920, 0.005303487182, -0.070605792105, 0.019732981920, -0.040157761425, 0.040778070688, 0.071667134762, -0.039907407016, 0.023425415158, 0.057785257697, -0.028783485293, 0.015518642962, 0.038252942264, 0.041737958789, -0.022490750998, 0.054965153337, 0.059655100107, -0.054784335196, 0.008340805769, 0.017370529473, -0.018491059542, 0.065880447626, 0.033428497612, 0.020164050162, 0.032499581575, 0.000247359276, -0.046633981168, -0.034513071179, 0.016006924212, 0.039062440395, -0.064968943596, 0.034878760576, 0.065432161093, 0.031727872789, -0.022461809218, 0.018842101097, -0.023823522031, 0.009241789579, 0.029370389879, 0.035480722785, 0.064207121730, -0.067599765956, -0.019424419850, 0.007825203240, 0.050806149840, 0.007474280894, -0.032861188054, -0.058469217271, 0.061174869537, -0.032678321004, -0.010139890015, -0.071904093027, 0.043135426939, 0.045471660793, -0.071628935635, -0.012278627604, 0.050730355084, 0.027192443609, -0.068624682724, 0.068235442042, -0.046417787671, -0.005716092885, 0.057567194104, 0.015128314495, 0.029874712229, 0.030877947807, 0.013581611216, 0.030862785876, 0.050244055688, 0.070323914289, 0.057099714875, -0.020925931633, -0.058177795261, 0.042352139950, -0.028671178967, 0.044137284160, 0.004744037986, 0.048102550209, -0.043958149850, -0.000981882215, 0.007582440972, -0.071046121418, 0.007765665650, 0.057261854410, -0.067742459476, -0.005972489715, -0.019829284400, 0.072134330869, -0.011146292090, -0.059869319201, 0.045341439545, 0.040352024138, -0.022980477661, -0.019751753658, -0.008896127343, -0.012027136981, -0.009247124195, 0.030849158764, 0.036408521235, -0.012975245714, -0.067849673331, 0.012378685176, -0.003374412656, -0.059176608920, 0.038427107036, -0.013271573931, 0.035869672894, 0.026641085744, 0.059451878071, -0.027665566653, -0.044492870569, 0.037726119161, 0.001403778791, -0.034843020141, -0.007788226008, 0.034227080643, 0.017394773662, -0.008978784084, -0.061550002545, -0.044475100935, -0.056689612567, 0.037595264614, -0.048822253942, 0.035736292601, 0.010831020772, -0.033811360598, 0.052772633731, -0.009342998266, 0.017636708915, 0.004491142929, 0.019659012556, -0.027734804899, 0.020192667842, -0.019092164934, 0.067564919591, -0.024446651340, 0.037492632866, 0.050643451512, -0.032879099250, -0.056155923754, -0.031693410128, -0.012560121715, -0.059898123145, 0.017000593245, 0.019152231514, 0.011680983007, -0.060838107020, -0.001835368574, -0.015248429030, 0.003118880093, 0.066521167755, -0.057533588260, 0.031111747026, 0.011771999300, -0.051311794668, 0.052605196834, 0.018866501749, 0.034842558205, 0.022979274392, 0.036709293723, 0.002567619085, -0.050415202975, -0.046996004879, -0.014670882374, -0.064831018448, -0.047913447022, -0.028605330735, 0.029551833868, -0.070377223194, -0.058456037194, -0.019427496940, 0.022448666394, 0.032524682581, 0.039103060961, -0.032208345830, 0.069137394428, 0.033703334630, -0.009584397078, 0.000051446259, 0.069839984179, -0.025763232261, 0.041199207306, -0.064712069929, -0.044924736023, -0.044144824147, -0.013752970845, -0.033902589232, -0.041451007128, -0.072025418282, 0.045156285167, -0.050601102412, -0.044852226973, 0.064289569855, 0.066892340779, -0.058061514050, 0.064029574394, -0.067402578890, 0.001517392695, 0.057491719723, -0.000967308879, 0.054360896349, -0.035362910479, -0.059526756406, 0.055188760161, -0.011430025101, -0.060330878943, 0.030592925847, -0.062213860452, 0.047893576324, -0.020455285907, -0.059459876269, 0.012968309224, 0.059480890632, 0.057389616966, -0.069956801832, 0.057809859514, -0.058688014746, 0.060566872358, -0.027862098068, -0.059093929827, -0.042110890150, 0.046625465155, -0.072030216455, -0.051229428500, -0.036044970155, -0.047252483666, 0.033501662314, 0.051092326641, 0.042835742235, -0.043593943119, 0.011701285839, -0.066039264202, -0.060481816530, -0.067295268178, -0.059242643416, -0.020873919129, -0.000449530780, -0.041794396937, -0.061700783670, 0.070747911930, 0.052990049124, -0.019123978913, -0.005981162190, -0.039613798261, -0.054139405489, 0.064245641232, -0.019890762866, 0.018362753093, 0.025184132159, -0.054541416466, 0.007367774844, -0.059727244079, -0.046283096075, 0.022250719368, -0.043924234807, 0.033147178590, 0.031155265868, 0.001914419234, -0.011206015944, 0.045512989163, 0.042806714773, -0.004135876894, -0.032917402685, -0.057602774352, -0.034356370568, -0.038413241506, -0.070840619504, -0.059562683105, -0.068517260253, -0.054935060441, 0.042784899473, -0.055329568684, -0.031879857183, -0.057280100882, -0.050280116498, -0.031531136483, 0.003850683570, -0.045473910868, -0.006632201374, -0.040596541017, 0.053195491433, 0.050534740090, -0.069115817547, -0.012803886086, -0.020458661020, 0.008037663996, -0.015393875539, -0.065086051822, -0.040711719543, 0.029950954020, 0.042392127216, -0.044584859163, 0.043537199497, 0.058401286602, -0.053682371974, -0.049576893449, 0.025098428130, -0.025789592415, 0.054287254810, -0.045034565032, -0.043674245477, -0.044928520918, 0.063486918807, 0.006673529744, -0.017736420035, 0.017222985625, -0.040700811893, -0.036882042885, 0.057434946299, -0.059160605073, -0.006101585925, -0.037987552583, -0.046618826687, -0.070936888456, -0.052968703210, -0.016050506383, -0.066083818674, -0.016395047307, 0.010884545743, 0.026699066162, -0.035860896111, -0.043143101037, 0.071420848370, -0.058832962066, -0.003965072334, -0.051593963057, -0.007041059434, 0.012907311320, 0.030756421387, -0.026340916753, 0.037856988609, 0.054176777601, -0.032535456121, -0.046098280698, 0.013891279697, 0.041872911155, -0.000743605196, 0.005378492177, -0.034454498440, 0.037602238357, -0.050986491144, -0.052942391485, 0.007386475801, -0.010829713196, -0.014198239893, 0.059803068638, -0.030115928501, 0.071619600058, -0.056902423501, 0.062666118145, -0.006002269685, -0.067058436573, 0.055394873023, 0.069673359394, 0.040489479899, -0.046374581754, -0.023555103689, -0.046150036156, 0.050312548876, -0.042458891869, 0.043058514595, 0.044226020575, -0.009363025427, -0.012607406825, 0.008495442569, 0.002506434917, -0.038189832121, 0.036490820348, -0.010031938553, 0.050736308098, 0.016881950200, 0.051513917744, -0.060863021761, 0.022906765342, -0.066992126405, 0.037901587784, -0.036584392190, 0.042544819415, -0.019716497511, 0.003388829529, -0.006012514234, -0.063974194229, -0.037650275975, 0.061300173402, -0.048745341599, 0.042392402887, -0.043989535421, 0.058779075742, 0.008146174252, -0.036032445729, -0.060662772506, 0.046799130738, -0.047282837331, -0.040873475373, 0.021868243814, 0.005903095007, 0.018818855286, -0.032110441476, -0.062114354223, 0.020884104073, -0.000464059412, 0.009177312255, 0.018886305392, 0.056010112166, 0.014202609658, 0.057994574308, 0.038185842335, 0.004322379827, -0.029755834490, 0.010604321957, -0.063126519322, -0.002675577998, -0.046637613326, 0.044723510742, -0.068722032011, -0.054258145392, 0.049777120352, -0.003149472177, 0.052612975240, -0.023737542331, 0.002475462854, -0.040731936693, 0.065142005682, 0.001042671502, 0.002073556185, -0.005614459515, -0.003635205328, -0.059402924031, -0.061791390181, 0.053026765585, 0.028574801981, -0.036337669939, 0.016881622374, 0.067096859217, 0.046194463968, -0.060249663889, 0.033071190119, 0.044550947845, 0.031012400985, 0.003314740956, 0.046028561890, -0.000678278506, -0.057583194226, 0.005063816905, 0.027048446238, 0.015775389969, -0.045042701066, -0.016928959638, 0.046813823283, 0.053987368941, 0.057242691517, 0.027648463845, 0.066346392035, -0.051073882729, -0.047567944974, 0.043772064149, -0.037072930485, 0.041198983788, -0.002511598170, 0.030848383904, 0.062760874629, -0.013149097562, -0.060420319438, -0.025932662189, 0.000024929643, -0.047739613801, 0.024870544672, -0.057226985693, -0.016703385860, 0.033286944032, 0.004178307950, 0.024574339390, 0.062845483422, -0.017624735832, -0.071030892432, 0.053428664804, 0.053470253944, -0.019475951791, -0.007919304073, 0.052209019661, 0.060820698738, -0.023633461446, 0.036825589836, 0.001497313380, -0.029826894403, -0.031372457743, -0.049651380628, 0.055784195662, -0.034101236612, 0.045766629279, -0.016991607845, 0.050435632467, -0.016855884343, 0.067878097296, -0.054001428187, -0.035522688180, 0.006128206849, -0.050155699253, -0.051603235304, 0.062197014689, 0.067792445421, -0.000519447029, 0.027034573257, 0.000517502427, 0.043282143772, -0.060416482389, -0.066142663360, -0.037069592625, 0.018270060420, 0.051509581506, -0.070541262627, 0.035730488598, 0.052167586982, -0.071413613856, 0.014574110508, -0.051410853863, -0.057808030397, -0.071996390820, 0.017587192357, -0.057977356017, 0.008850723505, 0.046997003257, 0.023909054697, -0.056582849473, -0.045511610806, -0.064427442849, -0.067561343312, -0.030943691730, 0.004861474037, 0.026521481574, -0.041817970574, 0.042797371745, 0.012122578919, -0.004341892898, -0.056188650429, 0.006911523640, -0.029074840248, 0.034655764699, 0.059803321958, -0.018063429743, 0.037507325411, 0.007876820862, -0.010314416140, 0.039145678282, -0.051102083176, -0.067073993385, -0.069051884115, -0.005501754582, 0.009380869567, 0.024102315307, -0.071685798466, -0.015788849443, -0.044740471989, 0.049456432462, -0.063129410148, 0.042003318667, 0.055915400386, -0.040705386549, -0.009413592517, -0.059566605836, 0.007258646190, 0.039372272789, -0.049829639494, -0.045128047466, -0.040478609502, 0.020151406527, 0.020435519516, 0.063223391771, 0.067063033581, 0.049633622169, 0.004838071764, 0.061592593789, -0.037048947066, 0.056034475565, -0.057374067605, -0.014489319175, -0.042977575213, -0.036517284811, 0.025624237955, 0.041887089610, 0.038979619741, -0.013812247664, -0.057067997754, 0.027274571359, -0.056711845100, 0.023136161268, -0.015629671514, -0.048007275909, -0.056555937976, -0.066610917449, 0.066467359662, 0.002370782197, 0.028529502451, 0.056711480021, -0.013167887926, 0.019240774214, 0.067661136389, 0.051454983652, 0.067830279469, -0.037484750152, -0.055782046169, 0.062549054623, 0.061457961798, 0.054045513272, 0.040310986340, 0.041272819042, 0.043153561652, -0.040441323072, -0.032256197184, 0.041897997260, 0.023935690522, -0.021918173879, 0.023366227746, -0.010385185480, 0.024214312434, -0.041628718376, -0.032870791852, 0.044678285718, 0.014163516462, 0.015697501600, 0.049797855318, 0.009083300829, -0.041706353426, 0.053714409471, -0.058159381151, 0.021068453789, 0.018483780324, -0.042630061507, -0.026461724192, -0.044872634113, 0.045670442283, 0.025880098343, -0.014863215387, 0.040530346334, 0.056542441249, -0.063902392983, 0.059060707688, 0.011222891510, -0.005705684423, 0.032240711153, -0.027283173054, -0.036825694144, 0.023436136544, 0.062666118145, 0.016074180603, -0.036150757223, 0.049896143377, 0.068958789110, 0.032673023641, 0.047848097980, -0.052246548235, 0.053720057011, 0.001327455044, 0.060738563538, 0.029873214662, 0.012284286320, -0.046323940158, -0.043260261416, -0.046584412456, 0.043489620090, 0.071091011167, 0.022303335369, -0.055890928954, -0.066341720521, 0.020104467869, 0.068642735481, -0.064592830837, 0.046885922551, -0.037819277495, 0.023136228323, 0.022804476321, 0.053159758449, -0.026593834162, 0.054819837213, 0.065451681614, -0.001855432987, -0.025640826672, 0.033050268888, 0.015853695571, 0.047355547547, -0.031460519880, -0.023008368909, 0.034635335207, -0.001235105097, 0.024458661675, -0.051890447736, -0.021237041801, 0.041182242334, 0.013334237039, -0.029330871999, -0.028726875782, 0.068509280682, 0.033979274333, -0.044749625027, 0.069592610002, 0.033481478691, 0.002618879080, 0.026367522776, -0.000102259219, -0.054537303746, -0.000978149474, 0.008708953857, -0.028242204338, -0.060747772455, -0.052612993866, -0.019095603377, -0.040488224477, -0.056845985353, -0.052794694901, -0.061462387443, 0.039000563323, 0.063377097249, -0.011678829789, 0.011530973017, 0.029369361699, 0.019298791885, 0.000972397625, 0.049257613719, 0.032480530441, 0.024567700922, -0.014802545309, -0.009755827487, -0.063612408936, -0.015175819397, 0.047878108919, 0.007934205234, 0.016183599830, -0.034281488508, -0.044499069452, -0.038078490645, 0.027051180601, -0.033408869058, 0.040192037821, 0.010219834745, -0.005894839764, -0.027985125780, -0.028887219727, -0.052459165454, -0.044806372374, 0.019165292382, -0.061759371310, -0.015427824110, -0.000031970441, 0.004081539810, -0.026805385947, 0.032092392445, 0.029243774712, 0.068751499057, -0.068763934076, 0.044688902795, -0.032849609852, -0.023225065321, -0.068555064499, 0.044574707747, -0.051243692636, -0.012218233198, -0.008867770433, 0.027527868748, -0.055147700012, 0.015735700727, 0.037651516497, 0.039207592607, -0.034205541015, 0.036334455013, 0.006526462734, 0.031881444156, 0.012516938150, -0.009474620223, -0.021902479231, 0.032878719270, -0.068251505494, 0.048948273063, -0.001105852425, -0.059233799577, -0.011216595769, -0.044338479638, 0.066450685263, -0.026056565344, -0.059166990221, 0.004383631051, -0.021468896419, 0.027728609741, 0.063399881124, 0.006346352398, 0.040006913245, 0.047172732651, -0.048681423068, -0.000604063272, 0.033938825130, 0.007411718369, 0.052765667439, -0.020046204329, 0.055215045810, 0.030075423419, -0.017342671752, 0.019253149629, 0.002107590437, -0.013260371983, -0.020180776715, -0.012516520917, -0.010477412492, 0.028253063560, -0.008059881628, -0.022544004023, -0.037253480405, 0.023350328207, -0.025904804468, -0.005891047418, 0.031084626913, -0.040931068361, -0.052414260805, 0.046077996492, -0.047334693372, 0.012962646782, 0.068816304207, -0.028253924102, 0.008797280490, -0.036278013140, 0.051394268870, 0.038567550480, 0.026454225183, 0.047998860478, 0.005506195128, -0.021101731807, 0.015083111823, 0.059595286846, -0.000066109002, 0.001947827637, -0.048423085362, -0.051201656461, 0.031227186322, 0.018500834703, -0.060981538147, -0.048228926957, -0.059670448303, 0.063485100865, -0.010184384882, 0.014392949641, -0.048727449030, -0.005775012076, -0.013152830303, -0.033053282648, 0.025890298188, 0.002907931805, 0.008424863219, -0.062534637749, -0.010634694248, -0.068628259003, -0.037378396839, -0.058759283274, 0.003982298076, -0.060997109860, -0.029067356139, 0.015790209174, 0.013502120972, 0.060365527868, 0.016113601625, -0.058675900102, 0.045693948865, -0.029850278050, -0.040929414332, -0.056698337197, 0.021158821881, -0.053505435586, 0.020335063338, -0.027317758650, -0.012076452374, 0.010650888085, 0.041337914765, 0.060751557350, 0.056704461575, -0.054743088782, 0.062802821398, -0.053336158395, 0.052590847015, 0.017075709999, -0.035787202418, 0.059123158455, 0.002161860466, 0.058026611805, -0.027490597218, -0.025939270854, -0.070877961814, -0.021083269268, -0.031015031040, 0.065621554852, -0.013093143702, -0.052195787430, -0.048984475434, -0.031717978418, -0.004322655499, 0.024907730520, -0.003712117672, -0.003548607230, 0.055855065584, 0.004528321326, 0.001378715038, -0.007735729218, 0.038671284914, 0.028481841087, 0.051933705807, -0.024532545358, -0.057257667184, -0.044923067093, -0.045061923563, 0.009021699429, 0.052080526948, 0.067917734385, 0.060645118356, -0.070717923343, -0.000382669270, -0.025847766548, 0.061038807034, 0.024183943868, 0.030456475914, -0.005548454821, 0.041772753000, -0.002208799124, 0.051830977201, -0.031347338110, -0.058729156852, 0.016608938575, -0.012081801891, 0.002105042338, 0.016172707081, 0.035672105849, 0.038075305521, -0.019048374146, -0.021534919739, -0.054075483233, -0.031185992062, -0.057116210461, 0.046577170491, 0.049277521670, -0.067597083747, -0.018109902740, -0.016961429268, 0.002886369824, -0.025026023388, 0.005385853350, -0.036267176270, -0.062094673514, 0.054306209087, -0.047133602202, -0.058235865086, 0.045062579215, -0.024834532291, 0.052376613021, 0.067652300000, 0.069628804922, -0.001852661371, 0.003612257540, 0.032064706087, -0.033864509314, -0.003359578550, 0.069938540459, 0.067815050483, -0.064326032996, -0.031858365983, 0.045049808919, 0.069690510631, -0.014047406614, 0.047738939524, -0.065521717072, -0.059102464467, -0.008610330522, 0.047698676586, 0.012270621955, -0.047296050936, 0.031331367791, 0.059048354626, -0.066236570477, 0.055770948529, 0.030868962407, -0.012965902686, 0.009111449122, 0.067623361945, -0.014747224748, -0.057604856789, -0.007711075246, -0.004153087735, -0.000305444002, 0.067238897085, -0.021720815450, 0.037464447320, 0.018459722400, 0.050869934261, -0.054849375039, 0.056030213833, 0.045905224979, 0.010610193014, 0.036167822778, 0.022427171469, 0.019363798201, -0.031654246151, -0.044451437891, -0.013761024922, -0.021935723722, 0.032129570842, 0.064736902714, -0.045946724713, -0.043141141534, -0.036934282631, -0.031744685024, 0.017484225333, -0.026622328907, -0.027608823031, -0.052978351712, -0.055143311620, -0.040251776576, 0.063309654593, 0.064266324043, 0.046700224280, 0.002863019705, -0.030091065913, 0.015579670668, -0.036045417190, 0.023333273828, 0.050116643310, 0.069610431790, -0.047641348094, -0.059451408684, 0.042541757226, -0.053319606930, -0.070230431855, -0.046838633716, -0.042617551982, 0.055247500539, -0.029881373048, 0.037039034069, 0.056211024523, -0.049007292837, 0.030432648957, -0.071009382606, -0.071226507425, -0.055243507028, -0.027374796569, -0.024234615266, 0.030423007905, -0.029663916677, -0.007946647704, -0.047530591488, 0.004552274942, 0.013620965183, -0.018710661680, 0.062445744872, 0.001043722034, 0.059528455138, -0.061559002846, -0.065795280039, -0.060171082616, 0.002584807575, -0.030602026731, 0.047059051692, -0.004081457853, 0.009225010872, -0.000493980944, -0.049124244601, 0.063917383552, -0.031479723752, 0.038626804948, -0.003649801016, -0.066161349416, -0.056119583547, 0.070889696479, -0.065506733954, 0.057744011283, -0.066269010305, 0.043473772705, 0.000234298408, 0.044464737177, 0.022263333201, 0.039999842644, -0.067185953259, 0.007325716317, -0.055459994823, 0.003725796938, 0.001272879541, 0.069004923105, -0.003301195800, -0.070351272821, -0.046330615878, 0.051006637514, 0.023304522038, -0.022002279758, -0.057159505785, 0.032227031887, -0.027558475733, 0.047612421215, 0.035163678229, -0.039689108729, -0.061182405800, -0.055545389652, -0.036877863109, -0.015433553606, 0.018410786986, -0.049616105855, 0.006122462451, 0.036691136658, 0.021424196661, 0.043629199266, -0.038130763918, -0.015834808350, 0.054320618510, -0.035150051117, -0.022582478821, 0.044480189681, -0.013741392642, -0.006069771945, 0.006185829639, -0.060469083488, 0.032537348568, 0.012695707381, -0.029296748340, 0.057483106852, -0.046361453831, 0.016790412366, -0.043764717877, 0.014015816152, 0.056242063642, 0.061554789543, -0.018752697855, 0.040205046535, 0.059320181608, 0.060609921813, 0.050404779613, 0.012915551662, 0.050940185785, -0.002866789699, 0.056940957904, -0.002264775336, -0.023683600128, -0.022497098893, 0.000498436391, 0.020806111395, 0.007752560079, -0.034775193781, -0.061043947935, -0.035154763609, 0.006957329810, 0.013843715191, -0.005676828325, -0.043693415821, -0.027591668069, -0.070917136967, -0.060081612319, -0.017785836011, -0.061036050320, -0.063618451357, 0.047316901386, 0.007447093725, 0.063445851207, -0.018544554710, -0.038305561990, 0.011430986226, -0.013646706939, -0.026133563370, 0.027058251202, 0.019916087389, 0.019147604704, -0.010932262987, -0.026019711047, -0.035912051797, 0.029121816158, 0.057003080845, 0.042303152382, -0.036713078618, -0.041961900890, -0.067484617233, -0.028154712170, 0.064788714051, -0.030056532472, 0.063298135996, -0.024460691959, -0.022588603199, 0.067477241158, -0.013965092599, -0.055678807199, -0.043741300702, -0.033461708575, -0.004194691777, 0.037863217294, 0.013135746121, 0.042547591031, -0.010783925653, -0.032370306551, -0.019607424736, 0.053384542465, -0.027576871216, -0.014628142118, 0.039058826864, -0.000720880926, 0.059457704425, -0.018034003675, -0.064967468381, -0.035316366702, 0.028734289110, 0.055175155401, -0.047494646162, 0.015229672194, 0.051871195436, 0.035973548889, -0.001183800399, -0.021812319756, -0.037604868412, -0.061858512461, 0.048403538764, -0.005548641086, -0.009234353900, -0.033556293696, -0.020538512617, -0.008411042392, 0.071523562074, 0.028944775462, 0.040218651295, -0.003785781562, -0.001503959298, -0.051066361368, 0.009205341339, 0.058210149407, 0.056783735752, 0.051772654057, 0.062912762165, -0.017202936113, -0.035646196455, 0.032510541379, 0.054507672787, -0.048790853471, -0.070369221270, -0.068656034768, -0.003062821925, -0.045020800084, 0.051088973880, -0.012189909816, 0.041170716286, -0.020940866321, 0.056207373738, -0.070368513465, -0.014823451638, 0.004197910428, -0.025149341673, 0.055823370814, -0.053303554654, 0.020111553371, 0.055318906903, 0.057984113693, -0.030055966228, -0.071519829333, 0.065270677209, -0.000459976494, -0.066522009671, -0.028273746371, 0.010501466691, 0.065206468105, -0.050789840519, -0.062789708376, -0.007137186825, 0.047262877226, -0.060351975262, -0.041990738362, 0.021609440446, 0.071985498071, -0.019601590931, -0.032668683678, -0.019564978778, -0.007899634540, 0.031036451459, 0.006093844771, -0.061962250620, 0.047379948199, -0.060451030731, -0.060969289392, -0.030977040529, -0.064538560808, -0.056353367865, 0.002056024969, 0.046469695866, 0.031842879951, -0.043278552592, -0.067524433136, 0.065500810742, -0.048368521035, -0.017427895218, 0.044614233077, 0.009764909744, -0.001460768282, 0.053870275617, -0.040120679885, -0.022930476815, -0.015486706048, -0.014892052859, 0.023164376616, 0.009972080588, 0.064019888639, -0.033377278596, -0.017558921129, 0.030357904732, 0.005939364433, 0.044863291085, -0.017669212073, 0.064276546240, 0.058791860938, -0.068112134933, 0.015985623002, 0.038151584566, -0.011739172041, 0.046279311180, 0.004028804600, -0.022461980581, -0.023626886308, 0.014464780688, -0.023190084845, -0.057728622109, 0.059579879045, -0.054420214146, 0.067040830851, 0.001762710512, -0.016655016690, -0.023263882846, 0.036567993462, 0.001200795174, 0.068422108889, -0.002526432276, 0.007018685341, 0.038883320987, -0.020662553608, -0.054115884006, 0.038605965674, 0.012560293078, 0.007960446179, -0.031919587404, 0.043311588466, -0.049279548228, 0.043609239161, -0.031603351235, -0.060309834778, -0.059780139476, -0.046761088073, -0.053484804928, 0.035553209484, 0.038203477859, 0.054480776191, -0.031206056476, 0.042678445578, 0.007647149265, 0.031569696963, -0.008944928646, -0.067212074995, -0.009272448719, 0.011530771852, -0.039212010801, -0.069533988833, 0.019001550972, -0.035314697772, 0.061268493533, -0.032026525587, -0.025079175830, 0.033849403262, -0.000273153186, 0.005821041763, -0.042179629207, 0.045054316521, -0.055805049837, 0.026471517980, -0.035408612341, -0.035648245364, 0.004789255559, -0.002245172858, -0.070775046945, 0.023252718151, -0.002535827458, -0.039798609912, -0.063476204872, -0.045848425478, 0.045614831150, -0.042901404202, -0.022592507303, -0.032639365643, -0.053537957370, 0.021672911942, 0.056497052312, 0.069907262921, -0.003413863480, 0.064762413502, -0.032205954194, 0.051986716688, -0.021944601089, -0.006569549441, -0.064970217645, 0.039327830076, 0.047973655164, -0.031924575567, -0.005865462124, -0.065072737634, -0.045924596488, 0.020795919001, -0.057555697858, 0.040138557553, -0.027403187007, 0.014989919960, -0.010642867535, -0.040115844458, 0.023191839457, -0.003301799297, 0.016196362674, -0.027459468693, 0.061801046133, -0.013465814292, -0.012006163597, 0.018690153956, 0.021015577018, 0.037297576666, 0.005960717797, 0.027171470225, -0.047591432929, 0.016609869897, 0.002722702920, 0.022981062531, -0.036405909806, -0.013665065169, -0.007876664400, -0.036570936441, -0.035239782184, 0.036968335509, -0.046919006854, -0.023726150393, 0.065977871418, -0.052625898272, -0.026832729578, 0.006410531700, -0.005735471845, -0.057594772428, -0.016913767904, -0.028590667993, -0.017643522471, 0.019573166966, -0.036365836859, -0.035598017275, -0.071926124394, 0.068106576800, 0.047373615205, 0.058417826891, -0.003969043493, -0.065102361143, -0.003696203232, -0.020156465471, 0.016111813486, 0.039497256279, 0.010730348527, -0.025185767561, 0.062669798732, 0.014656201005, -0.032932080328, -0.023290932178, 0.054534599185, -0.068804301322, -0.051730271429, 0.030225671828, 0.018759302795, -0.014361217618, 0.058972790837, -0.020266775042, -0.026133187115, 0.019515767694, 0.029567562044, -0.066244401038, 0.014118865132, -0.042881429195, 0.065012574196, -0.057551704347, 0.033352360129, -0.006980270147, 0.056408002973, -0.062578774989, -0.009751733392, -0.040419332683, -0.017096653581, 0.036276899278, 0.040241278708, 0.066119387746, 0.068818286061, -0.040881942958, 0.020483486354, 0.016360081732, -0.049117363989, -0.003392443061, 0.065733611584, 0.001571133733, -0.037648331374, -0.016271676868, -0.010524470359, 0.012927532196, -0.067128740251, -0.029804147780, 0.020768187940, 0.048565037549, 0.005865223706, -0.064101725817, 0.004786506295, -0.058545030653, 0.051452785730, 0.032657429576, 0.043694823980, -0.044852055609, 0.003016591072, -0.033725827932, 0.049322202802, -0.007629103959, -0.049874700606, -0.040720049292, 0.065888494253, -0.066207371652, -0.019287660718, -0.031957406551, 0.048781611025, 0.052304364741, -0.027417365462, 0.005669653416, 0.014952838421, 0.061858624220, 0.009038046002, 0.053028285503, 0.040614180267, 0.071195527911, 0.067957654595, -0.055350370705, -0.052649918944, 0.001400768757, 0.016235664487, 0.057405903935, 0.040816746652, -0.002632871270, 0.014656752348, 0.028503000736, 0.010288193822, -0.049525551498, -0.052964501083, 0.026523478329, -0.047938019037, -0.056037046015, -0.017428290099, 0.005009450018, -0.002955384552, -0.025370031595, 0.038262665272, 0.041946515441, -0.044505037367, -0.045836620033, -0.038358677179, 0.050864100456, 0.016615509987, -0.034271750599, 0.011205121875, 0.067853629589, -0.020941227674, -0.014923609793, -0.018557079136, 0.026694178581, -0.070800408721, -0.017966970801, -0.015141889453, 0.023656740785, 0.014776490629, 0.056747227907, 0.031312339008, -0.009039096534, 0.023960344493, -0.026740830392, 0.040267609060, -0.047928817570, 0.032253630459, 0.043525338173, 0.017102696002, -0.045108225197, -0.003088869154, 0.006488315761, -0.037399664521, -0.006918199360, 0.017860889435, -0.010134816170, 0.040364287794, 0.057881161571, -0.027250342071, -0.023177627474, -0.041057102382, -0.040394917130, 0.058714479208, 0.028661765158, -0.052363313735, 0.057593747973, 0.033715069294, 0.042145632207, -0.019804146141, 0.058665409684, -0.019350655377, -0.011041712016, -0.057572938502, -0.054956812412, 0.053719893098, -0.039317365736, 0.005064092577, -0.041064295918, 0.004777386785, -0.058630649000, -0.002754226327, 0.019015833735, 0.065190687776, -0.065707340837, 0.023636937141, -0.021653607488, -0.028790574521, -0.036717671901, 0.004258163273, 0.021611332893, 0.025538876653, 0.060814574361, -0.029337082058, -0.017408311367, -0.029231537133, -0.053414415568, -0.016959190369, -0.068895801902, 0.059851393104, -0.003802888095, -0.048621732742, 0.060370564461, 0.022292360663, 0.005760714412, -0.041171304882, 0.047064006329, 0.010595239699, 0.066327303648, -0.014818184078, 0.061980277300, 0.038118250668, -0.046811498702, 0.012365691364, 0.067738726735, -0.052588351071, 0.018490456045, -0.066648423672, -0.039138764143, 0.039874352515, -0.025921341032, 0.012289240956, 0.018542662263, 0.025175668299, 0.026621036232, 0.057719171047, -0.055086873472, 0.018032610416, -0.070626921952, -0.022647481412, -0.035203132778, 0.050981521606, 0.053282231092, -0.048369813710, -0.067784972489, -0.008271552622, -0.004939690232, 0.045440360904, 0.000017374754, -0.022308912128, -0.042234830558, -0.011950604618, -0.060771003366, -0.056847758591, 0.046298146248, -0.049255892634, 0.032518818974, -0.054356515408, 0.044469028711, 0.000156611204, -0.002094753087, 0.004163205624, 0.008357413113, -0.000516153872, 0.037437915802, 0.065260380507, 0.012880660594, 0.015409342945, 0.001199506223, -0.064937405288, -0.016149856150, 0.016550265253, -0.028159547597, -0.047739371657, -0.039649520069, 0.003161810338, -0.019620295614, -0.046014726162, 0.063200607896, 0.012416571379, -0.030305422843, 0.071977689862, 0.049236364663, 0.036898322403, -0.025589376688, -0.028807934374, 0.007535375655, -0.000531077385, 0.060509771109, -0.031230196357, -0.042218945920, 0.050909698009, -0.037601236254, 0.057657226920, 0.021031543612, -0.037398148328, 0.028430029750, 0.043096989393, -0.053820535541, -0.032242722809, 0.045851387084, -0.035198539495, 0.072062447667, 0.030879892409, 0.000462435186, -0.009677417576, -0.041039861739, 0.056365624070, -0.028444517404, -0.000239066780, -0.063777521253, 0.011525295675, -0.067562825978, -0.051931809634, -0.065319389105, -0.033277980983, -0.000031918287, -0.024271402508, 0.039735153317, 0.008962355554, -0.019031785429, -0.034395050257, 0.007064163685, 0.013912253082, 0.015006080270, -0.023699361831, 0.041850440204, 0.057155579329, -0.066163979471, 0.024661935866, -0.012362420559, 0.049824066460, 0.010181427002, -0.069021835923, -0.036585252732, -0.036505240947, -0.053315926343, -0.025464389473, 0.022322043777, 0.009480349720, 0.066953971982, -0.008057318628, -0.016933899373, 0.019185937941, -0.031838182360, 0.016792513430, -0.033989101648, 0.018902152777, -0.051825061440, 0.009935431182, -0.045167174190, 0.039739146829, -0.037759173661, -0.014241855592, 0.041802532971, 0.051420144737, 0.011994466186, 0.033622071147, 0.057332605124, 0.043490119278, 0.038517266512, -0.042844675481, 0.059916853905, -0.067560844123, -0.038593236357, 0.012070842087, -0.067002825439, -0.001401461661, -0.022387288511, 0.045314066112, -0.006764568388, 0.013227403164, -0.062509946525, -0.047514624894, -0.050019096583, -0.040668342263, -0.021918226033, 0.054122716188, 0.039824090898, -0.004215307534, 0.069143190980, -0.044698059559, 0.062153995037, -0.040613867342, -0.032901074737, 0.066024348140, 0.061672225595, 0.037267640233, -0.006035342813, -0.037931717932, -0.068938940763, 0.055868253112, 0.053062602878, 0.021380200982, 0.034084357321, -0.038733724505, -0.011840347201, 0.045141980052, 0.039634943008, 0.035845719278, 0.028549239039, -0.015300445259, 0.007315672934, -0.003962062299, -0.053549535573, 0.059695661068, 0.007580578327, 0.029522567987, 0.046722680330, 0.027391284704, -0.014307670295, -0.015501279384, 0.045759811997, -0.065976828337, 0.033383898437, 0.010118655860, 0.001320265234, -0.038770735264, 0.058119088411, -0.062942430377, 0.012514866889, 0.057016119361, 0.066973373294, 0.032238796353, -0.026041269302, -0.026378806680, 0.016450040042, 0.036877192557, -0.054316461086, -0.021436255425, -0.014610521495, 0.030034027994, 0.010383673012, 0.005813844502, -0.014146637172, 0.004072494805, 0.018963165581, 0.051168657839, -0.061869971454, -0.030550114810, -0.023655053228, 0.025772020221, 0.015663020313, -0.062936231494, 0.054047897458, 0.056650370359, 0.042478904128, 0.031465925276, 0.039693616331, 0.045989945531, 0.004996456206, 0.012285940349, -0.048219703138, -0.020517401397, 0.006268128753, -0.006329178810, -0.070997610688, -0.018715672195, -0.008729122579, -0.045469507575, -0.034673314542, -0.038508735597, 0.067659854889, 0.021401844919, -0.053632024676, -0.058021113276, -0.030265383422, -0.028618596494, 0.030223883688, 0.043971948326, 0.034960091114, 0.053034812212, 0.066952794790, -0.055515468121, 0.007607609034, 0.008024848998, -0.001130491495, -0.017998766154, -0.043658535928, -0.028258912265, 0.017816051841, 0.018371872604, -0.069296658039, 0.069820880890, -0.045140847564, -0.037628889084, -0.069953739643, -0.039096042514, 0.023550301790, -0.034244377166, -0.041859142482, 0.068795651197, -0.001442357898, 0.005961924791, -0.003630325198, 0.048574343324, -0.036670114845, -0.017864968628, -0.065065406263, -0.014973953366, -0.002774737775, -0.004489950836, 0.053162083030, 0.044198833406, -0.071865640581, 0.029912650585, -0.034321922809, 0.016963750124, 0.012396916747, -0.024822626263, 0.003670684993, 0.033901005983, -0.064871162176, 0.027768135071, 0.007208816707, 0.051936298609, -0.058416601270, -0.063180051744, -0.037889201194, -0.027518231422, 0.043391145766, -0.009533248842, 0.019707426429, -0.039078764617, 0.008592315018, -0.039569042623, 0.030198484659, -0.070929355919, 0.060843452811, 0.072058022022, -0.044830720872, 0.017737537622, 0.022203527391, 0.031423062086, -0.054787863046, -0.025342587382, 0.012688174844, -0.069731965661, -0.016109421849, -0.014212399721, 0.035715177655, -0.014993499964, -0.027833949775, -0.009695414454, 0.066142022610, 0.036442540586, -0.024995122105, -0.019533988088, -0.067285992205, 0.069866910577, 0.048362791538, -0.070089407265, 0.009295485914, 0.055422678590, -0.006115511060, -0.065217077732, 0.003123030066, 0.021191895008, 0.062062576413, 0.047658950090, -0.046267762780, 0.005268871784, -0.047253310680, -0.026901673526, 0.022984005511, -0.062738686800, -0.051795706153, -0.065110556781, -0.044555589557, 0.062010407448, -0.008090764284, -0.049652773887, 0.017656408250, 0.062670782208, 0.017433449626, -0.049806892872, 0.003790117800, 0.011287368834, 0.012469634414, 0.040976166725, 0.058748766780, 0.040867403150, 0.068219348788, -0.040595524013, 0.061618685722, -0.043908044696, 0.044681057334, -0.028305836022, -0.035322666168, -0.011975362897, 0.029815487564, 0.038679748774, 0.061145365238, -0.010523438454, 0.042795822024, -0.029956821352, 0.003568708897, -0.013063255697, 0.042279310524, -0.041900094599, -0.014334857464, -0.053767163306, 0.012303113937, 0.017851293087, 0.033174589276, -0.043440103531, 0.062088936567, 0.018415197730, 0.015433482826, 0.059796616435, 0.018241994083, -0.059611000121, -0.061578288674, -0.039218567312, -0.054521113634, -0.024390213192, -0.035559646785, 0.018927603960, 0.002008773386, -0.063281759620, -0.015034038574, 0.031694889069, 0.063081130385, 0.044294916093, 0.070126265287, 0.052826561034, 0.066027671099, -0.006636776030, 0.046192310750, -0.068192817271, -0.034252393991, -0.064280293882, -0.035527918488, -0.027372956276, 0.008738398552, 0.025605656207, -0.018129672855, -0.041404224932, -0.052145048976, 0.059176951647, 0.049842283130, 0.003324598074, -0.066715255380, 0.000872515142, -0.061552189291, 0.039507739246, -0.049639489502, -0.015278920531, 0.019265621901, -0.030010230839, -0.069886669517, -0.061853852123, 0.021865747869, 0.061735063791, -0.061964299530, -0.024053398520, -0.026050474495, 0.043841816485, 0.019829735160, 0.005785197020, -0.049420401454, -0.053194258362, -0.022888749838, -0.042747318745, 0.050884321332, 0.032925881445, 0.055467888713, 0.014888957143, 0.060379028320, 0.059824422002, -0.002419918776, 0.027682021260, -0.027946446091, -0.059117622674, 0.014222294092, 0.030835606158, 0.030257605016, 0.025178954005, -0.022767100483, 0.065206840634, 0.003464624286, 0.064457431436, -0.031049530953, 0.003566555679, 0.009822502732, -0.022225428373, -0.051732439548, -0.037622969598, -0.046016685665, -0.053964294493, -0.009399466217, 0.011673048139, -0.001683197916, -0.052836261690, 0.053575247526, 0.048567570746, 0.031618714333, -0.015557233244, 0.011834338307, -0.056051723659, -0.026769150048, -0.032933592796, -0.000835314393, -0.037627443671, -0.040064778179, 0.039666950703, -0.040675379336, 0.043259069324, -0.033715452999, -0.057422176003, -0.008105546236, 0.045739337802, -0.060655891895, -0.044230356812, -0.042389634997, -0.013507954776, -0.008340343833, 0.052643589675, -0.001577913761, -0.063831157982, 0.035932578146, 0.048067323864, 0.039269261062, 0.045343779027, 0.063224509358, 0.027332969010, 0.004322774708, -0.034893244505, -0.026025611907, -0.025203164667, 0.058829918504, -0.044219911098, 0.033456973732, 0.003360301256, 0.046785518527, -0.013696726412, -0.012977324426, 0.026424989104, -0.028915129602, -0.046876318753, 0.053265392780, 0.010033369064, -0.002027153969, -0.050776384771, -0.053700074553, -0.010001689196, 0.041995368898, 0.019073493779, -0.019856590778, -0.066127367318, -0.034086007625, -0.053350612521, -0.068105444312, 0.006894715130, -0.018484398723, 0.017438836396, 0.039555057883, 0.035520486534, 0.011400364339, -0.049891237170, 0.005200698972, -0.006570138037, -0.059273943305, -0.042141653597, -0.030796665698, -0.056639872491, -0.064322263002, 0.046393074095, -0.048624761403, -0.006043531001, 0.036130316556, -0.019114445895, 0.009669639170, 0.058430090547, -0.015650801361, 0.058783352375, 0.053931623697, 0.069814488292, -0.008562222123, 0.019072808325, 0.049631021917, 0.016248002648, 0.043444715440, 0.056902319193, 0.071019470692, 0.068806976080, -0.039394278079, 0.062597602606, 0.071755468845, -0.044213492423, 0.058271110058, 0.037979260087, 0.051732115448, -0.058409564197, 0.001851595938, -0.063517436385, 0.006780497730, 0.054925844073, 0.061228945851, 0.022665701807, -0.065892085433, -0.003634363413, -0.010790672153, -0.049218535423, -0.013492725790, 0.003086738288, -0.056131251156, 0.003894701600, 0.002574019134, -0.062868289649, 0.052818834782, 0.019518949091, 0.027472406626, 0.032506771386, -0.002199418843, 0.010166145861, -0.032498944551, -0.065395541489, -0.031619612128, 0.036154717207, -0.006856054068, -0.035230230540, 0.022955410182, -0.059776782990, -0.019845992327, 0.070412710309, -0.042627718300, -0.036671008915, 0.017091490328, -0.048109635711, -0.004344351590, -0.069559879601, -0.042999669909, -0.029688488692, -0.069714806974, 0.020771920681, -0.002686262131, -0.025009848177, -0.013296574354, -0.020630240440, 0.064445137978, 0.029154472053, 0.038301728666, 0.019826754928, -0.010793250054, -0.052253741771, 0.069122001529, 0.033038757741, 0.039845481515, 0.045687302947, -0.021207790822, 0.032980173826, -0.060216303915, 0.017511874437, 0.028929479420, -0.039425544441, -0.028056893498, -0.011939112097, -0.063615165651, 0.027549222112, -0.012792959809, 0.009384617209, -0.021611846983, -0.001086339355, 0.013509035110, 0.000268794596, 0.053505301476, -0.037597741932, -0.010573491454, -0.066637896001, -0.063327029347, 0.064904734492, -0.039156932384, -0.021554466337, -0.063351765275, 0.038888409734, -0.041636958718, -0.017145812511, -0.035231471062, -0.026026643813, -0.051052529365, 0.026009142399, 0.003738962114, -0.026594299823, 0.024601094425, 0.038932032883, -0.031375091523, 0.033526405692, 0.031630896032, 0.028067305684, -0.020156361163, -0.031107533723, 0.000364519656, -0.072125785053, 0.030802600086, 0.060205876827, 0.039411090314, 0.047204770148, 0.000932656229, 0.020181313157, -0.028744202107, 0.053041517735, -0.069688811898, -0.051506984979, -0.039587110281, -0.065830811858, 0.062183022499, 0.060224264860, 0.069533780217, -0.008118279278, -0.008324064314, 0.042999379337, 0.065982729197, -0.064314037561, -0.020952533931, -0.036569077522, -0.041727706790, -0.060170758516, -0.020348418504, 0.015144333243, 0.065971985459, -0.001626603305, 0.034369073808, -0.048637546599, 0.068093076348, 0.041730217636, 0.049931019545, 0.062314331532, -0.015035640448, -0.049552150071, -0.067047491670, -0.001625381410, -0.064310953021, 0.011521324515, 0.038123555481, 0.017939560115, -0.027402568609, -0.060488268733, 0.067209199071, 0.025116272271, 0.069484502077, -0.071722909808, 0.069999516010, 0.031557358801, -0.070227302611, -0.037439271808, -0.064313843846, -0.013504512608, 0.047379411757, -0.017340295017, -0.001806102693, 0.070425346494, 0.040133878589, 0.003330022097, -0.037657551467, -0.008470937610, 0.049419127405, 0.020822472870, -0.044746376574, -0.017137344927, 0.003873966634, 0.008943393826, -0.000318951905, -0.055731717497, -0.002289444208, -0.057119257748, -0.055446334183, 0.005244776607, -0.061131834984, -0.049318470061, 0.004077479243, -0.016952775419, -0.071963459253, -0.037650275975, -0.071480095387, -0.068746246397, 0.042958252132, -0.012987803668, 0.053616300225, -0.014343410730, -0.052804566920, -0.011771209538, -0.001291148365, -0.068410910666, -0.063488125801, -0.050591208041, -0.025005511940, -0.069454185665, 0.018850050867, 0.031912617385, 0.062428012490, -0.008621066809, -0.024474870414, 0.004322484136, 0.021265879273, 0.031161800027, 0.028398953378, -0.008088119328, 0.037604026496, -0.060393631458, 0.009172305465, -0.066896989942, -0.021816052496, -0.004534602165, 0.013950571418, -0.047911230475, 0.018295735121, -0.027213126421, 0.037626355886, 0.026221454144, 0.019224703312, 0.014974281192, -0.070292785764, 0.066881656647, 0.002895750105, 0.023375518620, 0.068474888802, -0.055700592697, -0.019263572991, -0.015665546060, -0.015801236033, -0.018496908247, -0.007586203516, 0.031555086374, 0.005136914551, -0.047932632267, -0.028786737472, -0.052797857672, -0.060139529407, 0.017686694860, -0.015894375741, -0.058179050684, -0.024768359959, 0.062169402838, 0.029580377042, -0.034936692566, 0.011861629784, 0.029999248683, 0.046476356685, 0.060475260019, -0.004164718091, -0.039880461991, -0.055918511003, 0.015560880303, 0.069798573852, 0.022352412343, -0.039181109518, -0.071779333055, 0.036823645234, -0.035212628543, 0.019785545766, 0.007887698710, 0.033487692475, 0.004559516907, -0.026215877384, -0.040811859071, -0.060269936919, 0.065380647779, -0.067974850535, -0.009877096862, -0.031478587538, 0.021603919566, -0.025779232383, -0.031507890671, -0.055511631072, -0.039743911475, -0.020882349461, 0.041135773063, 0.007989816368, -0.015025418252, 0.033772386611, 0.013333000243, -0.006646618247, 0.002559483051, -0.049421656877, 0.066695272923, 0.045160017908, -0.066810593009, -0.002330727875, -0.045569442213, 0.015147753060, 0.005361452699, 0.069629833102, -0.015279024839, -0.051220551133, 0.037818349898, -0.038088247180, 0.031701996922, -0.060988903046, -0.063665732741, 0.028440356255, 0.007306829095, -0.055071458220, -0.012499812990, 0.053615555167, -0.002314463258, -0.059817492962, 0.031414218247, -0.023916881531, -0.045876558870, 0.003514595330, 0.038233309984, -0.014171775430, 0.004010908306, -0.037944264710, 0.041934199631, -0.019472923130, 0.052926078439, 0.016429014504, -0.002516396344, -0.020231172442, 0.062573611736, -0.012335546315, -0.052652910352, 0.036530934274, 0.044141881168, -0.041576597840, -0.060372311622, 0.051358044147, 0.061826780438, -0.063965417445, -0.047501750290, 0.017395220697, 0.047091811895, -0.022104639560, -0.006228640676, -0.009421147406, 0.053412035108, 0.064099147916, -0.023041404784, 0.002479076385, 0.035041064024, -0.013020444661, 0.058661341667, -0.051329068840, -0.068534277380, -0.005781099200, 0.055806964636, -0.039072345942, -0.009291149676, -0.002242177725, 0.069096848369, 0.037216223776, -0.042780995369, 0.068588003516, -0.050501976162, 0.026429720223, 0.033805370331, 0.071341246367, -0.048058673739, -0.041389737278, 0.003665663302, -0.026658892632, 0.062575310469, -0.047324627638, -0.025626078248, 0.056586369872, 0.038460075855, 0.051049917936, 0.035126291215, -0.008759215474, -0.033632311970, 0.029451414943, -0.050901971757, -0.047542359680, 0.009999126196, -0.053406484425, -0.053353793919, 0.065772190690, -0.005596183240, -0.007989250124, 0.012985877693, -0.067652039230, 0.010717302561, -0.025313578546, 0.037809245288, -0.069272361696, -0.011673323810, -0.001131646335, 0.045096680522, -0.017983626574, -0.065042451024, 0.016206271946, -0.001653999090, -0.006586484611, 0.039684861898, 0.007894337177, -0.056123510003, -0.033587004989, -0.001447729766, 0.044442959130, -0.044626411051, -0.061129633337, -0.064965866506, 0.013775721192, 0.050161942840, -0.063430763781, -0.025626938790, -0.054303985089, 0.031577832997, 0.019868001342, 0.021278522909, 0.063449576497, -0.018109265715, -0.066448830068, 0.061863079667, 0.027202889323, 0.018219180405, 0.053463339806, -0.038597900420, -0.001348242164, 0.063039109111, 0.011726453900, -0.037074360996, -0.024692203850, -0.011898450553, -0.011000156403, 0.042768739164, 0.003571301699, 0.063873454928, -0.064801029861, -0.038063090295, 0.019781641662, -0.057910665870, -0.040589794517, 0.052559584379, -0.017011120915, -0.062067072839, -0.061811521649, -0.066022478044, 0.029500991106, -0.062328487635, -0.039759159088, -0.000441707671, 0.032545231283, -0.037986658514, -0.041584357619, 0.001172512770, -0.049109894782, 0.068601474166, -0.020152971148, 0.037671476603, -0.004266940057, 0.034046143293, -0.056221276522, -0.047729477286, 0.053020834923, -0.007844179869, -0.056749474257, -0.065897800028, 0.047348447144, -0.012997094542, 0.062531948090, 0.016004614532, -0.002389103174, 0.051578976214, -0.028454978019, -0.047343660146, 0.048660844564, 0.023099496961, -0.065034173429, 0.007014200091, 0.061392009258, -0.015127882361, -0.002208337188, 0.021663106978, 0.002886958420, 0.042322061956, -0.025293409824, 0.026750788093, -0.000919058919, -0.032203577459, -0.029725737870, 0.039445884526, 0.021684214473, -0.009485810995, -0.021261524409, -0.027558941394, 0.021501541138, -0.033479705453, -0.051107641309, -0.055808629841, 0.010705120862, -0.006283991039, -0.053715474904, 0.066484868526, -0.034690864384, -0.068454541266, -0.059561997652, -0.056705426425, -0.032480601221, 0.004685074091, 0.019787214696, 0.033265039325, 0.070149466395, 0.022121101618, 0.064878910780, 0.069383978844, 0.002504490316, 0.036149583757, -0.055753193796, -0.019324243069, -0.035621885210, 0.020706295967, -0.053994439542, -0.001430176198, -0.043150223792, -0.036873664707, -0.003076948225, 0.033847130835, 0.013301633298, 0.001390226185, -0.036317504942, 0.014575399458, -0.049767918885, -0.052179221064, -0.014424502850, -0.033424921334, -0.024575266987, -0.055937696248, -0.040214765817, -0.070611074567, 0.012993685901, -0.011863317341, -0.054271843284, -0.052439518273, 0.004142776132, -0.039509940892, -0.014557886869, -0.043258450925, -0.000033743680, 0.072128877044, -0.057097852230, 0.039613656700, 0.066123634577, -0.014202833176, -0.049725227058, 0.067713260651, -0.003851406276, -0.011689014733, -0.067420147359, 0.049965947866, 0.028747811913, -0.029940027744, -0.030261132866, 0.067015856504, 0.046890959144, 0.004187583923, 0.015915036201, 0.072044178843, -0.045119736344, 0.027387857437, -0.000054836273, 0.036469317973, -0.052707716823, 0.048928610981, 0.017313145101, 0.042085133493, 0.055698946118, -0.034709565341, 0.013845816255, 0.020404577255, -0.046065211296, 0.045716643333, -0.007506527007, 0.057472437620, 0.038190402091, -0.020849779248, 0.019346922636, -0.012666441500, -0.036675740033, 0.047940701246, -0.025324519724, -0.046295687556, -0.022273365408, -0.067072376609, -0.059481985867, -0.000514917076, 0.050386123359, 0.056010037661, 0.057784333825, -0.060816012323, 0.015295781195, -0.037359245121, 0.051135346293, 0.047565639019, 0.001714855433, 0.068884208798, 0.014081388712, -0.057825390249, 0.059615075588, -0.035056155175, 0.032600618899, -0.061786849052, -0.025085989386, 0.025982975960, -0.058064077049, -0.007337868214, -0.070726834238, -0.021811477840, -0.014198306948, -0.034525405616, -0.005549862981, -0.004707045853, -0.007383376360, -0.005419164896, -0.059450652450, -0.057577032596, 0.058999463916, 0.035956308246, -0.011342771351, -0.029490940273, -0.032008167356, 0.062395811081, -0.051336951554, -0.014518775046, -0.011925276369, -0.017649270594, 0.037985630333, 0.032509423792, -0.066849172115, -0.062287814915, -0.010867100209, 0.022749103606, 0.048309095204, 0.002739220858, -0.024465423077, -0.064381778240, 0.006381347775, -0.023194111884, 0.010318063200, 0.023866795003, -0.003313243389, -0.042161613703, -0.000047624111, -0.003539234400, -0.004304535687, 0.007755324244, -0.032304544002, -0.005953371525, -0.052516877651, 0.050814017653, 0.057259202003, -0.009374618530, 0.041833147407, -0.069362230599, -0.015516195446, -0.040076494217, 0.007489144802, 0.039002127945, 0.002097338438, 0.039722234011, -0.065740704536, -0.029343757778, -0.040475629270, -0.034357663244, -0.042147606611, -0.018987737596, -0.024248208851, 0.000015571713, -0.036407887936, 0.056673869491, -0.035641618073, -0.067976154387, -0.020618025213, 0.052942976356, -0.036949131638, -0.069914020598, 0.028828740120, -0.037830114365, 0.022835396230, 0.015199273825, 0.055214405060, 0.000766925514, 0.033186733723, -0.058878421783, 0.003094322979, -0.050506070256, 0.004320435226, 0.068006321788, -0.027162179351, -0.029718667269, -0.019061967731, 0.026191480458, -0.051195599139, 0.018034279346, -0.068083211780, 0.052364312112, 0.023320458829, 0.044123090804, 0.019667528570, 0.022718973458, -0.049793194979, 0.018434330821, -0.009084656835, -0.038338445127, 0.001281447709, 0.040692605078, -0.002917237580, 0.012967951596, 0.007995650172, -0.025056790560, -0.068231478333, 0.020443342626, -0.040756523609, 0.032541804016, 0.048303343356, -0.009108319879, 0.066669300199, 0.032700896263, 0.013176314533, 0.057900950313, 0.042532034218, -0.016698084772, -0.005806393921, 0.038950219750, -0.052037697285, -0.030458990484, 0.015561379492, -0.004808910191, -0.035640448332, -0.052065312862, 0.052031293511, -0.007081955671, -0.024534180760, 0.017078779638, 0.054391503334, -0.030209615827, 0.055049031973, 0.010536380112, 0.035015754402, -0.062495253980, -0.030476488173, -0.056242316961, 0.008723288774, -0.055249165744, -0.066015794873, 0.036197006702, -0.041602201760, 0.003542825580, 0.037799023092, 0.019964627922, -0.052395954728, -0.017281740904, -0.013555407524, 0.051998071373, -0.032910346985, 0.037309795618, -0.066198460758, -0.009128399193, 0.037348747253, -0.066916584969, -0.030817553401, -0.061119690537, 0.010133713484, 0.033839426935, 0.052176520228, -0.010958019644, -0.000386849046, -0.030753165483, 0.007603466511, -0.018251683563, -0.029856991023, -0.070304214954, 0.044154249132, -0.053634554148, 0.014699906111, -0.013743817806, 0.003936454654, 0.037985250354, -0.030808210373, 0.020794183016, -0.067227385938, 0.035305082798, 0.024230450392, 0.050919160247, 0.002428993583, -0.051247045398, -0.070440731943, -0.063621290028, -0.003707543015, -0.057263653725, -0.040474358946, 0.007425084710, 0.068177253008, -0.040905825794, 0.030622653663, -0.041854895651, 0.042928420007, -0.011889435351, 0.071986496449, -0.011954665184, 0.041194461286, 0.058833166957, 0.049907654524, -0.069366842508, -0.007116474211, 0.069004982710, -0.050268143415, 0.019861735404, 0.013222500682, 0.010387368500, 0.008241854608, 0.028093263507, 0.000794060528, 0.004584074020, 0.059586599469, -0.038073997945, -0.057680942118, -0.032749865204, -0.036997724324, -0.064044311643, 0.027147278190, -0.020190481097, -0.019502639771, 0.003322191536, 0.035554520786, 0.042160235345, -0.015330024064, -0.038313768804, -0.049862485379, 0.057296469808, 0.039173483849, -0.019279420376, -0.022634115070, 0.048699073493, -0.033827878535, 0.068961173296, -0.042940378189, -0.068311057985, -0.007269330323, 0.006645962596, 0.070726409554, 0.023306347430, -0.016492296010, -0.046907581389, -0.008926086128, 0.025901846588, -0.020678572357, 0.065720185637, 0.002674095333, 0.065411910415, -0.056916840374, -0.046621784568, 0.009416140616, -0.025399196893, -0.024276632816, -0.064937993884, 0.045197471976, 0.033557929099, 0.029001556337, 0.027277253568, 0.068867027760, -0.013287194073, 0.054831653833, -0.029495485127, -0.007758289576, 0.041921310127, -0.056221894920, 0.071601346135, -0.011258617043, -0.027628403157, 0.004106111825, 0.056380093098, -0.019279696047, -0.047185018659, 0.004149422050, -0.013552516699, 0.051318608224, 0.044597715139, 0.067948743701, -0.070069588721, 0.023920476437, 0.015989564359, -0.030857093632, 0.034081913531, 0.044352523983, 0.020249620080, 0.015786886215, -0.026937790215, 0.010557867587, 0.061920329928, -0.065670035779, 0.062663137913, 0.022387444973, 0.063206329942, 0.046652585268, -0.047861501575, 0.025902777910, 0.061294659972, 0.057707324624, -0.025907419622, -0.030256539583, -0.021563310176, 0.050092414021, 0.007161721587, -0.046823494136, 0.072138354182, 0.045223079622, 0.023665942252, 0.031615793705, -0.062745809555, -0.065811045468, -0.049529541284, -0.026440009475, -0.005827561021, 0.047550633550, -0.000852182508, 0.008482776582, -0.068594381213, -0.024186801165, 0.045442387462, -0.052587028593, 0.006272427738, -0.000633351505, -0.057634569705, 0.037207573652, 0.030248969793, -0.029470723122, -0.043258883059, 0.022140838206, 0.029821820557, -0.020882040262, 0.018829628825, 0.037202529609, -0.045486524701, 0.011565677822, 0.031772509217, -0.050066381693, 0.022118851542, -0.064117811620, -0.058020889759, -0.070719383657, -0.049233298749, 0.002192795277, 0.062060877681, -0.008325494826, -0.034673485905, 0.018378220499, -0.014050368220, -0.049661941826, 0.006957553327, 0.060832843184, 0.024115823209, -0.016292426735, -0.067003048956, 0.007728897035, 0.056686863303, 0.053487777710, 0.034688107669, 0.029941178858, 0.002451293170, -0.048893954605, 0.047696441412, -0.005934961140, 0.018899276853, 0.042439036071, -0.020756982267, 0.042691297829, 0.015925824642, -0.071345075965, 0.049050346017, -0.014342136681, -0.013659060001, -0.005373813212, -0.049293074757, -0.066504664719, 0.068060874939, -0.069016128778, 0.065494582057, 0.049343526363, 0.037654921412, 0.056423678994, -0.027874778956, 0.041312962770, 0.071898922324, 0.036856457591, 0.066657409072, -0.031372267753, -0.035525854677, -0.011628724635, -0.014783598483, -0.067991241813, 0.005713909864, 0.062440261245, 0.022456288338, -0.025127436966, 0.031690761447, 0.008777849376, -0.019813299179, 0.052966669202, 0.056552916765, 0.049885079265, 0.062898471951, -0.004782825708, -0.032576270401, 0.033731691539, 0.028796650469, 0.009022042155, 0.036375127733, 0.020249687135, -0.062329143286, -0.042005538940, 0.053811162710, -0.031058494002, 0.039366506040, -0.010539595038, -0.014749273658, 0.011613205075, 0.024873867631, -0.044670287520, 0.062157273293, -0.030168220401, 0.005190558732, 0.030321031809, -0.008547373116, -0.050916098058, -0.038037538528, 0.046771444380, -0.038086440414, 0.049143843353, -0.067745007575, -0.056384511292, 0.062571078539, -0.046537354589, 0.057099580765, 0.055476784706, 0.030430480838, 0.023444637656, -0.015721227974, 0.056580334902, -0.066697910428, 0.037545025349, 0.036084353924, 0.000219449401, 0.023834981024, 0.002439327538, -0.032943192869, 0.067190378904, 0.039092428982, -0.055365033448, 0.063741698861, 0.061288759112, -0.039735376835, 0.035337097943, 0.044213920832, -0.001899294555, 0.010613702238, -0.030109580606, 0.014027208090, -0.066255107522, -0.041257265955, -0.066165976226, 0.062778145075, -0.045782353729, -0.061935909092, -0.026710476726, 0.047454059124, 0.000330068171, -0.015586312860, 0.002755291760, 0.006796278059, 0.034992404282, -0.039635874331, 0.022490300238, 0.062641561031, 0.008850030601, 0.022233255208, -0.052742850035, -0.007871232927, 0.060890674591, 0.024194866419, 0.033522635698, 0.025783777237, 0.013598799706, -0.038348425180, -0.059151176363, -0.064307361841, 0.033538468182, 0.041247300804, -0.013957314193, 0.065324708819, -0.041865166277, -0.054935872555, 0.006178021431, 0.042769342661, 0.015520118177, 0.010929681361, -0.038312289864, -0.004531800747, -0.055042620748, 0.040923856199, 0.042100928724, 0.068498268723, 0.058681577444, 0.038164816797, 0.016631647944, 0.055604681373, 0.032420963049, -0.015855453908, 0.024174459279, 0.053573578596, 0.001771897078, -0.005969636142, -0.052995335311, 0.040960595012, 0.036959730089, 0.013002343476, -0.026526831090, 0.029040254653, -0.034149896353, 0.019851945341, -0.049226433039, -0.028995089233, -0.001230910420, 0.017379574478, 0.050142519176, 0.035761430860, -0.067386060953, 0.042432837188, 0.055991992354, -0.060197651386, 0.023229934275, -0.060713291168, 0.004488989711, 0.006406106055, -0.006095930934, -0.009608611465, 0.045249663293, 0.060596212745, 0.059712126851, 0.042294777930, -0.035403344780, -0.068361282349, 0.014869198203, -0.025608751923, -0.013643644750, 0.029114603996, -0.070470668375, 0.007352270186, 0.036401398480, 0.005693174899, -0.046571765095, -0.054260469973, -0.019974764436, 0.066223084927, 0.023834705353, -0.042331803590, -0.039469782263, -0.049019701779, 0.062402963638, 0.029913716018, -0.023163277656, 0.011476397514, -0.041494198143, 0.028531424701, -0.001928836107, 0.040458820760, -0.065712831914, -0.035018473864, 0.050277292728, -0.013906609267, -0.043562352657, 0.035494849086, -0.045257300138, -0.038960386068, -0.008659005165, -0.017291326076, -0.019625544548, -0.065292097628, 0.026216983795, 0.007977411151, 0.028971791267, 0.011391617358, 0.033839598298, 0.029246836901, -0.043459422886, -0.032607637346, -0.071680277586, -0.029867280275, 0.056238606572, 0.017357349396, -0.045053612441, -0.007664427161, -0.028592236340, 0.039167121053, 0.014708183706, -0.015836991370, 0.010697580874, -0.047767899930, 0.018468394876, -0.017146844417, -0.006678089499, 0.022368840873, -0.062800750136, 0.050370499492, -0.024905148894, -0.068842686713, 0.064286917448, -0.070202901959, -0.013821590692, 0.014907486737, 0.018456488848, 0.011127345264, 0.054413303733, -0.044096939266, 0.065664410591, 0.061260804534, -0.054921574891, -0.056225884706, -0.019220694900, -0.013372331858, 0.007488407195, 0.028458796442, 0.011968359351, 0.021982975304, -0.071530871093, 0.046430550516, -0.063741251826, -0.037628252059, -0.038436487317, -0.010328333825, -0.064448162913, 0.062836438417, 0.063440188766, -0.037359263748, -0.028820496053, 0.045907802880, 0.016152039170, 0.010210573673, -0.047192245722, 0.026789709926, -0.033347990364, -0.063631355762, 0.065084069967, 0.065906643867, -0.065791308880, 0.049703948200, 0.021322026849, -0.037425130606, 0.048002026975, 0.009756170213, 0.013357914984, 0.027158394456, 0.031771168113, 0.020682655275, -0.021687127650, -0.036983512342, 0.034544348717, 0.068043157458, 0.044574446976, 0.044886209071, -0.056131508201, 0.053171455860, 0.068875133991, -0.013559158891, 0.006505958736, -0.001336261630, 0.028601385653, 0.050856083632, 0.017519377172, 0.040029399097, 0.008399963379, -0.064492553473, -0.042604885995, 0.001357413828, -0.070658266544, -0.020232602954, -0.050867989659, -0.034188006073, 0.039932630956, -0.035292122513, -0.068200081587, -0.029268942773, -0.049847722054, -0.058193191886, 0.054582342505, -0.010810904205, 0.063155576587, 0.055051967502, -0.027283243835, -0.044024515897, -0.033923614770, 0.072151288390, -0.070173069835, 0.069426655769, 0.039514996111, 0.069636866450, -0.059298738837, 0.001366011798, 0.056657865644, -0.040106847882, 0.010142490268, 0.001839846373, -0.041828345507, -0.010624200106, 0.029298610985, -0.004096664488, 0.036810740829, -0.060626968741, -0.000118002295, -0.023755125701, 0.022715926170, 0.017168574035, 0.061323121190, -0.027584493160, -0.032302051783, -0.045464362949, -0.036030191928, -0.002343371511, -0.047235414386, 0.035250514746, 0.039055086672, -0.069809928536, -0.015724446625, 0.069781452417, 0.059775680304, -0.025070037693, 0.023523457348, 0.046717777848, 0.045993976295, 0.062404513359, -0.019645795226, -0.034994091839, -0.051178477705, 0.026754923165, -0.023432333022, 0.057606026530, -0.055253982544, -0.010266289115, -0.007543601096, 0.001083828509, -0.004038780928, -0.055797033012, 0.009647406638, -0.020587895066, -0.053486868739, -0.042139127851, 0.067241936922, -0.022759065032, 0.025092132390, 0.026035383344, 0.007945872843, 0.015574298799, -0.008797571063, -0.069169141352, -0.004054784775, -0.027104657143, -0.028901778162, -0.016262486577, -0.013232324272, -0.036920741200, -0.020375896245, -0.058633416891, -0.030668254942, -0.014584090561, 0.040344811976, 0.012716889381, 0.021385133266, 0.067050591111, -0.034095574170, 0.035532049835, 0.059929430485, 0.009570084512, 0.003951959312, 0.032393552363, -0.027303375304, -0.068301320076, 0.014261968434, -0.070426240563, 0.052324168384, -0.004666954279, 0.018602088094, -0.028693065047, 0.041028544307, -0.067287266254, -0.035041287541, -0.065777406096, 0.005885668099, -0.061975620687, -0.026783604175, 0.005999676883, 0.071508899331, 0.071135386825, 0.023934982717, -0.060799118131, -0.033432956785, 0.003873772919, -0.026614550501, -0.039162594825, 0.015339314938, -0.013031180948, 0.002639129758, -0.059106957167, -0.051221460104, 0.046808212996, -0.013487581164, 0.023372441530, -0.071492657065, -0.059173114598, -0.010063186288, -0.002428971231, 0.012848556042, 0.011900000274, 0.055798232555, -0.011396832764, -0.061927650124, 0.008099183440, -0.011692646891, 0.054808557034, -0.038640141487, 0.006461806595, -0.036865871400, 0.012341462076, 0.012689396739, -0.043696045876, -0.030755404383, 0.017839610577, -0.061847157776, -0.053613267839, -0.063604928553, -0.012698616832, 0.045541875064, -0.041990809143, 0.021069005132, 0.004358425736, -0.031135991216, -0.005725681782, 0.053905859590, -0.047553371638, -0.022774774581, -0.015817254782, -0.028231848031, 0.061570346355, 0.069150432944, -0.016498286277, -0.058001443744, 0.062877103686, 0.008234299719, -0.048679031432, -0.028746869415, 0.024245165288, -0.049337655306, 0.040487192571, 0.008301354945, 0.029143646359, 0.007228814065, 0.003222838044, 0.066138356924, -0.031323745847, -0.009215839207, -0.062618106604, 0.057992115617, -0.072032578290, -0.041190452874, 0.034514740109, 0.024658083916, -0.039939530194, 0.069121897221, 0.008130423725, -0.003399960697, 0.054901406169, 0.049642123282, 0.059802100062, -0.058309439570, -0.005540795624, -0.002785131335, 0.053670465946, 0.035702183843, 0.018458142877, -0.004972659051, 0.070848912001, -0.036873631179, 0.013619057834, -0.067552037537, -0.019211523235, -0.049189802259, 0.047915063798, -0.051822308451, -0.010475259274, 0.018507488072, 0.055888384581, 0.003610916436, 0.022955305874, 0.054666906595, 0.036250792444, 0.040962174535, -0.069540917873, 0.019004717469, 0.000206388533, 0.063198104501, 0.032835930586, 0.069329500198, 0.033418111503, -0.002261780202, -0.060552980751, 0.012491673231, -0.042386658490, -0.050259798765, 0.011920787394, -0.031491767615, -0.042978659272, 0.042947053909, -0.011786490679, -0.038957804441, 0.024908348918, -0.052217092365, 0.047239646316, 0.060100033879, -0.001713514328, -0.028252735734, -0.052650175989, -0.026600252837, 0.031382955611, 0.036162763834, 0.035633549094, 0.058458343148, 0.017533354461, -0.057875908911, -0.066310368478, 0.013113826513, -0.010538168252, 0.009069360793, -0.066816046834, -0.024390745908, 0.048677220941, 0.072154775262, 0.051000237465, 0.071060478687, 0.030309773982, 0.071071133018, -0.058361817151, -0.043613351882, 0.037496604025, -0.008992381394, -0.026705935597, -0.007400535047, -0.046629440039, 0.023120798171, -0.018921148032, 0.038213834167, 0.048919953406, 0.064224049449, -0.059652499855, -0.022594917566, -0.018802855164, -0.054479662329, 0.066699594259, 0.002771139145, 0.001140557230, -0.014722585678, 0.043510854244, 0.029359139502, 0.025760911405, -0.046537026763, 0.026744283736, 0.067674130201, -0.028296198696, -0.032036382705, -0.019830591977, -0.001991882920, -0.013409808278, 0.057546779513, -0.028247833252, 0.036744497716, 0.039753928781, -0.064571514726, -0.032603919506, 0.022723175585, 0.043919570744, -0.056146390736, 0.045864149928, 0.027745679021, -0.057952478528, -0.036158345640, 0.039529711008, -0.037812326103, 0.060627311468, -0.056159242988, 0.018321268260, -0.046034462750, 0.010213017464, -0.042555175722, -0.007800824940, 0.000531762838, 0.018560349941, 0.042748332024, 0.050126895308, -0.068250410259, -0.010338280350, 0.057525709271, -0.037045538425, -0.037585459650, 0.005613669753, 0.006375014782, 0.057813927531, 0.007364690304, -0.070807501674, 0.000193603337, -0.064823396504, -0.057927820832, 0.052768521011, 0.029166169465, -0.032216656953, 0.034081272781, -0.054064884782, 0.068388313055, 0.056329086423, 0.063576444983, 0.020611882210, 0.046746253967, -0.061629910022, 0.048289306462, 0.001432985067, -0.040146078914, -0.063127070665, 0.032011076808, -0.066559195518, 0.034885413945, -0.015954375267, 0.050386264920, 0.010529838502, 0.059948518872, 0.052655681968, 0.059161975980, -0.047033566982, 0.004477113485, 0.030281417072, 0.025416590273, 0.037239193916, -0.016889490187, -0.022779818624, 0.007426030934, -0.050050292164, 0.000880397856, 0.067041814327, -0.020322367549, 0.034935489297, 0.031373992562, -0.065811716020, -0.051993802190, 0.014874294400, 0.043809920549, 0.018601767719, 0.001769453287, 0.012765415013, -0.044738478959, 0.006673492491, 0.034402556717, -0.062493737787, 0.045249335468, -0.009479358792, 0.061203435063, 0.028816282749, -0.000293970108, 0.008959896863, 0.052847877145, -0.052661530674, -0.061563372612, 0.056697592139, 0.003587670624, 0.003153979778, -0.035156123340, -0.004024609923, 0.023387014866, 0.044682592154, 0.045157678425, 0.021259926260, 0.071552067995, 0.006175592542, 0.061946690083, -0.034892626107, 0.050569012761, -0.043954826891, -0.047589778900, -0.061270486563, 0.049219273031, -0.068711742759, -0.060247913003, 0.010943993926, 0.040130674839, -0.043664127588, 0.022874779999, 0.056780979037, -0.070203177631, 0.040772184730, 0.004004403949, -0.041372891515, -0.021472975612, 0.002241611481, -0.050587907434, -0.012569345534, 0.047479525208, 0.014835961163, 0.069000467658, -0.005199164152, -0.045542497188, 0.019838660955, -0.035083994269, -0.044711530209, 0.018966779113, -0.022080775350, -0.042648229748, 0.030818238854, 0.004179909825, 0.012907810509, -0.031130794436, 0.022641509771, -0.061106786132, -0.051426682621, 0.000029541552, -0.011736452579, 0.059065297246, 0.009864844382, 0.020387887955, 0.029643513262, -0.030769083649, 0.018137775362, -0.008240029216, 0.004998862743, 0.021886065602, -0.020489491522, 0.056435689330, 0.041037417948, -0.061285130680, 0.012683145702, -0.016668006778, -0.044987574220, 0.001129098237, -0.057657420635, 0.061395972967, 0.058448135853, -0.017259977758, -0.059501051903, 0.035984888673, -0.028395686299, -0.015201836824, 0.030609995127, -0.014973696321, -0.035474855453, -0.008299134672, 0.056215658784, 0.014898143709, 0.004237912595, -0.061031248420, 0.032588437200, -0.047152534127, 0.024909161031, -0.065535224974, 0.037508405745, -0.071468017995, -0.017025865614, -0.030484043062, -0.020131599158, -0.030295133591, 0.024590305984, -0.064511753619, -0.062382638454, -0.038663454354, 0.057869404554, 0.014669314027, 0.058944672346, -0.067992776632, -0.056596219540, -0.042040549219, 0.015981853008, -0.017053741962, 0.034383818507, 0.051771856844, 0.018218219280, -0.066504649818, -0.050874114037, 0.006429024041, 0.041350916028, 0.010451667011, -0.050744570792, 0.005775496364, 0.043883197010, -0.063865810633, 0.003048829734, 0.041219018400, 0.062465041876, 0.008950032294, 0.062127754092, 0.035619437695, 0.043874166906, -0.032932132483, 0.018841497600, 0.031899660826, -0.045571472496, 0.018958002329, -0.062103755772, 0.023964256048, -0.023582234979, -0.009939420968, 0.045660138130, 0.000023059547, -0.034691810608, -0.050181351602, -0.050050944090, -0.060270778835, 0.016948938370, -0.029350589961, 0.022386223078, 0.024411477149, 0.012122012675, 0.056893333793, 0.058982044458, 0.028401881456, 0.023098327219, -0.011462718248, -0.068214483559, 0.023960039020, -0.051202945411, -0.008219793439, -0.032531790435, -0.030405528843, -0.017870649695, 0.022362306714, -0.042184345424, -0.003368973732, -0.015156652778, -0.001799188554, -0.033126872033, 0.029469110072, -0.065714977682, -0.061269141734, 0.065720185637, 0.071082055569, 0.014227300882, 0.061741739511, 0.007966175675, 0.030861273408, 0.013690687716, 0.014238588512, -0.011734664440, 0.066456615925, 0.000290356576, 0.006807304919, 0.068868026137, -0.063393391669, -0.051692504436, -0.004649937153, -0.000065416098, -0.019490439445, 0.012540459633, -0.064418807626, 0.064822301269, 0.010930985212, 0.069672510028, -0.012423109263, -0.022899504751, 0.028527796268, 0.010780654848, 0.068324178457, 0.050026580691, 0.055623352528, 0.069585382938, 0.060373768210, 0.047798544168, 0.047782510519, 0.031599290669, 0.002733975649, -0.015830643475, 0.009458400309, -0.023213762790, -0.027943760157, -0.012430749834, -0.056138098240, -0.049749284983, -0.030634202063, 0.020483799279, 0.005985394120, -0.009588412941, -0.049271963537, -0.045792266726, -0.028828289360, -0.045700278133, -0.055825218558, -0.040633723140, -0.001014210284, 0.016240224242, -0.009921405464, 0.002796500921, 0.016939058900, 0.066153362393, 0.066885516047, 0.066976770759, -0.034403499216, 0.060544788837, -0.053495027125, -0.002719379961, 0.067765355110, -0.051722425967, -0.011654414237, 0.021610900760, 0.034569814801, 0.026145078242, 0.017602570355, -0.061171308160, 0.046146750450, -0.026727922261, 0.026038892567, -0.014484792948, -0.032417539507, 0.034648932517, -0.063070394099, 0.022576473653, -0.001413121819, 0.046356596053, 0.045510753989, 0.041301190853, -0.027128178626, 0.011181309819, 0.012663103640, 0.027347110212, -0.021043796092, 0.024059109390, 0.021978773177, 0.040706261992, -0.068438269198, -0.026544280350, 0.068698644638, 0.047176308930, -0.069650337100, 0.050933085382, 0.048337876797, -0.032243635505, -0.044828243554, 0.026715502143, 0.031872563064, -0.057327181101, 0.054138436913, -0.027583509684, -0.026706311852, 0.055412009358, 0.010777287185, 0.065831333399, 0.067047357559, -0.019213572145, 0.018296867609, 0.051675453782, -0.050206869841, 0.015280038118, -0.023215670139, 0.000266231596, -0.024526331574, 0.063571497798, 0.026698589325, 0.017774567008, 0.014939486980, -0.049086496234, -0.014534674585, 0.007160916924, -0.043600827456, 0.050348356366, -0.020632855594, -0.069352492690, 0.049331888556, 0.057338640094, 0.020328186452, 0.033756971359, -0.010501071811, -0.032878965139, 0.008413091302, -0.046993628144, -0.005876474082, -0.030841916800, -0.053374271840, 0.033152818680, 0.051209226251, 0.007028102875, 0.030373699963, -0.023489821702, -0.048322752118, -0.018505133688, -0.044967200607, -0.016454562545, 0.022111058235, 0.002564266324, -0.012516967952, 0.030123949051, 0.000989556313, 0.068074315786, -0.049569681287, 0.050777420402, -0.014461617917, 0.016848295927, 0.025586590171, -0.025956925005, 0.022426709533, 0.062760248780, -0.005108781159, -0.042451269925, -0.057914346457, -0.011300135404, 0.068159684539, 0.007069684565, -0.068876549602, 0.015629634261, -0.057059876621, 0.025672040880, 0.067040652037, 0.026456765831, 0.064849883318, -0.017290655524, -0.070588804781, -0.034278959036, 0.002237707376, -0.034615997225, 0.028347425163, 0.013925895095, 0.009655550122, 0.057679846883, 0.034041255713, 0.068401306868, -0.021966092288, -0.048727378249, 0.051434479654, 0.049499273300, -0.055500723422, -0.037725947797, -0.065630860627, 0.071787074208, -0.053304344416, -0.071013048291, -0.028039187193, -0.028062328696, 0.051923327148, 0.058767989278, -0.040537592024, -0.032517321408, 0.029820546508, -0.055082745850, -0.053284108639, 0.009049244225, 0.028484575450, -0.051415342838, 0.028757981956, -0.064699232578, 0.045514829457, -0.019363954663, -0.018357794732, -0.019362404943, 0.059922963381, 0.000074833632, -0.025182049721, 0.030767999589, -0.068145416677, 0.072010546923, -0.067940160632, 0.054792657495, 0.045452572405, 0.032666534185, 0.032553695142, -0.069883912802, 0.016675181687, 0.056302338839, -0.003304161131, 0.014348000288, -0.019117712975, -0.046055175364, 0.011289641261, -0.040393367410, 0.058700487018, -0.041636116803, 0.051735416055, -0.065090045333, 0.015902273357, -0.026984486729, -0.061770677567, -0.063262447715, -0.001097626984, -0.067868217826, -0.066224649549, 0.036062404513, 0.048616796732, 0.001909755170, -0.037965703756, -0.043404310942, -0.069850049913, -0.036290109158, -0.058370128274, 0.025210663676, 0.014013528824, -0.012599747628, -0.000867336988, -0.071704588830, 0.037658758461, -0.026083890349, -0.025211870670, 0.060474500060, 0.067501753569, -0.062073972076, -0.020162589848, 0.051960490644, -0.053930178285, -0.061042036861, 0.000688463449, 0.032928466797, -0.036299213767, -0.031235031784, -0.020883414894, -0.014317668974, 0.015162073076, -0.057401597500, -0.059546492994, -0.056134451181, -0.017545171082, -0.035626545548, -0.040959388018, 0.034493423998, 0.031042851508, -0.006612926722, 0.063056081533, 0.064660772681, 0.037819586694, 0.009204968810, 0.007470168173, 0.053848013282, 0.027089513838, -0.014247708023, -0.054057143629, 0.070342332125, 0.003629617393, -0.069883413613, -0.027290709317, 0.070287868381, 0.029620818794, 0.039549738169, 0.008321918547, -0.014816429466, -0.054056454450, 0.038905173540, -0.037447102368, -0.019425380975, 0.048353120685, -0.024096123874, 0.030886776745, 0.061706483364, 0.045339927077, 0.062090799212, -0.064895905554, 0.026315435767, 0.001181647182, 0.033474683762, 0.061057120562, -0.012175027281, 0.057854190469, 0.045508980751, 0.042649984360, -0.046907015145, 0.069111168385, -0.069824382663, -0.048001322895, 0.000001601875, 0.037066996098, -0.018233995885, 0.003948539495, 0.008923828602, 0.042638920248, -0.020560022444, 0.052694641054, -0.069154739380, -0.057959083468, 0.042552046478, -0.053192161024, -0.022749293596, -0.066801667213, 0.008288636804, 0.005704946816, 0.068008795381, 0.054445117712, -0.033439528197, 0.010304108262, -0.028819926083, -0.033469915390, 0.025001317263, -0.022624392062, -0.041152909398, -0.069953516126, 0.031070247293, -0.036120750010, 0.035205796361, -0.058758907020, 0.037676081061, 0.030868105590, -0.025511004031, -0.033104401082, -0.037033304572, -0.053811520338, 0.032972015440, 0.069592520595, 0.070385783911, -0.071786150336, -0.067785337567, 0.024932973087, -0.063925825059, -0.053164303303, -0.010826908052, 0.041920676827, 0.060283988714, 0.060252159834, 0.066477313638, 0.025026470423, 0.022787131369, -0.037625361234, -0.035834435374, -0.068722344935, -0.013383653015, -0.000468119979, 0.015469223261, -0.034531001002, 0.000204153359, -0.060057520866, 0.038876779377, 0.070632070303, 0.049963138998, -0.001078441739, 0.070205032825, -0.006596527994, -0.039819844067, -0.059353746474, 0.061165779829, 0.039786443114, 0.063854351640, 0.065403372049, 0.062099128962, 0.011702112854, -0.028626251966, 0.055192455649, -0.041006963700, -0.069254420698, 0.047290816903, 0.034050390124, -0.029216345400, -0.056762605906, 0.012382984161, 0.031060211360, -0.054985925555, -0.030512757599, 0.020379289985, -0.014060106128, 0.015960708261, 0.002955898643, -0.057362418622, 0.034135527909, 0.072097614408, -0.012361630797, -0.056572455913, -0.051932930946, -0.029163639992, 0.058429926634, -0.019901860505, 0.035391934216, 0.011569760740, 0.008990056813, 0.057746753097, -0.068807914853, 0.018462941051, -0.015760783106, -0.061425738037, 0.017471253872, -0.017188932747, 0.042262583971, 0.046426385641, 0.043015979230, 0.011689186096, -0.013047941029, -0.006728604436, -0.019720025361, 0.058301299810, 0.002678036690, -0.038960900158, -0.003655754030, -0.044611837715, 0.061724722385, 0.043843232095, -0.029683515429, 0.048298634589, -0.006962217391, -0.062374085188, 0.063767135143, -0.029178179801, 0.044294692576, 0.038637541234, 0.026505462825, -0.015929184854, -0.056849565357, 0.060417249799, 0.051609188318, 0.053017258644, 0.036339491606, -0.017828989774, 0.003298342228, -0.008185714483, -0.007003135979, 0.044551908970, -0.060817647725, -0.012739602476, 0.056210294366, -0.020588688552, 0.029136560857, 0.015965282917, 0.049677789211, -0.001717060804, 0.026958011091, 0.046261362731, 0.027779370546, 0.053124159575, -0.034417249262, 0.031950108707, -0.044051699340, 0.042432285845, -0.002773411572, -0.008365258574, -0.016292598099, 0.022637225688, 0.048504024744, 0.026706054807, 0.050457894802, 0.037371754646, -0.048293024302, 0.063934028149, -0.037807419896, -0.066959105432, -0.020954959095, 0.041844516993, -0.045221440494, -0.017352994531, 0.021257326007, 0.027750708163, 0.031203284860, 0.030221216381, -0.048911694437, -0.067993551493, 0.063307508826, -0.000481195748, 0.062590673566, -0.051851026714, 0.021508991718, 0.050385229290, -0.031796682626, 0.071343913674, -0.063298031688, 0.061297222972, -0.005452044308, 0.002008222044, 0.031327188015, -0.015158507973, 0.038313493133, -0.034093406051, -0.051421847194, -0.011665616184, -0.048767264932, 0.019679278135, -0.024790193886, -0.050569027662, -0.021141838282, 0.062290564179, 0.065195575356, -0.036151718348, 0.037016823888, -0.011738810688, 0.013386875391, 0.053485289216, 0.028873383999, -0.021169833839, 0.023168183863, 0.032568506896, 0.012188479304, 0.066937252879, 0.070785984397, -0.033674035221, -0.065478272736, -0.029296904802, -0.008014097810, -0.034138623625, -0.013048749417, 0.014545224607, -0.014483831823, -0.064871951938, 0.063299581409, -0.064612396061, -0.050594963133, -0.047920092940, 0.016298033297, 0.014303475618, 0.003481678665, 0.023802049458, -0.034956339747, 0.041833005846, -0.030667394400, 0.053715392947, 0.045858614147, -0.024029482156, -0.004775732756, 0.063017636538, -0.011923778802, 0.067897364497, -0.025441903621, -0.000234521925, 0.039423599839, 0.037301570177, 0.002048783004, -0.030198555440, -0.043051924556, -0.025265622884, -0.059630993754, 0.044394828379, -0.012726921588, 0.043250918388, 0.050460353494, 0.022656567395, 0.053912982345, -0.004446402192, 0.037824079394, -0.063102796674, 0.000399395823, 0.070117220283, -0.005728796124, -0.010351769626, 0.006430245936, 0.058529734612, -0.011192146689, -0.052766971290, -0.066988632083, -0.008416824043, -0.057608608156, -0.062618240714, -0.052610859275, 0.000584654510, -0.059001754969, -0.001002475619, 0.019082203507, -0.046260103583, 0.055000856519, -0.067446373403, 0.070830792189, 0.001097664237, 0.020591184497, -0.013089407235, -0.032451730222, -0.068916916847, -0.050471678376, 0.012960977852, 0.059507399797, 0.066739186645, 0.059426382184, -0.061043363065, 0.043066255748, -0.036681797355, -0.029265262187, 0.070994481444, -0.065071165562, 0.034718275070, 0.018432043493, -0.021374005824, 0.031851813197, -0.029790177941, -0.051831565797, 0.024677321315, -0.065807208419, -0.030168630183, -0.039737235755, 0.067433461547, 0.035547859967, -0.004109449685, -0.014240790159, 0.067712903023, 0.071222350001, 0.044894434512, 0.019432574511, -0.064053289592, 0.032890178263, 0.043426677585, -0.029809191823, -0.051203258336, 0.046108417213, 0.006903007627, -0.068652197719, -0.016595482826, -0.015439625829, 0.066508293152, 0.070372343063, -0.006401285529, 0.008162066340, 0.003746844828, -0.025794237852, -0.020468983799, 0.009047284722, 0.063407048583, -0.043778449297, -0.044569235295, 0.059392392635, 0.050535358489, 0.028542436659, -0.028695609421, 0.043642446399, -0.017660938203, 0.051146134734, -0.010010670871, -0.046072866768, -0.052902318537, 0.062949806452, 0.069505125284, 0.071745157242, 0.027543663979, 0.060323715210, -0.038129713386, -0.008917428553, -0.040824644268, -0.044475957751, -0.015686865896, 0.070160493255, -0.018409397453, 0.057396233082, -0.026749018580, -0.050204202533, 0.003589354455, 0.054957881570, 0.055572345853, 0.014004476368, 0.069981351495, -0.032486520708, -0.004287764430, 0.024803012609, 0.017134748399, 0.013248018920, -0.012106183916, -0.035528108478, -0.030593011528, -0.003547921777, 0.063313826919, 0.072096467018, 0.069301441312, 0.037944242358, -0.003138601780, -0.056005589664, -0.052545405924, 0.013396695256, -0.063326112926, 0.060525029898, -0.029933281243, 0.025278545916, 0.069733902812, 0.007699854672, -0.047468319535, 0.023393943906, -0.035126958042, 0.021968156099, -0.043557465076, 0.027923785150, -0.027594745159, -0.000842869282, -0.014244422317, -0.020441383123, -0.000705011189, -0.051896296442, 0.050654284656, -0.069217853248, 0.055362120271, 0.064290925860, 0.062823101878, -0.047356322408, -0.055667314678, 0.061402559280, 0.034589566290, -0.035964135081, 0.044937506318, 0.009992502630, -0.019706532359, 0.061000168324, 0.029537670314, 0.046225883067, 0.035181351006, -0.041011851281, -0.018635679036, 0.047251313925, 0.012573629618, 0.054460108280, -0.013700697571, 0.026327408850, -0.058541778475, 0.001686036587, -0.026403877884, 0.005522631109, 0.052362985909, -0.025240518153, 0.037514433265, -0.043590173125, -0.002508841455, -0.020407419652, -0.038154799491, -0.054393649101, 0.054997757077, 0.055916845798, 0.018803976476, -0.018570914865, 0.068581715226, 0.069031149149, -0.071218751371, -0.018713399768, 0.043271705508, -0.003320969641, 0.066574633121, -0.054041810334, 0.001458100975, -0.038139037788, -0.046845793724, 0.032908938825, -0.064199268818, -0.017310943455, -0.006562098861, -0.064118862152, -0.054058071226, 0.023317083716, 0.031172297895, 0.042767398059, -0.026663485914, 0.008516125381, 0.041944622993, -0.053554750979, -0.026186678559, 0.066304162145, -0.035435367376, -0.054064266384, -0.067816965282, -0.008301801980, 0.014254488051, -0.043590828776, 0.067737966776, -0.008405335248, -0.057830620557, -0.043694961816, -0.052187737077, -0.034943040460, 0.069785669446, -0.004727587104, -0.056851077825, 0.042059011757, 0.071654260159, -0.032420326024, -0.035203061998, 0.035960540175, 0.013906404376, 0.017025783658, 0.049409203231, -0.014715135098, 0.046533741057, -0.008818544447, 0.059448972344, 0.040021471679, -0.056261345744, 0.029889270663, -0.032909933478, 0.050951115787, 0.001314342022, 0.068480908871, -0.004014298320, -0.044538728893, -0.033386293799, -0.014256499708, 0.054581344128, -0.008937716484, -0.002459563315, 0.059201613069, -0.053683418781, 0.036568872631, 0.071614995599, -0.016553018242, 0.045944251120, -0.028577558696, -0.029615551233, 0.045236892998, -0.053575240076, -0.011720366776, -0.009284801781, -0.011031817645, 0.017723947763, -0.025719750673, 0.053930148482, 0.061001911759, -0.053832650185, -0.031922340393, 0.029349245131, -0.005835317075, -0.008366294205, 0.012071169913, -0.042442113161, -0.011753868312, 0.068959012628, 0.000280514359, -0.043678116053, -0.032973736525, 0.042617566884, 0.020344130695, -0.049570545554, -0.016056839377, -0.043672353029, 0.041498363018, 0.052113801241, 0.058897361159, -0.031782262027, -0.020257569849, -0.035814389586, 0.050408236682, 0.046202413738, -0.018298227340, 0.029907986522, -0.009145520627, 0.055922612548, 0.009790495038, 0.006154514849, 0.033997260034, 0.057077422738, -0.017878063023, -0.001299783587, -0.032736100256, -0.016834996641, -0.053866222501, 0.035293601453, -0.059965383261, 0.032909363508, 0.050185911357, 0.028251223266, 0.004908151925, 0.047088369727, -0.061316184700, 0.028347373009, -0.026616614312, -0.036348197609, 0.042101509869, 0.035580709577, 0.034275382757, -0.051529578865, -0.005955368280, -0.004072643816, 0.028870120645, 0.019418790936, 0.025846116245, 0.011368773878, -0.028426520526, 0.035141602159, 0.055844008923, 0.031967282295, -0.002236343920, 0.024068146944, -0.044874940068, 0.040131092072, 0.048050053418, -0.069062925875, -0.061104081571, -0.046579763293, -0.038834210485, 0.001516759396, -0.057132937014, 0.039890460670, -0.011739552021, -0.037405360490, -0.016738004982, -0.070358946919, -0.017908345908, -0.050634827465, -0.021991215646, -0.032277807593, -0.001744709909, -0.031713917851, -0.041902676225, -0.029804974794, 0.026667684317, -0.032336153090, -0.010909996927, 0.058662444353, -0.011086001992, 0.048933997750, -0.050973847508, 0.010321490467, 0.064338326454, -0.029726222157, 0.024561315775, -0.007082968950, -0.053197957575, 0.072156965733, 0.036228425801, 0.006744295359, 0.046953454614, 0.060891777277, -0.033043283969, 0.046809040010, 0.067104294896, 0.034731127322, -0.053552187979, 0.064497530460, 0.057544231415, -0.014266736805, -0.046003937721, 0.038720600307, -0.071608938277, -0.041969195008, 0.037279598415, -0.043793004006, 0.017255932093, -0.053465262055, -0.028294306248, -0.034870103002, 0.019021563232, -0.020027793944, 0.037896737456, -0.069658115506, -0.047134086490, -0.002284780145, -0.021056186408, -0.071549229324, 0.055108919740, -0.032506257296, -0.038440600038, 0.027628764510, -0.029218874872, -0.053564213216, 0.007491126657, 0.051152773201, -0.017182257026, 0.052948907018, -0.053098317236, 0.045624881983, -0.017081856728, 0.050498738885, 0.015934258699, -0.060602534562, -0.055624917150, 0.069473385811, -0.027317687869, 0.047868795693, 0.052320435643, 0.007760263979, -0.004383362830, -0.005660034716, 0.003124073148, -0.009466655552, 0.015823915601, 0.041309073567, -0.071301147342, 0.019961759448, 0.014357708395, 0.000858582556, 0.031419657171, 0.058281347156, -0.036166138947, 0.009376823902, 0.070055618882, 0.029371030629, 0.034100323915, 0.002457469702, -0.065186798573, 0.015199974179, -0.001127034426, -0.025096826255, -0.010700542480, -0.063749790192, -0.037600185722, 0.045162357390, -0.036406066269, 0.016846716404, -0.022739589214, -0.012326702476, 0.060584962368, 0.048901058733, -0.034530777484, 0.015493415296, 0.062505677342, -0.041302070022, 0.048744015396, -0.018796745688, 0.024233236909, -0.055052481592, -0.003985069692, 0.060164138675, -0.034396171570, -0.071043349802, -0.040401455015, 0.024767190218, -0.070857122540, 0.018662661314, 0.065701752901, -0.031655453146, 0.042602561414, 0.031820856035, -0.012493208051, 0.045742936432, 0.043916389346, 0.051789239049, -0.005793489516, 0.066383555532, 0.000494033098, 0.043687716126, -0.028874367476, 0.021115630865, -0.067774355412, -0.047969751060, -0.047515552491, -0.062158163637, 0.066314250231, 0.041106022894, -0.015154361725, -0.021261923015, -0.041943281889, 0.004648700356, 0.059036523104, 0.056355074048, 0.065723910928, -0.030358657241, -0.019229248166, 0.041790559888, 0.050722979009, -0.065746761858, -0.037589758635, -0.054245069623, 0.066203832626, -0.036815643311, 0.029715962708, -0.056158609688, -0.010155566037, -0.003716632724, -0.028730109334, -0.071150355041, 0.047577463090, 0.014628328383, 0.047558411956, -0.001929268241, 0.015586435795, -0.062927268445, -0.019604567438, 0.001251198351, 0.018286921084, 0.020683392882, 0.001516468823, -0.066443391144, 0.020594641566, -0.016022354364, -0.018477980047, -0.009902771562, 0.021995484829, -0.015360202640, 0.021861806512, -0.012461736798, -0.003367446363, -0.017385911196, -0.034913446754, 0.045838944614, 0.033275417984, 0.030322149396, 0.007721245289, -0.005220979452, -0.040947016329, -0.058186724782, -0.047740131617, -0.048639729619, -0.040768586099, 0.019027382135, -0.029935520142, 0.000535219908, -0.007684074342, 0.070113494992, -0.015985656530, 0.050152927637, 0.009593017399, 0.004557318985, -0.038459286094, 0.067618042231, 0.009024314582, -0.012245554477, 0.055130213499, -0.021930959076, -0.050249747932, -0.003745451570, 0.050617314875, 0.063025712967, -0.010272104293, 0.054752796888, -0.011842358857, -0.008053138852, 0.036459319293, -0.055801592767, 0.014670759439, -0.001149125397, 0.020085729659, 0.030754767358, -0.027390386909, -0.050747185946, -0.064819917083, -0.016018640250, -0.034317210317, -0.002622976899, -0.043004520237, -0.070128895342, -0.033104695380, 0.037127941847, -0.047998808324, 0.050064951181, -0.062002684921, -0.067514494061, -0.062810510397, 0.032143048942, 0.071217402816, -0.056313291192, 0.046731680632, 0.062968686223, 0.009474396706, -0.007116593421, -0.034242432564, -0.022696521133, -0.058007106185, 0.068742439151, -0.006585039198, 0.057936742902, 0.030348420143, -0.041129887104, -0.051895711571, -0.057616796345, -0.026664037257, -0.027446478605, -0.014269575477, -0.060114543885, 0.048190131783, 0.051327176392, -0.000664576888, 0.020253747702, -0.030499733984, -0.014599129558, 0.067979127169, 0.051062732935, 0.025223642588, 0.030828721821, 0.061867862940, 0.053818404675, -0.065471991897, -0.029097035527, 0.009668037295, 0.029228903353, 0.007540509105, 0.047818094492, 0.013747997582, 0.024097874761, -0.041573658586, -0.009963437915, 0.006404355168, 0.006421297789, 0.008548729122, 0.067347779870, 0.028537862003, -0.047354757786, -0.017185732722, -0.032319083810, -0.030409641564, -0.020379628986, -0.068242579699, -0.043699815869, 0.048831067979, -0.045825384557, -0.038821786642, 0.069754570723, -0.046518512070, 0.070279717445, -0.068888954818, 0.061946853995, 0.050015792251, -0.045012041926, -0.000357344747, -0.048371035606, 0.000345692039, -0.030712421983, -0.070682033896, -0.020071860403, -0.046662993729, -0.047216590494, 0.025767587125, -0.054277144372, 0.028336167336, 0.010430902243, -0.037658017129, 0.042395792902, -0.061028495431, 0.017977170646, -0.071399345994, -0.050875112414, -0.071572445333, 0.051710672677, 0.005843870342, 0.054805517197, 0.051923483610, -0.062281411141, 0.012930832803, 0.026344634593, 0.027453429997, -0.021973699331, -0.069516420364, -0.025082081556, 0.014748841524, -0.049331512302, -0.045156903565, -0.024542972445, 0.031780473888, -0.052578408271, 0.060889139771, 0.002387784421, 0.041335523129, 0.024992331862, -0.006891272962, -0.057543516159, 0.041696667671, 0.015776492655, 0.016186572611, -0.002886474133, -0.039062988013, -0.054151106626, -0.005061499774, -0.014703813940, -0.020097926259, 0.008641906083, 0.022236116230, 0.009839743376, -0.058914192021, 0.021879203618, 0.045267179608, -0.066279105842, -0.062747225165, 0.040559358895, 0.016749821603, 0.056459009647, 0.041600614786, -0.032984767109, 0.067402884364, 0.017385579646, -0.022027090192, 0.038860574365, -0.044272013009, 0.020345903933, 0.046148553491, 0.034822747111, 0.063894167542, -0.004923500121, -0.021800395101, -0.033299230039, -0.037293501198, -0.060409359634, -0.039775915444, -0.010482609272, 0.036766983569, 0.022346474230, 0.063922420144, 0.023421496153, 0.024259753525, -0.015766426921, -0.000228054821, 0.003294624388, 0.067527338862, 0.014285132289, 0.013844013214, -0.061976395547, 0.039224162698, -0.027282707393, -0.044469110668, -0.046589314938, -0.055067636073, -0.048548124731, 0.022415503860, -0.007828198373, -0.039114125073, -0.009115353227, -0.016936790198, -0.064855106175, -0.016321815550, -0.039820548147, -0.069088086486, -0.003189407289, -0.025035418570, 0.066577628255, -0.035243447870, 0.018822140992, -0.069247171283, -0.026172656566, 0.049345262349, 0.045000113547, -0.036661647260, -0.069256864488, 0.015529356897, 0.030799642205, -0.064108319581, -0.052937641740, 0.016761973500, 0.061665505171, 0.052719153464, -0.036674000323, -0.039445724338, -0.069929011166, 0.064544409513, 0.042663924396, -0.012111157179, 0.053551107645, 0.014792837203, 0.047712683678, 0.033087655902, 0.001735880971, -0.063082888722, -0.044721975923, -0.036808434874, -0.013850342482, 0.016492880881, -0.056331411004, 0.016007199883, 0.055633828044, -0.003758370876, -0.020092885941, -0.002976201475, 0.024757809937, 0.058892771602, -0.064459532499, 0.026802241802, 0.016673050821, 0.015592969954, 0.064351275563, 0.027129523456, 0.059876635671, 0.038078024983, -0.043279275298, 0.045919023454, 0.004469685256, 0.015431642532, 0.057043492794, 0.063587158918, 0.047208055854, 0.063404724002, 0.054772153497, -0.017276030034, 0.023374177516, 0.048255629838, -0.027935724705, -0.016619846225, 0.023219645023, -0.039515998214, -0.048128820956, 0.049571767449, -0.067490540445, -0.054445780814, -0.002442322671, 0.049559861422, 0.042735226452, 0.003950685263, -0.012769266963, 0.007776699960, 0.061261832714, 0.003235593438, -0.010407157242, -0.051680289209, -0.072073541582, 0.047500133514, 0.030888892710, 0.053967699409, 0.020571105182, -0.031459521502, -0.070819340646, -0.053061287850, -0.057967085391, -0.035695321858, -0.049487814307, -0.049138922244, 0.006060153246, -0.054444544017, -0.066149525344, 0.012161381543, -0.017387717962, 0.064254403114, 0.037602096796, -0.023831799626, 0.042363807559, 0.047640539706, -0.042298354208, -0.034419380128, 0.062448039651, -0.031511608511, 0.037688717246, 0.046147041023, 0.017543420196, -0.029330972582, -0.012817718089, -0.013118658215, -0.006140798330, -0.067167475820, 0.047300919890, -0.049783974886, -0.052394058555, -0.057472728193, -0.037839975208, 0.026916936040, -0.057038627565, 0.014560036361, 0.063548907638, 0.064639553428, -0.030987381935, 0.014428563416, 0.047819018364, 0.027270354331, -0.000715151429, -0.048012882471, 0.015126027167, -0.034277860075, -0.044315475971, -0.042715176940, 0.008348345757, -0.060512889177, -0.005536288023, -0.055497489870, -0.011700354517, 0.024329029024, 0.010524094105, -0.014074403793, -0.048777468503, -0.029616188258, 0.013677507639, -0.041803050786, -0.022014133632, 0.039302021265, 0.048000052571, -0.001159675419, -0.050386540592, -0.034160647541, 0.041034445167, -0.042196784168, 0.032836928964, 0.016421198845, 0.008772790432, 0.044852092862, 0.015889488161, -0.070481866598, -0.038374438882, 0.002858564258, -0.008932590485, 0.005888730288, -0.004281617701, 0.047078937292, 0.056424796581, 0.056719839573, 0.054355800152, 0.024752222002, 0.011936768889, -0.051248166710, 0.027724102139, 0.038544282317, -0.006065078080, 0.009838022292, 0.057243168354, 0.063740372658, -0.007375530899, -0.015281070024, 0.037196762860, 0.035709753633, -0.034153457731, 0.071312621236, 0.013438127935, 0.054113477468, -0.028095711023, 0.047828897834, -0.069982334971, -0.047750797123, 0.048661082983, 0.046071112156, -0.024854648858, 0.024989463389, -0.064000621438, 0.018445424736, 0.071613863111, -0.024266172200, -0.065953046083, 0.032936692238, 0.064852938056, 0.068871840835, 0.013338834047, 0.018240533769, 0.020583488047, 0.018885001540, 0.033152237535, -0.052428144962, -0.019929822534, -0.011155359447, 0.037242189050, 0.064692869782, 0.018564887345, -0.019496358931, 0.049876801670, 0.037622399628, -0.039578922093, -0.017683167011, -0.052431173623, -0.071873523295, -0.007289461792, 0.064828664064, 0.069729194045, 0.017357967794, 0.003148421645, -0.032899852842, 0.001068226993, 0.003717921674, -0.030027832836, 0.034463703632, 0.061255186796, 0.031549870968, -0.052247032523, -0.016181979328, -0.052754960954, 0.012587599456, -0.069687418640, 0.026745527983, -0.054842114449, 0.003159053624, -0.057279206812, 0.001759693027, 0.044028662145, 0.020924299955, -0.031200069934, 0.021516010165, -0.012311525643, 0.056816354394, -0.056651346385, -0.033922735602, -0.061872880906, 0.069766536355, 0.008988887072, -0.052181113511, -0.038671299815, -0.050244361162, 0.059125825763, 0.007013127208, 0.051386043429, 0.016532026231, -0.039662301540, 0.011391103268, -0.068072028458, -0.038153663278, 0.015427276492, -0.023009452969, -0.067483708262, -0.063690803945, -0.014947231859, 0.008286386728, 0.048802897334, -0.070564955473, -0.003389276564, -0.000380709767, 0.042500734329, -0.065682820976, 0.060325980186, -0.039505276829, 0.067055463791, -0.009526602924, -0.014053240418, -0.055025137961, 0.054140269756, -0.002519167960, 0.036526151001, 0.068067848682, 0.061559051275, 0.016703248024, -0.000390738249, -0.008882932365, -0.058704394847, 0.037478692830, -0.027964562178, 0.033219411969, -0.052604444325, -0.017568212003, 0.046939760447, 0.054379433393, 0.070051640272, 0.025592282414, -0.034253425896, -0.003240220249, 0.001887880266, -0.035819273442, 0.028249777853, 0.015677727759, -0.015057887882, -0.051008723676, -0.050933960825, -0.059587769210, -0.015562687069, 0.024444691837, 0.024668559432, 0.042293980718, -0.041217725724, 0.063967168331, -0.065379783511, -0.013072427362, 0.037871636450, 0.013184301555, -0.013815809041, 0.000616438687, -0.039425715804, -0.009701680392, -0.019752305001, -0.056693933904, -0.059629462659, 0.052519597113, 0.063328906894, -0.059373430908, 0.011390998960, -0.053674250841, 0.036940254271, -0.070863299072, 0.045812621713, -0.004212513566, 0.009904921055, -0.057190835476, 0.043542549014, 0.032820083201, -0.014241892844, 0.072107583284, 0.008754588664, -0.072005890310, 0.032543711364, 0.065320551395, -0.058226626366, 0.008252263069, -0.052634865046, -0.009163461626, -0.032390438020, 0.020383417606, 0.070053070784, 0.026502311230, 0.042274609208, -0.033523961902, -0.032061420381, 0.034631952643, -0.000194467604, 0.039539225399, -0.039893247187, -0.040334846824, -0.046454038471, 0.017516627908, -0.071749322116, 0.030605882406, 0.050485767424, 0.007656909525, -0.006918527186, -0.069078378379, -0.043440874666, 0.056750744581, -0.008107230067, 0.003276713192, 0.063698887825, 0.043452538550, -0.065076604486, 0.028817050159, 0.022657670081, -0.020672224462, -0.013962753117, 0.053250432014, -0.036523427814, 0.034678921103, 0.047179721296, -0.042734913528, -0.033400848508, 0.001826629043, 0.046733520925, 0.055181771517, -0.065133266151, 0.002111136913, -0.051139079034, -0.063531421125, -0.018698703498, -0.046710364521, -0.056325510144, 0.020496837795, 0.048052199185, 0.047450497746, 0.043952420354, 0.034513033926, -0.004382379353, 0.019754678011, -0.016693938524, -0.070855006576, -0.047947503626, 0.046496421099, 0.006956368685, -0.048439137638, 0.058842256665, 0.070892408490, 0.020466662943, -0.014951862395, 0.046304479241, 0.014837145805, 0.018280141056, -0.071187175810, -0.040296014398, -0.037825848907, 0.064173713326, -0.044379293919, -0.068548731506, 0.029383040965, -0.045721046627, 0.049467630684, 0.045548431575, -0.033933043480, -0.066426649690, -0.057073280215, 0.024740032852, 0.008208937943, 0.003701075912, -0.045029245317, -0.071020327508, 0.070727437735, -0.052873514593, -0.023984540254, -0.033256489784, 0.037695802748, -0.063207924366, 0.012618266046, -0.010694898665, 0.004279240966, -0.069765411317, -0.042077288032, 0.017390333116, -0.006802469492, -0.033832851797, -0.001287482679, -0.023215156049, 0.025760807097, -0.045452248305, 0.013139292598, -0.070146225393, -0.010058127344, 0.030425973237, 0.019058659673, -0.014779713005, 0.004973143339, -0.012982711196, 0.059737324715, -0.005284368992, -0.036545090377, 0.020904146135, -0.034700240940, 0.014566436410, 0.025995276868, 0.038580864668, -0.025655880570, 0.007441155612, -0.016856178641, 0.059111446142, 0.025203369558, 0.016744367778, -0.038377724588, 0.038745187223, -0.060162000358, 0.030101232231, 0.037267312407, 0.057803049684, 0.052586890757, -0.050911214203, 0.009714357555, -0.059564698488, 0.038315631449, -0.037417147309, -0.048703171313, -0.068399310112, 0.070309892297, -0.049103271216, -0.005336679518, -0.050057381392, 0.063384965062, -0.050913002342, -0.010123871267, 0.014333516359, 0.027994208038, -0.040092598647, -0.009044602513, -0.040236756206, 0.069121494889, -0.006101518869, -0.029279731214, 0.045511372387, -0.046838410199, -0.011525433511, -0.008609332144, 0.006281256676, -0.002522744238, 0.006647787988, -0.046584840864, -0.016537446529, -0.055223271251, -0.031074564904, -0.007809445262, 0.068516105413, -0.009411267936, 0.005116745830, -0.031404670328, 0.035731248558, -0.012106578797, 0.059728145599, -0.020472545177, 0.024555668235, 0.024655103683, 0.020928651094, -0.059870921075, 0.022539339960, 0.060884192586, 0.064626142383, 0.033591650426, 0.043247595429, 0.044534012675, 0.002153240144, 0.055703759193, 0.062220156193, -0.050746701658, -0.060094773769, -0.061188582331, 0.063568383455, -0.040090415627, -0.046565912664, 0.033214502037, 0.012544617057, 0.020840950310, 0.053217172623, 0.004361905158, -0.004466898739, -0.031372200698, -0.009941536933, 0.002186484635, -0.040407888591, 0.069464147091, -0.024526540190, -0.030185509473, 0.004227280617, -0.034507840872, 0.067572116852, -0.061317425221, -0.010506350547, 0.062772855163, 0.039525561035, -0.061107885092, 0.014385841787, 0.069694370031, -0.046638645232, 0.019790172577, -0.003890484571, -0.046827986836, 0.029980443418, 0.042168259621, -0.072046272457, 0.066422581673, -0.019700940698, -0.069903887808, 0.026498354971, -0.014591302723, -0.053454555571, -0.071286924183, -0.046772100031, -0.007624372840, 0.006592690945, -0.042759224772, 0.041784279048, -0.069549366832, -0.028254523873, -0.023065149784, 0.013834305108, 0.018624320626, 0.055948972702, -0.002252936363, 0.022036276758, 0.022594660521, -0.057755358517, 0.053689852357, 0.057616367936, 0.037014760077, 0.049963727593, 0.040577389300, -0.019337147474, 0.011857755482, 0.062745451927, -0.012304075062, -0.028965819627, 0.011746555567, 0.005351290107, -0.042954795063, 0.019487306476, 0.005471251905, -0.017246898264, 0.036866612732, 0.015385754406, 0.070282682776, 0.053895398974, -0.043109789491, 0.045563921332, -0.019716084003, -0.053742695600, -0.069135352969, 0.062845930457, 0.039106450975, -0.011053808033, 0.008493736386, -0.013292100281, 0.068466961384, 0.032051987946, -0.009490191936, 0.038186892867, 0.005939483643, 0.057740688324, 0.039306253195, -0.025528829545, -0.053923964500, 0.046572938561, -0.003914020956, 0.035463705659, -0.007673650980, -0.063381642103, -0.065235383809, 0.049900546670, 0.041634909809, -0.013913337141, 0.066529244184, -0.028553485870, 0.056061044335, -0.022798847407, 0.005730293691, 0.031785190105, 0.022773072124, 0.015527397394, -0.000016659498, -0.025266930461, -0.021834086627, 0.066247403622, 0.064810037613, -0.066913902760, -0.021974835545, -0.019964903593, -0.000020116568, 0.051148578525, 0.021265707910, -0.000861726701, -0.006964422762, -0.062803387642, 0.064234077930, 0.014216631651, 0.029156520963, -0.056574005634, -0.001094445586, 0.049174591899, -0.038250725716, 0.046130180359, 0.017987459898, 0.003457792103, -0.008274085820, 0.055869251490, -0.035242069513, -0.023833673447, 0.040076754987, 0.016353972256, -0.066817872226, -0.016262300313, -0.019192732871, -0.001848742366, -0.020072944462, 0.026367209852, -0.062133125961, 0.013019949198, -0.043072056025, -0.030386053026, 0.054199665785, 0.004004597664, 0.056607171893, -0.033291812986, 0.040793381631, -0.018045652658, 0.069795131683, 0.043428264558, 0.043319292367, 0.030303567648, 0.044556915760, -0.048607159406, 0.043274506927, 0.026901707053, -0.047281838953, 0.062145173550, 0.025811582804, 0.019774809480, 0.043050996959, -0.039138954133, -0.021371956915, -0.064001396298, 0.014151558280, -0.007089838386, -0.017420183867, -0.005078941584, -0.054198235273, 0.059260293841, -0.063892327249, 0.059432223439, 0.041525103152, 0.068554461002, 0.039460986853, 0.060379594564, 0.034989617765, -0.038769427687, 0.036221198738, -0.044713646173, 0.064714744687, 0.024171121418, -0.023334842175, 0.071185529232, -0.063480213284, -0.031266141683, 0.066748246551, -0.009567655623, -0.047483704984, -0.034313801676, -0.025794908404, -0.063170790672, 0.052537798882, -0.022679228336, 0.068011492491, 0.033966891468, 0.040571972728, -0.064562723041, 0.069425866008, 0.015100695193, -0.031676083803, 0.037379838526, 0.024662621319, 0.068852841854, -0.033423718065, 0.037603370845, -0.050574555993, 0.040708810091, 0.059314355254, -0.046494059265, 0.070582717657, -0.060624815524, -0.051649849862, -0.058766357601, -0.038647297770, -0.000764481723, -0.037037692964, -0.071322813630, -0.055599521846, 0.046852365136, 0.067675277591, -0.033516116440, 0.007086753845, -0.051335453987, 0.054111942649, -0.071257501841, -0.038520779461, 0.066220819950, 0.028559058905, -0.014957383275, 0.021385535598, -0.022679433227, -0.044657882303, 0.048732802272, -0.016500607133, 0.030901417136, 0.067039385438, -0.032741069794, 0.015628844500, -0.046866267920, 0.037933506072, -0.008043088019, 0.015779972076, -0.040106538683, 0.058256775141, 0.016338780522, -0.035977590829, 0.066288754344, 0.051493547857, -0.059951100498, 0.063900843263, -0.038761120290, -0.003401115537, 0.016817070544, -0.063564077020, 0.046222351491, 0.004320003092, 0.062011718750, 0.035001024604, 0.031026080251, -0.018483109772, 0.057062119246, -0.001393787563, 0.054922878742, 0.049249283969, -0.032836396247, 0.051872685552, -0.012517794967, 0.054403200746, -0.031038880348, 0.044049277902, -0.005122423172, 0.030215330422, 0.016169846058, 0.053434401751, -0.003114975989, 0.067764759064, 0.064665198326, -0.060775801539, 0.032576970756, 0.064170867205, 0.059989735484, -0.043660204858, 0.049831427634, -0.022916004062, 0.004095718265, -0.053226504475, -0.031650841236, -0.065674200654, 0.063588738441, 0.048246718943, 0.037784777582, 0.004655480385, -0.062582112849, 0.010808929801, -0.012239620090, 0.065027087927, 0.028287492692, 0.000600293279, -0.050739269704, 0.054485410452, 0.005723789334, -0.039213851094, 0.016486391425, 0.033288247883, -0.050928279757, -0.005717009306, -0.023726806045, -0.005385614932, 0.030140258372, -0.027283620089, 0.031039118767, -0.067712485790, 0.039599724114, 0.021290846169, 0.017100282013, -0.044482171535, 0.055587410927, 0.000796400011, -0.031091839075, 0.062546938658, 0.022445462644, 0.026825085282, -0.015494808555, -0.046708054841, -0.048577032983, 0.030638106167, 0.043064206839, -0.053470797837, 0.023848973215, -0.058495543897, -0.049753103405, 0.035017371178, 0.021719820797, 0.054460838437, -0.029075372964, -0.008566468954, -0.030202597380, -0.060184866190, -0.038711152971, 0.033096998930, 0.042141243815, -0.065143987536, -0.070965729654, -0.066253900528, 0.008227095008, -0.069521561265, 0.046804532409, 0.052775837481, -0.048488780856, 0.005302540958, 0.018714427948, 0.018856249750, -0.022291380912, 0.051559790969, -0.027680795640, 0.044675469398, -0.033320479095, 0.043406963348, 0.042032994330, -0.052502684295, -0.053641486913, 0.044285312295, -0.041795033962, 0.008107282221, -0.045135565102, -0.012515231967, 0.045020043850, -0.020830042660, 0.003431208432, 0.014046564698, 0.050560116768, 0.049537442625, 0.025114290416, 0.055081784725, 0.010410808027, 0.008166767657, -0.004079841077, 0.011947199702, -0.036768276244, 0.070614427328, -0.055459100753, 0.016237609088, -0.058736659586, 0.022395461798, 0.053171977401, -0.014396268874, 0.037051886320, 0.042696066201, -0.004732131958, 0.015398301184, -0.070561639965, 0.052331581712, 0.009426102042, 0.032383628190, 0.008584208786, 0.033905029297, 0.043752722442, 0.036914855242, -0.040590602905, 0.060485348105, -0.041833594441, 0.010743819177, -0.057789929211, -0.024279542267, 0.034405343235, 0.000543601811, 0.052908644080, -0.034328341484, 0.051901012659, -0.003018461168, -0.028051473200, 0.014831416309, -0.018275134265, -0.025021068752, -0.008364655077, -0.050593566149, -0.025467179716, -0.019132390618, 0.069476023316, 0.045949116349, 0.071456015110, -0.035214796662, 0.023497618735, -0.054349374026, -0.001318901777, -0.048807613552, -0.040171146393, 0.012540265918, -0.063760936260, -0.011984828860, 0.042880982161, 0.038219064474, -0.008122615516, -0.004356361926, -0.064410187304, 0.003821469843, -0.023555014282, 0.058920100331, 0.018084898591, -0.041871018708, 0.062878102064, 0.036979332566, -0.002652518451, -0.049232043326, -0.070866554976, -0.067274615169, 0.031794480979, -0.064982265234, -0.064230978489, -0.000202998519, 0.003427162766, 0.026757963002, -0.000801593065, 0.039733178914, 0.007110826671, -0.037223055959, 0.052277468145, -0.034199431539, 0.058392316103, 0.013665392995, -0.030448354781, -0.048880517483, -0.024469017982, 0.037809774280, 0.018045343459, 0.020339921117, -0.025158409029, 0.071727126837, 0.018094398081, 0.013015419245, -0.050793588161, -0.052126225084, -0.069171153009, -0.031270354986, -0.071578428149, -0.022779144347, 0.025820232928, 0.046979315579, 0.060416281223, -0.050973311067, -0.067417427897, 0.014118283987, 0.068150401115, -0.036578677595, 0.024210542440, -0.067223809659, 0.019202440977, -0.039225295186, -0.012723136693, -0.023686833680, 0.069039747119, 0.016948349774, -0.033874835819, 0.028903461993, -0.041755564511, -0.006339274347, 0.017404250801, 0.001411490142, 0.054915666580, 0.003286503255, 0.000665336847, -0.026909708977, 0.050466500223, 0.043611578643, -0.048590727150, 0.004546180367, -0.035340420902, 0.019330561161, 0.006718747318, -0.052297599614, 0.056916460395, 0.004362851381, -0.054213047028, -0.066114440560, 0.050815977156, 0.020539082587, -0.064987495542, 0.000364221632, 0.014294095337, -0.002283610404, 0.053533241153, -0.065293885767, 0.000125110149, 0.051439173520, 0.067885935307, -0.049203395844, -0.031950198114, 0.053975492716, -0.002133227885, -0.007208891213, 0.038001522422, 0.060584023595, 0.049757763743, -0.053126707673, -0.060385681689, -0.040678132325, -0.042695064098, 0.030225671828, 0.027128078043, 0.065792441368, 0.049626536667, 0.039672605693, -0.024137813598, 0.030989207327, 0.037475287914, -0.001243777573, 0.029884830117, 0.049239903688, -0.056655012071, 0.013118363917, -0.014762073755, -0.005239620805, -0.053383976221, -0.027830731124, -0.065036758780, -0.001805342734, -0.030061833560, 0.032221734524, 0.001418337226, 0.052896440029, 0.013954117894, 0.063918322325, 0.035524412990, -0.041291162372, -0.038628373295, -0.060103446245, 0.051421448588, 0.020396009088, -0.044778671116, -0.015841517597, -0.068573854864, 0.020874194801, 0.024120971560, 0.019047617912, 0.068111494184, 0.006927028298, 0.070992246270, 0.022071845829, -0.002515345812, -0.062915362418, -0.009919289500, -0.029925022274, 0.010111466050, -0.002264976501, 0.070953890681, 0.040509767830, -0.033569421619, -0.016616888344, -0.024564772844, -0.024427395314, 0.053087905049, -0.007512204349, -0.069891497493, -0.002762980759, -0.067624628544, 0.047951854765, 0.013927407563, -0.068867787719, 0.047490760684, 0.050896659493, -0.047374632210, 0.014136642218, -0.049351871014, -0.038701172918, 0.015025816858, -0.045023947954, 0.048421412706, 0.037793330848, -0.021665722132, 0.057300612330, -0.027459196746, 0.009317286313, -0.025772918016, -0.022045981139, 0.056089296937, 0.037343487144, 0.050432980061, 0.014928601682, -0.008464038372, 0.014551162720, -0.059599969536, 0.063289761543, 0.047422520816, -0.031639210880, 0.056536167860, 0.038456551731, -0.015625920147, 0.057477444410, -0.057430058718, 0.003348208964, -0.030084699392, 0.025221973658, -0.059575501829, -0.013156253844, 0.003172703087, -0.035060595721, 0.060822859406, 0.008836507797, 0.034680880606, -0.025246936828, 0.013731822371, 0.023391693830, 0.038859881461, -0.018580134958, -0.041551925242, 0.031362958252, 0.059026554227, 0.006137065589, 0.048128768802, -0.045538574457, -0.005329914391, 0.054844275117, -0.022597257048, -0.004908911884, -0.016763281077, 0.059877619147, 0.057947337627, 0.004289016128, 0.029610387981, 0.013364575803, -0.026023011655, 0.055746480823, -0.001030832529, -0.057535599917, -0.067242644727, 0.061458140612, -0.000339657068, -0.011798515916, -0.051422070712, -0.070589669049, -0.001926153898, -0.038852296770, -0.059805206954, 0.043806545436, 0.017087310553, 0.067858219147, -0.004528164864, -0.004232615232, -0.028120230883, -0.065079376101, -0.024158030748, 0.065063878894, -0.036153819412, -0.021446254104, -0.017883691937, 0.021629966795, 0.044965311885, -0.049495302141, -0.036250416189, -0.046015292406, 0.008041642606, -0.004511721432, -0.045031398535, 0.025672361255, 0.015618197620, 0.041585907340, 0.030152477324, 0.010355934501, -0.010541763157, 0.049533568323, 0.027691088617, 0.011809304357, -0.025960519910, 0.044893555343, 0.065635681152, 0.026489928365, -0.027083199471, 0.033620245755, 0.060158520937, -0.051556453109, 0.024205625057, 0.006227314472, -0.041982293129, 0.010250009596, -0.067117817700, 0.060784593225, 0.004919528961, 0.001047559083, 0.037607945502, 0.034075789154, 0.052010044456, 0.066017404199, -0.000579118729, 0.017405577004, -0.012676678598, -0.066158577800, -0.018171913922, -0.056269884109, 0.009646587074, -0.063916720450, 0.065143093467, -0.031299434602, 0.027997359633, -0.009036734700, 0.028085626662, 0.046993680298, 0.032843261957, 0.013658061624, 0.046930603683, -0.012437250465, 0.038836345077, 0.050277039409, -0.060637705028, 0.046421326697, -0.037549927831, -0.054297052324, 0.038240209222, 0.056524381042, 0.065171554685, 0.070621073246, -0.007708288729, -0.027660682797, -0.007107459009, -0.026878170669, -0.055833425373, 0.070716708899, 0.009554840624, -0.053258918226, 0.053291618824, 0.050139732659, -0.015205051750, 0.042477302253, 0.035903915763, -0.021190859377, -0.040633052588, -0.011904887855, 0.052341252565, -0.070340223610, 0.010757960379, 0.044078543782, -0.013615269214, 0.043631039560, 0.035132810473, -0.016142096370, -0.039461866021, -0.062942221761, 0.039507254958, -0.041122555733, 0.024562343955, -0.039753463119, -0.018618937582, -0.002029702067, -0.020698655397, -0.054443113506, 0.068419441581, -0.003929182887, 0.022087194026, -0.040206540376, -0.058517225087, -0.003131061792, 0.039813049138, 0.071168005466, -0.000166967511, 0.026798725128, -0.061735264957, -0.005043737590, -0.007931970060, -0.014183044434, -0.058665059507, 0.025831542909, -0.055269107223, -0.037047002465, 0.041907049716, 0.034554399550, -0.053000275046, 0.007470548153, 0.037173040211, 0.026753164828, -0.031614191830, 0.064880445600, -0.026427619159, 0.063674241304, 0.058240666986, -0.068774014711, 0.009893186390, 0.027804628015, 0.021644502878, -0.071406386793, 0.013435259461, 0.054992377758, -0.053684227169, 0.038680486381, 0.000194549561, -0.055265545845, -0.016271729022, -0.001435406506, 0.068197786808, -0.041041597724, -0.062886506319, 0.041997142136, 0.025551505387, 0.034604795277, 0.019715823233, 0.045203804970, -0.053581539541, 0.046188943088, -0.003787279129, -0.005773723125, 0.035185113549, -0.052701383829, -0.032468590885, -0.068423949182, -0.032168287784, 0.059355139732, 0.065221697092, 0.054641246796, 0.001065209508, -0.050728052855, 0.051520563662, 0.017927154899, -0.002664081752, 0.065270334482, 0.009052462876, 0.014759890735, -0.037010729313, -0.057309836149, 0.029136389494, -0.053558345884, -0.070930078626, -0.036536917090, -0.043119288981, 0.014189116657, -0.008228413761, -0.005337297916, 0.061792403460, -0.035314526409, -0.040464498103, -0.004949927330, -0.025863870978, -0.029403015971, 0.036418400705, 0.014956079423, -0.046575136483, -0.026204075664, -0.046120528132, 0.030131995678, -0.008483171463, -0.036586474627, 0.048562988639, 0.043615087867, 0.031887270510, -0.023212194443, 0.058154225349, 0.006580889225, 0.034902654588, -0.006424017251, -0.025385722518, -0.062567435205, -0.030690483749, 0.045259952545, -0.060949124396, -0.007494911551, 0.062373101711, -0.060647219419, 0.052270844579, 0.057713270187, -0.016764640808, -0.057137496769, -0.030646417290, -0.063410818577, -0.017098493874, 0.060129716992, 0.051157161593, -0.014571547508, 0.065201386809, -0.024974111468, 0.070336714387, 0.053844988346, 0.041757866740, -0.010612171143, -0.012206636369, 0.052940338850, 0.029062867165, -0.052544079721, 0.053795933723, -0.069927684963, -0.031238559633, 0.050677910447, -0.004091605544, 0.015823692083, -0.038969263434, -0.023666530848, 0.040325470269, 0.070379838347, -0.015564993024, -0.064776442945, -0.066924244165, -0.012082163244, 0.001857809722, 0.045282818377, -0.054312776774, -0.050532966852, -0.009398430586, 0.069395974278, -0.028464563191, -0.005956418812, -0.032002899796, 0.042140483856, -0.011679258198, -0.055690165609, 0.028949953616, -0.057701125741, -0.034045126289, -0.067061737180, 0.058971732855, 0.026095382869, 0.002778723836, 0.053408578038, 0.021978668869, 0.045375093818, -0.035901349038, -0.013636227697, -0.008312091231, -0.025566801429, -0.026030771434, 0.026026040316, -0.051371917129, -0.055169709027, 0.004235453904, 0.052264064550, -0.018552571535, 0.052720099688, -0.006186328828, 0.059823140502, 0.037295751274, 0.063811466098, 0.057619422674, 0.060223892331, 0.018499486148, 0.043115139008, -0.036662112921, 0.067092895508, -0.028332453221, -0.046271391213, 0.048633225262, 0.022171348333, 0.049504525959, -0.053070150316, -0.003746569157, 0.049119703472, 0.036067031324, 0.071369633079, -0.027741894126, 0.031476847827, 0.056866466999, -0.031293291599, -0.048222787678, 0.054701164365, -0.003481730819, 0.052938148379, 0.031629554927, -0.052109777927, 0.008758924901, -0.013521030545, -0.016482040286, -0.019087277353, 0.024302475154, -0.019199065864, -0.049048900604, 0.050250127912, 0.020313560963, 0.002377972007, 0.065246313810, -0.020788747817, 0.015953734517, -0.005308873951, -0.071956746280, 0.010330453515, -0.016389504075, -0.040121678263, -0.003211379051, 0.015361651778, -0.032103162259, 0.046760052443, -0.050177395344, 0.017755553126, -0.025338817388, -0.021679744124, 0.061972111464, 0.036276653409, -0.005009926856, 0.068073749542, -0.069111451507, -0.018357176334, 0.061799496412, 0.069334328175, -0.012039612979, 0.020168766379, -0.014255192131, -0.052705150098, 0.012934841216, -0.022511482239, 0.002062685788, 0.025799378753, -0.030237577856, 0.022730156779, 0.016238540411, 0.001460492611, -0.026856731623, -0.053880125284, -0.017347265035, 0.057616844773, -0.071952238679, -0.047441855073, 0.071438580751, 0.048578403890, -0.058163583279, -0.000420503318, -0.013108938932, -0.070340536535, 0.034842073917, -0.062125626951, 0.012312851846, -0.030565429479, 0.041676312685, -0.054509118199, -0.036726705730, 0.061851575971, 0.054190680385, -0.047709435225, -0.057454179972, -0.058844715357, 0.054002836347, -0.046428777277, 0.010280929506, -0.002060346305, -0.033646848053, 0.011770747602, 0.065580710769, -0.003898084164, 0.042502045631, 0.030899606645, 0.033157102764, -0.052429519594, 0.018217645586, -0.035046778619, 0.056666895747, -0.020148083568, -0.047388359904, 0.016822434962, -0.051310382783, -0.040637940168, 0.006627090275, 0.002635292709, -0.014344044030, -0.013118539006, 0.032236404717, 0.015855900943, 0.054771125317, 0.029011555016, 0.038390927017, 0.057534024119, 0.036884039640, -0.036020502448, -0.066295094788, 0.045299939811, -0.010932624340, 0.016458809376, 0.004264719784, -0.070037081838, 0.015250116587, 0.038256108761, 0.006838172674, 0.067830264568, 0.032176360488, 0.030153848231, -0.063376098871, 0.017240464687, 0.051755994558, -0.061446249485, -0.021729245782, 0.061951503158, 0.070186361670, -0.028206985444, -0.064510464668, -0.042249917984, -0.059255190194, 0.052789047360, -0.066077001393, -0.028986588120, -0.003360770643, 0.016133196652, -0.035740867257, 0.027106255293, -0.038561336696, -0.023604966700, 0.055230811238, 0.065669849515, 0.064727440476, 0.046862378716, -0.059786193073, 0.016915954649, 0.061672672629, -0.035698726773, 0.023264482617, 0.056180223823, -0.034062899649, 0.051844969392, -0.019968122244, -0.006465971470, 0.025402203202, -0.042518921196, 0.026574820280, 0.058026447892, 0.064113631845, -0.050822600722, 0.030374608934, 0.052530162036, -0.039851933718, -0.012064561248, 0.060074627399, -0.031385190785, -0.025101095438, -0.042669460177, 0.001560568810, -0.019830040634, -0.021056305617, 0.061983451247, -0.056813605130, 0.018013842404, 0.065750733018, 0.055393308401, -0.012262281030, 0.010918527842, -0.022209115326, -0.067266792059, 0.034053385258, 0.012123078108, 0.071628704667, -0.063867084682, -0.016046945006, -0.067134141922, 0.063846781850, -0.070165857673, -0.057139836252, -0.039248298854, -0.045298304409, -0.046672783792, 0.011755846441, -0.036617171019, 0.030541427433, -0.061333615333, -0.051945865154, 0.022909589112, 0.047410883009, -0.056596200913, 0.017367981374, -0.040926042944, -0.036916490644, 0.057077780366, 0.048801474273, -0.051485337317, 0.064972683787, 0.006914727390, -0.029738008976, 0.036080725491, -0.046903952956, 0.022808864713, 0.054300263524, 0.020766690373, -0.015055306256, -0.029058251530, 0.038693688810, -0.037217017263, 0.030107550323, -0.059071492404, 0.010758824646, 0.027405232191, -0.008211471140, 0.057950556278, 0.019881129265, -0.060985185206, -0.010561551899, -0.036419503391, -0.007948540151, -0.011666338891, 0.040565639734, 0.058925300837, 0.037745922804, 0.023287646472, 0.054307162762, -0.042807660997, -0.009953338653, -0.000451289117, -0.054752882570, 0.062688365579, 0.057444378734, -0.048650160432, -0.010503944010, -0.059438195080, 0.040516927838, -0.020851515234, -0.069520443678, -0.059926219285, -0.007297381759, 0.046776622534, -0.010353542864, -0.037494488060, -0.063754484057, -0.030180521309, 0.016482159495, 0.000531129539, 0.000118173659, 0.012052021921, 0.071628361940, -0.023402687162, -0.015718936920, -0.011714652181, -0.070921391249, 0.011230118573, -0.061708681285, -0.015607442707, -0.034030277282, 0.007569655776, -0.048828348517, -0.025161471218, -0.041969712824, 0.062918484211, -0.059708610177, -0.059144344181, -0.018276959658, 0.043060168624, -0.057738482952, -0.004947677255, -0.025124583393, 0.034401521087, -0.053055301309, -0.020929753780, 0.044148072600, -0.012338299304, -0.063625767827, 0.061849296093, -0.009178690612, -0.022904735059, -0.022132996470, 0.002326354384, -0.056801147759, -0.069639563560, -0.005628444254, 0.039502918720, -0.036151822656, -0.026120007038, 0.033054366708, 0.012809976935, 0.050752006471, 0.061684131622, 0.026236131787, 0.061690598726, 0.019853219390, -0.030261065811, -0.033823300153, -0.059464573860, 0.013038478792, 0.011007852852, 0.021779470146, 0.007898487151, -0.057579495013, -0.001360751688, -0.035611800849, -0.030177339911, 0.023267805576, -0.051904279739, -0.061380296946, -0.069265604019, 0.017264366150, 0.030841574073, 0.071762382984, 0.064081698656, 0.066011413932, 0.071839600801, -0.033804185688, 0.014961771667, 0.055157333612, -0.056724868715, 0.068540707231, 0.024162195623, -0.064783990383, 0.013767957687, -0.005935497582, -0.058758132160, -0.029245045036, -0.056327745318, -0.000770345330, -0.051142640412, 0.062058404088, -0.070203311741, -0.005133457482, 0.027743116021, -0.057299476117, -0.059416204691, -0.024894308299, 0.070354253054, 0.062133476138, 0.022135682404, -0.068549178541, 0.024607032537, 0.033054366708, -0.065732508898, -0.033257711679, 0.044534325600, 0.060383930802, 0.029585711658, 0.057090133429, -0.017149440944, -0.038068439811, 0.048762828112, -0.004605822265, -0.063280396163, -0.043581090868, -0.071762248874, -0.012911856174, -0.059477634728, -0.037318706512, 0.007593415678, 0.053600937128, -0.001992791891, 0.008543565869, 0.045837588608, -0.007678464055, 0.022917777300, 0.054145634174, -0.017524316907, -0.038316506892, 0.064008831978, -0.014231119305, 0.048485182226, 0.051393099129, 0.001559652388, 0.043231904507, -0.062798827887, -0.048617310822, -0.049255926162, 0.035757400095, -0.034168340266, 0.052722938359, -0.042837310582, -0.048836950213, -0.053367424756, -0.010246828198, -0.040007013828, 0.019689172506, 0.049856051803, -0.012638807297, -0.029442541301, -0.069177381694, 0.059432342649, -0.062139667571, -0.048103202134, -0.065110415220, 0.059514820576, -0.049019835889, -0.054663032293, -0.068772844970, -0.023294579238, 0.013109914958, -0.013209696859, -0.058865703642, 0.065821766853, -0.041258454323, -0.036701843143, -0.011597115546, -0.034419879317, -0.056952614337, -0.020826153457, 0.057413861156, -0.016195487231, -0.004108592868, -0.055987149477, -0.014683477581, 0.054178968072, 0.051635019481, -0.025891143829, -0.046609431505, 0.048163011670, -0.049620460719, 0.036463379860, 0.055026859045, -0.014282498509, -0.049338154495, 0.045042201877, -0.012016057968, 0.046054005623, -0.015744887292, 0.040330529213, 0.004594340920, -0.013918805867, 0.062456354499, -0.062352750450, 0.048096850514, 0.058137476444, 0.010064460337, 0.024072758853, 0.037550441921, -0.069187052548, 0.071249157190, 0.022354356945, -0.018080256879, -0.043275557458, 0.061172261834, 0.028674103320, 0.042382255197, 0.050607778132, -0.068356469274, 0.008279122412, 0.004300147295, -0.042323507369, -0.043932978064, -0.022043056786, 0.001385770738, -0.025818429887, 0.020981766284, 0.032124221325, 0.062070325017, 0.040397703648, -0.058223132044, -0.041000235826, -0.010483555496, 0.028983093798, 0.052579544485, -0.024280678481, -0.012258958071, -0.037871394306, -0.016175579280, 0.034016817808, 0.012020722032, -0.003051571548, -0.019891314209, 0.042512036860, -0.053890757263, -0.003065437078, -0.033375918865, -0.064705155790, -0.027025196701, 0.052342161536, -0.061611790210, 0.055097162724, 0.060263514519, 0.070663020015, -0.041122831404, -0.007490575314, 0.066657274961, 0.012265346944, -0.028299793601, -0.046759106219, 0.024020567536, -0.008699387312, -0.024146676064, 0.055641740561, 0.006294988096, -0.049163766205, 0.053704828024, -0.042930189520, 0.029311791062, 0.045740321279, -0.007784731686, 0.061990574002, 0.015775926411, 0.069512084126, 0.007873207331, 0.053917437792, -0.032808795571, 0.001875944436, -0.029719080776, -0.022971685976, 0.030650362372, -0.005254864693, 0.065098434687, 0.025408312678, -0.028091460466, 0.037195079029, -0.033292260021, 0.069546490908, 0.015474662185, -0.041415698826, 0.064654842019, 0.032152973115, -0.034649759531, 0.011753968894, -0.066281087697, 0.066418051720, -0.020634267479, -0.002713449299, -0.038301844150, -0.030585836619, -0.030448235571, 0.070653587580, 0.022188641131, -0.063280843198, -0.024453826249, -0.024528071284, -0.017665203661, -0.050940275192, -0.069947592914, -0.056966137141, -0.003088526428, 0.057675570250, -0.006972007453, 0.038469210267, -0.041885349900, -0.044463932514, 0.006721429527, 0.011865980923, -0.021149151027, 0.016012340784, 0.025993466377, -0.017027843744, -0.062426857650, -0.037917971611, 0.053796693683, 0.064616009593, 0.054435074329, -0.016686506569, 0.016649462283, 0.062626421452, -0.049604337662, -0.070025987923, -0.003124848008, 0.036008805037, -0.071873798966, -0.038544576615, 0.067076057196, 0.023953139782, -0.020477827638, -0.002274617553, -0.022052742541, 0.002263605595, -0.030256882310, 0.025551021099, 0.032013759017, -0.063548505306, 0.008039698005, 0.023989960551, -0.007428169250, 0.029695406556, 0.032744579017, -0.055618084967, -0.042083516717, -0.038020778447, -0.032002985477, 0.013819478452, 0.046952195466, 0.039450958371, 0.012140870094, 0.072127968073, -0.051368627697, -0.057182077318, -0.014392137527, 0.047369331121, -0.015468828380, -0.031213883311, 0.009830296040, 0.012923091650, 0.052224062383, 0.052391134202, -0.039949338883, 0.019578330219, 0.044479347765, 0.015060298145, 0.058588549495, -0.055871643126, -0.021372608840, 0.069072201848, -0.057423036546, -0.032657604665, -0.043643910438, -0.013782721013, 0.062304466963, -0.001208074391, -0.020480114967, -0.011174663901, 0.051505744457, -0.019488442689, -0.037068113685, -0.046486213803, -0.037515617907, -0.066586501896, -0.053519167006, 0.046447791159, -0.043242674321, -0.000521339476, 0.016840897501, 0.045029573143, -0.036512125283, 0.016167372465, -0.051749356091, -0.057170998305, -0.039019264281, -0.046747133136, 0.035209380090, 0.064251050353, 0.004823066294, 0.068341314793, 0.008763670921, -0.011023800820, 0.030220076442, 0.008218333125, 0.057298526168, -0.064044721425, -0.052879534662, 0.054003268480, -0.021269734949, 0.018408156931, 0.003334805369, -0.045794345438, 0.006941877306, 0.010660365224, -0.007775321603, 0.034981340170, -0.032438755035, 0.026424042881, -0.061582505703, -0.005930505693, -0.033160097897, 0.042772650719, -0.048507049680, -0.008749097586, -0.011347882450, -0.063965603709, 0.038594819605, 0.013499572873, -0.013670105487, 0.007938541472, -0.034710977226, 0.047325991094, -0.045172147453, 0.042086593807, 0.067806467414, -0.016846645623, 0.056453645229, -0.018380559981, 0.042853452265, 0.006419353187, -0.029223605990, -0.059913333505, -0.005257405341, 0.028035402298, 0.002536356449, 0.013852491975, 0.015027068555, -0.045614626259, -0.059295777231, 0.029362305999, 0.071950405836, -0.028782743961, 0.028319686651, -0.000514589250, 0.071745440364, -0.035082034767, 0.044536970556, 0.061093628407, -0.071143746376, 0.070982128382, -0.053284488618, 0.065587699413, -0.050854742527, -0.016291238368, 0.071579590440, 0.044748149812, 0.064518779516, 0.007908806205, -0.047554247081, 0.016532957554, -0.069870352745, 0.020145229995, 0.051969356835, -0.037187028676, 0.038274645805, 0.040763065219, -0.056466482580, -0.006996303797, -0.037684980780, 0.009348280728, -0.071194589138, -0.033293053508, 0.029226705432, 0.065646350384, 0.041345238686, -0.036368556321, 0.041091755033, 0.065876290202, 0.029335066676, -0.071545548737, -0.001825250685, -0.013511978090, -0.030776049942, 0.053176566958, 0.051717884839, 0.003272861242, -0.071470119059, -0.025881629437, 0.026040755212, 0.008689239621, 0.059248030186, -0.044586598873, 0.008316151798, -0.051130853593, 0.070223852992, -0.016096998006, 0.050749748945, -0.031300913543, -0.000762090087, -0.047745548189, 0.044576667249, 0.031371906400, -0.055319041014, -0.037108376622, 0.013903751969, -0.066388405859, 0.068773761392, 0.066376358271, 0.036815539002, 0.007781274617, 0.053256377578, 0.049078375101, 0.000583313406, 0.068151339889, -0.051337983459, -0.011000607163, 0.046700604260, -0.064806051552, 0.042169615626, -0.015257600695, -0.034252651036, 0.066216871142, -0.066140390933, 0.027409292758, -0.039343744516, -0.068479940295, 0.029654487967, 0.000955179334, 0.035981617868, 0.051325924695, -0.001318797469, 0.055808022618, -0.071304365993, 0.015964716673, -0.044850423932, 0.050193428993, 0.070387914777, -0.069968432188, 0.042542099953, 0.033564895391, -0.029876053333, -0.008245334029, 0.028380580246, 0.027406804264, 0.002939261496, 0.019511312246, 0.021017245948, -0.059649541974, -0.028227977455, 0.044251173735, -0.042187392712, -0.041225761175, -0.002789825201, -0.020880628377, 0.040873132646, -0.016724288464, 0.018676988780, -0.062645964324, 0.021070607007, 0.000874206424, 0.055923461914, 0.005101568997, 0.041443593800, -0.003828898072, -0.010927289724, -0.035379048437, -0.036924287677, 0.071104794741, -0.010877374560, -0.032437585294, 0.064319476485, 0.035182073712, 0.062296569347, -0.020544879138, -0.048305287957, 0.056081965566, 0.063027530909, 0.049960836768, -0.055412918329, 0.020506873727, 0.022463962436, -0.046055227518, -0.029006838799, 0.045356497169, 0.016857244074, 0.021428562701, 0.035984992981, -0.058226279914, -0.023521464318, -0.026453550905, -0.049724765122, 0.007569447160, 0.030216485262, -0.022693302482, -0.027443502098, -0.063519671559, 0.068202063441, -0.041337810457, -0.014378543943, 0.048147402704, 0.008399501443, -0.064171671867, -0.021904923022, -0.071292012930, 0.054578885436, -0.023680347949, 0.031050249934, 0.009633004665, -0.011138118804, 0.046037159860, 0.024641871452, 0.039040759206, 0.064350947738, -0.047354001552, -0.017935466021, -0.013608612120, -0.009944632649, -0.009123526514, -0.010708287358, 0.059226080775, 0.055032432079, 0.061161622405, -0.022517610341, -0.019098564982, -0.047555521131, -0.004052981734, 0.056889727712, 0.030394069850, 0.042904086411, -0.046931292862, 0.071129202843, 0.055943384767, -0.045549843460, 0.014807038009, 0.069916471839, 0.052442185581, 0.020869292319, -0.034145351499, -0.000884577632, -0.067045293748, -0.057653687894, -0.056354746222, -0.033578522503, -0.070602953434, -0.063005700707, -0.022747848183, -0.019724085927, -0.044676292688, 0.046292163432, 0.022790744901, 0.034911721945, 0.001321382821, 0.019181877375, -0.027347646654, -0.028799984604, 0.025063358247, 0.011040180922, -0.056252881885, -0.023826446384, -0.065817236900, 0.011084437370, -0.003686554730, 0.054360583425, 0.055433481932, 0.040062867105, -0.053283371031, 0.056729897857, -0.021607358009, -0.000642947853, -0.009039647877, 0.025400348008, -0.039714608341, 0.009275197983, 0.018288575113, -0.013535242528, -0.026831645519, 0.001936025918, -0.066245593131, 0.063675582409, -0.045198023319, -0.038192518055, 0.036522038281, 0.008100934327, 0.065738275647, 0.021194852889, -0.023620229214, 0.012206770480, 0.001776933670, 0.040724724531, -0.051559068263, -0.038518767804, -0.050768777728, 0.030978053808, -0.010504771024, 0.047774299979, 0.042101204395, -0.021335273981, 0.038190089166, 0.023257002234, -0.027458455414, -0.039343520999, -0.048160962760, -0.068908691406, -0.035710133612, -0.011572286487, 0.055306285620, -0.049506261945, -0.052799336612, 0.004553429782, -0.066464766860, -0.045744843781, -0.036294739693, -0.015334118158, -0.009870767593, 0.027326330543, -0.012929078192, 0.066207438707, -0.046120129526, 0.038887567818, -0.055675383657, -0.066812731326, 0.016397505999, 0.013786710799, -0.027912288904, 0.026681035757, -0.033876020461, 0.064764261246, 0.035624310374, 0.044378109276, -0.011794026941, 0.020205825567, 0.021768085659, -0.060172494501, 0.006824001670, 0.061757192016, -0.053289167583, -0.013646170497, 0.046128496528, 0.015182204545, 0.000999607146, 0.044358558953, 0.067496761680, 0.031024806201, 0.021952569485, 0.018651060760, 0.041225418448, -0.051230873913, 0.019257895648, 0.029125958681, 0.011704847217, 0.022496156394, -0.071497373283, 0.006523951888, 0.063299655914, 0.050698682666, -0.009416796267, 0.060060113668, 0.032849885523, 0.044878505170, -0.055056057870, -0.031554192305, 0.035317845643, 0.003185190260, -0.060779400170, -0.062683969736, -0.049333132803, 0.029739364982, -0.041111268103, 0.005626142025, 0.006891347468, -0.054701261222, -0.057556524873, -0.037545073777, -0.030774485320, 0.027995996177, -0.007466189563, 0.030616357923, -0.065768919885, -0.023678213358, -0.002220571041, -0.015248171985, -0.012364074588, -0.060416273773, 0.043227754533, -0.051196150482, -0.020058214664, 0.058942452073, -0.000953264534, 0.017252922058, -0.047780100256, 0.055309891701, 0.041208140552, 0.059381574392, -0.029892917722, 0.005399689078, -0.071203731000, 0.026628367603, -0.024035278708, 0.070387661457, 0.033051766455, 0.066322118044, 0.035462878644, -0.061078824103, 0.001705221832, -0.048701569438, 0.036098912358, 0.030444242060, 0.068679720163, 0.009249635041, 0.033360570669, -0.024228800088, 0.066926583648, -0.020794305950, 0.063402265310, -0.009468771517, 0.071833223104, 0.025536894798, -0.057932570577, -0.001020960510, -0.031095642596, -0.027614001185, -0.071893706918, 0.044938862324, -0.021520808339, -0.008273154497, -0.065346434712, -0.001286983490, -0.041539777070, 0.008821882308, -0.027868930250, -0.010775942355, 0.003850772977, 0.053456470370, 0.013211451471, -0.054342903197, -0.048708833754, 0.022905543447, -0.018140461296, 0.034256592393, -0.060933534056, 0.028454534709, -0.024636108428, -0.006306290627, -0.042181663215, 0.032699912786, -0.057847019285, -0.047825939953, -0.027604158968, -0.052930019796, -0.043545797467, -0.001407571137, 0.016162261367, -0.013947647065, -0.057156287134, -0.011692337692, 0.015263691545, 0.048867627978, 0.009305417538, -0.051081970334, 0.065255537629, 0.045045971870, 0.064030334353, 0.025692529976, 0.062622323632, -0.036086112261, 0.014741562307, 0.025147676468, 0.023954495788, -0.062583900988, -0.045221649110, -0.055611014366, -0.041972912848, -0.051899343729, 0.052711620927, 0.013915486634, 0.026359520853, 0.050737649202, 0.038161046803, 0.050036199391, 0.061731547117, -0.062487751245, 0.013468772173, 0.055265530944, -0.067569829524, -0.041699502617, -0.031827602535, 0.041864171624, 0.012753330171, -0.036706279963, -0.038449753076, -0.042654182762, 0.051135070622, -0.020970102400, -0.000238396227, -0.022198345512, 0.056338191032, 0.030428431928, -0.054108500481, 0.062380760908, -0.029794305563, 0.000461526215, -0.060127429664, 0.000625401735, -0.013894408941, -0.028753940016, -0.046002939343, -0.018872316927, -0.044925563037, 0.055871397257, -0.066430695355, -0.042512573302, -0.038861416280, 0.006454214454, 0.065922439098, -0.059113081545, -0.000019304454, 0.013970755041, 0.037490792572, 0.002698600292, -0.063206635416, 0.000115610659, -0.063507333398, -0.067464664578, -0.051970645785, 0.001285210252, 0.059732362628, -0.053993135691, 0.035458885133, -0.066389091313, -0.031288180500, 0.004096321762, -0.071428664029, -0.064032949507, -0.002586737275, 0.032862327993, 0.034376554191, 0.053005501628, 0.022973529994, 0.057237908244, -0.023640912026, 0.001560322940, -0.006611414254, -0.017369236797, -0.020905390382, 0.030522741377, 0.035648882389, -0.037944469601, 0.008929230273, -0.063642211258, -0.036067716777, 0.005951620638, -0.010138705373, -0.069071292877, -0.010949965566, 0.002923689783, -0.012340880930, 0.031099289656, -0.064629532397, 0.063665434718, -0.037586577237, -0.014384083450, -0.023228041828, 0.063602343202, -0.025482989848, -0.041013639420, -0.026465922594, 0.046043306589, 0.014371648431, -0.067159079015, -0.001138597727, 0.013873264194, -0.071696400642, 0.061791092157, 0.003009378910, -0.059054650366, -0.050166986883, -0.004948295653, 0.007118947804, 0.053516477346, -0.066143952310, -0.021243475378, 0.021354764700, 0.069585382938, 0.023029893637, -0.009868942201, -0.042951010168, -0.034917831421, -0.022983059287, 0.034764267504, 0.050354830921, 0.005949087441, -0.037801846862, 0.053413689137, 0.040516085923, -0.064085379243, 0.069288074970, 0.028829559684, 0.001258574426, -0.048223733902, 0.001146614552, -0.044795274734, 0.027205586433, -0.045217759907, 0.066134378314, 0.023268185556, 0.034839801490, 0.027963273227, -0.021958865225, 0.028594486415, -0.033259205520, -0.019765414298, 0.006668180227, 0.004690341651, -0.005108244717, 0.069386988878, -0.011697378010, -0.001377180219, 0.063541129231, 0.043253049254, -0.004411958158, -0.048236533999, 0.005413226783, -0.023487720639, 0.039101652801, -0.014276787639, -0.046130988747, -0.062227521092, -0.003452666104, -0.040722403675, 0.028434284031, -0.002222619951, -0.026144646108, -0.052923962474, -0.008364245296, -0.042505383492, 0.070772349834, -0.059461355209, -0.069600954652, -0.028252735734, -0.011682908982, 0.067911446095, -0.034601252526, -0.043860126287, 0.064208850265, 0.063897550106, 0.029095143080, 0.062339603901, 0.067760974169, 0.017308741808, 0.037580348551, 0.037455484271, 0.037393316627, -0.039685841650, -0.067524142563, 0.031083062291, -0.038960110396, 0.059477582574, 0.042936816812, 0.059897944331, 0.028779558837, 0.018458709121, 0.054829478264, -0.070723190904, 0.040018424392, 0.049940913916, -0.028106328100, -0.042547054589, -0.023662693799, -0.032712146640, 0.065116718411, 0.030851811171, -0.040491390973, -0.019181620330, -0.046937122941, -0.005598127842, -0.053525775671, -0.023060142994, 0.021687142551, -0.048145134002, 0.070844635367, -0.050021663308, -0.017833173275, 0.052386090159, 0.003799103200, 0.024429097772, 0.064183235168, -0.032331455499, 0.044560424984, -0.035634461790, 0.009622842073, 0.071121901274, -0.020393483341, 0.008699044585, 0.019446633756, 0.052273444831, -0.059395145625, 0.041678234935, 0.028809465468, 0.035221442580, -0.033929362893, 0.001496784389, 0.021814107895, -0.043344348669, 0.039946742356, 0.037913016975, -0.009381383657, 0.039810143411, -0.020634472370, -0.004108831286, 0.040006928146, -0.006841838360, -0.066077813506, -0.029236562550, 0.045858509839, -0.051283665001, -0.002762086689, 0.063122078776, -0.011572908610, -0.008898757398, -0.025028552860, -0.057497438043, 0.040533944964, -0.062543570995, 0.043917030096, 0.002822980285, 0.057523235679, 0.021905645728, -0.057281721383, -0.045510679483, -0.022661797702, 0.059175461531, 0.041516855359, -0.031640190631, -0.017868101597, -0.047010630369, -0.033445809036, -0.027630276978, -0.007174454629, -0.041940376163, 0.024423956871, -0.012591801584, 0.071448072791, -0.057335283607, -0.001777470112, 0.064425870776, 0.041030779481, -0.071767255664, -0.015713743865, 0.052152737975, 0.025594629347, 0.027381196618, 0.003686137497, -0.063838988543, 0.038491874933, -0.017800189555, 0.014827698469, 0.064885526896, 0.064155027270, -0.067733958364, 0.071638941765, 0.000767230988, -0.054148592055, -0.055765956640, 0.051303826272, 0.052799805999, -0.023785393685, 0.001157194376, -0.066318042576, -0.050189800560, 0.055501773953, 0.005239568651, -0.035120319575, -0.039299454540, 0.009191237390, -0.018147431314, 0.014557786286, -0.010463457555, -0.042175933719, 0.059161722660, -0.039210289717, -0.019910376519, -0.022178851068, 0.048740543425, 0.066788658500, 0.038178078830, -0.044597849250, 0.008533105254, 0.001445628703, -0.044408716261, -0.005500897765, -0.035036437213, 0.064916327596, 0.003537289798, -0.069943927228, 0.055648162961, -0.058792166412, -0.011524781585, 0.021388798952, 0.018459707499, 0.039126582444, 0.059724777937, -0.054914001375, -0.068156376481, 0.060333043337, -0.012579463422, 0.047390565276, -0.030340969563, -0.059111688286, -0.010682526976, -0.044377159327, -0.055578976870, -0.038379568607, -0.030169200152, 0.054878085852, 0.036292091012, 0.041397877038, 0.050240248442, -0.000066936016, 0.066588163376, 0.066796779633, -0.017328578979, 0.053725555539, 0.033305838704, -0.067129753530, -0.060763414949, -0.032299712300, -0.019898865372, -0.013882346451, -0.062846124172, -0.049943491817, 0.016691185534, -0.022322196513, -0.030043628067, 0.050301760435, -0.033102713525, 0.022257827222, -0.058351218700, -0.024983368814, -0.015639204532, 0.067830085754, -0.034819118679, 0.014945581555, -0.013138998300, 0.003666125238, -0.030123174191, 0.020327031612, -0.029434848577, 0.040129661560, 0.008887611330, 0.044204697013, -0.006617091596, -0.019662175328, 0.033635988832, 0.017383292317, 0.040047742426, -0.058013990521, 0.047036729753, 0.010621927679, -0.009790997952, -0.060779809952, -0.049843728542, -0.067650541663, -0.022455390543, 0.019322417676, 0.029554195702, -0.046813361347, 0.062726140022, 0.003682956100, -0.016211953014, -0.005212962627, -0.007422141731, -0.012268438935, 0.000907875597, 0.061295539141, 0.017249099910, 0.011382088065, 0.000811383128, -0.006149180233, 0.026114620268, -0.064729757607, 0.064670026302, -0.009206138551, 0.019825652242, -0.053998023272, 0.059100344777, -0.068423673511, 0.025447338820, -0.053982675076, -0.062045410275, 0.024993106723, -0.048571404070, 0.026164516807, -0.042298801243, -0.003951132298, -0.070301905274, 0.015961825848, 0.018959261477, 0.006301477551, 0.022175095975, 0.009139373899, 0.065963596106, 0.018181860447, -0.008682340384, 0.023956306279, 0.010333634913, 0.003612168133, 0.046786531806, -0.047018390149, 0.038724832237, 0.013122424483, -0.065509825945, -0.011507764459, 0.043886899948, -0.036983750761, 0.037178009748, 0.022168457508, -0.008085653186, 0.060242474079, -0.048870813102, -0.033791538328, -0.045342504978, 0.030870154500, -0.051830843091, 0.024354614317, -0.056386988610, 0.055070817471, 0.011179842055, -0.046645838767, -0.037503316998, 0.012520186603, -0.019948370755, -0.028320770711, 0.056943356991, 0.030001990497, 0.025734774768, 0.058942511678, -0.035561643541, 0.038036920130, 0.041676223278, 0.046360678971, 0.005275115371, -0.021961137652, -0.017120864242, 0.004291184247, 0.054995685816, 0.060521110892, -0.038329478353, 0.005271069705, -0.057379521430, 0.037150494754, 0.041261188686, 0.002239599824, -0.025252029300, -0.025081567466, -0.059524107724, 0.048280753195, 0.042699828744, -0.002996280789, 0.039252586663, 0.057023584843, 0.063247933984, 0.057578638196, 0.031677410007, -0.056209385395, -0.022817999125, -0.014032937586, 0.026745833457, -0.002445735037, -0.004394285381, -0.014226164669, 0.052211396396, 0.027907714248, -0.049766473472, -0.062904126942, -0.070826977491, -0.003165438771, -0.040726207197, 0.001847349107, -0.031303167343, 0.048579975963, -0.005487836897, 0.060010597110, -0.030561022460, -0.021148532629, -0.036511022598, 0.041406512260, 0.039376884699, -0.028049476445, 0.029011517763, 0.012811817229, 0.016981095076, -0.050760105252, 0.015718385577, -0.064411252737, -0.001211687922, 0.034933336079, -0.032553296536, 0.032118834555, 0.018174804747, -0.060641575605, -0.043163783848, 0.064930006862, 0.038996241987, -0.035686131567, 0.003460787237, 0.000242799520, -0.028581086546, 0.054478615522, -0.068593174219, 0.062781363726, -0.053710706532, -0.014747086912, -0.033043764532, 0.024016752839, 0.036751240492, -0.049122229218, -0.070103280246, -0.062932848930, 0.012560278177, 0.048953935504, 0.057450160384, 0.038108482957, 0.045101717114, -0.015039116144, -0.022438511252, 0.059917837381, -0.038274936378, -0.036809280515, -0.070262834430, -0.012762933969, 0.055730998516, 0.006019651890, -0.057200938463, -0.025980323553, -0.030439615250, 0.049555763602, -0.034803807735, -0.048216212541, -0.043232314289, -0.049937125295, -0.063194207847, -0.010083936155, -0.016719233245, -0.001987628639, -0.039256371558, 0.025996550918, -0.045888222754, -0.022233445197, -0.034204836935, -0.023645263165, 0.012719936669, -0.023429822177, 0.027054332197, 0.024592131376, -0.018676355481, 0.026735387743, -0.037780854851, 0.044888690114, 0.050395950675, 0.056963577867, -0.070545896888, -0.046065226197, -0.007397517562, 0.015083283186, -0.027857918292, 0.033602528274, 0.029276601970, 0.010269492865, 0.027143098414, 0.069218158722, 0.032454416156, -0.044430121779, 0.043441891670, -0.049066845328, -0.018210541457, 0.024494551122, -0.059852354228, 0.003523901105, 0.026970393956, -0.064600691199, -0.052811503410, 0.042028538883, -0.030541218817, -0.065412610769, 0.038582570851, 0.029270730913, -0.007527291775, 0.059439152479, -0.022651337087, 0.050070546567, -0.065923035145, 0.044990293682, 0.050699025393, 0.068463370204, -0.014596171677, 0.042195267975, -0.049627497792, 0.039375096560, 0.021277457476, 0.065337941051, -0.012468826026, -0.039873477072, -0.045949980617, -0.041471056640, 0.025682084262, -0.028039772063, -0.003292061388, 0.025730073452, -0.067288778722, 0.032859809697, 0.020660355687, -0.029815196991, -0.065888732672, -0.065814778209, 0.052274852991, 0.024880953133, 0.062154665589, -0.063819475472, 0.032080829144, -0.015961188823, 0.061622142792, 0.027953341603, 0.064551427960, -0.045699246228, 0.031637251377, -0.045203685760, -0.035034544766, 0.042595133185, -0.052057676017, -0.008117347956, -0.063242301345, 0.024801805615, -0.004844404757, 0.070827960968, -0.009186297655, 0.067566573620, 0.035442970693, -0.057286124676, -0.001932002604, -0.006475657225, 0.030388355255, -0.024813644588, -0.039748247713, -0.003132194281, -0.006410285830, -0.065655410290, -0.057751197368, -0.037595126778, 0.022950954735, -0.013439126313, -0.030734807253, 0.018405236304, 0.011026829481, -0.052173748612, 0.061510622501, 0.000037059188, -0.022068090737, 0.067190766335, -0.068453945220, 0.052114561200, -0.016926258802, -0.013222653419, -0.028693597764, -0.010139718652, -0.068855933845, -0.022118419409, 0.016926847398, 0.055654168129, 0.018562018871, -0.024431750178, -0.058205116540, -0.017598047853, 0.005714945495, 0.024079687893, 0.053558379412, 0.047183759511, 0.068032175303, 0.048811689019, -0.012996461242, 0.018121913075, 0.062768667936, -0.045169636607, -0.007952459157, -0.050669841468, 0.064664408565, -0.059631854296, -0.000331327319, -0.059241767973, 0.046255096793, -0.069986619055, -0.008476771414, 0.018395751715, 0.023188747466, 0.014505974948, 0.071132689714, -0.013726111501, 0.058428660035, -0.046738974750, -0.039154473692, 0.046787135303, 0.028715498745, 0.042949974537, -0.041914910078, 0.061168938875, 0.058553367853, -0.041873477399, -0.056274168193, 0.042987369001, 0.027401641011, 0.054795265198, -0.002998672426, 0.028423562646, 0.069231003523, 0.065050438046, -0.033611215651, 0.048206269741, -0.057527650148, 0.070250868797, 0.032536059618, 0.021407127380, -0.063818454742, -0.045725449920, -0.064451396465, 0.005762293935, 0.004252210259, -0.001306891441, 0.071359544992, -0.004832051694, 0.040764681995, -0.054028958082, -0.068008743227, 0.012797638774, 0.051868647337, 0.029901191592, 0.006890401244, -0.046791523695, 0.052050977945, 0.027441129088, 0.005503274500, 0.032962463796, -0.026195883751, 0.049183882773, -0.025424282998, 0.059314653277, 0.052139267325, 0.052550189197, 0.012556627393, -0.003030441701, 0.004366308451, 0.009006574750, 0.056268095970, -0.043502643704, 0.054605007172, 0.064240083098, 0.057619333267, -0.029915750027, 0.066854044795, -0.018177539110, -0.022163465619, 0.008449725807, -0.027312457561, 0.007185675204, -0.072001948953, -0.055373668671, -0.071202799678, -0.071059644222, -0.046589400619, -0.026160784066, 0.061434105039, -0.014739964157, 0.015625610948, 0.036084204912, 0.053577393293, -0.021778576076, 0.066753178835, -0.034907631576, 0.028205662966, 0.031002506614, 0.070790097117, 0.003404162824, -0.001187548041, -0.022725891322, 0.019951537251, -0.038700141013, -0.010245934129, -0.019915074110, 0.031909555197, 0.035692982376, 0.053630664945, 0.051151193678, -0.068246930838, 0.050296030939, -0.067924946547, 0.026416935027, -0.030430890620, -0.064070478082, 0.042767420411, -0.033184945583, -0.002880692482, 0.019772917032, -0.064302027225, 0.016803562641, 0.032715089619, -0.025075200945, 0.008807621896, 0.013058938086, -0.030268497765, 0.035586833954, -0.045177429914, 0.020981147885, 0.006603121758, -0.033688694239, 0.048971332610, -0.057372655720, -0.036569215357, 0.029377549887, 0.068437352777, 0.009579136968, 0.014196656644, 0.068318247795, 0.047882698476, 0.057898104191, 0.064306959510, 0.030356802046, 0.058575153351, -0.005974590778, 0.056254684925, -0.024952586740, -0.038348525763, 0.004044890404, -0.031093060970, -0.001663014293, -0.041012041271, -0.026445448399, 0.044955432415, 0.033667154610, 0.059824466705, -0.039368450642, -0.018154725432, -0.041810724884, -0.050205491483, -0.018211487681, -0.038562711328, -0.046225264668, 0.026004552841, 0.023164846003, -0.035919554532, -0.020394340158, -0.046046592295, -0.002749100327, -0.039119355381, -0.026532545686, -0.008424125612, -0.039722543210, 0.000933356583, -0.038629971445, 0.008730895817, 0.058022350073, -0.054323911667, -0.048736862838, -0.019280608743, -0.021332435310, -0.057105217129, 0.051065504551, -0.060745827854, 0.055596515536, 0.064694538713, 0.064102724195, 0.041660189629, -0.043276280165, 0.058429658413, -0.010418944061, -0.020339246839, -0.058864157647, -0.043093062937, 0.050525054336, 0.003074951470, -0.017531406134, 0.006305225194, -0.022294770926, 0.034090019763, -0.005662225187, -0.056040793657, -0.004806391895, 0.006075948477, -0.023421306163, -0.051210120320, 0.026422940195, 0.055078268051, -0.064477585256, -0.038718532771, -0.008567258716, -0.016240619123, -0.008300133049, 0.063985615969, -0.060137860477, 0.052906826138, -0.017632614821, 0.047367043793, 0.033210754395, -0.065795369446, 0.042197592556, 0.017801664770, 0.040234468877, 0.022999405861, -0.068929478526, -0.037317436188, 0.005011945963, 0.036316864192, -0.002009600401, 0.053009480238, 0.044621855021, 0.019846215844, 0.037096641958, -0.031865060329, -0.040461711586, 0.069613307714, -0.012146171182, -0.023787077516, -0.027636852115, 0.005325011909, -0.008138768375, 0.053384974599, 0.071138188243, 0.066152215004, -0.025074888021, 0.007413141429, -0.000320620835, 0.013085126877, 0.030095316470, 0.019025146961, 0.047199502587, -0.068858273327, 0.053521692753, -0.042043805122, -0.024112105370, 0.064675718546, -0.037040550262, 0.016561172903, 0.049340978265, -0.011404473335, 0.054114341736, 0.071864619851, -0.070903524756, 0.035781182349, 0.032544247806, 0.057658761740, 0.022574238479, 0.004370555282, 0.048786655068, -0.032292846590, 0.059784054756, -0.011142749339, -0.022308122367, 0.047028437257, -0.022980235517, 0.068203851581, -0.011297330260, -0.044478073716, 0.014664620161, 0.009086929262, 0.051477111876, 0.031798213720, -0.026049941778, 0.003192745149, 0.068317636847, 0.045396775007, -0.000136725605, -0.068698614836, -0.028815228492, -0.034035179764, 0.005068808794, -0.049131266773, 0.038792245090, 0.061373367906, 0.036622621119, 0.040160097182, -0.068892925978, 0.023908764124, -0.050513539463, -0.002088598907, 0.021502949297, 0.000908292830, 0.064309790730, -0.065439969301, 0.051983408630, 0.059662669897, 0.050035342574, 0.006036929786, -0.067854337394, -0.070506595075, -0.021605327725, 0.069613307714, -0.007417872548, -0.050288103521, 0.002540916204, 0.042077735066, -0.011740926653, 0.045687496662, 0.016282171011, 0.062489658594, -0.020835563540, -0.057139854878, -0.002254225314, 0.023607082665, -0.029572155327, 0.054322987795, -0.035702373832, -0.048977475613, 0.060405433178, -0.066667057574, 0.034029178321, 0.063928291202, -0.032239489257, 0.016855537891, -0.036218307912, 0.008319504559, 0.029853843153, -0.010753884912, -0.030650068074, 0.046647503972, -0.057035222650, 0.012167200446, -0.058808166534, -0.007763944566, -0.055368043482, 0.033389993012, -0.044345878065, -0.067000418901, -0.019546017051, -0.041965134442, -0.003383688629, 0.049218483269, -0.038185909390, 0.022322267294, 0.007189802825, 0.026717238128, -0.043517217040, 0.013813778758, 0.043651655316, 0.058798119426, -0.014971114695, -0.060035273433, 0.060072079301, 0.069933772087, -0.056043930352, 0.054990515113, -0.011417619884, 0.064899533987, 0.061473906040, 0.027474269271, -0.040763426572, 0.050561182201, 0.032145850360, 0.019493900239, 0.002635382116, -0.032434917986, 0.028698384762, 0.037539549172, -0.025164984167, -0.049561046064, -0.048837020993, -0.003025293350, -0.005962543190, 0.038601957262, -0.038741849363, 0.069352909923, -0.051337607205, 0.050354227424, -0.059309147298, -0.039418213069, 0.063025951385, -0.068915575743, -0.049276538193, 0.020706258714, 0.011462956667, -0.049702480435, 0.049837447703, 0.010573871434, 0.045848064125, -0.013699889183, -0.041543714702, -0.063663102686, -0.019828338176, 0.055124923587, -0.005929470062, 0.024125732481, 0.008130826056, 0.013999402523, -0.048420470208, -0.003274202347, -0.033208172768, -0.041012469679, 0.046631917357, 0.047111749649, -0.058976858854, 0.060107454658, 0.066116333008, 0.057704582810, 0.070684835315, 0.070947170258, 0.055175557733, -0.030847940594, -0.046997711062, -0.012294661254, 0.056839168072, 0.025037243962, -0.035304237157, -0.057365737855, 0.035285413265, 0.058590948582, -0.012651763856, 0.023132011294, 0.037749156356, -0.019150871783, -0.042036160827, 0.020032420754, -0.014961529523, -0.069696396589, 0.041263148189, 0.017795234919, 0.070041507483, -0.063104823232, -0.011616233736, 0.032073326409, 0.068559572101, -0.030225396156, -0.071215309203, -0.004734024405, -0.052257113159, -0.040619168431, 0.024854563177, -0.002307079732, -0.033050097525, -0.065261073411, -0.046612441540, -0.016986135393, 0.027919001877, -0.061278074980, 0.060649350286, 0.058367282152, 0.005481161177, 0.055511325598, 0.002024985850, 0.054083675146, 0.038807883859, -0.014487769455, -0.055856995285, 0.048374250531, 0.005896076560, 0.001676209271, -0.059594497085, -0.036166965961, -0.063925325871, -0.015461839736, 0.053147643805, 0.009890556335, -0.060988746583, -0.053256478161, 0.001842372119, -0.021933313459, 0.049736566842, -0.070550985634, 0.008446492255, 0.046756386757, -0.064093641937, 0.031067162752, -0.015307430178, -0.002020992339, -0.071925051510, -0.002848759294, -0.057840086520, -0.015878133476, -0.056381016970, 0.038931407034, 0.030433520675, -0.054314084351, 0.041871979833, 0.013608403504, -0.023328322917, -0.006466791034, -0.018908124417, 0.025084353983, 0.071873143315, 0.012920334935, -0.007478043437, 0.069934427738, 0.005175337195, 0.006001673639, -0.043335966766, -0.048238959163, -0.012828543782, -0.012577038258, 0.049079440534, 0.019041612744, 0.049606814981, 0.021077007055, -0.062308855355, 0.009173735976, -0.034766450524, 0.032097928226, 0.020925313234, -0.056338846684, -0.048291973770, 0.061412930489, -0.041101515293, -0.056571509689, -0.035291299224, 0.026457354426, -0.051163494587, 0.060872152448, -0.025328427553, 0.027328446507, 0.004323102534, 0.068206548691, -0.062706843019, 0.013030409813, 0.000779777765, 0.047109343112, 0.005024075508, -0.034696541727, -0.067156910896, 0.071653932333, -0.040559031069, 0.010696157813, 0.032532528043, 0.068388372660, 0.019246265292, 0.006651416421, -0.060308113694, -0.026148051023, -0.068224668503, -0.056526429951, 0.067901924253, 0.067138731480, 0.025117322803, -0.022362116724, -0.007610172033, 0.028955630958, 0.050003625453, 0.031593166292, 0.068221226335, 0.042879603803, -0.037019196898, 0.049955517054, 0.049069598317, 0.036151029170, -0.052783958614, 0.009893499315, 0.040506482124, 0.010920614004, 0.052889928222, 0.040979832411, -0.064661502838, 0.001968823373, -0.016612000763, 0.033834464848, -0.048762671649, 0.013136364520, 0.017067641020, -0.002798579633, 0.049934424460, -0.050247803330, -0.047268141061, -0.063686572015, 0.007966332138, 0.056679099798, 0.042667225003, -0.035291299224, 0.047845035791, 0.060559988022, 0.043072313070, -0.055939640850, 0.031867399812, -0.002434857190, -0.057087477297, 0.041233919561, 0.036361709237, 0.063927635550, 0.056308090687, -0.063994683325, -0.034816797823, 0.015209749341, 0.021539337933, 0.057335779071, -0.011865623295, 0.040019750595, 0.020101606846, -0.053795434535, 0.020091183484, -0.013483107090, -0.067290291190, 0.042617291212, -0.002837486565, -0.046584360301, -0.046623833477, -0.056698597968, -0.031993694603, -0.036696456373, 0.058087378740, 0.016504392028, 0.057092964649, -0.029682721943, -0.056392788887, 0.067408770323, 0.044179044664, 0.071225360036, -0.007737554610, 0.028799690306, -0.061904042959, -0.016624975950, 0.062565371394, -0.012130808085, 0.063065409660, 0.007524505258, 0.021339505911, 0.066559106112, -0.068069964647, 0.035752877593, -0.035971775651, 0.022553861141, -0.067796744406, 0.045028731227, 0.049304224551, -0.004314586520, -0.070339076221, -0.020047772676, 0.010832399130, -0.021232672036, -0.053683571517, -0.037140037864, -0.058262467384, -0.021870873868, -0.055242091417, 0.058624148369, -0.026874847710, 0.000973969698, 0.055265411735, 0.023791790009, 0.068757653236, 0.066226065159, -0.022307485342, 0.004962183535, -0.018203813583, -0.023397799581, 0.036914132535, -0.010755602270, -0.021992262453, 0.037800207734, 0.011425517499, -0.039439152926, 0.026031516492, 0.038195960224, 0.049796946347, -0.041562352329, -0.070807948709, -0.011654105037, 0.021343685687, 0.033829323947, 0.027599148452, -0.056516982615, 0.029095761478, 0.069534555078, -0.071528136730, -0.070567697287, 0.000570014119, 0.035758189857, -0.015147894621, -0.021012533456, 0.015236347914, -0.066484004259, -0.012994430959, -0.035195045173, 0.024241946638, 0.067410290241, -0.056151811033, -0.053279001266, 0.044173814356, 0.063524737954, 0.063377737999, -0.038030002266, 0.029057905078, 0.071763068438, 0.016014046967, -0.002540074289, 0.012956440449, 0.056337073445, 0.024921305478, -0.038239385933, 0.063568443060, -0.047602478415, 0.028783313930, 0.011370405555, -0.002449430525, 0.026804439723, -0.070841602981, 0.007884755731, 0.061812192202, -0.037185374647, 0.009103089571, 0.031486190856, 0.008472763002, -0.064206153154, 0.010687567294, 0.019300222397, 0.059319913387, 0.068265259266, 0.002410888672, 0.001576222479, -0.040345586836, -0.005297377706, 0.035690590739, 0.043521709740, -0.068156272173, -0.028988670558, -0.023971375078, -0.006039284170, 0.033746264875, -0.022435035557, -0.033070333302, -0.007618658245, 0.039902657270, 0.052154429257, 0.058755218983, 0.001585498452, 0.056904122233, 0.001618087292, -0.017511568964, -0.067544326186, -0.041884317994, 0.022434540093, -0.071411237121, -0.038207400590, -0.062249753624, -0.010575953871, 0.050314843655, -0.019960861653, 0.066296517849, 0.063267201185, 0.024012774229, 0.032251842320, -0.040276434273, 0.006130598485, -0.052893612534, 0.013772517443, 0.062234923244, -0.041344985366, -0.037291280925, 0.032377466559, -0.004213087261, 0.062932848930, 0.019183456898, 0.028092458844, -0.006714083254, 0.064937144518, -0.022659957409, -0.038892745972, 0.010485202074, 0.027983143926, 0.031433127820, -0.055267766118, 0.030378721654, 0.043260961771, -0.046147577465, -0.070017248392, -0.056788913906, -0.067823499441, -0.003420576453, 0.031958952546, 0.022238679230, 0.013577327132, 0.070492550731, -0.038646936417, -0.005390517414, 0.035080328584, -0.040598139167, -0.034655090421, -0.022127971053, -0.037418816239, 0.042116686702, 0.042896926403, 0.017505496740, -0.008401997387, -0.059765443206, 0.040404915810, -0.055986080319, 0.024481959641, 0.038268670440, 0.064440593123, 0.027679800987, -0.002183645964, -0.047285899520, -0.025159478188, 0.042768932879, 0.027057528496, -0.030760549009, 0.059464141726, -0.053924307227, -0.063190013170, 0.053897157311, -0.071048974991, -0.007372468710, 0.044475443661, 0.022461086512, 0.028684511781, 0.016350790858, 0.063329339027, 0.000867061317, -0.057810336351, -0.024769805372, -0.049054130912, -0.005229949951, -0.013546373695, -0.000051036477, 0.007301419973, 0.000257283449, 0.048394814134, 0.058703735471, 0.024588860571, -0.070449352264, -0.035345118493, -0.020758308470, -0.033291399479, -0.059037648141, -0.016680069268, 0.028965599835, -0.055833511055, -0.030014049262, 0.028019949794, 0.067995011806, -0.061008021235, -0.058106612414, 0.000319436193, 0.029478847980, -0.017117749900, -0.012017603964, 0.030359916389, 0.009984329343, -0.008718296885, 0.027148619294, -0.037069715559, 0.039656914771, -0.013138599694, 0.006080888212, 0.060631141067, -0.071645401418, -0.038501285017, -0.005655355752, 0.052354723215, 0.050917387009, 0.042969577014, 0.056315928698, 0.009412437677, 0.069371327758, -0.042739078403, 0.020520977676, -0.049279034138, 0.052408888936, -0.037768226117, -0.049574039876, -0.036860242486, -0.068766735494, -0.012383274734, 0.022346511483, 0.052325025201, 0.030424080789, -0.029565840960, 0.022503033280, -0.009536154568, -0.009323671460, 0.051895007491, -0.019244164228, -0.024890333414, 0.028884619474, 0.045133262873, -0.065408274531, -0.027885604650, 0.016333155334, -0.068573266268, 0.027232810855, -0.015866398811, 0.008498474956, 0.063103467226, -0.014096256346, -0.040566962212, 0.052618518472, -0.006046906114, -0.024893190712, 0.043988190591, 0.029341712594, 0.070137307048, -0.046637684107, 0.064550906420, -0.009113080800, 0.029301777482, 0.006573885679, 0.005131132901, 0.048913106322, -0.003598041832, 0.063430339098, 0.057885408401, -0.062787108123, 0.024970017374, 0.000796496868, 0.015746638179, 0.012164756656, 0.047662615776, 0.031940490007, 0.069640010595, 0.014474920928, 0.014972336590, -0.029400400817, 0.003170154989, 0.030120216310, 0.054420620203, 0.065282553434, 0.002379283309, -0.055725216866, 0.000690028071, 0.038003899157, -0.001257047057, -0.018478412181, 0.065508171916, -0.022186402231, -0.065988786519, -0.040949512273, -0.071482747793, -0.016264021397, 0.049323737621, -0.026731934398, -0.025427620858, 0.015043482184, 0.070083528757, 0.048679560423, 0.055451080203, -0.051658794284, 0.052692368627, -0.024167064577, -0.057705219835, -0.007749974728, 0.004881635308, -0.023464769125, -0.045939464122, -0.052327677608, -0.022169351578, 0.060541465878, -0.005046702921, 0.045961543918, -0.007085122168, -0.025900710374, -0.060233905911, -0.070176631212, -0.069771021605, -0.051439709961, 0.071389570832, 0.017087928951, 0.058555185795, -0.020512893796, 0.002360939980, 0.064054891467, -0.048868469894, 0.032453864813, -0.010737951845, -0.033343829215, 0.027461022139, 0.034465305507, -0.035967387259, 0.059044525027, -0.003079771996, -0.013161536306, 0.008286058903, 0.000149145722, 0.021637678146, 0.065856903791, -0.071043051779, 0.071112379432, -0.034784432501, -0.060735505074, -0.053730960935, 0.001137495041, 0.027136474848, -0.010049041361, -0.033617891371, -0.056896761060, -0.055168069899, 0.008306257427, -0.000691093504, -0.005461096764, -0.067292012274, 0.070663854480, -0.057566642761, -0.064594760537, 0.067999884486, 0.016041539609, 0.043657742441, 0.012787610292, -0.053480435163, 0.071287214756, 0.065072938800, 0.067547783256, -0.041962347925, -0.008065074682, 0.055054709315, 0.031993091106, -0.065605819225, 0.034555412829, -0.003575727344, 0.028513684869, 0.011265739799, 0.016384512186, -0.019094005227, -0.072005562484, 0.058059737086, 0.038041189313, 0.059672415257, -0.000986702740, 0.069286540151, 0.040440253913, 0.049970388412, -0.067885339260, -0.022826582193, 0.036627627909, -0.044090364128, -0.022425588220, -0.039328791201, -0.020624168217, -0.036176841706, 0.037436917424, 0.040549099445, -0.002983257174, -0.033777378500, 0.036808386445, -0.037332560867, 0.069506719708, 0.023560158908, -0.003516137600, 0.053408637643, -0.049023397267, -0.051718689501, 0.070080235600, 0.008854642510, 0.006533414125, -0.043346446007, -0.020136866719, 0.009915366769, 0.060640320182, -0.055316939950, 0.040377333760, 0.001806363463, -0.015259683132, 0.057734921575, -0.071923159063, 0.058386057615, 0.057476595044, -0.063121117651, -0.061992105097, 0.052256703377, -0.002594791353, 0.024582080543, -0.022219285369, -0.032752823085, 0.068567603827, -0.027487102896, -0.016467742622, -0.018954031169, -0.041004933417, 0.069812640548, 0.032231867313, -0.061612322927, 0.011926494539, 0.012572444975, 0.022538982332, -0.037796545774, 0.026515871286, -0.035236444324, 0.068592816591, -0.071155466139, 0.027624964714, 0.052863240242, 0.057263195515, -0.018447611481, -0.012888833880, -0.004776768386, -0.062657341361, -0.010321177542, 0.050382189453, -0.044740267098, 0.018044762313, 0.027278803289, -0.026326552033, -0.008020274341, -0.029227666557, 0.001396417618, 0.060808613896, 0.011782564223, 0.041111662984, 0.059642657638, -0.002955071628, -0.047754392028, -0.036979638040, 0.020418621600, -0.028546929359, 0.030351549387, -0.025894273072, 0.054093465209, 0.023794233799, 0.003793992102, -0.011731550097, -0.002973534167, -0.060763534158, 0.015660800040, -0.058112513274, 0.039666138589, -0.050401009619, -0.000305995345, -0.043278153986, 0.034631878138, -0.028062380850, -0.029582358897, 0.062034502625, 0.007062137127, -0.044504228979, -0.043666951358, 0.023543126881, 0.025732241571, -0.004310764372, 0.060333281755, 0.029072910547, -0.051530830562, 0.045985132456, -0.041680887341, -0.006075471640, -0.037476800382, -0.060448125005, -0.045425441116, 0.044343605638, -0.044115655124, -0.009478151798, -0.020960621536, 0.009827591479, -0.072164930403, -0.006594635546, -0.010419219732, 0.003253675997, -0.059322588146, 0.071988970041, 0.067935824394, 0.021466784179, 0.060861170292, 0.028137572110, 0.018818773329, 0.006529025733, -0.018247760832, -0.045746203512, -0.059142574668, -0.007164016366, 0.001716077328, 0.063477650285, -0.054142881185, -0.044194877148, 0.012297213078, 0.045231424272, 0.037549965084, 0.023637592793, 0.009517483413, 0.007563389838, -0.034824091941, -0.059916190803, -0.000866360962, -0.007100954652, 0.031863078475, 0.002115108073, 0.011398695409, 0.032056033611, -0.010837230831, -0.043094407767, 0.061422377825, -0.025132015347, -0.010502427816, -0.049751505256, -0.021709922701, 0.047720395029, -0.059399086982, -0.021480116993, 0.060006111860, -0.022922284901, -0.042513571680, 0.041287459433, -0.040382783860, -0.014339968562, -0.014990042895, 0.010634593666, 0.069503158331, 0.064609721303, 0.038082517684, -0.050774596632, 0.043220855296, 0.047015532851, 0.061950981617, 0.027788005769, 0.044917650521, -0.042738940567, -0.004243090749, 0.049780651927, 0.055345997214, -0.028950575739, -0.056500792503, 0.037221990526, -0.020311322063, -0.019299209118, 0.014912009239, -0.003546439111, -0.020695589483, 0.043394953012, 0.056594207883, -0.044608000666, 0.030059248209, -0.001514524221, 0.062385246158, -0.045156180859, 0.067945644259, -0.035066738725, -0.044537834823, 0.047081865370, 0.015330329537, 0.008653551340, 0.015748739243, -0.039442010224, 0.022636882961, -0.038640070707, -0.051292538643, -0.017445083708, -0.050240993500, 0.042563125491, -0.032635509968, 0.048093408346, 0.008422277868, 0.028895825148, -0.025800619274, -0.006749704480, -0.066214032471, 0.060424298048, 0.062940344214, 0.043491154909, 0.069513678551, 0.002780929208, 0.025070831180, 0.052098833025, -0.026578918099, 0.058886766434, -0.005099229515, -0.011398985982, 0.003463454545, -0.008346140385, -0.005510717630, -0.056928403676, -0.040359642357, 0.005795024335, -0.026539497077, 0.001730822027, 0.001536406577, -0.011567626148, 0.008735418320, 0.024995788932, -0.054670326412, 0.058086842299, -0.018697466701, 0.046608343720, -0.035553108901, 0.000531524420, 0.051226109266, 0.019654281437, -0.034398302436, 0.002772428095, -0.047475665808, 0.033824108541, 0.015487171710, 0.061769276857, -0.026983302087, -0.003947645426, -0.018099837005, 0.047082625329, 0.019204020500, 0.008045807481, -0.065803922713, -0.001778505743, 0.041646525264, -0.031236872077, 0.023353613913, 0.015313781798, -0.019871886820, -0.025338869542, -0.062551349401, -0.021988701075, 0.004189580679, 0.036607220769, -0.058105148375, 0.025061592460, 0.045191280544, -0.011933967471, -0.068251989782, -0.007861539721, 0.032741039991, -0.013442777097, 0.039365753531, -0.037603490055, 0.042802929878, -0.020803321153, -0.026630226523, 0.041066981852, -0.049580492079, -0.046531826258, 0.002450771630, -0.020274069160, -0.023805111647, -0.066703334451, 0.036225102842, -0.066156804562, 0.005603238940, -0.046483598650, 0.003123544157, 0.058041423559, 0.041409455240, 0.007269486785, 0.020946837962, -0.069963887334, 0.046956703067, 0.016055271029, 0.017109937966, 0.061449438334, -0.046290442348, 0.069322213531, 0.005608558655, 0.009548231959, -0.034911517054, 0.036094971001, 0.051447331905, 0.042874030769, 0.014776870608, -0.054164543748, -0.036251876503, 0.038714267313, 0.007266893983, 0.050573229790, 0.031209670007, 0.033253908157, 0.041610233486, -0.065758131444, 0.026942387223, 0.036426968873, 0.013245932758, 0.041350126266, -0.054625865072, 0.012948006392, -0.010919064283, 0.037484437227, 0.035532549024, 0.043291814625, -0.048825025558, -0.009784821421, -0.043472208083, 0.040118664503, 0.018695384264, -0.010950017720, 0.024561420083, -0.015499625355, -0.014678262174, -0.055156938732, 0.004987664521, 0.043940752745, -0.002516381443, 0.045814976096, -0.026467781514, 0.053711175919, -0.018341500312, 0.003532417119, 0.008206635714, -0.059709951282, -0.034181591123, -0.053545065224, -0.032424423844, -0.027135234326, 0.027085833251, -0.043278962374, -0.051417753100, 0.057577744126, 0.063758939505, 0.043182365596, 0.037814423442, -0.033896032721, -0.038810465485, -0.023326601833, -0.038352672011, -0.055100500584, 0.043021038175, -0.044788599014, -0.041244171560, -0.008616216481, -0.053498744965, -0.013886906207, -0.002710901201, -0.043503180146, 0.056160032749, 0.063175782561, -0.071731239557, 0.050325371325, 0.057154640555, 0.069481238723, 0.005054168403, 0.039084322751, 0.071008130908, -0.011810183525, 0.015981867909, -0.014852203429, -0.066546306014, -0.025448027998, -0.069745503366, 0.021436430514, -0.063239172101, -0.002963989973, -0.071460187435, 0.033183053136, -0.008210279047, -0.004078701138, 0.034672781825, -0.007037840784, -0.054902300239, -0.016274496913, -0.015464439988, 0.056727647781, 0.061387255788, -0.060217663646, 0.070757612586, 0.051067776978, 0.029353290796, 0.012837283313, -0.053720191121, 0.018637537956, 0.051658846438, -0.056912694126, -0.019412908703, -0.065197736025, 0.005560308695, 0.003666698933, 0.032178491354, -0.051435559988, 0.005177706480, 0.019708409905, -0.057767335325, -0.026661593467, -0.002734437585, -0.036288030446, 0.041678853333, 0.038463845849, 0.028151720762, 0.037460416555, -0.046063676476, -0.064035892487, 0.036572776735, 0.037513278425, -0.038440134376, -0.033579126000, 0.024412974715, 0.018832206726, -0.037427864969, 0.026555620134, 0.062517076731, -0.010042864829, 0.009801372886, 0.040178462863, 0.046753771603, -0.027843017131, 0.018915176392, -0.042360126972, 0.055631041527, -0.049424581230, 0.054625317454, -0.027329113334, 0.044947847724, -0.031709101051, -0.022350516170, 0.048116125166, 0.042314685881, -0.064463779330, 0.012078754604, -0.010330088437, -0.064829349518, 0.069704979658, -0.039128046483, -0.011069275439, 0.035629451275, 0.051125109196, 0.009270243347, 0.053796902299, 0.025129534304, -0.021814368665, -0.053398549557, -0.019098889083, -0.011693369597, -0.024435378611, -0.049958683550, 0.051552772522, 0.012092731893, 0.007402166724, 0.025230005383, -0.042050704360, 0.047078631818, 0.013041503727, -0.051749080420, 0.025906920433, -0.031904805452, 0.065886989236, -0.008307188749, -0.037421084940, 0.039405807853, 0.021784529090, 0.070526793599, 0.053675889969, -0.025377325714, -0.043232575059, 0.015204660594, -0.065008327365, 0.018502503633, 0.049410045147, -0.053695671260, 0.019748292863, -0.011522628367, 0.010425657034, -0.070987910032, -0.069760903716, 0.045699708164, 0.009716272354, 0.037357337773, -0.003950498998, -0.031251102686, -0.034893192351, 0.054550379515, 0.036121696234, -0.033886879683, -0.010410960764, 0.012675248086, 0.060613706708, 0.038292244077, 0.032859519124, 0.016165442765, -0.061995185912, -0.054721981287, -0.001029111445, 0.014946714044, 0.068469241261, -0.007266409695, 0.033150687814, 0.018541507423, 0.025505892932, -0.071858204901, 0.025538340211, 0.003906309605, -0.020717047155, 0.046267367899, -0.011272054166, 0.067418590188, 0.001589573920, 0.063884064555, -0.007602050900, -0.024009194225, -0.014468327165, 0.004598081112, 0.067751869559, -0.023923870176, 0.055467933416, -0.026308707893, -0.017889834940, 0.064441755414, 0.050497747958, 0.046067014337, 0.008797325194, 0.016428492963, 0.061681121588, -0.023903325200, 0.023905202746, 0.019627727568, 0.006098821759, -0.056044906378, 0.063263103366, -0.060512699187, -0.032477211207, 0.048427373171, 0.034381754696, -0.006405711174, -0.070269919932, 0.025990426540, 0.032783001661, -0.019275017083, 0.059792444110, -0.004945971072, -0.027390006930, 0.028857953846, 0.070836722851, -0.010990213603, -0.014229744673, -0.009248889983, -0.052851181477, 0.016227699816, -0.071931436658, -0.032859932631, 0.041824728251, -0.016980767250, 0.069649234414, -0.025261405855, 0.055940464139, -0.010364606977, 0.003556057811, 0.063411891460, -0.047484356910, 0.062721461058, -0.007018066943, 0.038057826459, -0.028116926551, -0.062324374914, -0.044637750834, -0.007244594395, 0.032961040735, 0.042778499424, 0.001816995442, -0.034574255347, -0.011507350951, -0.055063404143, -0.068558141589, -0.062516584992, 0.007116384804, -0.020381573588, 0.007698424160, 0.063893631101, 0.014014199376, -0.023345392197, -0.034095901996, -0.068830467761, -0.018610365689, -0.034955807030, -0.071337647736, 0.024634286761, 0.020911842585, -0.022361565381, -0.030738230795, -0.032382283360, -0.031174879521, 0.042173348367, -0.031558632851, 0.059146612883, -0.028520930558, 0.025540560484, -0.033775776625, -0.050230786204, 0.028761923313, 0.014801442623, -0.040307041258, -0.070542111993, -0.058548383415, -0.035509493202, 0.039084203541, 0.052732162178, -0.049963813275, 0.069109350443, 0.005140542984, 0.025095000863, 0.002587445080, -0.016829852015, 0.035847872496, -0.005125060678, -0.051016878337, -0.025966990739, 0.045809485018, 0.023391589522, -0.028669510037, -0.045615933836, -0.050835695118, -0.022287111729, 0.056952938437, 0.002701334655, -0.039355289191, 0.039291284978, 0.052809074521, -0.030988462269, -0.014065217227, 0.026738211513, -0.007308118045, -0.050102584064, -0.000376857817, 0.056169033051, -0.021269906312, -0.026522170752, -0.056099794805, -0.010300513357, 0.056387439370, 0.051346637309, -0.054628066719, -0.057340428233, -0.046047590673, 0.044920884073, -0.035578850657, 0.061504155397, 0.059009358287, 0.002362914383, 0.013142973185, -0.036880582571, 0.070651441813, -0.005831964314, 0.012985363603, -0.028679452837, -0.052531987429, 0.034109480679, -0.010613806546, -0.047032173723, 0.056568115950, -0.020611211658, -0.020817119628, -0.023219045252, 0.051771499217, -0.018207926303, -0.017392896116, 0.034792348742, -0.053425632417, 0.053460463881, -0.028271231800, -0.006532937288, -0.020831588656, 0.071257427335, -0.043552801013, 0.005466997623, -0.027519796044, 0.036553025246, 0.027839355171, 0.026793926954, -0.011049043387, 0.051132574677, 0.023553021252, 0.003281287849, 0.067753851414, 0.063924387097, -0.020276304334, 0.022075526416, -0.055147528648, 0.022922746837, -0.036536075175, 0.069549113512, -0.047466978431, -0.051296085119, 0.028400950134, -0.063248410821, -0.019015405327, 0.061862006783, -0.064575999975, 0.028067357838, -0.031755112112, -0.009577520192, 0.000856809318, -0.012767750770, 0.071692988276, 0.049141809344, 0.059887588024, 0.032024443150, -0.011389296502, -0.020224444568, -0.031180210412, -0.009994514287, 0.048432171345, 0.030230589211, 0.004279330373, 0.026416331530, 0.065510064363, -0.013302527368, 0.030850969255, -0.005660660565, 0.002110466361, -0.056028202176, 0.049859918654, 0.050385400653, -0.018686369061, 0.023231670260, 0.008001811802, -0.026698898524, 0.012559503317, -0.052599262446, 0.017368912697, 0.025780454278, -0.013379678130, -0.021224979311, 0.060585558414, 0.014969408512, -0.008780844510, 0.028909437358, -0.008189737797, 0.005069769919, -0.010900773108, 0.023486293852, -0.068937666714, 0.026076987386, 0.041230730712, 0.033125683665, -0.004498623312, -0.064910307527, -0.009053014219, 0.064737573266, 0.013872504234, -0.028760995716, 0.031806506217, -0.058084860444, 0.053148314357, 0.068459659815, 0.069161534309, 0.046875387430, 0.004077106714, 0.060955405235, -0.064589902759, -0.027574218810, 0.018944323063, 0.035071678460, 0.067000225186, -0.028151750565, -0.064805470407, -0.046701364219, -0.055028889328, -0.037238318473, 0.055998057127, 0.014380767941, 0.024488739669, 0.035199277103, -0.007015503943, -0.005851700902, 0.018215410411, -0.063344471157, -0.006375133991, -0.069998130202, -0.034783743322, -0.006020978093, -0.058373875916, -0.031726446003, 0.006192699075, 0.058886617422, 0.039337396622, -0.016438424587, -0.028923559934, -0.055326648057, 0.007758252323, 0.029813013971, 0.052390448749, 0.024707518518, 0.014975570142, -0.039835296571, -0.000689737499, -0.064091712236, -0.069496236742, -0.058248769492, 0.066312208772, 0.040327429771, 0.001002840698, -0.048330463469, -0.001509375870, -0.009580083191, -0.040998309851, 0.070945948362, -0.056484393775, 0.024615138769, -0.001960411668, 0.054106831551, -0.023307036608, -0.064388543367, 0.007173083723, 0.011071629822, 0.008031815290, 0.057161808014, 0.061539351940, 0.063015282154, -0.047332510352, -0.049223456532, -0.009371250868, -0.009558983147, -0.041452623904, -0.019497837871, -0.034697625786, 0.057552963495, -0.001670964062, 0.000013746321, 0.070101112127, -0.036626890302, -0.028695181012, 0.066864728928, 0.036170490086, -0.069398298860, 0.043712824583, -0.040366146713, -0.019753403962, -0.026967730373, -0.001319870353, 0.014911048114, 0.047737136483, -0.008181154728, 0.044541306794, -0.060604769737, -0.015351220965, 0.050332561135, 0.024022631347, 0.029334984720, 0.051669277251, 0.064901322126, 0.022564671934, -0.049224540591, 0.070693358779, -0.026968244463, -0.057615935802, -0.039882525802, 0.063441261649, 0.044931069016, 0.063792258501, 0.051608018577, 0.045424632728, 0.035315044224, -0.013714343309, 0.042542323470, 0.020813040435, -0.035626702011, -0.034119114280, 0.002985700965, -0.008073695004, -0.031379085034, -0.008694760501, 0.040293812752, -0.058017913252, 0.024627216160, 0.072168603539, 0.042066223919, -0.062402442098, 0.000459000468, 0.045807957649, -0.006313070655, -0.006154723465, -0.036241710186, -0.000099554658, 0.044970504940, -0.026004310697, 0.015133440495, -0.031350813806, -0.019620072097, -0.033245217055, 0.055171146989, 0.034474462271, -0.041367851198, -0.000750854611, 0.008664891124, 0.035532012582, 0.009524449706, -0.031733311713, 0.060147389770, 0.007103979588, -0.033669717610, -0.010693591088, -0.043160825968, -0.011561173946, 0.070029854774, -0.008677504957, -0.070182137191, -0.004860766232, 0.030881077051, -0.022846922278, -0.071639187634, -0.040665417910, 0.034712404013, -0.006898276508, -0.042297270149, 0.061409592628, -0.000328384340, 0.054674148560, 0.042063951492, -0.064766667783, 0.012327529490, -0.057248253375, -0.041034303606, -0.043793797493, 0.026031389832, -0.008993171155, 0.071583226323, -0.052629150450, 0.047466084361, -0.046526566148, -0.000347122550, -0.055336713791, -0.068005681038, 0.014792136848, 0.055459216237, -0.021158874035, 0.055161431432, 0.070306524634, -0.005009755492, 0.057990655303, -0.013035740703, -0.071979202330, 0.001496471465, -0.041877590120, 0.070430099964, -0.008115731180, 0.053032830358, 0.013938732445, -0.059856567532, 0.050616987050, 0.071380898356, -0.069121859968, 0.043803617358, 0.025826118886, -0.010021701455, 0.012262865901, -0.054765682667, -0.030116446316, 0.003525860608, -0.025883745402, 0.037870742381, 0.054179012775, 0.027258433402, 0.034393914044, -0.049802504480, 0.028346575797, -0.001353487372, 0.066979855299, 0.010844409466, 0.042204909027, -0.061483431607, 0.047926597297, -0.004538767040, 0.046026289463, -0.057325422764, 0.066737264395, 0.013574644923, 0.018447041512, 0.069755136967, 0.052845761180, -0.044626928866, -0.054745674133, -0.043136991560, 0.002429284155, -0.020946424454, -0.066457569599, 0.013772241771, 0.014923349023, 0.009324856102, -0.003214910626, 0.030196934938, -0.001773446798, -0.029615979642, -0.059946835041, -0.049020353705, 0.029852241278, 0.004701107740, -0.056852798909, 0.027480579913, 0.039433471859, -0.035091169178, -0.023494757712, -0.047196563333, -0.066347435117, 0.041700549424, -0.003085158765, 0.067041292787, -0.055018633604, 0.010068602860, -0.052539762110, 0.058420881629, 0.060201346874, 0.026145800948, 0.021367207170, -0.025813024491, 0.066978588700, 0.054016187787, 0.049541741610, -0.048422913998, 0.034638553858, 0.047595545650, -0.024568524212, -0.026272110641, -0.072028242052, 0.064853042364, 0.029620520771, 0.016231983900, -0.034482099116, -0.042035043240, 0.069214597344, -0.038803756237, 0.068588793278, 0.065085723996, -0.000127188861, -0.033047914505, 0.046479329467, 0.068031594157, -0.043281920254, -0.071495190263, 0.017015233636, 0.033519692719, 0.046735160053, 0.018012858927, -0.027942247689, -0.049896344543, 0.066570222378, 0.067505300045, 0.024843804538, 0.053220614791, -0.029395341873, -0.022999458015, 0.046735033393, -0.018878977746, -0.007724717259, -0.059223167598, 0.009052485228, 0.052926138043, 0.059226676822, 0.067833915353, 0.050704754889, -0.010902304202, 0.059425517917, -0.058579735458, -0.050063058734, 0.056389912963, -0.007592231035, -0.028061468154, 0.009907349944, -0.008910492063, -0.043314494193, -0.055589161813, 0.071719527245, -0.051806479692, -0.033749125898, 0.057322964072, -0.040227755904, -0.021316140890, -0.001288361847, -0.044912192971, 0.036582171917, 0.042900972068, -0.023651286960, -0.070606715977, 0.018258310854, -0.011922765523, 0.003028996289, 0.036143444479, 0.006641216576, -0.042106449604, 0.052227415144, -0.011568848044, -0.041095439345, -0.045081518590, 0.047995746136, -0.025331676006, -0.030054364353, -0.051182471216, 0.037304975092, 0.013112500310, -0.042549721897, -0.019999008626, 0.050031058490, 0.057170137763, 0.058707788587, 0.008078873158, 0.065643057227, 0.004759266973, -0.068213514984, -0.059107504785, 0.010281398892, -0.028088517487, -0.061034277081, 0.030825361609, 0.029091648757, 0.034544333816, -0.040783539414, 0.035307057202, -0.053616676480, -0.061026569456, 0.071784213185, -0.010394785553, -0.035521484911, 0.056696251035, -0.035748470575, -0.039677634835, -0.002727746964, -0.071634061635, -0.018784582615, -0.039658896625, -0.053993582726, -0.001078478992, 0.045068114996, 0.063139811158, 0.068480581045, 0.061713457108, 0.022065803409, -0.033033821732, -0.054671891034, -0.067992590368, 0.016604311764, -0.042106762528, 0.069494500756, -0.037682827562, -0.036464065313, -0.011090010405, 0.063043624163, 0.059208452702, -0.030925314873, -0.016572307795, -0.013978015631, -0.025720439851, -0.072111330926, 0.070386484265, -0.019952036440, 0.028533987701, -0.071197330952, -0.057619601488, -0.011662654579, -0.031354013830, 0.003762677312, -0.033910140395, -0.035292606801, -0.006237931550, 0.011851824820, 0.043745428324, 0.057578459382, 0.047831237316, -0.062099557370, -0.057683195919, 0.069327369332, -0.010999038815, 0.007992841303, -0.069028839469, 0.027930170298, 0.006430938840, 0.008894771338, -0.070490472019, -0.003685005009, -0.043785586953, 0.012886784971, -0.056507106870, -0.064462423325, 0.012487582862, 0.012532815337, 0.047161839902, -0.053676947951, 0.033204682171, -0.057332117110, -0.062805652618, -0.043753858656, -0.065572440624, -0.068577654660, -0.070734180510, -0.000164903700, -0.019699256867, -0.007100090384, 0.031158067286, 0.053989037871, -0.032903756946, -0.054157093167, -0.013940695673, -0.012223739177, -0.066968567669, -0.010388541967, 0.017665997148, -0.046154838055, 0.043986111879, 0.024101234972, 0.030229046941, 0.041839800775, 0.006314277649, -0.011673100293, -0.047354895622, 0.024065494537, -0.034213576466, 0.053697496653, 0.070048049092, -0.017126541585, 0.010576762259, -0.021091837436, 0.034550838172, 0.066141873598, 0.032231815159, 0.025267362595, -0.067910872400, 0.064716249704, -0.013384737074, 0.058936968446, 0.005845077336, 0.043921686709, -0.007648371160, -0.024797935039, 0.000724665821, -0.008623644710, -0.019639000297, -0.058267802000, 0.018256947398, -0.016035139561, 0.019814282656, 0.035101272166, -0.028295855969, 0.070620968938, 0.011887490749, -0.024457369000, -0.049807596952, -0.040930051357, 0.012864500284, 0.055478990078, 0.011189170182, -0.035328567028, 0.034077815711, 0.061669841409, 0.069188654423, -0.007811181247, -0.054318919778, -0.067739412189, 0.001834958792, 0.048727981746, 0.003384962678, -0.018044706434, 0.059277489781, -0.000523090363, 0.045748315752, -0.036378808320, 0.049764715135, -0.043105624616, 0.056948944926, -0.053522694856, 0.046070218086, -0.051819246262, -0.035833746195, -0.069604329765, -0.040243346244, -0.017563048750, -0.040347907692, 0.012986913323, -0.057947419584, -0.002030268312, -0.062036480755, 0.018002517521, -0.057800028473, -0.052734624594, -0.034578092396, -0.039316747338, -0.047269087285, 0.011756278574, -0.000128202140, 0.047807753086, 0.011640869081, -0.066941194236, 0.036858990788, -0.018187865615, -0.010437905788, 0.058472841978, 0.026643611491, -0.040879927576, 0.045951955020, -0.009599834681, 0.000921122730, -0.034872151911, 0.069133818150, -0.004217594862, 0.002248153090, 0.023786835372, 0.066771447659, -0.052780702710, -0.063397623599, -0.055553153157, 0.039357557893, -0.029646590352, -0.028899092227, 0.022480234504, -0.025288749486, -0.049865100533, 0.033108979464, -0.014593143016, 0.023075044155, 0.042340800166, -0.010914299637, -0.049153186381, 0.039702311158, -0.035845447332, 0.045792572200, 0.070649385452, 0.002288021147, 0.020812511444, 0.003670394421, 0.023339644074, 0.014976330101, 0.053051456809, 0.020451433957, -0.011626314372, 0.019575573504, 0.054370716214, -0.062394939363, 0.007688976824, 0.063800930977, 0.057952016592, -0.023506905884, 0.052915096283, 0.031458854675, 0.060207307339, 0.042275592685, 0.071305304766, -0.003984741867, -0.022794853896, -0.052626568824, -0.068388834596, -0.062611415982, -0.004038512707, -0.027237232774, 0.061489373446, 0.061033964157, 0.003093466163, 0.040367953479, 0.069449320436, -0.025404218584, 0.033281043172, 0.060227945447, 0.006855845451, -0.005438886583, 0.049580939114, -0.065562941134, -0.038433268666, -0.069455184042, -0.037731695920, -0.064094826579, 0.068370610476, -0.063342787325, -0.062376942486, 0.060075432062, -0.005875118077, -0.052920073271, -0.069561086595, 0.040869005024, 0.052408479154, -0.035475596786, 0.069153547287, -0.018311578780, -0.071211181581, -0.022177334875, 0.050815686584, -0.000044837594, -0.070587925613, 0.017120435834, -0.050924599171, 0.045709177852, 0.067583590746, 0.003746360540, 0.008008688688, 0.016777403653, 0.016747675836, 0.068623229861, -0.067286968231, -0.037435971200, 0.042277909815, 0.012687206268, 0.035551093519, -0.061120823026, -0.035265300423, 0.062148481607, 0.042299419641, -0.042243517935, -0.052224233747, 0.020799778402, 0.057699203491, 0.064994096756, 0.055848732591, 0.019721180201, -0.010044775903, -0.042080573738, 0.029125288129, 0.062333419919, 0.048996709287, 0.054784134030, -0.071074955165, 0.023454017937, 0.048316940665, 0.053783714771, -0.010423313826, -0.013715788722, -0.041000235826, -0.023798141629, 0.006437182426, -0.000139288604, 0.032679975033, -0.027167737484, -0.044705957174, -0.030061382800, -0.000439293683, -0.045244894922, -0.039260517806, 0.058276623487, 0.049905776978, 0.057426378131, 0.034214213490, 0.000993907452, 0.009747788310, -0.066588960588, -0.071388125420, -0.015359222889, 0.053032279015, -0.036459319293, -0.047135517001, 0.031807690859, -0.010827250779, -0.003023386002, -0.023510348052, 0.057661831379, 0.066961482167, -0.059709042311, 0.063069418073, 0.008944116533, 0.052433103323, 0.055839374661, 0.019516199827, -0.023834429681, 0.025868721306, 0.055523499846, 0.022119887173, 0.058941647410, 0.063053816557, -0.021687366068, 0.024208620191, -0.005636930466, -0.044944129884, 0.020492173731, 0.010987766087, -0.009633749723, 0.023163706064, 0.020623408258, 0.007345572114, 0.053010225296, -0.057508017868, -0.063220486045, -0.064304538071, -0.005151569843, 0.040944539011, 0.036461159587, 0.030367553234, -0.005292750895, -0.026651389897, 0.058624997735, 0.034724555910, -0.009207181633, 0.036308333278, -0.052291285247, 0.012646429241, 0.026066564023, -0.068161241710, -0.008941814303, -0.026693202555, -0.040339443833, 0.029329769313, -0.009178832173, -0.022972114384, -0.039562642574, -0.054108880460, -0.068320557475, 0.060284942389, 0.004311680794, 0.054420515895, -0.053262807429, 0.017119586468, -0.021432247013, -0.015220608562, -0.042545557022, 0.040844067931, -0.027083218098, 0.058414325118, -0.050765164196, -0.020698498935, -0.047788135707, -0.056928902864, 0.022773109376, 0.058742254972, -0.010662447661, 0.020792603493, -0.067495822906, -0.049577064812, 0.053962871432, -0.061286900192, -0.045965634286, 0.055419117212, -0.030767310411, -0.056105270982, 0.041503146291, -0.008099041879, -0.032102782279, -0.030834708363, 0.000639043748, 0.031483642757, 0.004911489785, -0.070010773838, -0.016653142869, 0.034629881382, 0.015007972717, 0.069924741983, 0.030467212200, -0.027157120407, -0.017546445131, 0.015647619963, -0.009684730321, -0.001593962312, 0.063681229949, 0.065123319626, -0.035746734589, -0.017524454743, -0.046338431537, 0.004766270518, -0.027174256742, -0.008606031537, -0.048253394663, -0.007438383996, 0.006718784571, 0.050577066839, -0.019128177315, 0.009748980403, -0.015946526080, 0.051127411425, 0.038630090654, -0.011246759444, -0.047284863889, 0.057858422399, 0.040911093354, 0.053369641304, -0.041856423020, -0.037786774337, 0.044328950346, 0.019015453756, 0.070646047592, -0.032573018223, 0.071476116776, 0.069850221276, 0.056038528681, -0.006138376892, 0.008421130478, 0.042687028646, -0.026868499815, 0.037709191442, 0.060807675123, 0.050449892879, 0.034332871437, 0.008680999279, -0.011758152395, -0.016226131469, 0.058393225074, 0.023382745683, -0.060657233000, -0.037398252636, 0.062192589045, 0.005412213504, 0.052412331104, 0.061184689403, -0.040649347007, -0.018300462514, -0.016082268208, -0.049847636372, -0.049450807273, -0.071931354702, -0.063084743917, -0.050767179579, 0.008730396628, 0.031299620867, 0.000332340598, 0.006553873420, -0.063822895288, 0.018231518567, 0.065080001950, -0.055728465319, -0.002412475646, -0.000403232872, -0.051080182195, -0.005792409182, -0.032628472894, 0.049604460597, -0.058676745743, -0.044483460486, -0.032138694078, 0.013622373343, -0.011136054993, 0.004473142326, -0.063097439706, -0.005090527236, 0.054402872920, -0.015517264605, -0.023600991815, 0.064338371158, 0.035348750651, -0.001585118473, -0.013970531523, -0.050325490534, -0.027560643852, -0.005516812205, -0.050166659057, 0.006468757987, 0.002053990960, -0.026689071208, 0.005094878376, -0.017600506544, 0.009181872010, 0.046125449240, -0.024911310524, -0.040392834693, 0.021479137242, 0.037824504077, 0.011802442372, 0.008395850658, -0.010644812137, -0.034679196775, 0.071182340384, 0.068356677890, 0.067964076996, -0.010097905993, 0.012402445078, -0.051161102951, -0.019402343780, 0.062039867043, -0.002245962620, 0.010748706758, 0.000011667609, -0.015075076371, 0.030601076782, 0.049635253847, -0.068991936743, -0.036363545805, 0.012355864048, 0.047819636762, -0.063752576709, 0.017775185406, -0.058127395809, 0.022635661066, -0.008180603385, -0.060786589980, -0.008817218244, -0.025248397142, -0.060404162854, -0.046891614795, 0.014496892691, 0.004006728530, -0.053909100592, 0.019644558430, 0.021889075637, 0.021899625659, -0.016334291548, -0.064967878163, -0.069797590375, 0.037198193371, -0.068487942219, 0.066969752312, 0.001121841371, -0.042895190418, 0.038414031267, -0.043103374541, -0.007414244115, 0.017399638891, 0.042173005641, 0.017056629062, -0.042269758880, -0.020310804248, 0.042398773134, -0.008325889707, -0.047667071223, 0.044558636844, -0.042797390372, -0.016996771097, -0.045087903738, 0.052977815270, -0.028788954020, -0.007636278868, 0.008517228067, 0.060897409916, 0.017006151378, -0.047247976065, 0.055601894855, -0.060546629131, -0.037174295634, -0.013120155782, -0.068533487618, -0.031392812729, -0.062073178589, 0.025782637298, 0.020601212978, -0.060424000025, -0.006174512208, 0.036177821457, -0.059393528849, 0.020414866507, 0.001621663570, -0.007741943002, 0.011829987168, -0.018081512302, 0.006636589766, 0.022833332419, 0.071778655052, -0.026598274708, 0.071531608701, 0.054277569056, 0.064825490117, -0.070881724358, 0.019209250808, 0.065869063139, 0.053129464388, 0.050801008940, 0.015766292810, -0.034706935287, 0.023330934346, -0.019796453416, 0.063929945230, -0.062374688685, -0.000518046319, 0.066670134664, 0.069164484739, -0.017092388123, 0.072034731507, -0.004450485110, -0.044920675457, -0.006742902100, 0.024802237749, 0.045624174178, -0.030985709280, 0.032300069928, 0.043930463493, -0.061890020967, 0.052999615669, -0.067828126252, 0.007895439863, -0.037221044302, -0.047129336745, -0.010006267577, 0.012023493648, -0.060115903616, -0.008189998567, 0.004161193967, 0.022984318435, 0.071530252695, -0.021629586816, -0.020961258560, -0.060527186841, 0.020689554513, 0.044733352959, 0.066688627005, 0.023749485612, 0.013189345598, -0.053817287087, -0.064091973007, 0.060848787427, -0.032290264964, 0.005990862846, -0.045590296388, 0.000306136906, -0.044209346175, 0.052368819714, -0.009627483785, 0.026930116117, 0.047757558525, -0.048981465399, 0.048328451812, -0.013530492783, -0.058741923422, 0.056929141283, -0.038200467825, 0.055956125259, -0.031279150397, -0.069387093186, -0.014452066272, 0.019175887108, 0.012562841177, -0.010321743786, -0.047544956207, -0.032935522497, -0.044276848435, -0.004094444215, -0.016632992774, -0.054905433208, -0.030473046005, 0.017555341125, -0.068587638438, 0.031101472676, -0.051959805191, 0.037833176553, 0.040253408253, 0.023554757237, -0.031128250062, -0.068650573492, 0.032484129071, -0.069089561701, -0.000052481890, -0.009553425014, 0.039214268327, -0.037353567779, -0.012038081884, 0.053433254361, 0.023657150567, -0.059880346060, -0.058807324618, 0.065491452813, -0.070675387979, -0.065177455544, 0.052767626941, 0.023938149214, 0.014558590949, -0.069085694849, 0.023041300476, 0.007391549647, 0.018074907362, 0.038322180510, -0.005515955389, -0.020895648748, -0.003385700285, 0.020570106804, 0.051989607513, -0.028664432466, -0.052225627005, -0.027167923748, -0.021293271333, 0.067640766501, -0.070838540792, 0.016573339701, 0.010449551046, 0.064231306314, 0.064181536436, 0.034280195832, 0.027403116226, 0.022720642388, 0.036076784134, 0.023511171341, -0.066418118775, 0.004400476813, -0.037754099816, -0.007470823824, 0.048692464828, -0.021679762751, -0.041021160781, -0.065821386874, -0.029447633773, 0.001782566309, 0.030315570533, -0.014239396900, 0.004180051386, -0.019954375923, -0.042842112482, -0.032324057072, -0.011610589921, -0.039781421423, 0.011928938329, 0.048041909933, 0.005720138550, 0.064494341612, 0.006482191384, 0.036478258669, -0.056500326842, -0.065075591207, -0.026685941964, 0.064168632030, -0.034063037485, 0.006075263023, 0.016896940768, -0.056598488241, -0.016389109194, 0.000822409987, -0.022208116949, -0.025760941207, 0.048125758767, 0.048967391253, -0.024089980870, 0.035912446678, -0.054629407823, -0.052797809243, -0.020241912454, -0.010854661465, -0.034315831959, -0.026071880013, 0.046479880810, -0.071562945843, 0.037420503795, 0.066355884075, -0.037320997566, -0.032866094261, 0.064747616649, 0.002200141549, 0.022326134145, 0.046726584435, -0.042599342763, 0.008821263909, -0.018427893519, -0.062757976353, -0.041129097342, 0.047590620816, 0.059162691236, -0.031116168946, -0.034897875041, 0.057887494564, 0.047543443739, 0.036269277334, -0.041066311300, -0.013353593647, -0.068471461535, -0.027032941580, -0.068016506732, 0.037667877972, 0.012382432818, 0.060765594244, 0.062824636698, 0.065206736326, -0.040680885315, 0.054974779487, -0.011222172529, 0.060677140951, 0.065942540765, 0.057039320469, 0.017001591623, 0.039227619767, -0.048447862267, 0.040949612856, -0.018171519041, -0.001995593309, -0.042231075466, -0.047998104244, 0.040813699365, -0.017566781491, -0.042145594954, 0.022762730718, -0.020635660738, 0.030271969736, -0.023186918348, 0.070113182068, 0.018252752721, 0.006732650101, 0.005907915533, 0.025068610907, -0.013025898486, -0.029235631227, 0.024605639279, -0.001421593130, -0.026036880910, 0.028243906796, -0.036211665720, -0.028948973864, -0.032001215965, 0.011129759252, -0.005354225636, -0.068838432431, 0.070397317410, 0.053575649858, 0.000962786376, -0.004620343447, -0.029765505344, -0.067691117525, 0.026478171349, 0.056611686945, 0.004278294742, 0.024819940329, 0.054950222373, 0.071162775159, 0.016089186072, 0.004112824798, 0.042765147984, -0.040281441063, -0.015032164752, -0.048954866827, 0.041801296175, 0.015212111175, -0.047861572355, -0.071720555425, -0.044006742537, 0.052539967000, -0.014495547861, -0.070474900305, 0.030388198793, 0.006416983902, -0.071574784815, 0.049148984253, -0.070149064064, -0.055904641747, 0.066681563854, 0.006966911256, 0.004358634353, -0.006779551506, -0.016399949789, 0.025712423027, 0.019171103835, -0.030426125973, -0.057376958430, 0.031632810831, 0.010600470006, -0.061622716486, -0.023353941739, 0.061331674457, 0.055207550526, -0.044393762946, -0.063103258610, -0.068416208029, 0.055252134800, -0.053464211524, 0.017181597650, -0.013177245855, 0.042156092823, 0.028203248978, 0.033459797502, -0.039331663400, 0.021186351776, 0.064729243517, -0.012262038887, 0.046071864665, 0.019298069179, 0.050235226750, 0.039115950465, 0.039368279278, 0.001834288239, 0.060696154833, -0.055009946227, -0.068160042167, -0.025300309062, 0.001140803099, 0.000726059079, -0.058757148683, 0.036001160741, -0.006215445697, 0.041927538812, 0.001223370433, -0.024067096412, 0.047535978258, 0.039759002626, 0.061610832810, -0.067330814898, 0.068482726812, 0.051226660609, -0.060558158904, 0.066935807467, -0.060027360916, 0.067176014185, -0.022198636085, -0.011734817177, 0.037875607610, -0.020856641233, -0.004141733050, 0.003726385534, 0.002608984709, -0.048175673932, -0.008580394089, -0.066940300167, 0.003569014370, 0.016300238669, -0.034946136177, 0.063434138894, 0.057543784380, 0.015656016767, -0.018640752882, -0.050253361464, -0.011127173901, -0.033247970045, 0.056290119886, 0.011516056955, 0.069209516048, -0.062290102243, -0.024562243372, 0.051381133497, -0.016385875642, 0.022096313536, -0.023780472577, -0.056365825236, -0.026313010603, 0.024233184755, -0.034143581986, -0.015386581421, -0.055866360664, -0.001051776111, -0.030091203749, -0.000179976225, 0.020215913653, 0.027027070522, 0.038366988301, -0.000419013202, 0.054860994220, 0.066253378987, 0.063674181700, 0.036412328482, -0.016845528036, 0.041692979634, 0.009639732540, -0.035253699869, 0.025638639927, -0.045782096684, 0.049689821899, -0.004791870713, 0.022858552635, 0.051767870784, -0.059612255543, 0.022917933762, -0.007326148450, 0.021489508450, -0.034420516342, -0.049177393317, 0.047313891351, 0.052323289216, -0.070843309164, 0.028969451785, -0.049215182662, -0.001608312130, 0.002814345062, 0.061003506184, -0.064278937876, -0.052558705211, 0.045400731266, 0.028488099575, 0.033281438053, 0.025343082845, -0.014452327043, 0.053225547075, -0.032860208303, 0.061834737659, -0.030525181442, 0.007329419255, 0.042912848294, 0.039370290935, 0.018243961036, 0.046484306455, 0.051004968584, -0.071710728109, -0.052246704698, 0.017743766308, -0.015126626939, 0.049785517156, -0.071808718145, 0.029797367752, -0.029365662485, 0.069192245603, -0.034971877933, -0.067208819091, -0.054788134992, 0.038464084268, -0.040396861732, -0.028175979853, 0.039111129940, 0.000068604946, -0.000667780638, 0.050874337554, -0.053812414408, 0.071750611067, 0.010871298611, 0.021818637848, 0.069756001234, -0.016155343503, -0.000934600830, 0.001385666430, 0.023219421506, -0.025127023458, -0.013464231044, -0.045786447823, 0.065455913544, 0.041997760534, -0.020356282592, 0.024268977344, -0.016253143549, 0.020576007664, 0.058620065451, 0.001034088433, -0.023944258690, 0.060348212719, 0.045114211738, 0.014468982816, 0.044528819621, 0.019591994584, 0.020839713514, 0.047738425434, -0.012875273824, -0.001205824316, 0.064585432410, 0.012479580939, -0.019472062588, 0.062913760543, -0.067795954645, -0.012913990766, -0.013623237610, 0.048597812653, 0.024559922516, -0.041642583907, 0.048085667193, -0.027254749089, -0.012337300926, 0.036701135337, 0.062388777733, -0.017574630678, 0.014083646238, -0.069662347436, -0.068138256669, -0.013776339591, -0.040603321046, 0.043582692742, 0.060609370470, 0.046245224774, 0.046828381717, -0.026648636907, -0.040194995701, -0.010902203619, 0.050912432373, 0.011855088174, 0.027125462890, -0.022775929421, -0.069969460368, -0.062091831118, -0.030974078923, 0.001492030919, 0.037026219070, 0.036067187786, 0.062328159809, 0.067501723766, -0.037746630609, 0.032152369618, 0.015945009887, -0.055113304406, 0.068886026740, -0.060881465673, -0.069900929928, -0.012668624520, 0.013469099998, 0.015517503023, -0.033520691097, -0.068670779467, -0.054245654494, -0.000380367041, -0.059450961649, -0.008211500943, -0.018437117338, -0.068466313183, 0.047945663333, 0.025525368750, 0.069451853633, 0.056835502386, -0.052952937782, 0.005207732320, -0.067574337125, 0.021907076240, 0.042290247977, -0.056540489197, 0.000033572316, 0.035520277917, -0.007634416223, -0.061523851007, 0.035883262753, 0.000555627048, -0.045528903604, 0.068719372153, -0.041717518121, -0.031785789877, -0.072145983577, 0.055670022964, -0.027459144592, -0.018756605685, 0.057783737779, 0.038929603994, -0.004597112536, 0.039725914598, 0.039105005562, -0.054781254381, 0.047900885344, 0.036131173372, -0.056465223432, 0.001237824559, -0.026472717524, -0.033711563796, -0.042541548610, 0.071271136403, -0.013812694699, -0.051819451153, 0.045989364386, -0.049507018179, -0.060321416706, 0.010968409479, -0.053640782833, 0.061994537711, 0.033971875906, -0.047274321318, 0.067046880722, 0.061256051064, -0.012045584619, 0.036880873144, 0.044829346240, -0.062027946115, -0.008604735136, 0.036588728428, 0.047240935266, 0.054174870253, 0.007614597678, -0.001517497003, -0.018561035395, 0.017182961106, 0.040820449591, -0.047362174839, 0.044736757874, -0.035794258118, 0.011591114104, -0.010079685599, -0.034773059189, 0.063778623939, 0.043924890459, -0.004669412971, 0.002802453935, 0.040962740779, -0.054208386689, -0.029101628810, 0.014736816287, -0.024184286594, 0.006378494203, 0.067435964942, -0.071306332946, 0.031905308366, -0.036578781903, 0.017024420202, 0.024999216199, -0.014163449407, 0.038816779852, 0.021911546588, -0.070434138179, 0.041338235140, -0.053880743682, -0.051141604781, -0.066643744707, -0.063367173076, -0.014658320695, 0.041272528470, -0.042852088809, -0.038506723940, -0.044558342546, -0.043197214603, -0.015140976757, 0.060802564025, 0.012654691935, 0.038750603795, -0.069420114160, 0.064186558127, -0.052189044654, 0.030336685479, -0.061019856483, -0.022707309574, -0.036262545735, 0.067216590047, -0.006022162735, -0.045838739723, 0.069446444511, 0.049763925374, 0.044005297124, 0.071332007647, 0.038437366486, 0.018622860312, 0.027698487043, 0.015456266701, -0.028895791620, 0.039583496749, -0.065614596009, -0.022206310183, -0.037312753499, 0.050730928779, 0.049037314951, -0.037436537445, 0.043844826519, -0.029052745551, 0.040468476713, -0.009786110371, -0.047235328704, 0.060712844133, 0.009497992694, -0.044319637120, 0.004065766931, 0.008684210479, 0.045225366950, 0.070837274194, -0.051472470164, 0.038930840790, -0.035820238292, 0.038469128311, -0.065187998116, -0.043354205787, 0.039484217763, -0.044286567718, -0.025799468160, 0.040712974966, -0.043632380664, -0.015059933066, 0.033682778478, -0.035357438028, -0.071193143725, -0.054133452475, -0.033707365394, 0.015934653580, -0.061586979777, -0.031406268477, 0.036948032677, 0.006288744509, 0.038322664797, -0.013077259064, 0.061248704791, -0.006763108075, 0.049824081361, 0.001347139478, -0.063051998615, -0.049461420625, -0.047885764390, -0.007630474865, -0.071659214795, -0.015514355153, -0.010533176363, 0.048112817109, 0.070819392800, -0.018149599433, 0.013433173299, 0.002827681601, -0.007551208138, -0.040715590119, 0.021366037428, -0.068620897830, -0.016460068524, -0.047783076763, -0.009451583028, 0.039932958782, 0.056192755699, 0.047736495733, 0.071893796325, 0.011170774698, 0.071557700634, -0.030227046460, -0.040889065713, 0.012592107058, 0.013841569424, -0.070248156786, 0.029840782285, -0.065898418427, 0.055448278785, -0.005640096962, 0.028095968068, -0.061758220196, -0.055913589895, -0.029301963747, 0.047694064677, 0.050962954760, 0.009245179594, 0.060230374336, 0.042754217982, -0.033105880022, -0.062678657472, -0.035904739052, -0.046494904906, 0.011162549257, -0.040677666664, 0.026268631220, 0.019862599671, -0.059002272785, 0.064934521914, -0.058936938643, -0.049317076802, 0.001700334251, -0.020442005247, -0.013427324593, 0.048814922571, -0.004031486809, 0.016676679254, -0.031548634171, -0.025979291648, -0.014633920044, -0.055347755551, 0.008995078504, -0.053175710142, 0.022850088775, -0.051721032709, 0.052989676595, 0.050948739052, -0.051602859050, -0.007879883051, -0.018390055746, 0.057283177972, -0.011055286974, -0.018427327275, -0.004010528326, 0.035962603986, -0.070138707757, 0.071761742234, 0.044635891914, 0.070770815015, 0.047416187823, -0.021623928100, 0.003602549434, 0.006163477898, -0.031903844327, -0.049636632204, -0.046146683395, -0.057913761586, -0.048557087779, 0.052450217307, -0.045908391476, 0.036706916988, -0.059989765286, -0.048609189689, -0.001719914377, -0.005245313048, -0.058902267367, -0.011006698012, 0.020355626941, -0.038024116307, -0.033765196800, -0.017789639533, -0.057951614261, -0.035359591246, -0.029954273254, 0.030700810254, -0.043672539294, -0.007586978376, 0.036668390036, 0.052079305053, -0.018092680722, -0.001776389778, -0.060425877571, 0.038912773132, -0.063959911466, -0.052549690008, 0.019786179066, -0.055166058242, -0.006885938346, 0.028258726001, 0.071848019958, 0.040292866528, 0.013789281249, -0.026086486876, -0.035724658519, 0.069123014808, -0.067381381989, 0.001364417374, 0.059653326869, 0.006354831159, -0.059754878283, -0.014789380133, 0.011990383267, -0.046018838882, 0.054158627987, -0.044399306178, -0.069286182523, 0.063241332769, -0.055375032127, -0.002304017544, 0.070634678006, 0.071730703115, -0.041653439403, 0.045486211777, 0.021364711225, -0.013044308871, 0.022451177239, 0.000041417778, 0.001373380423, -0.026951950043, 0.060335308313, 0.014668814838, -0.033992301673, -0.027417436242, -0.070748083293, -0.051083706319, -0.068468809128, -0.014395855367, -0.060169361532, 0.071426957846, -0.015840038657, 0.034905306995, 0.042455449700, -0.007296621799, 0.024053089321, -0.044431600720, -0.036695115268, 0.004676282406, 0.040474407375, -0.040050737560, -0.032731022686, -0.024006545544, 0.015231840312, 0.057641103864, 0.013644382358, 0.050881497562, -0.071188174188, -0.066828370094, 0.004152379930, 0.039761155844, 0.024995431304, 0.047119408846, 0.060264423490, 0.016545049846, -0.028584025800, -0.038540206850, -0.051867648959, 0.064976245165, 0.008903592825, 0.024327240884, -0.040537402034, 0.044147230685, 0.041701845825, 0.068829193711, 0.003835387528, -0.017927188426, -0.017825085670, 0.052222475410, 0.001173593104, -0.023344289511, 0.062514320016, 0.037830561399, 0.059131488204, 0.015891171992, -0.004836089909, -0.049866493791, 0.015341192484, -0.057884667069, 0.029935054481, -0.021737214178, 0.047074504197, 0.040577732027, -0.068215630949, -0.068000040948, 0.010067865252, -0.067950949073, 0.034936584532, -0.054438591003, -0.001767747104, 0.053798541427, -0.022105876356, -0.041398704052, -0.036909487098, -0.046772547066, -0.055292662233, -0.046131677926, -0.033992249519, -0.056662306190, -0.033373355865, -0.041806578636, -0.038489188999, -0.072074986994, -0.012321487069, -0.065693505108, 0.029684595764, 0.038622573018, -0.038017477840, -0.070303164423, -0.066829368472, -0.025143407285, 0.021706931293, 0.063529297709, -0.055559877306, -0.070834614336, 0.071766033769, 0.006132386625, -0.005729377270, -0.055743157864, -0.022034488618, 0.070971786976, -0.053477287292, -0.070021443069, -0.051884047687, 0.029913544655, 0.002846449614, -0.068095758557, -0.050875905901, -0.068130068481, 0.019040182233, -0.022445581853, -0.003036595881, 0.035955272615, 0.070311680436, -0.018482092768, -0.068310819566, -0.039032738656, -0.071755275130, -0.054960235953, -0.032001867890, 0.002621307969, 0.020888321102, -0.018389970064, 0.057476893067, 0.018082834780, 0.037096105516, -0.034080725163, 0.018771417439, 0.007535323501, -0.053397327662, -0.003042772412, 0.065651819110, -0.035655781627, 0.016683220863, -0.049168895930, 0.056355968118, 0.066510692239, 0.042454726994, 0.013049885631, 0.000293038785, 0.024283707142, 0.015140101314, -0.063601553440, 0.018850892782, 0.013436064124, 0.058512821794, -0.008348807693, 0.022029787302, -0.070439286530, 0.015720278025, 0.009501293302, -0.037024926394, -0.017108630389, 0.040270946920, -0.007405869663, -0.029124565423, 0.035191521049, -0.024281639606, -0.047693639994, 0.034814506769, -0.025314401835, 0.065013006330, -0.023739710450, -0.052556935698, -0.003787502646, 0.059287101030, -0.014544878155, -0.060774426907, -0.043992564082, 0.000536322594, -0.005023680627, 0.050133138895, -0.049837689847, -0.005872517824, -0.064894475043, 0.027199290693, -0.056310094893, -0.063819676638, 0.005979128182, -0.016516849399, -0.037614040077, 0.036138422787, 0.042634136975, 0.066537946463, -0.032493352890, -0.012850876898, 0.030908696353, -0.049496367574, -0.039300281554, 0.044803932309, 0.054137468338, -0.046757180244, 0.038312375546, -0.065086089075, -0.013584040105, -0.032901003957, 0.000829361379, 0.068974643946, -0.010581731796, 0.034035779536, 0.035228647292, -0.035387791693, 0.050257511437, 0.001204587519, -0.010282393545, -0.047505110502, -0.014514200389, -0.032804906368, 0.061192691326, -0.064586520195, 0.055130809546, 0.001115061343, 0.025560691953, 0.011265292764, 0.051654405892, 0.038882046938, 0.014629840851, 0.022003531456, 0.030826084316, 0.030820131302, 0.042277671397, -0.038743861020, 0.004715681076, 0.057898372412, 0.015147998929, 0.037754513323, -0.037102837116, 0.034219957888, 0.057796880603, 0.010504081845, 0.040426813066, -0.001556091011, 0.039675623178, -0.001471057534, -0.016314107925, 0.051931224763, -0.045735657215, -0.025229677558, 0.039433822036, 0.038534663618, 0.056765377522, -0.039448652416, -0.020617164671, -0.023444138467, 0.044077150524, 0.065740004182, -0.047700725496, -0.012148752809, 0.034363083541, -0.008680410683, 0.054628640413, -0.025453206152, 0.063732445240, 0.054572522640, -0.005285076797, 0.031846240163, -0.065173976123, -0.051096595824, 0.057828783989, -0.013914659619, 0.021349504590, 0.036627098918, 0.021829545498, -0.013399761170, -0.049337968230, 0.051824130118, 0.021919414401, -0.046758487821, 0.017728917301, 0.033025525510, -0.013597737998, -0.040130712092, -0.011993139982, 0.008842170238, -0.067449688911, -0.043676599860, 0.047741539776, -0.060076329857, 0.008444219828, 0.061539486051, 0.025803700089, 0.012516610324, -0.043037299067, -0.066522940993, -0.017185576260, -0.013029977679, 0.032062657177, -0.064321368933, 0.001248046756, -0.034296888858, -0.010497629642, 0.013395234942, 0.061064004898, -0.014495685697, -0.003581747413, -0.065165892243, 0.050075635314, 0.004302419722, 0.025239847600, -0.066884666681, -0.056109175086, 0.001207746565, -0.059340998530, -0.058687791228, -0.016023062170, 0.057992637157, 0.015476033092, 0.059211641550, -0.057166714221, 0.044127494097, 0.040425390005, 0.002622924745, 0.024814933538, -0.057872518897, 0.031291209161, 0.025754354894, 0.004953198135, -0.021285530180, -0.005020342767, -0.025176495314, 0.046643443406, 0.011770948768, 0.018317118287, -0.052029181272, -0.012582164258, 0.041591256857, 0.038067840040, 0.024036571383, 0.013338692486, -0.023649670184, 0.026831299067, 0.068162173033, 0.019073702395, -0.004212141037, -0.029709652066, -0.058884888887, 0.042515777051, 0.041620925069, 0.036355786026, -0.053274337202, -0.063043497503, -0.013637363911, -0.034251790494, 0.043137513101, -0.056292921305, 0.062791973352, 0.020068094134, -0.030968919396, -0.054627723992, -0.017823450267, -0.048176862299, 0.025015063584, 0.056818753481, -0.035776980221, -0.041373960674, -0.003220297396, -0.066733457148, -0.056930143386, 0.041264213622, 0.008231446147, 0.069185271859, -0.040075395256, -0.022177543491, -0.006865531206, -0.016771487892, 0.011960580945, 0.062465041876, 0.066546157002, 0.019550368190, -0.033484250307, 0.041229061782, -0.000576205552, 0.071114227176, -0.009048283100, -0.033616255969, -0.052100278437, -0.045461196452, 0.005352094769, -0.055381156504, -0.043182693422, -0.062051929533, -0.051266938448, 0.017266824841, -0.071030996740, -0.063330553472, -0.066191248596, -0.019565768540, 0.009218871593, -0.068744212389, 0.032536663115, 0.022149048746, 0.039857901633, 0.071216851473, 0.056246668100, -0.050906412303, 0.048122107983, -0.042112525553, 0.027446307242, -0.031634375453, -0.048701949418, -0.057296484709, 0.047586187720, -0.054248064756, -0.023703817278, 0.063475176692, -0.005580976605, 0.053844928741, 0.033703424037, 0.032674618065, 0.045012108982, -0.069749996066, -0.059467308223, -0.028256401420, 0.046710774302, -0.038198091090, 0.045531570911, 0.051380865276, 0.026540204883, -0.000438280404, 0.003777027130, -0.021532543004, -0.046716675162, 0.067604675889, 0.047989331186, -0.069555737078, -0.032738611102, 0.048241950572, -0.034536797553, -0.067436732352, -0.031191688031, 0.038785755634, 0.067958444357, -0.010738346726, 0.005635432899, -0.018766272813, 0.052155062556, -0.060836233199, 0.020254351199, 0.033848717809, 0.020641267300, -0.039932098240, 0.043796561658, -0.000811643898, -0.060057558119, -0.051862999797, -0.068757481873, -0.042637664825, -0.049608297646, -0.013706550002, 0.017245024443, 0.035718448460, -0.048529215157, 0.049227520823, 0.006070494652, 0.036174155772, 0.049594148993, 0.045189335942, 0.019578397274, -0.060851115733, 0.003848962486, -0.065787971020, 0.044728942215, -0.064279913902, -0.028845995665, -0.053572300822, -0.052102550864, -0.001346379519, 0.038900524378, -0.018752545118, -0.050692677498, 0.038892298937, -0.059034653008, 0.038357540965, -0.035442318767, 0.028823181987, 0.052184447646, 0.059908851981, -0.042580485344, -0.027160767466, 0.041295774281, -0.056610636413, -0.041217692196, -0.006595700979, -0.026864644140, 0.062362536788, 0.003155015409, -0.064503580332, 0.031906940043, 0.046715676785, 0.021499916911, 0.059904798865, 0.053176641464, -0.067742392421, -0.022864367813, 0.035890042782, -0.012607473880, 0.021826103330, -0.035414166749, 0.005192540586, 0.017192475498, 0.063243925571, -0.024298883975, 0.056460857391, 0.018726438284, -0.004675917327, 0.004410445690, 0.046608142555, 0.011273466051, -0.022298004478, -0.033928964287, 0.066671550274, -0.063126176596, -0.025602128357, -0.060920782387, 0.037080965936, 0.064057648182, -0.017608284950, 0.047514349222, -0.052911162376, -0.007064729929, 0.041570521891, -0.062085278332, -0.032058838755, -0.065404228866, 0.036377362907, 0.064469441772, 0.059510722756, 0.008134312928, -0.017879784107, 0.011062771082, -0.037369258702, 0.046023659408, 0.045666396618, -0.049659416080, -0.032865542918, 0.010700099170, -0.062831468880, -0.066147305071, 0.066549196839, -0.066521853209, -0.035335309803, -0.061759024858, 0.011954337358, -0.063154377043, -0.061791755259, -0.036383491009, 0.000359043479, -0.000083155930, -0.019212212414, -0.045663818717, -0.007154569030, 0.059961855412, -0.051298148930, 0.019365951419, 0.019590444863, -0.062633663416, 0.063643142581, 0.048593409359, 0.026121057570, 0.020102709532, 0.046830840409, 0.036683894694, 0.062080532312, 0.051297068596, 0.027200132608, 0.062684476376, 0.032686561346, -0.058633316308, 0.063107252121, 0.047504112124, 0.021108493209, 0.071336075664, 0.028282500803, -0.062415108085, -0.010725956410, -0.011862732470, 0.016465730965, 0.057094663382, 0.066046789289, 0.019022651017, -0.053269535303, -0.056181941181, 0.045102238655, 0.026639878750, 0.017876908183, 0.033143736422, -0.022726323456, 0.022474870086, 0.052741937339, -0.039760604501, -0.007322154939, 0.009816288948, -0.031400334090, 0.007557973266, 0.051507569849, 0.034107998013, -0.039760153741, -0.033763285726, 0.063143938780, -0.024049133062, -0.044576823711, 0.034869864583, -0.005585812032, -0.014417346567, 0.069767639041, -0.010636657476, -0.050985012203, 0.030012190342, -0.027396392077, 0.029551833868, 0.009201526642, 0.015096224844, 0.013657972217, -0.069002874196, -0.057915929705, -0.045621611178, -0.019248414785, 0.068631350994, -0.033285774291, 0.067303627729, -0.010110829026, 0.011740855873, 0.041724197567, 0.005253523588, -0.051056213677, -0.007516846061, 0.023888543248, 0.005021162331, 0.051368080080, 0.049316234887, 0.053746819496, -0.038927521557, 0.051874533296, -0.005422398448, 0.018087394536, -0.020659819245, -0.064363524318, -0.031790059060, 0.071945175529, -0.020884465426, -0.039114691317, 0.026212796569, -0.055916719139, -0.069191582501, 0.058909773827, -0.040550462902, -0.064998142421, -0.017233941704, -0.020227286965, 0.067362993956, 0.068221792579, -0.009917397052, -0.018888458610, 0.010537117720, -0.038683827966, -0.010628860444, -0.050950735807, -0.064199216664, -0.069458626211, -0.064828641713, -0.031856473535, 0.068327292800, 0.065136089921, -0.006046116352, -0.000005781651, 0.035165883601, -0.039400316775, -0.027174826711, 0.000434994698, 0.019984379411, -0.068987801671, -0.066549919546, -0.032767672092, 0.003997422755, 0.014174394310, -0.045285537839, 0.063366904855, -0.042101290077, 0.055682390928, -0.059599194676, 0.045142292976, 0.064570814371, -0.069787502289, -0.020521841943, 0.030934691429, -0.047789134085, -0.034359484911, -0.020552571863, 0.036268189549, -0.061173424125, -0.019110333174, -0.006172344089, -0.066076144576, 0.049113988876, -0.036459557712, 0.064491674304, 0.047313064337, -0.065226987004, 0.007524609566, -0.051687564701, -0.058479491621, -0.071011774242, -0.019089858979, 0.065752297640, 0.000271499157, 0.064618930221, 0.030274882913, 0.007449775934, -0.045118167996, 0.025654211640, -0.013628657907, -0.046495057642, 0.033481962979, -0.068501308560, 0.045151308179, -0.002547435462, -0.028315864503, 0.006243623793, -0.026026505977, -0.023832589388, -0.051344193518, 0.023350916803, 0.059690728784, -0.060233287513, -0.049734141678, -0.051507636905, 0.014739379287, 0.061236441135, -0.041837103665, -0.044385075569, -0.048660121858, 0.037768930197, -0.023069985211, -0.052378453314, -0.056637875736, 0.003313809633, -0.028898853809, -0.013594880700, -0.011726610363, -0.049029886723, -0.025683186948, 0.037663251162, 0.010564304888, -0.071705020964, 0.043266966939, 0.004445768893, -0.029652457684, -0.011601693928, 0.032461844385, -0.027325209230, -0.067007385194, 0.062015503645, -0.008804708719, -0.029651030898, 0.010790668428, 0.001700349152, -0.060057125986, -0.063457213342, 0.023151956499, -0.009668968618, 0.055501922965, -0.069648854434, 0.061529606581, -0.024390384555, -0.048849835992, -0.041268706322, 0.068895608187, 0.002093359828, 0.046074502170, -0.011117901653, 0.031420379877, 0.039801143110, -0.030928328633, -0.043947927654, -0.041016083211, -0.042465049773, 0.030235670507, 0.020325548947, -0.034424405545, 0.044531621039, 0.001456312835, -0.054533071816, 0.023004360497, 0.066130757332, 0.026755779982, 0.022899746895, -0.049740869552, 0.037970207632, -0.014014404267, -0.037680212408, 0.055695563555, 0.008421421051, 0.046030759811, 0.005426049232, -0.046470850706, 0.051793232560, -0.046592395753, -0.022968899459, 0.004326887429, 0.020640186965, 0.047727227211, -0.020826462656, -0.044444486499, 0.027912706137, 0.016618743539, 0.023481115699, 0.042464964092, 0.002199873328, -0.047804638743, -0.010659471154, -0.064155153930, -0.001501634717, -0.048303000629, -0.017115045339, -0.066475018859, 0.044970624149, -0.031836945564, 0.055006712675, -0.004966296256, 0.001071438193, -0.065456077456, -0.057246532291, -0.048160053790, -0.001934699714, 0.038177497685, -0.014018692076, 0.065080389380, 0.040949098766, -0.026240035892, -0.067858099937, 0.065430819988, -0.020989459008, 0.006782978773, -0.051829621196, 0.015183083713, 0.057568922639, 0.042563833296, -0.062762156129, -0.040130022913, 0.048042260110, 0.032778255641, 0.004409700632, -0.021324399859, -0.034299161285, 0.051197320223, -0.018451500684, 0.037660755217, 0.034803926945, -0.043708488345, 0.046814337373, 0.020636416972, -0.062265463173, -0.008683010936, 0.015762075782, -0.068938009441, -0.004543565214, 0.054266497493, 0.026606671512, -0.029172174633, -0.001865394413, -0.012165013701, -0.061366204172, -0.056258149445, -0.068043947220, -0.060632303357, -0.041920140386, -0.065447233617, -0.020289983600, 0.028066769242, 0.039908900857, -0.027475524694, -0.005830533803, -0.025595020503, 0.011144310236, 0.058992400765, -0.008944205940, 0.017279490829, -0.063858166337, -0.071178644896, 0.010576590896, -0.072085350752, -0.007737040520, 0.034566633403, -0.018682014197, -0.051246806979, -0.054733574390, 0.066986113787, 0.034691601992, 0.043878808618, 0.066214948893, 0.040972754359, 0.040373720229, -0.046470351517, -0.018160164356, -0.016811080277, -0.002661399543, 0.007132202387, -0.066397987306, -0.053877957165, -0.045021764934, -0.020946029574, -0.066324174404, -0.003833666444, 0.031453415751, 0.062081709504, -0.013548698276, 0.058746024966, 0.006932124496, -0.059897571802, 0.005926840007, 0.026226326823, -0.056809403002, 0.058459743857, 0.050702102482, -0.041186805815, 0.020694695413, 0.007024541497, -0.026647999883, -0.019746471196, 0.018518224359, 0.065366968513, 0.004388913512, 0.011214949191, -0.011628895998, 0.004869386554, -0.069297850132, 0.055810615420, 0.066429048777, 0.068772494793, 0.028006888926, -0.017665978521, 0.070945188403, -0.038542203605, 0.035958714783, 0.024651184678, 0.024516612291, -0.030825193971, -0.030326053500, -0.034821838140, 0.059894919395, -0.032940976322, -0.005250804126, 0.007154755294, -0.052475392818, -0.001779191196, 0.029415093362, 0.058318123221, -0.006828159094, -0.022111143917, -0.067546270788, -0.039534803480, 0.067411825061, -0.051814667881, 0.000343866646, 0.024464696646, -0.017975538969, -0.018953584135, 0.003644309938, -0.010708749294, -0.053135707974, -0.019485328346, -0.067758478224, -0.021288540214, -0.012687381357, 0.062087655067, -0.055084429681, -0.033122416586, 0.034823596478, -0.065286181867, -0.010750185698, 0.003413230181, 0.021835841238, -0.059017740190, 0.035715706646, -0.029333863407, 0.023957557976, 0.026630915701, -0.057708866894, 0.045937657356, -0.021609954536, 0.037177562714, 0.030167892575, -0.012671053410, -0.054467841983, -0.046792712063, -0.052563972771, 0.046030953526, -0.037359006703, 0.057937398553, -0.046698763967, 0.014601714909, -0.030382059515, -0.000359959900, 0.070362374187, 0.049754723907, 0.030348300934, 0.045084945858, -0.038216777146, 0.047865100205, 0.063981920481, -0.022056031972, 0.066139981151, -0.047802209854, -0.067651629448, 0.070427030325, -0.042375147343, -0.065160401165, -0.016758359969, 0.033330254257, -0.067446954548, -0.071207739413, 0.028787508607, 0.026725821197, -0.035641618073, -0.052233815193, 0.013976223767, -0.040876969695, 0.035931698978, 0.071059316397, 0.010114200413, -0.015484087169, 0.034972339869, -0.040754031390, -0.019355628639, 0.053994223475, -0.003210403025, -0.006144434214, -0.050437677652, -0.008087620139, 0.031867571175, -0.031082186848, -0.024752374738, -0.025376345962, -0.050808407366, -0.061712656170, 0.043496124446, -0.070213057101, 0.050519578159, 0.026647344232, 0.019833639264, 0.014545649290, 0.048194788396, -0.050947159529, -0.003427937627, -0.065371468663, -0.030662350357, 0.047701865435, 0.001295223832, 0.028553746641, 0.008515983820, 0.060791686177, -0.001430124044, 0.035183876753, 0.008777506649, 0.070078596473, -0.010896679014, 0.053364515305, -0.012538492680, -0.041194051504, -0.021962739527, -0.069255173206, 0.025273397565, 0.061473712325, 0.044952385128, -0.012225236744, -0.061750371009, -0.025256298482, -0.042442768812, -0.056888107210, -0.054779037833, -0.000820264220, 0.043666429818, -0.031577214599, 0.047578804195, 0.054628863931, 0.004422575235, 0.062021642923, 0.001708231866, 0.049642965198, 0.061180323362, 0.020072102547, 0.011957019567, -0.021323882043, -0.019478291273, -0.023735597730, 0.049770206213, -0.010000433773, -0.014471579343, -0.064413331449, 0.033249862492, -0.015639480203, -0.052614629269, 0.065254688263, 0.054196864367, 0.042911417782, -0.026045296341, 0.046619735658, -0.009637065232, 0.049906276166, 0.064596414566, -0.013365983963, -0.015062671155, 0.012684166431, -0.038091547787, 0.072038978338, 0.050579354167, -0.044382631779, -0.070015922189, 0.043564125896, -0.054529421031, 0.018348641694, 0.017208926380, -0.069477856159, 0.013980768621, 0.038177050650, -0.045837812126, -0.037741914392, -0.014712966979, 0.028993003070, -0.010664857924, -0.029834382236, -0.045901127160, 0.065421879292, 0.035305477679, 0.040695235133, -0.049023363739, 0.046636618674, -0.013352803886, 0.041946381330, -0.028376914561, -0.025577917695, -0.002328537405, -0.053498104215, -0.011342015117, 0.013169765472, 0.033868022263, 0.027073256671, 0.068209424615, -0.053755722940, 0.028000280261, -0.053368009627, -0.033899765462, 0.046870142221, 0.048614867032, -0.049617998302, -0.018659148365, -0.013150766492, -0.044130027294, -0.032177321613, 0.032918557525, 0.043966084719, 0.046452045441, 0.038698174059, -0.070625111461, 0.025416061282, 0.001270659268, 0.046825006604, 0.034082822502, 0.065027803183, 0.047035083175, 0.068264529109, 0.029801271856, 0.065300241113, -0.022498130798, 0.037121005356, 0.027853943408, -0.004643656313, -0.031925421208, 0.056457668543, -0.018585298210, 0.010223947465, -0.044595509768, 0.029512465000, -0.006935618818, 0.036744430661, 0.071887359023, -0.040252808481, 0.069024562836, -0.021106220782, 0.017820030451, -0.067251473665, -0.028580449522, 0.044204153121, -0.064809478819, 0.002551674843, -0.034450799227, 0.024375654757, 0.056173399091, 0.013182424009, -0.006505027413, -0.031134907156, -0.047031208873, 0.056791216135, 0.002861522138, -0.051804430783, -0.048743814230, -0.010260663927, -0.050867579877, 0.070079043508, 0.038948461413, -0.013644229621, -0.059899255633, -0.049214370549, 0.027423352003, 0.063257575035, -0.048917181790, 0.041461020708, -0.044378951192, -0.005024604499, 0.043295137584, -0.049181990325, 0.023819580674, 0.010170377791, -0.039314303547, 0.011173509061, -0.031796112657, -0.023051798344, -0.012570947409, -0.028980135918, 0.055913463235, -0.023134492338, 0.012755297124, -0.069557286799, 0.023679248989, -0.015999764204, -0.025762371719, 0.005840755999, 0.020328268409, 0.034738905728, 0.007518291473, -0.033388685435, 0.052928596735, 0.030445396900, 0.055697426200, 0.040786512196, 0.016283117235, 0.005432382226, 0.060722112656, -0.029358711094, -0.002680860460, -0.035309709609, 0.020355194807, 0.016347780824, -0.053857684135, -0.059909753501, 0.052031368017, 0.022520706058, -0.040127079934, 0.054504901171, 0.053212463856, -0.026925779879, 0.040155038238, -0.002617366612, -0.033266864717, 0.061566635966, 0.018979206681, -0.031455274671, 0.063347667456, 0.028364300728, 0.031543076038, -0.030344549567, 0.057163566351, -0.068703226745, 0.029073238373, 0.036843091249, 0.042055070400, 0.055169403553, 0.019155584276, -0.038599483669, 0.023159116507, -0.041768655181, 0.053745880723, 0.060421645641, -0.061074677855, -0.048035580665, -0.013191457838, -0.027056928724, -0.056313723326, 0.040115587413, 0.057796970010, -0.040002524853, 0.058793038130, 0.058519735932, 0.067629873753, -0.014736969024, 0.047285608947, 0.003894716501, -0.010283719748, -0.051819816232, -0.019652161747, -0.029738660902, 0.067285418510, -0.009910717607, -0.045409075916, -0.000857256353, -0.021652456373, 0.008169606328, 0.012186557055, -0.065761178732, -0.003890462220, 0.060548216105, -0.065610572696, 0.013027049601, 0.001049414277, -0.022905167192, 0.065259635448, -0.000708147883, -0.019151352346, -0.041247271001, 0.046631470323, 0.016807124019, 0.069884583354, 0.060885131359, -0.016077313572, -0.062705084682, 0.043478369713, 0.061968654394, 0.001014709473, 0.062416836619, 0.033824212849, 0.004089854658, 0.014743454754, 0.012553773820, -0.067161172628, 0.018960312009, -0.000164851546, -0.026954736561, 0.015351928771, -0.052037972957, -0.003126658499, -0.037724088877, -0.012066714466, -0.014396801591, -0.042427178472, -0.070650197566, 0.036075532436, 0.022067785263, 0.060521170497, -0.044541671872, -0.026205901057, 0.060439854860, -0.054874531925, 0.022604860365, -0.016440350562, 0.038036212325, 0.012665010989, 0.042228803039, 0.026486039162, -0.001109808683, 0.045902594924, 0.011523373425, 0.051340617239, 0.025165379047, 0.002154290676, -0.021335735917, -0.025952484459, 0.039362497628, 0.051307439804, -0.049396071583, -0.036817159504, 0.048403933644, 0.022825755179, -0.064757496119, -0.053724713624, 0.002287521958, 0.053817853332, 0.067061349750, -0.001496680081, 0.059912547469, -0.012757275254, -0.038296941668, -0.062792733312, 0.046146236360, 0.027832284570, 0.053524702787, 0.053777620196, -0.031601026654, 0.036012746394, 0.015666134655, -0.014175113291, -0.059545703232, 0.016213379800, 0.003594584763, 0.020015269518, -0.033214487135, 0.051096439362, 0.006659194827, -0.033990271389, -0.065289482474, -0.006250180304, 0.011829227209, -0.037972945720, 0.032350316644, 0.032775036991, -0.032135922462, -0.051973260939, -0.064346656203, 0.020001538098, -0.026620935649, 0.058885917068, 0.034863360226, 0.066653102636, -0.025575459003, 0.006150886416, 0.022433280945, 0.024012364447, 0.044409230351, -0.068318374455, 0.054010763764, 0.011308774352, 0.010004766285, 0.014814227819, 0.069121941924, 0.012756429613, -0.022486619651, 0.056258291006, 0.038101047277, 0.029001213610, 0.028825089335, 0.015381574631, 0.052427902818, -0.009515419602, 0.051815852523, -0.057099469006, 0.059889972210, -0.012355230749, 0.038091309369, 0.034877434373, 0.004747442901, -0.042405292392, 0.029567889869, -0.007639497519, -0.013504616916, -0.007690869272, -0.052233472466, -0.052168898284, -0.034994710237, 0.031011037529, 0.056310832500, -0.030617322773, 0.043828807771, -0.053632795811, -0.035592649132, 0.065642356873, -0.016329988837, 0.008884117007, 0.016001038253, -0.054286777973, 0.050239577889, -0.024595830590, -0.056473795325, 0.061009019613, 0.047321669757, 0.029882676899, -0.019043710083, -0.023949421942, 0.037557788193, 0.010196365416, -0.027058321983, -0.051749333739, -0.065795712173, 0.066244304180, 0.001827813685, -0.063323721290, -0.017329990864, -0.014908622950, 0.053716629744, -0.010285250843, -0.032373525202, -0.046287052333, -0.052613317966, -0.046104200184, 0.043178185821, -0.058507829905, 0.036264166236, -0.004578582942, 0.025314986706, -0.000502578914, -0.003273136914, 0.018232718110, 0.050300560892, 0.050491891801, -0.057130459696, 0.023106135428, -0.040661994368, -0.054607160389, -0.040831390768, 0.038841694593, -0.028047755361, 0.027622275054, -0.006804816425, -0.040893144906, 0.063017398119, 0.020399317145, -0.045816265047, -0.039410281926, 0.069866478443, -0.033092975616, -0.064606167376, -0.047403417528, 0.001678429544, -0.060420300812, -0.061326820403, -0.001550257206, -0.027700413018, -0.009297877550, -0.003435336053, 0.024137400091, 0.053460165858, 0.069565325975, 0.007722139359, -0.064173199236, 0.018917120993, -0.026801947504, 0.027872234583, -0.054359044880, 0.019340001047, -0.036829512566, -0.025153521448, 0.062398955226, 0.041672110558, 0.048956863582, -0.028527520597, 0.027968280017, 0.016394510865, -0.026230592281, 0.068583250046, 0.069928109646, -0.003483496606, 0.024184577167, 0.061705991626, -0.019216876477, 0.058311194181, 0.005633488297, -0.022791001946, 0.026381403208, -0.058225646615, -0.035528022796, 0.040554851294, 0.047856859863, -0.059906724840, -0.038993455470, -0.029376346618, 0.023510552943, 0.039804361761, -0.056526068598, -0.064201131463, -0.002937577665, -0.071305416524, 0.044056914747, -0.022484298795, 0.000820517540, -0.059249080718, -0.045125342906, -0.065893359482, -0.000484086573, 0.034500233829, 0.018919944763, -0.019707705826, -0.058898914605, -0.068424776196, -0.037473168224, -0.034583993256, -0.026339024305, 0.053192630410, -0.014632217586, 0.053148150444, -0.069445699453, 0.015263430774, 0.006030596793, -0.049248576164, 0.050128929317, -0.042631983757, -0.018928874284, 0.026949144900, 0.033073276281, -0.014321658760, -0.024396512657, 0.055213257670, -0.007785923779, 0.038088195026, 0.058702230453, 0.064598932862, 0.025359243155, -0.005154259503, -0.036317538470, 0.060967758298, 0.029071107507, 0.041600048542, 0.022215157747, -0.012098200619, 0.003608472645, 0.015791513026, 0.024341896176, 0.006894715130, -0.057850975543, 0.033177874982, -0.000411987305, -0.023415919393, -0.019696280360, 0.041904360056, 0.054280653596, -0.062416981906, -0.000877730548, -0.056075021625, 0.065071463585, -0.018212623894, -0.030674859881, 0.030205659568, 0.013362780213, 0.005150161684, 0.011697754264, -0.066419422626, -0.010392911732, 0.034989379346, -0.053847551346, -0.000016346574, -0.065800823271, -0.067642062902, 0.028343483806, -0.071877442300, -0.037411898375, -0.067968845367, -0.066029496491, 0.036861211061, 0.062304854393, -0.060454525054, -0.015609297901, -0.021257326007, 0.021188348532, 0.048607572913, -0.015705894679, 0.032134301960, 0.001606993377, -0.027179572731, 0.013097956777, -0.010784734040, 0.047348767519, 0.017299622297, -0.010748274624, 0.019442453980, -0.013294886798, 0.031570933759, 0.050696700811, -0.021420307457, 0.048215538263, 0.018494755030, 0.010790564120, 0.002864107490, -0.068356469274, 0.070529371500, 0.063229545951, 0.036848030984, 0.028398767114, -0.039182744920, 0.048149637878, -0.007127173245, -0.036068372428, 0.009738653898, 0.047996781766, 0.038209840655, 0.002755671740, -0.066842064261, 0.061155736446, 0.018491216004, 0.035152152181, 0.001142367721, -0.006174579263, 0.039267055690, 0.063822582364, -0.037502318621, 0.042008854449, 0.013594239950, 0.028323233128, 0.025981560349, 0.068046912551, -0.001436680555, -0.063887834549, -0.044892884791, -0.058569841087, 0.000142745674, -0.069619417191, 0.058025479317, -0.020365003496, 0.033817000687, -0.029214348644, -0.059443753213, -0.057491466403, 0.024995416403, -0.058992169797, 0.006135120988, 0.022822938859, 0.059517547488, -0.037104282528, -0.000937335193, -0.003275148571, -0.037368107587, 0.047393314540, 0.043055437505, -0.035284172744, -0.029591046274, 0.070363715291, -0.001082107425, -0.022033248097, 0.058895856142, 0.061908319592, -0.054052203894, 0.012926742435, 0.035800382495, 0.043436005712, 0.003144584596, 0.029592305422, -0.009352974594, -0.069601744413, -0.057495869696, -0.035726137459, 0.003165937960, -0.068163827062, 0.062282621861, 0.050993770361, -0.016369186342, 0.063281655312, -0.050112783909, 0.013023905456, -0.043332647532, -0.019964665174, 0.060938984156, 0.068443983793, -0.065761126578, 0.031378552318, -0.030690155923, -0.006011791527, 0.048366852105, -0.021594230086, 0.010235503316, -0.066308304667, -0.060157731175, -0.071504257619, 0.062862709165, 0.056784570217, -0.053881086409, -0.065641835332, 0.022936306894, -0.056024052203, -0.039993558079, -0.043839082122, -0.067272260785, -0.068144552410, 0.027393743396, -0.025993674994, -0.009433604777, 0.062326908112, 0.067412555218, -0.047533188015, -0.052984945476, -0.050931498408, -0.053828898817, -0.058751508594, -0.055542722344, 0.050492942333, -0.036808330566, 0.029502123594, -0.030738748610, -0.033369567245, 0.005984552205, -0.042394936085, -0.056847568601, -0.051440894604, 0.014241099358, 0.061706334352, -0.070391349494, 0.034375898540, 0.069717541337, -0.071482077241, 0.015378668904, 0.025146141648, -0.025234993547, 0.056079596281, 0.025390319526, 0.000402562320, -0.018090579659, -0.027205023915, 0.057856217027, -0.004524588585, 0.059121444821, -0.056791529059, 0.024370513856, -0.000248216093, 0.002830639482, 0.068830445409, -0.046109206975, -0.064436733723, -0.070102639496, 0.011510655284, -0.064067639410, -0.014101520181, -0.011090457439, -0.011607889086, 0.052182957530, 0.033147104084, -0.022596705705, -0.015070397407, 0.018770761788, 0.011245675385, -0.056129425764, 0.068766742945, -0.058105409145, -0.060580991209, 0.024884916842, 0.022640563548, 0.051475256681, -0.027148138732, -0.007484652102, 0.031208068132, -0.020437031984, -0.051729738712, 0.002691194415, -0.004046887159, 0.015436097980, 0.002493597567, -0.059103891253, 0.011219143867, -0.068960890174, -0.048561252654, 0.021325379610, -0.056094445288, -0.058005902916, -0.005706205964, 0.011248908937, -0.009764514863, -0.025414235890, -0.060545496643, 0.012456439435, -0.018903203309, 0.024260960519, -0.046858184040, -0.033283948898, -0.048590194434, 0.045484580100, 0.066359162331, 0.027828857303, -0.017853904516, 0.001506365836, 0.052924200892, -0.000631660223, -0.027853306383, -0.019029241055, -0.069660298526, 0.035832196474, -0.047152377665, 0.064355060458, -0.031921498477, 0.060457006097, -0.071093313396, -0.047895811498, 0.000425614417, 0.014007575810, 0.058007344604, -0.005031369627, -0.027865178883, -0.003680326045, 0.008046321571, -0.021633941680, 0.068418294191, -0.019759166986, 0.028699688613, 0.032596707344, -0.040138129145, 0.043063007295, 0.057954639196, 0.001287125051, -0.060602482408, 0.000656820834, 0.061777919531, 0.000473678112, 0.017525278032, 0.043296888471, -0.011881295592, -0.012913145125, 0.038486264646, -0.052360594273, -0.035961277783, 0.030002005398, -0.055615164340, -0.042790714651, 0.007262483239, -0.031227890402, 0.063640475273, 0.022518299520, -0.029599290341, -0.017640531063, 0.040660254657, -0.032510057092, 0.034984745085, 0.015089251101, 0.001687467098, 0.056485161185, 0.025372005999, -0.045307941735, -0.003616474569, -0.004910290241, 0.003329746425, -0.032771699131, -0.011285267770, 0.013174615800, -0.013183664531, 0.037101633847, -0.063176743686, 0.025273777544, -0.037060558796, -0.058936886489, 0.021250858903, 0.015962101519, -0.013862300664, -0.053519770503, -0.031819671392, 0.033100791276, 0.067615255713, 0.049318335950, 0.018001884222, -0.014782704413, 0.040004089475, -0.063820265234, 0.024131789804, -0.043524928391, 0.017398312688, 0.038123480976, -0.048337224871, 0.015641577542, -0.039814647287, 0.017398811877, 0.044684603810, 0.017594039440, 0.025273725390, 0.021535970271, -0.005426131189, 0.032712161541, -0.025592043996, -0.008802972734, 0.051512263715, 0.056560099125, -0.003554634750, -0.032090894878, -0.025919396430, -0.018295850605, -0.019137106836, 0.034646145999, -0.038092099130, -0.050671081990, 0.034975357354, -0.053385507315, 0.059706956148, 0.027196899056, -0.026978570968, 0.045619942248, 0.039056755602, -0.019343238324, -0.037108995020, -0.048461869359, 0.008255273104, 0.044237911701, 0.066942840815, 0.067935675383, 0.041295550764, -0.022978965193, 0.031969867647, -0.065095484257, 0.026142731309, -0.010678779334, -0.051690213382, 0.048766419291, 0.005794368684, -0.032004535198, 0.014156788588, -0.001643709838, -0.046477541327, 0.006390377879, 0.067236825824, -0.060630753636, -0.014559246600, 0.030513979495, 0.047577410936, 0.018940418959, -0.044596783817, -0.032758709043, -0.057663701475, 0.062339872122, -0.041012693197, 0.040015980601, -0.064597204328, 0.031408526003, 0.005486428738, -0.038507856429, 0.028683602810, -0.045381754637, 0.010916262865, -0.041863050312, 0.068108141422, -0.038731489331, -0.047086358070, 0.046630613506, 0.059259638190, 0.063782870770, -0.041312620044, 0.001290664077, -0.003618039191, 0.047077476978, 0.058216229081, -0.071125820279, -0.036538328975, 0.065157890320, 0.020914852619, -0.049949534237, 0.011402770877, -0.024376776069, 0.025126062334, 0.012300528586, -0.020325362682, 0.048738166690, 0.051146507263, -0.028835102916, -0.071191370487, -0.037116050720, 0.046439997852, 0.033877618611, 0.071376085281, 0.030084490776, 0.045059874654, -0.034081362188, 0.066815823317, -0.069376029074, 0.004347555339, 0.023620642722, -0.018667045981, 0.067791134119, -0.008494533598, -0.057141214609, -0.056461062282, 0.013770006597, 0.022796697915, 0.005553103983, 0.057223886251, -0.037925232202, -0.056326165795, -0.005406603217, -0.010305363685, -0.015043262392, 0.059022679925, 0.024608924985, 0.015718854964, -0.051489450037, 0.066907271743, -0.022615477443, -0.070974484086, 0.052711449564, 0.030046485364, -0.050388619304, 0.065311819315, 0.005539149046, 0.024481289089, -0.015536688268, 0.017657376826, -0.063807427883, -0.041012831032, -0.025525938720, 0.019344151020, -0.059204291552, 0.029461383820, 0.037248007953, 0.017774604261, -0.040429551154, 0.052657939494, -0.043592013419, 0.016299016774, 0.063357457519, -0.018114704639, 0.059838160872, -0.062625989318, -0.027873523533, -0.057535979897, 0.071596950293, -0.040540050715, 0.010205000639, -0.001984067261, -0.044008411467, 0.066145673394, 0.031933404505, -0.053953424096, -0.038713749498, 0.014808118343, -0.034117631614, 0.032376073301, 0.019599668682, -0.060578309000, 0.030004829168, 0.049876511097, 0.003419421613, -0.053101189435, 0.050796501338, -0.026601750404, -0.021712299436, 0.017869941890, 0.042721927166, -0.064136259258, 0.051588043571, 0.008486323059, 0.004973314703, 0.000071696937, -0.069186471403, -0.050510801375, -0.035909678787, 0.071670457721, 0.064123883843, -0.015459999442, -0.001001775265, 0.033128939569, -0.059239134192, 0.026875175536, 0.065771698952, -0.058818180114, -0.050877764821, 0.011664018035, 0.011880725622, 0.025068506598, 0.062821894884, -0.025107942522, 0.004439696670, -0.071616664529, -0.053240373731, 0.029666908085, -0.037462003529, 0.039306834340, 0.050084426999, -0.071580171585, -0.047867026180, 0.043957740068, -0.062707819045, -0.011736176908, -0.013316892087, 0.045941732824, 0.003766976297, -0.059309907258, -0.004546888173, -0.040048774332, 0.047244653106, 0.033658549190, 0.019276596606, -0.032640635967, 0.023711800575, -0.053446900100, -0.000014796853, 0.046529680490, 0.010497957468, -0.062737986445, 0.004621170461, 0.000053770840, 0.013127587736, -0.002772599459, 0.028903461993, -0.054952457547, -0.070345386863, -0.064930096269, -0.042930170894, -0.012262642384, -0.035234395415, -0.022600665689, 0.047767937183, 0.053552702069, 0.048494525254, 0.042635098100, -0.020899090916, 0.054283142090, -0.002695709467, -0.025456663221, 0.057659402490, -0.022830989212, -0.023691084236, -0.056702397764, 0.003889381886, 0.064956143498, 0.026873387396, -0.042286239564, 0.018602021039, -0.060740530491, 0.003782458603, 0.017172083259, -0.028084442019, -0.015630893409, 0.063248440623, -0.059385716915, 0.020144917071, -0.015499092638, -0.008554548025, -0.068544052541, 0.030450560153, 0.069359958172, 0.063796818256, -0.026698637754, 0.017849452794, 0.023217737675, 0.039906509221, 0.010251954198, -0.066486291587, -0.017057750374, -0.058983467519, -0.070899620652, -0.048803810030, 0.006276063621, -0.026336271316, 0.021531306207, 0.027026489377, 0.023774877191, 0.060588046908, 0.012967124581, 0.066350176930, -0.061951067299, -0.027256123722, -0.034457921982, 0.011061564088, -0.053069237620, 0.070059597492, 0.024462707341, 0.019351772964, 0.032960712910, -0.061587221920, 0.037342794240, -0.051422346383, 0.071678951383, 0.011933326721, 0.003701232374, -0.002046868205, -0.003493689001, 0.022549785674, -0.032841950655, -0.010411925614, -0.059781394899, -0.060235004872, 0.011183872819, -0.052004367113, 0.034865215421, -0.066236004233, 0.004055798054, 0.040347389877, 0.041949614882, 0.027481168509, -0.000882260501, 0.013468138874, 0.000286057591, 0.022447921336, -0.036249641329, -0.071638293564, 0.067504718900, 0.043599240482, 0.054393112659, -0.009829144925, 0.037622094154, 0.005565419793, -0.048632197082, 0.021896474063, 0.024149239063, 0.018744818866, 0.036797955632, -0.055900529027, 0.053509965539, 0.055224701762, 0.044302895665, 0.007291957736, -0.015716031194, 0.038548737764, -0.065600454807, -0.002877369523, 0.027314521372, -0.025212969631, 0.002712033689, -0.053360663354, -0.014154553413, 0.018508575857, 0.025603160262, 0.033346496522, 0.064269319177, -0.029626458883, 0.004853747785, -0.024636901915, -0.054270036519, -0.003281652927, -0.052578907460, 0.026085935533, -0.039927728474, 0.013950586319, 0.067455962300, -0.065013803542, -0.018720194697, -0.018668334931, 0.023604311049, -0.042068287730, -0.014404147863, 0.031734414399, 0.001170031726, -0.068156406283, 0.037881188095, 0.069054871798, 0.057337462902, -0.065010465682, 0.027995087206, 0.045244000852, -0.047175571322, -0.004704967141, -0.055455282331, 0.060802310705, 0.010723844171, -0.016452051699, 0.035205677152, -0.040621161461, -0.000336952507, -0.059497058392, 0.046196252108, 0.017464458942, -0.069210059941, -0.005497127771, 0.056780844927, 0.007097303867, -0.027480997145, -0.009374186397, -0.000012956560, 0.066520303488, 0.016386769712, -0.048939086497, 0.014304123819, 0.022689312696, -0.040082104504, 0.054991140962, -0.043289117515, 0.047182366252, -0.011751681566, 0.042203031480, 0.024625562131, -0.057631269097, -0.064300082624, 0.037043385208, -0.006405830383, -0.059358239174, -0.049442529678, 0.021999418736, 0.015282720327, -0.019200496376, -0.020271126181, 0.005309991539, 0.049528248608, 0.011816687882, 0.036409176886, 0.053848311305, -0.029261924326, -0.013350859284, 0.009835042059, 0.036603011191, 0.019691184163, -0.071180909872, 0.007139839232, -0.069461785257, 0.051119223237, -0.039491873235, -0.041538260877, 0.046848371625, -0.003182835877, 0.024646706879, -0.033591702580, -0.002548336983, -0.038149982691, 0.031604364514, -0.004564680159, -0.030155554414, -0.029477331787, -0.046736825258, -0.067840531468, 0.018273018301, -0.054509185255, 0.018727660179, 0.016545243561, 0.066002726555, -0.049863636494, -0.066956043243, -0.067103967071, 0.032422855496, 0.009020097554, -0.000166572630, 0.071824193001, 0.012639395893, -0.048182383180, -0.058215133846, -0.034470845014, 0.040793173015, 0.006755329669, -0.007522143424, 0.017497561872, -0.062846072018, -0.069969996810, 0.031793192029, -0.020160868764, 0.021012753248, 0.011433690786, -0.037719100714, 0.005849942565, -0.038707021624, 0.007772840559, -0.061414383352, 0.012250460684, 0.053954079747, 0.047551564872, 0.003012754023, -0.066113702953, 0.031956478953, 0.008912816644, 0.044829085469, 0.047486320138, -0.061534792185, -0.016486775130, 0.040401332080, 0.059409961104, -0.046304050833, -0.057366978377, 0.070245519280, -0.054059188813, -0.048117294908, 0.047147251666, -0.030694801360, 0.011452086270, 0.015038840473, -0.045817457139, 0.049921311438, 0.029314406216, 0.050528936088, 0.000601001084, -0.070622861385, -0.018935654312, -0.041174896061, -0.010289844126, -0.009288296103, -0.025813594460, 0.000975102186, 0.045929998159, 0.058439403772, 0.068648651242, 0.055112987757, 0.065405219793, -0.013134300709, -0.057304054499, 0.004017569125, 0.011377513409, 0.054611459374, 0.005726195872, 0.072158798575, -0.014175113291, 0.037721060216, 0.025691136718, -0.051360316575, 0.005072839558, -0.031265504658, -0.066773429513, 0.056962043047, 0.015876755118, 0.071921050549, -0.013602141291, 0.007967136800, 0.002290286124, -0.059486150742, -0.071118213236, 0.013055011630, -0.052353106439, 0.025314696133, -0.020353339612, -0.055766046047, 0.041897274554, 0.052231855690, -0.030566290021, 0.065068930387, 0.045675501227, 0.068565443158, 0.028234995902, -0.038182467222, -0.033069025725, 0.068111464381, 0.022748813033, -0.040380652994, -0.039916783571, 0.018230453134, -0.036321341991, 0.024461604655, -0.027583785355, -0.032435055822, -0.065535843372, -0.049219101667, 0.057389050722, -0.020907592028, -0.045544750988, 0.019468881190, 0.016573272645, 0.016778200865, -0.007647648454, -0.027994502336, -0.059989385307, 0.045321427286, -0.004129342735, -0.004822641611, -0.048350129277, 0.030094765127, -0.018628641963, -0.033815868199, -0.020175598562, -0.002962127328, 0.009636394680, 0.067569047213, -0.028922062367, 0.013458676636, 0.010989420116, -0.055884443223, -0.047587372363, -0.043012313545, 0.019043333828, 0.052218124270, -0.055162981153, 0.055561587214, 0.008524298668, -0.060298770666, 0.031446598470, 0.052032344043, 0.001932568848, 0.011681631207, 0.004484996200, 0.012381300330, 0.030335463583, -0.026119455695, -0.045224677771, 0.057277426124, 0.035693205893, -0.067785747349, 0.004682235420, 0.056601017714, -0.038950473070, 0.028805419803, 0.007012613118, 0.044298030436, 0.028900712729, 0.028882056475, 0.025903843343, 0.028903409839, -0.019015852362, -0.021786388010, 0.049560084939, -0.015325341374, 0.029739283025, 0.010774478316, -0.009306617081, -0.038676705211, 0.039659425616, -0.041969589889, 0.054933086038, 0.056407451630, -0.050218466669, 0.005759924650, 0.011113338172, -0.050625398755, 0.065659329295, 0.049702018499, -0.023970875889, 0.068007379770, 0.069930881262, -0.007688947022, 0.033026337624, 0.033918797970, 0.007680065930, 0.008122235537, 0.060183107853, -0.001787863672, -0.053336814046, 0.001078464091, -0.029703836888, -0.055924154818, 0.042473845184, 0.032622724771, -0.060945510864, -0.019357398152, -0.052255272865, -0.063809201121, -0.047369174659, -0.036598309875, -0.009975224733, 0.015372969210, -0.064696103334, 0.022555083036, 0.033529296517, -0.000282697380, -0.060490965843, 0.040060959756, -0.045890461653, 0.042917922139, 0.042229153216, -0.037009492517, 0.001626431942, 0.035995297134, 0.031052716076, 0.062599271536, -0.063398763537, -0.010037615895, 0.022215634584, 0.018895857036, -0.056195911020, 0.043172128499, -0.041334748268, -0.031612142920, -0.040387380868, -0.029836341739, -0.007803127170, -0.034322872758, -0.031933628023, -0.069540940225, -0.067491501570, -0.015251286328, -0.003061495721, 0.016851700842, 0.059773266315, 0.061057671905, -0.022005718201, 0.036675170064, 0.018946647644, -0.021494276822, 0.006119444966, 0.048763550818, 0.069565400481, 0.062898978591, 0.051223993301, -0.053346998990, -0.049201294780, -0.032573774457, 0.066731467843, 0.003996901214, 0.021808743477, 0.012006521225, 0.038031913340, -0.037326741964, -0.052588388324, 0.002107128501, 0.030923269689, -0.047409009188, 0.061022028327, 0.059051245451, 0.024592764676, -0.007672116160, -0.063797704875, 0.004314601421, -0.005272962153, -0.046488348395, -0.065509900451, 0.007855758071, 0.020154036582, 0.030769132078, 0.004619240761, 0.042609259486, -0.003850698471, -0.063940607011, 0.030662126839, -0.063618570566, 0.058584541082, -0.031918331981, 0.033363066614, 0.070500865579, -0.063302248716, 0.061328172684, -0.003958173096, -0.007489800453, 0.072139292955, 0.030504703522, 0.058489233255, -0.040557105094, -0.008751817048, 0.065585970879, 0.043866783381, 0.054345428944, -0.010479029268, 0.011080838740, 0.069044202566, -0.037769995630, -0.039423547685, 0.040946498513, 0.003549829125, 0.050120837986, -0.071572013199, 0.066797018051, -0.014273017645, -0.029319033027, -0.041102685034, 0.030132047832, -0.046296857297, -0.010761678219, -0.003876321018, 0.017850585282, 0.011407054961, 0.008081510663, -0.059829212725, 0.065757498145, 0.042180337012, 0.050858236849, -0.069803752005, -0.045813463628, 0.038818538189, 0.025681018829, 0.014101095498, 0.037360757589, 0.004330329597, 0.042051889002, -0.006183080375, 0.058845236897, -0.036061178893, 0.029732830822, -0.022672913969, -0.043587714434, 0.002787567675, -0.071135282516, 0.025212399662, 0.045555830002, -0.057306736708, -0.068097665906, -0.034649569541, -0.060499072075, -0.061211466789, 0.043751001358, 0.069380000234, 0.008978992701, 0.012604877353, -0.065894685686, 0.052108675241, -0.056268919259, 0.058395609260, -0.012187570333, 0.046549193561, 0.004688717425, 0.055700987577, -0.008808374405, -0.026905838400, 0.071797072887, 0.044993214309, 0.071717426181, 0.026771746576, 0.024865694344, 0.010736450553, -0.064512029290, 0.045075513422, -0.011456280947, 0.069529026747, 0.068978652358, 0.029554896057, -0.036224383861, 0.046405382454, -0.023261543363, 0.057225912809, 0.045184291899, -0.015682082623, 0.043978005648, 0.022084265947, -0.030986245722, -0.021368276328, 0.033807195723, 0.002679958940, -0.054564543068, 0.020235903561, 0.056856557727, 0.012350752950, 0.020610898733, -0.063935495913, -0.034063104540, -0.022271111608, 0.062714576721, 0.007771432400, 0.049289427698, -0.069880194962, -0.050207369030, 0.018916949630, -0.024144299328, 0.000333063304, 0.021557576954, 0.043100982904, -0.049135413021, 0.059834420681, -0.052034411579, -0.032338406891, 0.016093336046, -0.041733793914, -0.049940891564, 0.041946418583, -0.041605815291, 0.000203482807, -0.020071893930, -0.023226667196, -0.053405743092, 0.031941525638, 0.018027469516, 0.035569831729, 0.023941606283, 0.062829852104, -0.045757010579, -0.063218764961, -0.032891023904, 0.059837669134, 0.001609608531, 0.056320011616, 0.002137355506, 0.051365032792, -0.029170591384, 0.016663551331, -0.036521933973, -0.060810767114, -0.025983024389, 0.035656109452, -0.048014380038, -0.025222674012, 0.061213552952, 0.055336698890, 0.071881666780, 0.017346747220, 0.015411682427, -0.064337939024, -0.047618411481, 0.053144261241, -0.039104264230, 0.042813837528, -0.056195944548, -0.060449622571, 0.003033638000, -0.027673173696, -0.020356401801, -0.056441172957, -0.058063749224, -0.027715776116, 0.025254063308, 0.017391085625, -0.063470475376, 0.059862419963, -0.031551059335, -0.033684670925, -0.012460771948, 0.029827274382, 0.038713030517, 0.069373905659, 0.068144127727, -0.020134989172, -0.071302920580, 0.025871820748, -0.016901310533, 0.052023969591, 0.055834636092, 0.063152283430, -0.020113017410, 0.050973720849, -0.064944818616, 0.068182840943, 0.018732942641, -0.042087696493, 0.060858145356, -0.054927252233, -0.003765359521, 0.001556679606, 0.008883088827, 0.006755083799, 0.001982830465, -0.045673713088, -0.023868050426, -0.071778297424, -0.059301011264, -0.017822641879, 0.051701501012, 0.023956492543, -0.024461895227, -0.043642103672, 0.025496140122, -0.055649332702, -0.065741114318, -0.032686613500, -0.045969560742, 0.007265187800, -0.034216172993, -0.071044191718, -0.037114590406, 0.023384965956, -0.025934193283, -0.008061356843, 0.000895038247, -0.026378564537, 0.003453046083, 0.025930583477, -0.013225130737, -0.027714692056, 0.068043798208, -0.022673051804, -0.010193232447, -0.052568651736, 0.037425592542, 0.061113789678, -0.043572798371, 0.016807258129, -0.062687277794, 0.022322468460, -0.030268602073, -0.057818733156, -0.011422507465, 0.047287255526, 0.063975825906, 0.035406738520, 0.017617404461, 0.068686619401, 0.046942427754, -0.033525992185, 0.011134795845, 0.014842927456, -0.038066256791, 0.003549762070, 0.048520147800, 0.064638361335, 0.049993149936, 0.029895499349, -0.016120277345, -0.043067291379, -0.034397888929, -0.007318370044, -0.041714902967, 0.008362866938, -0.023555498570, -0.003491036594, -0.025400828570, 0.050165332854, 0.060475111008, -0.019906058908, 0.048449702561, -0.022623326629, 0.041049100459, -0.060200404376, 0.004186138511, -0.050299871713, -0.043164335191, -0.053978510201, 0.028708018363, -0.065401703119, -0.019762851298, 0.016825035214, 0.066435232759, 0.036916822195, -0.024111315608, 0.038208894432, 0.038502886891, 0.000333771110, -0.035393126309, 0.011923559010, 0.027004897594, -0.024015422910, 0.028555192053, -0.031759843230, -0.045171663165, 0.071089327335, 0.030656345189, 0.008866496384, 0.007678292692, 0.045856326818, 0.053771480918, 0.036055155098, -0.019909568131, 0.013121634722, 0.024782158434, -0.000567086041, 0.065462872386, -0.013233151287, -0.013976175338, -0.059406708926, -0.059146426618, -0.022878754884, 0.037220269442, 0.012423381209, 0.032360017300, 0.030606858432, -0.049616761506, 0.070096641779, 0.049489773810, -0.063071906567, -0.055588252842, -0.057903558016, 0.066491827369, -0.043034650385, 0.012655690312, 0.047422930598, -0.018891640007, -0.007335506380, 0.007610023022, -0.007134489715, 0.068304076791, 0.062014862895, 0.035950109363, -0.051838550717, 0.018333293498, -0.020999249071, -0.026278890669, 0.061284184456, -0.022481337190, -0.043709553778, -0.043870158494, -0.026672467589, 0.046650104225, 0.064432725310, -0.026152886450, 0.039652444422, -0.010464541614, 0.062951877713, -0.050647817552, -0.029328119010, -0.060537185520, -0.015926394612, -0.035604711622, 0.055188491940, 0.049821361899, 0.060253590345, -0.063461869955, 0.026635870337, 0.024116598070, 0.034583166242, 0.003215216100, 0.060071304440, -0.049579594284, -0.041049841791, 0.004020370543, -0.015497181565, 0.052139371634, 0.051526032388, -0.017840020359, 0.036998219788, -0.010286230594, -0.067050933838, 0.017282135785, -0.055051997304, -0.015783101320, -0.062570080161, -0.034051612020, 0.066021934152, 0.033077143133, -0.011381968856, 0.066075950861, 0.042066723108, -0.017103724182, -0.013076175004, 0.012325018644, -0.027988892049, 0.040019765496, -0.065103277564, 0.062383800745, 0.011704951525, -0.026965215802, -0.047262877226, 0.026968985796, 0.049867920578, 0.010088257492, -0.026242189109, -0.049025859684, -0.049502976239, 0.037155956030, -0.056382980198, -0.019921839237, -0.031065102667, -0.066511906683, -0.026877894998, 0.037331610918, -0.037722505629, -0.061844129115, 0.044557943940, 0.053394287825, 0.061434343457, 0.034680709243, 0.061008602381, -0.040370948613, 0.056746602058, 0.049286566675, -0.022966369987, -0.006738930941, -0.017785821110, -0.003027804196, 0.034212626517, 0.043754339218, -0.067871987820, 0.043087884784, -0.042723387480, -0.010898780078, 0.033109784126, 0.035486586392, -0.024990458041, -0.069161489606, 0.000194691122, 0.053942620754, 0.043919898570, -0.043135117739, 0.000012665987, 0.010763123631, 0.069023609161, 0.035698778927, -0.070554085076, -0.035881426185, -0.017649579793, 0.037789732218, -0.065429061651, -0.026874728501, -0.033115945756, 0.030676081777, -0.040354326367, -0.035083770752, -0.035209119320, -0.057103753090, 0.043427400291, -0.039771441370, -0.042210772634, 0.027530774474, 0.031925454736, 0.004286967218, -0.010661140084, -0.068478390574, 0.047556638718, 0.058289051056, 0.034883193672, 0.014572687447, -0.049329571426, -0.040886398405, 0.046214334667, 0.041655331850, -0.024968914688, -0.031324297190, 0.010984532535, -0.001927167177, 0.055938720703, 0.029820807278, -0.057320952415, 0.002516143024, 0.069218158722, -0.021999474615, 0.057120129466, 0.001668415964, -0.016976106912, 0.060288950801, -0.000165298581, 0.024872735143, 0.056778326631, -0.021834790707, -0.035631623119, -0.043788373470, -0.037204079330, -0.036289799958, -0.061325099319, -0.015822846442, 0.065435364842, -0.062362160534, -0.029435228556, -0.031494829804, 0.016020394862, -0.056074865162, 0.047728754580, -0.062979578972, -0.048679769039, -0.055187843740, 0.042832612991, -0.024517092854, 0.018576316535, 0.039822302759, 0.016007296741, -0.065206840634, -0.037034012377, -0.060846380889, 0.034462124109, -0.051610894501, -0.046708695590, 0.047377489507, -0.005164526403, 0.012425020337, 0.032363787293, 0.004474401474, 0.047461643815, 0.017185352743, -0.055976428092, 0.070632085204, -0.065414696932, -0.028057496995, 0.000703036785, 0.034554213285, -0.018953636289, 0.042272359133, -0.052039794624, 0.020309843123, 0.069370850921, -0.048157073557, 0.070405855775, 0.013694301248, -0.018078640103, 0.044541671872, -0.037246320397, 0.019821867347, 0.042061701417, -0.036933198571, 0.062263712287, -0.039188850671, -0.071845956147, -0.008762449026, 0.052517995238, -0.064266927540, -0.036746304482, 0.059500932693, 0.016578689218, -0.071229986846, -0.047934371978, -0.045329272747, -0.017398953438, 0.041460745037, -0.067917309701, 0.069167599082, 0.045652873814, 0.058728724718, 0.013968862593, 0.008425243199, -0.002317748964, -0.007239997387, -0.017456300557, -0.030379787087, 0.024087309837, -0.014901671559, -0.043748799711, -0.020351704210, -0.053835626692, 0.016100972891, -0.005599126220, -0.036945827305, 0.071119576693, -0.015868030488, 0.037585839629, -0.068833135068, 0.062734633684, 0.063909217715, -0.012714721262, 0.015921078622, 0.034003660083, -0.019106548280, -0.006844542921, 0.021190278232, -0.007094122469, -0.070033624768, -0.066918373108, 0.068623423576, 0.039422839880, 0.069289430976, 0.064744859934, 0.054772228003, -0.020568609238, -0.068857297301, 0.053212434053, 0.054696619511, -0.002497628331, 0.071889936924, -0.053488213569, 0.065538540483, -0.018513254821, 0.058231979609, 0.019219264388, -0.041446536779, -0.016693767160, -0.046477437019, 0.017114065588, -0.020135454834, -0.037495315075, -0.068497575819, 0.021804511547, -0.029871080071, 0.062048733234, 0.042813390493, -0.024063173681, 0.005302801728, 0.031637161970, 0.026045553386, -0.013248257339, 0.002483792603, 0.065876662731, 0.064790934324, -0.029227238148, -0.001900941133, -0.012904524803, -0.005721412599, 0.011985570192, -0.031464770436, -0.054884165525, 0.002872847021, -0.004863761365, 0.067815750837, 0.056939288974, -0.016944650561, 0.045271545649, 0.022402100265, 0.069131702185, -0.007698670030, -0.062929131091, 0.064864575863, 0.020360358059, 0.067810937762, -0.071100972593, -0.032779630274, -0.016902238131, -0.045504830778, 0.042671561241, 0.015378542244, 0.036014966667, 0.071713879704, -0.019698567688, 0.062170669436, 0.005309283733, 0.056990042329, -0.008139804006, -0.042013227940, -0.020737420768, 0.023147933185, 0.039431653917, -0.002770327032, 0.062891513109, 0.061914816499, 0.042015120387, -0.012616455555, -0.026187300682, -0.068649083376, -0.041580006480, -0.010731186718, -0.048643533140, -0.041900217533, -0.009000621736, -0.060057848692, 0.009480439126, -0.066548526287, 0.054958418012, 0.042027182877, 0.031948268414, -0.022662330419, -0.049469716847, 0.032330289483, -0.011345129460, -0.069836013019, 0.067468956113, 0.028577834368, 0.042133703828, -0.058877352625, 0.051920250058, 0.008264020085, -0.061988610774, 0.036683931947, 0.022971943021, 0.065514400601, -0.024836976081, 0.002842046320, -0.051466085017, 0.038463979959, 0.036920085549, 0.052054718137, 0.067136928439, -0.048745736480, 0.064047679305, -0.036952178925, -0.033421032131, 0.034141324461, -0.060762330890, 0.046546198428, 0.009738810360, -0.070846371353, -0.054891288280, 0.009548403323, 0.011174358428, 0.015581153333, -0.030883435160, 0.033548891544, -0.032480619848, 0.030080795288, -0.030018556863, 0.014266632497, -0.017847005278, -0.027509473264, 0.070818573236, -0.014481198043, 0.063897430897, 0.033695213497, 0.070385292172, -0.024023272097, 0.002725437284, 0.025581739843, 0.000043720007, 0.018524006009, 0.035470843315, -0.032210547477, -0.024827014655, -0.037768155336, 0.045320622623, -0.005429714918, -0.042406752706, 0.059489563107, 0.017817154527, -0.072106130421, -0.050366804004, 0.034867040813, -0.050435110927, 0.000565387309, 0.032299146056, -0.041740193963, -0.038723058999, -0.056929022074, -0.057951789349, -0.015484999865, 0.038641653955, 0.033178575337, -0.002219639719, 0.053463459015, -0.003985017538, 0.050608567894, -0.041020676494, -0.019631911069, 0.003590986133, 0.066828191280, -0.004961214960, -0.030856903642, 0.030393831432, 0.003607727587, 0.001999571919, 0.019956991076, 0.022488825023, -0.006298996508, 0.024066008627, -0.053733747452, -0.059757374227, -0.001306928694, -0.029622003436, 0.015917606652, 0.067816391587, -0.047002270818, 0.003237225115, -0.030853413045, -0.063664786518, 0.070429667830, 0.070710569620, -0.071954101324, -0.016764689237, 0.005501650274, 0.018877960742, -0.047535665333, -0.052883718163, -0.068693436682, -0.064299345016, 0.000880740583, -0.060880333185, 0.046281218529, 0.067397192121, 0.052980631590, -0.063044622540, -0.014183681458, 0.006769180298, -0.023177128285, 0.009070806205, -0.067438490689, 0.039910055697, 0.034978710115, 0.020526625216, -0.037793312222, 0.048563130200, 0.063335582614, -0.007260039449, -0.043318986893, -0.031599462032, -0.061075724661, 0.026196174324, -0.069509141147, -0.024945877492, -0.045288510621, -0.032619819045, -0.000743024051, -0.049092501402, 0.064049035311, -0.032588899136, -0.024406388402, -0.039051357657, 0.006835751235, 0.053761333227, 0.045137062669, -0.067289531231, -0.011550676078, 0.016711592674, -0.065916582942, -0.054527822882, 0.028544351459, 0.050551362336, 0.067045032978, -0.003291338682, 0.048890963197, 0.048747800291, -0.045265406370, -0.066249527037, -0.039254564792, 0.048382595181, -0.070162244141, -0.001113995910, -0.024538703263, -0.048048138618, 0.049803033471, 0.006394647062, 0.013933859766, 0.045098021626, 0.060883730650, 0.025338470936, -0.042925406247, -0.023979410529, -0.054106317461, -0.001011237502, 0.006198301911, -0.064123921096, 0.030448392034, -0.051209244877, -0.043685823679, -0.011760715395, -0.039247613400, 0.056355312467, -0.030243944377, -0.069185107946, -0.069945253432, 0.019118130207, 0.001456454396, 0.017305180430, -0.041707471013, -0.068434238434, -0.010597873479, -0.043086029589, -0.022217735648, -0.067492656410, -0.061660107225, -0.057094067335, -0.066688343883, -0.024159442633, -0.026691395789, -0.057569891214, 0.041510835290, -0.044857680798, 0.014788798988, 0.065398022532, -0.004914037883, 0.014968410134, 0.044495746493, 0.061883181334, -0.013750717044, -0.016369529068, 0.017990574241, 0.024394065142, -0.009062647820, -0.056621804833, 0.061440497637, 0.025966234505, -0.048544321209, 0.035924732685, -0.025214951485, 0.069603666663, 0.005611293018, -0.006714098155, -0.071549661458, 0.061965480447, -0.056851163507, -0.027573101223, 0.064456403255, 0.053376749158, 0.069825068116, -0.044138766825, 0.042722180486, 0.061061531305, 0.004301816225, 0.006580285728, 0.059831932187, 0.041024066508, 0.013260133564, -0.002449169755, 0.036285117269, 0.005067691207, 0.020381763577, -0.065438091755, 0.065457493067, 0.046841129661, 0.070488572121, -0.025987222791, 0.032465048134, -0.006656818092, -0.015153277665, -0.025302857161, -0.055061668158, -0.016665339470, 0.025643765926, 0.061581060290, -0.070678725839, -0.063076294959, 0.002704203129, 0.022969238460, -0.058822654188, 0.068879485130, 0.044791266322, -0.019572824240, -0.044388808310, 0.016230262816, -0.008382864296, -0.011582989246, -0.063425719738, 0.040684327483, -0.063124574721, 0.055171862245, 0.044390372932, -0.047842748463, -0.069866381586, 0.069431900978, 0.056530788541, 0.069146394730, 0.064138278365, -0.043756321073, 0.007158145308, 0.026219956577, -0.054074794054, 0.035496056080, -0.067571997643, 0.068562731147, 0.039335928857, 0.058914974332, -0.033438581973, 0.020294629037, -0.012741580606, 0.007830984890, -0.027072809637, 0.025864459574, -0.008995704353, 0.061933830380, 0.001953557134, -0.001161932945, -0.032073084265, 0.054510891438, -0.048638578504, -0.038830045611, -0.054235108197, -0.048269037157, -0.003522470593, -0.038095679134, 0.054045796394, -0.035121951252, -0.006684921682, 0.035794429481, 0.016171962023, 0.033011950552, 0.048349887133, -0.070087760687, 0.027721866965, -0.021590650082, -0.058569636196, 0.053481161594, 0.032024301589, 0.056251570582, 0.047752641141, 0.065747275949, 0.029234908521, 0.066039100289, 0.037570193410, -0.008304573596, -0.031264211982, -0.070387803018, -0.067479886115, 0.010904923081, 0.049660243094, 0.001035653055, 0.059231638908, 0.024552658200, -0.071876719594, -0.011003047228, -0.049482755363, 0.040056191385, 0.010743044317, 0.045523963869, -0.051846638322, -0.059457123280, 0.060859546065, -0.004857622087, -0.062999919057, -0.067117385566, 0.049334369600, -0.062110982835, -0.070608645678, 0.031054019928, 0.014077760279, -0.005243763328, 0.017420940101, 0.040253512561, -0.031115807593, -0.048668913543, -0.071775183082, -0.007685691118, 0.037334971130, -0.030559852719, 0.044913358986, 0.015653654933, 0.065179809928, -0.026147089899, 0.034570507705, -0.061650402844, -0.064336128533, -0.031089361757, 0.061189070344, 0.064130991697, -0.004762001336, 0.039749816060, -0.029446616769, -0.016281172633, -0.050240561366, -0.047856032848, 0.064557433128, -0.069736383855, -0.056776318699, 0.004213914275, 0.025287732482, 0.024152562022, -0.022782776505, -0.034383885562, 0.047736138105, 0.008364535868, 0.003184400499, 0.038327567279, 0.002189993858, 0.016938425601, 0.028186649084, -0.031986244023, 0.061525851488, -0.052804291248, 0.037569232285, 0.053553014994, 0.003463663161, 0.062602743506, -0.038236305118, 0.070006728172, -0.028788216412, -0.015220109373, 0.052162893116, -0.037645008415, 0.024010591209, 0.039788044989, -0.058866515756, -0.013344973326, 0.064870834351, -0.023684632033, 0.065227791667, 0.033525027335, -0.043051376939, 0.020222343504, -0.069420978427, -0.049956362695, 0.030443489552, -0.043330460787, 0.061988040805, -0.010296177119, 0.048821121454, -0.029594935477, -0.005373895168, 0.002839103341, -0.028207879514, -0.037941511720, 0.020151160657, -0.057284127921, 0.045911863446, -0.031099859625, 0.054815754294, -0.023322060704, -0.012571308762, 0.026341810822, -0.063064612448, 0.005817048252, -0.027126234025, 0.025078848004, -0.025388460606, -0.033360742033, -0.021166976541, -0.022020019591, 0.043124377728, 0.008283257484, 0.030120797455, -0.021481029689, -0.024510055780, 0.055017411709, 0.017841480672, -0.043519489467, -0.026851464063, 0.070679381490, -0.065751746297, 0.005032621324, -0.024738609791, -0.059445232153, -0.064416639507, -0.027852274477, 0.012021787465, -0.009342052042, -0.061149179935, -0.067366272211, 0.018087618053, -0.017711780965, 0.024419650435, -0.000195927918, -0.049545906484, -0.058057814837, 0.020529173315, -0.028652146459, 0.025911599398, -0.069838143885, 0.009966798127, 0.071176871657, -0.033445931971, 0.012873865664, 0.059455230832, 0.029504552484, 0.069703415036, 0.062677800655, 0.027287527919, 0.015464559197, 0.047588951886, -0.049742314965, -0.041090708226, 0.067083150148, 0.023702904582, 0.022652849555, -0.066684886813, 0.059975624084, 0.010625198483, -0.070130757987, 0.064353838563, 0.006998054683, 0.007773756981, 0.008402645588, 0.053343161941, -0.026474319398, -0.055107951164, 0.011087447405, -0.024159613997, -0.025543436408, -0.016138859093, 0.014858461916, 0.039883062243, 0.041747249663, 0.069598808885, -0.064034432173, -0.021455116570, 0.052525326610, -0.007562652230, -0.064774252474, 0.029623329639, -0.022185854614, -0.057965502143, 0.064913168550, -0.040444213897, -0.059053115547, -0.060210313648, 0.032002747059, -0.020940281451, -0.028036590666, 0.033869296312, -0.028137695044, 0.020136885345, 0.058616966009, -0.027451727539, 0.021409600973, -0.058167625219, 0.017939470708, 0.051530197263, 0.058843985200, 0.032424889505, -0.067387044430, -0.057355500758, 0.068000152707, -0.022526159883, 0.049131795764, 0.010994769633, 0.029403962195, -0.034995932132, -0.006176248193, 0.055415183306, -0.040786910802, -0.032523721457, -0.069521233439, 0.051334023476, 0.052400819957, -0.034648224711, 0.037114568055, -0.035206213593, -0.008316837251, -0.049611218274, 0.008371330798, -0.002916358411, 0.070180654526, 0.019616529346, -0.027728043497, -0.058230482042, -0.009615167975, 0.062397763133, -0.017988890409, 0.022271059453, -0.030726790428, 0.038408957422, 0.023078590631, 0.061175212264, -0.024041235447, 0.038580104709, 0.065594300628, 0.006376616657, 0.044432029128, 0.017735488713, 0.001855485141, 0.014274582267, -0.002460114658, 0.043734103441, -0.007483310997, -0.050130680203, 0.034660167992, 0.058803036809, -0.036961123347, 0.055010437965, -0.033888753504, 0.000153258443, 0.013214431703, 0.005044341087, -0.060552276671, -0.031962621957, -0.011507280171, 0.007486425340, -0.032674998045, 0.005364865065, -0.017233408988, -0.038023445755, -0.004632577300, 0.034864857793, 0.005478926003, 0.031186647713, -0.034976627678, -0.053016707301, 0.009203590453, -0.019834686071, 0.033507257700, -0.006737343967, 0.024181343615, 0.022420585155, -0.050051599741, 0.012785181403, 0.014674149454, 0.004914224148, -0.070447161794, -0.000624887645, 0.029719203711, -0.071326427162, 0.061672970653, -0.038299679756, -0.013093881309, 0.032466851175, -0.035792551935, -0.071628533304, 0.050591722131, 0.014571771026, 0.003448948264, 0.019586518407, 0.026610352099, 0.036401264369, -0.039718102664, 0.032504968345, 0.037236876786, 0.068113774061, 0.065982744098, 0.037565462291, 0.016568265855, -0.044558569789, 0.027860805392, 0.018893241882, 0.070155069232, 0.066213607788, 0.061618804932, 0.050156213343, -0.027419120073, -0.020181328058, -0.027073808014, -0.036437209696, 0.037317007780, 0.031832523644, 0.002346470952, 0.039914138615, -0.042814459652, -0.002571336925, -0.041876040399, 0.055385187268, 0.067386373878, -0.034337341785, -0.069221533835, -0.002304963768, -0.008218280971, -0.029366262257, -0.050074227154, -0.043230045587, 0.033359706402, 0.018542006612, 0.046840444207, -0.031800363213, -0.030749451369, -0.067585349083, 0.068411335349, -0.028164483607, -0.063285626471, -0.059759747237, 0.048623628914, -0.006647303700, -0.035749312490, 0.006190627813, 0.045325554907, 0.042824871838, -0.039276450872, 0.065093547106, 0.022473096848, 0.015438817441, 0.042187839746, 0.061784997582, -0.021307881922, 0.015586085618, 0.070733964443, 0.001637443900, 0.036156743765, -0.059982847422, 0.009531006217, -0.037016306072, 0.001860573888, 0.005157835782, 0.057983934879, -0.022333726287, -0.041531570256, -0.050341628492, -0.000134930015, -0.028875660151, 0.009396232665, 0.023512639105, -0.050711568445, 0.002464242280, -0.004509963095, -0.008484929800, -0.056926548481, -0.009547561407, 0.053575247526, -0.001082003117, 0.048121802509, -0.036767121404, -0.031967267394, -0.004971578717, 0.010375790298, -0.000896126032, 0.029234528542, 0.031858846545, -0.068647392094, -0.001681186259, 0.059678375721, -0.036428965628, 0.038804925978, 0.030436515808, 0.049311533570, -0.013367205858, 0.005212090909, 0.028615064919, -0.051605474204, 0.041360884905, -0.057721894234, 0.042815782130, -0.057898707688, 0.061244189739, -0.035113487393, -0.052481673658, 0.067223399878, -0.028118766844, 0.065309062600, 0.010987251997, -0.031493693590, -0.060486339033, 0.051680028439, 0.025207445025, 0.042710639536, -0.056032072753, -0.027885757387, -0.042122937739, -0.014689568430, -0.045231610537, -0.055269416422, 0.043930396438, 0.009683854878, -0.001621238887, 0.027793914080, 0.017974540591, 0.026604846120, 0.036234878004, -0.056678533554, 0.051738530397, -0.015581082553, 0.067676052451, -0.032938394696, -0.003937475383, -0.070602454245, -0.024150718004, -0.024970378727, -0.047758471221, -0.023595072329, 0.045148484409, 0.018106460571, 0.037334248424, -0.004813276231, 0.028803274035, 0.034796148539, 0.010253295302, -0.043487280607, -0.018384311348, 0.033703804016, 0.064812734723, -0.011245675385, 0.043818570673, 0.065903097391, -0.058295812458, 0.009009845555, -0.028133373708, -0.027075078338, 0.031868070364, 0.022025421262, 0.039847545326, -0.061277762055, -0.031664673239, -0.028886672109, -0.002890549600, -0.057206578553, 0.070583283901, 0.051998175681, -0.056760832667, 0.002484947443, 0.069838881493, 0.052590280771, -0.036774795502, -0.061319146305, 0.053156152368, 0.022255092859, -0.068071097136, 0.033447034657, -0.012777231634, -0.022814899683, -0.032825417817, -0.022500555962, -0.022293787450, 0.039135545492, -0.025765709579, 0.046824663877, -0.015473764390, 0.033665932715, 0.067817270756, -0.057649884373, 0.020131379366, 0.056900098920, -0.062800355256, -0.047539021820, 0.002017840743, -0.016778007150, -0.011277679354, 0.053538873792, 0.028255611658, 0.057265609503, 0.065123602748, -0.041256815195, -0.007740564644, -0.065508849919, 0.013090461493, -0.039597038180, 0.014807105064, 0.064269825816, -0.070823758841, -0.033497206867, 0.060543268919, -0.027766603976, -0.065667696297, -0.055546216667, -0.045272424817, 0.008901894093, 0.033949650824, 0.026200011373, 0.003926068544, 0.066019728780, 0.059745416045, 0.009761400521, 0.036719568074, -0.038691345602, -0.034254804254, 0.050702624023, -0.040421843529, 0.071589231491, 0.070894733071, 0.001058205962, 0.029658414423, 0.014122962952, 0.058472126722, -0.062422934920, -0.068002156913, 0.059251680970, -0.001999534667, -0.049210689962, -0.062698669732, -0.039332214743, -0.051481775939, 0.000569462776, 0.059253826737, 0.020305812359, 0.030404269695, -0.053950496018, 0.014588013291, -0.036544386297, -0.006085641682, 0.020029120147, -0.054798789322, 0.052150368690, 0.064162820578, 0.015087828040, -0.055586650968, 0.052565127611, 0.049391463399, -0.042388737202, -0.043787084520, -0.023219868541, -0.068086467683, 0.014319956303, -0.026261251420, 0.045598775148, 0.026898525655, -0.070462219417, 0.066572859883, 0.029145300388, -0.006685331464, -0.066500447690, 0.045126065612, 0.000688217580, 0.069530621171, 0.021187812090, 0.063266620040, -0.071237862110, -0.061757080257, -0.027823109180, 0.027271643281, 0.025488086045, 0.034956119955, -0.046959854662, -0.024793636054, -0.034353807569, -0.036437120289, 0.018478289247, -0.002311848104, 0.063541397452, -0.061239808798, 0.055931776762, -0.009255550802, 0.060110554099, 0.023958794773, -0.069442756474, -0.071414262056, -0.065378271043, 0.049984343350, 0.049009874463, 0.061973243952, 0.055433392525, -0.007774546742, 0.051921382546, 0.002049334347, 0.057119384408, 0.065272465348, 0.022360414267, -0.038351882249, 0.000080116093, -0.040249470621, -0.037875317037, 0.053858324885, -0.049666434526, 0.035921737552, -0.051574744284, -0.039262961596, -0.071933105588, -0.000639684498, 0.066480383277, 0.035418659449, -0.007591299713, 0.037552975118, 0.012258216739, -0.061996113509, 0.023888610303, 0.043124035001, 0.040143497288, 0.037445120513, 0.030517458916, 0.005885235965, 0.047729805112, 0.037465184927, 0.009585641325, -0.058469064534, -0.047862913460, 0.025861568749, -0.011446077377, -0.061889864504, 0.013043038547, -0.013220261782, 0.038342781365, -0.033453382552, -0.013341311365, 0.052047416568, -0.067430555820, -0.045267127454, -0.050511494279, 0.071061983705, -0.054879829288, 0.043717980385, -0.059386577457, -0.020803526044, 0.032606311142, -0.016818221658, 0.024371236563, -0.037155833095, 0.052770480514, -0.012537531555, 0.026437751949, 0.049351491034, -0.050154134631, -0.056374341249, -0.044652290642, -0.017919238657, -0.035052698106, -0.069348327816, -0.019259702414, 0.029858626425, -0.029584322125, -0.026818104088, -0.058246120811, 0.004498764873, 0.031726546586, 0.060353502631, -0.039141792804, -0.072027139366, 0.026246264577, 0.061657309532, -0.006344504654, 0.030848436058, -0.068184301257, -0.023004755378, -0.051955863833, -0.002486668527, -0.065944753587, 0.018930904567, -0.011156409979, -0.019568368793, -0.053500860929, 0.067607119679, 0.040304958820, 0.031260564923, -0.018742151558, -0.063568174839, 0.069882720709, 0.059222310781, -0.029614862055, -0.059568483382, 0.015302821994, -0.062380176038, 0.030541755259, -0.016109678894, -0.048436317593, -0.066249474883, -0.026992522180, -0.054262019694, -0.067924350500, 0.066766977310, -0.070066608489, -0.023080222309, -0.015880282968, -0.022670108825, -0.037027370185, -0.062760263681, 0.014951586723, -0.043677445501, 0.053950950503, 0.037264108658, -0.027024734765, 0.070759668946, 0.052946075797, 0.064034357667, 0.040238186717, -0.064862005413, -0.002904593945, 0.042529866099, 0.012950688601, 0.046712182462, 0.045462816954, -0.005115441978, 0.055374130607, -0.066172614694, -0.013088446110, 0.022086367011, 0.039714246988, -0.071916744113, -0.040208004415, -0.008016452193, -0.038529366255, 0.017136968672, -0.019850999117, 0.009968914092, -0.034613519907, -0.013150956482, -0.035259343684, -0.038214009255, 0.046840548515, -0.068044982851, 0.038908384740, 0.053170159459, 0.069918259978, 0.052668467164, -0.037021260709, 0.037738025188, 0.001245535910, 0.016988649964, 0.001760244370, -0.031412016600, 0.064409881830, 0.004955917597, -0.009365379810, 0.070456296206, 0.013443052769, -0.050311535597, 0.052850887179, -0.069695055485, 0.056344956160, 0.049401268363, -0.062669500709, 0.038877017796, 0.022978670895, -0.019113190472, -0.016206223518, -0.040765523911, -0.009550988674, -0.033576611429, -0.028952348977, 0.068235442042, 0.020483314991, -0.032805524766, -0.057585790753, 0.060671374202, -0.007532536983, -0.022036362439, 0.001242764294, 0.071663558483, -0.012486271560, 0.011317670345, -0.011270057410, 0.005109675229, 0.036624036729, 0.043480776250, 0.033485643566, -0.020292103291, 0.008580215275, 0.002779722214, 0.045019336045, -0.046947930008, -0.024511311203, 0.063616275787, 0.043909698725, 0.036864325404, 0.051944769919, 0.023000970483, -0.047004692256, -0.031702116132, 0.071227297187, -0.011795196682, 0.066392600536, 0.005451701581, 0.030416317284, -0.056083947420, 0.031575925648, -0.029508009553, -0.014415711164, 0.050133243203, 0.055271402001, -0.023259583861, -0.058398019522, -0.053099863231, 0.041319914162, -0.059357650578, 0.037310570478, 0.046786725521, 0.027626506984, -0.012570824474, 0.056534036994, 0.041159465909, -0.016014218330, -0.004277952015, 0.032223708928, -0.011731274426, -0.004775837064, 0.050001114607, 0.027495361865, -0.015016194433, 0.068626433611, 0.036838822067, -0.056729499251, 0.035298906267, 0.065318495035, 0.016787022352, 0.067361220717, 0.059224143624, 0.030507974327, -0.039719618857, 0.023461893201, -0.064544290304, 0.025656066835, -0.067393891513, 0.071367889643, -0.002388522029, -0.042149759829, -0.029063690454, -0.054589182138, -0.060593724251, -0.051879398525, 0.024605706334, 0.037588089705, 0.044409751892, -0.040612801909, -0.055149231106, 0.038362413645, 0.017574287951, 0.015387110412, 0.067763254046, -0.060375273228, -0.034966837615, -0.055367819965, -0.029225084931, -0.038632567972, 0.013200938702, 0.024668388069, -0.054564125836, 0.058303087950, -0.013178538531, -0.025517195463, -0.023107390851, -0.062806650996, 0.069841220975, 0.030491478741, 0.068791210651, 0.019494824111, -0.015051759779, 0.031394846737, 0.057121515274, -0.063943825662, 0.030272148550, 0.013302356005, 0.071897923946, 0.004907600582, -0.048055626452, -0.067437559366, -0.060256928205, 0.055144757032, 0.012577034533, -0.016983710229, -0.027411345392, 0.049393333495, 0.036018580198, -0.018609970808, 0.014180481434, 0.069565102458, 0.052383825183, -0.055971730500, -0.042551219463, 0.011791653931, -0.067836545408, -0.036739248782, -0.010481454432, 0.047707542777, 0.008752681315, 0.055401995778, 0.030507318676, 0.026554569602, 0.015073359013, 0.054410666227, -0.036744598299, -0.021401673555, 0.024159923196, 0.057221278548, 0.045142278075, -0.011067330837, 0.008971184492, 0.018868051469, 0.053279981017, -0.065961733460, -0.071407020092, 0.043211206794, -0.037491891533, 0.015993155539, 0.006902754307, -0.049201607704, 0.042110100389, -0.056325800717, -0.020430423319, 0.042820483446, 0.033141411841, -0.004680976272, -0.047642000020, 0.065339535475, -0.027750551701, 0.028879664838, 0.064293786883, 0.020713351667, -0.021931629628, -0.044422138482, -0.000397123396, -0.038338650018, -0.062882572412, 0.050921075046, 0.049654066563, -0.068347088993, -0.006242856383, -0.061495389789, -0.016615804285, 0.040665864944, -0.006585672498, -0.049996748567, 0.010449022055, -0.015950586647, 0.003324769437, 0.048091016710, 0.058714717627, 0.043107263744, -0.070247605443, 0.038056813180, 0.067018583417, -0.071713812649, -0.011554807425, 0.042714320123, 0.010807789862, -0.011266063899, -0.002639524639, 0.040711648762, 0.009733580053, 0.048333935440, 0.039095647633, 0.048724956810, 0.000421904027, 0.053013667464, -0.034652940929, 0.019911751151, 0.023637570441, 0.001163788140, 0.024362854660, 0.015790484846, 0.008472114801, 0.035353533924, -0.054806068540, 0.055956035852, -0.057665131986, 0.046550601721, 0.065983593464, 0.045011043549, 0.053222686052, -0.003972798586, 0.041776053607, 0.003711640835, 0.038635753095, -0.058515161276, 0.071701511741, -0.015466727316, 0.061580181122, -0.011823154986, -0.038501180708, -0.009825944901, -0.060847379267, -0.066558450460, 0.001387968659, 0.064487233758, -0.045068908483, -0.049902729690, 0.045498915017, 0.041441492736, -0.052209623158, 0.027904823422, 0.066841408610, 0.005704224110, 0.053869605064, -0.035574324429, -0.044476252049, 0.038707792759, -0.016301631927, -0.032333932817, 0.032691657543, -0.056848049164, -0.055205993354, 0.036624066532, -0.023152112961, 0.039697043598, -0.004173822701, -0.071253404021, 0.064140945673, -0.006088927388, 0.064881742001, 0.003493651748, 0.036695852876, 0.019703693688, 0.016409173608, -0.066618971527, 0.067601174116, 0.008641920984, -0.062326699495, 0.020232960582, -0.020163174719, -0.026621811092, -0.040820188820, 0.038952127099, -0.034885603935, 0.066711887717, 0.016398228705, 0.057980611920, 0.015358909965, 0.051563940942, -0.039346978068, 0.003831759095, -0.040329635143, -0.002705566585, -0.062331914902, 0.000438764691, 0.071910500526, -0.052299819887, 0.054198920727, 0.071595087647, -0.065790362656, 0.062422052026, -0.007305480540, -0.064743526280, 0.020329184830, -0.040701534599, -0.010777231306, -0.003051295877, 0.028614155948, 0.058548003435, 0.071885600686, -0.041236858815, 0.071130976081, 0.011800803244, 0.018062449992, -0.045609273016, -0.005350701511, -0.018781572580, 0.065631121397, 0.058033555746, -0.043289065361, -0.061964936554, 0.043035507202, -0.025639172643, -0.008316688240, 0.017438322306, 0.052713803947, -0.037901695818, 0.011142335832, 0.028423115611, -0.017436891794, -0.015366122127, -0.002046920359, 0.060894131660, -0.063071064651, -0.010530147702, 0.010648697615, -0.065446130931, 0.025423079729, -0.046378418803, 0.024891868234, -0.027731794864, -0.016080770642, 0.005325235426, -0.050900734961, -0.043825194240, -0.008778110147, 0.058118581772, -0.009831398726, 0.045328311622, -0.022157412022, -0.019655123353, 0.045232474804, -0.015991695225, 0.016107231379, -0.001297414303, -0.065049558878, -0.032165259123, 0.014553740621, -0.067374467850, -0.035197455436, -0.070153452456, -0.040921758860, -0.057008225471, -0.037286996841, 0.053268432617, 0.014320388436, 0.047819502652, -0.061552084982, -0.054439261556, -0.035634823143, -0.017640031874, 0.020191550255, 0.011687658727, -0.028357420117, 0.001643911004, -0.048639077693, 0.031598553061, 0.058111786842, 0.027284123003, -0.027863338590, 0.070072904229, -0.071506179869, 0.028097003698, -0.010968703777, 0.005554683506, 0.002068758011, 0.035224363208, 0.007272914052, -0.063121408224, -0.063080698252, -0.046874355525, -0.027070708573, 0.008787311614, 0.062101945281, -0.017796263099, 0.041877970099, -0.040033496916, -0.041889756918, -0.057344317436, 0.035043574870, -0.053017549217, -0.042507998645, 0.048709213734, -0.064045391977, 0.055152550340, -0.072063103318, -0.050080969930, -0.011180430651, -0.061481539160, 0.040829569101, 0.053874701262, 0.007120773196, -0.062493205070, -0.016353458166, 0.057130098343, -0.002963609993, 0.034906715155, -0.063979856670, 0.004844456911, -0.035443607718, 0.019628830254, -0.029839750379, -0.045561682433, 0.031646639109, -0.055339328945, 0.023602336645, -0.030063141137, -0.061676040292, -0.018019087613, 0.059245392680, -0.020628642291, 0.028265781701, -0.027350984514, 0.032911933959, 0.065349459648, 0.060424759984, 0.047421656549, -0.023364488035, 0.071440219879, -0.069179326296, 0.068058460951, 0.010413900018, -0.040076527745, 0.013015061617, -0.061858031899, 0.038080178201, -0.036136545241, -0.021650098264, 0.002514712512, -0.023694474250, -0.021308738738, 0.010521508753, -0.020021189004, 0.036318056285, 0.032503724098, 0.048715971410, 0.004405021667, -0.011079136282, -0.033769719303, -0.000429525971, -0.030313681811, 0.007088802755, -0.039796374738, 0.032035663724, -0.034973651171, 0.052645653486, -0.050065021962, 0.041044078767, -0.062499694526, 0.035457804799, 0.048710584641, 0.013004027307, 0.061540663242, -0.070020325482, 0.003761954606, 0.019206777215, 0.071968287230, 0.043654285371, -0.044615089893, 0.025680780411, -0.068967945874, 0.018016077578, 0.011656120420, 0.015901878476, -0.001980833709, 0.066410973668, -0.004098132253, 0.014110140502, 0.048448175192, -0.072107575834, 0.005145862699, 0.042255766690, -0.000407308340, 0.042831324041, -0.011764828116, 0.023499526083, -0.026426933706, -0.026249483228, 0.057560190558, 0.019505754113, -0.040611390024, 0.058075830340, 0.030492268503, -0.005276300013, -0.034346632659, 0.016973182559, -0.067040093243, -0.030251137912, -0.057423140854, -0.029834244400, -0.027859535068, 0.028744839132, -0.014230895787, -0.036764662713, -0.007956109941, 0.001433327794, -0.020457610488, -0.059679754078, 0.018240496516, -0.067274414003, -0.004343919456, 0.008531436324, 0.001059874892, -0.058344095945, 0.055091887712, -0.037990134209, -0.015775170177, 0.043144665658, 0.062103286386, 0.066476389766, -0.012282308191, 0.021187230945, -0.054442942142, 0.040242969990, 0.066184476018, -0.014245573431, 0.021554708481, -0.000567175448, -0.010087255388, -0.022883519530, 0.063867792487, -0.000152416527, 0.018627487123, -0.021116580814, -0.031511485577, -0.054724872112, 0.053143069148, 0.046966239810, -0.048121526837, 0.011725097895, 0.009333409369, -0.045466117561, -0.065546564758, 0.051459096372, -0.037150464952, -0.010202091187, 0.042350746691, 0.012642063200, 0.050551652908, -0.047355223447, 0.022340834141, -0.004284508526, -0.049916632473, -0.071457043290, 0.050145767629, -0.020834103227, -0.024523288012, 0.024025902152, 0.066764831543, -0.027636609972, -0.050882928073, 0.042968802154, 0.033649362624, -0.066362194717, -0.020610522479, 0.006389230490, 0.052630335093, -0.030453603715, -0.002406500280, -0.007265068591, 0.063188001513, 0.010964125395, -0.035120025277, -0.017670467496, 0.027795508504, -0.055251143873, 0.036711238325, -0.019213158637, 0.069313332438, 0.000325955451, -0.018743630499, -0.024995084852, 0.066838130355, -0.007449552417, 0.041897170246, -0.020175922662, 0.020077280700, 0.021031096578, 0.048820294440, -0.027025181800, -0.013891294599, 0.071716889739, 0.004301197827, -0.037216417491, 0.012961424887, -0.059372551739, -0.011810198426, 0.033219136298, 0.061700552702, 0.015144452453, 0.018537998199, 0.053932487965, -0.012132391334, -0.052797514945, -0.032258965075, -0.064124524593, -0.043181367218, 0.067085444927, -0.026970293373, 0.045747593045, 0.005502633750, 0.002091541886, -0.005084984004, -0.011466812342, -0.000242657959, -0.066937282681, 0.026447080076, -0.007217146456, 0.024951845407, -0.002565436065, 0.060610741377, -0.027179572731, 0.020871423185, 0.013150081038, 0.021980255842, 0.024381905794, -0.019508969039, -0.055768728256, 0.025844685733, 0.010704949498, -0.020873486996, 0.069589272141, 0.045141138136, -0.009979508817, 0.005743987858, 0.006804436445, 0.060828983784, 0.005958572030, 0.008597560227, -0.057746756822, -0.028257828206, 0.027847610414, -0.035734102130, 0.061175316572, -0.017341069877, 0.014725886285, -0.005126178265, -0.013510104269, 0.069345340133, -0.041102647781, 0.068565949798, -0.072074733675, -0.000945180655, -0.070388764143, -0.024107582867, -0.043667431921, -0.043337635696, -0.037887345999, -0.047409698367, 0.041638217866, -0.060698874295, 0.000548519194, -0.016095567495, -0.067895956337, -0.052198715508, -0.041294723749, 0.017896339297, 0.060953423381, -0.056313313544, -0.016749721020, 0.071329683065, 0.062055408955, 0.071537077427, -0.012246675789, -0.048488140106, -0.013213019818, -0.039569698274, 0.072036549449, -0.009882587940, 0.000674642622, 0.037971101701, 0.033832818270, 0.057901665568, 0.035314850509, 0.016360566020, 0.020545274019, -0.054411470890, -0.021334979683, -0.033117271960, -0.028081100434, -0.060071941465, 0.046824924648, -0.033848285675, -0.058708578348, 0.007088102400, 0.019434966147, -0.025724671781, 0.038563713431, -0.034804854542, 0.048137821257, 0.010106340051, -0.051553718746, 0.002663910389, -0.034354738891, -0.049808248878, -0.021266222000, 0.039000943303, -0.005575276911, -0.050210051239, -0.009257994592, 0.038157157600, -0.038142170757, -0.064776748419, 0.062409296632, 0.002951011062, 0.063415214419, -0.058253932744, 0.030323609710, -0.032225035131, 0.001458548009, 0.002142332494, 0.052739687264, 0.055237188935, 0.043856598437, 0.049647301435, 0.061579361558, -0.030190482736, 0.017271816730, 0.005628272891, 0.003165908158, 0.058918058872, -0.037846203893, -0.063500486314, 0.037645213306, -0.066817790270, 0.002901598811, -0.050680182874, -0.024972874671, 0.011041246355, -0.006385542452, 0.008230619133, 0.024188019335, -0.014604773372, -0.052092861384, -0.068665944040, 0.063445359468, 0.065467923880, -0.008845664561, -0.063738673925, -0.066022403538, 0.033487297595, -0.042424976826, -0.054287016392, 0.035742312670, -0.037839010358, -0.030744854361, 0.059762284160, -0.060200955719, -0.054862640798, 0.014212623239, 0.068633377552, -0.030869085342, -0.057435236871, 0.004708729684, -0.005756258965, -0.028636336327, -0.007321573794, 0.053250968456, -0.038661371917, -0.055704187602, -0.042962208390, -0.048873081803, -0.005130343139, 0.060759708285, 0.045085236430, -0.004594810307, -0.021491438150, 0.052986919880, -0.031602971256, 0.009917840362, 0.012366048992, -0.019118387252, -0.067034572363, -0.062473572791, 0.003182478249, 0.068841487169, -0.005939625204, -0.062383014709, -0.042728856206, -0.005322515965, -0.001300357282, -0.062771193683, -0.054233625531, -0.069358244538, -0.070351958275, 0.062360867858, 0.021565511823, -0.056031987071, 0.061352416873, -0.038422737271, 0.012247361243, -0.009568862617, 0.068265154958, -0.007074020803, 0.030271597207, 0.041650325060, 0.019904494286, -0.070302076638, -0.036428812891, -0.012276303023, 0.015880331397, -0.059020873159, -0.022030375898, -0.008891738951, -0.067169420421, 0.019251562655, 0.001423038542, -0.066107250750, -0.044113762677, 0.037172779441, -0.007113218307, -0.006973795593, -0.067779555917, 0.058202087879, -0.050345588475, 0.028533920646, 0.050818301737, -0.043127857149, -0.058196272701, 0.011930301785, 0.014663070440, -0.018919739872, -0.054815426469, -0.033238627017, 0.012851513922, 0.051966220140, 0.055726781487, -0.009534657001, 0.040547229350, 0.028506442904, -0.015786353499, 0.030208759010, 0.019499816000, 0.026179037988, -0.014801114798, -0.034940168262, 0.009441949427, -0.047501839697, -0.017470479012, 0.030453793705, -0.052383288741, 0.001022726297, 0.008934341371, 0.010776408017, 0.044544391334, 0.060572400689, 0.030476331711, 0.066701710224, -0.023636523634, 0.065227210522, 0.055251717567, -0.001676589251, -0.019552983344, -0.005501344800, -0.055982619524, 0.000695295632, -0.057927545160, 0.040980607271, 0.037440426648, -0.070932231843, -0.035758759826, 0.070766851306, -0.036186836660, -0.070400618017, 0.068568274379, -0.029992334545, 0.021390713751, 0.067042902112, -0.020990386605, -0.068309016526, -0.058809284121, -0.063028544188, -0.027727063745, -0.055031128228, -0.056632645428, -0.037119802088, -0.027422081679, 0.067710518837, 0.024714641273, -0.029990527779, -0.032208431512, 0.025062277913, 0.011596597731, -0.005455680192, 0.011626794934, -0.048635721207, 0.007610276341, -0.015526346862, -0.009956058115, 0.062562927604, -0.060324326158, -0.033391043544, -0.011423278600, 0.058754518628, -0.021807622164, 0.071756988764, 0.006866104901, 0.044290989637, 0.026084147394, -0.070851512253, 0.007752835751, -0.016278885305, 0.068709507585, 0.018336042762, -0.036183688790, -0.063926376402, 0.015784583986, -0.000323615968, -0.049977388233, -0.003219418228, -0.053533706814, -0.035603437573, 0.031024634838, -0.011533264071, 0.050261296332, -0.059901632369, -0.068057179451, 0.036948271096, -0.013355039060, -0.035349901766, 0.000304654241, -0.029849540442, -0.015914022923, 0.016125649214, 0.011477202177, -0.023251201957, 0.026903294027, -0.065990164876, -0.068293787539, -0.026814799756, -0.033921722323, 0.040338888764, 0.013521492481, 0.014981217682, 0.031896494329, 0.064773738384, -0.069800928235, -0.024166204035, -0.004077397287, -0.034532085061, -0.058218158782, -0.026227321476, -0.020361702889, 0.044277533889, -0.029868192971, 0.005056455731, -0.067451789975, 0.063910320401, -0.012115821242, -0.019475743175, -0.038606982678, -0.067025333643, 0.044121369720, -0.072032541037, 0.003022372723, 0.048071712255, -0.023217789829, -0.071592368186, -0.054065883160, -0.040032327175, 0.029475145042, -0.033614795655, 0.043066017330, 0.056252449751, 0.061426654458, -0.070563957095, -0.062955744565, 0.051166191697, -0.049843937159, 0.071534693241, 0.063790887594, -0.002663083375, -0.060579013079, -0.047791011631, -0.019433725625, -0.050160568208, -0.043838016689, 0.007078632712, 0.001741819084, 0.002445854247, -0.000105217099, 0.018699824810, 0.008617162704, -0.041619855911, -0.025541096926, 0.060332357883, -0.009792976081, -0.058052636683, -0.068698033690, 0.043133519590, -0.051743503660, 0.026019506156, -0.050563938916, 0.039190381765, -0.039333075285, -0.008149579167, -0.046574398875, 0.067142874002, 0.056369528174, -0.071019463241, 0.071540847421, 0.023012466729, 0.020384877920, 0.046700999141, 0.066557466984, 0.000911630690, 0.014029532671, -0.064466796815, -0.049857720733, -0.013174116611, 0.037333935499, 0.005570411682, -0.028261389583, 0.051239222288, 0.054565280676, -0.000271618366, 0.049818404019, 0.053167164326, 0.030339024961, 0.031858146191, 0.067917764187, -0.060559656471, 0.032590173185, 0.020281657577, -0.006945528090, 0.044768363237, -0.067855194211, -0.005972884595, -0.009234786034, 0.057725369930, -0.026014529169, 0.026161648333, 0.024171054363, 0.046633780003, 0.038025423884, -0.000268697739, -0.006955265999, -0.034381665289, -0.058067087084, -0.071549057961, -0.062357962132, -0.040555503219, 0.030024632812, -0.050795137882, 0.007587186992, 0.040517680347, -0.067846298218, -0.047407221049, 0.020348057151, 0.011255070567, -0.033934384584, -0.038186218590, 0.013767182827, 0.071535676718, -0.027263369411, 0.067536160350, -0.017518140376, 0.032315954566, 0.020938836038, 0.059437394142, 0.033800557256, 0.037839904428, 0.065768197179, -0.036270201206, 0.057982519269, -0.024166855961, -0.025479361415, -0.031552989036, -0.054971404374, 0.003917947412, 0.002690836787, -0.038221355528, -0.059464417398, 0.020285755396, 0.033320240676, 0.020804576576, -0.059789411724, -0.008858978748, -0.042249832302, -0.022306434810, 0.051785364747, 0.035689450800, -0.004111908376, -0.045261137187, -0.019851360470, -0.070906817913, 0.071702301502, 0.070111110806, 0.042314335704, 0.038939379156, -0.058006986976, 0.021470494568, 0.032466903329, -0.012501794845, -0.068824946880, -0.002052910626, -0.034734807909, -0.049869090319, -0.034827087075, 0.037305116653, -0.064448162913, 0.033301532269, -0.031283725053, -0.023296181113, 0.049501113594, 0.071106106043, 0.043152257800, -0.062425069511, 0.063597843051, -0.040100671351, 0.037432067096, 0.012732997537, 0.015968501568, -0.049272168428, -0.054784573615, -0.008407704532, 0.052745446563, 0.004921317101, 0.029721319675, 0.006524465978, 0.016666837037, -0.015628777444, 0.033462412655, -0.046173267066, 0.057787209749, -0.018051452935, 0.021862819791, -0.046571128070, -0.063300117850, 0.007169671357, 0.013068176806, 0.010644964874, -0.027130398899, 0.012743681669, -0.030625063926, -0.057751111686, -0.047372549772, -0.021284013987, 0.069643333554, 0.031706333160, 0.026411205530, -0.020033661276, -0.063173234463, 0.067095160484, 0.001053340733, 0.009837061167, -0.013377200812, 0.027951247990, 0.071501627564, -0.026768032461, 0.027006804943, -0.004513680935, 0.063044756651, 0.006419405341, -0.057112563401, -0.038402330130, 0.020044155419, -0.008841775358, 0.009300112724, 0.035236440599, 0.050621248782, -0.058742024004, 0.023162864149, -0.045132949948, -0.011233665049, -0.047441408038, -0.040407288820, -0.009272411466, -0.027888786048, 0.052025049925, -0.026522599161, 0.049317784607, -0.059297326952, 0.016254745424, -0.004160039127, -0.045325934887, -0.001126006246, 0.045754238963, -0.036551132798, -0.020457815379, 0.026490956545, -0.015905853361, 0.065131798387, -0.044065825641, -0.046386621892, 0.053426995873, -0.040740318596, 0.023974113166, -0.039478711784, -0.051084190607, 0.047006778419, 0.037900850177, 0.003329433501, 0.001443870366, 0.068153053522, -0.070567212999, 0.058272078633, 0.063952505589, 0.020574010909, 0.046660840511, -0.063699133694, 0.043130353093, -0.031001556665, -0.046233419329, -0.064727209508, 0.031267672777, -0.026513412595, -0.022334378213, 0.021643318236, -0.030604161322, 0.063120305538, 0.010449260473, -0.010865896940, -0.052953921258, -0.050810024142, -0.027236614376, -0.003949947655, -0.003996528685, 0.033362999558, -0.048688836396, 0.044617876410, 0.041793137789, 0.035671986639, 0.055289015174, 0.012428164482, 0.071528151631, 0.056482791901, 0.070415690541, -0.020661436021, -0.028184425086, -0.064186468720, -0.048952285200, -0.040461882949, -0.001621872187, 0.020313918591, 0.042385384440, 0.069387674332, -0.035644631833, 0.016102917492, -0.001735091209, -0.023219939321, -0.018725462258, 0.010123461485, 0.002086356282, 0.042144842446, 0.012261353433, -0.071022100747, -0.018306124955, -0.027871340513, -0.048533655703, -0.061889570206, -0.051837518811, 0.070120468736, -0.071900382638, -0.003339223564, -0.058568447828, -0.027208048850, -0.062965914607, 0.022560916841, 0.047199279070, -0.069516502321, 0.047492392361, -0.060746069998, 0.036332733929, -0.002506762743, 0.056956514716, 0.030648484826, 0.050659775734, -0.061168260872, 0.017827443779, 0.046350561082, -0.044529058039, 0.013047903776, -0.031289368868, 0.019176438451, -0.006264254451, -0.036586798728, -0.046274557710, 0.063065588474, 0.008001103997, 0.014851361513, 0.015303730965, 0.055057540536, 0.026554517448, -0.020522926003, -0.068134680390, 0.046980723739, 0.047700330615, 0.051639765501, 0.034161649644, 0.059946849942, 0.061857640743, 0.005504958332, -0.008347086608, 0.003833204508, 0.006574474275, -0.032036829740, 0.065023794770, -0.032926451415, 0.031971357763, 0.019947923720, 0.004236295819, 0.030679434538, -0.057283528149, 0.066804245114, 0.063651069999, -0.059212516993, 0.013346798718, -0.032563965768, 0.055257782340, 0.026486828923, 0.014644004405, -0.029752872884, -0.034387912601, 0.043072059751, 0.046685673296, -0.057394009084, -0.024293031543, 0.057297512889, -0.067880831659, 0.049003213644, 0.069023862481, 0.006907865405, -0.058153446764, 0.028543211520, -0.014894321561, -0.024891227484, -0.032274831086, -0.019808311015, 0.018377549946, 0.032620437443, 0.059550598264, 0.013183392584, 0.031623430550, 0.050482049584, 0.019135780632, 0.003322549164, 0.051813513041, 0.033533237875, 0.036255180836, 0.061970248818, 0.027946755290, 0.066390305758, 0.065339609981, 0.055296167731, -0.023527950048, 0.064468443394, -0.002990573645, -0.012678641826, 0.056792497635, -0.043392196298, -0.003907017410, 0.025679573417, 0.013137757778, 0.063190162182, 0.043058343232, 0.027093403041, 0.067705452442, 0.054341807961, -0.033040530980, 0.050413876772, -0.054142571986, 0.070258527994, -0.032804217190, 0.053707450628, 0.002310991287, 0.022618353367, -0.015274669975, -0.004163824022, -0.033187903464, -0.065072908998, 0.018729455769, 0.059160143137, -0.015689600259, 0.032408714294, 0.070803552866, -0.040239904076, 0.011626347899, -0.037121694535, 0.034147314727, -0.012063339353, -0.056659933180, -0.010058265179, -0.053296137601, -0.060646463186, 0.037000596523, -0.034104108810, -0.014793649316, -0.002543501556, 0.017577230930, 0.038291536272, 0.032558649778, 0.053685411811, 0.004213862121, -0.008636377752, 0.041098706424, -0.054982915521, 0.040279150009, 0.017829075456, 0.015497215092, 0.030681602657, 0.066154018044, -0.044188853353, -0.018303595483, 0.027984678745, 0.007397644222, 0.062653377652, 0.021864593029, -0.035174585879, 0.030441902578, 0.008624590933, -0.001116760075, 0.043016426265, 0.001196220517, 0.007366791368, -0.062359839678, -0.026494536549, 0.014639325440, 0.054477229714, -0.061000380665, -0.061989523470, -0.068930663168, -0.028286926448, 0.034579969943, 0.003911495209, -0.065949246287, -0.053751230240, 0.036286272109, -0.054117552936, -0.070494376123, 0.025283291936, 0.003842733800, -0.021864298731, 0.002257652581, 0.070025026798, 0.057676613331, -0.061969995499, 0.004993736744, 0.036659322679, -0.054753176868, 0.041614867747, -0.039016064256, 0.050692036748, 0.062225028872, -0.033520381898, -0.042599741369, 0.016379579902, -0.006168507040, 0.070651501417, 0.038370244205, 0.008654087782, -0.002119667828, -0.003583863378, -0.056804880500, 0.006326816976, -0.029580242932, 0.003380142152, -0.050818197429, -0.056398775429, 0.041614763439, 0.008585721254, -0.028827980161, -0.065006658435, 0.067998647690, 0.062011346221, -0.036528695375, -0.052154719830, 0.021070860326, 0.018380664289, -0.007808767259, 0.068646475673, 0.021683461964, -0.010450467467, -0.035240933299, 0.043929912150, -0.058447849005, 0.012372933328, 0.034314058721, -0.068466998637, -0.048889532685, 0.003439173102, -0.039963603020, -0.058179602027, 0.043335609138, 0.061224102974, -0.003415912390, 0.057392686605, -0.035222213715, 0.039506636560, 0.032860808074, -0.035708554089, 0.018838606775, -0.008529618382, 0.031861156225, 0.020154021680, -0.058871693909, 0.014970429242, 0.049780808389, -0.059794988483, 0.017344735563, 0.063260495663, -0.047024946660, -0.046909146011, 0.015837162733, 0.041603334248, -0.033780697733, 0.068068772554, 0.013649232686, -0.051829569042, -0.055141676217, 0.020541988313, 0.046555280685, 0.070589289069, -0.031202010810, -0.062153622508, -0.041813272983, -0.070439264178, 0.002474263310, 0.062447711825, -0.032783415169, -0.032790642232, -0.032034628093, -0.026292636991, 0.015546754003, -0.023612312973, 0.014669351280, 0.020971268415, -0.021393224597, -0.027365952730, 0.024269305170, 0.035909332335, 0.033327326179, -0.009922541678, 0.004477493465, -0.042507186532, -0.066095843911, -0.056408736855, -0.031082239002, -0.049400031567, 0.012089923024, -0.023235149682, 0.014359429479, -0.001269899309, 0.032012723386, 0.061582356691, 0.020338989794, -0.058520130813, -0.043734192848, -0.029304407537, -0.057700488716, -0.057484515011, -0.056025568396, -0.030394587666, -0.022793959826, -0.066496081650, -0.067697942257, 0.055572286248, -0.064678192139, -0.036752238870, -0.024911325425, -0.018635798246, 0.008676782250, -0.048792146146, -0.015417981893, -0.013032592833, 0.050771340728, 0.025851055980, 0.056613937020, -0.055842369795, 0.047131434083, -0.065519444644, 0.017083249986, -0.065037734807, -0.067394718528, -0.022400811315, 0.028005018830, 0.005877941847, 0.060019105673, -0.042417146266, 0.017670311034, -0.044844053686, -0.026462789625, 0.007419474423, -0.056996643543, 0.011773444712, 0.068872734904, 0.010980866849, -0.029183823615, 0.062095418572, -0.010562051088, 0.071984604001, -0.040072813630, 0.037912085652, 0.049202844501, 0.008054755628, -0.016859859228, -0.068065352738, -0.024471718818, 0.062193974853, -0.067867271602, -0.041566532105, 0.032983854413, 0.046308510005, 0.050638578832, -0.061333514750, -0.057537268847, -0.067975796759, -0.038363341242, -0.014261730015, 0.009133644402, -0.058347363025, 0.048234969378, 0.060222968459, -0.062979817390, 0.045449413359, -0.047291129827, 0.028730057180, 0.031276807189, 0.002978697419, 0.061160266399, 0.053166568279, 0.011267907917, -0.032726120204, -0.060299150646, -0.007259093225, 0.014244407415, -0.049992531538, 0.040852539241, 0.004721052945, -0.061878405511, -0.047724902630, 0.038644358516, 0.031616427004, -0.022580601275, -0.004107318819, -0.021112896502, 0.051987320185, 0.011719882488, -0.032946482301, -0.052045337856, -0.007347330451, -0.033154934645, -0.004884652793, 0.049518615007, 0.032203301787, -0.071255378425, 0.027928449214, -0.016525641084, -0.070546030998, 0.057308793068, -0.060077428818, 0.066774576902, 0.015102677047, 0.050522588193, 0.011166289449, 0.043273232877, -0.056749664247, 0.029463224113, -0.015850618482, 0.064985975623, 0.048265129328, 0.039566703141, -0.030618250370, -0.041351795197, -0.049794588238, -0.024918124080, 0.051427781582, -0.006604947150, -0.001935668290, -0.044953159988, -0.050997022539, -0.029976006597, 0.017441071570, -0.040620628744, 0.050495542586, -0.046628251672, 0.030695885420, 0.033458612859, 0.014874659479, 0.014366015792, -0.038132432848, -0.018521893770, 0.001650042832, 0.009544432163, 0.048171252012, -0.051642969251, -0.070488043129, -0.023385755718, -0.064207680523, -0.032778631896, 0.061752781272, -0.049484841526, -0.062580473721, -0.036694530398, -0.050360023975, -0.059418272227, -0.013222310692, -0.050670824945, -0.026045605540, -0.037515979260, 0.067165583372, -0.055482432246, -0.062597461045, -0.016218990088, -0.053650211543, 0.067755222321, 0.062824442983, 0.022024132311, 0.066811561584, -0.040087334812, -0.060037527233, -0.057535894215, 0.006861820817, 0.002499274909, 0.017991796136, -0.014745332301, 0.051226489246, -0.042936109006, -0.061403352767, -0.054504197091, -0.003627084196, -0.036719255149, 0.052346743643, 0.049484804273, 0.014514937997, 0.044854015112, -0.056971471757, 0.040309727192, 0.043428711593, -0.015204157680, 0.004745259881, 0.061594963074, 0.004297532141, -0.036334108561, -0.019451826811, -0.065449051559, 0.061886042356, -0.036244738847, 0.005994372070, -0.066151283681, 0.008351735771, 0.034057341516, 0.028281196952, -0.037980552763, -0.040740609169, -0.000470161438, 0.006111256778, 0.070268005133, -0.060395609587, -0.027870461345, -0.048833459616, 0.037758827209, -0.002618275583, -0.006592951715, 0.064847782254, 0.031855218112, 0.028960384429, -0.011663790792, 0.010052651167, -0.051160655916, -0.046165898442, 0.070626184344, -0.020489804447, -0.044950753450, -0.039777621627, 0.043923787773, 0.023148618639, -0.060193210840, -0.020523648709, 0.061251699924, -0.012026932091, 0.055371001363, 0.018726661801, 0.007651470602, 0.056178286672, -0.007096767426, 0.041370362043, -0.070514403284, 0.042520865798, 0.048877887428, 0.065288037062, -0.047110892832, 0.004326902330, 0.004195980728, -0.044716678560, -0.071120172739, 0.044779635966, 0.046289771795, 0.057296574116, -0.070446558297, 0.026655845344, 0.003246411681, 0.050943613052, -0.002234883606, -0.042389892042, 0.061526358128, 0.040629059076, 0.009145639837, 0.013591490686, -0.006054393947, -0.066258817911, 0.051901236176, 0.006013803184, -0.036853466183, -0.024530187249, -0.016129776835, 0.050564676523, -0.007597118616, 0.011019684374, 0.033520087600, -0.016920410097, 0.037670031190, -0.056662172079, -0.038797907531, -0.049129165709, 0.041151203215, 0.068318545818, -0.033524218947, -0.047233041376, 0.052778601646, -0.026671297848, 0.054467290640, -0.062562480569, 0.056115508080, -0.020760044456, -0.011042639613, 0.051454536617, 0.021215893328, 0.046692006290, 0.012302130461, -0.059616968036, -0.064238362014, -0.052325718105, 0.028585970402, 0.068357884884, -0.031712595373, -0.005378060043, -0.041382439435, 0.036505430937, -0.055804587901, -0.049834333360, 0.026592031121, 0.005812674761, -0.032667547464, 0.003651775420, 0.025740019977, -0.022702079266, 0.013842701912, -0.070941090584, 0.056380346417, -0.065581940114, -0.012226544321, -0.066141299903, 0.006153449416, 0.057198971510, 0.066549763083, -0.018621467054, -0.007720038295, 0.028146348894, -0.016542334110, 0.048391580582, 0.049018546939, -0.066457040608, -0.049860522151, -0.069128997624, -0.012927960604, -0.026784170419, 0.017687998712, 0.036131054163, -0.021401930600, 0.063964903355, 0.031613677740, -0.005513831973, 0.015180982649, 0.049911506474, -0.060360528529, -0.070518210530, 0.050408251584, 0.064532399178, 0.028461277485, -0.051541946828, -0.021439459175, -0.006843559444, -0.048528179526, -0.018329836428, 0.043812930584, -0.034818861634, 0.035202376544, 0.024821080267, -0.022529892623, -0.012658558786, -0.067497938871, -0.027505360544, 0.028694272041, -0.031460296363, -0.066062979400, 0.047460988164, 0.015570290387, -0.016623906791, -0.066355489194, -0.034739039838, -0.072009794414, 0.007651679218, 0.063006862998, -0.052895881236, -0.006730414927, -0.063222289085, -0.052314773202, 0.054410457611, 0.032984904945, -0.042507652193, 0.047476492822, -0.042682193220, 0.040017217398, -0.034421343356, -0.049689494073, 0.037112198770, 0.014804743230, 0.063228413463, -0.021081168205, 0.054181069136, 0.069108694792, -0.021153230220, 0.064571484923, 0.030249983072, 0.070984005928, -0.004711292684, 0.003585189581, 0.064740300179, 0.043357305229, 0.016201891005, 0.031340591609, -0.052856016904, -0.071068346500, 0.022031165659, 0.010662548244, -0.014645587653, -0.002331651747, 0.019845701754, -0.069805726409, -0.017170090228, 0.058498054743, 0.037501528859, 0.008236795664, -0.069692477584, -0.025695126504, -0.009824723005, -0.037929706275, 0.036709308624, 0.007118366659, -0.071723207831, -0.012780569494, 0.000694997609, 0.012780778110, -0.047423411161, 0.023047648370, -0.034538328648, 0.060263365507, -0.030972048640, 0.029191739857, -0.021124925464, 0.065711125731, -0.003431983292, -0.040266349912, -0.054222289473, 0.070357128978, 0.065382793546, 0.050874531269, -0.049370415509, -0.009340651333, -0.011283341795, -0.061465673149, 0.051667675376, -0.020776186138, 0.063511118293, -0.058663308620, -0.006569929421, 0.021122932434, -0.021348625422, -0.002760954201, 0.001425907016, -0.007975228131, -0.023317895830, -0.033341694623, -0.031283348799, -0.055076569319, -0.028603762388, 0.051802642643, -0.031856782734, -0.030084904283, -0.022156309336, -0.005541622639, 0.025006301701, 0.052843719721, -0.049350179732, 0.026106327772, -0.015577845275, -0.015742976218, 0.017015248537, 0.002162203193, -0.020757034421, -0.020515698940, -0.016161557287, -0.059744864702, 0.020759910345, -0.014527533203, -0.051282063127, 0.013112761080, 0.065867021680, 0.069558620453, 0.021683447063, -0.038970157504, -0.036663901061, 0.071957409382, -0.002298064530, 0.022570192814, 0.061127796769, 0.066473677754, 0.022168472409, 0.030472479761, 0.051581919193, -0.008857138455, 0.026518657804, -0.039523035288, 0.015820987523, 0.009844660759, 0.062577754259, -0.039600722492, -0.063765101135, -0.031557668000, -0.030526816845, -0.007295541465, 0.031713627279, -0.000351302326, 0.021470598876, -0.029268994927, -0.009295828640, 0.026636607945, -0.035875350237, -0.057679411024, -0.045906703919, 0.000449635088, 0.035668514669, 0.032826326787, -0.015806451440, 0.026546537876, 0.020081877708, -0.025680158287, 0.060228139162, -0.006514318287, -0.042677275836, -0.034157946706, -0.059791564941, -0.048052720726, -0.051729239523, -0.056036926806, 0.004951648414, 0.068326681852, 0.016744866967, 0.048310846090, 0.020608477294, 0.026292726398, -0.036125272512, 0.041821688414, 0.068939000368, -0.014186505228, 0.009954251349, 0.031515337527, 0.006015107036, -0.053123384714, -0.041247732937, 0.049953818321, 0.068520545959, 0.069543316960, -0.028375811875, 0.029726929963, -0.002017810941, 0.067018598318, -0.009046927094, 0.040587350726, 0.009513184428, 0.054339855909, -0.049857065082, -0.024537775666, 0.051542535424, 0.033304698765, 0.066905006766, -0.020632669330, 0.063029959798, 0.063318938017, 0.013510808349, -0.012339383364, 0.051490500569, -0.050718277693, 0.039124995470, 0.016949452460, 0.029905274510, -0.010429922491, 0.047932356596, -0.016034331173, -0.037020608783, -0.028112951666, 0.024006888270, -0.008438214660, -0.059113718569, 0.025160007179, 0.021168097854, 0.000096254051, -0.064558625221, 0.035478278995, -0.063080027699, -0.010619450361, -0.059428062290, 0.061714053154, -0.068092726171, -0.009129047394, 0.034071534872, -0.072058402002, 0.058849304914, -0.007506437600, -0.000855982304, 0.005361251533, -0.007076069713, -0.016512323171, -0.023006424308, -0.050266265869, 0.038235105574, 0.036621555686, -0.065776199102, 0.066956192255, -0.065951496363, -0.060992378742, -0.072044894099, -0.013529531658, -0.045012608171, 0.010550156236, -0.012231308967, -0.056180566549, 0.044461369514, -0.032102663070, 0.063510999084, 0.035424217582, 0.000094190240, 0.051010273397, -0.023891039193, -0.007603123784, -0.004733301699, -0.044120028615, 0.049202360213, 0.037093922496, -0.068409979343, 0.031558290124, 0.044268481433, 0.045957304537, -0.039500080049, 0.037840023637, 0.057235836983, -0.035905651748, 0.018145695329, -0.052519269288, 0.039045609534, -0.012413542718, -0.017045188695, -0.034125685692, 0.070467934012, 0.000801250339, 0.019520260394, 0.007311612368, -0.012147963047, -0.039002180099, 0.004962436855, 0.039475850761, -0.021421372890, -0.050675090402, -0.026558097452, -0.055610463023, -0.007335908711, -0.022266242653, -0.054187618196, -0.021674703807, -0.026021722704, 0.019421063364, 0.045092776418, -0.010417222977, -0.055474705994, 0.071395352483, 0.065203264356, -0.062876060605, 0.038101375103, 0.023527264595, -0.044725693762, -0.028074305505, -0.022541921586, -0.040865182877, -0.008986338973, 0.020708754659, 0.064146697521, 0.003275200725, 0.064840584993, -0.063217952847, 0.036294259131, 0.009311094880, -0.008423000574, -0.013198480010, -0.046228341758, -0.058988731354, -0.037776432931, -0.028098031878, 0.024959675968, 0.051677361131, -0.061610329896, 0.062459841371, -0.066636711359, 0.064822256565, 0.016067795455, 0.028942264616, -0.003055632114, -0.061782684177, -0.034507427365, -0.002874098718, 0.013381592929, -0.023316055536, 0.033865511417, -0.029191274196, -0.061282649636, -0.063932195306, 0.038780771196, -0.071952462196, -0.047430343926, -0.045697338879, 0.002142108977, -0.043980553746, -0.033119268715, -0.057831395417, -0.051245860755, 0.049965173006, 0.019994653761, -0.065966017544, -0.064019344747, 0.067446708679, 0.012522011995, -0.068610899150, 0.038121350110, 0.045917682350, 0.044756799936, 0.024147927761, 0.058845907450, 0.011385463178, -0.058709900826, 0.068854168057, 0.026546858251, -0.015051621944, -0.003389470279, 0.018190875649, 0.065145328641, 0.069645479321, -0.009274996817, 0.011319801211, -0.053362160921, 0.018688261509, -0.011431727558, -0.050157576799, 0.015458710492, -0.066814929247, 0.019945822656, 0.049975499511, 0.067503064871, -0.037551339716, -0.064854249358, 0.033686682582, -0.004771143198, -0.007760733366, 0.018815778196, 0.062962219119, -0.028406318277, -0.037410538644, -0.028062243015, 0.023068279028, -0.049663409591, -0.044794090092, -0.064225681126, -0.066140338778, 0.071130946279, 0.004624538124, 0.031788110733, -0.009113103151, 0.068114966154, -0.038768980652, -0.070183873177, 0.053786188364, -0.023009177297, 0.023130171001, 0.048471897840, 0.034537248313, -0.015141941607, -0.008277200162, -0.052029781044, 0.051942475140, -0.015901412815, -0.014473542571, 0.017838299274, -0.015481576324, -0.019120104611, 0.017308361828, 0.028315164149, -0.061473298818, -0.004759356380, 0.033473700285, -0.034996364266, -0.054122079164, 0.055009856820, 0.020120158792, -0.014433640987, 0.033404476941, 0.054897516966, -0.045801986009, 0.052839413285, 0.068845078349, 0.063679248095, 0.035163663328, -0.046299077570, 0.026020050049, 0.044428728521, 0.032121434808, -0.031620901078, -0.041182883084, 0.042235344648, 0.066496253014, 0.066234096885, -0.027408745140, 0.028605744243, -0.006867133081, -0.054819658399, -0.015085417777, 0.044951252639, 0.066840156913, -0.019312232733, 0.056061029434, -0.003822706640, -0.052718296647, -0.048928987235, 0.009449705482, -0.008758462965, -0.037757575512, 0.044886328280, -0.005461476743, -0.037032220513, -0.058060187846, 0.015667907894, 0.032539948821, -0.063136950135, 0.046579591930, 0.046097129583, 0.048813134432, 0.016373865306, -0.065477184951, 0.011213533580, 0.012038119137, -0.043077737093, 0.020595625043, -0.058406896889, -0.059763189405, 0.042003385723, 0.027936771512, 0.043643340468, 0.054366931319, 0.043057382107, 0.047655045986, -0.025713726878, -0.050221756101, -0.016541402787, -0.040676824749, 0.066671073437, 0.055297151208, -0.039886500686, 0.004969820380, 0.053072735667, 0.010485082865, 0.057322040200, -0.069262109697, 0.000356741250, -0.036725156009, -0.013364210725, 0.010523147881, -0.000617213547, -0.052254464477, 0.060210809112, 0.002728089690, 0.048574000597, 0.015516698360, -0.044666312635, -0.027379047126, 0.000507757068, -0.069601058960, 0.065340608358, -0.016759287566, -0.047610394657, -0.022267945111, -0.067913971841, 0.072123840451, 0.045958630741, -0.061545941979, -0.045486576855, 0.050153255463, 0.064390137792, -0.005629718304, -0.023352272809, 0.032249987125, -0.060485083610, -0.068311266601, 0.039792023599, 0.061828717589, -0.050727069378, 0.040584430099, -0.041395813227, -0.050848547369, -0.023963186890, -0.009720228612, 0.032460674644, 0.071182221174, 0.055087730289, 0.038443714380, 0.060349613428, 0.060631081462, -0.065600730479, 0.068371385336, 0.031249158084, -0.008453287184, -0.027779180557, -0.054628822953, 0.024834141135, -0.019967313856, -0.000531576574, 0.036414772272, 0.030759878457, 0.047524102032, -0.014206375927, 0.014016471803, -0.070483230054, 0.070890828967, 0.071318015456, -0.057038765401, 0.062638834119, -0.068713121116, 0.021615803242, -0.037915285677, 0.007861986756, 0.064278423786, -0.047751296312, 0.003460735083, 0.049385733902, -0.023532766849, 0.028028018773, 0.016299344599, -0.013247653842, 0.017766118050, -0.000164769590, -0.005494028330, -0.018194798380, 0.055116727948, 0.067224860191, -0.009848691523, -0.011200457811, 0.057719051838, -0.041327949613, -0.069330781698, -0.066683508456, 0.025352478027, -0.002937436104, -0.009951069951, -0.039492804557, -0.029492594302, -0.029860481620, -0.031167995185, 0.037460729480, -0.038030672818, 0.052761450410, -0.005572803319, -0.041162285954, -0.046905703843, 0.008065469563, -0.028424937278, -0.030544247478, 0.058271184564, -0.039848234504, -0.017458453774, 0.037614263594, 0.006994530559, -0.044962897897, -0.067758806050, -0.064808510244, 0.026877209544, -0.033823352307, -0.027225531638, 0.030766554177, -0.005027599633, -0.031080275774, -0.040933184326, -0.044919334352, -0.070421338081, -0.056393802166, 0.028037413955, 0.069185450673, 0.054388910532, -0.060709230602, 0.052315153182, -0.054480433464, -0.018872816116, -0.008233442903, 0.066302254796, -0.060136895627, -0.007486291230, 0.000140026212, -0.018499903381, 0.061182752252, -0.054799579084, 0.025645367801, 0.056900471449, 0.025893725455, 0.033392727375, 0.070374056697, 0.058050915599, -0.049095891416, 0.028250291944, -0.000139422715, -0.030741207302, -0.056546181440, -0.072087898850, -0.029142785817, 0.046137750149, -0.054365135729, 0.057736501098, -0.052778176963, 0.053234785795, -0.011732701212, -0.071199268103, 0.058599218726, -0.063694953918, -0.048872895539, 0.001526549459, 0.063638359308, 0.031480036676, -0.051383700222, -0.018547631800, 0.011942915618, 0.010024279356, -0.031532201916, 0.006901785731, -0.049369089305, 0.065032154322, 0.024826519191, 0.026456095278, -0.002262294292, -0.062074400485, -0.043654508889, 0.017400085926, -0.049582365900, -0.026505704969, -0.017362490296, 0.003854036331, -0.069485656917, -0.009832911193, 0.014951020479, 0.046630747616, -0.004910700023, -0.037338219583, 0.027529463172, -0.017812784761, -0.051540620625, 0.018564872444, 0.066081464291, 0.018746934831, -0.050806496292, -0.007840037346, -0.063204228878, -0.021002758294, 0.019518725574, 0.017374522984, 0.026599064469, 0.064078807831, -0.030737508088, 0.002571217716, -0.009185209870, 0.041145369411, 0.022876672447, 0.059167370200, 0.002255134284, -0.010975569487, 0.044338993728, -0.020940866321, 0.019579157233, 0.067330077291, 0.070523008704, -0.043585993350, 0.051006279886, 0.046022415161, -0.033132810146, 0.035768792033, -0.033138830215, 0.067364767194, -0.054589368403, -0.032864853740, -0.028817243874, 0.013049766421, -0.013813279569, -0.044546090066, -0.068620331585, 0.047940999269, -0.057654377073, 0.058423593640, -0.022417314351, 0.022152476013, 0.023037448525, -0.028154797852, 0.020723864436, -0.059072371572, 0.065323248506, -0.071908809245, 0.060834228992, -0.061429765075, -0.060629807413, 0.072111189365, -0.045666381717, 0.044180646539, 0.018833793700, 0.037561163306, -0.045158706605, 0.068092852831, -0.071209490299, -0.011827234179, -0.064962014556, -0.059148199856, 0.041848734021, 0.003958776593, -0.002917580307, 0.059010073543, -0.056315891445, 0.069815665483, 0.064142227173, 0.052314840257, -0.036839302629, -0.059511065483, 0.061542361975, 0.054195910692, 0.068471372128, 0.048637114465, 0.034890443087, 0.055710092187, -0.028130829334, -0.036746218801, 0.034322507679, -0.011740911752, 0.016184821725, 0.012828059494, 0.004000380635, -0.036885727197, 0.012748017907, 0.050406254828, -0.063435994089, -0.006265975535, 0.031039603055, -0.055631510913, -0.068840056658, 0.032310567796, 0.025101110339, -0.038857080042, -0.012148410082, -0.053632918745, -0.037605348974, -0.049395695329, -0.036138419062, 0.059460550547, -0.040118511766, 0.067754909396, -0.063335202634, -0.018753092736, -0.020501520485, -0.002809695899, -0.045245084912, -0.061288312078, -0.003376737237, -0.070378169417, 0.011950708926, -0.035423994064, 0.042645387352, -0.035283692181, -0.029447272420, 0.005983896554, -0.062969945371, 0.050856202841, 0.034315384924, -0.038976524025, 0.035163760185, -0.034895945340, 0.069451987743, 0.061171531677, 0.020707808435, 0.019219644368, -0.023966040462, 0.018170863390, 0.039519883692, 0.050064146519, -0.063931830227, -0.068814843893, 0.045365475118, 0.034877777100, 0.020956419408, 0.072131812572, -0.037020299584, -0.057123403996, 0.004744969308, 0.003393560648, 0.046245358884, 0.053002148867, -0.009428508580, -0.026030927896, 0.057914495468, 0.009411610663, -0.028844688088, -0.027276430279, -0.003114253283, -0.044674485922, 0.063847705722, -0.058342698961, 0.017887681723, -0.054019786417, -0.020135626197, -0.008537165821, -0.053513556719, 0.061137095094, -0.060560431331, 0.063529923558, 0.032130897045, 0.041404739022, 0.010301582515, 0.003870829940, -0.009871918708, 0.062274232507, 0.048361659050, 0.008282460272, 0.061251610518, 0.064658015966, -0.064638137817, 0.020785376430, -0.028904359788, 0.050055660307, -0.046164423227, -0.068381659687, 0.013232804835, 0.014973148704, -0.063264392316, -0.057432308793, 0.006040401757, 0.008813023567, 0.057032182813, -0.034629538655, -0.070448920131, -0.037569474429, 0.033119045198, -0.045953746885, -0.063026227057, 0.069595217705, -0.034471224993, 0.004848927259, 0.052708163857, 0.004252351820, -0.063969910145, 0.007871404290, -0.038243360817, 0.066977947950, 0.067207470536, 0.031174808741, 0.029060885310, -0.054922778159, -0.067651383579, 0.020336754620, -0.054169069976, -0.061994962394, 0.027502350509, -0.005551896989, -0.021407555789, -0.068333975971, -0.065444119275, -0.068094395101, -0.023987825960, 0.051230683923, -0.017281483859, -0.010056681931, 0.038807950914, 0.053703203797, 0.030371926725, 0.042318694293, -0.045510973781, -0.001258045435, -0.014154069126, 0.037011384964, -0.039385296404, 0.038819037378, 0.041361123323, -0.008766479790, -0.032447893173, 0.037975162268, -0.054862760007, -0.036717053503, -0.068617850542, 0.038835212588, 0.020109780133, 0.063306048512, -0.053602807224, -0.047988384962, 0.039322733879, -0.053005486727, 0.023604206741, -0.023495070636, 0.053530439734, -0.020104777068, 0.016749843955, 0.064996302128, -0.067556545138, -0.032092802227, 0.011346384883, -0.017547510564, -0.036184892058, 0.018871471286, -0.028459798545, 0.022150062025, -0.013011410832, -0.017922747880, -0.026281744242, 0.033823370934, -0.007469683886, -0.013862885535, -0.030795320868, -0.068459637463, -0.051678121090, -0.047324836254, -0.057275645435, 0.066806763411, -0.049752585590, 0.045339167118, -0.056958310306, 0.062882184982, 0.051225952804, -0.004609316587, -0.032635390759, -0.028343655169, -0.049322102219, -0.065112225711, 0.069910690188, 0.065406531096, 0.070451512933, 0.003169022501, -0.043574001640, 0.060275554657, 0.012601621449, -0.060335077345, -0.004586346447, -0.025972858071, -0.001982964575, 0.005249857903, 0.017053090036, -0.042514570057, 0.000715270638, 0.025101356208, 0.041534289718, 0.048133797944, -0.057445198298, -0.048915669322, -0.031532064080, 0.042592085898, 0.022049695253, 0.057857364416, 0.053575828671, 0.009174391627, -0.059818904847, 0.021320529282, -0.066654257476, 0.029433250427, 0.039162352681, 0.031395241618, -0.037940613925, -0.039477180690, 0.053087577224, 0.068491235375, -0.015644606203, -0.030746888369, 0.006740309298, -0.008622869849, 0.020712643862, -0.014356054366, 0.021611593664, 0.038454085588, -0.056740254164, -0.041843675077, 0.035700827837, 0.057881742716, 0.009518466890, 0.011709369719, -0.008745245636, 0.040567785501, -0.006611272693, -0.066634848714, 0.065184816718, -0.041899923235, -0.026320371777, -0.056703466922, 0.027240671217, 0.065386161208, 0.021059453487, -0.064174249768, -0.022801619023, 0.054498568177, 0.042948462069, 0.060358062387, 0.070755526423, -0.048588678241, 0.046159602702, 0.053860813379, 0.013242393732, 0.010021582246, 0.055295139551, -0.010243989527, -0.026580758393, -0.065303899348, 0.022617317736, 0.003429748118, -0.035849370062, -0.032042697072, 0.071096554399, 0.062682479620, 0.023951619864, 0.018425986171, 0.061798393726, -0.062979340553, 0.055075690150, 0.014171808958, -0.017161726952, -0.040118958801, 0.034305609763, -0.017560400069, 0.050672009587, 0.049300059676, 0.041675865650, 0.059590414166, 0.013669587672, -0.015871591866, -0.034263491631, -0.009936306626, -0.057520166039, 0.013909980655, 0.049221597612, -0.011282809079, 0.036738492548, -0.067863918841, -0.071672856808, -0.064509242773, -0.007298551500, 0.003684543073, -0.067424625158, -0.070516794920, -0.043394967914, 0.069067329168, 0.069784134626, 0.034829922020, 0.051631681621, 0.060081616044, -0.032506395131, -0.037092737854, 0.005881689489, 0.047968834639, 0.050914414227, -0.023592699319, -0.015344355255, 0.017208360136, -0.047980003059, 0.007281139493, 0.016392238438, -0.056847102940, 0.006947502494, 0.026377774775, -0.068305797875, 0.050296634436, -0.071443960071, -0.002016074955, -0.009190186858, -0.052874632180, 0.064013600349, 0.008827440441, -0.030119247735, -0.069365829229, -0.021457437426, 0.071626126766, -0.019903101027, -0.015843376517, 0.065077275038, 0.003307476640, 0.040440872312, 0.050249263644, -0.026560094208, -0.049226723611, 0.056222259998, 0.069450736046, -0.020619951189, -0.050849422812, -0.032523721457, -0.061011187732, -0.071410462260, 0.063355475664, 0.070973008871, 0.024069331586, -0.065547890961, 0.048741124570, -0.007219627500, -0.019879389554, -0.059672273695, 0.045353882015, 0.019302703440, 0.021273568273, -0.070109814405, 0.052632868290, 0.016881346703, 0.038794532418, 0.056334048510, 0.003382258117, -0.041143700480, 0.022247396410, 0.010441690683, -0.021799448878, 0.062793657184, -0.028935465962, -0.003306671977, -0.015897609293, 0.019562691450, 0.014628998935, -0.016801994294, -0.008466400206, -0.052326798439, -0.008067898452, 0.007910184562, -0.058292992413, 0.042612113059, -0.047659087926, 0.060770332813, -0.025449782610, 0.055890738964, -0.040240284055, -0.023781090975, 0.058465555310, -0.040477748960, -0.027550697327, 0.040447808802, -0.044129818678, -0.000842683017, 0.020776599646, 0.005612201989, -0.006316632032, -0.070371061563, -0.061699062586, 0.051995418966, 0.039005830884, -0.050589539111, 0.031786821783, -0.041499033570, 0.016812920570, -0.063155889511, -0.014194987714, -0.006747379899, -0.065698653460, -0.047020748258, -0.003611221910, -0.037668082863, 0.044694498181, 0.012430749834, 0.067312881351, 0.057501271367, -0.040751054883, -0.037898719311, 0.048830173910, 0.000214360654, -0.041199415922, 0.035232521594, 0.035081073642, -0.050342388451, 0.036462865770, -0.036283072084, -0.024874970317, -0.026860535145, 0.062850773335, 0.026583410800, -0.011252094060, -0.013439077884, -0.029791485518, 0.045667864382, -0.016280263662, 0.048235103488, 0.047023586929, 0.017367340624, -0.056470852345, 0.025625303388, 0.027883678675, 0.066078260541, 0.051492273808, 0.059551313519, -0.033367641270, 0.057322561741, -0.013729900122, 0.050816766918, -0.060179051012, 0.069486662745, 0.017035484314, 0.006149783731, -0.042422704399, 0.026317536831, 0.003098733723, -0.031975403428, -0.062176160514, -0.008016072214, -0.038257092237, -0.026905391365, -0.036191310734, -0.031866952777, -0.021388337016, 0.053228452802, -0.058579511940, 0.033286340535, 0.070921391249, 0.039579197764, -0.014042142779, -0.013682443649, 0.063327804208, -0.023669283837, 0.054474428296, -0.026188109070, -0.066390000284, -0.031093802303, -0.017015129328, -0.050882719457, -0.040589194745, -0.022687006742, 0.066698536277, -0.016517899930, 0.040873736143, 0.072029769421, -0.026543438435, 0.054782256484, 0.023247569799, -0.017365917563, -0.000113166869, -0.050210982561, -0.014392394572, -0.038575738668, 0.005502276123, -0.017994947731, 0.049862675369, 0.022459484637, -0.048586271703, 0.023773379624, 0.065527766943, 0.057669803500, -0.053500324488, 0.010613374412, -0.033791434020, -0.034135099500, 0.053026944399, 0.063862130046, 0.068481415510, 0.053244084120, 0.024476386607, 0.032601989806, -0.067856431007, -0.034017216414, 0.008830159903, -0.029774811119, 0.061377137899, -0.029442556202, -0.045209776610, -0.052532587200, 0.063464537263, 0.055672630668, 0.004671357572, -0.066864073277, 0.060413956642, -0.023921716958, 0.027858540416, 0.024906165898, -0.025994691998, -0.049267537892, 0.018796108663, 0.026079125702, -0.022219989449, -0.044752687216, -0.033553455025, 0.034986555576, 0.067319080234, -0.036027301103, -0.015848606825, -0.007008895278, 0.040755130351, -0.038893230259, 0.034130863845, -0.028520345688, -0.068126559258, -0.041973773390, -0.009366586804, -0.049915947020, -0.060582920909, 0.056004837155, 0.053407296538, -0.024784669280, -0.029878962785, -0.055484272540, -0.008783459663, 0.055427044630, -0.036378689110, -0.030003864318, -0.046140730381, 0.024901539087, 0.020990528166, -0.049800023437, -0.036207191646, 0.037019044161, -0.045683037490, 0.052470624447, 0.045747421682, 0.043469332159, -0.037591651082, 0.021026954055, -0.050867475569, -0.045192435384, 0.004650026560, 0.007914438844, -0.037401899695, 0.055701121688, 0.001364342868, 0.050562247634, -0.000737205148, 0.048825643957, -0.025694631040, -0.035861361772, 0.058461651206, -0.045092910528, 0.048153102398, 0.002616830170, -0.023200683296, 0.052347533405, -0.058504268527, -0.047564212233, 0.026411168277, -0.042403656989, -0.071257069707, 0.043206386268, -0.009852167219, -0.023512482643, -0.013567522168, 0.050984717906, 0.017432175577, 0.011752389371, -0.055015556514, 0.023163899779, -0.018512427807, 0.038050979376, -0.005884051323, -0.039366371930, -0.022183012217, -0.023636076599, 0.040663421154, -0.019101817161, -0.021503962576, 0.006240375340, 0.021598905325, -0.047843661159, 0.049649588764, 0.059225291014, -0.019416898489, -0.050289668143, 0.069363147020, -0.021788075566, 0.058961629868, 0.014288522303, 0.048388965428, -0.012233734131, 0.015541471541, 0.067831471562, 0.043192327023, 0.050023861229, -0.019873522222, -0.069922767580, 0.071178600192, 0.030269630253, -0.030507925898, -0.065683610737, 0.041136525571, 0.068356916308, -0.038866870105, 0.035393379629, -0.020704109222, -0.023004394025, -0.028388906270, -0.045493785292, -0.038387190551, -0.015425242484, -0.040642205626, 0.053664565086, -0.013182699680, -0.016013167799, 0.023348711431, 0.040252394974, -0.020160712302, 0.058491662145, 0.070071235299, 0.048251762986, 0.011216200888, 0.005534514785, 0.071515858173, 0.002410374582, 0.057636901736, 0.036966472864, -0.029635321349, -0.053731046617, 0.069566816092, -0.061393633485, -0.052325733006, -0.000415720046, -0.026549182832, -0.056516826153, -0.053008496761, -0.047704681754, -0.031918898225, -0.045706577599, -0.035117615014, 0.033445537090, 0.006977602839, 0.041027233005, 0.062851577997, 0.014774136245, 0.071636229753, 0.029408834875, 0.006042502820, -0.041994161904, -0.049249954522, 0.038565583527, 0.039410315454, 0.065802693367, -0.050331756473, -0.026601370424, 0.030224569142, -0.046519920230, 0.000831119716, -0.050527818501, 0.001906879246, -0.045251984149, 0.065317824483, 0.002949170768, -0.033119592816, -0.036267947406, -0.061589352787, 0.011438213289, -0.018975280225, 0.056804105639, 0.055680930614, 0.039382547140, 0.050154738128, -0.018916074187, -0.045298509300, 0.002167090774, -0.071762382984, -0.025539204478, -0.043194688857, -0.069653213024, -0.041477590799, 0.026773452759, -0.061525639147, 0.059361711144, 0.020109750330, -0.045982770622, -0.050877727568, -0.024595674127, 0.010332085192, -0.022697690874, 0.061473876238, 0.071136876941, -0.053826525807, 0.055595859885, 0.053867176175, -0.016175955534, 0.070101365447, -0.064013496041, -0.053182043135, -0.024260476232, -0.030718374997, 0.034839026630, -0.029778581113, 0.064725860953, 0.023279868066, -0.009770058095, 0.028205037117, -0.004171565175, -0.020251028240, 0.050538025796, -0.025448802859, 0.011016197503, 0.059142619371, 0.021067820489, 0.028987154365, -0.006518915296, 0.024552986026, -0.039777465165, -0.047742798924, 0.048483341932, -0.034783590585, -0.022696934640, 0.064516291022, 0.035258121789, -0.041424803436, 0.042486853898, 0.016142077744, -0.038792416453, -0.038219273090, 0.039207607508, -0.061184331775, 0.039625138044, -0.033409196883, -0.014091182500, 0.042257778347, 0.034260481596, 0.008970804513, -0.059936769307, -0.047871448100, -0.014444340020, 0.020801842213, -0.055162787437, 0.006334908307, -0.048787467182, -0.034017629921, 0.021393433213, -0.065007731318, 0.070571735501, 0.063065648079, 0.008537754416, -0.036400146782, 0.044389650226, -0.055513337255, 0.006154015660, 0.003121785820, 0.046320997179, -0.059944510460, -0.037750158459, -0.017088361084, 0.032191261649, -0.057016570121, -0.041179027408, 0.056734323502, -0.071138687432, 0.012578174472, -0.019777130336, -0.038443814963, -0.023971237242, 0.056545630097, 0.014649458230, 0.030924163759, 0.015000008047, -0.034348525107, 0.028054915369, 0.023268289864, -0.030985057354, -0.019927687943, -0.047433599830, 0.039315298200, 0.064155727625, -0.070907160640, 0.009163327515, 0.019311077893, 0.031699344516, 0.069420576096, 0.045186705887, 0.038675978780, 0.017566092312, 0.038092531264, 0.019653141499, 0.059257283807, 0.058641105890, 0.060458064079, -0.042430292815, -0.063462615013, 0.005262896419, 0.014708667994, 0.025364384055, 0.062159687281, 0.033132411540, -0.044115521014, -0.004489988089, -0.044437035918, 0.033803358674, 0.001017324626, -0.004058018327, 0.071316316724, 0.047300510108, -0.029914390296, -0.067175596952, -0.003914795816, -0.055443838239, 0.040668018162, 0.062311008573, 0.049273818731, 0.041572004557, -0.069055117667, -0.040391698480, 0.014333963394, 0.022925041616, -0.027124118060, -0.006121821702, 0.066417962313, -0.053639128804, -0.066078133881, 0.042186424136, -0.060301180929, 0.030145056546, 0.060527965426, -0.035867985338, 0.029493346810, -0.013460978866, -0.060382153839, 0.067434951663, -0.018594536930, 0.042011372745, 0.071042090654, 0.026016987860, 0.005962133408, 0.065436929464, 0.037959732115, 0.023817345500, -0.060502082109, -0.014945115894, -0.010349377990, -0.042728066444, 0.068305298686, 0.041458852589, 0.001327693462, 0.000964261591, -0.019418343902, 0.018662005663, 0.049619652331, -0.013157647103, -0.068736486137, -0.060049090534, 0.017632029951, -0.025653541088, 0.062586039305, 0.023668475449, -0.038618408144, 0.046533547342, 0.045564673841, -0.032192636281, 0.035825707018, -0.024457421154, 0.045939669013, -0.015173684806, 0.068742394447, 0.007673457265, 0.038324438035, -0.039448857307, -0.049925252795, 0.012558229268, 0.012806586921, 0.008973054588, -0.068787232041, -0.058686465025, -0.059930246323, 0.004545561969, 0.025241382420, -0.033701788634, 0.066205561161, -0.061499107629, 0.047528229654, -0.008762620389, 0.019544176757, 0.027225568891, -0.071447782218, -0.042927023023, 0.039948686957, 0.026829406619, -0.008575312793, 0.045306958258, -0.020764313638, 0.061226844788, 0.008218452334, 0.062523648143, 0.015319630504, -0.059921421111, 0.013531938195, 0.039519868791, -0.026394274086, 0.070633038878, 0.030876882374, -0.008252486587, 0.028355956078, -0.014798466116, 0.033073380589, 0.034574791789, 0.065700337291, -0.034101475030, -0.038552317768, 0.037036627531, -0.050858408213, 0.023734137416, 0.035208225250, -0.058522146195, 0.045487590134, 0.010212533176, 0.017436325550, 0.018008954823, -0.005656339228, 0.039463482797, 0.010142557323, -0.060766994953, 0.009429477155, 0.012501910329, -0.028999336064, 0.007762864232, -0.056188754737, 0.037819415331, 0.017838679254, 0.054235145450, 0.059798985720, -0.061527531594, -0.067840464413, 0.027260668576, 0.008040711284, -0.067424021661, -0.002456642687, -0.057735625654, 0.004508309066, 0.023464888334, -0.058020133525, 0.059697553515, -0.018629826605, -0.011087980121, -0.069240741432, 0.029626682401, 0.000970333815, 0.024229057133, 0.027754232287, -0.063484087586, 0.003511130810, -0.057755876333, 0.023331575096, 0.057867363095, -0.038067717105, -0.032077230513, -0.048898912966, -0.010800600052, -0.026145074517, 0.049111858010, -0.071149617434, 0.051715232432, -0.023596655577, -0.042810998857, -0.000517375767, 0.047310143709, -0.021757930517, 0.066096156836, -0.025838699192, -0.008511029184, -0.006988182664, -0.043228000402, 0.025315761566, 0.051967807114, 0.019068628550, -0.007603310049, 0.046077959239, -0.003637775779, 0.039523415267, 0.059093102813, 0.064627498388, -0.069131046534, 0.049640141428, -0.024511620402, -0.055996540934, -0.004757978022, -0.008888348937, 0.064467802644, 0.045509941876, 0.052826419473, -0.052201639861, 0.042373508215, 0.060576185584, -0.033001128584, -0.000566110015, -0.064592421055, 0.001464352012, -0.026383917779, -0.022164378315, -0.055968426168, -0.061934255064, 0.002178944647, -0.007981471717, 0.031046159565, 0.070472761989, -0.011260595173, 0.052324026823, -0.026260975748, -0.068716444075, 0.032285980880, 0.039841458201, 0.000053577125, 0.052261516452, -0.039837427437, -0.005496613681, -0.061995081604, -0.044607795775, 0.064512014389, 0.010375067592, -0.004118122160, -0.021175991744, 0.054008156061, 0.026015371084, 0.050117328763, -0.032437242568, -0.007283061743, 0.018835015595, -0.046903677285, -0.001826368272, 0.036441490054, -0.023078382015, -0.060221981257, 0.023542746902, -0.005467168987, -0.015741102397, -0.034633826464, 0.014063686132, 0.061783701181, 0.007366031408, 0.033707052469, -0.035089518875, -0.067705795169, -0.023104585707, 0.024106122553, -0.004659831524, 0.015255279839, -0.024798005819, 0.059899315238, -0.053243041039, 0.019447371364, -0.021493658423, 0.040900990367, 0.002765960991, -0.035289041698, -0.059715285897, -0.005159266293, -0.016942657530, 0.041470862925, 0.062012836337, -0.005377545953, -0.020541973412, -0.013908278197, -0.037175294012, 0.037700638175, 0.038482099771, -0.045923911035, -0.026558630168, -0.000330619514, 0.057902753353, 0.033341318369, 0.026702702045, -0.059162016958, 0.027974821627, -0.057007811964, -0.018983729184, -0.009067900479, 0.058867722750, -0.044011749327, 0.001596391201, 0.071102172136, -0.005684554577, 0.003772050142, -0.042281474918, -0.067101590335, -0.023290932178, 0.042252719402, -0.010560397059, -0.050571888685, 0.064660817385, 0.018375553191, -0.032376915216, -0.053090021014, 0.033201672137, 0.023486480117, -0.055596150458, 0.056296154857, 0.002349048853, 0.043825298548, -0.026053294539, -0.049290802330, 0.020287543535, 0.031099997461, -0.032726600766, 0.039537519217, -0.003331102431, -0.006743744016, 0.011772796512, -0.062437061220, -0.019695091993, -0.004617124796, -0.049247153103, 0.039539210498, -0.016001380980, -0.038041494787, -0.015975899994, -0.034419879317, -0.002859354019, 0.049814976752, -0.035084184259, 0.002948142588, 0.027988895774, 0.043943732977, 0.029184341431, 0.006895437837, 0.033652059734, 0.048409163952, 0.053454294801, -0.017491642386, 0.036655023694, -0.021777424961, 0.036428883672, 0.018402047455, 0.019960843027, 0.027112744749, 0.029837511480, 0.008608095348, 0.064526975155, 0.004234388471, 0.039753630757, -0.061311762780, 0.030368395150, -0.044429156929, -0.015317823738, -0.056726038456, -0.047168757766, 0.003622598946, -0.025181911886, 0.058733627200, 0.006398744881, -0.020936049521, -0.053212016821, -0.009692508727, 0.031458832324, -0.049067616463, -0.034207124263, 0.034044317901, -0.053789101541, 0.045883558691, 0.068483561277, 0.022052332759, -0.068200111389, 0.021861389279, 0.057455763221, 0.049045696855, 0.068261951208, -0.043581604958, -0.032014824450, -0.046962331980, 0.020778320730, -0.021496202797, 0.005565695465, -0.016021288931, 0.054383963346, -0.012572735548, 0.069817334414, -0.048131816089, -0.027577627450, -0.068834945560, 0.010915383697, -0.027940317988, 0.023907698691, 0.005748309195, 0.071099683642, 0.019850984216, 0.051283642650, -0.028270442039, -0.024134613574, -0.064366377890, 0.033605605364, -0.066496305168, 0.045012921095, -0.042394142598, -0.033858384937, -0.025702681392, 0.017633043230, 0.053750976920, -0.012746363878, 0.000770911574, 0.055031016469, 0.041687615216, -0.015998095274, -0.062697358429, 0.062707439065, 0.042123347521, -0.040825299919, 0.046576373279, 0.042665638030, 0.044737204909, -0.007269024849, -0.070972442627, -0.069201007485, 0.050577595830, 0.003829300404, -0.055480349809, -0.042314082384, 0.012540645897, 0.027198366821, -0.067883603275, 0.028202317655, -0.003282085061, -0.065881557763, 0.067542344332, 0.047464430332, -0.037633981556, 0.031634286046, 0.041039898992, 0.009612582624, -0.031581155956, 0.021330349147, -0.022458486259, -0.048860177398, 0.014537930489, 0.012315586209, 0.037121146917, 0.049568876624, 0.071156710386, 0.029880098999, 0.006982572377, -0.066701680422, -0.011383671314, -0.049738667905, 0.041005171835, 0.013726614416, -0.059135466814, 0.013238281012, 0.002697855234, 0.069259345531, 0.021174207330, -0.025801256299, 0.007033623755, 0.017858050764, 0.057135000825, 0.070143386722, 0.015968807042, -0.014169812202, 0.026412583888, -0.056584000587, 0.053358495235, 0.043459579349, -0.065685145557, -0.015777029097, -0.029234256595, -0.027329064906, -0.051587287337, 0.048884168267, 0.006580628455, -0.065794304013, -0.061287347227, 0.000372722745, -0.005386143923, -0.020646829158, 0.017006695271, -0.006827592850, 0.045836813748, 0.014633901417, -0.014859497547, 0.003194332123, -0.047942820936, 0.069220393896, 0.018802836537, 0.050063662231, -0.046187099069, 0.037933357060, 0.071947813034, 0.033428966999, 0.025453686714, 0.035576455295, -0.004402905703, -0.064792513847, 0.032194614410, -0.022812198848, -0.045005246997, -0.037702307105, -0.058856725693, -0.028910811990, 0.023411996663, 0.041517682374, -0.022910188884, -0.021705538034, 0.065483346581, 0.035126872361, 0.010352388024, 0.015662878752, -0.061579890549, -0.070561617613, 0.057519599795, -0.039169855416, -0.063299752772, 0.062383875251, 0.061938643456, -0.066705018282, 0.031549684703, -0.050519682467, 0.061133071780, -0.051285624504, -0.061470165849, 0.029837459326, -0.060333993286, -0.060069136322, -0.058723479509, -0.044026114047, -0.022011552006, -0.040397927165, 0.062631875277, 0.045660965145, -0.005218543112, 0.040191486478, -0.058297153562, -0.061356518418, -0.037388496101, 0.026952363551, 0.054226785898, 0.015830248594, 0.060805723071, -0.068503461778, 0.009740121663, 0.070992723107, -0.036461502314, -0.033391438425, -0.036110304296, -0.031808365136, 0.067894086242, 0.020327098668, 0.020881593227, -0.031646162271, -0.033765159547, 0.064983710647, 0.036146096885, -0.057654030621, 0.042839013040, -0.053796723485, -0.029122192413, -0.067060671747, -0.019337750971, -0.010637879372, 0.014938235283, 0.012381620705, -0.066216371953, 0.062087252736, -0.051213029772, 0.061571002007, -0.061868064106, 0.041563227773, 0.069009155035, 0.013542018831, -0.015372745693, 0.047145701945, -0.068116195500, 0.033665709198, -0.006816633046, 0.050936162472, 0.060428783298, -0.059619653970, 0.008096188307, 0.064760744572, -0.048599537462, -0.058179583400, -0.024619180709, -0.024156585336, 0.013148561120, -0.070163205266, 0.020754061639, 0.045523002744, 0.055913224816, -0.030827756971, -0.002316497266, 0.061214819551, -0.020397130400, -0.018704503775, 0.041902638972, -0.042463466525, 0.041018255055, -0.003974966705, 0.044707387686, -0.044695287943, 0.051436923444, -0.053999517113, -0.059301216155, 0.026311136782, 0.001536667347, 0.059537738562, 0.031605966389, -0.041216760874, -0.026509452611, -0.070506542921, -0.041301794350, 0.002470649779, 0.059699118137, 0.049753606319, 0.056614339352, 0.032861500978, -0.041912741959, -0.013560708612, 0.009016141295, 0.013825185597, 0.030255474150, -0.045985165983, -0.028647586703, 0.041695117950, 0.065825402737, -0.052155561745, 0.033279269934, 0.022369407117, -0.015690512955, 0.066595107317, -0.025727510452, 0.000769056380, 0.020622327924, 0.007904388011, 0.018157787621, 0.044897414744, 0.061466187239, 0.026489771903, -0.017455700785, -0.041034393013, 0.000486902893, -0.026369601488, -0.003085553646, -0.020514819771, -0.020965285599, 0.010213017464, -0.040975287557, 0.021294236183, -0.032068300992, -0.054587081075, -0.058157801628, -0.023752752692, 0.062541767955, -0.058457810432, -0.063714757562, 0.009653277695, -0.023834362626, -0.051744621247, -0.044768381864, 0.016031838953, 0.055750399828, -0.013061825186, 0.026599168777, 0.042947396636, 0.017120569944, -0.014522511512, -0.046216003597, -0.015703435987, -0.003222927451, 0.058877676725, 0.014859892428, 0.051365152001, 0.066819176078, 0.031102471054, -0.015760045499, -0.029523823410, -0.062062427402, -0.069379270077, -0.003441445529, 0.002752810717, 0.021738678217, -0.057582885027, 0.044876731932, 0.041294537485, 0.021141789854, -0.009444147348, -0.070392414927, -0.016419600695, -0.033436156809, 0.015571787953, -0.064466141164, 0.016404047608, -0.046335935593, -0.014413062483, 0.031268291175, -0.047684397548, -0.010044462979, 0.045300796628, 0.058552652597, -0.067586377263, 0.028866298497, -0.033878292888, -0.043684896082, -0.014297466725, 0.010003447533, 0.059104755521, -0.045820448548, 0.030580639839, 0.010586552322, -0.056566074491, 0.028312318027, 0.045654438436, -0.032473754138, 0.057730600238, 0.044551528990, -0.048664182425, 0.063559815288, -0.015700202435, 0.040096864104, 0.043473705649, -0.021818462759, -0.049093358219, 0.002448447049, -0.065342374146, 0.034915477037, -0.044125139713, 0.002799034119, -0.038247130811, 0.013551987708, -0.061719968915, 0.060818538070, 0.008546307683, 0.064961925149, -0.031425610185, -0.003537923098, 0.028741136193, -0.040159344673, 0.015650577843, -0.057238653302, -0.046469561756, -0.033531911671, -0.058967173100, 0.009333275259, 0.034355439246, -0.013454820961, 0.030013084412, 0.045672476292, -0.030424352735, 0.064133599401, -0.052505366504, 0.010038889945, 0.000769279897, 0.055236980319, -0.006575316191, -0.068006992340, 0.065444931388, 0.033614121377, 0.026069745421, -0.034615326673, 0.070363298059, -0.031205661595, 0.052546471357, 0.040906704962, 0.056708589196, 0.025081254542, -0.037336930633, 0.032077766955, -0.014797639102, -0.063219986856, 0.061342477798, -0.041365474463, 0.059257626534, -0.040801122785, -0.062597066164, -0.018501810730, -0.029895048589, -0.055627174675, -0.007752917707, -0.023676063865, 0.068767741323, -0.066024608910, 0.008856244385, -0.002920746803, 0.034009866416, 0.059103056788, 0.024818859994, -0.055084466934, -0.007568858564, 0.042159639299, -0.056639559567, 0.063161432743, 0.055034264922, -0.061166904867, -0.069575779140, -0.062373671681, 0.035280026495, 0.041731111705, 0.005073040724, 0.057060033083, 0.028290830553, -0.028933696449, -0.047292213887, -0.068518824875, 0.022619456053, -0.061821296811, -0.024819958955, 0.013214789331, -0.067860543728, -0.004544995725, -0.000062443316, -0.051520474255, -0.034589052200, 0.008598580956, 0.021028243005, -0.050922397524, -0.062868081033, -0.050581660122, -0.016554359347, -0.021692320704, -0.002271376550, -0.057590644807, -0.019686315209, 0.029942214489, -0.052596248686, 0.037069939077, -0.026721384376, -0.004496321082, -0.006883978844, -0.004732698202, 0.064669430256, -0.030134305358, 0.012645244598, 0.061454266310, -0.023489698768, 0.003128856421, 0.033135287464, -0.038183674216, -0.009176589549, -0.060480043292, -0.012873657048, -0.031327858567, 0.007357448339, -0.049113214016, -0.045321293175, -0.051809228957, -0.030259791762, -0.029474493116, -0.062022127211, 0.071882307529, -0.007538631558, 0.071153849363, -0.014162760228, -0.039694081992, 0.020379059017, 0.033165447414, -0.018401533365, -0.009750768542, -0.037753462791, 0.040007665753, 0.016500659287, 0.066659376025, -0.021722070873, -0.071826256812, -0.051438812166, 0.023942001164, -0.026057820767, -0.020705521107, -0.020850963891, -0.018932435662, 0.035797558725, 0.057177394629, 0.047780841589, -0.032685048878, 0.039324663579, 0.060551390052, -0.071652725339, 0.000970989466, -0.037147127092, -0.027181293815, -0.063445061445, 0.027083627880, 0.059678241611, 0.022956408560, 0.058394461870, -0.001636587083, 0.027711011469, -0.058834426105, 0.024262614548, -0.058288414031, 0.060151755810, -0.071764141321, -0.046474516392, 0.058148488402, 0.039757214487, 0.054064616561, -0.055895835161, 0.063143193722, 0.001807481050, -0.069883674383, 0.036107845604, 0.038280352950, 0.066144913435, -0.022889818996, 0.010502375662, -0.053157575428, -0.016603570431, 0.050790525973, -0.007448226213, -0.027786444873, 0.008373364806, -0.051328107715, -0.003094397485, 0.051395058632, -0.043717741966, 0.015452891588, -0.026748452336, 0.065751537681, -0.058832980692, -0.071473799646, 0.001140922308, 0.033393263817, -0.058717541397, 0.049945302308, 0.038961157203, -0.034042749554, 0.060010790825, 0.008127503097, 0.019191272557, 0.024287544191, -0.017365694046, -0.020367946476, 0.022543884814, -0.033923853189, 0.070867121220, 0.053017273545, -0.054310970008, 0.044486008584, 0.022089429200, 0.012497372925, 0.019415318966, 0.065418586135, -0.048062440008, 0.023148514330, 0.060544475913, -0.001724869013, -0.063725374639, 0.058893114328, -0.045181401074, -0.050766009837, -0.066454648972, 0.033116325736, 0.040246821940, -0.038373440504, 0.031099237502, 0.025556892157, -0.027158308774, -0.003170773387, 0.033978931606, -0.043519284576, -0.009164236486, 0.019962787628, 0.005431488156, 0.007637426257, -0.015290345997, -0.031613122672, 0.040282920003, -0.000921197236, -0.025614690036, -0.034094180912, 0.018686488271, 0.017839811742, -0.051799632609, -0.043962899595, 0.049585789442, -0.043289132416, 0.032706588507, -0.027126286179, 0.023414820433, -0.024815607816, 0.042193979025, -0.046180646867, 0.007584847510, 0.060279488564, -0.060594636947, 0.020480528474, 0.071260318160, 0.012615874410, -0.066495411098, -0.002039507031, -0.069368392229, -0.011841170490, 0.031656928360, -0.067187950015, 0.002913832664, -0.067597806454, -0.009443908930, 0.007433220744, 0.053639769554, 0.026746332645, 0.025114260614, 0.059349820018, 0.020205229521, -0.016298774630, 0.067460209131, -0.072163410485, 0.016537465155, 0.007175400853, -0.027323506773, 0.038078889251, 0.055901035666, 0.000259749591, -0.046205010265, -0.024881299585, -0.026689536870, -0.018035348505, 0.041451834142, 0.008309289813, -0.059563286602, 0.065598323941, 0.054106831551, -0.069850809872, -0.046632245183, 0.024996116757, 0.065744519234, -0.051260419190, -0.066399194300, -0.009914763272, -0.042687442154, 0.023691534996, 0.068191066384, -0.063758462667, 0.035738885403, 0.050108313560, -0.037942558527, -0.057754654437, 0.070957258344, -0.054032586515, 0.009275048971, -0.061918150634, -0.024030994624, -0.021144814789, 0.048127755523, -0.062121115625, -0.016814261675, 0.052821002901, -0.024620212615, 0.003625661135, -0.051805790514, 0.065236717463, 0.010837867856, 0.001869559288, 0.059313863516, -0.062008038163, -0.026759602129, 0.050936698914, -0.030719477683, -0.010884240270, -0.000555492938, 0.047463431954, 0.061444684863, -0.052497915924, 0.071405336261, 0.008702948689, 0.020764298737, -0.071481317282, 0.034364387393, 0.001535981894, 0.068030029535, 0.013836801052, -0.032602541149, -0.069180846214, 0.008278451860, -0.066455028951, 0.037917144597, 0.024938441813, -0.014542348683, -0.058840859681, -0.048308353871, -0.062004063278, -0.012187380344, 0.019047513604, -0.002049900591, 0.000217005610, 0.043350830674, 0.065105721354, 0.020994931459, 0.028429202735, -0.010115716606, -0.049406066537, 0.028973132372, 0.011597581208, -0.070866398513, -0.030650306493, -0.002246841788, 0.005116112530, 0.016533866525, 0.044028177857, -0.022670626640, -0.014611896127, -0.008303955197, -0.003007277846, -0.058741614223, -0.045712925494, -0.014578275383, 0.012627296150, 0.038631603122, 0.021638877690, 0.042044185102, 0.048333525658, -0.039114192128, -0.052629478276, 0.065339952707, -0.054187394679, -0.051032051444, -0.059639751911, 0.002040781081, 0.055896446109, -0.030596796423, 0.051797889173, -0.030572842807, 0.061336129904, 0.043629214168, 0.051664322615, -0.005042344332, 0.025473840535, -0.004357650876, -0.016919150949, 0.072003394365, -0.025840178132, -0.006150558591, -0.043205406517, -0.029534369707, -0.048294499516, -0.067833304405, 0.018094882369, 0.015147633851, 0.028318822384, 0.050353333354, 0.020584180951, -0.031617786735, 0.016588807106, 0.009041249752, 0.021610848606, 0.032205060124, -0.015255071223, 0.012606732547, 0.059968501329, 0.065784975886, 0.003457568586, 0.042030602694, 0.065311357379, 0.049983099103, -0.007375493646, 0.030646815896, 0.011681757867, -0.051398031414, -0.053260281682, -0.022516250610, -0.040024515241, 0.034931957722, -0.068687073886, 0.031312443316, -0.046952541918, 0.000197067857, -0.058990210295, 0.045528642833, 0.036077558994, 0.057564839721, -0.051099795848, 0.058975160122, -0.038780424744, 0.054203346372, 0.003978118300, -0.059519719332, -0.024266242981, -0.027133788913, 0.008114978671, -0.034037243575, -0.043141245842, -0.037156175822, -0.013307172805, -0.040605936199, -0.006042726338, -0.058755893260, 0.005769021809, 0.017126716673, 0.025621414185, 0.037388995290, 0.028891675174, -0.005017995834, -0.018775634468, 0.010359361768, -0.003769852221, -0.013967845589, -0.031231831759, 0.007195882499, 0.043241485953, 0.051860935986, -0.058992773294, -0.047371484339, -0.034213129431, -0.071460895240, -0.062697097659, -0.048952817917, -0.057567141950, -0.068764790893, -0.042321737856, 0.003694429994, 0.035643011332, 0.009557418525, 0.006789416075, -0.071728572249, 0.032860159874, -0.016696777195, 0.064316451550, 0.065870091319, -0.037567872554, 0.067263409495, 0.062019169331, -0.070946045220, -0.025037653744, 0.042297132313, -0.009135954082, -0.008213654160, 0.047434255481, -0.017779093236, -0.034959901124, -0.013466622680, 0.024875223637, 0.004842892289, 0.026557303965, -0.022133786231, 0.021795578301, 0.050392031670, -0.040170047432, -0.016900826246, -0.008879974484, 0.067322134972, 0.036399304867, -0.060811676085, 0.025019451976, 0.059425845742, -0.060786437243, 0.030464082956, -0.026381801814, 0.056418031454, -0.026172589511, 0.036032341421, -0.063966587186, -0.034223038703, -0.038552232087, -0.020605634898, 0.023180261254, 0.053031980991, -0.007719278336, -0.071418374777, -0.032075546682, 0.035685114563, -0.011755362153, -0.044936403632, 0.024226099253, 0.036435142159, 0.048382148147, 0.071795538068, -0.051125518978, -0.058596562594, 0.045542582870, -0.065884992480, -0.061843834817, 0.030713230371, 0.006344884634, -0.005454093218, 0.005752198398, 0.049313202500, -0.006346747279, 0.013487324119, -0.001492530107, -0.034119751304, 0.039939053357, 0.049532949924, -0.038675189018, 0.029657840729, -0.007951617241, 0.016858622432, -0.008966431022, -0.029270097613, 0.056337311864, -0.006513610482, 0.001355931163, -0.058919459581, 0.064483314753, -0.069767996669, 0.070566013455, 0.023316636682, -0.017959605902, -0.067561998963, -0.020829904824, 0.072023734450, -0.044738631696, 0.028543852270, 0.065281480551, -0.060828335583, 0.071749910712, 0.050120703876, -0.022427499294, 0.008288882673, -0.005978837609, -0.044150330126, 0.030035540462, 0.022015146911, 0.012543171644, 0.022156789899, -0.012079443783, -0.019613415003, 0.058841869235, 0.045840233564, -0.063340067863, 0.004131130874, 0.004272706807, -0.028369273990, 0.056575521827, 0.015058077872, 0.008046388626, -0.028357006609, 0.032589256763, -0.046973466873, 0.002137839794, -0.011117968708, 0.017486117780, -0.058858253062, 0.049197785556, -0.071405887604, -0.042297869921, -0.017628692091, -0.061711777002, -0.019299104810, 0.024824745953, 0.036956273019, 0.013436429203, 0.021426774561, 0.059637710452, 0.019331917167, 0.063378110528, -0.056011408567, -0.065275996923, 0.026690930128, 0.055535241961, -0.039256010205, -0.001038178802, 0.006469510496, 0.032603196800, -0.028047103435, 0.062157452106, 0.056992962956, -0.027550783008, 0.054987862706, 0.051682919264, -0.022791739553, -0.068977534771, -0.011449366808, 0.034095250070, -0.071627952158, -0.043236583471, -0.057903319597, 0.056130766869, -0.043461933732, 0.016376100481, -0.024474009871, 0.032331801951, 0.003997214139, 0.038281612098, 0.004709303379, 0.052841991186, -0.028627317399, 0.006967395544, -0.004766598344, -0.046699918807, 0.015199720860, 0.050969079137, 0.038359813392, 0.054175600410, 0.072047337890, 0.030320510268, 0.053953319788, -0.003733612597, -0.023406714201, -0.069791480899, -0.054873429239, 0.008836008608, -0.046316318214, 0.042508013546, 0.065711006522, -0.006138324738, -0.003335624933, -0.063186436892, -0.049445178360, -0.059810988605, 0.068041667342, 0.040246285498, 0.023790657520, -0.041123948991, -0.013699974865, -0.055547848344, 0.016038686037, -0.027839232236, -0.056664578617, 0.028370097280, -0.024883281440, -0.052382618189, -0.017547063529, 0.037789419293, -0.030656982213, -0.030329667032, 0.052022777498, 0.026904217899, 0.000660367310, -0.060408689082, -0.051278740168, -0.049502287060, 0.020362421870, -0.015476878732, -0.025344632566, -0.065750271082, -0.028118386865, 0.044873595238, 0.065365523100, -0.071955300868, -0.019449610263, -0.066459551454, -0.026040580124, 0.054332554340, -0.027689673007, -0.023338112980, 0.007093913853, -0.059951685369, 0.022741600871, 0.061784729362, 0.047676399350, 0.021512031555, -0.050912261009, -0.030404739082, -0.020613070577, -0.039852622896, 0.042881652713, 0.034465581179, 0.041835740209, -0.020039442927, -0.055050361902, -0.017933554947, -0.056194517761, 0.009736075997, 0.032034546137, 0.012613117695, 0.024315454066, -0.056937955320, -0.057668328285, -0.033037398010, -0.053462196141, -0.020801443607, 0.055662661791, -0.036044437438, 0.031180985272, 0.016536086798, -0.050325043499, 0.068249374628, -0.011194746941, -0.036688715219, -0.025589376688, -0.024444259703, -0.036220081151, -0.044337846339, 0.031292997301, 0.064557194710, 0.037908762693, 0.049151621759, -0.026336479932, -0.036780886352, 0.044390305877, 0.047133952379, 0.015241287649, -0.028958473355, -0.028352912515, 0.008714772761, 0.064794570208, -0.036885760725, -0.041855946183, 0.035025238991, -0.052671767771, 0.039431340992, -0.053651776165, 0.015653297305, -0.048347465694, -0.042825885117, 0.037139557302, -0.011576812714, -0.057537872344, -0.048705201596, 0.056742191315, -0.002776630223, -0.053576584905, -0.063310146332, 0.024115823209, 0.036437101662, -0.052401907742, 0.046949498355, -0.037047501653, 0.026823125780, -0.070167578757, 0.040719911456, 0.021578863263, 0.067089319229, 0.027115359902, -0.064378425479, 0.070177838206, -0.009484685957, 0.001227982342, 0.042635411024, -0.035428915173, -0.051081679761, -0.026274207979, 0.030385985970, -0.002656921744, 0.046954311430, 0.050948262215, -0.062465071678, 0.030439972878, -0.019851788878, 0.062132060528, -0.017348263413, -0.048734538257, 0.056525334716, 0.029098995030, 0.020293049514, 0.004606559873, 0.006800979376, -0.026863165200, 0.008272603154, -0.063908122480, -0.027869101614, -0.035476524383, 0.057891398668, -0.040896877646, 0.023940302432, 0.048093155026, -0.072114355862, -0.012273084372, -0.049328930676, 0.068032413721, -0.019257739186, -0.025441661477, -0.000847652555, -0.024481114000, 0.070542797446, 0.047974914312, -0.042715333402, -0.043296463788, 0.054373979568, 0.007564544678, -0.039157070220, 0.021374814212, 0.041864633560, -0.053865499794, -0.013903234154, -0.027933418751, -0.064300291240, 0.062656581402, 0.046540670097, -0.032575253397, -0.001840189099, 0.001770503819, 0.003691695631, -0.004288189113, -0.039588589221, 0.051091656089, 0.009325273335, -0.007368199527, 0.036605827510, -0.047325145453, -0.026567578316, 0.031536661088, -0.052241232246, 0.006929077208, -0.020666357130, -0.051959615201, 0.035511814058, 0.018686674535, 0.053592264652, -0.064352080226, -0.018044244498, -0.028456613421, 0.007868699729, -0.037477798760, -0.071526259184, 0.068253293633, 0.050842627883, 0.065862134099, 0.063092231750, 0.060733243823, 0.056058615446, 0.066062048078, 0.026494987309, 0.006770953536, 0.036424957216, 0.016468033195, 0.070989519358, -0.038733676076, 0.025082461536, -0.058488763869, 0.030235014856, 0.044237598777, 0.021556079388, -0.052500121295, 0.009296551347, -0.059651263058, 0.060378402472, 0.063984513283, 0.001181371510, 0.026870407164, 0.043162971735, 0.021897889674, 0.019524767995, 0.072024255991, 0.022174082696, 0.035539291799, -0.023029979318, -0.035476248711, 0.006490707397, -0.007892809808, -0.036668531597, -0.043449580669, -0.065224543214, 0.010803923011, 0.034215070307, 0.009668193758, -0.010319128633, -0.005257152021, 0.025549009442, -0.009693883359, 0.006458394229, 0.007611311972, -0.021245438606, -0.043722368777, 0.020135231316, 0.001544564962, 0.007340088487, -0.037469107658, -0.024688676000, 0.067383646965, 0.054217532277, -0.008664943278, 0.063285544515, -0.055175215006, 0.007231481373, -0.051714699715, 0.055091813207, -0.039536591619, 0.050840944052, -0.034139022231, -0.047503095120, 0.024462632835, -0.051663819700, 0.049123004079, 0.021117337048, 0.035473838449, 0.011919766665, -0.009720642120, 0.031449869275, 0.032248742878, 0.054631903768, -0.010394167155, -0.003110967577, -0.042167261243, 0.070969894528, -0.049513898790, 0.070400968194, 0.040077492595, -0.048071026802, -0.007496729493, -0.004409767687, -0.014667868614, 0.004327096045, -0.012278437614, 0.065601602197, -0.053636774421, -0.065503217280, -0.035828258842, -0.032633651048, 0.026897214353, 0.051245652139, 0.063301831484, -0.027773797512, 0.057459175587, -0.046509616077, 0.066718697548, 0.016132354736, 0.008541278541, 0.022839955986, -0.046033136547, -0.049640040845, -0.042571954429, 0.048308648169, -0.053614765406, -0.000972397625, -0.027003619820, -0.011698771268, 0.040323078632, 0.032009884715, -0.026556186378, -0.035439442843, 0.010774411261, 0.061827227473, -0.014743234962, -0.052244037390, -0.020085006952, -0.046431653202, 0.052419178188, -0.020592834800, 0.060682579875, 0.056440278888, -0.019670315087, 0.027481377125, 0.025483950973, 0.025242343545, -0.019851103425, -0.022781021893, -0.054410129786, -0.044570215046, 0.009402319789, -0.057984393090, -0.031171109527, 0.044265717268, -0.043147660792, 0.022099286318, 0.055147275329, -0.005156718194, 0.049475476146, 0.009792871773, -0.026319738477, 0.015697829425, 0.039200328290, -0.068385563791, -0.045836761594, -0.000770986080, 0.069678694010, 0.050118826330, -0.017857261002, -0.015570808202, 0.056022346020, -0.006541416049, 0.058630257845, 0.070789784193, -0.036507133394, 0.042328774929, -0.006808459759, 0.031438328326, -0.018704056740, -0.064034588635, 0.062484547496, -0.068836495280, 0.040338203311, -0.013171602041, 0.042092740536, 0.050723232329, 0.061145946383, -0.048786416650, -0.065902255476, 0.008606955409, -0.054323218763, 0.046041913331, -0.059486802667, 0.004782356322, 0.020207151771, 0.050588577986, 0.058529227972, -0.013744559139, 0.040092051029, 0.062964007258, 0.011206224561, 0.040573276579, 0.028369672596, 0.032991133630, -0.062576778233, -0.071958504617, -0.024107616395, 0.043745495379, 0.050923600793, 0.034837290645, -0.054445043206, -0.046499859542, -0.017243027687, -0.021066028625, -0.010128155351, -0.060916051269, 0.048645801842, -0.000777848065, -0.044754169881, 0.046685226262, -0.061013285071, 0.007378064096, -0.003712616861, -0.055605128407, -0.055776521564, 0.043866403401, -0.060878783464, 0.034981653094, 0.015041261911, -0.068387769163, -0.043582208455, 0.071884408593, 0.038342885673, -0.045449856669, 0.066086381674, 0.070382297039, 0.060240149498, 0.057273834944, 0.031047277153, -0.037337221205, -0.018242269754, -0.029380440712, 0.014642350376, -0.018311768770, -0.016314297915, 0.019270971417, -0.045847103000, -0.022158682346, -0.038319464773, -0.045389238745, -0.041494868696, 0.016928635538, 0.018030427396, 0.053158164024, -0.030082136393, 0.031995639205, 0.019471026957, 0.060271263123, -0.044254928827, -0.019612692297, -0.040682848543, 0.027080878615, -0.039763528854, -0.041215382516, 0.043401814997, 0.060475036502, 0.049456790090, 0.039870135486, -0.007941946387, 0.037585444748, -0.038293689489, -0.049902938306, 0.036094918847, 0.070031821728, -0.058513216674, -0.016377598047, 0.045727841556, -0.029356334358, -0.060728915036, 0.030405305326, -0.020911790431, -0.035668306053, -0.028217859566, -0.021292187274, 0.048706404865, 0.040016166866, 0.032305717468, -0.051890619099, 0.027931146324, -0.061655618250, 0.026725225151, 0.026117116213, 0.066153883934, 0.031879819930, 0.025879323483, 0.046644479036, -0.011745590717, -0.004912592471, -0.037288304418, 0.015960879624, 0.037996239960, 0.011762179434, 0.054316043854, -0.052284575999, -0.030372992158, -0.015392154455, 0.018913991749, -0.003627605736, 0.013489477336, 0.065495938063, -0.007368475199, -0.018361389637, -0.071439318359, 0.024241290987, 0.051313586533, 0.065303832293, -0.061760988086, -0.015916865319, 0.034548737109, -0.046329155564, -0.020344339311, -0.058564938605, -0.032205231488, -0.029140207916, 0.020114637911, -0.029271610081, 0.043707385659, -0.044066049159, -0.057004801929, -0.017602726817, -0.019309841096, -0.057358700782, -0.043050479144, 0.002974256873, 0.069270312786, -0.063799619675, -0.028233569115, -0.036914512515, -0.019438099116, 0.067143514752, -0.035405032337, -0.020940043032, -0.017525728792, -0.019767016172, -0.063223980367, -0.048816129565, -0.025403652340, -0.052071131766, -0.044288117439, -0.048544820398, 0.036450043321, 0.059034034610, -0.032110854983, 0.012863576412, 0.006018519402, 0.044851645827, 0.064316362143, 0.003748320043, -0.001509085298, -0.040583532304, 0.070361629128, -0.054932929575, -0.058838434517, 0.010160230100, 0.020870834589, -0.016509260982, -0.015838384628, -0.066036291420, 0.054775908589, 0.046164266765, 0.018593885005, 0.004013642669, 0.052161827683, 0.029974080622, 0.056376323104, -0.043511182070, 0.016150563955, 0.006999626756, -0.066359840333, 0.070789903402, 0.029420994222, 0.035752683878, -0.027039188892, -0.049574658275, -0.024821009487, -0.004327319562, -0.053115829825, 0.023177213967, -0.005540937185, 0.005767010152, 0.063006460667, -0.054230876267, -0.009427443147, 0.034530378878, 0.069595724344, -0.039280649275, -0.009450450540, 0.037305392325, 0.046512626112, -0.020784925669, -0.017499644309, -0.013884015381, 0.065198928118, -0.003996178508, -0.060264274478, 0.043580435216, 0.050623767078, 0.065166756511, -0.018849879503, -0.037611491978, 0.014955461025, -0.000375650823, 0.006200149655, -0.069589033723, -0.055036664009, -0.057449810207, 0.005179174244, 0.061808258295, -0.036935262382, -0.023423988372, -0.047978937626, -0.037309899926, -0.050692554563, -0.035698108375, 0.007964782417, -0.053416185081, -0.031748987734, -0.060442376882, 0.031409211457, 0.004182301462, 0.030355386436, -0.011227712035, -0.045474529266, -0.023070536554, 0.040990792215, -0.003901101649, 0.051962278783, -0.024094041437, 0.044196233153, 0.009166970849, -0.047742433846, 0.062623515725, -0.047293417156, 0.069992810488, 0.016900159419, 0.047327384353, -0.052775785327, 0.019798003137, -0.066551089287, -0.049257576466, -0.025022186339, -0.050114229321, 0.028978548944, -0.031875330955, -0.028056651354, -0.014424707741, -0.038347616792, 0.007121235132, -0.040764354169, -0.006357587874, 0.023953363299, -0.022337269038, 0.000690490007, 0.022541649640, -0.069039940834, -0.000743575394, -0.023619644344, -0.033905908465, 0.070357039571, 0.061315894127, 0.047753088176, 0.002196066082, -0.067478269339, -0.017723120749, -0.016507748514, -0.028565391898, -0.040159273893, -0.017356090248, 0.053930431604, 0.071434482932, 0.017696589231, -0.025997944176, -0.001874946058, 0.001733489335, -0.053534068167, -0.005654580891, 0.020900160074, -0.057212345302, 0.046236582100, -0.051334612072, -0.032291073352, -0.051636584103, -0.039448015392, 0.062525004148, 0.057217448950, -0.032028622925, 0.071825996041, -0.001334272325, -0.030865076929, -0.032580517232, -0.059235487133, 0.058073863387, -0.063885770738, -0.016476191580, 0.028535246849, 0.012627482414, 0.003334268928, 0.011392809451, -0.003726728261, -0.071574628353, 0.009608469903, 0.021079480648, 0.063414335251, 0.031419567764, 0.013035826385, -0.004871726036, 0.045268878341, -0.023532785475, 0.050188750029, 0.015654452145, -0.046218775213, -0.011535361409, 0.050832130015, 0.004023954272, -0.066850394011, 0.001444682479, -0.069445408881, -0.043377660215, 0.064489752054, 0.001733779907, 0.033302202821, -0.060139458627, -0.015129689127, -0.033266536891, -0.048845224082, -0.034657448530, -0.058935735375, -0.018172308803, -0.013540782034, -0.003547251225, -0.000115796924, 0.029006980360, 0.022877134383, 0.045116946101, -0.044606178999, 0.001575723290, 0.039952799678, -0.016113720834, -0.048298805952, -0.065259009600, 0.000497296453, 0.024746954441, 0.057672336698, 0.040478281677, 0.054234057665, 0.008090868592, -0.050594136119, 0.050604633987, 0.008095569909, -0.022801239043, -0.004444509745, -0.059083417058, 0.025499060750, 0.069465965033, 0.036123722792, 0.003017432988, -0.055091209710, -0.041836395860, 0.059471517801, 0.012139305472, -0.043525066227, 0.059465393424, 0.018408998847, -0.054142571986, -0.065854556859, -0.070407070220, 0.033079758286, 0.042529538274, 0.026402190328, 0.007218696177, 0.067723542452, -0.060140438378, 0.047866232693, -0.053232870996, 0.038555815816, -0.049450512975, 0.046650812030, 0.023297488689, 0.021722987294, 0.034734740853, 0.030098892748, -0.058395817876, 0.032566808164, 0.041545554996, 0.036595113575, -0.010980181396, 0.038432732224, 0.071366265416, 0.012780845165, -0.022628419101, -0.007795140147, 0.005322538316, -0.069059811532, -0.064028337598, -0.040483098477, 0.029991492629, 0.032980687916, -0.064550414681, 0.012634612620, -0.063679873943, 0.039705112576, -0.056648887694, -0.047695361078, 0.046629905701, -0.030468091369, -0.050659865141, -0.060005404055, 0.026033490896, -0.048269584775, 0.042810104787, -0.022805370390, -0.028629813343, -0.037797525525, 0.062319442630, 0.031848661602, 0.017318546772, -0.043223232031, 0.062043294311, -0.060659624636, 0.060337886214, -0.025603108108, 0.014658853412, 0.042995899916, 0.002597734332, 0.058936953545, -0.049676414579, -0.011554341763, -0.040356684476, 0.000197738409, -0.063142433763, -0.059887297451, -0.070619776845, -0.012181460857, 0.047601394355, 0.018612675369, -0.064056508243, -0.038397118449, -0.070039682090, -0.006650269032, -0.046486679465, -0.043286878616, 0.044150963426, -0.064666301012, -0.021303493530, -0.011347778141, -0.071534760296, -0.050573177636, -0.011987168342, -0.033728804439, -0.011985290796, 0.034623503685, 0.038930587471, -0.010097786784, 0.020551525056, -0.034116875380, 0.065498575568, 0.034145407379, -0.065159089863, -0.031418003142, -0.025211937726, -0.055413194001, -0.047669753432, 0.049043014646, 0.039965927601, -0.064866460860, 0.040736012161, 0.018391504884, -0.068684786558, -0.009000726044, 0.015302926302, 0.051382943988, 0.027481600642, 0.050733640790, -0.006657131016, 0.050292544067, 0.048196181655, 0.010409288108, -0.068001963198, -0.011542089283, -0.054511167109, -0.057821776718, -0.041026819497, 0.068700239062, 0.001631282270, -0.022123806179, 0.055743277073, 0.070811271667, 0.051152341068, 0.016468361020, 0.067138910294, -0.003071300685, -0.018362630159, 0.035298526287, -0.003709778190, 0.035460181534, -0.062827385962, -0.011244781315, 0.003053598106, 0.034771323204, 0.031963810325, 0.005328245461, 0.010691337287, 0.057339802384, 0.047789201140, -0.056072041392, -0.030468400568, -0.007714428008, 0.044232577085, 0.039997585118, -0.058346915990, 0.031283549964, -0.037874113768, 0.000616848469, -0.049483634531, -0.052501149476, 0.017274312675, -0.021420184523, 0.012022629380, -0.008816242218, 0.020017556846, -0.060571167618, -0.042779702693, 0.037030294538, 0.058549329638, -0.070392794907, 0.052033036947, 0.048633553088, 0.062013849616, 0.019584350288, -0.037239421159, 0.045827917755, 0.051758699119, -0.005193881691, -0.058220051229, -0.053692124784, 0.036152787507, -0.034750826657, 0.034569866955, 0.002213805914, -0.026788629591, 0.039656765759, 0.024824656546, -0.025489546359, -0.014510776848, -0.046396862715, 0.035284861922, -0.064120031893, 0.016527570784, 0.008284747601, -0.040864221752, 0.053411662579, -0.009720966220, 0.040775679052, 0.029185354710, 0.056057587266, -0.056137841195, 0.039802841842, 0.006923437119, 0.032808743417, 0.050154976547, -0.015502586961, -0.032618202269, 0.062288984656, 0.040176823735, 0.026120483875, -0.050846207887, 0.052246741951, -0.054186381400, 0.012154862285, -0.049896724522, -0.017757155001, -0.052450478077, -0.005769796669, 0.060195133090, 0.047017619014, -0.015783119947, 0.011401116848, 0.039149224758, 0.067064195871, 0.060526981950, 0.024069197476, 0.048254810274, -0.001438021660, -0.026522289962, -0.035139486194, -0.012208648026, 0.065965116024, 0.044829860330, 0.016809493303, 0.004069775343, 0.046026751399, -0.019012067467, -0.020423833281, -0.050389036536, -0.045934457332, -0.016626883298, -0.033565722406, 0.038118734956, -0.040144994855, 0.043667331338, -0.015374038368, 0.054767593741, 0.032064616680, 0.001529283822, -0.044864825904, 0.064992859960, -0.009064681828, 0.036384798586, -0.029668167233, -0.031004708260, 0.024459883571, -0.060945302248, -0.071573697031, 0.048195995390, 0.053265452385, -0.017131548375, -0.030854977667, 0.062583222985, 0.008284494281, 0.063055202365, 0.061982721090, 0.054281592369, -0.026596035808, -0.031387824565, 0.024727977812, 0.063621670008, 0.028194457293, -0.022060986608, 0.047122143209, 0.041131056845, -0.012600816786, 0.053662046790, 0.024300776422, 0.009763881564, 0.050358578563, 0.057045146823, -0.017269216478, -0.047751918435, 0.070456147194, 0.001654289663, 0.064160704613, 0.044353485107, 0.067008644342, -0.054757252336, -0.026811614633, -0.069136813283, -0.066274546087, 0.040793120861, -0.007934793830, -0.040682073683, 0.053907915950, -0.051655650139, 0.020436964929, -0.012062739581, 0.001877546310, 0.027632035315, 0.057069063187, -0.054408326745, -0.040448788553, -0.019987996668, 0.063654825091, -0.026016216725, 0.011012755334, 0.010283492506, -0.044607758522, 0.024960756302, 0.010428249836, -0.055257216096, 0.027130760252, -0.067412458360, 0.030930876732, 0.032279871404, -0.024407301098, -0.040415596217, -0.032626062632, 0.005607455969, 0.000209800899, 0.005482502282, 0.020879954100, 0.004773154855, 0.040363997221, 0.070514693856, 0.008264429867, -0.045004144311, 0.038017943501, 0.020995683968, 0.068993374705, -0.060983810574, -0.016125559807, 0.023757293820, 0.056726992130, 0.016657166183, -0.023149237037, 0.019163377583, -0.039033927023, 0.024440251291, 0.052375957370, -0.010337196290, 0.064009219408, -0.042552269995, -0.012792237103, 0.007254861295, 0.028193026781, 0.050715148449, -0.038680419326, 0.018284372985, -0.040521554649, 0.009790413082, 0.020094089210, -0.055013541132, -0.003873914480, 0.042886070907, -0.005736380816, 0.068713679910, 0.024100303650, -0.026099201292, -0.042819913477, 0.057892888784, 0.070551618934, 0.050518475473, 0.012039698660, 0.010072030127, -0.049310486764, 0.072030976415, 0.037208706141, -0.027738817036, -0.061130493879, 0.017617575824, -0.057550124824, -0.057423107326, 0.000717453659, -0.039462983608, 0.040038384497, 0.010796211660, -0.013712313026, -0.045328844339, 0.056469812989, 0.040224917233, -0.037934489548, -0.019275326282, 0.044926472008, -0.009051933885, 0.018464230001, 0.032442331314, 0.032807610929, -0.038707192987, 0.052583292127, 0.030223742127, -0.065838947892, 0.017675563693, -0.067236386240, 0.049368865788, -0.043251417577, -0.061063442379, 0.004722103477, 0.043514981866, 0.026773981750, -0.061905398965, -0.042407631874, -0.009492464364, 0.071521103382, 0.068121582270, -0.028835188597, 0.007817752659, -0.058975152671, -0.000618480146, 0.060446619987, 0.071662902832, -0.057739615440, 0.045375265181, 0.044507533312, 0.062554076314, -0.054548572749, -0.001707665622, -0.057301472872, -0.036104541272, -0.060650642961, -0.017658185214, 0.012020528316, 0.000649645925, 0.041568271816, -0.005121290684, -0.014244645834, -0.040355324745, -0.017188001424, -0.048041328788, 0.019124217331, 0.005114458501, -0.071710132062, 0.065892621875, 0.037968166173, -0.056887693703, -0.017395976931, 0.003387540579, 0.045010149479, -0.030575219542, -0.010927565396, 0.036811120808, 0.000925980508, 0.058533146977, 0.004089385271, 0.071507483721, -0.009650543332, -0.014372386038, -0.005623541772, 0.000643774867, 0.028484158218, 0.071611553431, -0.044958665967, -0.061514988542, 0.016650438309, -0.003798581660, 0.066413715482, 0.053963214159, 0.019888833165, -0.061023369431, 0.007127590477, -0.071078829467, 0.067365154624, 0.015572838485, -0.059082455933, -0.070954427123, 0.053795099258, -0.037214677781, 0.058132961392, -0.016713295132, 0.049167625606, -0.027096588165, -0.070168368518, 0.063765376806, -0.005960993469, 0.028354682028, -0.030494675040, 0.011364743114, -0.013904731721, -0.052137494087, -0.003995835781, -0.019672498107, -0.002990797162, 0.056487902999, -0.039540652186, -0.021042712033, 0.031511142850, 0.000773236156, 0.064402669668, -0.003310628235, -0.051549740136, 0.061407327652, 0.052770450711, 0.018912859261, 0.014425091445, -0.006209313869, 0.043026268482, 0.063538014889, 0.018023505807, -0.046028696001, -0.034080706537, 0.049747973680, -0.027112640440, 0.054485619068, -0.057068396360, -0.069185726345, -0.016671329737, 0.044175639749, -0.007648959756, 0.020281471312, -0.049709349871, 0.003777660429, 0.024171024561, -0.023305628449, -0.066992469132, 0.025412067771, -0.000505588949, -0.036585785449, -0.002353727818, 0.069275379181, 0.041552856565, 0.032365269959, 0.002373948693, 0.013019755483, -0.061568431556, 0.048552490771, 0.022837474942, 0.051754169166, -0.033682327718, -0.011584952474, -0.056718915701, -0.069546222687, -0.030636336654, 0.022017419338, 0.072018727660, 0.060796692967, -0.054985649884, -0.033684737980, -0.023051194847, -0.007266737521, 0.071802422404, -0.037461262196, -0.068494893610, 0.041798956692, 0.016102433205, -0.036448460072, 0.048853643239, -0.010997388512, -0.037225861102, 0.071678206325, 0.052038572729, -0.053502734751, -0.067041628063, -0.035687163472, -0.025402758271, 0.041887588799, -0.039096161723, 0.051678225398, 0.063498914242, -0.024338044226, 0.019473351538, -0.009463921189, -0.027638588101, -0.064230859280, 0.052434697747, 0.071063518524, -0.001896776259, -0.030293807387, -0.029728528112, -0.047964535654, -0.030516751111, 0.054168984294, -0.053083039820, 0.017709165812, 0.068180486560, 0.046102479100, 0.041758246720, -0.060674183071, -0.034686718136, 0.025179438293, -0.039592392743, 0.069185078144, -0.002623476088, -0.055287707597, -0.006957024336, -0.009130202234, 0.014270074666, 0.015719503164, -0.001798376441, -0.049474824220, -0.029494538903, 0.047361880541, 0.036616913974, 0.064059898257, -0.055377800018, -0.012471735477, -0.050964020193, -0.010459963232, -0.022673722357, -0.065938338637, -0.021125011146, -0.005868718028, -0.031526956707, 0.006022453308, 0.009942755103, 0.010011188686, -0.023622673005, -0.000789858401, 0.061285853386, -0.061434254050, -0.027042802423, 0.045823611319, 0.002656027675, -0.031315110624, 0.003200076520, 0.033047221601, -0.049111392349, -0.001511923969, 0.065086066723, 0.062793940306, -0.064279414713, -0.051160775125, 0.036965787411, -0.027143888175, -0.064918614924, 0.070012643933, 0.008068174124, -0.026242788881, 0.012508139014, 0.054265737534, 0.069924652576, -0.056210830808, 0.016854472458, -0.062457967550, 0.050605885684, -0.019582837820, 0.029222071171, -0.022279214114, -0.071271523833, 0.012104116380, -0.042432785034, -0.042846102268, -0.036948133260, 0.013007730246, 0.019979424775, 0.015341840684, 0.007779292762, 0.021916352212, 0.060770675540, 0.002979591489, 0.031621471047, -0.034859038889, 0.058447793126, 0.050363294780, -0.041360020638, 0.023277394474, 0.029003471136, 0.038232862949, -0.065237537026, 0.062942087650, 0.035924047232, -0.048441462219, -0.028359793127, -0.056465569884, 0.022580534220, 0.064796537161, 0.022971928120, -0.032680280507, -0.039253152907, 0.027420632541, -0.003508932889, -0.009784683585, -0.008134402335, 0.034573256969, 0.039823696017, -0.041579388082, -0.060681529343, -0.013751130551, -0.035812582821, 0.044620409608, 0.000643245876, -0.020185489208, 0.046677671373, -0.031490787864, -0.039259262383, 0.039683222771, 0.026823990047, -0.003280259669, -0.063368201256, -0.041791938245, -0.004117108881, -0.010733854026, -0.026051126420, 0.045701086521, -0.015377633274, 0.040245957673, -0.060561805964, 0.062599077821, 0.051698938012, -0.013826407492, -0.024430770427, -0.003101915121, -0.042056620121, 0.026769459248, 0.022121690214, 0.061024129391, 0.065551653504, 0.009150199592, -0.055097885430, -0.054661363363, 0.054613336921, -0.041503574699, -0.002884343266, -0.029177889228, 0.023285597563, -0.070649288595, 0.041213333607, -0.003385633230, 0.040193617344, 0.011381551623, 0.019103154540, -0.063441775739, 0.047305271029, -0.025312922895, 0.062332808971, 0.069912463427, -0.022877532989, -0.032722696662, 0.029307037592, 0.065568074584, 0.002822652459, -0.070071190596, 0.057667687535, -0.027202337980, -0.056029491127, 0.070554345846, -0.048982877284, -0.063534229994, 0.017199113965, -0.001062184572, -0.041096385568, 0.010558456182, -0.064071409404, -0.005458876491, -0.018337011337, -0.040186703205, 0.032497689128, -0.017136141658, 0.010278418660, 0.063275426626, -0.008768714964, -0.052135050297, 0.039332747459, -0.041049048305, -0.069568812847, -0.058284781873, -0.061003100127, 0.067124098539, 0.045093946159, 0.004644945264, -0.034155607224, 0.014057315886, 0.026555776596, -0.018245782703, 0.008541502059, -0.011849429458, 0.024686336517, 0.003331482410, 0.033686526120, 0.026146695018, 0.023117803037, -0.039024874568, 0.022419311106, 0.016147017479, -0.047340340912, -0.070656962693, 0.069135919213, 0.020590424538, -0.009113565087, -0.060206528753, 0.029832728207, -0.003251440823, -0.059452131391, 0.034960508347, 0.066843032837, 0.040671043098, 0.009795904160, -0.055100485682, -0.071982160211, -0.026341881603, 0.015259221196, -0.070064239204, -0.061300888658, 0.018666043878, 0.036162577569, 0.056632220745, 0.009652487934, 0.011540234089, -0.040984131396, -0.000394493341, -0.010379970074, 0.013059124351, 0.037137918174, -0.027234684676, 0.003540880978, 0.011196635664, 0.037173762918, -0.013672720641, 0.062276050448, -0.010628897697, 0.012617938221, 0.010496027768, 0.017445355654, -0.068084999919, -0.003104493022, -0.020059555769, 0.054473444819, -0.039935093373, 0.058833226562, -0.071770302951, -0.046478882432, -0.058229807764, 0.015633471310, 0.055073812604, -0.070483297110, -0.010746125132, 0.035018458962, -0.036525510252, 0.069382369518, -0.032897252589, -0.049254290760, -0.054291646928, -0.069588482380, -0.025611676276, -0.052942167968, 0.006447814405, -0.012079942971, -0.037480033934, 0.023152336478, -0.039357338101, 0.024263679981, -0.039169978350, -0.034469313920, 0.066512227058, 0.070747658610, 0.053726419806, 0.061030790210, -0.006520926952, -0.000562496483, 0.028802514076, 0.028164327145, 0.038592219353, 0.055102854967, -0.035099841654, -0.067082062364, 0.055512800813, 0.043769583106, -0.036481186748, -0.058184761554, -0.053986664861, -0.018525023013, -0.028672039509, -0.029498167336, 0.057063028216, 0.034075669944, -0.060712054372, -0.009018018842, 0.013665631413, -0.050134003162, -0.018579173833, -0.062920436263, 0.042744845152, -0.053417496383, 0.063943535089, -0.043150119483, 0.014548942447, -0.067304901779, -0.041307419538, 0.042601138353, 0.003070771694, 0.012791924179, -0.011313986033, -0.018800515682, -0.062941916287, -0.044010922313, 0.012628883123, -0.010556131601, 0.071138113737, 0.018983714283, -0.055418081582, 0.001600533724, 0.043200396001, 0.002961926162, 0.004675991833, -0.045128665864, 0.054941773415, 0.053743079305, -0.008689805865, -0.036958388984, 0.032869532704, 0.004932314157, 0.030288800597, -0.013655517250, 0.020290397108, 0.057071685791, 0.050700969994, -0.007952131331, -0.012126591057, 0.069294691086, -0.009824413806, 0.008744336665, 0.071158319712, -0.011955369264, -0.072113581002, -0.069789998233, 0.063740372658, -0.033380255103, 0.071242034435, -0.052724406123, 0.030249863863, 0.033102937043, 0.022559165955, -0.009791839868, -0.037831645459, 0.026112742722, 0.059391900897, -0.054912298918, -0.003462284803, -0.067538082600, 0.063308224082, 0.018978327513, -0.061842564493, 0.014724358916, 0.062112897635, 0.031396888196, 0.015253692865, 0.071526557207, 0.068583711982, -0.029209170491, 0.052098795772, -0.031059097499, 0.049313671887, -0.043072760105, -0.045527167618, 0.005311332643, -0.055127397180, -0.061511203647, 0.012009344995, 0.019893914461, -0.009465157986, -0.053002871573, -0.047469180077, -0.019155602902, -0.010966312140, -0.032871238887, -0.064757272601, 0.026237316430, -0.042807422578, 0.050301574171, 0.020188190043, -0.021384447813, 0.045133017004, 0.013422422111, -0.006304606795, 0.012390367687, 0.032099895179, -0.022190053016, 0.021627642214, 0.027885496616, 0.000621564686, -0.033984180540, -0.045651584864, 0.036097757518, 0.041935950518, -0.008264482021, -0.032396666706, 0.047623112798, -0.008788019419, -0.069560430944, -0.058285765350, -0.029690638185, -0.046565003693, 0.055448547006, -0.048874322325, -0.022348091006, 0.021465972066, -0.043827880174, 0.038790851831, -0.031859949231, 0.054077923298, -0.064790412784, -0.027731604874, 0.063305348158, 0.050541706383, 0.002699695528, 0.013655878603, 0.019799776375, 0.066014096141, 0.026347659528, -0.031919725239, 0.026251599193, -0.050580367446, -0.021257553250, 0.024575993419, 0.057662129402, -0.008201554418, 0.015087068081, 0.002567365766, 0.018327720463, -0.003281787038, -0.000591948628, 0.063634052873, 0.040555365384, 0.068841874599, 0.003033414483, -0.049972243607, 0.019639171660, -0.036813080311, -0.028359793127, 0.021075524390, 0.031984627247, -0.018473781645, 0.056892722845, 0.039025187492, 0.051636241376, -0.034766107798, 0.026240088046, 0.028837256134, 0.030910916626, 0.064030185342, 0.000066347420, -0.059382721782, 0.034507855773, -0.049271568656, -0.001087389886, -0.066733099520, 0.005269348621, -0.059500016272, -0.066307462752, 0.030708566308, -0.011338829994, -0.050041053444, -0.012589633465, -0.056293059140, -0.072148084641, 0.055285423994, 0.031052626669, -0.030037637800, -0.067809291184, 0.045844107866, -0.027059525251, -0.020656723529, 0.068508267403, 0.048930034041, -0.042816750705, -0.054972607642, 0.016450725496, -0.030493866652, -0.044592671096, -0.011861577630, -0.037115808576, -0.001299738884, 0.020480357111, 0.044598087668, -0.024512309581, -0.002594530582, -0.050145648420, 0.064958840609, -0.025842089206, -0.067620173097, 0.032765984535, -0.007554113865, 0.028372116387, 0.029640495777, 0.034256212413, -0.069697432220, -0.067652724683, 0.069390937686, 0.054163143039, -0.023230794817, -0.017957609147, 0.046890825033, -0.042471036315, 0.015713535249, -0.012298569083, -0.053176071495, -0.046724796295, 0.017090015113, -0.008333392441, -0.066880472004, 0.049903228879, -0.071201063693, -0.036973014474, 0.011829577386, -0.063443444669, 0.002645157278, -0.013310544193, -0.033585198224, -0.069343619049, 0.011724926531, 0.056677311659, -0.022463906556, 0.001283921301, -0.001839995384, -0.000890567899, 0.056739345193, -0.053764790297, 0.032423272729, 0.062836557627, -0.001540139318, -0.019798483700, -0.050094805658, 0.063720792532, 0.057418107986, 0.067782685161, -0.043831668794, -0.056298978627, 0.052757129073, 0.006520204246, 0.004386715591, 0.034520365298, 0.032089069486, -0.063037082553, 0.016055688262, -0.033513739705, -0.015795491636, -0.037810396403, 0.048889569938, 0.009387612343, -0.059534758329, -0.017833501101, -0.052739217877, 0.010569967330, 0.000352680683, 0.035586044192, 0.040699779987, -0.066148079932, 0.010225698352, 0.047971747816, 0.063154533505, -0.061021525413, 0.023006044328, -0.027315951884, -0.017061226070, 0.003480195999, -0.049983963370, -0.045495145023, 0.003840088844, -0.017103433609, -0.029743116349, 0.018655858934, 0.043539069593, 0.070365548134, 0.001232646406, -0.031503055245, -0.051976442337, -0.047301076353, -0.042494557798, -0.023883089423, -0.046888414770, -0.024621691555, -0.036651685834, -0.052300252020, -0.061621494591, 0.017622448504, 0.017881281674, 0.050471208990, -0.067414969206, 0.069655910134, 0.003911115229, -0.007112219930, -0.023588739336, 0.025569938123, 0.065283775330, -0.010052844882, -0.006972901523, -0.017844151706, 0.011680565774, -0.030316691846, -0.023898351938, -0.000329189003, 0.070259034634, 0.000015936792, 0.025423213840, -0.066853217781, 0.045905567706, 0.047125279903, 0.001436822116, 0.050675503910, -0.025935210288, -0.042979106307, -0.067551605403, -0.036952555180, -0.055927112699, -0.016260594130, -0.043065551668, 0.052342683077, 0.017182081938, -0.017278920859, 0.053041502833, 0.016696758568, 0.063948333263, -0.046764336526, 0.045507788658, 0.041914097965, -0.065051570535, 0.060328438878, 0.063937678933, -0.014906968921, -0.013852443546, 0.026643581688, 0.050897859037, 0.004661589861, 0.031270101666, -0.049837432802, -0.041560184211, 0.060961842537, -0.016774103045, 0.058779358864, 0.051954507828, 0.058488175273, -0.019119195640, -0.036197248846, -0.045601017773, -0.035528849810, 0.053157284856, 0.030778013170, -0.017021238804, 0.046051613986, -0.020262110978, -0.044948861003, 0.033568575978, 0.053475588560, -0.066608183086, -0.054646067321, -0.066711157560, 0.009908758104, -0.052238963544, 0.031468845904, 0.056828767061, 0.071832969785, 0.049829721451, 0.031943827868, 0.024269662797, -0.002884887159, -0.054080471396, -0.047604180872, -0.037189073861, 0.062643021345, -0.010132234544, 0.011021338403, 0.002841271460, -0.039530742913, -0.050782062113, -0.028084442019, 0.066492006183, 0.014068521559, 0.062097311020, -0.012721743435, -0.000294901431, 0.028479449451, -0.046714425087, -0.017164137214, -0.032607913017, 0.056457564235, -0.051510598511, 0.009990245104, 0.004367910326, 0.060164213181, -0.064982190728, 0.017884753644, -0.051325492561, -0.038701310754, -0.017748240381, 0.020644456148, 0.061408862472, 0.028093494475, 0.018182635307, 0.053561359644, -0.039535336196, -0.016369752586, -0.012412972748, -0.041904278100, 0.028407059610, -0.061089903116, -0.058135107160, -0.022110112011, -0.011702418327, -0.032410208136, 0.008958257735, -0.051719930023, -0.041062351316, -0.028560731560, 0.052565403283, -0.003146894276, -0.013361889869, 0.061302334070, 0.066350653768, -0.031293515116, 0.028802856803, -0.005649425089, -0.037170972675, 0.029042817652, -0.060802422464, 0.020341567695, -0.017046753317, -0.052682816982, -0.023643560708, -0.001369021833, 0.046570144594, -0.037344928831, -0.030645489693, 0.028408557177, 0.059304222465, -0.000455677509, -0.065534263849, -0.059444751590, -0.012385975569, -0.007708065212, -0.040945641696, 0.065509036183, 0.014710076153, -0.063377507031, 0.024996668100, 0.013978116214, 0.018421664834, 0.058206260204, -0.064307637513, -0.067106030881, 0.069570675492, 0.037398613989, 0.029871664941, 0.066448807716, -0.043005004525, 0.005271568894, 0.006009124219, 0.024328991771, 0.033096730709, 0.003331311047, 0.039378210902, -0.051951564848, -0.011244006455, -0.042377434671, -0.052452906966, 0.023615963757, 0.017769113183, 0.047075949609, -0.051347203553, -0.043392438442, -0.008414208889, 0.057194933295, 0.039875388145, 0.002966932952, -0.062040317804, 0.071071490645, 0.045812293887, -0.060461614281, 0.003056265414, -0.067992381752, -0.067866086960, -0.016257517040, 0.032088883221, 0.032971978188, -0.051276609302, -0.035829875618, -0.015287678689, 0.062689438462, 0.001304671168, 0.011889040470, -0.049442786723, -0.035886533558, 0.032273329794, -0.012150835246, -0.059292078018, -0.001085340977, -0.061513904482, 0.060516655445, -0.035735722631, -0.027554843575, 0.040826365352, -0.035725157708, 0.015418156981, 0.010290704668, -0.056288447231, -0.007105886936, -0.053986784071, 0.019965469837, 0.033365577459, -0.063021220267, 0.065383866429, 0.010108485818, 0.014584869146, 0.052466019988, 0.058338850737, -0.034173984081, -0.041656866670, -0.007209956646, 0.048444181681, 0.003081507981, -0.059215132147, -0.005201973021, -0.002203084528, -0.001815155149, -0.026428773999, 0.028543710709, -0.069213107228, 0.063482627273, 0.070541203022, 0.041020520031, -0.046847548336, 0.027163349092, -0.069604739547, -0.040404431522, -0.042673900723, 0.013371199369, -0.037234172225, 0.053648814559, -0.065298981965, 0.002598889172, -0.045097865164, 0.012090645730, -0.048796411604, 0.071130588651, 0.056118056178, 0.017908245325, -0.071439437568, -0.038550805300, -0.035654593259, 0.008151985705, -0.016705069691, -0.055032521486, -0.029230576009, 0.001428902149, -0.027069263160, -0.053939208388, 0.028443209827, -0.053730737418, 0.058755412698, -0.001209869981, 0.027507081628, -0.010920733213, 0.060340762138, -0.049593824893, 0.067483246326, -0.021581891924, -0.010763347149, -0.025181017816, 0.042958118021, 0.032170988619, 0.058416768909, 0.044566296041, -0.025479186326, -0.061035532504, 0.014023251832, 0.059387281537, -0.066113412380, 0.063273549080, -0.035318605602, -0.067151851952, -0.043200396001, 0.022751979530, -0.037161666900, -0.055831015110, 0.009795404971, -0.041468337178, 0.037316560745, -0.063260406256, -0.014122478664, 0.048632264137, 0.055827781558, 0.058118969202, -0.017461325973, 0.029491648078, 0.004267990589, 0.036044560373, -0.000209487975, 0.023672744632, 0.027150824666, -0.068247772753, 0.060248553753, 0.053486227989, -0.043604232371, 0.061877757311, 0.071211963892, -0.022053483874, 0.001627914608, -0.032834812999, 0.012772761285, 0.013598822057, -0.043633930385, 0.022987581789, -0.027792431414, -0.038761392236, -0.036085680127, -0.051944971085, -0.023508697748, -0.035006444901, -0.005333617330, 0.064816355705, -0.050165452063, 0.000681079924, 0.039299525321, 0.017934761941, -0.048135705292, 0.025675356388, 0.051852814853, -0.065141700208, -0.028442297131, 0.005126982927, -0.023322369903, -0.042988639325, -0.027556892484, 0.042409040034, 0.036810778081, 0.017216928303, -0.032305199653, -0.000980027020, -0.065152637661, 0.068152308464, -0.007826358080, -0.024412598461, -0.004203759134, 0.002599298954, -0.034345101565, 0.065898656845, -0.000202573836, -0.053201366216, 0.061405390501, 0.038440078497, 0.064560756087, 0.005364105105, 0.006225511432, -0.016172293574, 0.065055549145, 0.070230886340, -0.020760718733, 0.063919544220, -0.053731493652, 0.057009965181, -0.009106129408, 0.007783852518, 0.013748206198, -0.039876110852, -0.034416887909, 0.066066399217, 0.050636582077, -0.060219466686, 0.054547920823, 0.067431613803, 0.003560550511, 0.034144423902, 0.008879818022, 0.048129908741, 0.009530477226, 0.020576953888, -0.051939912140, 0.002948760986, 0.045627050102, 0.029754750431, 0.021618492901, 0.065692916512, -0.027239143848, 0.065702751279, 0.004183366895, 0.059406638145, -0.010244850069, 0.027487345040, 0.014354079962, 0.042298115790, 0.067788437009, -0.052254103124, 0.019873708487, -0.067304432392, -0.003799356520, 0.053275331855, -0.069093741477, -0.018664568663, -0.016472887248, -0.071938648820, 0.053588718176, -0.029051713645, 0.035260237753, 0.035260632634, 0.050838552415, 0.038934521377, -0.051172837615, 0.017549954355, -0.028806712478, -0.024806968868, 0.047577098012, -0.043924771249, 0.065211415291, -0.031102526933, -0.033309295774, -0.049796015024, 0.035005137324, -0.036310311407, 0.047737635672, -0.021707240492, 0.044088296592, -0.044968545437, 0.058832675219, 0.024928994477, -0.008218176663, 0.013155549765, 0.004792712629, 0.046677000821, -0.041813187301, 0.039845570922, 0.046798370779, -0.010217335075, -0.036191087216, 0.041113696992, -0.035019934177, 0.036963172257, -0.008026912808, -0.059036288410, -0.050944678485, 0.053275167942, -0.000852540135, 0.041018046439, 0.020034074783, -0.006934098899, 0.071852505207, 0.003847055137, 0.011002048850, 0.057006523013, -0.025386068970, -0.017019327730, -0.062096066773, 0.026684515178, 0.028404630721, -0.047296721488, 0.016063772142, -0.047501221299, -0.040439497679, 0.039080329239, -0.069364897907, 0.068442568183, 0.033568181098, -0.051032587886, -0.054351769388, 0.044154323637, 0.010885462165, -0.015760887414, -0.056491654366, -0.061346229166, 0.014369703829, 0.068402081728, -0.066327184439, -0.030987862498, 0.068598151207, -0.040179077536, -0.022862769663, -0.069350138307, -0.065389849246, -0.070531249046, -0.038748558611, 0.022046051919, 0.034851536155, -0.017544396222, -0.024316586554, 0.046648003161, 0.034679435194, 0.024740725756, -0.055164165795, 0.036076426506, 0.021719492972, 0.006191320717, -0.060785334557, -0.051242969930, -0.062706097960, -0.040110908449, -0.008635006845, -0.054391048849, 0.032993055880, 0.071994587779, 0.008304521441, 0.069289460778, -0.070352889597, 0.051508873701, -0.014511257410, 0.058582171798, -0.021717272699, 0.064019948244, 0.008879370987, 0.014135107398, 0.042802400887, 0.009608335793, -0.017513014376, -0.053588129580, 0.039539121091, 0.034473255277, -0.006451241672, 0.051784642041, 0.005803421140, 0.065852135420, 0.068999677896, 0.067335233092, 0.058747038245, 0.033829480410, -0.036794584244, -0.028237249702, -0.043183848262, 0.049663282931, -0.001261003315, 0.019832156599, -0.050598159432, 0.021302148700, -0.035097245127, -0.068434879184, 0.030321598053, 0.007258616388, 0.037577800453, -0.048941567540, -0.024206519127, -0.027412686497, 0.036268465221, -0.063915982842, -0.064310178161, -0.039061646909, 0.064701840281, 0.032110489905, 0.047335125506, 0.013581544161, -0.070088304579, -0.061243817210, -0.053069926798, 0.065792635083, -0.036582067609, -0.071392551064, 0.069990456104, 0.003308117390, 0.031819120049, 0.050847791135, -0.008582644165, 0.053289294243, -0.018986705691, -0.017032507807, -0.009799856693, 0.043950118124, -0.005938559771, -0.059290047735, 0.048552870750, 0.052569083869, 0.068361938000, -0.049382790923, -0.022618230432, -0.018792770803, 0.070034220815, -0.009866859764, -0.001064918935, 0.000639908016, -0.037957221270, 0.020515769720, 0.007297411561, 0.031321890652, -0.050623401999, 0.009458050132, -0.069293767214, 0.065163016319, -0.066369891167, 0.016769990325, 0.053819596767, -0.061811402440, 0.050576567650, 0.006077915430, -0.044010560960, -0.066937834024, 0.025450624526, -0.024515770376, -0.059255789965, 0.050709813833, 0.035766467452, -0.027310498059, 0.003828577697, 0.046159259975, -0.018184613436, -0.050893146545, -0.025066267699, -0.035774763674, -0.061029374599, 0.070538043976, 0.045959219337, -0.042704597116, -0.022765811533, 0.061066791415, 0.028669387102, -0.054775025696, 0.063707321882, 0.011616848409, 0.007766790688, -0.027675755322, -0.014920253307, 0.009607195854, 0.010094538331, -0.068125247955, 0.070231303573, 0.011178120971, 0.047515176237, -0.039738647640, 0.026057839394, -0.039883110672, 0.023220762610, -0.025434192270, -0.011738192290, 0.038125135005, 0.020358085632, 0.071426466107, -0.070612497628, -0.063321799040, -0.054934442043, -0.069476291537, -0.008326217532, -0.036211442202, -0.070838175714, 0.059455826879, -0.025118216872, 0.028667911887, 0.018249168992, -0.020311132073, -0.016627505422, 0.012494668365, 0.031082428992, -0.040619339794, -0.037572070956, -0.001756891608, -0.030344910920, 0.043416082859, 0.039517492056, -0.051951698959, 0.014300599694, 0.040473997593, -0.001597955823, -0.038419470191, 0.007089048624, 0.034150309861, 0.014865502715, 0.071541666985, 0.025961756706, -0.049379967153, 0.009175263345, 0.052285932004, 0.027251534164, 0.034612245858, -0.027163211256, 0.050248354673, 0.064602121711, -0.042468369007, 0.056531012058, 0.015813454986, 0.002281963825, 0.031501919031, 0.003623284400, 0.069314479828, -0.057452406734, 0.071598857641, -0.071076571941, -0.038128130138, -0.034402709454, -0.000832185149, 0.035216964781, -0.022251512855, -0.041800916195, 0.030230782926, 0.047965839505, -0.066941894591, -0.059387523681, 0.029920861125, -0.052456501871, -0.035155247897, 0.017016850412, 0.053684324026, 0.060246184468, 0.067397773266, 0.004149094224, -0.044907428324, 0.043057031929, -0.014262866229, -0.027149118483, -0.033832866699, -0.007610656321, -0.059323739260, -0.006496906281, -0.050930194557, 0.047909960151, -0.031632307917, 0.000871367753, 0.002389915287, 0.033489890397, -0.048067152500, -0.013651695102, 0.023608788848, 0.061899423599, 0.020959384739, -0.068482950330, 0.049882203341, -0.007930643857, -0.022410448641, 0.027176804841, -0.000087387860, -0.015361011028, 0.016015492380, 0.024821460247, 0.026535987854, 0.056665331125, 0.066650718451, -0.057640422136, -0.058450758457, -0.044001579285, 0.017049096525, -0.063517309725, -0.027691565454, -0.061086032540, 0.019236080348, -0.055545631796, 0.029188454151, 0.017215222120, 0.043434716761, -0.056383289397, 0.054445087910, -0.013580288738, -0.014698326588, -0.035060182214, -0.059423312545, 0.015839092433, -0.038521863520, -0.028622277081, -0.010246880352, 0.058700069785, 0.006895728409, 0.042252361774, -0.062743507326, -0.059568516910, 0.048687361181, 0.058806389570, 0.041308194399, -0.071942433715, 0.035848766565, -0.065091475844, -0.057056456804, 0.032204538584, -0.000943422318, -0.026112623513, -0.036079987884, 0.066933497787, 0.051730513573, 0.054003760219, -0.034694787115, -0.017470721155, -0.033943969756, 0.072132900357, -0.044351126999, -0.050753965974, -0.033245615661, -0.004192233086, 0.010688222945, 0.047877244651, 0.053051218390, 0.002714253962, -0.000996388495, 0.056145459414, -0.065955989063, -0.015097856522, 0.031351447105, 0.058595076203, -0.038610994816, -0.048945970833, 0.037437774241, -0.040081001818, -0.044491752982, 0.010386615992, 0.011576861143, 0.024668678641, 0.018726751208, 0.033684961498, 0.018504515290, 0.028212539852, 0.015789590776, -0.038293518126, -0.041708227247, 0.013026796281, 0.033041320741, -0.010913919657, -0.069974265993, -0.053147614002, 0.060346037149, -0.027418192476, -0.020057268441, 0.037996485829, 0.044634588063, 0.044269777834, -0.058370936662, 0.004756480455, 0.019415915012, -0.031513344496, -0.022208426148, -0.060446143150, 0.064933970571, 0.009531214833, 0.046162150800, 0.022504910827, -0.004992000759, -0.059013389051, 0.049831770360, 0.051918029785, 0.069502636790, 0.064781486988, -0.020928721875, 0.039049461484, 0.042224369943, -0.027710098773, -0.020378202200, 0.036108650267, 0.045816682279, -0.019964061677, -0.050419732928, -0.068648956716, 0.061282828450, -0.029077231884, 0.019392549992, -0.066621497273, -0.058330450207, 0.008033536375, 0.022850260139, -0.060277968645, -0.050764046609, -0.056654840708, 0.041939981282, 0.065735369921, 0.011267013848, 0.042668394744, -0.013949744403, -0.030916128308, 0.065420165658, -0.027971703559, -0.035091977566, 0.067514628172, -0.063389211893, 0.017643764615, 0.071273058653, -0.028537914157, -0.047786243260, -0.032592717558, 0.050872929394, -0.042949907482, -0.023354474455, -0.051638457924, 0.057881519198, 0.068564176559, 0.014603205025, -0.027600236237, 0.006498903036, 0.023169763386, -0.038364857435, 0.041562072933, -0.000210002065, 0.071693390608, -0.020525969565, 0.039564549923, 0.005528733134, 0.039042234421, -0.000052854419, 0.007734149694, -0.036007635295, -0.045974995941, -0.016726508737, 0.039144612849, 0.052006609738, 0.063437819481, 0.032410591841, 0.013202302158, 0.000948846340, 0.062374874949, 0.045946776867, -0.037278771400, -0.065416567028, 0.003877162933, 0.049463056028, 0.014698289335, -0.059161946177, 0.028428412974, -0.033172968775, -0.014280896634, -0.033719718456, -0.069562345743, -0.050760004669, -0.069608420134, 0.061732456088, 0.048945419490, 0.050794161856, 0.066856876016, -0.018331591040, -0.028880562633, 0.040572419763, -0.002677470446, 0.004097357392, 0.052252814174, -0.007885679603, -0.048102945089, -0.010800633579, -0.006232939661, 0.035883471370, -0.033589120954, 0.038375489414, -0.020683892071, 0.007962547243, -0.005275391042, -0.017635386437, -0.002508245409, -0.001945182681, -0.071650110185, -0.047284059227, -0.000126980245, -0.035451058298, -0.023526228964, -0.039314217865, -0.041731059551, 0.062400728464, -0.025463566184, 0.062371179461, 0.033704146743, 0.037376880646, -0.050398945808, 0.047387450933, -0.035623207688, 0.061757832766, 0.062177747488, 0.001634158194, 0.049557380378, -0.019752852619, -0.067048780620, 0.025317601860, -0.027173724025, 0.061499893665, -0.058109294623, -0.016145158559, 0.058735534549, -0.044640935957, 0.057407855988, -0.030979447067, 0.026146262884, -0.055304020643, 0.013710767031, 0.058536455035, 0.009545408189, -0.038344018161, -0.005481161177, -0.061905950308, 0.046908751130, 0.004303902388, 0.045242279768, -0.040823645890, 0.042238421738, -0.064247347414, -0.004597529769, 0.052011318505, -0.013948161155, 0.055830687284, 0.002400152385, 0.016898058355, -0.070825323462, 0.002242058516, 0.033984079957, -0.009728435427, 0.017699614167, 0.034934915602, -0.042859382927, -0.007313624024, 0.067215427756, 0.059122234583, -0.023532990366, -0.051997315139, -0.023452963680, -0.016972508281, -0.035415820777, 0.057451546192, -0.043804362416, 0.032001882792, 0.008351013064, 0.012937441468, -0.013872917742, -0.008157305419, -0.013783548027, 0.002128839493, -0.032200187445, -0.061670515686, 0.018851615489, -0.051752448082, -0.023859724402, 0.069162070751, 0.058719798923, -0.045718103647, -0.004044741392, -0.045100741088, 0.071806833148, 0.070828557014, -0.063827231526, 0.001218467951, -0.035014789551, 0.005442030728, -0.013660710305, -0.015193853527, -0.053318884224, -0.058854058385, -0.021629072726, 0.031398475170, 0.031100444496, 0.003263413906, 0.027946047485, 0.070723339915, -0.001476652920, -0.060666866601, -0.017823416740, 0.064712092280, 0.014923229814, -0.054772961885, 0.020780816674, 0.063444957137, 0.058743491769, 0.065479114652, -0.052766680717, -0.047363415360, 0.037272557616, 0.067426294088, 0.007271401584, -0.040605831891, -0.004133388400, -0.051461834460, -0.048757698387, 0.015368975699, -0.000857926905, 0.039553865790, -0.016541711986, 0.004895269871, 0.019128777087, 0.031054571271, -0.032167531550, -0.036638867110, -0.031349021941, 0.010192401707, -0.066940076649, 0.017662517726, 0.029419466853, 0.039677768946, -0.019824482501, -0.019820526242, 0.051846362650, -0.050193980336, 0.061557516456, -0.031138900667, 0.070237338543, 0.050482220948, 0.018931902945, -0.004537634552, 0.056295469403, 0.005831554532, -0.054772585630, -0.022218253464, 0.000744275749, 0.060941249132, 0.049980178475, -0.062202177942, 0.038094058633, 0.021789178252, -0.051949068904, 0.003776453435, -0.020381145179, -0.057837694883, 0.000377349555, 0.022233188152, 0.046308010817, 0.045076340437, -0.036869622767, 0.037840716541, -0.065276972950, 0.035865701735, 0.053802818060, 0.007066123188, 0.068114995956, 0.063898995519, -0.016257394105, -0.015179347247, -0.046881154180, -0.005810253322, 0.068258479238, 0.053945586085, -0.002914465964, -0.044362895191, 0.004621423781, 0.015752114356, -0.047636412084, -0.048713669181, -0.020730916411, 0.035193033516, -0.026542868465, -0.049420125782, 0.048800095916, -0.046510770917, 0.067754864693, -0.068952411413, -0.049362570047, 0.009647786617, -0.018267545849, 0.024441882968, -0.041642978787, -0.021758876741, 0.049062281847, 0.068532496691, 0.017333514988, -0.054864019156, 0.056285545230, 0.021995328367, -0.033285308629, 0.037385277450, 0.067245751619, -0.013328269124, -0.000557452440, -0.054308664054, -0.047794021666, -0.060849893838, -0.056945092976, -0.025013670325, 0.048219107091, -0.052914842963, -0.001713961363, 0.064485669136, 0.011032678187, -0.010911408812, -0.036064639688, 0.004867389798, -0.037058513612, 0.054074808955, 0.049121454358, -0.052078064531, 0.032724797726, -0.047801382840, -0.035133343190, 0.064602985978, 0.007536120713, 0.070086807013, -0.053918372840, -0.064921528101, -0.016788333654, 0.066534191370, -0.046910263598, 0.006028220057, 0.045811980963, 0.064717218280, -0.021830953658, -0.022311650217, 0.037906579673, -0.043232284486, -0.005200333893, -0.001078359783, -0.016467951238, -0.033549204469, 0.034070760012, 0.004411198199, -0.037891231477, -0.057829916477, -0.049297221005, 0.044445350766, 0.070493310690, -0.060731753707, 0.041150189936, -0.016250975430, -0.012494221330, -0.032102957368, -0.023893844336, -0.070645466447, 0.054040312767, 0.000520318747, -0.033833075315, -0.039720047265, -0.028080776334, -0.020324897021, -0.041102752090, -0.050401404500, 0.067444369197, 0.019962579012, -0.023551676422, 0.027017936110, 0.005083404481, 0.027979530394, -0.069395042956, -0.009167008102, -0.032587435097, -0.065826669335, 0.051449857652, 0.063473731279, 0.038921982050, -0.018363010138, 0.046152755618, 0.065938219428, -0.054986733943, -0.032785929739, 0.053983107209, 0.010625354946, -0.059058792889, -0.063680842519, -0.053654320538, -0.051023002714, 0.036516681314, 0.047255560756, -0.023380182683, 0.022403426468, 0.027941487730, -0.069458432496, 0.067471370101, -0.021079931408, 0.029853671789, -0.030490100384, -0.046025723219, 0.019649870694, 0.049873672426, 0.005508519709, -0.061396919191, 0.044697575271, 0.013636052608, 0.000309869647, 0.017682515085, 0.047209382057, -0.060262486339, 0.015749752522, -0.057748563588, 0.012089319527, -0.037827380002, -0.070715889335, 0.018978893757, 0.012987010181, -0.034969866276, -0.059238411486, -0.010586310178, 0.070342347026, 0.011838398874, -0.064495787024, -0.034647434950, -0.001636981964, 0.041603438556, -0.027430374175, 0.028806626797, -0.048447482288, 0.022940009832, 0.057431071997, 0.041911706328, 0.038954108953, -0.025239367038, -0.044315200299, -0.005207479000, -0.049148455262, -0.055448137224, 0.029371976852, -0.032840281725, -0.030377618968, 0.052213221788, -0.000784218311, 0.059386834502, -0.068604722619, -0.048934131861, -0.001056693494, 0.012331672013, -0.019968964159, -0.011642593890, -0.000468619168, 0.035977505147, -0.039715625346, -0.022568263113, -0.016446284950, 0.056416183710, -0.062194742262, -0.049797512591, 0.040554642677, -0.067749358714, 0.031130500138, 0.046297118068, -0.050112355500, 0.064901039004, -0.025270733982, 0.026364818215, 0.066757038236, -0.019005719572, -0.060347206891, 0.014232240617, -0.042706698179, 0.032078176737, 0.002963766456, -0.045477990061, 0.059812188148, 0.066166773438, 0.019142270088, 0.019964970648, -0.017251633108, 0.056156158447, 0.038536898792, 0.049923926592, -0.046253137290, 0.023449733853, -0.031551800668, -0.036289148033, 0.039917029440, 0.005406416953, -0.044217329472, 0.016469068825, -0.049863345921, 0.036060042679, -0.061231926084, -0.046014346182, -0.052334815264, 0.068622604012, -0.037578731775, -0.026607874781, 0.057011500001, 0.068694293499, 0.007209286094, -0.055813312531, -0.042827896774, 0.065526485443, 0.057870164514, -0.020827718079, 0.062356069684, -0.010563287884, -0.003700114787, -0.028987154365, -0.016284286976, 0.071310371161, -0.068030938506, -0.004336677492, -0.047998845577, 0.071308225393, 0.015912339091, 0.064907208085, 0.066144987941, -0.066977947950, 0.053686141968, -0.065140716732, 0.060885995626, 0.036785982549, 0.020928069949, -0.049582209438, -0.056633763015, -0.046366836876, -0.000375717878, -0.047023825347, -0.048929244280, -0.064206086099, -0.002649419010, 0.016414038837, 0.016683302820, -0.052755907178, 0.024256139994, -0.036530930549, 0.002940900624, 0.018564373255, 0.001326099038, -0.069764256477, -0.044137477875, -0.066300958395, 0.026058167219, 0.066812321544, -0.049839034677, 0.066415026784, -0.059730671346, 0.062725320458, 0.057940214872, 0.063922613859, 0.054590016603, 0.022291377187, -0.012765135616, -0.001990124583, 0.002173148096, 0.033679559827, 0.008306860924, -0.014832120389, 0.055734887719, -0.062980830669, -0.051182627678, -0.036241400987, 0.040283329785, 0.047285728157, -0.039275467396, 0.009575277567, 0.032098948956, 0.051963053644, -0.059270262718, 0.000025123358, -0.017785597593, 0.046689935029, 0.000980973244, 0.040003232658, 0.036923408508, -0.019858345389, -0.042153358459, 0.006789378822, -0.016951914877, 0.034033961594, -0.064614497125, -0.001309648156, -0.039307214320, 0.057024955750, 0.058359652758, 0.023092441261, -0.005182869732, -0.027233775705, -0.059897281229, -0.038373924792, -0.005017466843, 0.009634055197, -0.026091977954, -0.069548800588, 0.030867606401, -0.016576644033, -0.011882327497, 0.016567595303, -0.067985445261, -0.069043740630, -0.029486142099, 0.061826989055, 0.019533284009, 0.021098047495, -0.014351084828, 0.011892460287, -0.004038475454, -0.047926150262, -0.005709715188, -0.058710090816, 0.017597533762, -0.026228800416, -0.015780657530, 0.048477649689, 0.008071526885, -0.030515667051, 0.041669391096, 0.002497918904, -0.032582066953, 0.008732996881, 0.056382164359, 0.057624801993, -0.013000536710, -0.002312362194, 0.000118464231, 0.044987231493, -0.063338212669, -0.037755869329, -0.055781822652, 0.011597976089, -0.004410766065, -0.069157682359, 0.062207818031, -0.004709646106, -0.001496165991, 0.019294768572, -0.008810162544, 0.010876275599, -0.010472405702, -0.050102479756, 0.009378217161, 0.071978181601, -0.055189542472, 0.002945557237, 0.011539198458, 0.013767078519, -0.033008459955, 0.036620661616, 0.034124843776, -0.020717460662, -0.047012574971, -0.071577742696, 0.034367591143, -0.043449599296, 0.052521713078, 0.019581392407, 0.061355814338, 0.069705948234, -0.041928898543, -0.040394347161, 0.000967390835, -0.034689933062, 0.033605471253, -0.015753488988, 0.062479346991, -0.055136702955, -0.057940844446, 0.020979031920, -0.068862028420, -0.021193783730, -0.017893876880, -0.032625786960, 0.034672126174, -0.045612081885, -0.041445743293, 0.021619796753, -0.000357858837, -0.013673186302, -0.064404234290, -0.038943335414, -0.061699200422, 0.062097713351, -0.009702384472, 0.041677929461, -0.008750803769, -0.047378294170, -0.025487706065, -0.071317702532, 0.031885966659, 0.013668611646, 0.055179968476, 0.005122564733, -0.042721271515, -0.015811163932, -0.059248324484, 0.018699958920, -0.013177644461, -0.027284584939, 0.022665254772, -0.041775725782, 0.026832208037, 0.033997133374, 0.008803352714, 0.000038951635, 0.062557965517, -0.020775258541, -0.015160195529, 0.006777264178, 0.031544037163, 0.055406272411, -0.070644058287, -0.005925104022, -0.064149111509, 0.001415602863, -0.008644670248, -0.031197331846, -0.021209511906, 0.055526494980, 0.049403764307, -0.009671792388, -0.042561113834, 0.070910185575, 0.057679131627, -0.044601224363, 0.047307357192, 0.052267044783, -0.059236623347, 0.011795438826, -0.037520848215, -0.029477898031, 0.037997312844, -0.053815253079, -0.060730308294, -0.063413009048, 0.028533868492, -0.018854096532, -0.010540612042, 0.023367017508, 0.071813628078, 0.041999638081, 0.024593904614, 0.066011056304, 0.047140881419, -0.032071415335, 0.057364866138, -0.025076560676, 0.013860911131, -0.059734594077, 0.032928206027, 0.054518312216, 0.050359800458, -0.020621106029, 0.071374624968, -0.016789674759, 0.049749545753, -0.024125527591, 0.013999573886, -0.011800669134, -0.044634222984, 0.054764240980, 0.063330635428, -0.039230544120, 0.047801576555, -0.022363923490, 0.009019449353, 0.057813778520, 0.004150077701, 0.036991097033, 0.029663071036, -0.035281885415, -0.033388081938, -0.026644609869, 0.022659443319, -0.048192195594, 0.069181323051, -0.007476136088, -0.039886794984, 0.015017673373, 0.055858269334, 0.009496577084, -0.051677227020, -0.004254244268, -0.066629357636, -0.009686741978, -0.061013646424, -0.005734629929, 0.067693427205, 0.017087623477, 0.016900256276, -0.049732781947, 0.015178762376, 0.008903816342, 0.050805926323, -0.029864870012, 0.053596749902, -0.056141383946, 0.009861886501, -0.064592331648, -0.047561287880, 0.002099834383, -0.053625144064, 0.011954128742, -0.067140579224, 0.027493178844, 0.023955032229, -0.051632158458, -0.047022901475, -0.032685097307, -0.016966830939, 0.038117080927, -0.062762983143, 0.057692378759, 0.023559749126, -0.061811592430, -0.052885852754, 0.068667590618, 0.066161006689, -0.056498810649, 0.035125136375, -0.030788559467, -0.022231295705, -0.030975129455, 0.054474309087, -0.069309376180, 0.069419145584, -0.052853468806, 0.043415561318, -0.046614367515, 0.062834307551, 0.002176038921, -0.060911182314, -0.052664339542, 0.020276755095, -0.036541890353, 0.015262588859, 0.060478299856, -0.029110334814, -0.053364001215, -0.049759212881, 0.060421332717, -0.018463753164, 0.016077637672, -0.027060799301, 0.027086004615, -0.047943525016, -0.068901397288, 0.015132769942, 0.050149954855, 0.041055813432, -0.063263945282, -0.038596987724, -0.001925721765, -0.054297395051, 0.007425636053, 0.036540411413, -0.004144325852, -0.057128824294, -0.033619198948, -0.070542506874, 0.039803840220, -0.016919393092, -0.028165914118, -0.012134008110, -0.038187097758, 0.000931844115, -0.019954908639, -0.019832227379, 0.044077806175, 0.020028412342, -0.017895013094, 0.024136044085, -0.063963010907, -0.023327615112, 0.003502562642, 0.047852933407, -0.012102812529, -0.006206825376, -0.071966417134, -0.051214233041, 0.070240095258, 0.005910687149, 0.038555450737, -0.066651470959, 0.001934789121, -0.002118483186, 0.019325621426, -0.019056010991, -0.069554120302, 0.051516309381, -0.070512980223, 0.012701436877, -0.064868718386, -0.013241786510, 0.069430202246, 0.039950385690, 0.051807008684, 0.016681239009, 0.002588130534, -0.020058970898, -0.003805376589, 0.000083260238, -0.070068605244, -0.066845096648, 0.026689127088, 0.010245487094, -0.034679748118, 0.032363697886, 0.055508494377, 0.072125509381, 0.030336551368, -0.001312673092, 0.005007036030, -0.011056199670, 0.016934260726, -0.059521749616, 0.044635325670, -0.001580253243, 0.040313325822, -0.033497620374, -0.062074918300, -0.068664208055, 0.052457876503, -0.061326079071, -0.036393966526, -0.030167289078, 0.021422110498, 0.001203998923, 0.012317270041, -0.013792306185, -0.025742359459, -0.029684908688, -0.059785593301, 0.004236809909, -0.002122595906, -0.009537734091, -0.003604508936, 0.035441145301, 0.056394651532, -0.020334806293, 0.028804145753, -0.003339052200, -0.051074258983, 0.046272836626, 0.035196900368, 0.071519196033, 0.021345354617, -0.049870364368, -0.024474181235, -0.019817721099, -0.038200449198, 0.064411550760, -0.001054696739, 0.015400245786, -0.071678191423, 0.051405057311, 0.006851822138, -0.050120443106, 0.034915409982, 0.061416089535, 0.058483675122, 0.017133012414, -0.043270360678, 0.033169835806, -0.069402292371, 0.035919710994, -0.060881517828, 0.047368936241, 0.059172302485, -0.045743636787, -0.031583305448, -0.039951317012, -0.041654199362, 0.015418604016, 0.035064674914, 0.061033949256, -0.037910021842, -0.023729126900, -0.000613115728, 0.007403217256, -0.038389734924, -0.013350430876, -0.058823771775, 0.032393760979, 0.017006233335, -0.063005231321, -0.060024004430, -0.007703676820, 0.018506631255, -0.019626937807, -0.002187915146, 0.054789796472, -0.067162208259, -0.014248758554, 0.071576222777, 0.055504798889, 0.027605377138, 0.067519649863, -0.065155878663, -0.014060139656, 0.035106122494, -0.001844972372, 0.011247053742, 0.007139496505, 0.063714072108, -0.028949610889, 0.030289813876, -0.052132524550, -0.063260354102, -0.013529632241, 0.036221116781, -0.010906711221, -0.018516026437, -0.002540007234, 0.054401040077, 0.055088594556, 0.025071658194, 0.030316248536, 0.051824733615, 0.020743854344, 0.064661622047, -0.025147121400, 0.063213586807, -0.023164670914, -0.047556504607, -0.010408516973, -0.064357429743, -0.036725863814, -0.059678584337, -0.023164171726, 0.037960663438, -0.064565025270, 0.028417311609, 0.000831015408, -0.019188310951, 0.064434066415, 0.021329700947, 0.015424109995, 0.010914348066, 0.006264187396, -0.048764098436, -0.066088251770, 0.051292836666, -0.063596203923, 0.059091329575, -0.010182444006, -0.016893722117, -0.020471841097, -0.007002942264, -0.062546961010, 0.048120163381, -0.054361522198, -0.007855348289, 0.023154176772, -0.000495322049, 0.020756796002, -0.066513232887, -0.030853461474, 0.021646209061, -0.039167672396, 0.058827072382, 0.067624479532, -0.034893915057, -0.038345482200, -0.055279791355, 0.030232742429, 0.020376205444, 0.025194577873, -0.050349168479, 0.016174495220, -0.038310330361, 0.036295287311, 0.032943040133, -0.046407304704, -0.055297531188, 0.061381444335, 0.068435907364, -0.064741566777, 0.031634256244, 0.019895955920, -0.018349036574, -0.038796324283, 0.021310769022, -0.052606090903, -0.063969962299, 0.046246856451, -0.045306526124, -0.051529526711, -0.029663883150, -0.043131127954, -0.001767903566, 0.022192977369, 0.017107494175, 0.014483056962, 0.025620713830, 0.025759018958, -0.043652787805, -0.035158962011, -0.037192963064, -0.010072287172, 0.018285356462, -0.023511122912, 0.038743913174, 0.055173769593, 0.037591844797, -0.038844536990, 0.023975364864, 0.067894458771, -0.067131973803, 0.067642167211, 0.004675269127, 0.000551462173, -0.038921948522, 0.041525475681, 0.028907887638, -0.004007779062, -0.002080716193, -0.034436449409, 0.070296019316, -0.049831859767, 0.031409524381, 0.012986138463, 0.058740213513, 0.060552060604, -0.015892188996, 0.015606909990, 0.015960536897, 0.042045921087, -0.003368444741, -0.017359308898, 0.049172356725, -0.014766719192, -0.040936417878, 0.012104861438, -0.050718072802, -0.036534149200, 0.006483897567, 0.016143471003, 0.055993393064, 0.020867928863, 0.040819019079, 0.031095318496, -0.030577972531, -0.019307173789, -0.007858529687, -0.060704655945, 0.024976506829, 0.030467435718, -0.025220025331, -0.040717501193, -0.031114894897, -0.029212299734, 0.066575005651, 0.032007783651, 0.023575767875, 0.003460012376, 0.038562782109, 0.044686637819, 0.052366547287, 0.064657211304, -0.071304813027, 0.049475356936, -0.049699746072, -0.007522642612, 0.056555837393, 0.038725607097, -0.048107109964, -0.062718525529, -0.009464710951, 0.040507338941, -0.033172968775, -0.052230942994, 0.064225599170, 0.057990297675, 0.044400408864, -0.064025349915, 0.057679846883, 0.003332376480, 0.054630056024, 0.069705396891, -0.003417357802, 0.054471507668, 0.019877620041, -0.038103353232, 0.030644677579, 0.005866758525, -0.013475365937, 0.036865353584, -0.006695516407, 0.014211729169, 0.043582104146, -0.024890404195, -0.047796670347, -0.042428176850, -0.036199674010, 0.032608740032, 0.069096475840, 0.000939689577, -0.038929447532, -0.031019624323, -0.067460723221, 0.060696467757, 0.060506895185, 0.009466350079, 0.032216005027, -0.057371262461, 0.019086740911, 0.070147246122, -0.009171754122, 0.046922758222, 0.004372417927, 0.036143735051, 0.067360013723, -0.054448138922, -0.017685800791, -0.041996829212, -0.050568532199, -0.031302858144, 0.044931754470, 0.061424717307, 0.065508455038, 0.011560775340, 0.035471051931, 0.008659780025, 0.056765109301, 0.028191514313, -0.033066648990, -0.024455547333, -0.035176016390, -0.069189429283, -0.023649618030, -0.011242095381, -0.040414962918, 0.002275459468, 0.018965885043, 0.052652329206, 0.029532596469, -0.006460838020, -0.000893272460, -0.051667727530, 0.037555947900, -0.023109629750, -0.035848923028, -0.046629767865, 0.063709288836, -0.045417871326, -0.032242756337, 0.034405961633, 0.065343603492, 0.039662800729, 0.016367755830, -0.023913305253, 0.008695967495, -0.041172333062, 0.006217181683, 0.024302825332, 0.066091328859, 0.066707313061, -0.016136039048, 0.008621513844, 0.024948202074, -0.022117335349, 0.015637658536, -0.054839584976, 0.020125478506, 0.029761388898, -0.010414883494, -0.053178481758, 0.062040477991, -0.045215800405, 0.046545110643, 0.004373393953, -0.050268176943, -0.062376908958, -0.057978767902, 0.034317024052, -0.037906803191, 0.026993833482, 0.006277129054, 0.026342123747, 0.032448783517, -0.015682239085, -0.072072871029, 0.014722004533, 0.005426205695, 0.044549502432, 0.021916277707, -0.029151752591, 0.052056863904, -0.046006914228, -0.006304398179, 0.036351092160, 0.020836338401, -0.012244746089, 0.046274475753, -0.023177061230, 0.010312043130, 0.067839473486, -0.039387740195, 0.009480439126, -0.051483340561, 0.046679340303, 0.007507920265, 0.042081557214, -0.044012524188, 0.015819236636, 0.032793618739, -0.060395300388, 0.030417419970, 0.007522769272, -0.017083764076, -0.034994643182, 0.050522759557, -0.053832270205, -0.058525860310, -0.047509476542, 0.044065348804, 0.020418345928, 0.035182826221, 0.069893673062, -0.016403872520, 0.039023496211, 0.022298827767, -0.043262392282, 0.003775544465, 0.015715792775, 0.057248875499, 0.015752270818, 0.049816370010, -0.023515835404, 0.015344269574, -0.031089395285, -0.000375181437, -0.055703863502, -0.057280689478, 0.007457420230, 0.054005071521, 0.064569517970, 0.000479266047, 0.054734706879, -0.052783906460, 0.017436876893, 0.021074146032, -0.026577074081, -0.027709480375, 0.068915471435, -0.005841374397, -0.011270504445, -0.055801905692, 0.055127412081, 0.020492263138, 0.014623269439, -0.017405595630, 0.032948166132, 0.002623677254, -0.041292332113, 0.017805382609, 0.054430261254, 0.013656444848, 0.046024464071, -0.015024971217, -0.045368384570, 0.014298498631, 0.030482307076, -0.021573442966, 0.069501891732, -0.004762895405, 0.038086578250, 0.007305055857, -0.027224257588, -0.059131905437, 0.057164177299, -0.006176643074, 0.065921753645, -0.016314037144, 0.035428985953, -0.025292016566, 0.016987755895, -0.001910835505, 0.061157032847, -0.051754258573, 0.047120422125, 0.008381657302, -0.067829765379, 0.011704087257, -0.062489453703, 0.026493988931, -0.046914428473, -0.008382670581, -0.063861384988, -0.059251111001, 0.047709539533, 0.002716302872, -0.049155287445, -0.009510397911, 0.028763629496, -0.036976285279, -0.000277243555, -0.052901819348, 0.019141510129, 0.032850816846, -0.054375149310, -0.034886069596, -0.016148220748, -0.050027340651, 0.012296758592, 0.031429670751, -0.061984397471, -0.014460310340, 0.009177334607, 0.062739759684, -0.054416410625, -0.005719244480, 0.001378916204, 0.047514587641, 0.069309532642, -0.014024212956, 0.033420398831, -0.002693332732, -0.012862145901, -0.036691948771, -0.058402664959, -0.045107968152, 0.050754137337, -0.018226597458, -0.004038989544, -0.022384069860, -0.062752887607, 0.021086126566, -0.048917528242, -0.034911207855, 0.021570153534, 0.056673988700, 0.059867277741, 0.065693303943, 0.069241464138, -0.055623937398, 0.018897131085, -0.025392312557, 0.017365351319, -0.070847593248, -0.026461586356, 0.043432563543, -0.016206067055, -0.030598826706, 0.064644113183, -0.001197613776, -0.026022925973, 0.043093256652, 0.024980135262, -0.005563080311, -0.054341204464, 0.044323027134, 0.040012605488, 0.058280497789, 0.057942301035, 0.037332281470, 0.059454679489, -0.008320726454, -0.006927892566, -0.060567244887, -0.021515097469, 0.043607436121, -0.048779688776, 0.039208605886, -0.049472983927, -0.052954331040, -0.053067550063, 0.049153447151, 0.070502310991, -0.015953443944, 0.042795017362, -0.062966294587, 0.056207209826, -0.052629873157, -0.061820469797, 0.011344924569, -0.070714153349, -0.040687493980, 0.022505268455, 0.058177649975, -0.015123479068, 0.001589819789, -0.070656791329, -0.035886846483, -0.037890166044, 0.005798533559, -0.027695368975, -0.021890558302, -0.068878456950, 0.000040523708, 0.012924432755, 0.028459161520, -0.013278834522, 0.057861462235, 0.044841185212, -0.008805654943, 0.034833401442, 0.019842430949, -0.051945008337, 0.034211859107, 0.002505853772, 0.018587276340, -0.039717122912, 0.015905648470, -0.071874037385, 0.055604621768, 0.019290365279, -0.061731994152, 0.004075884819, -0.064651489258, 0.048632346094, 0.038357026875, 0.043084189296, 0.069283083081, -0.064528509974, -0.027496308088, 0.002958409488, 0.018479064107, -0.010476533324, 0.006587877870, -0.010538406670, 0.033680111170, -0.057815719396, 0.061531692743, 0.031456992030, -0.048446401954, -0.044356890023, -0.043544180691, 0.071050196886, 0.053006023169, 0.016794510186, 0.002702258527, -0.025446049869, 0.066945806146, 0.008594498038, -0.021884929389, -0.034800346941, 0.040133446455, -0.069374516606, 0.035014770925, 0.065454736352, -0.034519780427, 0.028028622270, -0.063309565187, 0.062702491879, 0.010181717575, -0.057644620538, 0.066157177091, 0.045426525176, -0.027456201613, 0.041661463678, 0.021720990539, 0.038960367441, 0.070443570614, -0.052546523511, -0.045298010111, -0.037380721420, 0.022604122758, 0.043029591441, 0.058074355125, 0.027204416692, -0.005688190460, 0.029578313231, 0.025008402765, 0.048791781068, 0.031743429601, 0.045407705009, 0.053240373731, 0.022405803204, -0.035019934177, 0.018029086292, -0.052563712001, 0.041588023305, 0.069676637650, 0.044269122183, -0.006727643311, 0.010986052454, -0.047043785453, 0.041241094470, 0.042685739696, -0.045479848981, 0.032011382282, -0.016725338995, -0.056731529534, 0.055182799697, -0.051879864186, -0.055388018489, -0.044688630849, -0.005767941475, -0.016766961664, -0.006573714316, -0.032210133970, -0.016652073711, 0.010667644441, -0.071218386292, -0.060289498419, -0.048080503941, 0.067186266184, -0.063047938049, -0.051850199699, -0.007971316576, -0.046814650297, -0.000723220408, -0.051982395351, 0.069935515523, -0.035400662571, 0.006656564772, 0.049197129905, -0.050604559481, -0.007271178067, 0.038296990097, -0.045251160860, 0.037762790918, -0.066345147789, -0.025205418468, 0.032833278179, -0.004218295217, -0.014384582639, 0.035224139690, -0.056365534663, -0.023001607507, -0.038042031229, 0.067792087793, -0.037125445902, 0.016267426312, 0.021960690618, 0.071020841599, -0.043142497540, 0.000722616911, -0.017441846430, -0.018139481544, -0.036592565477, 0.011348880827, 0.060776159167, 0.000783339143, -0.071107648313, 0.066996902227, -0.069837987423, -0.048367179930, 0.026979997754, 0.032712608576, -0.040320429951, -0.062684491277, 0.006164893508, -0.066748805344, -0.064394995570, 0.020268961787, 0.020451158285, 0.030753925443, 0.046394675970, 0.038359656930, -0.035036180168, 0.021853424609, -0.032257124782, -0.045689009130, -0.034052576870, 0.050459377468, 0.071845054626, -0.015319012105, -0.004039525986, -0.025081101805, 0.037292361259, -0.062127795070, -0.010611310601, 0.020351067185, -0.045073263347, 0.006209023297, 0.070133373141, 0.043971106410, -0.054732508957, -0.002820156515, -0.026946652681, -0.061754345894, -0.063312552869, 0.040474906564, 0.022415146232, -0.004860818386, 0.015775561333, -0.016816206276, 0.052838072181, 0.014085397124, 0.047952286899, 0.016134783626, -0.018678229302, 0.049333885312, -0.045807715505, -0.034984353930, -0.016818117350, -0.037724640220, -0.041618704796, -0.001480966806, 0.050236448646, 0.064382120967, 0.025726079941, -0.018502362072, 0.000926114619, 0.067284584045, -0.002182133496, 0.016585588455, -0.032352413982, 0.027677729726, -0.012587979436, -0.031574804336, 0.023373536766, 0.066043764353, 0.031489394605, -0.010268095881, 0.026136353612, 0.044533103704, -0.052304141223, 0.016213327646, -0.027854476124, 0.021740362048, 0.028428860009, 0.015114791691, 0.056743741035, -0.005106300116, -0.054082058370, 0.034976527095, 0.010044828057, 0.015067040920, -0.013788450509, 0.010470807552, -0.018342722207, -0.028108529747, -0.066015645862, 0.071005344391, -0.040413945913, 0.042320087552, 0.053631752729, -0.050717264414, -0.049632571638, -0.034753564745, -0.040391009301, 0.029173739254, 0.016975261271, 0.068767130375, 0.061116993427, -0.002832584083, -0.023935757577, -0.011319439858, -0.035692688078, 0.042627342045, -0.068507023156, 0.021892279387, -0.014704793692, -0.068901687860, -0.048757299781, -0.038885880262, 0.058037251234, 0.054253220558, -0.055327642709, -0.007101744413, -0.013936098665, -0.022265035659, 0.000476427376, -0.066636137664, -0.014212295413, 0.014139756560, 0.053287789226, -0.017499335110, -0.003939226270, 0.032803103328, -0.064159095287, -0.055573195219, -0.066214099526, -0.046650193632, 0.000054851174, -0.032902158797, -0.013220071793, 0.037914961576, -0.028205659240, -0.037204008549, 0.019739173353, -0.032433886081, -0.043939549476, -0.037815164775, 0.060738727450, 0.049766831100, -0.023875311017, -0.025068849325, -0.039789717644, -0.015417963266, -0.005342908204, -0.048770345747, -0.039977677166, 0.004293389618, 0.045719891787, -0.046283543110, -0.025341708213, 0.065299272537, 0.020555362105, 0.043453656137, -0.061507143080, -0.002717696130, 0.038151718676, 0.003761641681, -0.068061791360, 0.065349280834, 0.063083365560, 0.051044493914, 0.010625489056, -0.035238508135, 0.048336982727, 0.003274254501, 0.013958550990, 0.009895525873, 0.067414179444, -0.047488845885, 0.060317978263, -0.006995767355, -0.068182945251, -0.017336044461, -0.040249675512, -0.044081553817, -0.056258991361, 0.025645434856, 0.007509365678, -0.003737412393, -0.024868860841, -0.022568624467, 0.029375486076, -0.068700045347, 0.007439382374, 0.070474311709, -0.017805453390, 0.041873440146, -0.062050227076, -0.030280712992, 0.063248619437, -0.013489715755, 0.000126414001, -0.030033838004, -0.037713214755, -0.034540016204, 0.039254903793, -0.026167374104, -0.063142865896, 0.042402938008, 0.032632961869, -0.003652244806, -0.030247729272, -0.012819319963, -0.059143621475, -0.065647155046, 0.029846578836, -0.060024123639, -0.027518764138, -0.044129010290, 0.010478079319, -0.016397815198, -0.058808580041, 0.062316164374, 0.013320423663, -0.057172358036, -0.068011552095, -0.011668916792, 0.046320572495, 0.044136047363, -0.045925684273, -0.053416050971, -0.027773883194, -0.035624962300, -0.037022724748, -0.060725077987, 0.003872402012, -0.033390216529, 0.005564577878, -0.057230547071, -0.031116530299, 0.028619214892, -0.053453266621, 0.045870207250, -0.026143886149, -0.059540882707, 0.002809867263, -0.033289626241, 0.013353645802, -0.052266165614, 0.003673426807, -0.032556861639, 0.058761090040, -0.025434762239, 0.017622172832, 0.011585481465, -0.056415587664, -0.030920859426, 0.031069658697, -0.022525060922, 0.026800550520, -0.034889597446, -0.069578863680, 0.038915015757, 0.012713469565, -0.070961304009, 0.061354294419, 0.011711902916, -0.017640840262, 0.012670017779, 0.057366520166, -0.045396000147, -0.013769678771, 0.027263544500, -0.068505890667, 0.062803596258, -0.063701160252, 0.042442835867, 0.023120693862, -0.028825916350, 0.064738109708, -0.028930649161, -0.003079406917, 0.021243341267, 0.007970921695, -0.037117805332, 0.019237250090, 0.052971228957, -0.037668600678, -0.049960680306, 0.008132994175, -0.045714490116, -0.066268801689, -0.038138885051, 0.029585987329, 0.046316213906, 0.055612385273, 0.044833607972, -0.032579295337, -0.054853454232, -0.040539138019, -0.069580927491, -0.005017273128, 0.060494974256, -0.008966483176, -0.033393673599, -0.010569483042, 0.051001496613, -0.057299684733, -0.008908018470, 0.047923274338, -0.015936288983, -0.050552256405, 0.069994226098, 0.022909566760, 0.065779015422, 0.050147801638, -0.006730258465, 0.046377159655, 0.002746827900, 0.068986803293, 0.016032814980, -0.018887560815, -0.037671834230, -0.026193510741, 0.008942224085, -0.011004354805, -0.058737877756, -0.000847347081, 0.029699273407, -0.016790878028, -0.025978103280, -0.054753225297, 0.001114644110, 0.008662119508, -0.005773618817, -0.049360491335, -0.004378803074, 0.060840770602, -0.053848840296, 0.052506826818, -0.016614876688, 0.042808987200, -0.021263521165, 0.001818902791, 0.016278229654, -0.071956440806, 0.070793598890, -0.013481076807, 0.048821806908, -0.000327058136, -0.035506188869, 0.024016045034, -0.071119487286, -0.031072638929, -0.012489024550, -0.055488780141, -0.048167277128, 0.057887315750, 0.020705848932, -0.063396781683, -0.023712970316, 0.038053937256, -0.016882587224, -0.066599577665, -0.020931508392, 0.032501988113, 0.045982740819, -0.021379683167, -0.064617916942, 0.025407761335, 0.052996903658, 0.018080338836, -0.052197508514, 0.028947889805, 0.038804255426, -0.033469468355, -0.013107698411, -0.051910679787, -0.023188211024, 0.040243916214, 0.060360133648, -0.035514809191, 0.002715788782, 0.028427727520, 0.009778387845, -0.021913357079, -0.069061279297, -0.008420288563, 0.044381871819, 0.066925674677, 0.000189594924, 0.020626164973, 0.063428625464, 0.024650990963, -0.037139177322, 0.068345308304, -0.042792435735, -0.046143203974, 0.028119280934, 0.038344912231, 0.029291160405, 0.044957362115, 0.032702371478, -0.029758810997, -0.011988870800, -0.019019898027, 0.024345785379, -0.001671448350, -0.027704074979, 0.019867949188, -0.054054129869, 0.018657840788, 0.018802560866, 0.063871487975, 0.005868442357, -0.066249288619, 0.004986219108, 0.039771646261, -0.035366814584, 0.004667140543, 0.002195380628, -0.015501294285, 0.046106725931, -0.066311351955, 0.056758239865, -0.055165149271, 0.071315810084, 0.063113063574, 0.032149292529, 0.040511660278, 0.041830718517, 0.070032522082, 0.030305027962, 0.039284653962, 0.054892420769, -0.019402842969, 0.036020673811, -0.038828946650, 0.068708315492, 0.022216118872, 0.028836838901, 0.033008404076, 0.022539012134, 0.022985294461, -0.000364534557, -0.015010312200, -0.066211141646, 0.013138100505, -0.019417226315, -0.036332540214, 0.021772675216, -0.005087755620, -0.017997700721, -0.028684616089, -0.024792328477, 0.065499171615, 0.017015576363, -0.040717568249, -0.018781881779, -0.058430470526, -0.067204743624, -0.046309657395, -0.056662030518, -0.059919182211, 0.005407899618, 0.013990834355, -0.041429191828, 0.047002300620, -0.029972873628, 0.014566734433, 0.004582539201, 0.045890219510, 0.068488255143, -0.001492567360, 0.052751921117, 0.020204655826, 0.024161301553, 0.057598888874, 0.068875223398, 0.007021442056, 0.058782786131, 0.050291664898, -0.027757313102, 0.055908173323, 0.057166263461, 0.061822757125, 0.056929051876, -0.035671938211, 0.026877276599, -0.000591173768, -0.031396187842, 0.030172109604, -0.016518622637, -0.035912241787, 0.064461961389, -0.012659765780, -0.005940139294, -0.049782924354, -0.009009778500, 0.009618639946, 0.049885869026, 0.001807495952, 0.035953141749, -0.010649837554, 0.035258501768, 0.009453445673, -0.033478725702, 0.003596857190, 0.000153720379, 0.070521667600, -0.063671514392, 0.035509407520, 0.030115686357, 0.058358907700, 0.049224607646, 0.054584786296, -0.033092252910, 0.018224872649, 0.024423696101, 0.070895239711, -0.021017849445, 0.009039252996, -0.044955793768, -0.054871641099, 0.055565878749, -0.023754369467, -0.044120438397, -0.000432036817, -0.069423846900, 0.057399451733, -0.068564787507, 0.040338464081, -0.064465880394, 0.060583606362, -0.031537588686, 0.069816529751, -0.032909348607, -0.067661970854, 0.007346123457, -0.041239954531, -0.001167364419, -0.008292600513, -0.057406414300, -0.001604422927, 0.056058153510, 0.060824662447, 0.068875417113, 0.031810171902, 0.011260062456, -0.027609370649, 0.041412808001, -0.032868690789, -0.043975785375, 0.040883541107, 0.009307719767, -0.033693339676, 0.060444191098, -0.015324309468, 0.045262150466, 0.032058387995, 0.034859590232, 0.028175786138, -0.027037706226, 0.048393435776, -0.025751341134, 0.047861695290, 0.029356867075, 0.042368970811, 0.065637022257, -0.029292002320, -0.005418412387, 0.030278943479, 0.000365115702, -0.063289880753, 0.018368102610, -0.033063158393, -0.060863487422, 0.012286424637, -0.063103049994, 0.067437887192, -0.016966193914, 0.040017060935, -0.056227553636, -0.014675974846, 0.060075566173, -0.042589899153, 0.026474304497, -0.042827568948, 0.054729312658, 0.010304793715, -0.032086316496, 0.018295556307, -0.050941839814, -0.033843450248, -0.067334808409, -0.019315037876, 0.032608166337, -0.054078254849, -0.047389052808, 0.025347270072, -0.003087081015, -0.006366550922, 0.002649165690, 0.026139363647, 0.035659343004, 0.027698881924, 0.051139198244, -0.000586703420, -0.012043844908, -0.052864480764, -0.017710782588, -0.034276343882, -0.014127504081, 0.064994171262, -0.020615890622, 0.049316249788, -0.056097902358, 0.024379529059, 0.069016024470, 0.018040940166, -0.000451855361, -0.062584757805, -0.057391893119, -0.069006487727, 0.049467392266, 0.070811271667, 0.023549407721, 0.046156056225, 0.065879181027, 0.038993403316, 0.067401766777, -0.005270414054, -0.000848174095, -0.053793504834, -0.045313239098, -0.064200200140, -0.030336342752, 0.018826223910, 0.006215050817, 0.014878146350, -0.058815669268, -0.053746826947, -0.068957455456, -0.045465461910, -0.049025807530, 0.003088250756, -0.053573727608, -0.052777916193, 0.024030476809, 0.035705693066, -0.050977148116, -0.050022348762, -0.020284030586, 0.052288740873, 0.000301264226, 0.025158561766, 0.050210863352, -0.068112485111, 0.020121395588, 0.055885136127, 0.067734688520, 0.038868144155, 0.047152325511, 0.051469974220, 0.048211306334, 0.010728985071, -0.057886250317, -0.001731425524, -0.039775677025, 0.071612194180, -0.059539973736, -0.047305047512, -0.018070928752, -0.062457192689, -0.026875674725, -0.062518343329, -0.055890962481, -0.008835956454, -0.000391550362, -0.042376145720, -0.011534724385, 0.034482046962, 0.064880609512, 0.000361211598, 0.037633553147, 0.027618713677, 0.071833744645, 0.052728638053, -0.015052571893, -0.028877895325, -0.003979541361, 0.025178544223, 0.030845843256, -0.015831880271, 0.058821275830, 0.055166229606, 0.061032161117, -0.049884956330, -0.026117991656, 0.047614641488, 0.036077976227, -0.029276393354, -0.004566729069, 0.013544879854, -0.064127281308, -0.017232447863, -0.070566833019, 0.018279932439, 0.053449839354, 0.061953961849, -0.045591361821, 0.027677647769, 0.036308243871, 0.071517333388, -0.017150886357, 0.063595473766, -0.002710193396, 0.031515717506, 0.003016933799, -0.035348266363, -0.069912649691, 0.038135513663, 0.056355580688, -0.062545925379, -0.006903626025, -0.006548166275, 0.054729551077, -0.033745184541, 0.053786247969, 0.007864952087, 0.056883975863, -0.054590456188, -0.015344768763, 0.044788859785, -0.011062186211, 0.059002131224, 0.053545832634, -0.061734609306, 0.017729192972, -0.034589175135, -0.027374368161, -0.041581708938, 0.013447523117, 0.038675159216, -0.069731310010, -0.032369103283, -0.029711958021, -0.031465373933, -0.004113130271, 0.008223891258, 0.034469105303, -0.013570912182, 0.038269393146, 0.015821091831, 0.071005225182, -0.034362137318, 0.056749269366, -0.024407196790, 0.052813068032, 0.051873154938, 0.011153072119, 0.056350961328, 0.022193953395, 0.054153516889, -0.000661984086, 0.005739942193, -0.058733802289, -0.020248141140, -0.061530973762, -0.020519450307, -0.057056576014, -0.070719987154, 0.036190964282, 0.006776474416, -0.039566874504, -0.022800154984, 0.043145529926, -0.020225822926, -0.016656219959, -0.064077705145, -0.058196671307, 0.065397933125, 0.001503236592, -0.026612505317, -0.039120268077, -0.016440454870, 0.029287599027, 0.056721866131, 0.013554602861, 0.051528096199, -0.037764042616, -0.063442826271, -0.045345637947, -0.040604714304, 0.053200796247, -0.017050627619, -0.013148959726, 0.059610962868, -0.031542114913, 0.010275132954, 0.054247736931, 0.018756911159, 0.069352030754, -0.059541314840, -0.060997266322, 0.037889510393, 0.060877472162, 0.054106816649, -0.060589972883, 0.042298220098, 0.003266237676, -0.000517137349, 0.010664686561, -0.058097716421, -0.019912458956, -0.018065921962, 0.009008385241, -0.039042733610, 0.059682041407, 0.036351196468, 0.009669534862, -0.055182851851, 0.063479661942, -0.066272243857, -0.025636781007, -0.047181367874, 0.062551707029, -0.010789155960, 0.057839244604, -0.035530671477, 0.015831299126, 0.037290848792, -0.040583275259, -0.066555149853, -0.041385196149, -0.050115711987, -0.043720271438, 0.034839816391, 0.043882787228, -0.041197337210, -0.021950829774, -0.048725333065, 0.019120469689, 0.042203545570, -0.053911335766, -0.044692829251, 0.062408626080, 0.062553003430, -0.019717957824, -0.021751306951, 0.022585816681, -0.012871488929, 0.030215725303, 0.010391913354, 0.057012662292, 0.064526334405, -0.016044396907, -0.029511965811, 0.022104933858, 0.061983540654, -0.028505049646, 0.015356503427, 0.010876357555, -0.045234434307, 0.038173884153, -0.043410301208, -0.057805016637, -0.005591697991, -0.050233867019, 0.016810201108, 0.010834924877, 0.029967114329, 0.033080346882, -0.046599932015, 0.033991113305, 0.022080637515, -0.017008297145, -0.046262618154, -0.062471732497, -0.041178427637, 0.030086003244, 0.034070558846, -0.028167098761, -0.038034580648, -0.014842048287, -0.058765634894, 0.024234049022, 0.009280778468, -0.044214077294, 0.057141065598, 0.017784252763, -0.027433987707, -0.050782218575, 0.003025084734, -0.003176897764, 0.065587535501, -0.066930934787, -0.042176671326, -0.060991019011, 0.055089563131, 0.050050117075, 0.024048373103, 0.047080628574, -0.035607807338, -0.053384132683, 0.057685464621, -0.062192112207, 0.043645873666, -0.070760443807, -0.030393637717, 0.024962723255, 0.022474475205, 0.043590039015, 0.031679041684, -0.066686913371, 0.037893466651, 0.054809406400, -0.002676948905, 0.022286355495, 0.014236263931, 0.070386186242, -0.029572945088, 0.015816584229, 0.071973443031, 0.007166475058, 0.031310856342, -0.017998851836, 0.051501892507, 0.020476832986, -0.071692958474, -0.050670564175, -0.044734604657, -0.063418067992, -0.061131510884, 0.060717225075, 0.023209601641, 0.050807252526, -0.036169096828, -0.019696813077, 0.039546832442, -0.052302196622, 0.057044148445, -0.053737394512, -0.043680164963, -0.057540558279, -0.069251373410, -0.063389912248, -0.045571990311, 0.022679455578, -0.041453607380, -0.038075014949, -0.027852430940, 0.019405528903, -0.050257988274, -0.031485676765, -0.057535462081, 0.042155131698, -0.068839587271, -0.037686631083, -0.002490624785, -0.070978857577, -0.022556204349, -0.055271036923, -0.036544833332, 0.057416364551, 0.031447768211, -0.001020923257, -0.044473361224, -0.053728364408, 0.045117191970, -0.053084723651, -0.004155613482, 0.071150109172, 0.044776052237, -0.036130178720, -0.058232855052, -0.005143076181, 0.013265997171, -0.004279106855, 0.049772836268, 0.038822978735, -0.039559219033, -0.048422034830, -0.051335506141, 0.015933245420, -0.039349507540, -0.051657833159, -0.062961734831, 0.051909819245, 0.027132771909, 0.035216003656, -0.002366684377, -0.012884702533, 0.005826324224, 0.064093917608, -0.029074840248, -0.016499642283, 0.059718146920, 0.023370131850, 0.009911872447, -0.066070221364, -0.042407322675, 0.020703211427, -0.034799747169, -0.022410139441, 0.053179189563, -0.016534212977, 0.025360226631, -0.005024574697, -0.057557057589, -0.037714935839, 0.019928544760, -0.062225751579, -0.030344963074, 0.066166922450, -0.016757361591, 0.014695107937, 0.048282317817, -0.069940157235, -0.046815752983, 0.071833193302, 0.007292047143, 0.010856553912, -0.016011465341, 0.036222025752, -0.057957932353, 0.071599856019, -0.000550672412, 0.053940638900, -0.031415510923, 0.015452861786, -0.069117918611, -0.063045583665, -0.028032667935, 0.035158343613, 0.020361132920, -0.037576492876, -0.001494050026, -0.057024501264, 0.000551313162, 0.000761777163, -0.058931432664, -0.047591313720, 0.000998966396, 0.051313616335, 0.020864404738, 0.015162259340, 0.072098940611, 0.034784793854, 0.010423317552, -0.008286401629, -0.001199387014, -0.047019183636, -0.064021438360, 0.024669386446, -0.033730335534, 0.069252312183, 0.024799451232, 0.046682849526, 0.012328267097, -0.016378045082, -0.023661851883, -0.065400876105, 0.032042801380, 0.036191910505, -0.001562461257, 0.064145237207, 0.034187458456, 0.015117265284, 0.068216636777, 0.002398982644, -0.059471782297, 0.035903312266, -0.057205650955, 0.031988844275, -0.016268681735, 0.023170866072, -0.062039785087, -0.057417031378, 0.037635907531, 0.019596204162, -0.051520507783, -0.006313621998, -0.069262742996, 0.019176751375, -0.034566976130, -0.024641495198, 0.071698129177, -0.026777442545, 0.056904062629, -0.068718194962, -0.025357626379, 0.008187532425, 0.021421335638, -0.034483183175, 0.068875372410, -0.013352099806, -0.035604469478, -0.006746962667, 0.034608826041, -0.068642303348, -0.057425685227, 0.007020354271, -0.034664813429, 0.010121718049, -0.029560264200, 0.040704011917, -0.031154695898, 0.027644298971, 0.064787849784, 0.053584098816, 0.029701717198, 0.059563457966, -0.020793341100, -0.061097253114, 0.042968712747, -0.031156502664, 0.045617312193, -0.034577921033, -0.048586010933, -0.033016648144, -0.027221471071, 0.027366675436, -0.050470285118, 0.003687858582, 0.057909086347, 0.022341638803, 0.005509547889, -0.070326894522, 0.038893982768, 0.066262826324, -0.056726865470, -0.033631209284, 0.015790037811, 0.063086330891, 0.030223846436, 0.009461924434, 0.043690972030, 0.036850057542, -0.065027065575, -0.070376358926, -0.035866815597, -0.071308583021, 0.016396991909, 0.038199797273, 0.013211540878, -0.069454960525, 0.046730943024, 0.034514531493, 0.018837131560, -0.016754090786, 0.035444878042, 0.001037284732, 0.007824242115, 0.042842060328, -0.055280722678, 0.032731987536, -0.049884527922, 0.011551655829, -0.012042608112, -0.052870057523, 0.011501826346, -0.010405711830, -0.040946673602, -0.015027120709, 0.036975972354, -0.027864180505, -0.071701526642, 0.003934584558, 0.051190711558, -0.033767949790, -0.044022776186, -0.068079806864, 0.012884460390, 0.063719362020, 0.013743013144, 0.027807213366, 0.055251836777, 0.042381666601, 0.058520063758, -0.012160830200, 0.067997530103, 0.062966272235, -0.039822511375, 0.067323833704, 0.070710659027, 0.041392594576, -0.013041075319, -0.049360591918, 0.045752741396, 0.009579375386, 0.062039971352, -0.005124315619, -0.031764231622, -0.011404715478, 0.072055816650, 0.011444926262, 0.025577560067, 0.022250756621, 0.062772929668, 0.001942001283, -0.021024748683, 0.048550464213, 0.007507935166, -0.035823095590, -0.040825676173, 0.018203005195, -0.019368600100, -0.016639411449, 0.015898473561, 0.069015324116, 0.001161463559, 0.045010954142, -0.066828094423, 0.003543347120, 0.071712478995, 0.031019710004, -0.068795524538, 0.037029899657, 0.050144448876, -0.045728877187, -0.006447263062, 0.024152643979, 0.070577710867, -0.008636638522, -0.040907528251, 0.055134430528, 0.008618794382, -0.026345975697, -0.007902733982, 0.048284158111, 0.037762545049, 0.011120840907, -0.006860718131, -0.049059290439, -0.014154139906, 0.060104578733, 0.013207837939, 0.042802549899, -0.059171754867, 0.025800071657, -0.044184036553, 0.000621631742, -0.062421508133, -0.042260468006, 0.017224855721, 0.033635132015, 0.052068218589, 0.032477311790, 0.001138910651, 0.033867128193, 0.059647202492, 0.001600660384, 0.011280074716, -0.000879414380, -0.006331965327, -0.030333898962, -0.015843667090, -0.031086005270, -0.036444675177, -0.066541366279, 0.066404685378, 0.026031464338, 0.005265757442, 0.028780452907, 0.039316847920, 0.071642816067, -0.041664279997, -0.001318596303, -0.009403251112, -0.031697832048, 0.039648883045, -0.016106426716, 0.035219699144, 0.018780179322, -0.044751740992, 0.046618029475, -0.010405573994, -0.007352679968, -0.009090282023, 0.049045011401, -0.009299769998, 0.022913940251, -0.019911203533, 0.022253923118, -0.048493407667, 0.025092512369, -0.035751774907, -0.031444624066, 0.000697046518, -0.054365292192, -0.019391246140, 0.030202455819, 0.051677875221, 0.034938931465, -0.011704035103, 0.069612786174, -0.035630159080, 0.056328758597, -0.028406854719, 0.007519394159, 0.062100172043, -0.063312418759, 0.011581182480, 0.055311635137, -0.017082817852, -0.061589129269, 0.017675355077, 0.041242554784, 0.028936073184, 0.020216137171, 0.056525841355, -0.028554242104, 0.014704965055, 0.071635812521, 0.008924208581, 0.027466282248, -0.021046981215, 0.044894501567, -0.049599468708, 0.023423023522, 0.007217578590, 0.004806205630, 0.062110185623, -0.042951613665, 0.015318319201, 0.045945040882, 0.005668967962, -0.024223241955, -0.057121925056, -0.061997920275, -0.018014423549, 0.056211620569, -0.056319676340, 0.071777492762, 0.026088073850, 0.017446078360, 0.039877451956, 0.058425098658, 0.070370182395, 0.047355771065, 0.048698060215, -0.054949462414, -0.000112444162, 0.016420938075, 0.010225921869, -0.033690225333, 0.070047035813, 0.003319866955, 0.052727967501, -0.061385389417, 0.036857008934, -0.009747996926, 0.017582833767, 0.035904563963, 0.066664129496, -0.069015130401, -0.051308408380, -0.021112415940, 0.007021628320, -0.054413728416, -0.037992801517, -0.003125160933, -0.039757091552, 0.036484837532, -0.070057831705, 0.031656384468, 0.036927655339, -0.035319481045, 0.060261920094, -0.039645783603, 0.025493539870, -0.008827112615, 0.004770934582, 0.007630564272, 0.030622415245, -0.065915502608, -0.065814726055, 0.033825278282, -0.021349467337, -0.004433982074, -0.024007853121, 0.012203656137, 0.063422188163, 0.072095498443, -0.050848670304, -0.021604705602, -0.004859544337, -0.010626744479, -0.016154777259, 0.070679754019, -0.038349594921, 0.033277034760, -0.054215580225, -0.034912448376, 0.069099411368, 0.004594653845, -0.048508565873, 0.043221578002, 0.007975324988, 0.027741864324, 0.050408184528, -0.053254686296, -0.032800707966, -0.016339350492, -0.011649165303, -0.042803172022, 0.021829716861, 0.041190795600, 0.056362196803, -0.006958514452, -0.019569002092, 0.005161486566, 0.060969918966, -0.062719002366, 0.002831324935, -0.031517904252, -0.028831522912, -0.021652404219, 0.000799201429, -0.017030838877, 0.044795170426, 0.044497206807, 0.055260747671, -0.041181072593, 0.032865285873, -0.069511823356, -0.037988636643, 0.009510688484, 0.050928749144, 0.025136917830, -0.049786724150, 0.068063437939, -0.054659247398, 0.050405584276, 0.055653244257, -0.005805604160, 0.042743772268, 0.056769669056, 0.035957612097, -0.068204931915, 0.050330206752, 0.010582111776, -0.046450443566, -0.043921671808, 0.034841641784, 0.033015906811, -0.029321871698, -0.048865649849, 0.030418209732, -0.054400838912, 0.008638218045, 0.029831230640, 0.012064851820, -0.027173243463, 0.032826982439, 0.004291921854, -0.044690676033, -0.068682976067, -0.056050002575, -0.049415670335, -0.058731477708, -0.023837544024, 0.022786408663, 0.056042969227, 0.071048334241, 0.028762988746, -0.009592898190, -0.014538995922, 0.017299979925, -0.053515002131, 0.001848876476, 0.035002417862, 0.020899124444, 0.027978122234, 0.025230504572, -0.031180884689, 0.053665563464, -0.068792372942, 0.057567328215, -0.026344273239, 0.048954710364, -0.064583800733, -0.054160378873, 0.057631731033, 0.045100100338, 0.066950619221, 0.037806063890, -0.014265600592, 0.027857966721, 0.030473425984, 0.025672137737, 0.024006336927, -0.015422094613, 0.066865399480, -0.024157203734, 0.001804292202, 0.038072556257, 0.022785894573, 0.028043024242, 0.027971908450, 0.004766494036, -0.027414422482, -0.046073485166, -0.032287579030, -0.012066695839, 0.040390662849, -0.066945135593, 0.003465898335, 0.028343826532, 0.020350307226, 0.059241577983, -0.057687859982, 0.045262597501, 0.031790487468, 0.022701114416, 0.068159714341, -0.002718657255, -0.040102303028, 0.029507972300, -0.006725057960, -0.010448884219, 0.056478530169, 0.047667622566, -0.056358613074, -0.000094115734, -0.052855618298, 0.060687586665, 0.057222068310, -0.002165883780, 0.027672022581, 0.037847526371, 0.010933518410, 0.002169243991, -0.024383485317, 0.011774048209, -0.024621382356, 0.071031838655, -0.026800207794, -0.021745301783, 0.026575632393, -0.045229151845, -0.058635950089, -0.035714283586, -0.064425103366, -0.054032485932, -0.002784408629, -0.018440436572, -0.063315838575, 0.059277355671, -0.041227340698, -0.066625624895, -0.063036307693, -0.052093807608, -0.014629550278, 0.005154408514, -0.026831127703, -0.006340071559, -0.049779240042, 0.028282523155, -0.029011830688, -0.040988206863, -0.003310181201, -0.063568897545, -0.007695950568, 0.033291883767, 0.027645967901, 0.017115958035, 0.034250915051, -0.029696486890, 0.018614687026, 0.007822997868, -0.002980887890, 0.029692269862, 0.064717575908, 0.049613162875, -0.065904147923, -0.031245972961, -0.010628689080, 0.008384168148, 0.036439754069, -0.008950464427, -0.008979164064, 0.036422736943, 0.028702922165, -0.068263500929, 0.012301973999, -0.060801044106, 0.008304379880, 0.022580981255, -0.045393608510, -0.023637346923, 0.012144140899, 0.007446385920, 0.070588782430, -0.038082189858, -0.030899405479, 0.057011961937, -0.043444007635, 0.041580811143, -0.017730638385, 0.005629166961, -0.067339055240, 0.030216276646, 0.050131849945, 0.014050297439, -0.028394602239, 0.055776402354, -0.071024693549, 0.038498565555, 0.064927369356, 0.038296647370, 0.025460503995, 0.041490979493, 0.066856160760, -0.009130373597, 0.005313709378, -0.056616313756, -0.059526138008, 0.069046244025, -0.060266047716, -0.020889077336, -0.004195757210, -0.002685293555, -0.008259646595, -0.008278608322, 0.023651786149, -0.056900169700, -0.025402653962, -0.063627846539, -0.030168719590, -0.053975500166, -0.046072591096, -0.042622007430, 0.005953162909, -0.065561324358, -0.045045644045, -0.008385628462, 0.032193154097, 0.027779184282, 0.025120817125, -0.045554697514, 0.063522234559, -0.017928220332, -0.032320462167, -0.049430675805, 0.053835317492, -0.053997159004, 0.011862024665, -0.050847429782, 0.011458761990, 0.043837726116, 0.046381719410, 0.003469631076, -0.039713937789, 0.068275719881, 0.058278232813, -0.036401778460, 0.012476190925, 0.044980980456, 0.045882888138, 0.038380980492, 0.008616179228, 0.033611647785, 0.044791951776, 0.019967831671, -0.046057861298, 0.056219205260, -0.004825770855, -0.019483592361, -0.071893565357, 0.048880726099, -0.017363317311, 0.056445091963, -0.001412026584, 0.031594797969, -0.053819555789, -0.050768502057, 0.049449838698, 0.060892328620, 0.028970502317, 0.004576876760, -0.045797079802, 0.058343082666, 0.058288231492, -0.007145412266, -0.068040885031, -0.034581225365, -0.055388331413, 0.023542337120, -0.034720182419, -0.066712707281, -0.002923361957, 0.059730082750, -0.031720284373, -0.013830900192, -0.070008777082, 0.069075465202, 0.036431476474, -0.018332019448, -0.034588381648, -0.019467055798, 0.023608595133, -0.046406120062, -0.033805921674, -0.000379055738, -0.043888948858, -0.001447506249, 0.026425793767, -0.006239965558, 0.070028141141, 0.029957540333, -0.013512514532, -0.016639392823, 0.042839527130, -0.043257437646, -0.009924210608, 0.010879419744, 0.066743358970, 0.034219302237, -0.039821546525, 0.003284648061, 0.005603499711, 0.039315439761, 0.014302149415, 0.063126981258, -0.038274109364, -0.010643571615, -0.047074072063, 0.015235096216, 0.050667293370, 0.049682870507, 0.048563510180, 0.033867128193, 0.034511387348, 0.029744319618, 0.017115235329, -0.016760785133, -0.068423971534, 0.014875687659, 0.012328438461, -0.004516862333, -0.014119572937, -0.049242883921, -0.043351419270, -0.009057350457, 0.013197876513, 0.066250190139, 0.053321063519, 0.059321433306, -0.012200389057, -0.022369686514, 0.020874053240, -0.020807329565, -0.041915442795, -0.039614126086, -0.022567421198, -0.071458712220, 0.066373392940, -0.043091036379, 0.025341622531, 0.006234951317, -0.008299373090, 0.064508453012, -0.007839642465, 0.032446116209, -0.006044946611, 0.035141810775, 0.051417581737, -0.044055830687, 0.054991066456, 0.056797862053, -0.022272434086, 0.060679540038, -0.049976423383, -0.012793544680, -0.009755223989, 0.068499594927, -0.055017568171, -0.041313856840, 0.039048500359, -0.021873455495, -0.071631751955, 0.023819185793, 0.008690975606, -0.052441548556, -0.036489568651, 0.066908165812, -0.058244228363, -0.067420288920, -0.068582855165, 0.015206225216, 0.010206289589, 0.013059087098, -0.029685579240, 0.068840935826, -0.034045848995, -0.030864611268, -0.058484308422, -0.070663325489, -0.005411304533, -0.038459025323, 0.044054076076, 0.064740359783, -0.066404402256, -0.018782276660, -0.039186254144, 0.049298852682, -0.064074657857, -0.012460429221, 0.036070384085, -0.032124496996, -0.019298449159, 0.004501856863, 0.060915157199, -0.006625898182, 0.007830969989, -0.010965265334, -0.006678171456, -0.052569787949, 0.028793983161, -0.004873946309, -0.000993430614, -0.032914392650, 0.048256032169, 0.003968544304, -0.045128028840, -0.020404167473, -0.014579102397, -0.040932118893, 0.004570320249, -0.035738077015, 0.013694554567, -0.059628739953, 0.015037029982, 0.033713132143, -0.063334837556, -0.028761219233, -0.068967171013, 0.023685492575, 0.000554546714, 0.004537925124, -0.056978113949, 0.038972720504, -0.069364346564, -0.022430233657, 0.018137603998, 0.061949104071, 0.021571122110, -0.052960854024, -0.016233049333, -0.060131356120, -0.002303294837, -0.041190832853, 0.064198568463, -0.051687598228, 0.008616179228, -0.052614524961, -0.054442290217, 0.037794977427, -0.017213262618, 0.034655570984, 0.062017694116, 0.019347317517, -0.059661157429, -0.022326052189, 0.042983561754, 0.006507851183, -0.066847592592, 0.053198814392, 0.043030552566, -0.031611505896, 0.006667830050, 0.063017413020, -0.016496356577, 0.064544245601, -0.017458967865, 0.040388427675, -0.031332418323, 0.025126248598, 0.062664419413, -0.025400158018, 0.008858084679, -0.063014417887, -0.018846835941, 0.035259090364, 0.060056999326, -0.006935618818, -0.064593367279, 0.001469008625, -0.055680595338, -0.028220836073, -0.035159118474, 0.041612848639, -0.059518083930, 0.034494951367, -0.030845601112, 0.005463868380, 0.014542043209, 0.013560570776, -0.013673719019, -0.031129743904, 0.017872452736, 0.004332825541, -0.019604586065, 0.009499557316, -0.043200813234, -0.018409259617, 0.013565987349, 0.070417523384, 0.006095603108, -0.054379276931, -0.069764755666, 0.045943424106, 0.071776419878, 0.018583476543, 0.064966246486, 0.070777222514, 0.048487313092, 0.028291895986, -0.004306495190, 0.026548460126, 0.026162914932, -0.034229595214, -0.039611767977, -0.035096161067, 0.011097423732, 0.013814419508, -0.051257818937, 0.037468917668, -0.044676721096, -0.037421360612, 0.058595716953, -0.035061419010, 0.051213167608, -0.025385688990, -0.026672624052, 0.045461192727, 0.006103307009, -0.010543122888, 0.048756219447, -0.054988626391, 0.018619850278, 0.067295208573, 0.046886071563, 0.056523516774, 0.052493996918, -0.025059439242, -0.048397652805, 0.037336535752, -0.003042846918, -0.004765167832, 0.017662137747, 0.038757540286, 0.061157703400, 0.061512574553, -0.007064029574, 0.027750737965, -0.032436244190, -0.021722141653, -0.035539980978, 0.040688231587, -0.061414398253, 0.047569200397, 0.028033301234, 0.046965546906, -0.014939095825, 0.052363790572, -0.017326787114, 0.038335658610, -0.018706463277, 0.061151191592, -0.069474846125, -0.069738708436, 0.062959149480, 0.046361483634, 0.066889420152, -0.039501011372, 0.019957885146, 0.010477960110, 0.022342927754, 0.060449883342, 0.055215716362, 0.012163914740, 0.015554308891, 0.030919983983, -0.023840900511, -0.059014245868, 0.033365614712, 0.045828089118, -0.031048994511, 0.030599460006, 0.044296689332, -0.050092000514, 0.011272720993, -0.055526137352, -0.031628333032, 0.044399186969, 0.039882026613, 0.065815210342, 0.048777297139, -0.060710195452, 0.010359309614, 0.004362590611, -0.044359970838, -0.038607344031, -0.057017397135, 0.028626352549, 0.069109559059, 0.037974409759, 0.019729524851, 0.062430843711, 0.013157181442, -0.035247489810, 0.051323823631, 0.015224650502, -0.023834686726, -0.069165289402, 0.030717857182, 0.011356361210, -0.039881046861, 0.021085828543, -0.064094811678, -0.011156100780, -0.050818160176, 0.042906120420, 0.019071310759, -0.069447986782, 0.043454587460, -0.004371106625, 0.050022192299, 0.009213343263, -0.058441862464, 0.062462881207, 0.054134860635, -0.066549263895, -0.062289740890, -0.000567808747, -0.048831049353, -0.026831693947, 0.071443349123, 0.021523542702, 0.003289237618, 0.037894502282, -0.036612164229, -0.048905394971, -0.022784549743, 0.061127290130, -0.014131098986, -0.052285797894, 0.049918837845, 0.002518117428, 0.014795333147, -0.049177087843, 0.008473210037, 0.009495273232, -0.022158648819, -0.025289833546, -0.062407828867, 0.008958004415, 0.012964956462, 0.026933059096, 0.010669603944, -0.011835079640, -0.058356791735, 0.061625987291, 0.068070694804, 0.044802829623, 0.044845968485, -0.037872184068, -0.058263756335, -0.048805929720, 0.008520357311, -0.036867830902, -0.035789404064, -0.051457464695, 0.069357633591, 0.023521378636, -0.070947386324, -0.058984324336, 0.010259747505, -0.034206762910, 0.066741734743, 0.004694826901, 0.025455445051, 0.068823307753, 0.040554970503, -0.020421613008, -0.009287416935, -0.000122889876, 0.018565200269, -0.033653076738, 0.031644269824, -0.007756359875, -0.002073213458, 0.068096339703, 0.055099278688, -0.049753360450, 0.048488229513, -0.019439406693, 0.013873726130, 0.055014044046, -0.043501116335, -0.016332313418, 0.043525114655, -0.053773287684, 0.021734617651, -0.001000948250, -0.003061458468, -0.021538928151, 0.061648681760, 0.041296802461, 0.016957163811, 0.028072156012, 0.000648148358, -0.044233176857, -0.043164469302, -0.027210269123, 0.008038133383, -0.061976600438, 0.029795765877, -0.030148535967, 0.056281983852, -0.066058747470, -0.032899420708, -0.069176487625, 0.008868411183, 0.006104029715, 0.005012616515, -0.048651706427, 0.051157698035, 0.012782327831, -0.042086817324, -0.070259474218, -0.056920714676, -0.026028536260, 0.051722116768, 0.070698782802, -0.049725644290, -0.027963049710, 0.000453695655, 0.052644602954, -0.025158978999, 0.051882326603, -0.024491250515, -0.000846676528, 0.057325094938, 0.001130528748, 0.020560264587, -0.069859907031, -0.043707162142, -0.020220816135, -0.025315880775, 0.013348482549, -0.050644740462, 0.051249958575, 0.035683363676, -0.034690916538, -0.065100848675, 0.067481398582, 0.048894777894, 0.024514704943, -0.054660432041, -0.070802472532, -0.044196732342, 0.041551753879, -0.037988759577, -0.066286593676, -0.031254954636, -0.012679450214, 0.006390273571, -0.016498059034, -0.015695229173, 0.069078728557, -0.050639182329, 0.071008682251, -0.063674867153, -0.021758843213, -0.013393409550, -0.051172442734, 0.037064708769, 0.025525629520, 0.007354490459, 0.046232886612, 0.066191047430, 0.048091381788, -0.068592384458, -0.059863552451, 0.027604639530, 0.014004066586, -0.059724800289, 0.070580393076, 0.041776672006, 0.017097651958, -0.036056343466, -0.072022907436, 0.003172442317, 0.027131982148, -0.039402484894, 0.054905295372, 0.025803387165, -0.030673947185, -0.023348730057, -0.069265879691, -0.064848497510, 0.032839268446, 0.002084225416, -0.071745745838, 0.041428677738, -0.071785785258, 0.061063304543, -0.015949986875, -0.003136843443, -0.071374848485, 0.005942426622, 0.049694553018, -0.020119246095, -0.026509694755, -0.008344799280, -0.036532048136, 0.013220317662, -0.005994550884, -0.048709414899, -0.055200800300, 0.009107574821, 0.038747869432, -0.067145101726, -0.012483108789, 0.054698705673, 0.010185919702, -0.048342131078, -0.056785576046, 0.040362566710, -0.036874078214, 0.022773295641, 0.027599237859, 0.024702906609, -0.025164104998, -0.029452245682, 0.057825058699, -0.057433567941, -0.021878529340, -0.050090901554, -0.009598799050, 0.021487638354, 0.031315386295, 0.027982443571, 0.029534287751, 0.071285232902, 0.019313491881, 0.020133353770, 0.045146800578, -0.001165196300, 0.056291669607, -0.050822515041, 0.058671802282, -0.012897420675, 0.035617031157, 0.058650240302, -0.070325307548, 0.037525288761, 0.053887411952, 0.055558294058, -0.034088451415, -0.043532188982, -0.040080659091, -0.037037245929, 0.009782359004, 0.061183884740, -0.055240940303, -0.065675660968, 0.015353754163, 0.011968359351, -0.055251263082, 0.011620141566, -0.000378608704, 0.033616550267, 0.045011080801, 0.063044220209, -0.046020146459, 0.001847274601, 0.031211838126, 0.036703802645, 0.041672699153, -0.021786130965, 0.028485484421, -0.006416484714, -0.029544692487, -0.029796112329, -0.004551090300, 0.066364884377, 0.068046271801, -0.013463303447, -0.022642578930, 0.057121902704, -0.017521083355, -0.042898751795, -0.058778297156, 0.058217495680, -0.058681994677, 0.000679239631, -0.056560359895, -0.068785749376, -0.033004399389, 0.029650203884, -0.009640164673, 0.024370096624, -0.020998887718, -0.018743768334, -0.029079638422, -0.038661096245, 0.060902819037, -0.055079303682, -0.049222253263, -0.048869367689, 0.007945217192, 0.065234273672, 0.032950885594, 0.021545790136, 0.010668247938, 0.030486054718, -0.069972924888, 0.020501382649, 0.031582169235, 0.007063254714, -0.068524435163, -0.018007438630, 0.037158653140, -0.030374404043, 0.037999354303, -0.015504926443, -0.055850818753, 0.000344865024, -0.006256237626, -0.045028887689, -0.048957154155, -0.028637558222, -0.000430196524, 0.027702443302, 0.068767905235, 0.069334432483, 0.003695376217, 0.005317129195, 0.033940888941, 0.069984972477, -0.043928693980, 0.042069077492, 0.011259444058, 0.004868753254, -0.051227413118, -0.016372092068, -0.003895245492, 0.038382798433, -0.061359494925, 0.023324295878, -0.067769572139, 0.060701161623, -0.032849643379, 0.035009250045, -0.042842127383, 0.030747316778, -0.023334775120, 0.055524796247, -0.007840961218, -0.027503930032, 0.009082317352, 0.054287880659, 0.039324417710, 0.022115029395, -0.023621741682, 0.048422895372, -0.001775063574, -0.049304723740, -0.046746872365, -0.038514293730, -0.004551276565, 0.016816794872, -0.005809046328, 0.040023691952, 0.002453751862, -0.004970580339, 0.028965614736, 0.060812577605, 0.068323850632, -0.060572713614, 0.070191308856, -0.013213139027, 0.007874667645, 0.056113079190, 0.061608895659, -0.016065906733, -0.039140846580, -0.019291345030, -0.039332076907, -0.020495135337, 0.052456401289, -0.011559348553, -0.046798318624, -0.019678592682, -0.028149168938, 0.053861662745, 0.013448901474, -0.030606653541, 0.025762543082, 0.005711279809, -0.009139835835, 0.067176327109, 0.002836868167, -0.061487473547, 0.071523636580, 0.060316666961, 0.029607459903, 0.015901103616, 0.001391001046, 0.049282856286, 0.002207115293, 0.066739827394, -0.058077462018, 0.058434322476, 0.055854484439, -0.018732689321, -0.021320734173, 0.003734901547, -0.008164085448, -0.014034848660, 0.056619733572, 0.039266914129, 0.046716816723, 0.060137733817, 0.062756404281, -0.012662690133, 0.014463871717, 0.011460706592, 0.003087788820, 0.029204696417, -0.049974896014, 0.057670846581, 0.042706884444, 0.064820796251, -0.058385044336, 0.060065567493, 0.007954679430, 0.069446548820, -0.036891404539, -0.051033996046, 0.016319200397, -0.001206323504, 0.039674691856, 0.046509303153, -0.060675282031, -0.041567325592, 0.035715296865, 0.035168685019, 0.000320248306, 0.014671549201, -0.056646805257, 0.064714416862, 0.010769389570, -0.040954433382, -0.067726112902, 0.023175634444, 0.008775681257, 0.042278565466, -0.006445527077, 0.050660513341, 0.029932729900, -0.068149320781, 0.063066706061, -0.066695228219, 0.049474976957, -0.059014007449, -0.024609647691, 0.016361251473, 0.066106975079, -0.032188452780, 0.013387046754, -0.033863700926, 0.032900057733, -0.012931954116, 0.035123795271, 0.039352811873, -0.064531214535, 0.041237458587, -0.070048525929, -0.004294812679, 0.010518915951, -0.070825204253, 0.049363553524, -0.029478553683, -0.042962454259, -0.047547742724, 0.058476254344, -0.006360545754, -0.057134881616, 0.024267546833, 0.008711472154, -0.052590571344, -0.037067752331, 0.057270660996, 0.015819422901, 0.065773591399, -0.016193371266, -0.009550571442, 0.016451984644, -0.016130100936, -0.020316604525, 0.052600532770, 0.042367577553, -0.052992790937, -0.061934068799, 0.026607841253, 0.037117309868, -0.024689640850, -0.013440281153, -0.047470659018, -0.029966749251, 0.063024431467, 0.015859827399, -0.047341629863, 0.049093224108, 0.030615188181, -0.005990453064, 0.054935798049, -0.035809744149, 0.009732082486, -0.038357146084, -0.055729568005, -0.066863402724, -0.010076813400, -0.029516734183, -0.053163357079, -0.040241040289, 0.025505430996, -0.036918934435, 0.061449512839, -0.022513944656, 0.041410744190, -0.034127511084, -0.056721825153, -0.054492495954, -0.034509353340, 0.000308699906, -0.013025090098, 0.016001969576, -0.011679191142, 0.006606131792, 0.040684327483, -0.030498977751, -0.001724526286, 0.052188098431, 0.043015174568, -0.000624299049, 0.009412698448, 0.016573823988, -0.004611708224, 0.040187872946, 0.044560648501, -0.001785695553, 0.061648234725, 0.041374839842, 0.050036840141, -0.035309124738, 0.000759318471, 0.069816604257, 0.043127566576, 0.001624315977, 0.070544794202, 0.067763477564, 0.003975346684, -0.034553006291, 0.026837542653, -0.002842582762, 0.026430599391, -0.032689984888, -0.021174721420, -0.018106427044, 0.010771073401, 0.039954274893, 0.008524350822, -0.045910611749, 0.003573991358, 0.067130804062, 0.018476620317, -0.005588904023, 0.006123282015, -0.020238123834, 0.063371822238, 0.051699899137, 0.010801494122, -0.055535942316, -0.031800553203, 0.058498963714, -0.032680194825, -0.036360897124, -0.007498353720, -0.051644168794, -0.008701227605, 0.035744652152, 0.040678270161, -0.022847302258, -0.026483729482, -0.062400516123, -0.057631231844, -0.039475407451, -0.070048183203, -0.060102790594, 0.051429763436, -0.071789085865, 0.060817867517, 0.053661942482, 0.031423270702, 0.039758056402, -0.031697090715, 0.035654194653, -0.059796828777, -0.008517295122, -0.003151193261, 0.063478156924, -0.016565028578, -0.072072580457, -0.046269793063, 0.011853560805, 0.039077684283, 0.000895708799, -0.056316956878, -0.056705683470, 0.040926314890, 0.053808853030, -0.026818979532, 0.026542127132, 0.063435599208, -0.044810451567, 0.001226708293, -0.028101060539, 0.014938987792, -0.048972517252, 0.003136895597, 0.040166348219, -0.037315972149, -0.019655190408, 0.015298314393, 0.018297575414, -0.044253997505, -0.039162095636, 0.072121754289, 0.008127108216, 0.031128473580, -0.048880584538, 0.055541485548, 0.051890924573, -0.032163299620, -0.023245282471, -0.072160348296, 0.033104576170, 0.007339745760, 0.029208242893, -0.020023941994, 0.070077016950, 0.034757159650, 0.052004642785, -0.007661104202, 0.045354984701, -0.018574681133, -0.004398636520, -0.048495490104, 0.069436684251, -0.064317889512, -0.052668206394, -0.012266013771, 0.000468857586, 0.015082061291, 0.025526180863, 0.007631920278, -0.010691769421, -0.056128464639, 0.048184692860, 0.064251065254, -0.035147693008, 0.042102336884, 0.057904288173, -0.014204159379, -0.015138980001, 0.071368962526, -0.037757623941, 0.037607602775, 0.050386749208, 0.018061138690, 0.008961252868, -0.057229671627, 0.034346252680, 0.045770138502, 0.062145471573, -0.054854452610, -0.015709355474, -0.058605924249, -0.063022129238, -0.033418726176, 0.032799072564, -0.000205911696, 0.004769779742, -0.019416108727, 0.015539474785, 0.020755127072, 0.053629443049, 0.024630486965, 0.007387660444, -0.022627092898, 0.029400415719, 0.008587755263, 0.043832249939, 0.033342145383, 0.022188022733, 0.058637097478, 0.026143975556, 0.049250215292, -0.019315950572, -0.016890589148, -0.058629393578, 0.027896530926, 0.044959403574, -0.009981609881, -0.020987857133, -0.071511186659, 0.032279752195, 0.061299473047, 0.016462840140, -0.066330723464, 0.033470585942, 0.047359459102, 0.034211806953, 0.056576058269, -0.046656575054, -0.050731923431, 0.004833340645, 0.038334764540, -0.023458849639, 0.033646143973, -0.001230895519, 0.032899677753, -0.062354899943, 0.070709899068, 0.017359241843, -0.065547645092, 0.068108692765, -0.048559445888, 0.035882614553, 0.020381800830, 0.061149492860, -0.032808434218, -0.015667147934, 0.044822394848, -0.016220916063, -0.059937782586, -0.040021382272, -0.005041398108, 0.011013977230, -0.064615041018, -0.005473174155, 0.005561240017, -0.054070770741, 0.020855836570, -0.000561460853, 0.040540017188, -0.048519372940, 0.059608846903, 0.053849801421, 0.059991031885, -0.027852978557, -0.059243679047, -0.062771745026, -0.053256202489, 0.071122705936, 0.049307920039, -0.040191624314, -0.016296882182, 0.047699317336, -0.063304692507, 0.013012327254, 0.013773910701, -0.015604604036, 0.039628237486, 0.007517583668, 0.048337623477, 0.006256185472, -0.003490075469, 0.002885304391, 0.064368307590, -0.051338378340, 0.029668562114, -0.035532016307, -0.030557494611, 0.029711939394, -0.060946766287, 0.032057926059, 0.008090160787, 0.058256670833, -0.067640423775, 0.043753154576, -0.044598571956, -0.064328148961, -0.029419861734, 0.032325677574, 0.032689586282, 0.071815058589, 0.010286800563, 0.069678723812, 0.009093761444, 0.021781690419, -0.058075863868, 0.007145069540, -0.023116234690, -0.032351691276, 0.037603229284, -0.009075574577, 0.047460459173, -0.054513592273, 0.022007644176, 0.054010391235, -0.051790565252, 0.018871679902, -0.071080029011, 0.071852505207, 0.013119295239, 0.015793733299, 0.007843628526, 0.055950060487, -0.023461222649, 0.009135879576, 0.005627378821, -0.009205549955, 0.057435885072, 0.031244508922, -0.037084978074, -0.060344643891, 0.023481339216, 0.028586469591, 0.006475739181, -0.061673857272, 0.013348005712, 0.013849794865, 0.005501359701, -0.021475523710, 0.006583437324, -0.055397413671, 0.022776618600, 0.027703061700, -0.003700576723, 0.026378355920, -0.030263543129, 0.039808504283, 0.043676912785, 0.034149140120, -0.059207838029, -0.052789323032, 0.064705654979, -0.027323953807, -0.045140281320, 0.029968917370, 0.023576729000, -0.059525020421, 0.036108225584, 0.067195996642, -0.056965447962, 0.031310997903, 0.037436090410, 0.017289280891, 0.038607813418, -0.033904120326, -0.033368501812, 0.051700301468, 0.047505311668, -0.015268821269, -0.033384814858, -0.006128273904, 0.018119141459, -0.010348707438, -0.059283405542, 0.067888095975, -0.033391386271, -0.055071443319, 0.016514420509, 0.024103969336, 0.045118242502, -0.023178420961, 0.061223223805, -0.009738344699, -0.023166753352, -0.029068540782, 0.023019433022, -0.058507315814, -0.071236386895, -0.039725605398, -0.046860504895, -0.059753328562, 0.048548914492, -0.045723766088, -0.045797839761, 0.053125411272, -0.056216441095, 0.013996630907, -0.058780137450, -0.048414688557, -0.046984098852, 0.025190070271, 0.038020074368, 0.045871861279, 0.001036807895, 0.057665660977, 0.052969291806, -0.028161540627, -0.023377634585, -0.047359578311, 0.014491006732, 0.053757399321, 0.053413301706, 0.053543686867, -0.025411482900, -0.017267633229, 0.060698449612, -0.026078846306, -0.027564842254, 0.005592726171, -0.069345697761, -0.047157451510, -0.057809837162, -0.063101314008, -0.056316219270, -0.044874027371, -0.032028779387, 0.014155447483, 0.010649353266, -0.070948347449, -0.046575896442, -0.041183896363, 0.044990293682, 0.058930322528, 0.046083584428, -0.069671154022, 0.011074073613, 0.036117151380, -0.004613719881, -0.063518911600, -0.063186608255, 0.065578684211, -0.034725725651, 0.014463216066, 0.007494911551, -0.060268715024, 0.006590716541, -0.007379025221, 0.067402541637, -0.051854327321, 0.016224205494, 0.052738465369, 0.015108011663, 0.051363535225, 0.027434781194, -0.047178942710, -0.062743693590, 0.041649915278, -0.033567268401, 0.063488528132, 0.020505733788, -0.011188879609, 0.011839553714, -0.041468560696, -0.059281326830, -0.067969270051, -0.051975034177, -0.045291163027, -0.056514780968, 0.062500789762, 0.039381064475, 0.014529049397, 0.066197425127, -0.039706710726, -0.045407600701, 0.008001342416, 0.038852810860, -0.015994139016, -0.049490399659, 0.028521068394, 0.037560388446, -0.024164155126, -0.000796742737, 0.013475827873, 0.063463941216, -0.053288944066, -0.009516365826, 0.059662446380, 0.058645457029, -0.018137451261, -0.042082499713, -0.053032346070, -0.029024064541, -0.047190334648, -0.038648743182, 0.006891414523, -0.017494551837, -0.054561976343, 0.028595283628, 0.061864212155, -0.026881884784, -0.013682324439, 0.034142635763, 0.032429672778, 0.045584253967, 0.029619574547, -0.043819587678, 0.017120622098, 0.001346327364, 0.070328772068, 0.050123915076, 0.054764404893, -0.028860930353, 0.047624364495, 0.022860653698, 0.048055797815, -0.043813481927, 0.033434472978, 0.043212287128, 0.070294260979, -0.021056786180, -0.007278852165, 0.029567994177, 0.041957050562, 0.022694319487, -0.029025472701, 0.053977787495, 0.039726138115, -0.019377615303, 0.047025032341, -0.064823724329, -0.046956155449, 0.071934401989, -0.015729624778, -0.010961975902, 0.058844700456, 0.069375067949, 0.061723187566, 0.047124743462, -0.026498254389, 0.056875914335, -0.035342622548, 0.065305024385, 0.041898325086, -0.004270792007, -0.029229179025, -0.029023665935, 0.049973674119, -0.006123304367, -0.002114266157, 0.028530552983, 0.011128738523, -0.017435859889, 0.052014455199, -0.040157675743, -0.066835440695, 0.007385611534, 0.004005715251, -0.015956729650, 0.022066615522, 0.026859119534, 0.003015145659, 0.067203938961, -0.016295988113, 0.030823059380, -0.034353464842, 0.052157141268, 0.020278990269, -0.006850376725, -0.039213974029, 0.018323004246, -0.067206427455, 0.027012221515, -0.025840092450, 0.045995436609, -0.069621860981, 0.036113969982, -0.060391031206, -0.018823210150, -0.003988854587, 0.066110819578, -0.021738607436, -0.036134187132, 0.045909799635, 0.027288146317, -0.001941621304, -0.059518307447, -0.031224552542, -0.012009743601, 0.022709049284, 0.024701938033, -0.045927248895, 0.059763789177, -0.049258612096, -0.055353779346, -0.028089016676, -0.000354364514, 0.064319759607, -0.048965342343, 0.054539129138, -0.046255595982, 0.063680782914, 0.051524706185, -0.058083709329, 0.009625680745, 0.043225415051, -0.064443700016, 0.042199365795, 0.023830816150, 0.030143283308, 0.029607787728, -0.048924133182, -0.037231642753, 0.053277373314, -0.050244554877, 0.052921727300, 0.026027724147, 0.038806423545, 0.002449430525, 0.055222734809, -0.028325483203, -0.014933191240, 0.035705819726, 0.045832268894, -0.003851048648, 0.005130961537, -0.021508246660, 0.002576895058, 0.038488261402, 0.002813331783, 0.065889716148, 0.019162073731, 0.065280884504, 0.065409675241, -0.008794233203, 0.068822920322, -0.068665064871, -0.028860826045, -0.060332290828, -0.016687244177, 0.049080424011, 0.036583289504, 0.016569159925, 0.025766260922, -0.059898912907, -0.054010272026, -0.002908907831, -0.065082646906, 0.054199844599, -0.025804612786, 0.015903376043, 0.055556178093, -0.039573688060, -0.065079271793, 0.013878151774, 0.018144071102, 0.015073597431, -0.049880191684, 0.055925071239, 0.046395264566, 0.002737209201, -0.038966905326, -0.022504307330, 0.017172105610, 0.035917766392, -0.016673307866, 0.029492750764, 0.067335888743, 0.053468391299, -0.013281706721, -0.015486292541, -0.060979560018, 0.037162132561, 0.032716400921, -0.025033060461, 0.051378451288, 0.002833738923, -0.063769161701, 0.038359642029, -0.031453758478, 0.022226445377, 0.062003955245, 0.048361383379, 0.022496633232, -0.031715296209, 0.041079625487, 0.012188844383, 0.061308026314, -0.051978610456, -0.022516455501, 0.013159230351, 0.037581190467, 0.041160807014, 0.051034338772, 0.054207518697, -0.019057285041, -0.011764224619, 0.041188269854, 0.002188876271, -0.022069521248, 0.026322111487, 0.031778961420, 0.061255261302, 0.006836988032, -0.000475518405, -0.059983618557, 0.050865359604, -0.031674206257, 0.065397664905, 0.022828131914, -0.046341456473, 0.064230605960, 0.017973504961, 0.049224421382, 0.022169008851, 0.050705738366, -0.052351284772, 0.007799699903, 0.007317446172, -0.067388474941, 0.056552588940, 0.031221888959, -0.059715338051, -0.071741029620, 0.056042015553, -0.013281948864, 0.005562871695, -0.044768277556, -0.057905264199, -0.012912474573, -0.059794057161, 0.017964079976, -0.002563752234, -0.000313416123, 0.041497431695, -0.070652484894, -0.069048970938, -0.028704814613, -0.033081706613, -0.046255167574, -0.034676428884, -0.021681807935, 0.010271385312, -0.029843825847, -0.027555532753, 0.056458652020, 0.060342878103, 0.063388243318, 0.000438399613, 0.051467515528, -0.013889349997, -0.045612182468, 0.021498575807, 0.028185978532, -0.026824656874, -0.021405871958, -0.010692335665, 0.045390754938, -0.054399907589, -0.031961724162, -0.016675733030, 0.017032250762, 0.063678994775, 0.022013083100, -0.020214363933, 0.048784554005, 0.038324199617, 0.053948059678, -0.035744927824, 0.022663161159, 0.069386512041, -0.045219689608, -0.008424744010, -0.054152999073, -0.064379319549, -0.063385114074, 0.018212214112, 0.013747259974, 0.034625768661, -0.035707589239, -0.020201060921, -0.017230726779, -0.036123003811, 0.035647124052, -0.027820117772, -0.013978376985, 0.069285273552, -0.016423556954, 0.005014613271, 0.044146694243, 0.035503625870, 0.011032834649, 0.021107628942, -0.028729695827, 0.051558703184, -0.036181315780, -0.071909017861, -0.056953974068, -0.027015320957, 0.061304971576, -0.069276973605, -0.040906857699, -0.047981657088, 0.009000241756, -0.022187247872, 0.045712046325, 0.020940646529, -0.062811575830, 0.023029379547, 0.028251476586, -0.038486901671, -0.034595299512, 0.055072829127, -0.011696550995, 0.010674096644, -0.040625549853, 0.049990415573, -0.041016206145, -0.054984033108, -0.070992656052, -0.020033162087, -0.068688347936, 0.006701163948, -0.021939594299, 0.029129505157, -0.058485943824, 0.035608135164, -0.007628515363, -0.007639408112, 0.011875465512, -0.012056268752, -0.061709508300, -0.017051726580, 0.017775252461, -0.006640523672, -0.039826899767, 0.010644093156, -0.015508692712, -0.050938434899, -0.011817976832, 0.057443737984, -0.069709390402, 0.033953055739, 0.053604125977, 0.029181726277, -0.044298492372, 0.055345922709, 0.021445579827, 0.070121109486, 0.004351839423, 0.017230190337, 0.018037945032, 0.016523592174, -0.054478112608, -0.013716787100, -0.003852494061, -0.000434808433, -0.037729941308, -0.029307041317, 0.007892481983, 0.005209021270, -0.012399312109, -0.065121084452, -0.045085273683, -0.046758383512, 0.028429634869, 0.009141080081, 0.047361589968, -0.028155192733, -0.039044577628, -0.007477857172, 0.063026010990, -0.044108070433, 0.057484045625, 0.055155768991, -0.040651943535, 0.051105424762, -0.017727423459, 0.055990979075, -0.035958390683, 0.013047665358, 0.067669749260, 0.011027842760, 0.000682391226, 0.060008600354, -0.040446981788, 0.032282024622, 0.004368938506, -0.064191237092, -0.063564680517, -0.011541452259, 0.048818506300, -0.039707951248, -0.067946426570, 0.021390914917, -0.027423579246, 0.006997577846, -0.000591173768, 0.053443148732, 0.056987196207, 0.000119931996, -0.047715626657, -0.010647632182, 0.002211205661, -0.019868325442, 0.006104774773, -0.015008091927, 0.052381359041, 0.041519694030, -0.034212749451, -0.052831016481, -0.020569313318, 0.070486322045, 0.031626202166, 0.067792713642, -0.033540531993, -0.029948890209, -0.028544865549, -0.051427714527, -0.048876438290, -0.003580115736, 0.025002367795, -0.066083967686, 0.027864456177, -0.002414241433, 0.008762523532, -0.057668056339, 0.047524571419, -0.054922673851, 0.056885451078, 0.013680703938, 0.065415099263, -0.061114646494, -0.003220312297, 0.018254071474, -0.054408289492, -0.036966081709, -0.056589059532, -0.061244245619, -0.024374864995, 0.006806910038, -0.009892582893, -0.000105284154, -0.015953272581, -0.066826269031, 0.035807713866, 0.038019627333, -0.071279369295, 0.022459536791, 0.004451513290, 0.051077648997, -0.060282442719, -0.039449784905, -0.023842398077, -0.070605218410, -0.041937071830, -0.024372369051, 0.005244575441, -0.040415823460, -0.049518030137, 0.038525357842, 0.040823251009, -0.054468721151, 0.024451896548, -0.050969541073, 0.016877166927, -0.033232811838, 0.061098530889, 0.066168695688, 0.013395816088, -0.011843014508, 0.062404736876, 0.036602213979, 0.071393668652, -0.017914574593, -0.055916666985, 0.052415341139, -0.044644773006, -0.043985113502, -0.046633675694, 0.029723621905, -0.011000070721, -0.067787401378, -0.038403794169, -0.066748961806, -0.057252712548, -0.048583380878, -0.042717810720, -0.003766715527, 0.005416378379, -0.049186617136, -0.068621031940, 0.054002895951, -0.008340515196, 0.007965385914, 0.065627917647, 0.071451708674, 0.046920917928, 0.013219542801, -0.000796206295, -0.070635817945, 0.034808225930, -0.044400081038, -0.016981799155, 0.040892437100, -0.028886429965, -0.069544978440, -0.071726664901, 0.030766636133, 0.017453290522, -0.017594605684, 0.022873610258, 0.013683132827, 0.013654813170, -0.047226637602, -0.004008911550, -0.023239657283, 0.045347586274, 0.045172147453, 0.045809730887, 0.020203210413, 0.007689133286, -0.020578380674, -0.004531778395, -0.050551928580, 0.001051634550, -0.057459961623, 0.028318688273, 0.030553072691, -0.064355365932, -0.051799062639, -0.015321180224, 0.013027995825, -0.059121891856, -0.039455000311, -0.002860642970, -0.042586114258, -0.041358940303, -0.052158281207, 0.026200376451, 0.000902786851, 0.013643883169, 0.049718759954, 0.023102059960, 0.058674544096, -0.008050866425, -0.060208596289, -0.010740187019, 0.051753260195, 0.051863983274, -0.027991592884, -0.026415284723, -0.027959384024, 0.036142461002, -0.056693572551, 0.025544106960, 0.011670380831, 0.005877666175, 0.011548735201, 0.011241130531, -0.055003751069, 0.060940057039, 0.049522519112, 0.060629680753, 0.041071593761, -0.004924312234, 0.022195883095, 0.014204263687, -0.060311831534, -0.030513394624, 0.013306051493, -0.063087701797, -0.067688927054, -0.038453932852, -0.001038007438, -0.008156493306, -0.000082299113, -0.070331230760, -0.009568899870, -0.070522442460, -0.030017662793, 0.022481665015, -0.050356909633, -0.047206647694, 0.055327296257, -0.039688266814, -0.019802425057, -0.013074368238, 0.043529592454, 0.029831469059, -0.041664592922, 0.025265708566, 0.031384415925, 0.070853218436, -0.001967012882, -0.038808591664, -0.068217352033, 0.041850626469, 0.005803346634, -0.062570974231, -0.056128341705, 0.030336000025, -0.045468818396, 0.015157237649, -0.016462393105, 0.018980786204, 0.029409363866, 0.059534788132, -0.029361136258, 0.055477321148, 0.043071247637, 0.018783293664, -0.026793204248, -0.041676722467, -0.064422540367, 0.021568574011, -0.065273687243, 0.071425035596, 0.003716647625, -0.071662813425, 0.033198401332, -0.057495459914, 0.009703174233, -0.020543951541, 0.004334375262, -0.012972835451, -0.004669964314, -0.003099881113, -0.016024746001, -0.020620621741, 0.010381981730, 0.038453884423, -0.054749339819, -0.013618830591, 0.014934979379, 0.002164080739, -0.063634261489, 0.009623095393, 0.027856558561, 0.063366442919, 0.056635871530, 0.069799810648, -0.057615384459, 0.006149768829, -0.018904957920, -0.017197757959, -0.016836456954, 0.014016054571, 0.015945218503, -0.036782283336, -0.020560402423, 0.052984803915, 0.044458426535, -0.016698136926, -0.052127152681, -0.038832437247, 0.038235306740, 0.001499086618, 0.000151745975, 0.052277296782, -0.001723513007, 0.042338527739, 0.041450321674, -0.070080630481, -0.000507809222, -0.034145146608, -0.026915319264, -0.030161630362, -0.017417293042, -0.054524056613, 0.064820870757, -0.009453594685, -0.009815379977, -0.004498332739, -0.010119106621, -0.066110573709, 0.042095936835, 0.055706918240, 0.069824159145, 0.007994033396, -0.042707368731, -0.004735209048, 0.048131473362, 0.068031489849, -0.065066277981, -0.020045533776, 0.070819631219, 0.065990030766, -0.071965537965, 0.046934902668, 0.030431702733, 0.008848033845, 0.014201939106, 0.044831514359, 0.057010069489, 0.041348099709, 0.055916607380, -0.013261575252, -0.051671169698, 0.011955216527, 0.062093481421, -0.021695867181, 0.019142650068, -0.038500286639, 0.004964008927, -0.008656099439, -0.035696800798, -0.026553865522, 0.037088349462, 0.044902056456, 0.052693918347, -0.009898088872, -0.009060896933, -0.045948635787, 0.048654735088, 0.043371789157, -0.038895037025, -0.062892548740, -0.062426634133, 0.040596507490, 0.021582201123, 0.002031370997, 0.058805927634, -0.021653193980, -0.068818442523, 0.001088231802, 0.042692348361, 0.036290302873, -0.033154677600, 0.007447622716, 0.016217529774, 0.031367145479, 0.020783722401, -0.042799487710, 0.015478871763, 0.026630073786, -0.005888365209, -0.042521625757, -0.059502340853, 0.004155978560, -0.055999759585, -0.064679153264, -0.023543745279, -0.046008154750, 0.036797925830, -0.067685835063, 0.034725792706, 0.042463585734, -0.018904492259, -0.015096928924, 0.042059980333, 0.029730096459, 0.068270504475, -0.000800564885, 0.029269240797, -0.025234702975, -0.017116319388, 0.029214248061, -0.048141881824, -0.053019531071, -0.002477355301, 0.061656728387, -0.010106373578, -0.016501571983, -0.002219125628, -0.020899470896, 0.010080203414, -0.036688853055, -0.039944883436, 0.031860411167, 0.043002575636, 0.042552940547, 0.010394886136, -0.029994398355, 0.011325046420, -0.055442564189, -0.032786391675, -0.006986543536, 0.071663752198, 0.061126485467, 0.044010147452, 0.070450633764, -0.053475651890, -0.015678040683, 0.018328219652, -0.024371132255, 0.065940111876, 0.010722018778, 0.017257362604, 0.043068923056, -0.044539779425, 0.069714948535, -0.021753370762, -0.070717856288, 0.019466228783, -0.064756684005, 0.065631449223, 0.026077285409, 0.037756301463, -0.045820795000, 0.062564209104, -0.018810048699, 0.050700142980, -0.048241127282, -0.021387062967, 0.032107874751, 0.052125848830, 0.000213220716, -0.044764064252, -0.046509787440, -0.066897451878, 0.071074903011, 0.060483545065, 0.041210964322, -0.041147798300, -0.049739956856, -0.015163157135, 0.028372682631, -0.049074105918, 0.017038270831, -0.031119558960, -0.070656739175, 0.034738160670, -0.022359997034, -0.047897242010, -0.023772262037, 0.032543338835, -0.068556748331, 0.017174065113, 0.069902494550, -0.061949621886, 0.007283136249, 0.057483270764, -0.046724006534, 0.022365145385, 0.024376362562, -0.000360183418, 0.062880307436, -0.060972504318, -0.033043164760, -0.023744184524, -0.069143868983, -0.068622425199, 0.039942629635, -0.065061375499, 0.018712349236, -0.055338740349, -0.049267008901, -0.043306287378, 0.044099085033, -0.006882309914, -0.010067451745, 0.036164380610, -0.023390125483, 0.017342202365, 0.059589907527, 0.062813177705, -0.064580611885, 0.058766290545, -0.046751778573, -0.008915483952, 0.031989343464, 0.056859299541, 0.048514761031, 0.059615433216, 0.000390566885, -0.037005603313, -0.053401459008, 0.041768893600, -0.002690993249, -0.008189253509, 0.020522870123, -0.065193660557, -0.012404594570, -0.024919964373, 0.027884453535, -0.021581135690, -0.014202281833, 0.072085991502, 0.044097557664, 0.069705620408, -0.002327144146, -0.066441744566, 0.055737361312, -0.007946304977, 0.047477595508, -0.008948691189, 0.046224199235, -0.021742254496, -0.072128362954, -0.021895132959, -0.048114798963, -0.054420918226, 0.046214334667, 0.001148007810, -0.018431060016, -0.055684365332, 0.007921434939, -0.065853320062, -0.061422090977, 0.042870298028, -0.040574431419, 0.050863176584, 0.040238715708, 0.010092385113, 0.019856438041, 0.025852896273, 0.058067649603, -0.005971543491, 0.002937525511, 0.062635838985, 0.032790318131, 0.070920869708, 0.009955659509, 0.005128495395, -0.068748794496, -0.031125307083, 0.024040445685, 0.018306501210, -0.004969887435, 0.056854069233, 0.062701269984, 0.062915205956, -0.014815777540, 0.020264297724, -0.016547769308, 0.051932550967, 0.015775993466, -0.015411030501, -0.065828591585, -0.028430115432, -0.019150253385, 0.008484639227, -0.049571558833, 0.066002711654, -0.019167594612, -0.035826347768, 0.018500089645, -0.038761600852, 0.029663696885, -0.026089087129, 0.005617335439, 0.071900367737, 0.027398198843, -0.051698148251, 0.033298783004, -0.027088120580, 0.060418844223, -0.042997896671, -0.061517860740, 0.021381989121, -0.058692265302, 0.045077495277, 0.048065602779, 0.062177747488, -0.069809339941, -0.059494927526, -0.054690867662, -0.042380359024, 0.021411307156, -0.051457844675, 0.036270871758, -0.053394317627, 0.037539862096, -0.010609384626, 0.058823287487, -0.007133901119, 0.060508936644, 0.030760906637, -0.000799514353, 0.010518968105, 0.042325109243, -0.030511450022, -0.066080927849, -0.019995737821, 0.012331999838, -0.002408616245, -0.070301100612, 0.070794925094, 0.063620492816, -0.066167421639, -0.045238167048, 0.062608465552, 0.017416551709, -0.020755074918, 0.035687543452, 0.016282960773, 0.017703622580, -0.016629654914, -0.053855381906, -0.007168002427, 0.057404816151, 0.029943019152, -0.062493823469, 0.001411698759, -0.011739585549, 0.037701345980, -0.036734983325, 0.051034480333, -0.012840691954, -0.007196478546, -0.018682584167, 0.039648175240, 0.040023945272, 0.046598643064, -0.022788040340, -0.013826046139, 0.052788272500, -0.065107718110, 0.059470728040, -0.010068293661, 0.015921890736, -0.058174505830, -0.017127797008, 0.067382127047, 0.009195275605, 0.048921726644, 0.027039684355, -0.036405928433, 0.046028763056, 0.032036989927, -0.042912572622, 0.033448353410, 0.028994314373, 0.058923512697, 0.045155696571, -0.072011932731, -0.055191971362, 0.040267311037, 0.029153265059, 0.022020913661, -0.011066094041, -0.047253035009, -0.044061712921, 0.043878279626, 0.048658259213, -0.041430294514, -0.013166029006, 0.052863642573, -0.057021472603, -0.053977340460, 0.011424951255, 0.044209159911, 0.008493788540, 0.011313259602, -0.048600584269, -0.056827507913, -0.041796341538, -0.001643791795, -0.049879226834, 0.043752893806, -0.041054848582, -0.051466822624, -0.046072937548, -0.049010835588, -0.008125111461, 0.014604412019, -0.009978685528, 0.005589082837, -0.010217025876, 0.003235466778, 0.003676593304, 0.056046485901, -0.064301252365, -0.051918819547, -0.059149973094, -0.033134374768, 0.008363232017, -0.012099817395, -0.058673873544, -0.024253010750, -0.007314965129, -0.057783424854, 0.056399881840, 0.019153110683, 0.008126176894, 0.039463691413, 0.060801893473, 0.042160995305, 0.056872025132, 0.072136223316, -0.010953631252, 0.044844247401, -0.068669572473, -0.058730959892, 0.026755176485, -0.054617017508, 0.002231337130, 0.006267406046, 0.045548446476, -0.007352322340, 0.062319740653, 0.002176038921, -0.054797153920, -0.012659437954, 0.066318556666, -0.012123905122, 0.055361941457, 0.009681016207, 0.025443486869, -0.057227037847, 0.033152662218, 0.069381177425, -0.053529523313, 0.034574173391, 0.031827725470, -0.056543789804, 0.018811956048, -0.019852649420, -0.013321280479, -0.037420894951, -0.015245351940, -0.003717593849, -0.007818989456, 0.047963827848, -0.049072176218, -0.011029925197, -0.018175959587, -0.040324009955, 0.030390337110, 0.022500060499, 0.017883211374, 0.066830351949, 0.052045561373, 0.069362118840, -0.015167303383, -0.060238137841, 0.002902977169, 0.058879107237, 0.047082245350, 0.014988616109, -0.010043069720, -0.034133359790, 0.062565818429, 0.069876432419, 0.007675044239, 0.003085359931, -0.023261476308, -0.024319168180, -0.018646206707, -0.053755752742, 0.032486282289, 0.059100300074, 0.062532141805, -0.037833075970, 0.066572815180, -0.068584866822, -0.022762231529, -0.052158072591, -0.018724478781, 0.030898764729, 0.052567943931, -0.046427283436, -0.018158648163, 0.003520995378, 0.006439588964, -0.041683759540, -0.060372345150, 0.037533715367, 0.068640768528, -0.042626738548, -0.056496419013, 0.000484414399, -0.009332068264, 0.015472471714, 0.051395848393, 0.068843707442, 0.069022685289, 0.036641016603, 0.048046864569, -0.067021235824, -0.020585127175, -0.033080004156, 0.070467948914, -0.001327797771, 0.049684330821, -0.055293988436, -0.042427159846, -0.000656992197, -0.044709451497, 0.040435247123, 0.048542581499, -0.057037923485, 0.054736867547, -0.057408049703, 0.037932045758, 0.052286297083, 0.001363515854, -0.011101003736, 0.029050886631, -0.045826211572, -0.061982709914, 0.068959459662, 0.009177900851, 0.004878349602, 0.037675067782, 0.070393398404, -0.014906469733, -0.010090954602, -0.051631882787, -0.023780729622, -0.062772981822, 0.044141590595, 0.030517250299, -0.008750803769, -0.042805939913, -0.012988597155, -0.062089078128, 0.002969354391, -0.024932213128, -0.070713847876, -0.069585725665, -0.037328016013, 0.025221921504, -0.044727843255, -0.009364433587, 0.014327026904, -0.066656909883, -0.057065881789, 0.051241368055, 0.071430474520, 0.031585939229, 0.003970131278, 0.017689444125, 0.021376341581, -0.039783831686, -0.016142077744, 0.062017858028, -0.000567227602, 0.002227604389, -0.060742266476, -0.071227818727, 0.068854913116, -0.055377405137, 0.019487872720, -0.029482442886, 0.026769600809, -0.060054220259, 0.035705611110, 0.061205103993, -0.052583519369, 0.071197167039, -0.027156502008, 0.011757187545, 0.047241576016, -0.064420528710, -0.033140808344, -0.018356967717, -0.012439679354, -0.047989036888, 0.069243967533, -0.016972802579, -0.038437861949, -0.051172405481, -0.008721239865, -0.003736935556, -0.044958237559, 0.013290069997, -0.040510181338, 0.058886766434, -0.021370150149, 0.032953895628, 0.057074353099, 0.071494728327, -0.001360781491, 0.035022690892, 0.012832686305, -0.035728547722, 0.070047974586, -0.055732369423, -0.066170997918, -0.022268701345, 0.047191262245, 0.006596684456, -0.017437666655, 0.001777879894, 0.008915431798, 0.029661953449, -0.017260096967, -0.031348489225, -0.041362188756, -0.048322081566, 0.062545821071, 0.063616424799, 0.007929094136, 0.001105643809, 0.040835797787, -0.030167736113, 0.070826381445, -0.049847461283, 0.021694421768, -0.060339931399, 0.009570494294, 0.022520877421, 0.024176850915, 0.029251426458, -0.011762537062, -0.025958128273, -0.004644379020, -0.052578855306, 0.062806114554, 0.068046823144, -0.013749670237, 0.056980282068, 0.033953517675, -0.054946213961, -0.056273907423, 0.046060271561, 0.068322196603, 0.025393038988, -0.046127151698, 0.056565105915, -0.027682222426, -0.066159605980, -0.048861399293, 0.021487981081, 0.013980597258, -0.043755907565, 0.004078805447, 0.056274473667, 0.017317257822, -0.043417938054, -0.063792854548, 0.061924830079, 0.071326449513, 0.048881359398, -0.020093902946, -0.044447429478, 0.024552501738, -0.047696873546, -0.035556860268, -0.063029304147, 0.012258164585, -0.002471916378, -0.011115305126, 0.003241941333, -0.062779366970, 0.055402249098, -0.070659659803, 0.043635204434, 0.047479592264, 0.021042354405, 0.007162809372, -0.016846127808, 0.066364943981, -0.015177488327, -0.052617330104, -0.066618278623, -0.008079871535, -0.040168065578, 0.035899765790, -0.045438878238, 0.033061765134, 0.070560157299, -0.001588322222, 0.015635766089, 0.032437175512, -0.022054515779, 0.024153836071, -0.058747582138, -0.028116684407, -0.038934782147, -0.016325738281, -0.034360501915, 0.010406970978, -0.043260741979, -0.019736971706, -0.046871621162, 0.008776679635, 0.033618889749, 0.049781806767, 0.004440672696, 0.020948648453, 0.033987589180, 0.011311993003, 0.016992725432, 0.012189961970, -0.049803793430, -0.032034713775, -0.021701425314, -0.035537503660, 0.034285433590, -0.017637830228, -0.040365889668, 0.001956745982, 0.017925776541, 0.002547420561, 0.005775026977, 0.012513563037, 0.003552943468, -0.037108875811, -0.064166590571, -0.059970613569, 0.063035950065, -0.007682681084, -0.032973375171, 0.036099016666, 0.045556619763, 0.029937721789, 0.020367071033, -0.061436388642, 0.029769822955, -0.047582142055, 0.070078104734, -0.046349853277, -0.002672582865, -0.071901209652, 0.061205044389, -0.016951140016, 0.027464546263, -0.007962770760, 0.000784166157, -0.065905675292, -0.038919158280, 0.005478128791, 0.028577782214, -0.028594128788, 0.013063050807, 0.003893338144, -0.033461827785, -0.025954343379, 0.067694053054, 0.023928016424, -0.055005021393, -0.065030753613, -0.018846888095, 0.052530504763, -0.030845325440, 0.020368292928, 0.035868726671, 0.051585637033, -0.021613016725, 0.046951748431, 0.006259076297, -0.014720968902, 0.005924463272, 0.016980960965, -0.010040972382, 0.048998191953, 0.026852585375, 0.006157338619, 0.042343862355, 0.003260061145, 0.071332812309, 0.042898148298, -0.012227229774, 0.042064242065, -0.012651436031, -0.012167681009, -0.067913301289, 0.056906312704, -0.019213810563, -0.062095891684, -0.051698371768, -0.067145273089, 0.045960113406, -0.008044466376, 0.062539324164, 0.047692932189, -0.012898106128, -0.023648757488, -0.042792759836, 0.049916446209, -0.011187501252, 0.028798349202, -0.068504892290, 0.037470161915, 0.055370271206, -0.048042654991, -0.038709532470, -0.063155494630, -0.044831372797, 0.062712639570, -0.018320422620, -0.034567065537, -0.069671943784, 0.010515473783, -0.055396109819, 0.023726135492, 0.005577720702, 0.019146002829, 0.003934428096, -0.048516049981, -0.014977052808, -0.016209613532, 0.005971990526, -0.056097283959, -0.047890685499, 0.002144880593, -0.004770793021, 0.041202448308, -0.024981856346, 0.006808668375, -0.050261862576, 0.016769990325, 0.063851609826, -0.063216306269, 0.028676837683, -0.046919628978, -0.067570380867, -0.029355112463, 0.048362195492, -0.026560369879, 0.046125583351, -0.018711112440, 0.057387188077, -0.002188459039, 0.025795906782, -0.019777752459, 0.051446639001, 0.050072781742, -0.047915048897, -0.065541110933, -0.070628412068, 0.029522895813, -0.036029055715, -0.059314619750, -0.019240964204, 0.063786894083, -0.011318132281, -0.069345735013, 0.048329032958, -0.067346401513, -0.042456619442, -0.034481909126, 0.001773290336, 0.060953885317, 0.049532830715, -0.007353521883, -0.042198851705, -0.003982156515, 0.028883002698, 0.043863497674, 0.056777954102, -0.002992309630, -0.000547230244, -0.036238733679, 0.016357883811, 0.009321056306, 0.042831286788, 0.011742800474, -0.014101728797, -0.050067879260, 0.014579035342, -0.010963782668, 0.025291137397, 0.027937479317, 0.065534323454, -0.049408201128, -0.026246987283, -0.061209421605, -0.050289854407, 0.015845388174, -0.057617641985, -0.010758683085, 0.066942140460, 0.047714352608, -0.067540183663, 0.042071267962, 0.022758066654, 0.032291039824, 0.064054772258, -0.021671555936, -0.061716698110, 0.048921622336, -0.067671343684, 0.020176835358, 0.070143997669, -0.007007829845, -0.070577137172, -0.027473010123, 0.033626668155, 0.059810444713, -0.042517699301, 0.056114941835, -0.000063404441, -0.052494354546, 0.067622497678, 0.040852017701, -0.043930880725, 0.060250610113, 0.008058421314, -0.056975789368, 0.002796173096, -0.024362664670, 0.069831594825, -0.029714502394, 0.069233268499, 0.060976654291, -0.057307511568, 0.034251891077, -0.033496826887, 0.035731576383, 0.026879131794, -0.045361123979, 0.028251431882, -0.063870683312, -0.011597082019, 0.063451498747, 0.058129221201, 0.040803551674, -0.009741891176, -0.033864028752, 0.020884066820, 0.061258763075, 0.040698349476, 0.033253923059, -0.008306652308, 0.061573460698, -0.049424670637, -0.036446981132, -0.028904858977, -0.013329386711, 0.017868138850, 0.052457258105, -0.040722712874, 0.053969055414, -0.069012343884, 0.012713022530, -0.015961222351, -0.027204040438, -0.048777967691, 0.044123679399, 0.070073589683, 0.059057027102, -0.026885844767, 0.064335256815, 0.067621439695, -0.007740683854, -0.001372948289, 0.034637004137, -0.050590675324, -0.043030124158, -0.048959493637, -0.022037241608, 0.056862071157, 0.007911458611, 0.019014857709, -0.058105681092, 0.016891792417, -0.046974256635, 0.012028858066, 0.025265865028, 0.062206238508, -0.045028679073, 0.046108342707, -0.048995986581, 0.000395715237, -0.047856807709, 0.022053793073, -0.014202091843, -0.046026941389, 0.067221567035, 0.018167667091, -0.001937784255, -0.046332046390, -0.061430796981, -0.032191619277, 0.008598320186, 0.071181192994, 0.044703081250, -0.064891859889, 0.004764683545, 0.011952362955, 0.004863210022, -0.058540951461, 0.054015845060, 0.040085785091, -0.049024999142, 0.049152821302, 0.027036383748, -0.026036366820, -0.033026628196, -0.021330609918, 0.005721107125, -0.027411740273, -0.008176162839, -0.035982511938, -0.067698359489, 0.054125383496, 0.047091536224, 0.021792411804, -0.058911904693, 0.052718415856, -0.058428183198, 0.000760056078, -0.015956867486, -0.004618033767, 0.035008043051, -0.023840952665, -0.034631535411, 0.003734834492, 0.048553697765, 0.014398969710, 0.039715088904, -0.070932142437, 0.058403238654, -0.055807031691, 0.022545531392, -0.030611969531, 0.051225453615, 0.043090499938, -0.055773444474, 0.025521777570, -0.059982553124, -0.061971612275, 0.002139903605, -0.014139514416, -0.005141109228, 0.066905587912, 0.045619219542, 0.009648837149, -0.036570418626, -0.003840066493, 0.013690941036, 0.057571798563, -0.049915101379, -0.047893591225, 0.044154733419, -0.053457155824, 0.058842703700, 0.022192373872, 0.033565036952, -0.040673453361, 0.041922844946, 0.046831704676, -0.063681647182, 0.060682728887, 0.039082311094, 0.050201863050, -0.038533855230, 0.043081812561, 0.011649616063, 0.054665729403, 0.050836190581, 0.042871862650, 0.049742296338, -0.011701025069, -0.045116864145, -0.057944510132, 0.012137703598, 0.026478618383, 0.034775294363, -0.029557891190, 0.062160879374, -0.030849952251, -0.006628461182, 0.014984138310, 0.022236749530, -0.023664809763, 0.028879217803, -0.035017218441, 0.069771602750, 0.036537244916, 0.021861791611, 0.013071909547, -0.070102691650, 0.040119633079, 0.052075088024, 0.006546393037, 0.001067280769, -0.051210105419, 0.006747104228, -0.015638291836, -0.009619124234, -0.033539120108, 0.015360012650, 0.020974680781, -0.031078934669, 0.026496432722, -0.020668335259, -0.010306414217, -0.045139491558, 0.023186452687, -0.046359352767, -0.026033699512, -0.000354573131, 0.019147910178, -0.057227157056, 0.059702008963, -0.020339902490, 0.008802659810, 0.011561155319, 0.022818878293, 0.064520224929, 0.060263231397, 0.053805813193, 0.032999545336, -0.011722292751, 0.015186071396, 0.043715782464, -0.008355110884, 0.017261780798, 0.052484802902, -0.020624496043, -0.005009345710, 0.066443681717, -0.067348450422, -0.046618461609, -0.031243152916, -0.030469741672, 0.037062555552, 0.051767595112, -0.029646676034, 0.032577730715, 0.014410585165, 0.058855593204, -0.057471439242, -0.052992410958, 0.027834706008, 0.035519279540, -0.063729189336, -0.007462233305, -0.066067725420, -0.002400167286, 0.062387064099, -0.067089043558, -0.041531309485, 0.011489354074, -0.000160932541, 0.038728944957, 0.048164166510, -0.007419355214, -0.025381233543, 0.063015371561, 0.030465595424, 0.051054663956, 0.043229341507, -0.042170047760, 0.017488703132, 0.056396812201, -0.064256258309, 0.069882065058, 0.061290383339, -0.034269031137, -0.034898199141, 0.028243079782, -0.007544428110, 0.000722654164, -0.038491114974, -0.050466548651, 0.056076809764, -0.042697660625, 0.056498199701, -0.051197700202, -0.067525677383, -0.034227013588, 0.023071117699, 0.018751338124, 0.053290009499, 0.034894384444, -0.016759134829, -0.060913197696, -0.050079490989, 0.028715431690, -0.044601548463, -0.011244900525, -0.002903126180, 0.031919881701, 0.019402205944, -0.044919539243, 0.009520821273, 0.037512689829, -0.032509438694, -0.020582906902, -0.020996049047, -0.014747932553, -0.053590811789, 0.024076625705, 0.019844561815, -0.027281399816, 0.026213794947, 0.021511241794, -0.055550329387, 0.009373843670, -0.035040911287, -0.057653963566, -0.036167290062, -0.061582677066, -0.052128840238, 0.063901081681, 0.005972161889, 0.009446315467, -0.003724455833, 0.041852258146, -0.065560624003, 0.058640345931, -0.070040971041, -0.062455918640, -0.055087063462, -0.011482298374, -0.015621569008, 0.062590852380, -0.024554997683, 0.013771809638, 0.031971812248, -0.005016654730, 0.057494908571, 0.072124108672, 0.033960260451, -0.011764343828, 0.032688863575, 0.037071518600, 0.012491747737, 0.066558912396, -0.037452332675, 0.049252949655, 0.014082558453, 0.004713758826, -0.048879861832, 0.054607525468, -0.026923663914, -0.010406054556, -0.035005155951, 0.012466244400, 0.055185571313, 0.062040194869, 0.000216111541, 0.055591300130, -0.029989477247, 0.018429785967, -0.009820401669, 0.059876218438, 0.058305963874, 0.007863208652, -0.029868707061, -0.068887367845, 0.027663692832, -0.053823202848, -0.041787236929, 0.026309393346, 0.022844992578, 0.042001783848, 0.016394875944, 0.011268697679, -0.004869081080, -0.061777316034, -0.018604896963, -0.031690999866, -0.024204365909, 0.036947965622, 0.024243943393, -0.022138208151, -0.026674274355, -0.040547933429, 0.009803146124, 0.057429820299, 0.002610571682, -0.046199314296, 0.016227006912, 0.040712475777, 0.000243142247, -0.001624539495, 0.037147037685, 0.033691190183, 0.035250708461, -0.006533659995, 0.050568133593, 0.068169414997, 0.004107899964, 0.048962228000, -0.058172684163, -0.060120824724, -0.001490831375, -0.055461768061, 0.056580618024, 0.068406552076, -0.023473318666, -0.020441487432, 0.014344610274, -0.009729139507, 0.046055793762, 0.053515836596, -0.014781106263, -0.003063663840, -0.008934758604, -0.038208037615, 0.008854933083, -0.056239545345, 0.066878780723, -0.051361400634, 0.013011410832, -0.009998798370, -0.045113660395, 0.061184763908, -0.011135675013, 0.028009198606, -0.071795627475, -0.037018302828, 0.009080857038, -0.035824369639, 0.069736629725, 0.012523666024, -0.048933718354, -0.024170298129, -0.065435856581, -0.017321575433, 0.039295241237, -0.006165198982, 0.040940873325, -0.039449546486, -0.030089464039, 0.023979358375, -0.018035192043, -0.001638427377, 0.031852237880, -0.031709376723, -0.042677618563, -0.025026042014, -0.017748706043, -0.006078995764, 0.055773511529, -0.060334321111, 0.020737096667, -0.045763891190, -0.040808126330, -0.036248039454, 0.068438261747, 0.000237807631, -0.061628222466, -0.038308661431, 0.065702185035, 0.038569644094, -0.019891157746, 0.006525658071, 0.001903645694, 0.008901566267, -0.051891580224, 0.058817014098, 0.021024443209, 0.064351201057, -0.052676469088, 0.016729228199, -0.032097622752, 0.026648156345, -0.013431161642, 0.006482057273, -0.070677027106, -0.061040487140, 0.035244151950, 0.028166152537, 0.012521050870, -0.009896419942, 0.046452902257, 0.013238675892, -0.007477685809, -0.016872558743, 0.017218574882, 0.016697548330, -0.029164966196, -0.030717771500, 0.070315837860, 0.014399275184, -0.033178769052, 0.017724476755, -0.072146259248, 0.007523939013, 0.067905575037, -0.053438831121, 0.038988262415, 0.055697724223, -0.055279463530, 0.062346845865, 0.005679622293, -0.057996336371, 0.038559272885, 0.060905024409, 0.007879629731, -0.019347969443, 0.007225453854, 0.054361984134, 0.030808776617, -0.032049547881, -0.007571026683, 0.059807881713, -0.009427011013, 0.027072273195, -0.005811318755, 0.064121529460, -0.025931421667, 0.030951559544, 0.063097521663, -0.014168556780, -0.031416248530, 0.034534148872, 0.068745866418, 0.049471572042, 0.016657136381, -0.051844984293, 0.065308094025, 0.065167039633, 0.025933384895, 0.003719054163, 0.017797969282, -0.045311827213, -0.066366240382, -0.039508752525, -0.064094930887, 0.017297379673, -0.040445640683, -0.000705480576, -0.009421028197, -0.057495921850, -0.055357307196, 0.054689422250, -0.003896176815, 0.054487526417, -0.017543915659, -0.060087941587, -0.054025121033, 0.007161103189, -0.014414247125, -0.051583036780, -0.054787758738, 0.044941253960, 0.000416979194, 0.022199064493, -0.057494804263, 0.069431483746, -0.002309232950, 0.019524663687, 0.017628468573, -0.014351170510, -0.032660856843, 0.055507048965, 0.024024873972, -0.030917298049, -0.065357431769, -0.006534807384, -0.017660729587, -0.014206841588, -0.009688824415, 0.042155779898, -0.050550863147, -0.045590158552, -0.037550650537, -0.024044297636, 0.014494910836, -0.068242147565, -0.055092174560, -0.037742104381, 0.010291218758, 0.062306538224, -0.052669361234, -0.017372298986, 0.051818385720, 0.010844700038, -0.064436480403, -0.027785737067, 0.008463352919, 0.002252243459, 0.033778704703, -0.047889702022, 0.032407149673, 0.063998773694, -0.059054151177, 0.006227508187, -0.070773206651, -0.030652973801, -0.044785294682, -0.019503671676, 0.053741201758, 0.042399324477, -0.027512688190, 0.014650419354, -0.043822996318, -0.011318750679, -0.000337436795, 0.036602474749, -0.023179143667, -0.053970765322, 0.038513123989, -0.012350946665, 0.061949253082, 0.010840743780, -0.066637106240, -0.022631000727, -0.026051092893, 0.001067295671, -0.026684943587, 0.041327051818, -0.057604290545, -0.065634727478, 0.052719689906, 0.014407128096, -0.011074267328, 0.037326723337, 0.052215285599, 0.064099907875, -0.055161464959, 0.069315403700, 0.024489961565, -0.046785846353, -0.062627293169, -0.006446316838, -0.053005781025, -0.022237438709, -0.028708841652, -0.060109503567, 0.030985094607, -0.008035995066, 0.009850926697, -0.004403166473, -0.067625388503, 0.049489401281, -0.024563618004, -0.025792602450, 0.063633263111, -0.038691725582, -0.052159346640, -0.052623558789, -0.068839363754, -0.056620564312, -0.030610714108, -0.003558158875, 0.011140353978, -0.036667842418, 0.003416329622, -0.055169016123, -0.037739060819, 0.010549560189, -0.067606717348, 0.000801011920, -0.050764959306, -0.014300823212, -0.041755940765, -0.009781688452, 0.016031011939, 0.048528350890, 0.012603498995, 0.030196972191, 0.023942053318, -0.048626516014, 0.035096950829, 0.050038486719, -0.003441296518, -0.022973801941, 0.055188149214, -0.009911596775, -0.043785654008, 0.004019171000, 0.049865409732, 0.058200776577, -0.014008108526, -0.023200891912, 0.068633154035, 0.049187429249, -0.012701887637, -0.063987083733, -0.071607902646, 0.038809224963, -0.009869612753, -0.037959542125, 0.052366599441, -0.007644742727, 0.017405211926, -0.004014179111, 0.060875937343, -0.058707371354, -0.003344267607, 0.013331830502, 0.042571470141, -0.052267350256, 0.021181657910, 0.041215024889, 0.028295576572, 0.037323661149, -0.032468728721, 0.032792396843, -0.049671307206, -0.037991341203, -0.067599505186, -0.061683457345, -0.029235426337, -0.070622362196, 0.009017057717, -0.061291664839, -0.003089472651, 0.040156438947, 0.002483308315, -0.015971787274, -0.006338641047, -0.056777574122, 0.014203868806, -0.041571058333, -0.054893940687, 0.027572549880, -0.033997979015, 0.019674234092, 0.020116649568, 0.042615935206, -0.010394494981, -0.008317716420, 0.043971396983, -0.055302537978, 0.025567166507, -0.062018688768, 0.037690609694, 0.047821804881, -0.067570842803, -0.065432712436, -0.002579115331, -0.021044690162, -0.007258974016, -0.047362998128, 0.029327467084, 0.056287556887, -0.002829454839, 0.048772752285, -0.029931716621, 0.026069037616, -0.034153785557, -0.055604375899, 0.004158228636, 0.051243156195, -0.020439766347, 0.012482330203, 0.051095835865, 0.033178471029, 0.061158090830, -0.008192613721, 0.068740338087, 0.049243040383, -0.032902758569, 0.019009798765, -0.053815528750, 0.060582816601, 0.005729876459, -0.046734414995, -0.046976163983, -0.068788640201, 0.028635732830, -0.040509648621, -0.014478549361, -0.028510142118, -0.060155510902, -0.051648024470, 0.028163932264, -0.041313581169, -0.013168763369, -0.068777732551, -0.027546484023, 0.047526739538, 0.016224600375, 0.031909674406, -0.027522392571, 0.059826642275, -0.039242107421, 0.026711747050, -0.068872094154, 0.025351978838, -0.024810977280, 0.052839860320, 0.035510420799, -0.034612659365, -0.046122543514, -0.006323650479, -0.010894306004, -0.019952174276, -0.017638638616, -0.044050581753, -0.054771445692, -0.055486459285, -0.006357721984, 0.045651845634, 0.047756649554, 0.010097891092, -0.031368296593, -0.053455296904, 0.035853840411, 0.051480196416, 0.058477342129, -0.013150200248, 0.046388790011, -0.020391657948, 0.057837754488, -0.041212715209, -0.001168034971, -0.020858723670, 0.047868452966, 0.028457060456, -0.063067160547, -0.007094621658, -0.001485049725, -0.006483584642, 0.025733910501, -0.016871180385, 0.044891357422, -0.043565124273, 0.062674686313, 0.035555794835, 0.016737401485, -0.059636875987, 0.030431851745, 0.019117556512, -0.027430150658, 0.016711354256, 0.023550935090, 0.065426051617, 0.061875507236, -0.002331428230, -0.020667355508, 0.003476791084, -0.066381402314, 0.035742968321, -0.070316962898, 0.025202423334, 0.022778764367, -0.060383856297, -0.067515768111, 0.063794165850, -0.006787575781, -0.017616543919, -0.052412144840, 0.026796318591, -0.036485556513, 0.016929283738, 0.048312485218, 0.007947295904, 0.041715554893, 0.069185793400, -0.016424212605, -0.060145121068, 0.019728355110, -0.008020736277, -0.009860750288, 0.060806721449, 0.012235559523, 0.024944327772, -0.068118259311, -0.055597387254, -0.015933811665, 0.050769276917, 0.017448008060, -0.039297543466, 0.014240309596, -0.054148335010, -0.021559368819, -0.062273137271, -0.023848228157, -0.058927319944, 0.062383979559, 0.006016038358, -0.048126343638, -0.047504797578, 0.051389396191, -0.060934670269, -0.063449829817, 0.053011000156, 0.033692672849, 0.071566283703, -0.033358231187, -0.026953119785, -0.005771256983, -0.060894113034, 0.029131174088, 0.030002571642, -0.053823962808, 0.001993030310, 0.044599160552, -0.019885171205, -0.005145445466, 0.007987663150, 0.063319504261, -0.045503556728, 0.021022528410, -0.023189604282, -0.045008771122, -0.067752607167, -0.039945434779, -0.010634403676, -0.061752334237, 0.005898177624, -0.046209950000, -0.065235003829, 0.062488496304, -0.007737539709, -0.000098556280, -0.020893998444, 0.050932615995, -0.065838105977, -0.049148969352, 0.062908157706, -0.023511622101, -0.040255423635, 0.009476065636, 0.004762567580, 0.059025600553, 0.058535277843, 0.067879706621, -0.061865102500, 0.060584723949, -0.008765839040, 0.033231951296, 0.059579402208, 0.065855249763, 0.029943123460, 0.065505623817, 0.060224726796, -0.005140252411, 0.006415948272, 0.059296712279, -0.018314056098, 0.061253175139, -0.054001238197, -0.070162825286, 0.062681511045, 0.059235602617, 0.002507828176, 0.013080514967, 0.043898649514, 0.006377011538, -0.018747225404, -0.054459549487, -0.050503749400, -0.038815524429, 0.033043801785, 0.012806482613, 0.002807699144, -0.070288710296, 0.000990986824, -0.024883814156, 0.025073975325, -0.015509229153, 0.069596499205, 0.018148735166, 0.059772104025, -0.017042540014, 0.055382698774, -0.048280842602, 0.024844288826, 0.007666081190, 0.062162861228, 0.025484159589, -0.069475948811, -0.006971664727, -0.054418511689, 0.070517823100, 0.070427194238, 0.025926172733, 0.015626899898, -0.030142720789, 0.005220018327, 0.002603515983, -0.069547168911, 0.064924791455, 0.025835253298, 0.017499193549, -0.034755989909, 0.036820583045, 0.026872873306, -0.009931091219, -0.051992803812, 0.058376401663, 0.046083018184, -0.037225347012, 0.071430370212, 0.018540903926, 0.012604773045, -0.026892587543, 0.041509956121, -0.056676141918, -0.038078162819, -0.049514140934, -0.008156046271, 0.048651672900, 0.016256280243, 0.026390939951, 0.012258291245, -0.060397073627, 0.010210558772, 0.065280646086, 0.002629630268, -0.051868677139, -0.060178123415, 0.017576381564, -0.024737764150, -0.012970253825, -0.050491034985, -0.018108390272, 0.041987948120, 0.011779002845, 0.040255546570, -0.059106506407, -0.019623529166, -0.049077857286, 0.045221097767, -0.027971290052, -0.030582133681, 0.049309164286, -0.030323971063, -0.011826220900, 0.023164913058, -0.039067376405, -0.006980493665, -0.020253457129, -0.003275632858, 0.016361318529, -0.022100389004, -0.009937182069, -0.030852377415, 0.046986386180, 0.046498052776, 0.029027163982, -0.061154376715, 0.029089502990, 0.013678245246, 0.019622221589, -0.042229406536, -0.001856088638, -0.039471622556, 0.068840920925, -0.027289025486, -0.031732331961, 0.008503749967, -0.030818756670, -0.018704570830, 0.055673316121, -0.022836063057, -0.044906169176, 0.020073771477, -0.012072630227, -0.020025040954, -0.044889841229, -0.070292115211, 0.068478778005, -0.052154220641, 0.052137389779, -0.000145323575, 0.070949286222, 0.054283425212, -0.055095858872, 0.028182014823, -0.055330157280, -0.065905094147, 0.007031336427, -0.032833553851, 0.060316756368, -0.048212118447, -0.069338798523, -0.059757839888, 0.015019826591, 0.000611931086, 0.040125809610, -0.003608591855, -0.012367241085, 0.068288177252, 0.035960160196, 0.037297442555, 0.007366448641, -0.009525261819, -0.052983999252, 0.049115471542, 0.023556992412, -0.022040285170, 0.012275390327, -0.045943662524, 0.070686370134, -0.028063569218, 0.066709712148, -0.065631546080, -0.029195729643, -0.013935256749, 0.021287575364, 0.056679427624, -0.003177709877, 0.000629067421, 0.018156804144, -0.068931937218, 0.050142243505, -0.042365439236, -0.039444539696, 0.049276039004, 0.005347996950, -0.046408940107, -0.011351272464, 0.063592135906, 0.019935943186, 0.035046175122, -0.048239387572, 0.003134123981, -0.015244748443, -0.035670854151, 0.012501277030, 0.038249142468, -0.059220395982, 0.048222735524, -0.048724506050, 0.032251931727, -0.040061250329, 0.035558447242, -0.051287207752, -0.065153054893, -0.052425406873, -0.015196949244, 0.071997717023, 0.041470505297, 0.029309123755, -0.043358989060, 0.053614884615, -0.038402434438, 0.063900604844, -0.044351026416, 0.046207763255, 0.033953532577, 0.033896185458, -0.051429450512, 0.009299740195, 0.012384392321, 0.018873989582, 0.048909507692, -0.005890861154, -0.042073123157, 0.035659566522, 0.038220047951, 0.012866519392, 0.019966371357, -0.071137636900, -0.037814889103, -0.069215171039, 0.028070762753, 0.058690100908, -0.056045718491, 0.070075690746, -0.034890025854, 0.045289598405, -0.054331086576, -0.016788005829, 0.044723197818, -0.059709023684, -0.012130651623, 0.035818085074, 0.052523314953, -0.061672873795, -0.017511464655, 0.018826186657, 0.040915891528, -0.009063422680, 0.037449456751, -0.049435593188, -0.036752514541, 0.017098926008, 0.029127717018, 0.046642310917, -0.057622011751, 0.042131453753, 0.017602451146, 0.064224287868, -0.056046061218, -0.016354508698, -0.052934393287, 0.045504227281, 0.029207378626, -0.051016412675, -0.017550714314, 0.047382131219, -0.063746951520, -0.008399255574, 0.010656528175, -0.017110262066, 0.021790504456, -0.048693552613, -0.011468119919, -0.065446197987, -0.030206177384, 0.043547138572, -0.044552542269, 0.034234255552, 0.066238477826, -0.050307959318, -0.020085144788, -0.038805168122, 0.028598636389, -0.038100961596, 0.059304341674, 0.067280590534, -0.062791563570, -0.037726413459, -0.027564376593, 0.017190948129, 0.039438381791, 0.065669849515, 0.048549465835, 0.064844951034, 0.027946494520, 0.034921564162, 0.001225613058, 0.004794731736, 0.039694584906, 0.053718641400, -0.070316411555, -0.009903784841, 0.032021000981, 0.060970366001, -0.041895724833, 0.071169093251, 0.028331406415, -0.020710181445, -0.030373472720, 0.062333106995, 0.039666689932, -0.071079500020, -0.062829896808, 0.006184749305, 0.069995924830, 0.027105703950, -0.039295617491, -0.017842169851, 0.039886519313, 0.023728080094, -0.010542176664, 0.015293285251, -0.029881026596, -0.047484256327, 0.037785314023, -0.041649948806, -0.021451517940, 0.071430802345, -0.039117824286, 0.065419092774, -0.052716266364, -0.002342477441, 0.070529073477, -0.066246017814, -0.061839517206, -0.061763275415, 0.057260692120, -0.049713477492, -0.005516916513, 0.065593823791, 0.016301065683, 0.041572004557, -0.031619474292, 0.001398414373, -0.059785611928, 0.032951988280, -0.026943538338, -0.025814093649, 0.033819563687, 0.040107876062, 0.012427739799, 0.050389721990, -0.005576327443, 0.004849925637, 0.023753613234, -0.030080106109, 0.001823775470, -0.015346661210, 0.016698896885, -0.023172345012, -0.015072029084, 0.029193803668, 0.060229793191, -0.056157507002, -0.036512639374, -0.040398839861, 0.039419710636, -0.055301181972, -0.065896853805, -0.030039120466, 0.041122347116, 0.071826562285, 0.021193802357, 0.013493053615, -0.027484022081, 0.052438847721, 0.051887191832, 0.023697949946, -0.051931172609, 0.021629624069, 0.014213345945, 0.001884341240, -0.029788542539, 0.059834644198, 0.008468203247, 0.036875091493, 0.044997140765, -0.067955471575, 0.044990979135, -0.043055020273, 0.009601689875, -0.010177761316, -0.056471884251, 0.034455828369, 0.030940838158, 0.063052132726, -0.023844890296, -0.063147567213, -0.010673183948, -0.007612206042, 0.028316847980, 0.024070069194, -0.049416150898, -0.058730203658, 0.050143204629, -0.021311081946, -0.067264929414, -0.043752312660, 0.000993207097, 0.054476782680, -0.025400847197, -0.012352012098, -0.050189096481, 0.038043357432, -0.028058201075, -0.008826531470, -0.017637055367, -0.012384220958, 0.057760000229, 0.018174581230, -0.054417047650, -0.007595121861, -0.068876169622, 0.050722271204, -0.063275165856, 0.052799336612, 0.044021449983, -0.023307777941, -0.061710350215, 0.045233674347, 0.019875019789, 0.049630492926, 0.003600485623, -0.054230928421, 0.018847107887, 0.024659305811, -0.072122029960, -0.045619323850, -0.019565545022, 0.038944266737, -0.040992029011, 0.030154764652, -0.043893747032, -0.001519650221, -0.071673169732, 0.001715943217, 0.005157060921, -0.051382858306, 0.051900081336, -0.050270602107, 0.058819904923, 0.031750589609, 0.040640316904, 0.058218166232, 0.042893640697, 0.007381469011, 0.037018097937, -0.021243598312, -0.039885677397, 0.038307882845, -0.030752167106, 0.052824668586, -0.013998162001, -0.021920014173, 0.067491278052, -0.046744827181, -0.005932807922, 0.041241884232, 0.006401136518, -0.021872214973, 0.050562664866, 0.034820258617, -0.049589782953, 0.011758446693, -0.028411362320, -0.040952317417, 0.016285873950, -0.060664217919, 0.028666242957, 0.000005818903, -0.048790529370, 0.030690141022, 0.010110609233, 0.031496949494, -0.039319880307, -0.048407461494, -0.045229442418, 0.040292814374, -0.065944716334, 0.033047139645, -0.049054250121, -0.045213751495, -0.054098695517, -0.036550372839, 0.057519644499, -0.024019535631, -0.027899265289, 0.049971625209, 0.069660007954, 0.049377657473, 0.035592876375, -0.050524979830, 0.022784322500, 0.039399713278, 0.015649445355, 0.029730588198, -0.033284295350, 0.018545381725, -0.059962369502, 0.008464783430, -0.020703315735, 0.054242804646, 0.009529255331, 0.037870794535, -0.061258852482, -0.068761505187, -0.022064100951, -0.000940516591, -0.054764032364, 0.037734895945, -0.021174583584, -0.031958300620, 0.032205060124, -0.046090967953, -0.058377508074, 0.000262297690, -0.053996108472, -0.035671919584, 0.004829518497, -0.043428245932, 0.004483312368, 0.037382952869, 0.040869534016, 0.037375733256, 0.048509858549, 0.031766176224, -0.070883497596, -0.068972609937, 0.065792307258, 0.003568343818, -0.003534294665, 0.017091751099, -0.001848705113, 0.019379563630, 0.050857923925, -0.015425674617, 0.009337164462, -0.064122222364, -0.005651608109, 0.036255784333, 0.011101782322, 0.016834825277, -0.051108948886, 0.020513445139, 0.016720674932, -0.015555512160, 0.060985714197, 0.008479975164, -0.030122537166, 0.008375689387, 0.006739310920, 0.066237077117, 0.062816098332, 0.059097751975, 0.018738657236, 0.070064291358, -0.055460475385, 0.001295179129, 0.043315477669, 0.002840586007, 0.033907368779, 0.011704586446, -0.053641814739, 0.065374657512, -0.048042085022, -0.008174009621, -0.041712459177, 0.053017064929, -0.043765850365, -0.009096167982, -0.043570473790, 0.024863615632, 0.030563950539, 0.058866232634, 0.003877632320, 0.018300496042, -0.027400780469, 0.004089489579, -0.007750064135, -0.058333255351, 0.071135595441, -0.037783883512, -0.002276681364, 0.045763567090, -0.018128674477, 0.054158970714, 0.002770967782, 0.054122149944, 0.064656525850, -0.052831515670, 0.026065133512, -0.054603114724, 0.047047264874, 0.018062755466, -0.070292375982, 0.023738794029, -0.027025371790, 0.017065785825, -0.029277291149, -0.057328023016, -0.070414334536, 0.013788878918, 0.044405758381, 0.002084314823, 0.039045833051, -0.054637100548, -0.041148759425, -0.050346635282, 0.068445920944, -0.064721897244, -0.052068687975, 0.010581076145, -0.069684579968, 0.045213043690, -0.000236533582, -0.008866339922, -0.037401728332, -0.032163728029, -0.036047209054, -0.005549572408, -0.002837523818, 0.055396005511, -0.064907431602, -0.025633875281, -0.061870694160, 0.010774873197, -0.045676484704, -0.030017334968, -0.054168142378, -0.040402676910, -0.063059039414, 0.068884491920, 0.000660829246, 0.000429369509, -0.011902667582, -0.000314772129, -0.061251800507, -0.024277459830, -0.046482704580, 0.065068677068, 0.066873058677, 0.037853084505, -0.037522912025, -0.049805894494, 0.018397800624, 0.021435461938, -0.060388159007, 0.055196568370, -0.028221525252, -0.019496668130, 0.066344365478, 0.018824070692, -0.007586874068, -0.061842612922, 0.012795664370, 0.026800274849, 0.002821296453, 0.002215594053, 0.042741678655, -0.000626504421, 0.058206126094, 0.026663362980, 0.015199854970, 0.018389537930, 0.072134181857, 0.044792473316, 0.048762187362, 0.030025474727, 0.066093116999, -0.065731704235, -0.021681498736, 0.049776159227, 0.002622954547, -0.024859551340, -0.031918693334, 0.069042190909, -0.027564153075, -0.053188357502, -0.007894627750, -0.025798849761, 0.008545957506, 0.062472894788, 0.035488739610, -0.038862224668, -0.041199158877, -0.028206486255, 0.013681635261, -0.070591248572, 0.010130561888, -0.003182925284, -0.025789435953, -0.053932894021, 0.042127512395, 0.058354631066, 0.017430059612, 0.039373010397, 0.040834657848, 0.045640259981, 0.058078929782, 0.041173346341, -0.070921629667, -0.071547783911, 0.023494794965, 0.014981389046, -0.043508373201, -0.040905892849, 0.018050245941, 0.051835194230, -0.044187664986, 0.048991344869, -0.052064366639, -0.018171586096, -0.017997477204, -0.017772916704, 0.030365854502, 0.014132007957, -0.068579912186, 0.018894582987, 0.006327643991, 0.021347418427, -0.012002307922, -0.042847871780, -0.009830053896, -0.008853264153, -0.050228327513, 0.022414229810, -0.011282600462, -0.069957502186, -0.026914872229, -0.049862138927, 0.012910120189, 0.046709485352, 0.064461231232, 0.062498465180, 0.057649448514, -0.002762533724, -0.060604736209, 0.036832042038, -0.051734160632, 0.023435413837, 0.055518567562, 0.045031808317, -0.069637656212, 0.003502011299, 0.013652421534, -0.025376569480, -0.005549296737, 0.045007824898, 0.033151462674, -0.003177918494, -0.043495006859, -0.003554426134, 0.050923347473, -0.062331192195, 0.035259865224, 0.042448274791, -0.039534442127, -0.000129908323, 0.041910365224, -0.027362838387, -0.021847214550, 0.028939582407, 0.003893904388, 0.061984419823, -0.040235225111, -0.071959607303, 0.020642891526, 0.048456273973, 0.016347415745, 0.069984197617, -0.035178560764, -0.033163573593, 0.034744597971, 0.001031421125, 0.067735359073, -0.047160394490, 0.022249534726, 0.004506178200, 0.008177913725, -0.007448934019, -0.017699547112, 0.027449645102, 0.018959470093, 0.062224999070, 0.003224700689, 0.070775270462, -0.005068480968, -0.043961625546, 0.041979774833, -0.017712522298, 0.035058274865, 0.037430875003, 0.069465532899, -0.009893290699, 0.023408643901, 0.043427847326, 0.066169813275, -0.033959660679, -0.066945336759, -0.000582642853, -0.049722664058, -0.045965671539, 0.028111234307, 0.002827867866, -0.060005232692, -0.033129263669, -0.065562978387, 0.067813336849, -0.002816699445, -0.026171263307, -0.034818071872, 0.053683653474, 0.008921951056, 0.057504266500, 0.014821298420, -0.035908885300, 0.035985969007, 0.017881058156, 0.036453053355, -0.038969334215, -0.018279869109, 0.055878400803, 0.021493092179, -0.042785607278, -0.025402396917, 0.000833772123, -0.045780804008, -0.012726303190, 0.053793624043, -0.024097498506, 0.003024466336, -0.058891858906, -0.040315680206, -0.058063630015, 0.009480401874, 0.022403582931, -0.028259620070, 0.068649470806, 0.047005638480, 0.055901899934, -0.049865908921, -0.013754140586, 0.051104679704, -0.050175383687, 0.050186790526, -0.039162456989, 0.038885965943, 0.018131099641, -0.056925307959, 0.026590138674, 0.028128385544, 0.005077481270, -0.050711534917, -0.050985440612, -0.005459047854, 0.047977477312, 0.010774306953, -0.056708075106, 0.059814125299, -0.058824907988, 0.065077006817, 0.038778685033, -0.009530492127, 0.029139652848, 0.009809494019, -0.031502712518, -0.020111657679, 0.060742512345, 0.000439070165, -0.065850138664, 0.052263304591, -0.025291983038, 0.054271087050, 0.045297667384, -0.066497579217, 0.054268285632, 0.027084544301, -0.034654542804, 0.057686790824, -0.071883417666, 0.028783641756, 0.003986410797, -0.030579417944, -0.015118282288, -0.009214982390, -0.054012525827, -0.037970848382, -0.014810595661, -0.045664280653, 0.021180674434, -0.068889163435, 0.012049317360, 0.053939044476, 0.018579639494, 0.067096576095, 0.057269543409, 0.018697828054, -0.066719725728, 0.067657232285, -0.005173616111, 0.054780170321, -0.052390448749, 0.001341871917, 0.030279643834, -0.025132566690, -0.047407753766, -0.016533177346, -0.025119196624, -0.009511977434, -0.037716656923, 0.041422963142, 0.014437854290, -0.025957148522, 0.042594507337, -0.050898738205, 0.039223834872, 0.012286871672, -0.029898114502, 0.030637107790, 0.066247403622, -0.043105989695, -0.039770513773, -0.054845143110, 0.035706780851, 0.050140433013, -0.057290822268, -0.063976690173, 0.071848899126, 0.070911303163, 0.003714084625, -0.057963728905, 0.044692091644, 0.000054374337, -0.033521775156, 0.061602190137, -0.038647074252, 0.010260730982, 0.021206997335, -0.063708357513, 0.047594904900, -0.036000836641, -0.012441623956, 0.057990327477, -0.044960558414, -0.065177850425, -0.027374591678, -0.002245672047, 0.038679577410, 0.003265254200, 0.010919995606, 0.018857017159, 0.013860784471, 0.050336055458, -0.020130466670, 0.050410285592, 0.009455062449, -0.013187121600, 0.040014311671, -0.026419635862, 0.034122899175, -0.041800815612, -0.064563132823, -0.000210054219, 0.054275393486, -0.046753995121, -0.054498501122, 0.025283537805, 0.053289562464, -0.027187678963, 0.049491569400, -0.013221863657, -0.064604446292, -0.039146818221, 0.055635169148, -0.026506409049, -0.071561761200, 0.067142710090, 0.018075935543, -0.044409148395, -0.032818533480, -0.061154823750, 0.041868798435, -0.001749627292, -0.017240155488, 0.068293347955, -0.071374721825, 0.023061484098, 0.016218610108, -0.026818223298, 0.050482325256, -0.015842325985, 0.008649006486, 0.049084328115, -0.063353233039, 0.009221084416, -0.013807088137, 0.042930431664, -0.048558071256, -0.066541761160, -0.051332496107, 0.064889937639, -0.060381259769, 0.025892190635, 0.004642471671, 0.032930098474, -0.019299276173, -0.036255836487, 0.054399669170, -0.006865657866, -0.045515414327, -0.034324970096, -0.012767735869, 0.054504126310, -0.060242783278, 0.045275181532, -0.064054325223, 0.063052326441, -0.068319752812, 0.040085598826, -0.016481939703, -0.059632539749, -0.045867938548, 0.032994262874, -0.052340582013, -0.052027907223, 0.046600431204, -0.027612674981, 0.053837880492, -0.003146618605, -0.033220939338, 0.021874330938, 0.029545500875, 0.058232292533, 0.033510468900, -0.059216767550, -0.016938887537, -0.038681074977, 0.006332069635, -0.040146507323, -0.014827579260, 0.011236295104, 0.005948863924, 0.042581573129, 0.021176546812, 0.048055537045, -0.007412336767, 0.010932520032, -0.033830907196, -0.007029473782, 0.064599961042, 0.052249200642, 0.016438335180, -0.003027133644, 0.006184279919, -0.034319344908, 0.033676750958, 0.015606597066, 0.004355825484, -0.017430026084, -0.040612250566, 0.039041340351, -0.047478832304, 0.014953911304, 0.060445547104, 0.002178467810, 0.008383668959, 0.011183850467, 0.055980369449, -0.003987662494, -0.060531951487, -0.010138548911, 0.062467277050, 0.051747165620, 0.068271368742, -0.061342958361, 0.006707973778, 0.055520236492, -0.055637169629, 0.046661652625, 0.066723868251, 0.045976735651, -0.066325992346, -0.024695470929, 0.018088839948, 0.033973291516, 0.063306897879, 0.029209926724, 0.001617811620, 0.025016404688, -0.032886326313, 0.046661771834, -0.018803335726, 0.003682836890, 0.012028053403, 0.005716182292, -0.036678064615, -0.015328507870, -0.016431126744, 0.038028538227, -0.047840632498, -0.030737631023, -0.011095069349, -0.042634479702, -0.012908399105, -0.070863522589, 0.058325767517, 0.039459317923, 0.059516832232, -0.010377183557, -0.025819737464, 0.064913362265, -0.010624956340, 0.031372666359, 0.044623814523, 0.048728823662, 0.036462709308, -0.014425639063, -0.013545203954, -0.031106036156, -0.038874097168, 0.001620896161, 0.064688101411, -0.054665938020, 0.014844872057, 0.009343698621, 0.023515321314, -0.062890291214, -0.066466949880, 0.010651797056, -0.003790460527, -0.049705475569, 0.038243569434, 0.047638215125, 0.023546122015, -0.014943826944, -0.040523566306, -0.064106926322, -0.043044354767, 0.047685772181, 0.053341642022, 0.032354839146, 0.069549620152, -0.005436286330, 0.025533869863, 0.034139521420, 0.054315805435, -0.021915953606, 0.028635181487, 0.017454050481, -0.026362132281, -0.032869946212, -0.033943522722, 0.021115206182, -0.045219566673, 0.029872111976, 0.000017672777, 0.068486720324, 0.010772846639, 0.005958825350, -0.036239352077, 0.006802693009, -0.063384391367, 0.044328674674, 0.064490035176, -0.044001355767, -0.037194889039, -0.007237948477, 0.013614803553, -0.035310000181, -0.058694675565, 0.033193476498, -0.003347814083, -0.040611766279, -0.000518858433, -0.043816007674, 0.048848994076, -0.000701524317, -0.046834558249, -0.009946458042, 0.016804486513, 0.054956689477, -0.065501675010, -0.049893476069, -0.012717716396, 0.039228975773, 0.008286818862, 0.013321056962, 0.014468222857, 0.060290783644, 0.003883995116, 0.057566583157, 0.023071087897, -0.067421145737, -0.063004337251, 0.014254041016, -0.022943552583, -0.021638706326, 0.028154470026, 0.010120019317, 0.031474977732, -0.002866961062, -0.050234019756, 0.003574043512, 0.021266877651, 0.037551991642, 0.000953987241, -0.035719290376, -0.034256350249, 0.031927138567, 0.048651702702, -0.065475292504, 0.041629835963, -0.048652276397, -0.009450308979, 0.043557122350, -0.018737435341, -0.048611357808, 0.071968391538, 0.049037367105, -0.041938811541, 0.039071552455, -0.070936992764, -0.071167476475, 0.038935571909, 0.066399902105, 0.067557647824, 0.004793614149, 0.064459487796, -0.017936188728, -0.028628177941, 0.028434827924, -0.043054316193, 0.020623773336, -0.033889923245, 0.026999920607, 0.046090431511, -0.038766916841, -0.000592894852, 0.027484454215, 0.017195053399, 0.028639860451, 0.016431160271, 0.022857025266, 0.046763233840, 0.005208700895, -0.016502190381, 0.019435018301, -0.012036085129, 0.029993660748, -0.048910610378, -0.050929747522, 0.001980096102, -0.014994602650, 0.050140060484, -0.029593475163, -0.038034804165, 0.065131410956, -0.052390344441, -0.011688999832, 0.009572438896, -0.046110272408, 0.000705309212, 0.060495063663, 0.064091041684, -0.051068291068, -0.016220245510, 0.024431817234, -0.040822323412, -0.008249476552, 0.023187123239, -0.025294978172, 0.035940222442, -0.059783406556, -0.062206357718, -0.057821758091, 0.007894732058, 0.058294355869, 0.070522189140, 0.026553660631, 0.004152879119, -0.028698898852, 0.028056241572, 0.058403566480, -0.063253298402, -0.067470565438, -0.047348752618, 0.043855048716, 0.050150416791, -0.001758128405, 0.019931763411, -0.057328641415, 0.044562473893, 0.029259771109, 0.028454430401, -0.041646663100, -0.039806269109, -0.051758922637, 0.052603252232, -0.061387814581, 0.021639101207, -0.032370068133, 0.002861768007, -0.019007179886, -0.064477734268, -0.030930373818, 0.046753600240, 0.005790717900, -0.068872883916, -0.045560479164, -0.057361401618, 0.024362817407, 0.042967647314, 0.054764121771, 0.057733893394, -0.002659350634, 0.064277023077, 0.037774175406, -0.031328428537, 0.054232567549, -0.002410203218, -0.023708306253, 0.039897255599, -0.039156313986, 0.043635480106, 0.066461265087, -0.009426236153, 0.012236177921, 0.027396634221, 0.061289414763, 0.042284950614, 0.004633709788, 0.050143241882, 0.027341522276, -0.062213342637, -0.047237634659, 0.009867735207, -0.032338354737, -0.068523406982, 0.033646777272, -0.058059740812, -0.000262983143, 0.001525759697, -0.026811994612, -0.058196205646, 0.037118732929, 0.058032765985, -0.016729123890, -0.033106621355, 0.031923376024, -0.063876532018, -0.068887509406, 0.027150154114, -0.060824498534, 0.026959352195, -0.028330404311, -0.032069299370, 0.045323565602, 0.070298001170, 0.000455573201, -0.058618158102, -0.049305222929, -0.043086715043, -0.052599262446, 0.035774558783, -0.054504148662, -0.044627085328, 0.031264662743, -0.027501780540, -0.020627506077, -0.046000376344, 0.037711411715, -0.003181666136, 0.053450614214, 0.015908636153, -0.036441698670, 0.018095262349, 0.024298414588, 0.056501120329, 0.039252720773, 0.002136066556, 0.032622240484, 0.031019628048, -0.028483249247, 0.016790188849, -0.063864707947, 0.051854915917, 0.036319725215, 0.029107235372, 0.047817729414, 0.068143233657, 0.044010564685, 0.054512605071, 0.027595520020, 0.046234332025, -0.060872331262, -0.018504239619, -0.066485822201, -0.016956456006, 0.061865225434, 0.051515571773, -0.021756656468, 0.059742853045, -0.044765092432, 0.044080026448, 0.011093832552, 0.012709803879, 0.033385999501, -0.025844238698, -0.026900209486, 0.056774482131, -0.053547162563, 0.014192871749, 0.002371862531, -0.045957893133, -0.047681335360, -0.018384069204, -0.039276655763, 0.012990921736, -0.011932726949, 0.014811940491, -0.065474882722, 0.023897230625, 0.010114990175, -0.012355178595, 0.055896878242, 0.042119666934, -0.025735117495, -0.002582192421, -0.017480459064, 0.024527505040, 0.058116987348, 0.037655420601, 0.043189801276, -0.058528460562, -0.036609958857, -0.068233422935, -0.044544339180, 0.004154101014, 0.045913793147, 0.003413744271, -0.022198740393, 0.052003987134, 0.058089867234, 0.004229381680, -0.033792279661, 0.068351805210, 0.047198422253, 0.015372931957, -0.058157663792, 0.069277167320, -0.022938374430, 0.050385951996, 0.025208361447, -0.055347792804, 0.034777514637, -0.004616677761, 0.008316084743, -0.030128095299, -0.070231311023, -0.008914038539, -0.069163858891, -0.016658615321, 0.045813016593, 0.026803389192, -0.068445302546, -0.067204691470, -0.023057028651, -0.018903631717, 0.048304721713, 0.068694487214, 0.028261765838, -0.044736668468, -0.046577356756, 0.063819199800, 0.013560585678, 0.071207880974, 0.066571176052, 0.057688817382, 0.036403514445, -0.005463354290, -0.024410396814, -0.020275633782, 0.026550680399, -0.015628397465, 0.060894876719, -0.007947489619, -0.019585505128, -0.004840359092, -0.008889347315, -0.015018846840, 0.025648668408, -0.069644004107, -0.001176141202, 0.025976471603, 0.067002460361, -0.063065007329, -0.027980152518, 0.005280256271, -0.053538143635, -0.026871096343, 0.040408082306, -0.049548968673, -0.029956616461, 0.070843741298, -0.042382456362, 0.013343274593, -0.056107968092, 0.005482487381, -0.025494776666, 0.030376881361, -0.053123265505, 0.035140827298, -0.027231656015, 0.057711020112, 0.007858633995, -0.033489618450, 0.068890273571, 0.060862988234, -0.009962148964, 0.009100347757, 0.057153552771, -0.053054288030, 0.060018137097, -0.071808964014, 0.005896523595, -0.071817442775, 0.053594589233, -0.037653286010, -0.046708829701, -0.067289620638, 0.011332705617, -0.034681331366, 0.009221754968, 0.012535862625, -0.005973935127, 0.033157020807, -0.056923434138, -0.050367854536, -0.033656898886, 0.062346711755, -0.062945440412, 0.033445499837, -0.021706175059, 0.061467513442, -0.023608580232, -0.025750961155, -0.042005192488, 0.007594950497, 0.027682535350, 0.052451543510, 0.038984425366, 0.053248599172, 0.040930874646, 0.003167130053, 0.043364822865, -0.022282637656, -0.014024849981, 0.051584795117, 0.063611313701, -0.024057477713, -0.055673819035, -0.057600948960, -0.036313492805, 0.071821078658, 0.069947913289, -0.043684948236, -0.039594285190, 0.016785994172, 0.035023719072, -0.060489490628, 0.026836872101, -0.023979291320, -0.006518587470, 0.011822298169, -0.042080283165, -0.014962252229, 0.041393622756, 0.025077313185, 0.038421534002, 0.030554756522, 0.038371309638, -0.021911736578, -0.044490121305, -0.026793893427, -0.020099010319, -0.062095738947, -0.045683003962, -0.017483830452, -0.021037533879, 0.033314473927, 0.042791314423, 0.007517173886, -0.037893261760, -0.064305618405, 0.056549385190, 0.055797189474, 0.002570666373, -0.014731533825, 0.048947997391, 0.063486516476, -0.054954439402, -0.067715704441, 0.038203611970, -0.008520685136, -0.003930024803, -0.065046750009, -0.018425364047, 0.022297501564, 0.024440906942, -0.062243472785, 0.039428487420, -0.069394648075, -0.070851497352, 0.039951145649, -0.068324379623, -0.011784698814, 0.049456588924, -0.029577594250, 0.027831785381, 0.005451068282, 0.069202527404, 0.053211167455, 0.021909259260, 0.013580083847, 0.051932081580, -0.012751631439, -0.057827591896, -0.024356387556, -0.049386575818, 0.030913099647, -0.040830530226, -0.032798368484, 0.049409441650, 0.003884509206, 0.040595024824, 0.035252653062, -0.011696346104, 0.058166906238, 0.043782420456, -0.046384111047, -0.023337062448, 0.050268672407, -0.048602908850, -0.015659231693, 0.009030058980, -0.043430533260, -0.048576168716, 0.018671505153, 0.028831593692, 0.027785293758, -0.009473249316, 0.061605423689, -0.060439690948, 0.046921521425, 0.011813759804, -0.049495264888, 0.053967222571, 0.055321231484, 0.047799475491, -0.029728010297, -0.031494744122, -0.043956771493, -0.045789923519, -0.070211984217, -0.006703436375, -0.056967824697, 0.013352014124, -0.057601481676, -0.017621345818, -0.043604508042, 0.014988593757, 0.011489458382, 0.014293476939, -0.011934224516, -0.020394444466, -0.024253938347, 0.063725441694, -0.064101330936, -0.031357370317, -0.047883044928, -0.032273367047, -0.025077678263, 0.021169818938, 0.070732921362, 0.006376944482, -0.022052347660, -0.024276494980, 0.000947728753, -0.069133713841, -0.009775925428, 0.039127439260, -0.060955643654, 0.042597897351, -0.063045009971, -0.028439890593, -0.024324331433, -0.029885105789, 0.002244278789, 0.013919584453, -0.067403219640, -0.051135774702, 0.026112414896, 0.034000799060, 0.030908472836, -0.038233142346, 0.064421623945, 0.003455504775, 0.020557753742, 0.056496769190, 0.016744799912, -0.020865831524, -0.017774514854, -0.036463808268, -0.048196356744, 0.000030934811, -0.021492969245, 0.055955141783, 0.000025875866, -0.045304737985, 0.051543876529, 0.020967282355, -0.002700835466, -0.024985674769, 0.024605192244, -0.016386874020, -0.026741672307, 0.008467897773, 0.046343728900, -0.000173114240, 0.024318046868, 0.057497784495, -0.061765685678, 0.049414530396, 0.027959868312, 0.027624770999, -0.019107736647, -0.033367555588, -0.031480874866, 0.046433441341, 0.059692680836, -0.038761720061, -0.004132784903, -0.054854311049, 0.070766121149, 0.062153324485, 0.041926816106, -0.051874719560, -0.006159417331, 0.058401256800, 0.008908122778, -0.067424863577, 0.071059629321, 0.044629625976, 0.033560074866, 0.032659389079, -0.067866809666, -0.009119518101, -0.017669573426, 0.002807080746, -0.049235347658, 0.007112294436, 0.013686180115, 0.010092690587, 0.052472487092, 0.023396782577, 0.012936875224, -0.071253404021, -0.005603186786, 0.049816712737, -0.052010614425, 0.032172851264, 0.054637774825, -0.070875361562, 0.055912718177, 0.036680817604, 0.013750873506, 0.007378958166, 0.046970814466, -0.020477328449, -0.019577555358, 0.057496711612, -0.050938658416, -0.018589254469, 0.012935288250, 0.035489685833, 0.045235052705, -0.048952162266, 0.030049562454, 0.016212053597, 0.045383594930, 0.000245571136, -0.012036327273, 0.048598557711, 0.072009801865, -0.014818169177, 0.061712205410, -0.025436431170, 0.055130764842, 0.052066586912, -0.005645312369, 0.017898470163, 0.017304420471, 0.034242190421, -0.026313163340, -0.046971932054, -0.009121976793, 0.017859809101, -0.002761952579, -0.004797190428, 0.054652824998, 0.014361284673, 0.039861366153, -0.041367247701, -0.011281035841, 0.066083386540, 0.016647413373, 0.065624356270, 0.060429304838, -0.007038287818, 0.032279029489, -0.055869076401, 0.043802641332, -0.028661388904, -0.014362111688, -0.008764170110, -0.023666411638, -0.004552341998, -0.059234179556, -0.064207375050, 0.056936591864, -0.057840995491, 0.039980210364, 0.031647264957, -0.023480702192, -0.042005691677, -0.023196246475, -0.047760486603, 0.062440887094, 0.058883532882, 0.060750082135, -0.028592389077, 0.048955000937, -0.014806520194, 0.021826289594, 0.058261990547, 0.005492359400, 0.031160496175, -0.061058022082, -0.064316630363, -0.013019893318, -0.047310225666, 0.049439825118, 0.058850407600, 0.041190676391, 0.069102898240, 0.017228692770, -0.014616508037, 0.048983700573, 0.030693061650, 0.047957122326, 0.052351646125, -0.064535312355, -0.024746488780, 0.068261921406, -0.004877202213, 0.066471219063, 0.031625218689, -0.068989470601, -0.067615650594, 0.040720492601, 0.030533559620, -0.010510001332, -0.066260762513, 0.027015514672, -0.018482610583, -0.067243508995, 0.034751020372, -0.022399142385, -0.059734642506, 0.005964301527, -0.058693040162, 0.016925327480, -0.038297958672, 0.020956866443, 0.029942385852, -0.013239413500, -0.054753448814, -0.038216039538, -0.007657736540, -0.063375011086, -0.048979833722, 0.048000857234, 0.041884936392, -0.033863719553, 0.040031366050, -0.019684027880, -0.065423451364, 0.034260638058, -0.005767248571, 0.011580027640, -0.071862287819, -0.024930562824, -0.057188358158, -0.026319701225, -0.025230608881, 0.065559312701, 0.019167922437, 0.013813160360, 0.030484125018, 0.020662158728, 0.063191205263, -0.059881672263, 0.050788827240, -0.048979092389, 0.022821798921, -0.048416271806, 0.068703517318, -0.006838314235, -0.043712116778, -0.057791993022, -0.035176996142, -0.005461372435, -0.011558745056, -0.067986086011, -0.068844713271, 0.066645488143, -0.032179746777, 0.002516590059, -0.017056718469, -0.001951791346, -0.008161827922, 0.040995158255, -0.054462850094, 0.059728503227, -0.021565131843, 0.001372277737, 0.027980647981, 0.028232261539, 0.065923660994, -0.005121067166, 0.002666659653, 0.001457415521, 0.000050105155, -0.051176451147, -0.049227673560, 0.017488285899, -0.037964221090, -0.007616795599, 0.012383341789, -0.015799894929, 0.024441160262, -0.067618556321, 0.057964637876, 0.052195534110, 0.052809387445, 0.058568120003, -0.018839366734, 0.057219341397, 0.048476234078, 0.029375001788, -0.032444793731, 0.016721278429, 0.016785666347, -0.006548851728, 0.008024886250, -0.009496457875, 0.006350286305, 0.060311481357, -0.017935737967, 0.031469173729, -0.050676759332, 0.038151666522, 0.050772733986, -0.057570684701, 0.019602708519, -0.032707020640, 0.000966601074, -0.061133094132, 0.065529361367, -0.040346942842, 0.024803116918, 0.004692800343, 0.040692158043, 0.068204611540, -0.036971241236, 0.014504268765, 0.015228725970, 0.038010939956, 0.042284555733, -0.054295659065, 0.031742960215, -0.028232052922, 0.047492012382, 0.037418454885, 0.003885820508, 0.048861317337, 0.009006112814, -0.014233943075, -0.044773750007, -0.022796042264, 0.022082060575, 0.015728279948, 0.042381547391, -0.001225456595, 0.044074602425, 0.022187039256, -0.037522207946, -0.045210551471, -0.069732874632, 0.050575792789, 0.029847368598, -0.023834913969, 0.031320117414, 0.056529313326, 0.058108806610, 0.000137619674, 0.050852507353, 0.030395619571, 0.066471129656, 0.045559994876, -0.060034312308, 0.053129747510, 0.015757530928, 0.010675661266, -0.011453889310, -0.016940180212, -0.016303904355, 0.032712735236, 0.030816659331, -0.047412827611, -0.054975911975, -0.048554662615, -0.023365747184, -0.021006528288, -0.059296157211, -0.016302749515, -0.045583911240, 0.033283986151, 0.054575800896, 0.030335672200, 0.066267460585, -0.032403085381, 0.031721472740, -0.042524792254, 0.069614440203, -0.051272153854, -0.064273476601, -0.005389533937, -0.033142324537, 0.032051838934, -0.058561615646, -0.069608710706, 0.021676696837, 0.024383775890, 0.029651753604, -0.053782012314, -0.008903302252, -0.042011991143, 0.068684935570, 0.015461564064, -0.011396557093, -0.015896044672, 0.053628951311, -0.059999037534, -0.027627024800, -0.019421491772, 0.045940324664, 0.044624246657, 0.051864258945, 0.044294968247, -0.020419567823, -0.050424341112, 0.067858904600, -0.065652951598, 0.006110206246, -0.039536386728, 0.069597437978, 0.019214294851, 0.058527588844, -0.007311560214, -0.017797365785, -0.053278550506, -0.013710748404, 0.034882009029, -0.016847848892, 0.049846984446, -0.066342011094, -0.003705516458, -0.050722889602, 0.020520500839, -0.071836680174, -0.053282976151, 0.032086692750, -0.053596992046, -0.041081912816, -0.038177717477, 0.003194898367, -0.069121085107, 0.031550303102, -0.065514780581, 0.015789262950, -0.029303614050, -0.026352945715, 0.029965065420, -0.068410046399, -0.043991737068, -0.045901749283, 0.051157899201, 0.027806937695, 0.039874903858, 0.051072165370, -0.041435971856, -0.008685655892, -0.008502289653, -0.038567204028, 0.029613263905, 0.050245158374, 0.029939167202, -0.068496406078, -0.029563829303, 0.059245139360, 0.047689802945, -0.036473099142, 0.028809927404, 0.070912092924, -0.013515092432, 0.070206686854, 0.055135220289, -0.051823563874, -0.033064793795, -0.039060439914, 0.014965265989, -0.032465510070, -0.008579529822, 0.071281507611, -0.031217824668, 0.006532400846, -0.017760198563, -0.051366064698, 0.048489861190, 0.048494540155, -0.066280022264, 0.062007188797, -0.042313426733, -0.040360108018, -0.047758780420, -0.022356092930, -0.036868400872, -0.067910149693, -0.060063563287, 0.038763083518, 0.006625883281, -0.027046810836, 0.013993054628, 0.001315325499, -0.061942998320, -0.029897216707, -0.040570233017, -0.051069322973, 0.045731976628, -0.024526283145, 0.013620503247, -0.067792497575, -0.052275747061, -0.053200714290, -0.046582829207, 0.064875423908, 0.053380206227, 0.010799169540, -0.050022538751, 0.070305019617, 0.065566763282, 0.032299347222, 0.046779379249, -0.064248271286, -0.061774771661, 0.016857482493, -0.024807829410, -0.033292640001, 0.009980767965, 0.001340873539, 0.063618540764, 0.023129329085, -0.027216844261, -0.056346725672, 0.020157217979, 0.024949401617, -0.015291582793, 0.057277113199, 0.044710516930, 0.003584109247, -0.067364178598, -0.015215273947, -0.052261434495, -0.046525359154, 0.034547053277, 0.045670099556, -0.068982176483, 0.052368476987, -0.066365331411, -0.041584737599, -0.032897513360, 0.056851893663, 0.013854235411, 0.034591652453, -0.063121184707, -0.007871903479, 0.068002462387, 0.051479026675, 0.063924163580, 0.065053775907, 0.064296990633, -0.008322760463, 0.029333963990, -0.059114784002, 0.006462559104, -0.020136196166, 0.011442758143, -0.050318472087, -0.034628801048, 0.044782713056, -0.010498713702, 0.040754720569, -0.061224166304, 0.019068777561, 0.065192744136, 0.045279204845, -0.040583599359, 0.032010830939, 0.023876555264, 0.032004706562, 0.003888472915, 0.000705637038, -0.002151757479, -0.048205286264, 0.049491398036, 0.001318469644, -0.017275411636, -0.025872182101, -0.037218585610, -0.004308648407, -0.012318924069, 0.002699218690, -0.038141842932, 0.038372531533, -0.042434230447, -0.025309618562, -0.029192842543, 0.069288045168, 0.030432835221, 0.064364567399, 0.038332559168, -0.062576554716, -0.057969577610, 0.020338319242, 0.052938371897, 0.053171157837, 0.036588661373, -0.028291244060, 0.002030149102, -0.030488532037, -0.000826284289, 0.053561449051, -0.047081246972, -0.011483501643, 0.033383697271, 0.046909287572, 0.012106135488, -0.046117290854, -0.010813333094, -0.040857337415, 0.052388451993, 0.061788290739, 0.054072305560, -0.071175850928, 0.019116289914, -0.051792986691, 0.057763710618, 0.060678362846, -0.056134864688, 0.020885154605, -0.055643483996, 0.033341489732, 0.023702718318, -0.038633156568, 0.055665194988, -0.038002163172, -0.000919252634, -0.019108217210, -0.003517344594, -0.022159889340, -0.006710931659, 0.010400414467, -0.023252770305, 0.041385091841, -0.024254575372, 0.056244507432, 0.000093393028, -0.041566412896, -0.071401633322, -0.062067553401, -0.056419558823, 0.007069982588, -0.056307151914, -0.006124094129, -0.052953232080, -0.009138137102, 0.027131378651, -0.042546659708, 0.022255726159, -0.066223859787, -0.055659621954, 0.044824697077, 0.000906847417, 0.021321542561, -0.002506747842, -0.037599962205, -0.066191703081, -0.008918516338, 0.026690572500, 0.006470404565, 0.006482742727, -0.009377703071, -0.054457329214, 0.048258595169, -0.035082187504, 0.038933403790, 0.004692211747, 0.046626515687, 0.022717460990, 0.022939495742, 0.017651058733, -0.001327939332, -0.069299206138, -0.003338225186, -0.045607794076, 0.008716702461, -0.071836426854, -0.017093196511, 0.042502246797, -0.000786244869, -0.063833773136, -0.009346418083, 0.021789260209, 0.018983952701, -0.050170857459, -0.016204830259, 0.063868835568, 0.035372406244, -0.049437351525, 0.015986621380, -0.055146440864, -0.014452118427, 0.056974351406, 0.015298344195, -0.057503666729, 0.007873259485, -0.051646493375, 0.038897499442, 0.038797341287, -0.027847871184, -0.010837335140, 0.039057478309, 0.033466838300, 0.035688802600, -0.039629921317, -0.005380965769, 0.060185194016, -0.043324165046, -0.042973067611, -0.047080196440, -0.007212430239, 0.028137952089, -0.061251558363, 0.046067841351, -0.052158761770, -0.023412786424, -0.049647301435, 0.001655250788, 0.066998645663, -0.021176803857, -0.012789465487, -0.006597116590, -0.040965102613, 0.012320488691, 0.053669214249, -0.062710523605, 0.006046839058, 0.047275744379, -0.060880865902, -0.007809028029, -0.030232243240, 0.048241749406, -0.030811082572, 0.015315070748, -0.007968463004, -0.061560343951, 0.054943293333, -0.009664960206, -0.062656544149, -0.067850120366, -0.002916395664, -0.000906638801, 0.004179432988, 0.049823924899, 0.013186261058, -0.053650036454, -0.039773490280, -0.051543943584, 0.019037477672, 0.049528971314, 0.051792867482, -0.041839081794, 0.005762450397, -0.034694805741, -0.066176645458, -0.037497188896, -0.018535278738, 0.023659937084, 0.056848287582, 0.061633378267, -0.064224630594, -0.012185435742, -0.047998845577, 0.036844998598, -0.046237409115, 0.038663350046, 0.022397987545, -0.037440545857, 0.048698455095, 0.019824519753, 0.002448365092, -0.062069963664, 0.059522643685, 0.057128772140, -0.025102298707, 0.018072821200, -0.013419169933, -0.039390888065, -0.027628369629, 0.014537960291, 0.020697601140, -0.001447781920, 0.050521641970, -0.055822841823, 0.061237215996, -0.061092399061, 0.060683444142, -0.021011948586, 0.044816836715, -0.038171265274, 0.009746327996, 0.001887694001, 0.015103429556, 0.050090454519, 0.054087907076, 0.012799896300, -0.030849985778, -0.043246664107, -0.029447272420, 0.014963150024, 0.034888803959, 0.009384602308, -0.059155598283, -0.035594973713, -0.038937691599, -0.071194939315, 0.038670562208, -0.060538507998, -0.005595840514, 0.039596021175, 0.067798987031, -0.015363283455, 0.005482688546, -0.020982887596, 0.046637840569, 0.002456828952, 0.003710433841, 0.027881853282, 0.040773868561, -0.060038112104, 0.030162848532, -0.070868819952, -0.068346627057, -0.058507159352, -0.025621727109, -0.041359540075, -0.020331453532, 0.060434475541, -0.034427590668, -0.026689294726, -0.015137363225, -0.044481411576, -0.045223698020, -0.025159787387, -0.056111376733, -0.049298405647, -0.060460168868, 0.007788069546, 0.005609951913, 0.019299738109, -0.037112541497, -0.032195921987, -0.013328250498, 0.064005434513, 0.006267771125, -0.059657387435, 0.069213896990, 0.058437436819, -0.060400977731, 0.018137469888, 0.008310303092, 0.060396224260, -0.055289547890, 0.068288862705, 0.051342301071, -0.019528001547, -0.064244210720, 0.023769490421, -0.049920883030, -0.060997731984, -0.004852682352, -0.031023461372, -0.058354537934, -0.002313911915, -0.064264260232, -0.033885277808, 0.038058355451, -0.015388973057, -0.062683060765, 0.064965382218, 0.040451712906, 0.053554475307, 0.023098923266, 0.043708436191, 0.054452791810, -0.046949304640, 0.070075556636, -0.059554770589, -0.067238435149, 0.014898881316, -0.040827691555, -0.067173428833, 0.028667323291, 0.052470579743, -0.070718921721, -0.003043100238, 0.056539595127, 0.025081947446, 0.022011257708, -0.064455814660, 0.004022665322, -0.023574113846, 0.003787361085, -0.031567148864, 0.059230461717, 0.040803670883, 0.027065150440, 0.030369512737, 0.053021118045, -0.068397037685, -0.002967774868, -0.029583889991, -0.002332873642, -0.009082250297, -0.002632595599, 0.046610310674, -0.036429654807, 0.062581285834, 0.006500124931, 0.022370010614, -0.015831589699, -0.061215303838, -0.060643553734, -0.008216954768, 0.040665276349, -0.050680786371, 0.052675589919, -0.037919383496, -0.068706601858, 0.055588394403, -0.028972204775, -0.028682138771, -0.003494717181, 0.029946751893, -0.059160314500, -0.001511290669, -0.028886120766, 0.046219862998, 0.041164524853, -0.029893759638, -0.016427773982, -0.011279243976, 0.065150961280, -0.034668151289, 0.052871257067, 0.037413924932, 0.020623430610, 0.065667778254, -0.011197723448, 0.037699550390, 0.048106677830, 0.052267059684, -0.028280645609, -0.034018147737, 0.067314267159, 0.068814709783, -0.039294790477, -0.055724989623, 0.023151695728, -0.018986996263, -0.063947334886, 0.025760114193, -0.070654928684, 0.053317382932, 0.069420546293, 0.060071334243, -0.039200656116, -0.039841525257, -0.065746448934, 0.054982155561, -0.024522822350, 0.056666478515, -0.038940288126, 0.035467647016, 0.054884642363, -0.009376652539, 0.059278964996, -0.000614970922, 0.059210807085, -0.015864830464, 0.015880711377, -0.004253484309, 0.026862770319, -0.072118267417, -0.023901276290, 0.066100329161, 0.022858880460, -0.017053190619, -0.057699318975, -0.040172610432, -0.038358852267, -0.025469310582, 0.054837882519, -0.040121007711, 0.015166565776, -0.026676461101, -0.063273862004, 0.045083172619, -0.051593706012, 0.051474720240, 0.011714890599, 0.027885705233, -0.069932438433, -0.053965054452, -0.055005766451, -0.025929462165, -0.065909653902, 0.039509199560, -0.067382521927, -0.070976532996, -0.006890207529, 0.035426609218, -0.001604199409, -0.052384473383, 0.032633736730, 0.044762119651, -0.039664868265, 0.070438057184, 0.013223409653, 0.031662866473, -0.056809954345, 0.032807968557, 0.061372131109, -0.046083085239, -0.064535416663, -0.016703538597, -0.018556166440, -0.071620434523, 0.050497196615, 0.021698571742, 0.023049093783, 0.040005676448, 0.035958230495, -0.036655023694, 0.003292061388, 0.045401662588, -0.026316139847, 0.034996211529, 0.019412182271, 0.000076897442, -0.067607715726, 0.010087482631, -0.008806191385, 0.003921709955, 0.066506505013, 0.041303530335, -0.024108666927, 0.020130537450, 0.041915908456, 0.047790065408, 0.018008783460, -0.068595275283, -0.046755596995, 0.007327251136, -0.055865809321, 0.039992354810, 0.040315575898, 0.051146134734, -0.016873780638, 0.035904668272, -0.061831809580, -0.031128507107, -0.070675097406, -0.020163089037, 0.067723378539, 0.026870876551, -0.014883603901, 0.024069882929, -0.052688978612, 0.038492351770, 0.002575829625, -0.034616686404, -0.048971109092, 0.046290300786, 0.053665488958, -0.049764838070, 0.047930106521, -0.030280869454, 0.017340280116, -0.025111075491, 0.029490686953, 0.009184934199, 0.044734075665, -0.059188067913, -0.024247244000, -0.037180352956, -0.055331394076, 0.054897412658, 0.029473669827, -0.006925448775, -0.039210859686, 0.011746980250, 0.006547614932, -0.045391492546, -0.063236296177, 0.035700134933, 0.039271652699, -0.031750552356, -0.000233024359, -0.032470107079, 0.034769855440, 0.056256115437, -0.071931488812, 0.011146329343, -0.055113546550, 0.049025379121, 0.063844054937, -0.032068680972, 0.012509986758, 0.069635555148, 0.012101076543, -0.046078491956, 0.062404006720, 0.040619581938, -0.010908979923, -0.071457743645, 0.017244473100, -0.032890025526, 0.057189971209, -0.071723461151, -0.066468082368, 0.051672197878, 0.020170249045, 0.054601535201, 0.029646642506, 0.067535221577, 0.045347340405, -0.012227471918, 0.044398069382, -0.042739938945, 0.012275889516, -0.066557765007, -0.018255054951, 0.069736570120, 0.037353292108, -0.001257404685, 0.047035478055, 0.040713734925, -0.070756331086, -0.008243836462, 0.011170431972, 0.060191392899, 0.034693636000, 0.003127172589, 0.003736764193, 0.068391412497, 0.043990395963, -0.035674259067, -0.043743468821, 0.027466833591, 0.054265245795, -0.050757817924, 0.004297874868, -0.017526227981, -0.005603209138, -0.057437419891, 0.015160866082, 0.041437551379, 0.005786061287, -0.023893602192, 0.024758927524, 0.060514107347, -0.013217546046, -0.051547072828, 0.070059046149, 0.001089334488, -0.061042863876, -0.029786631465, -0.004425138235, -0.009190991521, 0.015494048595, 0.043729081750, -0.031415473670, 0.068505957723, -0.071440473199, 0.026500612497, -0.015482146293, 0.062159001827, -0.054996505380, 0.026539787650, 0.011034056544, 0.016606114805, -0.052944749594, 0.050326004624, 0.015888161957, -0.018043830991, 0.038610011339, -0.040443748236, -0.066585704684, -0.066943019629, -0.059890016913, -0.044546265155, -0.036233451217, 0.020130932331, 0.041843190789, 0.061030954123, -0.009838160127, 0.016263194382, 0.044467702508, 0.068610087037, -0.040869399905, -0.021093573421, 0.011586926877, -0.003483548760, 0.040275521576, -0.047535046935, 0.062920302153, -0.060503080487, 0.044348508120, 0.036420382559, -0.036786891520, 0.022129677236, -0.004736758769, -0.053416103125, 0.003799065948, 0.017246104777, 0.069842413068, 0.038518473506, -0.058469202369, -0.058507725596, 0.018950089812, 0.004484876990, 0.022584952414, 0.060129791498, 0.051350064576, 0.017541386187, 0.015664860606, 0.003936976194, 0.053777709603, 0.041247248650, -0.029716432095, 0.064402714372, -0.036754939705, -0.054726522416, -0.041559442878, -0.046444348991, -0.047527305782, 0.019189931452, 0.024960570037, -0.006285406649, 0.019706293941, -0.067233838141, -0.018415402621, 0.005421593785, 0.060409784317, 0.005597732961, -0.044026270509, 0.025513119996, -0.022334534675, 0.027145490050, 0.070996940136, -0.054179754108, 0.027926139534, -0.068372279406, 0.065070062876, -0.046304032207, -0.026828736067, 0.015371143818, -0.056700490415, 0.039723709226, -0.072074197233, -0.014223910868, -0.026327256113, -0.000861972570, -0.060066401958, -0.068605512381, 0.027951076627, 0.040778413415, -0.031075838953, 0.032167650759, -0.021396715194, 0.005909703672, -0.005386956036, -0.000858716667, 0.069931969047, 0.068425297737, -0.061191767454, 0.012445032597, -0.044129610062, -0.036929294467, -0.027584008873, 0.071495577693, 0.059493795037, -0.045188114047, -0.059882380068, -0.043832268566, 0.018035106361, -0.008654929698, -0.068242669106, 0.036146074533, 0.064891636372, 0.002891719341, -0.019646570086, 0.043977230787, 0.010366857052, 0.028706796467, 0.056701153517, 0.031405463815, -0.007758289576, -0.044484302402, 0.042041517794, -0.038297612220, 0.006895646453, 0.055430725217, 0.052750848234, 0.048141568899, 0.048439651728, -0.044464841485, -0.067788034678, -0.043121643364, 0.051231734455, 0.029721230268, 0.006274946034, 0.003772892058, -0.007114358246, -0.063742339611, -0.033719547093, 0.036804497242, 0.070534482598, -0.068697325885, -0.019696604460, 0.046162389219, 0.039209328592, 0.056852564216, -0.042316783220, -0.064401492476, 0.057852193713, 0.031805977225, -0.060085587204, -0.041501268744, -0.072024784982, -0.018879525363, 0.060992196202, 0.062117010355, 0.055311679840, 0.046570114791, -0.070714481175, -0.006044447422, 0.021340794861, 0.053972870111, 0.020497255027, 0.040619112551, -0.058696806431, -0.028560902923, -0.028411239386, 0.052325591445, 0.056262314320, -0.026191599667, -0.014535069466, 0.014092490077, -0.063204087317, -0.007476501167, -0.036507632583, -0.017100609839, -0.033218152821, 0.070901423693, -0.046935148537, -0.047499135137, 0.047496899962, -0.002588495612, -0.005511239171, 0.008089289069, -0.054087631404, -0.014889091253, 0.054817348719, 0.013194419444, -0.070926345885, 0.062928825617, 0.051132589579, 0.023978203535, 0.069064646959, 0.047942735255, -0.027479823679, 0.007102176547, -0.067354075611, 0.034812495112, -0.036758571863, 0.057558208704, 0.051901802421, 0.060777664185, -0.026145007461, 0.064337477088, 0.037186324596, 0.010192282498, 0.016844905913, 0.045493856072, -0.067753851414, -0.002726629376, 0.033563725650, 0.060509309173, 0.031216464937, 0.060464739799, -0.055413745344, 0.053296893835, -0.059996269643, 0.033591151237, 0.036123760045, -0.032536108047, -0.065048165619, 0.034894809127, -0.005376927555, -0.000989764929, -0.055315185338, -0.071262575686, -0.020593728870, -0.017353940755, 0.005804143846, 0.003721088171, 0.054940342903, 0.058901861310, -0.057503096759, -0.065587341785, 0.055740728974, 0.040870122612, 0.054123416543, 0.051802329719, -0.061161242425, -0.041257884353, -0.045640781522, 0.062318712473, 0.003371849656, 0.041671797633, -0.055080540478, 0.069322302938, 0.056689441204, 0.049778603017, 0.064411267638, -0.066309273243, -0.060779485852, 0.035645797849, -0.043350040913, -0.009392105043, 0.028763405979, 0.038600377738, 0.016348809004, 0.050989143550, -0.024428635836, 0.032886154950, -0.068387888372, 0.016480870545, 0.024445690215, -0.024233378470, -0.047818712890, -0.047704979777, -0.003120839596, -0.017396975309, -0.056823171675, 0.031338252127, 0.023602955043, 0.057696864009, 0.003540299833, -0.008456662297, 0.057677179575, -0.026919964701, 0.011921115220, -0.034317914397, -0.014821968973, -0.008315481246, 0.008096292615, -0.051348771900, 0.045883148909, -0.009975224733, -0.037187442183, 0.065255820751, -0.036796510220, -0.015685729682, 0.008582316339, -0.001590847969, 0.062947764993, 0.035520657897, 0.040615603328, -0.028352189809, 0.029445119202, -0.043909594417, -0.006164014339, 0.039666466415, 0.023803219199, 0.006923779845, -0.052435748279, -0.000206269324, 0.001996561885, 0.041777998209, 0.055175125599, -0.001778431237, 0.046151153743, 0.007144331932, -0.023547530174, 0.019533231854, -0.016939643770, 0.011168628931, 0.071336448193, -0.029148172587, -0.001794248819, -0.000201277435, 0.026169940829, 0.042724817991, 0.027629159391, -0.012348327786, 0.008247323334, 0.031271837652, 0.001608349383, -0.044680885971, 0.055590972304, -0.007028341293, -0.048615675420, -0.009613357484, 0.053376957774, 0.035394310951, 0.000433139503, 0.008728191257, 0.008928388357, 0.043606415391, -0.050246134400, 0.039562679827, 0.007688529789, 0.012445062399, 0.050974547863, -0.002557002008, 0.006654530764, 0.058703094721, 0.047760501504, -0.028224363923, -0.070746660233, -0.034667480737, 0.016719780862, 0.034538619220, 0.015938386321, -0.039200104773, -0.003509089351, 0.005501583219, -0.034012984484, 0.020277425647, 0.008943222463, -0.035053092986, 0.017873227596, 0.038321927190, -0.034619819373, 0.008055455983, -0.050839722157, 0.044916376472, 0.023942053318, -0.026079054922, 0.001393511891, 0.010952532291, -0.059332307428, -0.010499589145, -0.029932215810, -0.007901720703, 0.018890418112, -0.028937961906, -0.032043196261, -0.035298455507, 0.017333120108, -0.003845043480, 0.066508620977, 0.007701970637, 0.041657418013, 0.057879626751, 0.002241387963, 0.020455233753, 0.032448306680, -0.060390636325, -0.061673134565, 0.004762761295, 0.045251809061, 0.005792319775, -0.067175477743, -0.056303571910, -0.002511456609, 0.021905712783, 0.036410965025, -0.068583592772, -0.026738386601, 0.046822167933, 0.061220377684, -0.032860826701, 0.008272774518, 0.023948542774, 0.034596882761, -0.012958399951, -0.039230421185, 0.054409116507, -0.046517975628, 0.070309296250, -0.061768300831, 0.011446528137, -0.003584377468, -0.029119834304, -0.071801252663, 0.016498923302, 0.062082096934, 0.042448118329, -0.037991564721, 0.071067482233, -0.068070344627, -0.058299958706, -0.069416828454, 0.012087531388, -0.039194185287, -0.051461197436, 0.014067023993, 0.029970757663, -0.003470025957, 0.031675167382, -0.029854889959, -0.016357589513, 0.039336845279, -0.037424098700, 0.038610473275, 0.011919289827, 0.004400171340, 0.006673991680, 0.053940638900, -0.023760598153, 0.015280105174, 0.039013966918, 0.049969747663, 0.045206665993, 0.041952125728, -0.035162784159, -0.020073786378, 0.038742125034, -0.056592535228, 0.025836169720, -0.052997626364, -0.033381391317, 0.009398229420, 0.071684390306, 0.006899915636, 0.004606939852, 0.015421718359, -0.048172198236, 0.034067511559, -0.004260696471, -0.018691942096, -0.038208466023, -0.038393057883, 0.007942065597, 0.044936969876, -0.067724406719, 0.039929710329, 0.063404485583, 0.035673692822, -0.040868107229, 0.005818627775, 0.036999136209, -0.016500141472, 0.006010994315, 0.032072760165, -0.019455287606, 0.059655800462, -0.063865087926, 0.000100590289, -0.044646508992, -0.069432087243, 0.018631443381, 0.014745712280, -0.013854574412, -0.062107887119, -0.011584125459, 0.057805716991, -0.020892843604, -0.043504212052, -0.065152160823, -0.024965576828, 0.022547975183, 0.050502754748, 0.023629486561, -0.042418763041, -0.018328562379, -0.008135981858, 0.062128797174, 0.049839377403, -0.016180105507, 0.017614841461, -0.068406246603, -0.058122199029, 0.068180918694, 0.034091860056, -0.060803920031, 0.063792273402, -0.002355225384, 0.045136734843, -0.007586635649, 0.046799696982, -0.050230011344, -0.064768455923, -0.066876254976, 0.060566052794, -0.051669500768, -0.028487794101, 0.048152118921, -0.040931530297, -0.069398403168, -0.064902216196, -0.028849538416, 0.057623162866, -0.051045283675, 0.004265338182, -0.015036430210, -0.012581974268, 0.055198252201, -0.051509324461, -0.022635232657, 0.054116129875, -0.044357821345, 0.005647324026, -0.068189740181, 0.020837754011, -0.056869387627, 0.051190182567, -0.059490416199, 0.011995203793, -0.035666584969, -0.042545489967, 0.001458637416, -0.034720148891, -0.036319155246, 0.042475976050, -0.059194587171, 0.029841586947, -0.012833204120, -0.056874133646, 0.001643002033, -0.009950708598, -0.003642760217, -0.008019737899, -0.060540333390, -0.052359163761, -0.021788299084, 0.040833473206, 0.041787222028, 0.013153985143, 0.051259778440, -0.050017084926, -0.048668347299, -0.037082515657, 0.044648364186, 0.013397589326, 0.057797268033, 0.001277625561, -0.055212564766, -0.060457430780, -0.042084030807, -0.013540182263, -0.041553489864, 0.044762998819, 0.068008303642, -0.043328464031, 0.038902312517, 0.035704351962, 0.051796033978, 0.016051471233, -0.008864812553, -0.033862825483, 0.052114129066, 0.033498480916, -0.065967895091, -0.015543658286, -0.036204680800, -0.042475409806, 0.044786721468, 0.058039948344, 0.052365221083, -0.016001157463, -0.013678055257, 0.002273172140, 0.000869870186, -0.034417282790, 0.047522351146, -0.005669243634, 0.012388542295, -0.039407372475, 0.030989274383, -0.066329933703, 0.017444528639, 0.023098550737, 0.061352536082, 0.008712515235, -0.034544713795, 0.026802390814, 0.023439370096, -0.015300016850, 0.065737068653, -0.060046974570, -0.030123189092, -0.009489282966, 0.059238418937, 0.055996254086, 0.041618719697, -0.045444849879, 0.035598486662, 0.006242334843, 0.040093168616, -0.053431294858, 0.065259829164, -0.030554141849, -0.065007641912, -0.070976622403, 0.068405821919, 0.034357883036, 0.002852164209, 0.006987579167, -0.012575022876, 0.072000846267, 0.030691154301, -0.062946923077, 0.025685369968, -0.034714039415, -0.031377226114, 0.007354713976, 0.039094559848, -0.063889555633, 0.060962855816, -0.049569390714, -0.032951094210, -0.035572778434, 0.051466494799, -0.013420425355, 0.040271840990, -0.009639665484, -0.004941344261, -0.016265824437, 0.047718711197, -0.000451356173, 0.028710611165, 0.021086953580, -0.005494669080, 0.062111690640, -0.056333873421, 0.065241843462, -0.047993496060, -0.054340235889, 0.025472268462, -0.040035817772, -0.047508448362, 0.019792564213, 0.039364032447, 0.065331712365, 0.057216122746, -0.060297913849, 0.034222900867, 0.043197475374, -0.010196793824, 0.025463275611, -0.047195442021, 0.015044569969, 0.035954535007, 0.008492000401, 0.005799390376, 0.021318942308, -0.011811714619, 0.034460954368, -0.000061996281, -0.053855054080, -0.029151476920, -0.007927343249, 0.061604723334, 0.053908914328, 0.050258643925, 0.054999604821, -0.019201956689, -0.028860811144, -0.058362364769, 0.013575419784, 0.051390357316, 0.063578292727, -0.064760453999, 0.000131487846, 0.036218032241, 0.048580162227, -0.027267206460, 0.023243859410, 0.030065648258, 0.036146417260, -0.022032476962, -0.046526666731, -0.044489018619, 0.051760897040, -0.043016202748, 0.018242858350, 0.006654053926, -0.013009261340, -0.028072841465, 0.014878720045, 0.057011052966, -0.055916823447, 0.019684940577, -0.060710471123, 0.015503533185, -0.035418640822, -0.015681654215, -0.025857124478, -0.039144113660, -0.037263251841, -0.039674967527, -0.009092971683, -0.042979657650, 0.045720152557, 0.071555495262, 0.046304598451, -0.035373147577, -0.000376164913, -0.016968932003, -0.004633970559, -0.056956209242, 0.004012115300, -0.071196004748, -0.036248490214, 0.023139208555, 0.002804242074, -0.057273752987, -0.001743622124, 0.024390317500, 0.037422202528, -0.052510216832, 0.055268198252, 0.022110126913, 0.067561417818, 0.034619972110, 0.011548697948, 0.003230430186, 0.034230418503, -0.064178980887, -0.015917550772, -0.060648389161, -0.056177310646, 0.031802408397, 0.056562513113, -0.060004457831, -0.004353985190, -0.020500455052, -0.054872982204, 0.010831467807, 0.040777429938, 0.022008217871, 0.029927931726, 0.031263716519, -0.001721516252, 0.066669449210, -0.028911173344, -0.049924857914, 0.019990988076, -0.061893340200, -0.011925518513, 0.057269066572, 0.001730069518, 0.024392984807, -0.068323142827, -0.023300878704, -0.004883460701, -0.063948243856, 0.043385572731, 0.017142213881, 0.070021688938, -0.057222116739, 0.046193137765, -0.072067782283, 0.051673077047, -0.019874744117, 0.066466644406, 0.017276652157, 0.039488859475, -0.068297915161, 0.023016355932, -0.068152107298, -0.068705156446, -0.049444749951, 0.044989153743, -0.071406438947, -0.035802394152, 0.001499466598, 0.045394316316, -0.070405386388, 0.010586515069, 0.005647532642, -0.002213254571, 0.024852879345, -0.017120189965, -0.006142519414, -0.003104582429, -0.050987213850, -0.060173287988, 0.042549364269, -0.027314350009, -0.026572722942, 0.044538162649, 0.020379409194, 0.010049968958, -0.058038026094, -0.048403006047, 0.023467436433, 0.035325810313, -0.050682283938, 0.033258274198, 0.006553046405, 0.056505069137, -0.049082502723, -0.012898106128, -0.054106988013, -0.024903222919, -0.049478024244, -0.022041164339, 0.063748508692, 0.028483659029, -0.002139508724, -0.067268013954, 0.024795696139, -0.035165827721, -0.064906671643, -0.025296524167, -0.012794833630, 0.011199891567, -0.012556768954, 0.002032108605, 0.004820331931, -0.046170376241, 0.060412347317, 0.000464953482, 0.024053402245, 0.000037282705, 0.021999180317, -0.043886281550, -0.008398965001, 0.011043004692, -0.009487822652, 0.053746938705, -0.003153003752, -0.003190718591, -0.059925548732, 0.022696867585, -0.041739869863, 0.069593757391, -0.024779301137, 0.037573240697, -0.066151887178, 0.037961468101, 0.006050452590, 0.060542821884, 0.009171329439, -0.054025806487, 0.034580089152, -0.065407946706, -0.053275316954, -0.003503307700, 0.064654096961, 0.016051761806, -0.050161309540, 0.010226562619, -0.003180891275, -0.005470819771, -0.017775394022, -0.045356944203, 0.007306203246, -0.029216311872, 0.045548416674, 0.006683953106, -0.021753180772, -0.063002258539, 0.070666506886, -0.025242034346, -0.060549985617, 0.014821387827, -0.019146483392, 0.005629241467, 0.033554039896, 0.012618519366, -0.009379990399, 0.051400959492, -0.033116720617, -0.058135587722, -0.020491283387, 0.009667091072, 0.017357915640, 0.030393294990, -0.022108614445, 0.032814010978, -0.048459734768, -0.016159042716, -0.012469705194, -0.050317972898, 0.047581352293, -0.021304953843, -0.065999455750, 0.017499625683, 0.036591172218, -0.056574106216, -0.015369854867, 0.019427552819, 0.040169700980, -0.013288743794, -0.020750701427, -0.058657851070, 0.035254269838, 0.003775045276, -0.065553873777, -0.006540469825, 0.005317598581, -0.062820680439, -0.045997243375, 0.019164100289, 0.022489406168, -0.054911043495, 0.064401015639, 0.038216292858, -0.012826081365, 0.031814940274, -0.002491243184, -0.038954623044, 0.058402761817, 0.071023732424, 0.005873538554, -0.026732828468, -0.041475512087, -0.042043529451, -0.031673174351, 0.063792407513, -0.053414121270, 0.020572461188, -0.024611279368, -0.005295231938, 0.068722873926, 0.051438674331, 0.033476196229, -0.028990011662, 0.007027685642, 0.033732451499, -0.031734585762, 0.005161657929, 0.022312454879, 0.040135338902, 0.072098627687, 0.057557895780, -0.049428038299, -0.019250616431, -0.011288605630, 0.065293177962, -0.008785769343, -0.022420030087, 0.056994765997, -0.062033761293, -0.002862490714, -0.068334169686, -0.026958901435, -0.051814943552, -0.061907105148, -0.046565502882, 0.061299309134, -0.024754386395, -0.066534109414, 0.026800967753, -0.010276112705, -0.009689841419, -0.038885641843, -0.000100657344, 0.060673937201, -0.009670224041, 0.062561631203, -0.070688515902, 0.029881060123, -0.017758823931, -0.063501790166, -0.054773062468, -0.017076678574, -0.020948886871, -0.062627121806, -0.016193233430, -0.020433727652, 0.070491418242, 0.057234346867, 0.046159982681, -0.065425463021, -0.035758022219, -0.062518343329, 0.054690763354, -0.060994546860, -0.012057438493, 0.060266882181, -0.036879703403, 0.032490581274, -0.019988082349, -0.002990745008, 0.030346959829, 0.046152584255, 0.034412704408, -0.011258512735, -0.016429133713, -0.071881555021, -0.016105599701, -0.008084654808, -0.052410129458, 0.017900429666, -0.062710709870, 0.043651312590, 0.054380953312, -0.068589255214, 0.062980875373, -0.052910991013, -0.038518629968, -0.016931198537, -0.034128025174, 0.043329238892, 0.033419482410, 0.043897204101, -0.045421503484, -0.015032093972, 0.037300691009, 0.015190258622, -0.013266306370, -0.055110462010, -0.067815721035, -0.036102287471, -0.048464499414, -0.049719706178, -0.023306090385, -0.031560678035, -0.034930031747, 0.041339732707, 0.023459933698, 0.050944969058, -0.037034079432, 0.015080325305, 0.008493393660, 0.056557565928, 0.011348262429, -0.025482799858, 0.044434614480, 0.056914731860, 0.070554584265, 0.022293910384, 0.028881028295, 0.033440634608, -0.001455053687, -0.012038752437, 0.067378133535, 0.037367574871, 0.032790072262, -0.036456909031, 0.062065452337, 0.022974744439, 0.057143807411, 0.035761959851, 0.027613602579, -0.060679499060, 0.065251469612, -0.062985070050, -0.063121460378, 0.009115025401, -0.012170795351, -0.039256595075, -0.058351870626, -0.054985787719, -0.043762341142, 0.042693994939, -0.054604440928, -0.019880991429, -0.065460518003, -0.006370455027, -0.008210226893, 0.060588359833, 0.025046586990, -0.030690364540, 0.046027988195, 0.019329234958, 0.064231976867, 0.069399416447, -0.057498693466, -0.052329123020, 0.068963915110, -0.041329309344, 0.054013401270, 0.021513499320, -0.000640749931, -0.030568491668, 0.041926853359, 0.053042724729, -0.015368495136, 0.004848793149, -0.015917517245, 0.042419143021, -0.064840205014, -0.058363966644, 0.028160318732, 0.069941923022, -0.042663849890, 0.021335184574, -0.053959563375, 0.034833520651, 0.032061077654, 0.065351396799, -0.045078147203, 0.016952604055, 0.046713441610, 0.061484098434, -0.000197596848, 0.002246588469, 0.061127409339, -0.034872494638, 0.031075306237, -0.015490334481, 0.006494753063, 0.020248360932, -0.027285531163, 0.019456937909, -0.016744509339, -0.066046617925, 0.056900992990, 0.039465323091, -0.006584726274, 0.016021393239, -0.068481594324, -0.042784452438, 0.060520872474, 0.068289339542, 0.030106447637, -0.062864676118, -0.000938139856, -0.028970655054, 0.036840438843, 0.048749715090, 0.006082922220, -0.018202334642, 0.051797375083, -0.004830792546, -0.069268576801, -0.022718649358, -0.058940347284, -0.000608317554, -0.012484587729, 0.042580179870, 0.006846845150, 0.008638672531, 0.049719192088, -0.069056525826, -0.056615058333, 0.011162348092, 0.020643316209, -0.030848678201, -0.061852283776, 0.037840925157, 0.031745769083, -0.067778371274, 0.050707556307, -0.049548450857, -0.036766245961, 0.037353031337, 0.007809184492, 0.070799753070, 0.005002476275, 0.065953627229, -0.067287191749, -0.018770489842, -0.017449367791, -0.064657025039, -0.063461869955, -0.052618756890, -0.069288313389, -0.012833945453, -0.030846595764, 0.060090944171, 0.004317112267, -0.017596930265, -0.000085897744, -0.058248288929, -0.039393227547, 0.019791312516, 0.012797281146, -0.048448499292, -0.064985983074, 0.040273986757, 0.064472228289, 0.013042569160, 0.045965977013, -0.067231185734, 0.055565297604, -0.008975207806, -0.061507709324, -0.040113642812, -0.068909071386, -0.017697792500, 0.037607744336, 0.002321161330, 0.070507690310, -0.019353959709, -0.043087903410, 0.054945245385, 0.045573517680, -0.004442684352, 0.057593986392, 0.060727432370, -0.033313646913, 0.027799211442, -0.009047597647, -0.011170707643, -0.058575157076, 0.019655019045, -0.063663683832, 0.067947953939, -0.070887133479, -0.071155667305, -0.001759678125, -0.009258031845, -0.002373173833, 0.035131469369, 0.060792818666, -0.037708122283, 0.004473574460, 0.059723988175, 0.071563690901, 0.036061093211, 0.035259224474, -0.033496379852, -0.016521770507, -0.027516182512, 0.004658147693, -0.057839602232, -0.009927392006, -0.044497467577, 0.048595733941, 0.068287253380, -0.070926569402, -0.023996978998, 0.027759961784, -0.041407406330, 0.051275730133, 0.007756270468, 0.040959306061, -0.022529825568, 0.060208067298, -0.036555830389, 0.067806616426, -0.062056284398, -0.042012020946, -0.048813894391, 0.008915744722, -0.037439581007, 0.025582440197, -0.045853018761, -0.030426330864, -0.065751746297, 0.014257602394, 0.020171672106, -0.010188654065, 0.056103244424, 0.037168651819, -0.068073093891, -0.055898688734, -0.004247844219, -0.005167640746, 0.019864231348, -0.037686254829, -0.003107540309, -0.019434846938, 0.006780982018, -0.002404175699, 0.069095984101, 0.007610119879, -0.048491083086, -0.061864003539, 0.045009583235, -0.021772503853, 0.008637256920, 0.034966081381, 0.010340139270, 0.042690418661, -0.001217491925, 0.023073136806, 0.021575406194, 0.014322794974, -0.068854883313, 0.042810797691, -0.026411790401, 0.012606531382, 0.053362265229, -0.011885270476, 0.045498050749, -0.021814193577, 0.056860208511, 0.034493096173, -0.066845178604, -0.016240738332, 0.063530355692, -0.069903858006, 0.044299580157, 0.044538572431, -0.024825345725, -0.034222077578, 0.023927912116, 0.018186457455, 0.063429996371, 0.041562765837, -0.012354437262, -0.018786370754, 0.054615423083, 0.014056012034, -0.016281191260, -0.057933378965, -0.015337627381, 0.013752229512, -0.069864191115, 0.036488294601, -0.039569199085, -0.018822848797, -0.042307682335, -0.023014064878, -0.057401906699, 0.068440541625, -0.020924557000, -0.034118872136, -0.005058713257, 0.051264941692, -0.065696157515, 0.044268675148, -0.006329335272, -0.065816909075, -0.011687535793, 0.056311249733, -0.039970900863, -0.031972754747, -0.045393422246, 0.014643885195, -0.030600667000, -0.026517577469, 0.055376097560, 0.042991235852, -0.021826978773, 0.044323459268, 0.050157852471, 0.063579991460, 0.071784526110, -0.006123907864, 0.046469315886, 0.071180894971, 0.070887252688, 0.063169017434, -0.004833206534, 0.063887134194, -0.042146816850, -0.036640811712, -0.055977784097, 0.004077374935, -0.065517470241, 0.010152488947, -0.045926835388, 0.058122336864, 0.004251062870, -0.012607544661, 0.002521611750, 0.008356742561, -0.047129217535, -0.018619846553, 0.036033324897, 0.057719573379, -0.041627079248, -0.025973372161, 0.003422379494, -0.023072894663, 0.054371625185, -0.059794813395, -0.053919509053, -0.011767338961, -0.055429883301, -0.049652721733, 0.045766904950, 0.065923541784, -0.071770951152, 0.035329893231, -0.028698433191, -0.010420009494, -0.049834713340, 0.003673888743, 0.026472717524, 0.065390452743, -0.042325727642, -0.070540577173, -0.068983264267, -0.006133176386, 0.058855891228, 0.018249310553, -0.028585627675, -0.059955075383, 0.069641068578, 0.059795945883, -0.014400515705, -0.064137876034, 0.047949373722, 0.049023501575, 0.023059077561, 0.059975072742, 0.053165107965, 0.030741222203, 0.062225863338, 0.019626975060, -0.050254531205, 0.050155512989, -0.040749229491, -0.035145301372, -0.008942328393, 0.041085787117, -0.042435385287, 0.026742890477, -0.033429723233, 0.017909929156, -0.064521305263, -0.061571940780, -0.067609675229, 0.004451379180, -0.012975517660, 0.001143790781, 0.013446472585, 0.046174384654, -0.059865757823, -0.009027846158, -0.056319989264, -0.066401682794, 0.043305687606, 0.054930999875, -0.047654151917, 0.005110137165, 0.005644537508, 0.032895103097, -0.047902159393, 0.044132895768, -0.067668594420, 0.011574625969, 0.024463750422, 0.048261515796, 0.041273832321, -0.041361037642, 0.019704520702, -0.069680877030, -0.033499442041, 0.038652978837, 0.016406811774, 0.044026233256, -0.056304827332, 0.060026943684, 0.024621814489, -0.048435062170, -0.016315620393, 0.003140769899, 0.062004342675, 0.071459606290, 0.071761593223, -0.040388379246, 0.008528754115, 0.024725362659, 0.009019449353, 0.038756005466, -0.005067415535, -0.010639686137, -0.061963248998, 0.000325307250, -0.070074319839, -0.070934690535, 0.053923875093, 0.001262433827, -0.061965793371, -0.071391172707, 0.063614130020, -0.008787967265, -0.004094220698, 0.056108132005, 0.063452512026, 0.044442698359, -0.052390895784, 0.068158119917, 0.056758970022, -0.069838024676, -0.032857783139, -0.026492848992, -0.043948635459, 0.044423840940, 0.026518814266, 0.035066530108, 0.072078675032, -0.071689292789, 0.021628431976, -0.030018541962, -0.034673552960, -0.028021428734, -0.049282733351, -0.001076400280, -0.071882657707, 0.042438670993, 0.007649838924, -0.036313854158, -0.002432242036, 0.008635967970, 0.065729439259, 0.002704292536, 0.020402632654, 0.061701908708, 0.033242724836, -0.019371371716, 0.000615850091, -0.042214404792, 0.038944490254, -0.028448749334, -0.017217837274, 0.011458158493, -0.035290937871, -0.071679502726, 0.036210201681, 0.062602832913, 0.044841095805, 0.019379854202, -0.053916323930, -0.000591121614, -0.062259096652, -0.062209505588, -0.071221120656, 0.066540271044, 0.055999115109, -0.013508316129, -0.007885321975, 0.009424708784, -0.053450927138, 0.044000856578, -0.063174217939, 0.017181277275, -0.071637898684, -0.036143839359, 0.071507409215, 0.036203525960, 0.058548748493, -0.026243306696, -0.008814327419, -0.043758846819, -0.056126777083, 0.067662596703, 0.002375148237, 0.066241219640, 0.023832157254, -0.046125002205, -0.067755572498, -0.039853431284, 0.031396150589, -0.009337797761, 0.064842611551, 0.048920042813, -0.027071483433, -0.010156169534, -0.018635507673, -0.038806214929, -0.009431466460, -0.002036616206, -0.055308029056, -0.051791559905, -0.029908608645, 0.002922259271, 0.055692791939, 0.024993076921, -0.049268107861, -0.043039672077, 0.048431187868, 0.048046782613, 0.045528493822, -0.034452177584, 0.022573255002, -0.063116073608, -0.066496975720, 0.036603353918, -0.063322484493, 0.029750674963, 0.071167245507, -0.059244915843, -0.030353944749, -0.063652813435, -0.017879802734, -0.027203455567, -0.049409732223, -0.045854911208, -0.056552480906, -0.002478666604, -0.057586204261, 0.014990799129, -0.061654929072, -0.004961013794, 0.010961756110, -0.016433984041, -0.068230450153, -0.019265793264, 0.065235167742, -0.030215363950, 0.037384487689, 0.017966575921, -0.065724700689, 0.034834124148, 0.023404680192, -0.054519116879, 0.043171614408, -0.026039410383, -0.038930583745, 0.051468871534, -0.045158378780, -0.005811370909, -0.008863128722, 0.000789530575, 0.023014463484, 0.001921094954, 0.028714656830, 0.051365889609, 0.048619568348, 0.045105025172, 0.058859512210, -0.034378793091, 0.049881860614, -0.046217672527, 0.041102066636, 0.027696244419, -0.010822001845, -0.005777038634, 0.000616811216, -0.044590845704, -0.050815582275, 0.051580473781, 0.021620623767, 0.069157257676, -0.065747708082, -0.042475201190, 0.032302707434, -0.029927380383, 0.019322209060, 0.040905565023, 0.010937489569, 0.044071026146, 0.013047769666, 0.010633267462, 0.071359381080, -0.036775209010, -0.020775411278, 0.014959432185, -0.026880215853, -0.042093269527, -0.032880958170, 0.003147408366, 0.031731724739, -0.056992720813, -0.037322904915, 0.014338284731, 0.005752541125, -0.051745019853, 0.071440562606, 0.065786942840, -0.015828508884, 0.008608937263, 0.042420037091, 0.007502958179, -0.017817549407, 0.010422661901, 0.027885966003, -0.009538456798, 0.018368601799, -0.066080927849, 0.014383740723, -0.023433007300, 0.022415176034, -0.004838258028, 0.067595958710, -0.036232467741, 0.036303788424, 0.035732984543, -0.047849286348, 0.018096432090, -0.035001765937, 0.056954458356, -0.012855298817, 0.055899992585, 0.036113679409, 0.003294572234, 0.006949797273, 0.047515362501, 0.027997568250, 0.048293896019, -0.064717523754, 0.051536254585, -0.053966585547, 0.003504596651, -0.031070124358, -0.055418372154, -0.008341789246, -0.068716473877, -0.055833648890, 0.049271926284, -0.068478494883, 0.043293878436, 0.072098404169, 0.040984563529, -0.024838853627, 0.045851677656, -0.067379385233, -0.026998218149, 0.064284831285, 0.016358189285, 0.033113501966, -0.055243574083, 0.017096064985, -0.043410830200, -0.028579503298, 0.054357871413, 0.045021332800, 0.015366241336, 0.047476097941, -0.019883207977, 0.015480302274, -0.067434087396, -0.034732002765, 0.042032875121, 0.041182793677, -0.070974588394, -0.056298807263, 0.056675374508, -0.055923894048, -0.054885491729, -0.007618092000, -0.008556991816, 0.044470518827, -0.067356452346, -0.048582844436, 0.061278343201, -0.067833982408, 0.040127046406, -0.066446661949, -0.014482025057, 0.019636265934, -0.061407655478, 0.034958340228, -0.044369384646, -0.003822915256, 0.026365399361, -0.020783446729, 0.032423287630, 0.029450967908, 0.058648020029, -0.010090146214, -0.059261262417, 0.034279800951, -0.028322387487, 0.016477137804, -0.028395548463, 0.024493798614, 0.053789675236, -0.041640862823, 0.065935388207, 0.023416765034, -0.070557951927, 0.054876938462, 0.041569851339, 0.019016355276, 0.012797348201, -0.040549602360, -0.044837206602, -0.006247535348, 0.064102903008, 0.013237155974, 0.030678838491, 0.018265880644, -0.044112458825, -0.055885285139, -0.005616851151, -0.040766127408, -0.043068028986, -0.006817594171, 0.026476882398, 0.045674741268, 0.065024316311, -0.056935820729, 0.011036172509, 0.021361768246, 0.014761179686, 0.047818884254, 0.036956444383, 0.013783015311, -0.014419753104, 0.028248451650, 0.016291759908, -0.026000179350, 0.014955490828, -0.047771051526, -0.060700129718, -0.041825078428, 0.013593435287, -0.009391702712, 0.048631489277, 0.000888809562, 0.036879360676, -0.030682243407, -0.068577453494, -0.057736914605, -0.049753136933, 0.013492211699, 0.032977849245, 0.060737952590, 0.047063283622, 0.046549841762, 0.007448971272, -0.013800926507, -0.015452671796, -0.043488934636, -0.043541789055, 0.028743907809, 0.006182938814, 0.054534271359, 0.048402369022, -0.034906219691, -0.041331492364, 0.020108990371, 0.008151933551, 0.028711095452, -0.054933771491, -0.045041773468, 0.001454286277, -0.010661520064, -0.069293513894, 0.044384613633, 0.036933660507, 0.022159352899, -0.020082511008, 0.013857796788, 0.008208133280, 0.001971520483, 0.069263398647, -0.047125328332, 0.066241413355, 0.043989531696, 0.041235893965, -0.015860479325, -0.010851804167, -0.000962369144, -0.002633176744, 0.004858665168, -0.023604243994, 0.064079061151, 0.057901486754, 0.016051433980, -0.015526141971, -0.030690863729, -0.061595082283, -0.067210130394, 0.049205817282, 0.070271089673, -0.035060197115, 0.013280779123, 0.004058018327, 0.009470216930, -0.004487633705, -0.017419170588, -0.071308240294, 0.006832465529, -0.030837528408, -0.033550787717, -0.050407186151, 0.007208682597, -0.056719932705, 0.065487265587, 0.001142024994, -0.042795773596, -0.031959936023, -0.044265594333, 0.010463751853, -0.007841207087, -0.062446285039, -0.049717023969, -0.037660874426, -0.014257065952, -0.063256889582, -0.061255052686, -0.029765106738, 0.034352019429, -0.043746978045, 0.006546668708, 0.010703213513, -0.007601447403, -0.012576278299, -0.034320134670, -0.060396850109, -0.069568723440, 0.004071772099, -0.057235728949, 0.054804652929, -0.009589217603, -0.052678789943, -0.024894669652, -0.043122299016, 0.037475973368, -0.041976198554, -0.055637411773, -0.039726275951, -0.045375987887, 0.026283174753, -0.035025030375, -0.037941459566, -0.068891003728, -0.032692015171, 0.033380016685, -0.013044945896, -0.014839433134, -0.032774243504, -0.036400023848, -0.064747340977, 0.013213723898, 0.035506226122, 0.000704839826, -0.005634970963, -0.044607259333, -0.061496369541, -0.020927101374, -0.062755480409, 0.027702115476, -0.039218757302, 0.057638242841, -0.034318845719, 0.027106828988, 0.001163668931, 0.069106891751, 0.043334297836, -0.069811403751, 0.052912056446, 0.036488756537, -0.029269631952, 0.000887349248, 0.054264187813, 0.035999894142, -0.047843884677, 0.046729326248, 0.051614679396, 0.030257157981, 0.052275091410, 0.023566164076, -0.047706782818, 0.060585051775, -0.023268029094, -0.059300631285, 0.070615276694, -0.051030762494, -0.005633972585, 0.053596526384, 0.039655730128, 0.032718613744, 0.001229137182, 0.030516974628, 0.050308510661, 0.012314125896, 0.033415444195, -0.006685867906, -0.000701121986, 0.042873509228, -0.002304933965, 0.047835335135, -0.012536291033, 0.038937054574, 0.071246981621, 0.037825025618, -0.023124992847, 0.044300623238, -0.044034235179, -0.030094042420, 0.058368608356, 0.062053307891, 0.064966306090, 0.034317001700, 0.041381426156, 0.009373277426, -0.019010432065, -0.038216710091, 0.056717351079, -0.001279361546, 0.022584937513, 0.003873445094, -0.014403011650, -0.057031400502, -0.034745544195, -0.067137755454, 0.009028963745, -0.021444566548, -0.068601727486, -0.035544659942, 0.002113908529, 0.036051712930, 0.000326424837, 0.021850429475, -0.008457347751, 0.059617653489, 0.038070075214, 0.062329500914, -0.056497745216, 0.048923186958, 0.024492710829, 0.011036083102, -0.001336432993, 0.017513565719, -0.058993533254, 0.049702964723, 0.034100681543, 0.048320189118, 0.070482537150, 0.037327446043, -0.026144023985, -0.033402469009, 0.061174571514, 0.047856464982, 0.015507400036, 0.043186768889, -0.070234373212, 0.033882424235, -0.018362302333, -0.070582665503, -0.070214502513, 0.028914995492, 0.044385522604, -0.001003220677, -0.022896252573, -0.013982005417, 0.037894211709, 0.015281826258, -0.020642388612, -0.002857580781, 0.051129490137, 0.029396839440, 0.067738220096, 0.020831793547, -0.055048197508, 0.054138720036, -0.003135345876, -0.055697340518, -0.048942543566, 0.050570234656, -0.007813088596, -0.002363316715, 0.043845586479, -0.063292250037, -0.067709803581, -0.054557263851, 0.030938431621, -0.031334400177, 0.048441544175, -0.046445451677, 0.053560048342, 0.050078406930, 0.021691992879, -0.069883793592, -0.033616341650, 0.027533628047, 0.022112712264, 0.027582600713, -0.046866957098, -0.012959275395, 0.015831053257, 0.062745586038, 0.058064118028, 0.045504726470, -0.045319795609, -0.065515093505, -0.016091112047, 0.058639854193, 0.026677854359, 0.002583831549, -0.066007539630, 0.001426428556, -0.060744006187, -0.028800226748, 0.027538605034, 0.062895923853, 0.028574943542, 0.056808337569, 0.023373439908, -0.019670899957, 0.056645616889, -0.050360161811, -0.042274452746, -0.047471538186, -0.003532022238, -0.054276108742, 0.026184715331, -0.047288671136, -0.030413445085, -0.011000398546, 0.020684614778, 0.054536581039, 0.019983626902, -0.040724571794, 0.016720160842, -0.057085566223, -0.043271977454, 0.001647703350, 0.022868551314, -0.035654954612, -0.037690039724, -0.071602605283, 0.007560878992, -0.025994777679, 0.059466436505, 0.009175561368, -0.046980723739, -0.025161162019, -0.006717853248, 0.039505966008, -0.061108332127, -0.007214188576, -0.056838124990, -0.031084302813, -0.010201748461, 0.040798403323, -0.053178600967, 0.016023471951, -0.022308655083, 0.063548684120, -0.043262634426, -0.003359749913, -0.032012812793, -0.002441585064, 0.003430709243, -0.033799126744, 0.053250208497, 0.011058971286, 0.066453859210, 0.072053998709, -0.043370638043, 0.063062533736, 0.058627307415, -0.063603721559, 0.062311366200, 0.069202423096, 0.046580813825, 0.015606321394, -0.016710698605, -0.050186946988, 0.065452724695, 0.054039657116, -0.059094205499, -0.033217895776, 0.059726476669, -0.021832227707, 0.068356126547, -0.042700588703, -0.031729180366, 0.055948585272, 0.013305023313, 0.020081564784, -0.033249415457, 0.028364837170, 0.018599770963, -0.006283976138, 0.055844932795, 0.017114460468, 0.070637583733, 0.052444890141, 0.045524053276, 0.006754830480, 0.013443067670, 0.038391545415, 0.038420431316, 0.047278568149, -0.052446864545, 0.033627234399, 0.018904477358, -0.071352876723, -0.046448908746, -0.064640045166, -0.010434653610, -0.021879803389, 0.032087765634, 0.015524543822, 0.000001512468, 0.027484573424, 0.031103298068, 0.049585185945, 0.049088269472, -0.018865212798, 0.057443946600, 0.004652172327, 0.032818518579, -0.065286435187, -0.038303017616, 0.047414571047, 0.049854449928, 0.068016022444, 0.050570495427, -0.021380782127, -0.006123736501, -0.044300004840, 0.062825858593, 0.056985542178, -0.058064904064, -0.038817178458, 0.069127291441, 0.046894349158, -0.036872942001, 0.030092202127, 0.036974720657, -0.039481703192, -0.002672217786, -0.063354261220, -0.029996275902, -0.055080525577, -0.000077016652, 0.015896677971, 0.016778454185, -0.056115284562, -0.026652697474, -0.038000460714, 0.039147868752, 0.070965185761, 0.050596527755, 0.065239667892, 0.015943102539, 0.065179407597, -0.054624214768, -0.061020340770, -0.004775926471, 0.054698035121, 0.063104718924, -0.012417033315, 0.069468170404, 0.012895680964, 0.018465451896, 0.028989084065, 0.035905703902, 0.005673170090, -0.017948318273, 0.017964936793, 0.008370108902, -0.021387029439, -0.057506624609, 0.040820501745, -0.011623598635, 0.061280310154, -0.001865632832, 0.025875262916, 0.007688410580, -0.004265718162, -0.060426600277, -0.062632612884, -0.067861214280, 0.027581535280, 0.047995589674, -0.024909865111, 0.067556783557, 0.042808696628, -0.023544762284, -0.061412196606, -0.054291028529, -0.038595180959, 0.024540871382, -0.013226233423, -0.019647687674, -0.031157549471, 0.071106955409, -0.028500523418, -0.067361287773, 0.012071445584, 0.055122181773, -0.030127111822, -0.050224922597, -0.027476936579, 0.055636212230, 0.035516269505, -0.027825035155, 0.015963077545, -0.065309576690, 0.062876492739, 0.002845779061, 0.033848591149, 0.014050535858, -0.005889452994, -0.009326823056, -0.017324794084, -0.051581852138, -0.064843215048, -0.063575655222, -0.049228049815, 0.046122021973, -0.011049367487, 0.011795401573, -0.070940226316, 0.054276362062, 0.020636864007, -0.069297641516, 0.071146428585, -0.042073830962, 0.032570265234, 0.008512496948, 0.015950605273, 0.002869956195, -0.071981132030, -0.068357020617, -0.032462138683, 0.059024229646, -0.030812390149, -0.005271911621, 0.058493196964, -0.013688430190, 0.036024719477, 0.035791948438, -0.067125298083, 0.013491228223, -0.037281524390, 0.002642109990, -0.027336254716, -0.037699658424, 0.055510595441, -0.063327543437, 0.025459311903, 0.071940079331, -0.028462670743, 0.031671606004, 0.009520687163, -0.064177021384, -0.026154313236, 0.028978653252, 0.047379657626, -0.051816888154, 0.067215129733, -0.033857919276, 0.029466666281, -0.007323309779, 0.028969056904, -0.017714105546, -0.015295781195, -0.046924736351, 0.050756409764, 0.048747166991, 0.068958058953, -0.063422091305, 0.005482107401, -0.050304308534, -0.067983470857, -0.010672427714, 0.002108380198, 0.037098705769, -0.069859534502, -0.025472082198, 0.061851575971, 0.036295786500, 0.004317253828, -0.067060790956, -0.067674919963, 0.007093191147, -0.041002403945, 0.047841668129, -0.008693866432, 0.033525682986, 0.050568461418, -0.046150483191, 0.001362539828, -0.003139510751, -0.070837728679, 0.040656797588, -0.068255618215, 0.016797058284, 0.036368072033, -0.068699754775, -0.034463498741, 0.037830151618, -0.029866162688, 0.064680784941, -0.001837231219, 0.040994510055, 0.032083027065, 0.009906657040, 0.041607022285, 0.056986287236, -0.070746742189, 0.070964574814, -0.047203890979, -0.008849702775, 0.054105773568, -0.061036668718, 0.068454504013, 0.014003582299, 0.048285365105, -0.033417660743, -0.033335294574, 0.042675107718, -0.018967777491, -0.064927078784, -0.027782019228, 0.044112592936, 0.061442241073, 0.033372148871, 0.054826200008, 0.014211952686, 0.000972777605, 0.061573922634, -0.017797607929, -0.050537869334, 0.036237806082, -0.018543742597, -0.034672245383, 0.058068320155, 0.017746984959, 0.047016516328, 0.057966053486, 0.044487796724, 0.042187802494, -0.033530656248, -0.004199631512, -0.048306457698, 0.049281410873, -0.032138142735, 0.030693084002, -0.058486461639, 0.067427337170, 0.070953741670, -0.019652832299, -0.032688301057, 0.025120317936, -0.023402120918, -0.014252956957, -0.037957478315, 0.042189285159, 0.062820717692, -0.005503319204, 0.066730812192, -0.022778078914, 0.004652246833, 0.069418519735, -0.037058219314, 0.054132282734, -0.015831347555, 0.030954897404, 0.002328209579, 0.012039385736, -0.011948160827, 0.000801354647, 0.059431031346, -0.020257208496, 0.029041491449, 0.067204520106, -0.000890530646, 0.038625948131, -0.028960727155, 0.035355150700, 0.056088000536, -0.019491542131, -0.010973662138, 0.034697078168, -0.057037785649, -0.007808767259, -0.036086697131, 0.019703008235, -0.014648906887, 0.037905529141, 0.011281654239, -0.007150366902, 0.030547633767, -0.050212118775, -0.026086453348, 0.003609724343, 0.046458393335, -0.043635413051, -0.025101147592, 0.016607098281, 0.000229686499, -0.067813657224, -0.033407974988, 0.009415917099, -0.020447872579, 0.004135705531, -0.071298465133, -0.045211169869, -0.025948990136, -0.029975645244, -0.028486087918, 0.024719320238, 0.003732167184, -0.033097520471, 0.069348379970, 0.063630506396, 0.021481163800, -0.068293407559, 0.037594094872, 0.066082835197, 0.020343445241, 0.059057161212, -0.006609246135, 0.011734716594, -0.021926984191, 0.049025982618, 0.035003006458, -0.012845560908, 0.071902036667, 0.006936408579, -0.032790489495, 0.037917524576, -0.037784364074, 0.024492435157, 0.046233296394, -0.062122784555, -0.051832407713, -0.040602959692, -0.015334617347, 0.057520583272, 0.017983607948, 0.039012864232, -0.020068313926, 0.045424304903, 0.058691099286, 0.037321291864, 0.045708678663, -0.013766083866, -0.001295626163, -0.071634508669, -0.009090594947, 0.043970882893, -0.007191337645, -0.017921425402, 0.052171923220, 0.053668260574, 0.069601744413, -0.004154376686, -0.057568911463, -0.041147109121, -0.061431039125, 0.032765522599, 0.027965493500, -0.043736342341, -0.047765165567, 0.031038329005, -0.068105459213, -0.037162128836, 0.048885233700, -0.048167951405, 0.010697804391, 0.016018070281, -0.052798837423, 0.006547115743, -0.014463216066, 0.018800154328, 0.036809675395, -0.054113715887, 0.059393465519, -0.015397850424, -0.016010843217, 0.059810936451, 0.052497416735, -0.030378531665, -0.054388619959, -0.029939599335, -0.052481397986, -0.020376756787, 0.061612606049, 0.002050623298, -0.036323834211, 0.022690691054, 0.047988638282, -0.036403793842, 0.052434645593, -0.034566856921, 0.023322835565, -0.004086174071, 0.040982477367, 0.041951164603, 0.068429738283, 0.025133945048, 0.043096505105, 0.034372359514, 0.047461107373, 0.045667916536, -0.054646737874, 0.019708946347, 0.070937320590, -0.023542556912, -0.022389970720, -0.057844299823, 0.038449048996, 0.042870499194, 0.016977399588, -0.044439721853, -0.026872768998, 0.053708672523, 0.014338456094, 0.004799753428, -0.031751651317, 0.062134876847, -0.047550462186, -0.003759264946, -0.057594068348, -0.065901204944, -0.046104304492, -0.018058422953, -0.041689816862, -0.006008550525, -0.016482349485, -0.002898000181, -0.033510696143, 0.023402310908, 0.040211342275, -0.053947124630, -0.064835920930, 0.003883890808, -0.027626734227, 0.061423495412, -0.026384964585, 0.063193261623, -0.047849938273, 0.044374182820, -0.014411702752, -0.034773025662, 0.024402432144, -0.060580354184, 0.061291977763, 0.045978918672, -0.054302915931, -0.049255721271, -0.019689928740, -0.005323618650, -0.029521655291, -0.008804865181, -0.032431494445, -0.011399984360, -0.041719943285, 0.020568691194, -0.023348316550, -0.016966383904, -0.044067859650, 0.038567669690, -0.020507544279, 0.022414937615, -0.041539020836, -0.000899724662, 0.005996681750, -0.046401042491, -0.003163307905, -0.032002210617, 0.060612693429, -0.002069786191, 0.037213645875, 0.050365805626, 0.051878437400, -0.024425469339, -0.031330149621, 0.031728923321, 0.032791644335, 0.046147592366, 0.067271903157, 0.066886693239, -0.021196141839, -0.000973276794, 0.002268508077, 0.044813975692, -0.055207885802, -0.042506739497, 0.026049852371, -0.055873017758, 0.037949733436, -0.041820429265, -0.044842008501, -0.062913663685, -0.006131544709, -0.062453698367, -0.065731033683, -0.018298380077, 0.013532765210, -0.014937993139, -0.021773982793, -0.017318323255, 0.066900670528, 0.025472618639, 0.070272743702, 0.012396611273, -0.030566547066, -0.044708229601, 0.009053170681, 0.067769080400, 0.056035727262, 0.047462351620, 0.035392627120, 0.050221562386, 0.071555867791, 0.042661614716, -0.069438077509, -0.031991165131, -0.069218076766, -0.020818203688, 0.044468648732, -0.071626245975, 0.000432088971, -0.006067574024, 0.049192592502, 0.037154711783, -0.069229729474, -0.066454231739, 0.061877369881, 0.064795598388, 0.066302776337, -0.053936749697, -0.067753434181, -0.014890398830, 0.047476164997, -0.020973905921, -0.009241320193, 0.034053280950, -0.006899155676, 0.007351204753, 0.045822978020, 0.046871758997, -0.002382740378, 0.038718774915, -0.049974292517, -0.048513900489, -0.066241405904, 0.049061596394, 0.055507779121, 0.068581253290, 0.040457099676, 0.004064679146, 0.044541515410, -0.045103251934, -0.044268690050, 0.022546209395, -0.008714407682, -0.057245999575, 0.057255133986, -0.048427954316, 0.010562770069, -0.006533384323, 0.012406557798, 0.050090603530, 0.039689831436, 0.033341899514, 0.017371609807, -0.063556216657, -0.025260046124, 0.054400578141, -0.022053346038, -0.039749711752, 0.063182488084, -0.021467898041, -0.066138066351, -0.029759585857, -0.015508968383, -0.018063344061, -0.013683855534, -0.048369951546, 0.042921192944, 0.032777786255, 0.071257606149, -0.022962618619, 0.053005397320, -0.027547877282, 0.066148713231, 0.022309549153, 0.064099967480, -0.030077643692, 0.028990514576, -0.059014387429, -0.071141749620, 0.041732594371, -0.033456083387, 0.000328950584, 0.006692178547, -0.029544901103, 0.068719044328, 0.050760932267, -0.006951741874, -0.030967935920, 0.016079030931, 0.063986465335, -0.059251867235, 0.059571951628, -0.068809784949, 0.054450392723, -0.021505083889, 0.045432306826, -0.050734505057, 0.072013646364, 0.041288875043, -0.034107998013, 0.051415152848, -0.021615222096, 0.023930974305, -0.043918885291, -0.020986050367, -0.031850244850, 0.043470710516, 0.039288014174, -0.022206604481, -0.007451824844, 0.006925426424, 0.043366149068, 0.042044699192, 0.062676042318, 0.007980354130, -0.015372935683, -0.016221933067, -0.010935686529, -0.047425888479, -0.003098592162, -0.017995186150, 0.025539964437, -0.000172406435, 0.015457674861, 0.029915183783, 0.049092844129, 0.057373717427, 0.016099750996, 0.002669051290, 0.012297384441, -0.030921977013, 0.000255756080, -0.041440360248, 0.011253193021, 0.057123884559, 0.040675193071, -0.030636165291, -0.012070875615, -0.016491729766, 0.024944603443, -0.070319302380, 0.016129121184, 0.000765405595, 0.058516934514, 0.036443933845, -0.021091476083, 0.038198851049, 0.044236049056, -0.007884860039, -0.056962799281, -0.056938316673, 0.000868581235, -0.007949791849, -0.034505017102, -0.002012237906, -0.027982562780, 0.046444505453, 0.035795509815, -0.026417367160, 0.056840717793, 0.043667003512, 0.024711646140, -0.047077268362, -0.014744956046, -0.004628583789, 0.066370770335, -0.008571594954, -0.065107233822, 0.005769297481, 0.007253281772, 0.048700056970, -0.035931132734, -0.022788472474, 0.001524761319, 0.000098079443, -0.035564158112, -0.027718357742, 0.054964050651, -0.042843744159, 0.065971016884, -0.023336254060, 0.066400781274, 0.030114054680, 0.059409946203, 0.046269863844, -0.045098811388, 0.005078069866, -0.018334858119, -0.058776523918, -0.026802580804, 0.071801453829, -0.033197093755, 0.033196404576, -0.060592122376, 0.042046934366, 0.037634342909, 0.042490169406, 0.040855534375, 0.029288783669, 0.032178200781, -0.061651520431, -0.069716840982, 0.055608019233, 0.042728014290, 0.021699912846, -0.010432984680, -0.068530887365, 0.006633900106, 0.005868628621, -0.001399427652, 0.025684721768, -0.000731512904, 0.067002803087, 0.048631004989, 0.065641418099, -0.028000973165, -0.068544946611, -0.058658007532, 0.032194100320, -0.050228446722, 0.025310218334, -0.058045752347, -0.034862395376, -0.045117639005, 0.048655077815, 0.004707477987, 0.065141975880, -0.021999232471, -0.026668373495, 0.028552450240, -0.053361196071, -0.001707233489, 0.064282357693, 0.064101636410, 0.006942033768, 0.007449775934, 0.028681911528, -0.009233474731, -0.054707162082, -0.050847224891, 0.019444689155, -0.028152372688, -0.067804828286, 0.011950813234, -0.021472305059, -0.056997712702, 0.008497230709, 0.064064040780, 0.061564773321, 0.057376027107, -0.020868051797, 0.056964814663, 0.041568428278, -0.051629014313, 0.018153227866, 0.064436137676, -0.032160717994, -0.007978752255, 0.033670648932, -0.016713637859, -0.070892877877, -0.058697015047, 0.031645506620, -0.048848204315, 0.029388561845, 0.048816047609, -0.032513432205, 0.059635415673, 0.052894055843, 0.068865925074, 0.017778247595, 0.065392225981, -0.026309311390, -0.064419873059, 0.029431752861, 0.072144851089, 0.045593753457, -0.040416561067, -0.009153604507, 0.052032694221, -0.034308709204, 0.045376971364, -0.044309727848, -0.008236505091, -0.033907249570, 0.014535948634, 0.060426950455, 0.011860869825, 0.024443708360, 0.041423499584, 0.063073441386, -0.059646926820, 0.002017393708, -0.000548094511, 0.032410569489, 0.058584243059, -0.056703962386, -0.029813319445, -0.059635277838, 0.006483137608, -0.033875934780, -0.070877976716, -0.012640547007, 0.062676474452, 0.038381703198, -0.028333656490, 0.052827209234, 0.009903110564, -0.062938712537, -0.010786421597, 0.000621803105, -0.022261597216, -0.051080577075, 0.022893466055, 0.036834947765, -0.062825083733, -0.038167688996, -0.071288175881, -0.015528619289, -0.003032743931, -0.051855482161, -0.069492124021, -0.026964236051, 0.055196210742, -0.049673594534, 0.043327637017, 0.050114125013, -0.021645624191, 0.030266672373, -0.069710575044, -0.072022393346, 0.012642920017, 0.056824892759, -0.061739582568, 0.030903927982, -0.040735069662, -0.043459765613, -0.041074171662, 0.053418263793, 0.044723302126, -0.022647552192, 0.000446781516, 0.002537168562, -0.059686705470, 0.059663817286, 0.007182374597, 0.008773855865, -0.037201669067, 0.039850078523, 0.012211278081, -0.026431422681, 0.057981714606, 0.035541802645, 0.045910090208, -0.059057969600, -0.042756628245, 0.025694787502, 0.066923514009, -0.059521440417, -0.058588370681, 0.060413777828, 0.054420828819, 0.040971174836, -0.011857327074, -0.045817885548, 0.043201915920, 0.037612423301, 0.051862105727, 0.041185118258, 0.011757530272, 0.048181988299, 0.054717689753, -0.016197793186, -0.027721472085, -0.005049347878, 0.024670317769, -0.055769227445, 0.058782845736, 0.035293154418, -0.050900425762, 0.029051080346, -0.040516290814, 0.068457648158, 0.052072092891, -0.031288731843, -0.006060227752, -0.006159059703, 0.002881772816, 0.021112844348, 0.039099119604, 0.045316919684, -0.013021443039, -0.014649201185, -0.015668798238, 0.005261041224, -0.042749129236, 0.061323925853, 0.033206209540, -0.013812456280, -0.041786603630, -0.014482229948, -0.013401169330, 0.048654459417, 0.016788452864, -0.050431344658, 0.018472731113, -0.070116281509, 0.045485161245, 0.055504009128, 0.032551661134, -0.008824378252, 0.051244415343, -0.032832060009, 0.019521892071, -0.006682805717, -0.046901114285, 0.000643394887, -0.009177453816, 0.005062699318, -0.019554737955, 0.019775375724, 0.026792533696, -0.061501070857, -0.039184067398, 0.041599981487, -0.069903701544, -0.003543585539, 0.027640983462, -0.005512237549, -0.056895077229, 0.023608148098, -0.061249822378, -0.009705517441, -0.021489012986, -0.067261852324, -0.053313173354, -0.021458506584, -0.014435671270, -0.070440642536, -0.007885269821, -0.049790494144, -0.031043473631, -0.050611168146, -0.052327968180, -0.030480790883, 0.004380829632, 0.061742872000, 0.011980094016, -0.021082784981, 0.063790827990, -0.014893513173, 0.030400834978, -0.028668597341, 0.005507968366, 0.045069031417, -0.023421891034, 0.043999321759, -0.067089579999, -0.025871165097, 0.010762587190, -0.012781605124, 0.051849067211, 0.051652841270, 0.034313753247, -0.022076524794, -0.068353302777, -0.055106230080, -0.069148287177, 0.000673577189, 0.016690254211, -0.069114238024, -0.001895658672, 0.010902270675, -0.029004085809, -0.016007747501, 0.068254530430, -0.041189368814, 0.007860645652, 0.033601462841, -0.018139600754, 0.058262705803, -0.048163957894, 0.004114255309, -0.009418614209, -0.044729787856, 0.003915794194, -0.033625584096, 0.025792688131, -0.029054570943, 0.053610175848, 0.005315445364, -0.049660757184, -0.063904881477, 0.003889776766, 0.063522025943, 0.039838671684, 0.039365679026, -0.070947751403, 0.031101338565, -0.071786649525, -0.052745051682, -0.020053654909, 0.060809716582, 0.040690369904, -0.048640023917, 0.047365508974, -0.022108975798, 0.054011151195, -0.004790686071, 0.046268723905, 0.003276899457, -0.006476260722, 0.015431627631, -0.065955489874, 0.056069999933, -0.051586218178, -0.042052507401, 0.026039980352, 0.020232290030, -0.011398710310, 0.036338031292, -0.009903941303, -0.034620713443, 0.022802151740, -0.043516188860, 0.049093894660, 0.024894893169, -0.046697422862, -0.017237883061, -0.019736938179, -0.006421767175, 0.067619487643, 0.039413206279, -0.051121801138, 0.023916333914, 0.015334241092, 0.004719384015, 0.016861528158, -0.002820834517, -0.021639861166, -0.036975011230, -0.043397568166, -0.038996469229, 0.019317120314, -0.011014558375, 0.051468528807, 0.054469317198, -0.027823902667, 0.059419408441, -0.039596728981, 0.001508533955, -0.059839844704, -0.025351241231, -0.071296229959, 0.038093581796, 0.039290577173, 0.011663191020, 0.032541170716, -0.040162853897, 0.020725086331, 0.039526782930, 0.033871114254, -0.011966828257, 0.007788635790, -0.041712872684, -0.058781497180, -0.060690216720, 0.013848707080, -0.059991329908, 0.002480283380, -0.027614690363, 0.049775406718, -0.004462063313, 0.060157701373, 0.029699273407, -0.007619738579, 0.002136498690, -0.046865411103, -0.047112252563, -0.042797684669, -0.035491477698, 0.016454204917, -0.047621317208, -0.037952210754, -0.017416398972, -0.030028793961, 0.061792150140, -0.002298340201, -0.001575931907, -0.018986843526, 0.021298743784, -0.053916428238, -0.005166217685, 0.071497634053, 0.054393693805, 0.012567415833, -0.048986837268, -0.054906778038, -0.045865803957, -0.015475228429, -0.056206926703, -0.037367764860, -0.063966192305, -0.016018982977, 0.030580140650, -0.037207141519, -0.029940802604, -0.065881572664, 0.050884753466, 0.036977730691, -0.008352063596, -0.051984600723, -0.039481859654, -0.030906680971, -0.052506931126, -0.028588775545, -0.057837966830, -0.033977694809, -0.048471417278, 0.008582383394, 0.021830834448, 0.030598051846, -0.010306052864, -0.029388166964, -0.011700872332, 0.052721478045, 0.024989508092, -0.005855694413, -0.023922681808, 0.064957350492, -0.020192801952, -0.050424687564, 0.009572543204, 0.044981501997, 0.063158079982, 0.035384245217, -0.016879647970, -0.018763780594, -0.010962422937, 0.072050288320, -0.009545065463, -0.009874638170, -0.031027678400, 0.005030266941, 0.024105139077, 0.007662415504, 0.067050531507, 0.020354442298, -0.038933131844, 0.067363813519, 0.013519756496, -0.060734093189, -0.010517638177, 0.027883127332, -0.067203603685, 0.002562031150, -0.027633652091, -0.071613565087, -0.018371216953, 0.052101604640, 0.046775333583, -0.053063265979, -0.028578124940, 0.040991663933, -0.015581905842, -0.006327539682, 0.062949568033, 0.028088755906, -0.003533259034, 0.030077658594, -0.025545880198, -0.037315472960, -0.041559062898, 0.020588725805, -0.037684909999, 0.011104099452, 0.059666916728, 0.049470469356, -0.038989841938, -0.051779121161, -0.031995106488, 0.062456682324, -0.029014170170, -0.013097822666, 0.028195321560, 0.031101249158, -0.032943230122, 0.026525609195, -0.052820675075, -0.039380565286, -0.046543288976, 0.013514369726, -0.050211966038, -0.045387141407, 0.041324734688, 0.057679653168, 0.012899570167, -0.043134965003, 0.015158712864, 0.023143924773, -0.003495782614, -0.019028965384, 0.005554735661, -0.014447867870, -0.064128704369, -0.055396676064, -0.011690512300, 0.049298755825, 0.028629019856, 0.042553819716, 0.041470177472, 0.012050002813, 0.038218036294, -0.064266234636, -0.031442608684, -0.009420454502, -0.060029096901, 0.064595222473, 0.015940554440, 0.070351600647, 0.005485340953, -0.061629377306, -0.048928625882, 0.037767827511, -0.044104248285, 0.030256800354, 0.019910961390, -0.023920271546, 0.040520712733, -0.005247242749, 0.067986771464, -0.032298248261, -0.029413167387, 0.035072550178, 0.004987351596, -0.011101897806, 0.052006416023, -0.029611866921, 0.071913614869, -0.061689786613, 0.018727786839, -0.017124664038, -0.058561358601, -0.059344198555, 0.018736131489, -0.022598564625, 0.037994042039, 0.035242520273, 0.029113605618, -0.041210874915, 0.014747276902, -0.050948534161, 0.038863033056, -0.033946927637, 0.053108021617, -0.002667762339, -0.064893446863, -0.000753864646, 0.044940635562, -0.039767365903, 0.035333245993, -0.057581625879, -0.058936234564, -0.056093566120, -0.002848364413, 0.012249015272, -0.064431659877, 0.017983660102, 0.038607358932, -0.008481539786, -0.064162842929, 0.003150969744, -0.005024984479, -0.014911960810, -0.003334715962, -0.048953279853, -0.063744403422, -0.061201229692, -0.054548248649, -0.001566998661, 0.035003557801, -0.028481494635, 0.048492342234, -0.051662392914, 0.056446865201, 0.071041002870, 0.037857040763, -0.052752364427, -0.004221536219, 0.059172958136, -0.006259009242, -0.037320774049, -0.043622680008, -0.061206445098, -0.031846787781, -0.005619846284, -0.034881804138, 0.033749677241, -0.055455505848, 0.016605637968, -0.048992443830, -0.016532678157, 0.056624367833, -0.042695909739, 0.069717660546, -0.037341281772, 0.006630808115, 0.051203757524, 0.016598716378, 0.043689057231, -0.036975681782, 0.061317667365, 0.057404473424, 0.022726461291, -0.028448700905, 0.008291997015, 0.027179419994, 0.032439373434, -0.057546336204, -0.048777759075, 0.054184645414, -0.019141338766, 0.044371843338, -0.045712564141, -0.048751555383, 0.053876921535, 0.042275473475, -0.013222001493, 0.027394860983, -0.057796809822, 0.070795491338, 0.015620738268, -0.048126138747, 0.057354211807, 0.011455252767, 0.033154055476, 0.069047525525, -0.028427984565, 0.015453957021, 0.062712863088, -0.035281457007, -0.062099438161, 0.019908018410, 0.052067898214, 0.056520342827, -0.042568959296, -0.025335412472, -0.014934260398, -0.019999455661, 0.012138672173, 0.051037132740, -0.012511737645, -0.044342696667, -0.025655761361, -0.048555761576, 0.028215035796, 0.046638406813, -0.052783507854, 0.057547941804, 0.034184344113, 0.034510314465, 0.055407568812, 0.025387339294, 0.067765504122, -0.025357350707, -0.006452202797, -0.038329977542, 0.022952362895, 0.027284547687, 0.026053793728, -0.035767570138, 0.009681373835, -0.007411077619, -0.057799562812, -0.030527573079, 0.026439100504, 0.000756219029, -0.040059324354, -0.024612572044, 0.021656140685, -0.046396587044, -0.028563655913, 0.013353712857, -0.011032178998, 0.030864857137, -0.028985161334, 0.000801645219, -0.010316684842, -0.033219236881, -0.031468678266, -0.022362526506, -0.017922095954, 0.061351001263, 0.016016729176, 0.026721812785, 0.011335529387, -0.054879419506, -0.048511885107, -0.062220055610, -0.023874159902, 0.053939402103, -0.071354128420, 0.051016189158, 0.043854050338, 0.052380964160, -0.032561145723, -0.032508011907, 0.024144060910, -0.006643317640, -0.025734305382, 0.058058634400, -0.044262446463, 0.034910626709, 0.001625970006, -0.030398026109, -0.024206656963, -0.010358806700, 0.058435291052, 0.045717880130, 0.050430521369, 0.053690373898, -0.002789877355, -0.019461944699, 0.058018267155, 0.055155560374, 0.027075216174, -0.058648113161, -0.001720897853, 0.052852198482, -0.005054078996, -0.056390844285, 0.038100786507, -0.069979824126, 0.000976115465, 0.006790459156, -0.051228929311, -0.054852936417, 0.032122343779, 0.031167566776, -0.015021186322, 0.052001066506, -0.058010134846, 0.001379176974, -0.045245684683, -0.069832362235, 0.040787205100, -0.067311629653, 0.060411453247, 0.055648118258, -0.065719604492, 0.065311461687, -0.064143247902, 0.039417989552, 0.003843925893, -0.064984589815, -0.013833153993, 0.012785181403, 0.032906681299, 0.070910155773, 0.031789951026, -0.054570905864, 0.071577250957, -0.003164097667, 0.047135360539, -0.008903406560, -0.024333517998, 0.001296401024, -0.012815911323, -0.064202293754, -0.044592704624, 0.070063084364, -0.005559623241, 0.006410308182, 0.070979803801, 0.063382744789, -0.034126751125, -0.043581761420, -0.036099515855, 0.063799381256, -0.031455546618, -0.047797169536, 0.041358247399, 0.069634035230, -0.036264989525, -0.049137391150, -0.023601867259, 0.026844121516, -0.003692798316, -0.027159854770, -0.028954979032, -0.009665355086, -0.003007367253, 0.036817952991, 0.032119683921, 0.070592522621, 0.032468900084, 0.040276005864, 0.059763908386, 0.053516283631, -0.011249907315, 0.063043653965, -0.003091655672, 0.006366670132, -0.009617470205, 0.067158922553, 0.032070726156, 0.046439550817, -0.065467588603, -0.065404683352, -0.070925652981, -0.059608936310, -0.011612586677, -0.030581448227, 0.034552007914, -0.056243024766, 0.012326702476, -0.009485498071, 0.011439628899, -0.062543876469, 0.045601069927, -0.067761056125, 0.039278805256, 0.069683998823, 0.010436750948, -0.018620640039, -0.050338000059, -0.001327589154, 0.040600083768, -0.029246732593, -0.020065736026, -0.063176073134, 0.015185661614, -0.057345591486, -0.068139292300, -0.003049470484, -0.057099316269, 0.011275976896, 0.056368201971, -0.054116763175, 0.012644037604, 0.053205728531, -0.010301150382, -0.063849225640, -0.007320158184, 0.023239552975, 0.056711077690, 0.017670437694, -0.069748446345, -0.019937444478, -0.021551523358, -0.002187564969, 0.032606624067, -0.062460202724, -0.057447157800, -0.063844248652, 0.059590607882, -0.061817649752, 0.009859323502, 0.026361018419, 0.015935823321, -0.038353018463, -0.005530476570, -0.028147589415, 0.001032367349, 0.001627810299, 0.000826925039, 0.020700216293, 0.021086849272, -0.001143969595, -0.045891754329, 0.014561429620, 0.048956274986, 0.045794054866, -0.060041297227, -0.008921608329, -0.040094543248, -0.069880165160, 0.000200279057, -0.032617028803, -0.021128021181, 0.022142425179, 0.048454552889, 0.017306141555, -0.023536328226, 0.066151782870, -0.020826410502, -0.024467486888, -0.039551682770, 0.021456666291, -0.015760544688, 0.027908883989, -0.016347918659, 0.020586900413, -0.006911888719, 0.045790731907, -0.070498406887, 0.010030530393, 0.017144367099, 0.035661146045, 0.060250043869, -0.047429621220, 0.059035211802, 0.009536154568, 0.015505596995, 0.056600689888, -0.054574348032, -0.030475489795, -0.027594093233, 0.038013949990, -0.032564897090, -0.034598894417, -0.010316085070, -0.070872835815, -0.036173485219, -0.054794762284, 0.027750946581, 0.065949186683, -0.021240241826, -0.066071510315, 0.068522080779, -0.022596277297, 0.018420509994, -0.052363000810, -0.064046114683, 0.071350097656, -0.028160423040, 0.024315454066, 0.005338072777, 0.004843853414, 0.034951299429, 0.015774615109, 0.063293412328, 0.020301841199, 0.036952197552, -0.063003428280, 0.022808618844, -0.009403839707, 0.032259792089, 0.050667107105, 0.070448368788, 0.012172982097, -0.010505817831, 0.039189919829, 0.044162221253, 0.058434888721, 0.012503445148, 0.030366592109, -0.030485279858, 0.054421648383, 0.030541561544, 0.011734627187, -0.041527025402, -0.021223429590, 0.042424306273, -0.016784030944, -0.018318030983, -0.065721429884, 0.041305236518, -0.020301237702, -0.019611518830, -0.050154063851, -0.051412194967, -0.014179948717, -0.060475859791, -0.036421447992, 0.054232761264, -0.052717849612, -0.062637120485, -0.014095429331, -0.070236399770, 0.038195528090, 0.053141862154, -0.027224965394, 0.067496791482, 0.005568981171, -0.004576206207, -0.017859362066, -0.033186234534, 0.036803528666, 0.048232384026, 0.024316743016, -0.037608943880, 0.001499056816, -0.063872314990, -0.034101027995, -0.011715978384, -0.006556905806, 0.067896366119, -0.011428289115, -0.071224913001, -0.041250228882, -0.035883918405, 0.026971429586, -0.019201904535, 0.011311538517, -0.054495990276, 0.067961663008, 0.002254396677, -0.014692820609, -0.005343712866, -0.002014644444, -0.033915493637, 0.046862021089, -0.041608892381, -0.007659502327, -0.054874755442, -0.002716355026, 0.010237276554, -0.007494769990, -0.035498771816, -0.028569746763, 0.025407940149, -0.027320168912, 0.024121068418, 0.034632846713, 0.039508067071, 0.019601613283, -0.012499142438, 0.071649387479, -0.037121299654, 0.043885610998, -0.010181769729, 0.047348529100, -0.036089897156, 0.031926728785, 0.010510019958, -0.038413222879, 0.031373955309, -0.023946084082, -0.013485755771, -0.021370287985, -0.068950258195, -0.005475327373, -0.020600490272, 0.066318646073, -0.002678170800, 0.054389744997, -0.000681236386, 0.023102074862, 0.049647368491, 0.050087869167, 0.023497030139, 0.006421819329, 0.051634222269, -0.063759282231, 0.020555824041, -0.024404976517, 0.062176987529, -0.050097282976, 0.046201325953, -0.022209271789, 0.030943587422, 0.038855344057, 0.011650025845, 0.025384895504, 0.069316565990, 0.042451217771, 0.028709687293, 0.051493376493, 0.061899572611, 0.065736293793, -0.068166926503, 0.055198505521, -0.068303525448, -0.021404407918, 0.033650167286, 0.002826645970, 0.019463494420, -0.014340434223, -0.042404018342, 0.028823800385, 0.018663726747, -0.005619756877, -0.063961081207, -0.067788086832, -0.019409757107, 0.040818609297, -0.058017656207, -0.042718343437, 0.054197207093, 0.038936793804, 0.004527859390, 0.030360758305, 0.060758993030, 0.024744592607, 0.060328692198, 0.053825855255, -0.048425871879, 0.065573096275, 0.033125668764, -0.045524135232, -0.054814584553, 0.050964087248, 0.058978974819, 0.066929847002, -0.062861837447, -0.062960907817, 0.070257663727, 0.018746212125, 0.040326505899, 0.071995973587, 0.067491009831, -0.022520139813, -0.055679120123, -0.058963488787, 0.053948834538, 0.007536269724, 0.021869048476, 0.057632431388, 0.005212776363, -0.014335684478, -0.066593915224, -0.024599839002, 0.051964551210, -0.058108024299, 0.027960896492, -0.002214066684, -0.020734596997, 0.052430264652, 0.047412522137, -0.026796817780, 0.022570587695, 0.051974706352, 0.046402417123, -0.060127895325, 0.068095013499, 0.001383304596, -0.027820132673, -0.050803586841, -0.055442735553, -0.022322025150, -0.048430450261, 0.060000851750, -0.017929580063, -0.029191549867, 0.046422190964, 0.042747803032, -0.054161913693, -0.012589871883, 0.030557051301, -0.014626283199, -0.069225221872, 0.001757062972, 0.023916691542, -0.066403873265, -0.020158495754, -0.069984726608, 0.062958270311, -0.057435441762, 0.068385496736, 0.031130589545, 0.016359843314, 0.020502142608, 0.032327100635, -0.031773831695, 0.046745449305, -0.024551074952, 0.021193303168, 0.007217884064, -0.012008536607, -0.065111607313, -0.014532696456, 0.031152181327, -0.031841728836, -0.042391009629, -0.069523058832, 0.071035057306, -0.037735775113, 0.057763159275, -0.064989916980, 0.064571782947, -0.028307158500, 0.046411983669, -0.014513287693, -0.020480390638, 0.019346527755, -0.009189754725, -0.019819151610, 0.028617255390, -0.037244170904, -0.061454162002, 0.033224947751, -0.028965871781, -0.044180110097, 0.050362057984, 0.047843679786, 0.057379752398, -0.007350943983, -0.025410465896, 0.014899618924, -0.061041161418, 0.030606620014, 0.061165198684, -0.049028128386, 0.028521500528, -0.017700545490, -0.000653512776, 0.023251757026, 0.063123703003, -0.025291949511, -0.033902052790, -0.042537331581, -0.023369807750, -0.069702059031, 0.002995833755, -0.016219317913, 0.039536021650, -0.012833911926, -0.060408189893, 0.057554736733, 0.053733035922, -0.002398431301, -0.070902705193, -0.006408341229, 0.009208030999, 0.046789526939, 0.018412306905, -0.065069071949, -0.003676451743, -0.000476978719, -0.011999882758, 0.055063679814, 0.059358671308, 0.062956526875, 0.051412999630, 0.007414489985, -0.006155185401, 0.029471002519, -0.017647981644, -0.000985234976, 0.028042748570, 0.051509082317, 0.042128510773, -0.010841686279, 0.062933877110, 0.011228591204, 0.043468132615, -0.071258425713, -0.040512777865, 0.038528010249, 0.027561880648, -0.071820974350, 0.071066111326, 0.061752960086, 0.059298172593, 0.048728153110, 0.059659242630, 0.054000407457, -0.029691893607, 0.036752201617, -0.000400803983, 0.056448608637, 0.033458299935, 0.045322254300, 0.061703264713, 0.002231612802, 0.063948437572, 0.056858271360, -0.007956057787, -0.029748640954, 0.055625572801, -0.046956654638, 0.070337727666, -0.010039404035, 0.057184293866, -0.004958413541, 0.065652206540, -0.055728208274, -0.057714115828, 0.026649378240, -0.027152474970, -0.011633802205, 0.024203389883, -0.057691920549, 0.050108671188, 0.041763342917, 0.006590642035, 0.019047513604, 0.012334533036, 0.050503149629, 0.045882284641, 0.041650481522, 0.055303454399, -0.048487968743, 0.026319980621, 0.031667649746, -0.052557639778, 0.042500339448, 0.042986936867, -0.036906234920, -0.024112381041, -0.054863296449, -0.052478954196, -0.044790733606, 0.059505954385, -0.001762934029, 0.016570255160, 0.058721676469, 0.020630605519, -0.040198471397, -0.044917095453, -0.044304687530, -0.049582608044, 0.022461846471, -0.033935468644, -0.012865364552, -0.008094415069, -0.014683734626, -0.028303857893, 0.035820633173, -0.011576451361, 0.066293537617, 0.055021837354, 0.055203750730, -0.030886102468, 0.042977660894, -0.056732356548, -0.026624117047, 0.053505137563, 0.026006497443, -0.039533063769, -0.009259901941, 0.045656420290, 0.053706988692, -0.066428944468, -0.035709187388, -0.001706510782, 0.016364656389, -0.008103996515, 0.020691819489, -0.034200139344, -0.037236858159, 0.042252101004, 0.060497611761, 0.037488773465, -0.026647139341, -0.061216630042, 0.071141138673, -0.019658409059, -0.062767162919, 0.008652843535, -0.055867977440, -0.035337686539, -0.060144707561, -0.013803265989, 0.071940451860, -0.055395349860, 0.023791275918, 0.042377382517, -0.030198242515, 0.054555669427, 0.013232134283, -0.006852649152, 0.058381825686, -0.020946148783, 0.022623203695, 0.041428551078, 0.053084194660, -0.021998405457, -0.014475245029, -0.026456460357, 0.000994235277, 0.012254178524, -0.004944197834, -0.025923576206, -0.050569392741, 0.018249034882, -0.008961923420, 0.021284155548, 0.023917987943, 0.066430553794, -0.071466661990, -0.002872206271, -0.000460423529, 0.045794896781, -0.027238383889, -0.043968319893, 0.024915665388, 0.057242065668, -0.019127901644, -0.035066615790, -0.028009265661, 0.039139196277, 0.065911963582, 0.013117544353, 0.007007040083, 0.057626739144, 0.026453755796, 0.024490907788, 0.056499481201, -0.012866929173, 0.026742666960, -0.057178415358, 0.038606002927, 0.061639800668, 0.051022060215, 0.034656368196, -0.013468705118, 0.025491595268, -0.018660265952, 0.051267541945, -0.007566779852, -0.051195945591, 0.059510171413, 0.056615233421, 0.037866488099, 0.069668069482, -0.007631286979, 0.007879160345, -0.014283549041, 0.009644590318, 0.005283869803, 0.068954631686, 0.049033053219, -0.020895410329, 0.070147529244, 0.057286217809, -0.065062344074, 0.055256575346, 0.014306694269, 0.062394395471, -0.002749957144, -0.016769148409, -0.027647640556, -0.011093191803, 0.015005081892, -0.047330237925, -0.013355124742, 0.053696051240, 0.056073918939, -0.008816532791, 0.009313762188, 0.027629487216, 0.036088213325, -0.065421424806, -0.066611550748, -0.058606699109, 0.030751839280, -0.013658251613, 0.066879615188, 0.045397289097, -0.030575804412, 0.041848115623, 0.000026844442, -0.041700776666, -0.004001893103, 0.057941526175, -0.036972772330, 0.013804607093, -0.023169677705, -0.071142591536, 0.032781027257, -0.056314636022, -0.022248037159, -0.052076689899, 0.069793507457, -0.036338131875, -0.070283070207, 0.071999460459, 0.025825001299, 0.009898364544, 0.053979322314, -0.033689778298, 0.068268582225, -0.043893162161, 0.014060109854, -0.064050056040, -0.025318015367, -0.016071598977, 0.065637513995, 0.010452941060, -0.065137863159, 0.026989839971, 0.058050662279, 0.010753244162, 0.059620708227, -0.067977204919, 0.024285890162, -0.020875655115, -0.039332266897, -0.022810891271, 0.043964549899, -0.029750585556, 0.034324556589, 0.034400299191, 0.017397023737, -0.034007944167, -0.064081132412, 0.054755032063, 0.043739922345, -0.050569478422, 0.028253100812, 0.012369491160, 0.010312177241, 0.063319995999, -0.072032459080, -0.000177346170, -0.054568052292, -0.067045569420, -0.061068192124, 0.050639934838, -0.018560726196, -0.003215596080, -0.005919754505, -0.026564911008, -0.025073893368, -0.011880487204, -0.034690245986, 0.045966066420, -0.042833544314, 0.019802026451, 0.005843356252, 0.030303940177, 0.009370610118, -0.063315518200, -0.030833054334, 0.059318274260, 0.046752467752, 0.009860031307, 0.021752923727, 0.019534662366, 0.034355662763, 0.028412498534, -0.021949816495, -0.043306082487, 0.062988832593, 0.020662106574, 0.051133207977, 0.048898875713, -0.044033858925, 0.052461132407, 0.042158290744, 0.037904739380, 0.000777713954, -0.061678912491, -0.061235159636, -0.014165736735, 0.017508283257, -0.053049623966, -0.021336562932, 0.053042829037, 0.063078358769, 0.035775400698, 0.033781319857, 0.070125922561, 0.012459687889, -0.019249945879, 0.038328088820, -0.060273066163, 0.066498130560, 0.069028347731, 0.059366717935, -0.031735308468, 0.023670986295, -0.061981797218, -0.071240551770, -0.007312387228, 0.040074534714, -0.052228152752, -0.066864207387, 0.027489252388, 0.016425296664, 0.015517644584, -0.015822123736, 0.021825328469, -0.035854995251, -0.047313291579, 0.061833456159, -0.009878404438, -0.015035655349, 0.012085057795, 0.039435267448, 0.024849057198, 0.003817975521, 0.044945947826, -0.071251817048, 0.027120746672, -0.006396554410, 0.025229938328, 0.000589922071, -0.017176851630, -0.000427097082, -0.038941957057, -0.031896702945, -0.007611930370, 0.003489725292, 0.033815607429, -0.065283186734, 0.035593748093, 0.056258127093, 0.013154327869, -0.069003842771, -0.049837589264, -0.039774350822, 0.007699251175, 0.030006736517, -0.067105889320, -0.057579182088, 0.044025994837, 0.016562119126, -0.045954141766, 0.012689515948, 0.053070276976, -0.052411299199, 0.071089535952, -0.070607185364, -0.038578834385, 0.010057643056, -0.020240001380, 0.042916134000, -0.063073970377, -0.026060074568, -0.045565620065, 0.000107400119, -0.050286263227, -0.045717276633, -0.003227174282, 0.007380366325, 0.064419388771, -0.021416399628, -0.044595666230, 0.002817265689, -0.039170425385, -0.063137054443, -0.012202367187, -0.060169707984, -0.024290725589, -0.059719555080, 0.015145860612, 0.033768482506, 0.009955607355, -0.070819854736, 0.014076933265, 0.068699821830, -0.066006354988, -0.030007045716, 0.040699020028, -0.038275916129, -0.017801582813, -0.007617697120, 0.005072042346, -0.036096315831, 0.063936918974, -0.068455182016, -0.014637123793, -0.072129122913, 0.047093443573, -0.059469856322, -0.021259307861, -0.067591749132, -0.046029195189, 0.057987883687, -0.069705531001, -0.055088438094, 0.007853195071, -0.000635653734, -0.041163526475, 0.058947131038, -0.030055947602, 0.064815878868, -0.071601592004, -0.011539697647, 0.005297742784, 0.014782518148, -0.008746124804, 0.005402080715, -0.020188055933, -0.026883985847, -0.009733684361, -0.033787924796, -0.002368129790, 0.037785537541, 0.071253880858, -0.033339008689, -0.043332904577, -0.053802020848, -0.020790673792, -0.012119226158, -0.067884840071, 0.041135303676, 0.008894644678, 0.064280673862, -0.007290720940, -0.041127510369, 0.067062363029, 0.004473827779, -0.046753808856, -0.010334376246, 0.068080008030, 0.048068925738, -0.043626546860, -0.039301641285, 0.033391974866, 0.071989059448, 0.033026129007, 0.052040211856, 0.045533053577, -0.017245799303, -0.055665351450, 0.021361872554, -0.016322657466, -0.036823749542, -0.015583850443, -0.007857054472, 0.012640766799, 0.009647324681, -0.007702484727, -0.046119600534, -0.019759941846, -0.065567158163, 0.027233205736, 0.068681150675, -0.011067230254, -0.033994503319, -0.023626472801, -0.069172859192, -0.046937055886, 0.032075129449, 0.030222453177, 0.021959006786, -0.063360579312, -0.035022534430, 0.022840157151, 0.014965146780, -0.061343457550, 0.010941326618, -0.055704653263, 0.058105409145, -0.041155420244, -0.063155755401, 0.031177490950, -0.012754589319, -0.031439684331, 0.029187232256, 0.002836659551, 0.067344918847, -0.071473367512, -0.006511479616, 0.067907944322, 0.056607797742, -0.065664358437, -0.004015915096, 0.058073103428, -0.007945321500, -0.003988869488, 0.009094275534, -0.050515569746, 0.044139198959, 0.054144605994, -0.035457134247, 0.035580039024, 0.032647483051, 0.010764978826, 0.072114646435, -0.038597315550, -0.064611725509, -0.023742564023, -0.033017080277, 0.024817995727, -0.027044951916, -0.062613703310, -0.062936611474, -0.061947677284, -0.040193807334, 0.056506603956, 0.069327190518, 0.060049727559, 0.066334664822, -0.015235319734, -0.000558212399, -0.029072448611, -0.003200456500, -0.054955814034, 0.021724209189, 0.045805804431, -0.014108698815, 0.039123915136, 0.070404142141, -0.030466061085, -0.000942878425, 0.061543658376, 0.052025564015, -0.068030804396, 0.000089213252, -0.064809717238, -0.071234337986, -0.065579257905, -0.032410673797, 0.031771510839, -0.061547696590, -0.032045677304, -0.025026094168, 0.027934283018, -0.059683851898, -0.044391371310, -0.036929380149, -0.059471853077, -0.026264779270, 0.018115170300, 0.064086467028, 0.048051737249, -0.010185781866, 0.019843414426, 0.070885509253, 0.014588959515, -0.061835661530, 0.035139076412, -0.053781237453, 0.015684969723, 0.027682669461, 0.024358212948, 0.021475970745, -0.059869870543, -0.053206302226, -0.010503549129, -0.028398439288, 0.024237282574, -0.011297658086, 0.060177654028, -0.031387891620, 0.026896186173, 0.046573057771, -0.024502277374, -0.021647963673, 0.045179203153, -0.010326184332, 0.031851172447, -0.067863851786, 0.037584066391, -0.035062812269, -0.057762086391, -0.020905043930, 0.066224008799, 0.042554162443, -0.005563251674, -0.066019259393, 0.016215518117, 0.000080682337, 0.027051918209, -0.028707019985, -0.013052947819, -0.050761587918, -0.047082468867, 0.023699186742, 0.069597616792, -0.013950295746, 0.047799371183, -0.062421094626, -0.071945615113, 0.061138078570, -0.025537844747, 0.002448402345, 0.051675349474, -0.013505801558, 0.041536629200, 0.010428681970, 0.067906588316, -0.032372612506, -0.012173101306, 0.035941541195, 0.008708663285, -0.038977470249, -0.053061030805, 0.001399137080, -0.040886417031, -0.017780624330, 0.053951427341, -0.029122620821, 0.004376031458, -0.029473461211, -0.038641534746, 0.065332412720, 0.034219734371, -0.044487074018, 0.011930555105, 0.034528970718, 0.039893247187, -0.013621103019, 0.040457233787, -0.018804214895, 0.023562297225, 0.040701329708, 0.027448922396, -0.038990773261, 0.004727885127, -0.008032403886, 0.025832988322, -0.059957001358, 0.072115302086, 0.066761970520, 0.069995477796, 0.058484330773, 0.011215582490, -0.032070074230, -0.017113104463, -0.048332631588, -0.057180374861, -0.057266853750, 0.012379698455, 0.065602928400, -0.058053754270, -0.015430372208, -0.015433020890, -0.066089197993, -0.052751675248, 0.037066169083, 0.043480694294, 0.066650032997, 0.060882985592, 0.046929746866, -0.046671029180, 0.070570096374, -0.051107607782, -0.016473095864, 0.061430498958, 0.047641277313, -0.028230816126, -0.029621537775, 0.054316595197, -0.060695517808, 0.053066775203, 0.044687770307, 0.040284380317, -0.032920602709, 0.019196540117, -0.026649292558, -0.016055528075, -0.026375811547, 0.047838084400, 0.042620182037, -0.021901104599, 0.070065915585, -0.060614459217, -0.001905590296, -0.039889790118, -0.033746335655, -0.001944959164, -0.064844474196, -0.058155909181, -0.070603124797, -0.013228967786, -0.067921280861, -0.061281703413, -0.005112528801, -0.059066660702, 0.052260741591, -0.004167675972, -0.059073541313, -0.067427545786, 0.070138826966, 0.010756686330, 0.039590641856, -0.008860409260, -0.031388152391, -0.019114103168, 0.013253971934, 0.002060033381, -0.067412219942, 0.026944175363, 0.059572875500, -0.071661449969, -0.055328022689, -0.001040883362, -0.033571932465, -0.014173135161, 0.020661003888, 0.051402442157, -0.035539120436, 0.011497974396, 0.010179944336, -0.065430797637, 0.037879258394, -0.020818907768, 0.070463344455, -0.002647340298, -0.059751335531, 0.009357653558, 0.058637753129, 0.024717018008, 0.049209006131, 0.023946911097, 0.046793021262, -0.071658231318, -0.071356624365, 0.020485125482, 0.067162036896, 0.055360987782, 0.015667855740, 0.017506219447, 0.012316219509, -0.051424361765, 0.011151008308, -0.029418297112, 0.065050616860, 0.039342522621, 0.061867102981, 0.010985374451, 0.036954499781, 0.037722818553, -0.051778241992, -0.027705211192, -0.030264195055, 0.025355733931, -0.042764730752, -0.058386214077, 0.069707930088, 0.052261397243, -0.054937921464, 0.058328643441, 0.033193342388, -0.039455085993, -0.027457129210, -0.043061181903, -0.015407897532, -0.056563250721, -0.010279659182, 0.001066207886, 0.057065516710, -0.023094814271, 0.003463968635, -0.059872400016, 0.027198277414, -0.011655926704, 0.036699861288, -0.055115349591, 0.065959841013, 0.046592742205, 0.002212174237, -0.045212201774, -0.045183725655, -0.064424671233, -0.029225379229, -0.015445891768, 0.030449405313, -0.071744590998, 0.006467960775, -0.022739950567, 0.068266004324, -0.042821221054, -0.027224086225, 0.067833945155, 0.043401785195, -0.000593170524, -0.044548381120, 0.069593802094, -0.026458300650, 0.056301400065, 0.022804677486, 0.003881223500, -0.008988782763, 0.035808570683, -0.046568356454, -0.066199630499, -0.006333291531, -0.044864960015, 0.050921455026, 0.008313037455, -0.067410975695, -0.007936216891, -0.063273668289, 0.064524039626, 0.047291353345, 0.015839301050, -0.010765220970, 0.066102519631, 0.052826352417, -0.067192785442, 0.009379148483, 0.011634588242, -0.008960068226, -0.070180036128, -0.031836327165, 0.060723617673, -0.058384753764, -0.059320554137, 0.000684350729, 0.055251523852, -0.071259133518, 0.019614413381, -0.059272274375, 0.055837213993, -0.027511004359, -0.035800796002, 0.049326434731, 0.042700052261, 0.055529490113, 0.052636235952, 0.028207413852, -0.016750495881, 0.069588989019, -0.047835364938, -0.048601277173, -0.062358014286, -0.034879289567, 0.034375622869, -0.044472157955, 0.059190288186, 0.039543971419, -0.061326406896, -0.007572695613, -0.044481135905, -0.019833311439, 0.027715481818, 0.014862231910, 0.020842790604, 0.033895462751, 0.046523205936, -0.053472109139, 0.045312792063, -0.028439082205, 0.043298386037, -0.046235606074, 0.047656916082, 0.010266080499, 0.065212279558, 0.009167797863, 0.015661574900, 0.031160905957, -0.057989537716, -0.040696647018, -0.016436632723, 0.043700709939, -0.005230776966, -0.066548302770, 0.055506229401, 0.056883260608, -0.065119691193, 0.041066221893, 0.062482014298, 0.055754184723, -0.040875680745, 0.029935210943, -0.042601719499, 0.001048691571, 0.011245124042, 0.045851007104, -0.015742357820, -0.045967407525, -0.044276915491, -0.038635529578, 0.053040951490, 0.034356564283, -0.056434374303, -0.021252062172, 0.007970318198, 0.057988837361, -0.036015257239, 0.060116112232, -0.047332078218, -0.013765566051, 0.035443440080, 0.037172473967, 0.070288538933, -0.035188730806, 0.026648327708, -0.011348586529, 0.066120401025, 0.067226856947, -0.066984258592, -0.065207511187, -0.011185780168, 0.037216171622, 0.043542154133, -0.035900026560, 0.026962891221, 0.061751335859, -0.043345328420, 0.071442350745, -0.006970956922, -0.060428250581, -0.008177742362, -0.034776102751, -0.060628257692, -0.053871329874, -0.027697589248, 0.010885171592, 0.062686920166, 0.014924712479, -0.021027397364, 0.004376925528, -0.054543480277, -0.066385924816, 0.051896259189, -0.022678676993, 0.061695635319, -0.070476949215, 0.030059404671, -0.053792677820, 0.051373824477, 0.015576571226, 0.042734883726, 0.051021300256, -0.056053958833, 0.010366775095, -0.050281889737, -0.070970550179, 0.059467315674, -0.067581959069, 0.008895955980, -0.028710339218, 0.060876980424, 0.056727156043, -0.026484351605, 0.069680392742, -0.037268396467, 0.047729767859, 0.067134976387, 0.027090616524, -0.028144922107, 0.066418170929, 0.058799326420, 0.026847541332, 0.027859605849, -0.055158659816, -0.031930532306, -0.043816268444, 0.055021956563, -0.031940389425, 0.043581351638, 0.070834338665, -0.028232380748, 0.028908453882, 0.011373706162, 0.056179597974, 0.024041786790, 0.052184127271, 0.044738359749, 0.011724390090, -0.001274749637, 0.049392081797, 0.031283281744, -0.039257179946, -0.022098377347, 0.020769611001, -0.051401130855, 0.016315259039, -0.008092328906, -0.010000038892, -0.009534344077, -0.042379293591, 0.054210886359, 0.070104032755, -0.048866424710, 0.015323638916, 0.043801918626, -0.029979482293, 0.034859299660, 0.035015046597, 0.017110191286, 0.002271965146, -0.014877133071, 0.001187533140, -0.027252599597, -0.034953311086, -0.001743867993, -0.023394789547, -0.063926614821, 0.010647185147, 0.070114850998, -0.035074960440, 0.052048161626, 0.057516530156, 0.006439834833, -0.017135214061, -0.040317073464, -0.040920484811, -0.045441459864, 0.009112581611, -0.039771117270, -0.046099536121, -0.040679354221, -0.068889573216, 0.029381081462, -0.009485736489, 0.039670407772, -0.044182900339, -0.018650628626, -0.025336325169, 0.014786683023, -0.071331039071, -0.035925388336, -0.043570749462, -0.022375777364, 0.042051926255, -0.051166124642, 0.026525557041, -0.066545940936, -0.050748683512, -0.063163101673, 0.030460573733, -0.029057528824, -0.069356828928, 0.023618161678, 0.063749492168, -0.042466856539, -0.003212809563, 0.058201506734, -0.039614539593, -0.023813646287, -0.006608933210, -0.016586020589, 0.032119251788, -0.041575804353, -0.053593978286, -0.065424762666, 0.022212505341, -0.065815754235, -0.034571692348, 0.052306063473, 0.071489274502, -0.014070689678, -0.063734769821, -0.030482441187, -0.063888281584, -0.008890539408, -0.051595408469, 0.051652170718, -0.063609145582, -0.041507877409, 0.031423799694, -0.035980224609, 0.071250632405, -0.043688733131, -0.033208377659, -0.011490263045, 0.039522603154, -0.060175783932, 0.058132186532, 0.052391342819, -0.049430795014, 0.059076875448, 0.040251091123, 0.010384015739, -0.000418871641, -0.057436767966, -0.035615105182, 0.035685099661, 0.043921187520, 0.064879536629, 0.013146795332, 0.064545959234, 0.043167725205, -0.048558793962, -0.056030698121, 0.027279064059, 0.010259456933, 0.052663370967, 0.036026991904, -0.014001984149, -0.070815846324, 0.005820967257, -0.012275684625, 0.016697466373, -0.003280945122, 0.051084153354, 0.000285916030, -0.016266051680, 0.031131617725, 0.053280755877, -0.058274615556, 0.049011819065, -0.043922498822, 0.066374868155, 0.050190441310, -0.060298342258, 0.056451395154, -0.039377570152, 0.069958806038, 0.014252662659, -0.049466721714, -0.005374632776, -0.042699970305, 0.051013536751, 0.035656280816, 0.031932339072, 0.027099698782, -0.001945696771, -0.023981854320, 0.064761146903, -0.025149893016, 0.058718666434, 0.019643954933, 0.019817754626, -0.006611794233, 0.050546780229, -0.002923794091, -0.014029238373, 0.062771439552, 0.026761047542, -0.025191582739, -0.070572100580, 0.058159723878, -0.066106423736, -0.071737863123, -0.038699280471, -0.069605030119, -0.052233833820, -0.023321371526, 0.010455697775, -0.005225837231, -0.036480069160, 0.043400235474, -0.068366892636, -0.034499820322, 0.035858593881, 0.005482606590, -0.037983871996, -0.035926505923, 0.070211470127, 0.069731011987, -0.066685244441, 0.061098977923, -0.006378389895, -0.002013817430, -0.044729873538, -0.026317879558, -0.026724498719, -0.041127651930, 0.033683806658, -0.034189246595, 0.045608021319, -0.052527770400, -0.058806411922, -0.015734888613, 0.042017854750, -0.026133581996, -0.011606905609, 0.057083711028, -0.034210495651, 0.026948921382, -0.062347296625, -0.005262210965, -0.062587685883, 0.030770733953, 0.064624726772, 0.019994638860, -0.001552686095, -0.012898847461, -0.036954447627, 0.028634026647, 0.050644896924, -0.037999752909, 0.061403974891, 0.028455220163, 0.018437065184, 0.041233591735, 0.031723968685, 0.063977271318, 0.026330441236, 0.019047923386, 0.028574101627, 0.048689007759, -0.029637333006, -0.025547582656, 0.053558841348, -0.055978558958, -0.031337153167, -0.015288211405, -0.000941671431, 0.066723525524, 0.017306074500, -0.035141620785, 0.035243086517, -0.003266990185, -0.070557765663, 0.012468226254, -0.020232636482, 0.020371660590, -0.051427476108, -0.036288045347, -0.053409699351, -0.017700802535, 0.042890943587, -0.050587113947, -0.044418677688, 0.007406741381, 0.017768390477, 0.019316829741, -0.051871761680, -0.042166743428, 0.034068800509, -0.006266735494, 0.003147765994, -0.044635064900, -0.036614779383, 0.003343440592, -0.055795982480, -0.050091914833, -0.066986650229, -0.013978961855, 0.057249620557, -0.044712323695, -0.047473087907, -0.065998367965, -0.010566815734, 0.002032764256, -0.056016825140, 0.007949501276, -0.029948029667, -0.004219554365, 0.013227403164, 0.047218568623, -0.019961103797, 0.032400213182, -0.020742718130, -0.025428809226, -0.007576502860, -0.025486879051, 0.026246353984, -0.012347090989, 0.031936846673, 0.061060905457, -0.044077683240, 0.048625692725, 0.007612101734, -0.034251067787, 0.009203843772, -0.061656735837, -0.058416672051, 0.048543341458, -0.071176744998, -0.023528292775, -0.036070782691, -0.070876717567, 0.003801494837, -0.040339529514, -0.069409020245, -0.029198966920, 0.024178281426, 0.014645688236, 0.027777135372, -0.023613829166, -0.008081458509, 0.059345453978, -0.028032667935, -0.056539110839, 0.041691847146, -0.045112732798, 0.026327304542, 0.064814567566, 0.047984324396, -0.021374505013, 0.052657611668, -0.071511857212, -0.037155162543, 0.031280010939, 0.029939599335, 0.044045768678, -0.037742275745, -0.041029468179, 0.060946270823, 0.037689663470, 0.032474748790, -0.041622161865, 0.017292775214, 0.058962911367, -0.046067185700, 0.033053800464, 0.015037499368, -0.012159883976, -0.052934460342, -0.057596683502, -0.003177538514, 0.033712007105, -0.040649104863, 0.071900576353, 0.018168441951, -0.039714645594, -0.019908193499, 0.043148025870, 0.016521185637, -0.051699884236, 0.025610163808, -0.041287153959, -0.051907807589, -0.001394182444, 0.016918912530, -0.048552960157, -0.031346477568, -0.062826700509, 0.029352307320, -0.022479616106, -0.027925919741, 0.053155541420, 0.006433449686, -0.009817648679, -0.039589244872, 0.066997468472, 0.029801122844, 0.069557443261, 0.023745350540, 0.051619619131, 0.066274255514, 0.059360399842, -0.006076693535, -0.022936481982, -0.036414995790, -0.061577018350, 0.032858587801, -0.012363281101, 0.040920607746, 0.012474127114, 0.071181163192, 0.043402403593, 0.007871985435, -0.007650367916, -0.054386869073, -0.015783358365, 0.020005665720, 0.056069329381, 0.035115964711, 0.040500991046, -0.020623289049, 0.051611170173, -0.058496680111, -0.043030694127, -0.038759052753, -0.041323632002, 0.043897993863, -0.054329175502, 0.001126401126, -0.004203192890, 0.067024752498, -0.049034185708, -0.016083989292, -0.069354280829, 0.064135625958, -0.070117920637, 0.066783219576, -0.028027486056, 0.020734839141, 0.035180285573, -0.038510989398, 0.062011480331, -0.061955869198, 0.052068069577, 0.032408110797, 0.028267085552, -0.018270868808, 0.022620022297, 0.034835517406, -0.034361757338, 0.004395782948, 0.064417615533, -0.059931140393, -0.035345841199, -0.011341668665, -0.004479885101, -0.030448682606, 0.014180310071, -0.037647485733, -0.070537842810, 0.037337586284, -0.051609896123, 0.046922467649, 0.039253599942, -0.054237361997, 0.027108766139, -0.008174680173, -0.027327358723, -0.062762811780, 0.027484558523, -0.023105446249, 0.006599023938, 0.039285399020, 0.069329544902, -0.068028204143, -0.051612772048, 0.039857923985, -0.016852702945, -0.068718820810, -0.018512912095, -0.047895126045, -0.006746657193, -0.024653643370, -0.007026106119, -0.004951447248, 0.050946280360, 0.067455425858, -0.021430905908, 0.000990502536, -0.023342344910, 0.033536732197, -0.005186401308, 0.061843216419, -0.072107546031, -0.022696763277, 0.001534461975, 0.045362658799, 0.034554913640, -0.065089300275, 0.007345974445, -0.000136189163, -0.047701932490, 0.061957553029, -0.050109639764, -0.024508628994, -0.009580098093, -0.052476152778, -0.053360678256, 0.032944694161, -0.016147326678, 0.053927391768, -0.063235968351, 0.021151781082, -0.000510856509, 0.024463132024, -0.008123889565, -0.032862462103, 0.043053284287, -0.061862591654, 0.045445539057, -0.032920397818, -0.019426498562, 0.017297901213, -0.060762260109, 0.019112691283, -0.026917934418, 0.066103190184, 0.002463832498, -0.057748202235, 0.052892237902, 0.027645386755, 0.035939253867, 0.039335161448, 0.049220994115, -0.056069307029, 0.037038601935, 0.060636386275, -0.063069500029, -0.029194131494, -0.010922558606, -0.039612576365, 0.034730352461, -0.018873624504, 0.023575626314, 0.020748965442, -0.008865877986, 0.047929212451, -0.052378162742, 0.065726146102, 0.028035245836, -0.053679205477, 0.007714323699, -0.044590964913, 0.062863051891, 0.046159066260, 0.046294808388, 0.056796386838, -0.048413295299, -0.056934751570, -0.009651921690, 0.027722954750, -0.019412804395, -0.050900012255, 0.015708580613, -0.021148823202, -0.053133916110, -0.054841600358, 0.051872089505, 0.053543508053, -0.011004012078, 0.044532999396, -0.039195131510, -0.048025205731, -0.039596315473, 0.051561355591, 0.036446206272, -0.008068911731, -0.036071881652, -0.021095570177, -0.061414487660, 0.061849847436, 0.064028859138, -0.017842825502, 0.065427154303, -0.038518544286, -0.033098671585, -0.038818363100, -0.042906273156, -0.054830983281, 0.061549589038, 0.061523690820, -0.058499813080, -0.049034237862, 0.060014471412, 0.072005927563, -0.024039376527, -0.011782307178, 0.015366211534, -0.065869390965, -0.019461721182, 0.063956037164, 0.033256262541, -0.012914143503, 0.057865917683, -0.027387116104, -0.014127124101, -0.067587360740, -0.015006527305, -0.021360911429, 0.047609604895, 0.066233515739, -0.033766005188, 0.047470472753, 0.042654506862, 0.065065667033, 0.066527694464, -0.034255541861, 0.014101490378, 0.062917113304, 0.018703244627, 0.015189312398, -0.012905988842, -0.013962406665, -0.036087401211, 0.026689946651, 0.020010016859, -0.050701245666, -0.014590304345, 0.036037519574, -0.039746250957, -0.051085703075, -0.057639010251, 0.013025879860, -0.038578178734, -0.027526780963, 0.069915279746, -0.039931099862, 0.027241706848, -0.055274132639, 0.054644942284, -0.016924932599, -0.037384644151, -0.047863431275, -0.056655097753, -0.055527083576, 0.059967860579, 0.061402499676, 0.021085090935, 0.002845644951, 0.065344825387, -0.056312415749, 0.056553781033, -0.010676592588, -0.029894325882, -0.008322417736, 0.030727051198, -0.015756655484, 0.044250711799, -0.000479504466, 0.048382237554, -0.062554582953, 0.038292400539, 0.012527622283, -0.061445783824, 0.010750353336, -0.043404947966, -0.015596568584, 0.006387628615, 0.069477468729, 0.048520028591, 0.012398846447, -0.016153521836, -0.063895232975, 0.028066255152, 0.018927581608, -0.045843333006, -0.064370095730, 0.022222414613, -0.023149546236, 0.067382156849, 0.051603928208, -0.058309372514, 0.027411915362, -0.021965611726, -0.061387971044, -0.002695754170, -0.012777645141, -0.007779866457, -0.004335746169, 0.056532204151, 0.004232630134, -0.015323672444, -0.010323017836, -0.008754223585, -0.042111769319, 0.016165927052, 0.049227587879, -0.003648854792, -0.007129825652, -0.002065382898, -0.057832546532, -0.011650886387, -0.059726782143, 0.028601288795, 0.003579303622, -0.012664653361, -0.035675138235, 0.064876466990, 0.002639077604, 0.024156153202, -0.008810594678, 0.044822305441, 0.063398092985, 0.055532053113, -0.059845883399, 0.037322014570, -0.035512864590, -0.042170837522, 0.026505187154, -0.046954005957, 0.054095625877, -0.004274703562, 0.016279228032, 0.063597410917, -0.043142087758, 0.007078528404, -0.038069024682, -0.051016584039, 0.054086878896, 0.056065395474, -0.008873723447, 0.068816050887, -0.003774426877, -0.060798257589, -0.002770587802, 0.055782258511, -0.066393509507, -0.066642940044, 0.041268877685, 0.038436278701, -0.040218293667, -0.046808540821, 0.024047978222, -0.012124303728, 0.002404160798, -0.012987427413, 0.055650681257, 0.037618666887, -0.002819433808, -0.064701490104, 0.006317339838, 0.044091843069, 0.007154926658, -0.027334481478, -0.054323084652, -0.065704755485, 0.023301154375, -0.041719861329, -0.038557514548, 0.066087037325, 0.058051511645, -0.018890745938, 0.010220296681, 0.028267703950, 0.005742162466, 0.057507663965, 0.022501707077, -0.005963176489, -0.030013911426, 0.015941396356, 0.003051243722, 0.020944446325, 0.010371901095, -0.066500276327, 0.027378149331, 0.026897907257, 0.061431035399, 0.042087867856, 0.053668513894, 0.062055468559, -0.002853818238, -0.015690289438, -0.035619836301, -0.035289887339, -0.050853781402, -0.023081857711, -0.039056826383, -0.065879076719, 0.010889932513, -0.007888540626, 0.059874519706, -0.042803294957, -0.019716188312, 0.058853313327, 0.026012465358, -0.032000631094, 0.020652540028, 0.050306305289, 0.013171620667, -0.068377889693, -0.000701896846, 0.002240888774, 0.013292945921, 0.049889139831, -0.057210605592, 0.012539736927, -0.054517552257, -0.048029921949, -0.013855814934, 0.065776824951, 0.056986629963, -0.031157877296, 0.036166325212, 0.033432163298, -0.039012227207, 0.001117877662, -0.016116887331, 0.027237832546, -0.005598522723, 0.004684142768, -0.031124152243, -0.025405425578, 0.032726466656, -0.059097614139, 0.046130418777, 0.001586601138, 0.065877601504, -0.041030157357, 0.054643809795, 0.049872569740, 0.063957870007, -0.068454355001, -0.049891356379, 0.054804757237, 0.000351749361, -0.021231312305, 0.034297354519, 0.050263844430, -0.032667685300, -0.071344971657, 0.065593168139, 0.052463576198, 0.068611800671, 0.036910660565, 0.031315766275, 0.028143368661, -0.004405520856, 0.023389644921, 0.005244024098, -0.069464094937, 0.061485111713, 0.045490153134, 0.034771926701, -0.020003549755, -0.057599246502, 0.039239712059, 0.060202538967, -0.025990441442, 0.016187243164, 0.062821641564, -0.003934636712, 0.033430613577, -0.037063624710, 0.044903621078, -0.011042244732, 0.054412886500, 0.071838125587, -0.044322118163, 0.000953942537, 0.056715264916, -0.070353575051, -0.053337745368, -0.029084663838, -0.003691799939, 0.004609689116, -0.029224276543, -0.017488598824, 0.053429231048, -0.046761311591, -0.004055492580, 0.023101717234, -0.033321030438, 0.062555611134, 0.052039109170, -0.038662303239, 0.029228202999, 0.026152268052, 0.054779693484, 0.018273122609, -0.048723593354, 0.008322931826, 0.056080177426, 0.038429893553, 0.049079939723, -0.000466033816, 0.032514683902, 0.021513581276, 0.065626263618, 0.026800930500, -0.066339053214, 0.063407346606, 0.053222179413, -0.062116522342, -0.037927124649, 0.062284246087, 0.026987910271, 0.063707962632, -0.056630216539, -0.070747740567, 0.069056168199, -0.021350018680, 0.040710173547, -0.070917554200, -0.051356360316, 0.051849767566, -0.007207542658, 0.020408622921, 0.055033832788, 0.027467176318, 0.055069014430, 0.057005271316, 0.005818389356, -0.021303907037, 0.017260424793, -0.048095941544, 0.022910363972, -0.049024984241, 0.054688736796, 0.070180699229, -0.033099152148, -0.043002784252, -0.053996626288, -0.066082283854, 0.022856593132, -0.052232559770, -0.042173538357, -0.062377147377, -0.005302079022, 0.036132618785, -0.038910385221, -0.015862904489, -0.050120614469, -0.055714391172, -0.009939745069, -0.026981063187, -0.034289285541, -0.021701131016, -0.067697465420, 0.002019137144, -0.014095619321, -0.021986879408, -0.064228653908, 0.011294767261, -0.068456642330, 0.052098728716, -0.020478654653, -0.031135130674, -0.007376596332, 0.028359502554, -0.066758699715, 0.059652060270, 0.067776650190, -0.004577726126, -0.029444776475, 0.067134872079, 0.053645655513, -0.040593493730, 0.039188556373, 0.015634968877, 0.044655956328, 0.060655713081, -0.068358048797, 0.062204211950, 0.047845728695, -0.053637079895, 0.025107547641, 0.010339401662, -0.061885476112, 0.039645254612, -0.064383015037, 0.042387723923, -0.005281135440, -0.070433244109, -0.042224988341, 0.045897312462, -0.019685368985, 0.014183163643, 0.055657640100, -0.063759095967, 0.049129508436, -0.067406952381, -0.012912940234, 0.069024071097, 0.034651011229, 0.031850658357, -0.009971387684, -0.016637038440, -0.045588523149, 0.050212442875, -0.054392546415, 0.041755288839, 0.023192927241, 0.061100542545, 0.011352010071, 0.044420368969, -0.053296811879, -0.002846516669, -0.021465368569, 0.005413576961, -0.034646332264, 0.032614916563, 0.025535181165, -0.007955215871, 0.059535905719, -0.006738312542, 0.012310579419, -0.007558144629, 0.039966411889, 0.062457203865, -0.065894290805, -0.027035675943, -0.011417996138, -0.018072497100, -0.065683454275, 0.036226049066, -0.064824029803, 0.051476754248, -0.044614229351, -0.060697205365, -0.020689535886, 0.039809934795, 0.052063561976, -0.037756815553, 0.065388724208, -0.032431390136, 0.044019319117, 0.022681482136, -0.035874199122, -0.047224264592, 0.004735022783, -0.047585014254, 0.014843598008, 0.016956903040, 0.006881624460, 0.060401648283, 0.031228475273, 0.060841456056, -0.041727103293, -0.034552041441, 0.069112956524, 0.004637941718, 0.035229183733, 0.030612982810, 0.001325599849, -0.057129718363, 0.062803044915, -0.054089508951, 0.061090096831, 0.070695966482, 0.008594602346, 0.038091517985, 0.000700831413, 0.058597519994, 0.032825969160, 0.029744081199, 0.005087837577, 0.034096434712, -0.031231936067, -0.045832306147, 0.039637029171, -0.060413401574, -0.001402162015, 0.006676316261, -0.025702234358, 0.043102547526, -0.033065654337, -0.009924311191, 0.058629497886, 0.063684657216, 0.001536495984, 0.048645079136, -0.059433359653, 0.056972518563, -0.044492598623, -0.007935047150, 0.037769772112, -0.054086461663, -0.045836091042, -0.038952555507, 0.003567621112, -0.058889966458, -0.045556694269, -0.005157664418, -0.040325384587, 0.065081223845, 0.068348720670, -0.050152841955, -0.021830335259, -0.051467873156, -0.006131701171, 0.043206952512, 0.047632627189, 0.059484079480, 0.065422087908, -0.037249468267, -0.046629838645, -0.065862469375, 0.023832209408, -0.018219988793, -0.059508655220, 0.048664353788, -0.070476174355, -0.066636040807, -0.057330053300, -0.042342573404, 0.010517433286, 0.039862737060, 0.002226486802, 0.041612662375, -0.022589135915, -0.058708593249, 0.044428452849, 0.013572618365, -0.021351549774, -0.016415849328, -0.040297597647, 0.038823544979, 0.045264683664, 0.065039142966, 0.045944869518, 0.020159974694, -0.053301833570, -0.039049670100, 0.045576222241, -0.022668782622, -0.070407830179, -0.037032395601, -0.018811356276, 0.066082641482, -0.017969809473, 0.072084337473, 0.032766468823, -0.045990966260, 0.049169667065, -0.033657569438, -0.070906281471, 0.030333191156, 0.043278552592, -0.070527136326, 0.042018562555, 0.009634800255, 0.023338921368, 0.063215911388, -0.047018408775, 0.021977245808, 0.030001387000, 0.019020758569, 0.035061143339, -0.015285391361, -0.065659388900, -0.024937961251, -0.029264282435, -0.016391880810, 0.050723664463, -0.051290974021, 0.007309816778, 0.046090774238, -0.038082584739, 0.051806464791, 0.010186813772, -0.050900787115, 0.019998803735, -0.039018578827, 0.056480735540, -0.058102328330, -0.054807685316, -0.022812612355, -0.070268489420, -0.070208407938, 0.064437687397, 0.031824886799, 0.070287287235, 0.038790971041, 0.018158651888, 0.052529677749, -0.013047959656, 0.044070906937, -0.027864646167, 0.044835433364, 0.008314825594, 0.038073360920, -0.012113291770, -0.026819616556, 0.026298828423, -0.023480083793, -0.047705598176, 0.001041725278, 0.034044973552, 0.000830933452, 0.023486427963, -0.071334324777, 0.025782689452, 0.032592475414, -0.016311887652, 0.027389764786, -0.020950779319, 0.025439850986, 0.042709551752, 0.031988084316, 0.037247419357, 0.055656313896, 0.030977003276, -0.013378079981, -0.009457260370, 0.004968978465, -0.038853585720, -0.055143468082, -0.051969870925, 0.042461931705, 0.069040864706, -0.040730338544, 0.021547533572, -0.055282391608, -0.021650426090, -0.062320195138, 0.017923973501, 0.017780087888, 0.051568344235, -0.015211161226, -0.021223723888, -0.049368508160, 0.050580091774, 0.005054548383, 0.018935479224, -0.019391003996, 0.018159009516, -0.071124166250, 0.063114807010, 0.004221893847, 0.009656928480, 0.051336586475, 0.043079763651, -0.067231014371, 0.047867849469, 0.020070619881, 0.018155671656, -0.045610114932, -0.051956310868, 0.050201378763, 0.044043064117, 0.064091697335, -0.055057331920, -0.022002812475, -0.021688312292, 0.015199720860, -0.025359585881, 0.061821520329, 0.067087009549, 0.017610765994, 0.066845610738, 0.066656097770, 0.058134675026, -0.038328703493, -0.035219788551, -0.019221469760, 0.042801246047, -0.066882744431, 0.034379906952, 0.062820121646, 0.054964810610, 0.060793846846, -0.022915162146, 0.053547352552, -0.047604665160, 0.027729868889, -0.007208369672, -0.030508510768, 0.012330591679, 0.067017138004, 0.017529323697, -0.038129799068, -0.056760970503, 0.004531405866, 0.040931224823, 0.010083951056, 0.028381578624, 0.021682150662, -0.020892880857, 0.013204105198, -0.022712934762, -0.038049824536, 0.027531132102, -0.025496840477, 0.070124179125, 0.007954783738, -0.028547290713, -0.011356141418, 0.027318254113, 0.018031179905, 0.062946975231, 0.028195440769, -0.030637297779, 0.018113240600, -0.033422339708, 0.034384213388, -0.019641354680, -0.057449501008, -0.019014529884, -0.050442494452, 0.027187936008, 0.058672025800, -0.040075890720, -0.060974620283, 0.048198401928, -0.022721521556, -0.020125146955, -0.060339465737, -0.014819491655, -0.023117199540, 0.039361469448, -0.047048315406, -0.063973724842, -0.009168811142, -0.007314279675, -0.033213008195, 0.030949957669, 0.034930206835, -0.070852354169, 0.021104313433, 0.054850369692, 0.001723907888, 0.013033315539, -0.025246866047, -0.050260089338, -0.059941671789, -0.062724441290, 0.031303785741, -0.022225514054, -0.016887716949, 0.050038933754, 0.050415240228, 0.064777970314, 0.057832822204, 0.046748682857, -0.022694490850, -0.024444930255, 0.012469872832, -0.037311755121, 0.032727010548, 0.046726331115, 0.014234356582, -0.021461997181, 0.012149386108, -0.040483925492, 0.070576369762, 0.036366075277, -0.056267023087, -0.047503471375, 0.014848917723, -0.018910877407, -0.056014433503, 0.045502007008, -0.011491883546, 0.056189894676, 0.027473926544, -0.004183165729, -0.033522997051, 0.008461117744, -0.028416659683, 0.068076670170, -0.046076323837, 0.048394024372, 0.020317099988, -0.028247300535, -0.031480427831, 0.035799279809, 0.000758990645, -0.020760372281, -0.045574225485, -0.025827065110, -0.011777799577, -0.037261188030, -0.060464005917, -0.028359018266, -0.052106559277, -0.039594855160, -0.040084306151, 0.070286229253, -0.056975290179, 0.046365268528, -0.006926804781, 0.001761674881, 0.000205636024, 0.054846093059, 0.017527401447, 0.028242431581, 0.006441913545, -0.057297240943, 0.063371986151, 0.000563643873, -0.003848724067, -0.055840428919, 0.069418922067, 0.032509595156, 0.011969223619, -0.022528018802, 0.024575524032, 0.003428749740, -0.054721154273, -0.003616556525, 0.004948638380, -0.043594166636, -0.029176305979, -0.061483602971, -0.017330452800, 0.056938916445, -0.015634369105, -0.014149561524, 0.033108495176, -0.006034277380, 0.059983760118, -0.014047220349, 0.060215801001, 0.035875111818, 0.046468198299, -0.064269162714, -0.047523811460, -0.032858420163, 0.045877367258, 0.041669324040, 0.039131261408, -0.003281719983, -0.036652132869, 0.069891184568, 0.051424413919, 0.017577037215, 0.059833586216, -0.064448587596, -0.017177265137, -0.008803062141, 0.058018177748, 0.039284758270, -0.018388833851, 0.038138456643, 0.049296736717, -0.004588633776, -0.062579512596, 0.065950602293, 0.054693758488, -0.070723071694, -0.060385923833, 0.055540621281, -0.036213196814, 0.017994292080, 0.035910472274, 0.029408574104, -0.006666198373, -0.052784763277, -0.068462714553, -0.068157233298, -0.033317312598, -0.045082949102, 0.057797402143, -0.056748479605, -0.015322864056, -0.068667471409, 0.016841791570, 0.016969121993, 0.024997480214, -0.056781891733, -0.018282756209, -0.015353593975, -0.041288733482, 0.014106497169, -0.039967473596, -0.015284392983, 0.065102115273, -0.042548567057, -0.064583227038, -0.057498075068, -0.034274779260, -0.047460645437, 0.003090523183, 0.042928524315, 0.013867944479, -0.046304635704, 0.072163596749, -0.035025563091, -0.048532396555, -0.016942948103, -0.018239621073, -0.050071422011, 0.028633750975, -0.032999683172, 0.033120110631, -0.024504773319, 0.022900745273, 0.070895627141, 0.042461417615, -0.000111013651, -0.030788369477, 0.060766026378, 0.014115646482, -0.013479117304, -0.006790414453, 0.037189938128, -0.018374312669, -0.005541175604, -0.015733700246, -0.059649251401, -0.057512164116, -0.068839654326, -0.005647853017, -0.005852803588, -0.059011839330, 0.015369921923, -0.004273235798, 0.019664943218, -0.017310701311, -0.053598903120, -0.034552987665, 0.061495423317, 0.056716948748, -0.048001185060, 0.031289234757, 0.048316374421, -0.034182123840, -0.049974292517, -0.003114476800, 0.031436607242, -0.052780307829, -0.017335787416, -0.004435531795, -0.021003670990, 0.040416851640, -0.061928596348, 0.070046380162, 0.024525836110, -0.019378133118, -0.051810540259, -0.054596163332, 0.071619480848, 0.013804696500, 0.025217413902, 0.017707720399, -0.066276080906, -0.050607554615, 0.006947025657, -0.050275556743, -0.026786614209, -0.060593966395, 0.021316498518, 0.014838919044, 0.040488280356, -0.045134533197, -0.037090431899, 0.056249842048, 0.040336363018, 0.069706693292, 0.070207163692, 0.024114467204, -0.003295898438, 0.066279157996, 0.053586184978, -0.030769065022, -0.045548535883, -0.037240710109, 0.061840429902, -0.002003028989, 0.008956506848, -0.022051677108, 0.046475805342, -0.004599973559, -0.005086518824, -0.047729272395, -0.026228301227, -0.036215126514, 0.037275828421, 0.064789384604, 0.023255318403, 0.008790791035, 0.043586112559, -0.017350446433, -0.035071536899, 0.001754224300, -0.031708844006, -0.067138977349, -0.053132746369, -0.045109517872, 0.026382610202, 0.041296944022, 0.024541936815, 0.059188634157, -0.001036733389, -0.009430162609, -0.009708993137, 0.070609748363, 0.034075498581, 0.071070790291, 0.044207833707, 0.064244240522, -0.033364560455, -0.039655886590, 0.019608080387, -0.057215407491, 0.034111127257, -0.043779324740, -0.027884896845, -0.070484846830, -0.049139868468, -0.012882933021, 0.005942553282, 0.034942112863, 0.018071033061, 0.017885684967, -0.029667358845, 0.014847002923, 0.052827164531, 0.003135502338, -0.015593625605, 0.030417591333, 0.036533221602, 0.016831934452, 0.013087585568, 0.066915154457, -0.049198817462, 0.023567385972, -0.003263570368, 0.008826270700, -0.068338915706, 0.048708006740, 0.070122241974, -0.039962004870, 0.054548472166, -0.071561396122, -0.070047304034, 0.063374087214, -0.061523541808, 0.013049662113, 0.058579489589, -0.015523731709, 0.059061124921, -0.012780297548, -0.056304000318, 0.009682476521, 0.040348559618, 0.054317072034, -0.017648495734, -0.069181293249, 0.006820797920, -0.037681795657, -0.033240485936, -0.064586102962, 0.035553038120, -0.027751944959, 0.044308148324, -0.060889244080, -0.055912077427, 0.003405675292, -0.030019607395, -0.026193615049, 0.061387479305, -0.056474037468, -0.040221165866, -0.034175481647, -0.018621020019, 0.068142399192, -0.033953778446, -0.068782359362, 0.026777818799, 0.008669860661, 0.010293334723, -0.006840564311, -0.046203546226, 0.058487206697, -0.046585068107, -0.053277604282, -0.020397938788, 0.006683804095, 0.052629634738, -0.031889185309, -0.049954522401, -0.053832411766, 0.028127819300, 0.012862384319, -0.005002617836, -0.049660172313, 0.048938624561, -0.065819010139, 0.023126028478, 0.001050934196, -0.014421783388, -0.038290023804, 0.002507261932, 0.069584056735, 0.017120637000, -0.024751789868, 0.071359828115, -0.044259313494, -0.070493482053, -0.032297283411, 0.068067327142, 0.045281939209, -0.006969653070, -0.070003047585, -0.052303571254, 0.033755160868, 0.008372880518, 0.001510597765, -0.030471738428, 0.069990724325, 0.029234066606, -0.003305792809, -0.044147074223, 0.006079360843, -0.022090513259, -0.057596165687, 0.050498552620, 0.045835502446, 0.062994673848, -0.003622926772, 0.003811605275, 0.021082289517, 0.061875596642, 0.010075397789, 0.056816011667, -0.028994880617, -0.000066727400, 0.063905030489, 0.014964006841, -0.041113108397, 0.038359709084, 0.055381670594, -0.068816512823, 0.071737468243, -0.014211196452, -0.070947229862, -0.020222328603, 0.059271618724, -0.028787270188, -0.057250026613, 0.027672670782, 0.066317200661, 0.021238401532, -0.050451338291, 0.053449720144, -0.004158474505, -0.058487251401, -0.069366171956, 0.049489453435, 0.026167921722, 0.048462450504, -0.057439330965, 0.038847975433, 0.046530708671, 0.038565926254, -0.006280824542, 0.046109601855, -0.009168177843, 0.069865629077, -0.002907089889, -0.065777562559, 0.040643550456, 0.021444052458, 0.063752189279, -0.066881209612, -0.032267138362, 0.012362115085, -0.040341611952, -0.066837884486, -0.025854371488, -0.044541068375, 0.017835274339, -0.060819454491, 0.040289580822, -0.069568626583, 0.062478899956, 0.018096789718, -0.004139423370, 0.070889160037, -0.008632577956, -0.044552922249, 0.013499639928, -0.054464057088, 0.053983315825, 0.007949464023, -0.060775801539, -0.033788491040, -0.006147377193, 0.045288890600, -0.014298588037, 0.058376654983, -0.055995903909, -0.068046785891, 0.004149489105, -0.066910378635, 0.050444923341, 0.022982560098, 0.027391761541, 0.003518827260, -0.019634455442, -0.002100899816, -0.048621885478, -0.043331872672, 0.017418943346, 0.053054824471, 0.008262999356, -0.009349912405, -0.021130878478, 0.013341963291, -0.022792566568, 0.034513741732, 0.042304120958, -0.028824951500, 0.039937466383, -0.042621955276, -0.002990916371, 0.019508279860, -0.011861287057, 0.060238033533, 0.063925310969, 0.063680544496, 0.041861020029, 0.033734381199, -0.011679828167, -0.070060901344, -0.047454640269, 0.038714505732, -0.036677651107, 0.055090725422, -0.040701188147, -0.019171535969, -0.000778034329, -0.044581159949, 0.006202690303, 0.038840577006, -0.055634744465, -0.066803038120, -0.011493120342, 0.002595148981, -0.037494402379, -0.069784425199, -0.065971851349, 0.070616513491, -0.013733442873, -0.012604083866, -0.049365222454, -0.035610251129, -0.052419200540, -0.050374478102, 0.069490045309, 0.020267754793, -0.017435859889, -0.040473256260, -0.065957657993, -0.064550437033, 0.053818389773, 0.047722011805, -0.064571686089, -0.033261634409, -0.017244990915, 0.004919439554, 0.068549588323, 0.016572304070, 0.024329215288, -0.005792662501, 0.052739925683, -0.056694157422, -0.070695586503, 0.033784776926, 0.001068361104, 0.055346623063, -0.055259007961, 0.020726785064, 0.067850410938, 0.014574006200, 0.023169539869, -0.056643310934, -0.046188596636, 0.064670830965, -0.069565735757, 0.061003357172, 0.049559138715, -0.067903421819, -0.026101406664, -0.056084722281, 0.062398910522, -0.016105223447, -0.050083033741, -0.023935895413, -0.037413239479, -0.046990789473, -0.013146843761, 0.067033827305, -0.058754704893, -0.029988083988, -0.063832804561, -0.068431489170, 0.066867157817, -0.045815408230, 0.059343039989, -0.048352763057, -0.019332792610, -0.065066538751, 0.036766074598, -0.011855419725, 0.045561715961, -0.067535124719, 0.000036835670, 0.041582703590, 0.071895480156, 0.016591437161, 0.053644165397, -0.061615936458, 0.019195571542, -0.006812177598, 0.059286430478, -0.031135734171, 0.021372042596, 0.030023492873, -0.034122105688, -0.048707440495, 0.037913754582, -0.050188168883, -0.034218341112, 0.070963218808, -0.029292725027, -0.069254279137, -0.010969530791, -0.043431326747, 0.071907848120, -0.019208598882, 0.047246754169, 0.070842847228, -0.067488685250, 0.022051416337, -0.021205812693, -0.021719094366, -0.011957813054, -0.045233797282, -0.033576715738, 0.060533076525, 0.042219363153, -0.003932118416, 0.004845887423, -0.021881163120, -0.042209621519, 0.005168914795, 0.049590483308, 0.064931407571, -0.026372130960, 0.014099523425, 0.031689397991, -0.000817269087, -0.004195623100, -0.031595796347, -0.047646202147, -0.033360242844, 0.006019286811, -0.003787055612, -0.013605307788, 0.041738905013, -0.050106074661, 0.034495964646, 0.065414816141, -0.045904088765, 0.049191333354, -0.070845149457, -0.056411180645, 0.032063417137, -0.021497253329, -0.036467678845, 0.066102936864, 0.016765102744, 0.047882080078, -0.030391093343, -0.043819069862, -0.034654024988, 0.056910842657, 0.053987026215, -0.008534550667, 0.059047535062, 0.050160720944, 0.038993507624, -0.065906919539, -0.024726495147, 0.016321502626, 0.002362728119, -0.000481985509, -0.052147578448, 0.058481276035, 0.059698253870, 0.006909735501, -0.046316698194, 0.024320736527, -0.016429681331, 0.063860937953, -0.036419209093, -0.043764423579, 0.063537165523, -0.055166143924, 0.057526022196, -0.018586125225, -0.017536982894, 0.015357263386, 0.018567435443, -0.059457812458, -0.058322001249, -0.071836009622, 0.022442020476, 0.033257156610, -0.003314465284, 0.041189126670, -0.036800432950, 0.001960635185, 0.024423576891, 0.062962889671, 0.019759275019, -0.031614258885, 0.036725483835, 0.021264865994, -0.000989057124, -0.052865169942, -0.009247206151, -0.014935120940, -0.037999015301, -0.035074118525, -0.032545745373, -0.070026636124, -0.046034015715, 0.046817079186, 0.066445857286, -0.038893796504, -0.067437008023, 0.024555481970, 0.030676767230, 0.060312286019, 0.056535378098, 0.039098240435, 0.040633067489, 0.047552168369, 0.008972905576, 0.069239333272, 0.037075705826, 0.014168709517, -0.062372054905, 0.071664378047, 0.057973518968, -0.032320737839, 0.039051994681, 0.061254501343, -0.070902086794, -0.045939721167, -0.017084524035, -0.043792400509, 0.058717593551, -0.025255039334, -0.042453296483, 0.018657922745, 0.040921241045, 0.024932093918, 0.065765142441, -0.028625443578, 0.009607918561, -0.034177906811, -0.004401527345, -0.017944738269, 0.012508556247, 0.051496624947, -0.054399531335, 0.070775285363, 0.036948375404, -0.033651735634, -0.056386865675, -0.059334509075, -0.027152456343, 0.033334054053, -0.061346795410, -0.060133058578, 0.013685628772, 0.065957486629, -0.005241319537, -0.037096850574, -0.063980333507, -0.067614957690, -0.060543395579, 0.042555280030, -0.056264154613, 0.023416712880, -0.004680238664, -0.005437321961, 0.010858722031, -0.044815890491, -0.070037737489, 0.027238883078, -0.070655494928, -0.048129096627, -0.025017403066, -0.036716070026, 0.018579117954, 0.045724727213, -0.063641235232, 0.025237388909, 0.014730088413, -0.053262345493, 0.061740726233, 0.071118593216, 0.053654357791, -0.049459598958, 0.066684260964, -0.063820816576, 0.034951664507, -0.069953963161, -0.068969562650, -0.037404600531, 0.009314067662, -0.052387036383, -0.036116600037, -0.018381521106, -0.035511847585, -0.025472633541, -0.003310538828, 0.055020585656, 0.030741624534, 0.052250675857, 0.058511763811, -0.005834802985, 0.051816441119, 0.005607470870, -0.042188957334, 0.068943053484, -0.026932440698, -0.036904223263, 0.013889178634, 0.007213033736, 0.027692407370, -0.051324527711, 0.063385784626, 0.032153315842, -0.067915730178, 0.035316742957, -0.028574872762, 0.024810768664, 0.071513667703, 0.068745061755, 0.024782367051, 0.021920166910, 0.021865196526, 0.046795792878, 0.043012559414, -0.067248135805, -0.003217212856, 0.059657365084, -0.046159122139, -0.036017302424, 0.003722481430, -0.021369408816, 0.004882857203, -0.068687707186, -0.022513754666, 0.015445046127, -0.070830851793, -0.052894093096, -0.017719112337, -0.048526410013, -0.022547170520, -0.023564290255, -0.058634057641, -0.038172625005, 0.003220997751, -0.015375945717, 0.000792093575, -0.057595066726, 0.032646954060, 0.063337370753, 0.057732090354, -0.054958481342, 0.070435985923, -0.028238970786, 0.053793340921, -0.057042501867, 0.025610923767, 0.056621491909, 0.019618026912, -0.034076374024, -0.063050247729, -0.054865598679, -0.062080010772, 0.007435441017, 0.002217508852, 0.009603932500, 0.071896806359, -0.036568250507, 0.021534577012, 0.007847465575, -0.053492374718, 0.008141286671, 0.067520216107, 0.019832812250, -0.038240607828, -0.013998609036, -0.014615889639, -0.016750287265, -0.000615164638, 0.024266071618, -0.037028901279, -0.046566154808, -0.004404194653, -0.033692255616, -0.035484988242, 0.070485264063, 0.018651798368, 0.049783714116, -0.061317976564, 0.004671409726, -0.025354802608, 0.046140708029, 0.040124692023, 0.012129016221, 0.039548277855, -0.014838092029, 0.066428646445, 0.038097523153, -0.031536418945, -0.027969691902, 0.043017290533, -0.013878043741, 0.029457233846, 0.016752816737, -0.050051718950, -0.047654304653, 0.041015118361, 0.032875247300, -0.009441830218, -0.043167930096, 0.007859922945, 0.034193098545, 0.014233358204, 0.043442837894, 0.004963681102, -0.018658030778, -0.060242354870, -0.014189928770, 0.040634617209, 0.023644126952, -0.058949913830, 0.064669206738, 0.014279089868, -0.013335201889, 0.027725756168, 0.040162339807, -0.062302440405, -0.025342915207, 0.046257749200, -0.016755260527, 0.049432292581, -0.013771556318, 0.029670126736, -0.053044494241, 0.008040525019, 0.035339958966, 0.040064655244, -0.025937996805, -0.002783924341, 0.068436816335, 0.024132184684, 0.019745178521, 0.020715944469, 0.021590165794, -0.027367744595, -0.038977831602, 0.047321945429, 0.009453117847, -0.069968894124, -0.043732091784, -0.003128170967, 0.037304751575, -0.018757514656, -0.052541173995, 0.020446151495, 0.055393978953, -0.011175110936, -0.034900575876, -0.031312357634, 0.026175618172, 0.019306518137, -0.062213551253, 0.068012356758, -0.005357153714, 0.016587190330, 0.070745363832, -0.066139549017, 0.067529007792, 0.029206380248, -0.069510810077, 0.066025570035, -0.016953874379, 0.010363727808, -0.066087201238, 0.045540101826, 0.012498676777, -0.014037635177, -0.060220088810, -0.066398121417, 0.005330450833, 0.021163605154, -0.058056008071, 0.010861612856, -0.011193573475, 0.067505270243, -0.029450386763, 0.032208651304, -0.039441596717, 0.054654628038, -0.048266112804, 0.020562157035, -0.049098588526, -0.008373297751, -0.044617719948, 0.053365275264, -0.054353624582, -0.004053838551, -0.019592680037, -0.071501195431, -0.038258932531, 0.065811246634, 0.048673883080, -0.016265947372, 0.022328823805, 0.071851015091, -0.068735510111, 0.060968458652, -0.053703583777, 0.047356307507, 0.062144294381, -0.002173334360, -0.024029448628, -0.002721689641, 0.023404635489, 0.008959673345, -0.062561221421, -0.034877296537, -0.066738091409, 0.004536062479, -0.034550994635, 0.002551153302, 0.020305901766, -0.023378565907, -0.053750507534, -0.032787546515, -0.047511957586, 0.021648310125, 0.042085804045, -0.034302067012, 0.001834042370, -0.042682312429, -0.066792979836, -0.035328272730, 0.023294113576, -0.051310315728, 0.057258799672, 0.028898939490, 0.019206844270, -0.042172990739, -0.022433262318, 0.017413683236, 0.014172807336, 0.042112402618, -0.028602749109, 0.031204231083, 0.011236108840, -0.004666127264, -0.026122413576, 0.001864157617, 0.051345430315, 0.044591173530, 0.047952748835, -0.043054986745, -0.046031534672, -0.013997010887, 0.000991240144, 0.058413267136, 0.040385812521, -0.023203026503, -0.013608388603, -0.029083684087, -0.062255982310, -0.005943462253, -0.029716052115, 0.056184321642, 0.051333010197, 0.016448661685, 0.000621318817, -0.053908977658, 0.044404327869, 0.044952385128, 0.057000383735, -0.049265906215, 0.036311514676, 0.045591913164, 0.017030477524, 0.037756040692, -0.040623500943, 0.032905705273, -0.015166856349, -0.062657661736, 0.063569724560, 0.059340223670, -0.056465223432, -0.016614962369, 0.069215044379, -0.040174674243, 0.000092297792, -0.038321685046, -0.047614589334, -0.023302633315, -0.018970068544, 0.009495697916, -0.019376792014, -0.033288698643, -0.026202853769, -0.012567743659, 0.065621182323, -0.037781387568, 0.024820201099, -0.056113131344, 0.036754079163, -0.037400834262, 0.011636294425, -0.059331551194, 0.018059559166, -0.007144585252, -0.066710181534, -0.016233101487, -0.053970195353, 0.024100527167, 0.016249872744, 0.042139537632, -0.019757583737, 0.001625746489, -0.039003487676, -0.056210160255, 0.054547563195, 0.053412541747, -0.067543603480, -0.052288755774, -0.024817205966, -0.041109703481, -0.018541574478, 0.004586942494, 0.006948329508, -0.000924840569, -0.008628688753, -0.056973416358, -0.033873576671, 0.041134461761, -0.050593823195, -0.069579392672, -0.039199363440, 0.034223213792, 0.040952935815, -0.034037433565, -0.002518787980, -0.002464540303, 0.059128925204, -0.036675877869, 0.029936313629, -0.042543958873, -0.024438668042, -0.000671200454, 0.006448499858, 0.024206914008, -0.044715680182, 0.058290138841, 0.032055400312, -0.008952498436, -0.029831938446, -0.044388137758, 0.008141711354, 0.021248601377, -0.053447864950, 0.032610081136, 0.065497562289, -0.022958677262, -0.026219166815, -0.055626861751, 0.068180277944, -0.009954046458, 0.032970607281, -0.031659152359, 0.024093590677, 0.018673188984, -0.061675559729, -0.021055515856, -0.012201454490, 0.029529549181, 0.026394329965, -0.036442440003, 0.015128739178, -0.013022769243, -0.017919790000, 0.004644468427, 0.000625349581, -0.052022643387, -0.061436355114, -0.016918551177, -0.029781144112, -0.022713590413, -0.067172773182, 0.014147013426, 0.031194701791, 0.038649864495, 0.004842132330, 0.063352748752, 0.013505026698, -0.016352426261, 0.010170504451, -0.015150062740, -0.062831565738, 0.060388505459, 0.002406053245, 0.049893900752, -0.017947524786, -0.047487299889, 0.056549593806, -0.069575369358, 0.011229053140, 0.040177531540, 0.019254006445, 0.070954784751, 0.056099593639, 0.034688539803, 0.022898301482, 0.024227648973, 0.027776941657, -0.056567691267, 0.040526941419, -0.050624709576, -0.067223601043, -0.066152453423, 0.056875035167, 0.014556214213, 0.004119053483, 0.029195144773, 0.064655750990, 0.062573313713, 0.070974588394, -0.065090596676, -0.002741128206, -0.012556731701, -0.050641655922, 0.061746433377, -0.017349053174, 0.071844682097, -0.042292334139, 0.051548570395, -0.043461248279, -0.018535502255, -0.030838493258, -0.025111366063, 0.072052240372, -0.001762554049, 0.023969016969, 0.036382906139, 0.053698763251, -0.045448258519, -0.031802963465, -0.052066225559, -0.022378098220, -0.018918480724, -0.057462610304, -0.014056287706, 0.017962165177, 0.028159789741, 0.036695905030, 0.044056743383, -0.049521815032, 0.051238134503, 0.048922985792, -0.000720605254, -0.044202137738, -0.040687717497, 0.018381915987, -0.013768147677, -0.006023935974, 0.068888708949, -0.022780694067, 0.042639091611, 0.065066561103, 0.058593004942, -0.019262146205, -0.002204380929, 0.025391913950, 0.022171452641, -0.050915807486, 0.015092179179, -0.039140380919, -0.067769870162, 0.040075689554, 0.060327649117, -0.063406690955, -0.021133769304, 0.010900944471, -0.062368165702, -0.033327534795, -0.009738706052, 0.068228557706, -0.015786405653, 0.025577984750, -0.047148332000, -0.008917123079, 0.026524804533, 0.010384477675, -0.058841943741, 0.061226040125, 0.017216719687, -0.030997790396, -0.033140260726, 0.023956939578, 0.045734658837, -0.032642703503, 0.030040666461, -0.070397540927, -0.045183673501, 0.009260751307, 0.008765690029, -0.038095042109, -0.040922053158, -0.053239237517, -0.056690819561, 0.069536104798, -0.063821054995, -0.055276595056, -0.005484379828, 0.025866158307, -0.024832934141, -0.002047367394, 0.028798319399, -0.059437267482, -0.044705666602, -0.027163453400, -0.033580519259, -0.053779982030, -0.048454850912, 0.021289229393, -0.022866949439, -0.057426117361, -0.026404358447, -0.016081664711, 0.001182645559, -0.045439101756, 0.053335115314, 0.064542740583, -0.053411848843, -0.007366552949, 0.067603394389, -0.066756516695, 0.032941646874, -0.005142353475, -0.027418382466, -0.060055542737, -0.027053158730, 0.063989758492, 0.071731925011, 0.057403400540, 0.047482863069, -0.053114421666, -0.058812625706, -0.030181363225, -0.065086223185, 0.067685171962, -0.045582555234, -0.050866030157, 0.036184102297, -0.032389853150, -0.021491404623, 0.025180727243, -0.045444302261, 0.011692523956, -0.007834494114, -0.004048004746, -0.037623312324, 0.017888918519, -0.027445085347, 0.000176139176, -0.054233573377, -0.027388200164, -0.038692791015, 0.036917693913, 0.043448999524, -0.065498694777, -0.048003971577, -0.064713880420, -0.019210148603, -0.069515384734, 0.014994017780, -0.040488038212, -0.046107072383, -0.033904463053, -0.057832859457, -0.004811644554, 0.056992635131, 0.038351483643, 0.067175954580, -0.019174426794, 0.031648583710, -0.052258267999, -0.065957315266, -0.004011444747, 0.061414137483, 0.054416984320, 0.047213956714, 0.004370301962, 0.024221040308, 0.000091142952, -0.015628226101, -0.028786271811, -0.017579723150, -0.053934976459, 0.054784938693, -0.050835490227, -0.036644577980, -0.051837004721, -0.049902543426, 0.036359727383, -0.029003985226, 0.017398677766, 0.062988132238, 0.030675463378, -0.049993164837, -0.018181808293, 0.046493992209, -0.048350818455, 0.005975261331, -0.025162816048, -0.004640161991, -0.013897765428, -0.026420220733, 0.069710388780, 0.019407436252, 0.065516114235, -0.068350292742, -0.002626553178, 0.044865511358, 0.054389536381, 0.045876026154, 0.020087309182, 0.064040899277, -0.048033997416, 0.044897995889, -0.040586784482, -0.062928318977, -0.000467859209, -0.053514882922, 0.032941199839, -0.033352050930, 0.067795902491, 0.002630703151, -0.044929467142, 0.051736637950, -0.046001356095, -0.045872770250, 0.067755341530, -0.063995271921, -0.057664029300, 0.057248219848, -0.052894093096, -0.066224187613, 0.005342632532, 0.053272828460, -0.014545448124, 0.064179703593, 0.068991571665, -0.029264144599, -0.056371916085, -0.022139292210, -0.008939281106, 0.008023090661, 0.014223054051, -0.064854368567, 0.039468318224, -0.015115719289, 0.039295122027, -0.020369462669, 0.047600537539, -0.044640265405, -0.005837261677, 0.055990934372, 0.059653177857, -0.059941053391, -0.057433824986, 0.039737164974, -0.029015857726, -0.040324077010, 0.013681754470, -0.035061713308, 0.055864661932, 0.064994364977, -0.039490152150, -0.041834622622, 0.064015403390, 0.035476781428, 0.030810706317, 0.002884596586, -0.070485949516, 0.054724976420, 0.060347139835, -0.070359945297, -0.014550987631, 0.028963699937, -0.042155936360, 0.012407779694, 0.005585514009, 0.046875752509, 0.031786531210, 0.063500702381, -0.034504156560, -0.066596530378, -0.049231424928, 0.000533379614, 0.070581257343, -0.071427740157, 0.008229881525, -0.062698632479, -0.042332716286, -0.026562605053, 0.070325210690, 0.048440821469, -0.015207666904, -0.029648739845, 0.026904307306, 0.027220904827, -0.058676660061, -0.069487050176, -0.008587516844, -0.063421748579, -0.023384794593, 0.014021441340, 0.037085145712, 0.026573620737, -0.002292096615, 0.054537147284, 0.002084016800, -0.023664534092, 0.070105776191, -0.066738791764, 0.064954340458, -0.037936434150, -0.016712643206, -0.037277087569, -0.030966147780, 0.016011223197, -0.053438279778, 0.067925900221, -0.037697024643, -0.033320721239, 0.033008769155, 0.068661481142, 0.043902814388, 0.035920687020, -0.007688947022, -0.068902872503, -0.018277887255, -0.026641566306, 0.036529414356, -0.006725646555, 0.028721868992, -0.046916063875, 0.010843634605, 0.004499070346, -0.032082650810, 0.026503346860, 0.005481712520, -0.037473909557, 0.019068628550, -0.058029476553, 0.045017533004, 0.019231364131, -0.069252111018, 0.023829936981, 0.035568080842, -0.047698006034, -0.000492237508, 0.072107672691, 0.042290024459, 0.028787836432, 0.045107021928, -0.069941692054, -0.042212940753, -0.035867005587, -0.015414662659, -0.049080610275, -0.035470347852, -0.068028599024, 0.063722476363, -0.012340929359, -0.006755843759, -0.044707641006, 0.030672781169, -0.029815435410, 0.071213513613, -0.053286246955, -0.060768987983, -0.044547900558, -0.008612722158, -0.017025865614, -0.005025587976, 0.070819661021, 0.048251159489, -0.056039370596, 0.018115669489, 0.014070898294, -0.033889889717, -0.049529094249, 0.011430472136, 0.010400891304, -0.069820314646, 0.065533027053, 0.006383478642, 0.021895565093, -0.048551529646, 0.026736252010, -0.006471022964, -0.042040862143, 0.011933155358, 0.003267407417, 0.069468185306, -0.007144190371, -0.053510770202, -0.013518810272, -0.036952383816, -0.013594038785, 0.063232943416, -0.001942396164, -0.059654168785, 0.007459290326, 0.031545519829, -0.035927899182, -0.009153209627, 0.050244107842, -0.002465277910, -0.052461903542, -0.020942915231, 0.038621179760, -0.010166112334, 0.016997374594, 0.038612835109, 0.016558490694, -0.016301151365, -0.039653647691, 0.025268636644, 0.049755804241, -0.030287940055, 0.039151035249, 0.031077146530, -0.037434902042, -0.045408304781, 0.022926464677, -0.043921761215, -0.057186190039, 0.014806777239, 0.034638643265, 0.017551518977, -0.013173393905, -0.065247811377, -0.064772881567, 0.001647628844, 0.028888218105, 0.013873107731, -0.031011193991, -0.055335283279, 0.070401459932, 0.032713644207, 0.058383598924, -0.039098225534, -0.016113497317, 0.070056676865, -0.031525183469, -0.042847253382, 0.056437581778, 0.016565181315, -0.038985576481, 0.014153055847, -0.062910154462, 0.048537731171, 0.010019324720, -0.023129228503, -0.050225246698, 0.007655516267, 0.008898518980, 0.030979640782, -0.032145250589, -0.033680591732, -0.024243082851, -0.039388068020, -0.060713823885, 0.041833348572, -0.022091493011, -0.000778004527, 0.067305415869, -0.063732355833, 0.047106333077, 0.029712356627, -0.031577043235, -0.010740324855, -0.011334184557, -0.036791179329, 0.057437598705, 0.061693012714, 0.016074679792, 0.006731137633, 0.036331437528, -0.049078803509, 0.066965833306, -0.029726445675, -0.035788267851, 0.004927203059, 0.028014495969, 0.041145458817, 0.015454269946, 0.031064771116, -0.014569535851, -0.066826112568, 0.027969814837, -0.033311378211, -0.011741545051, -0.026039015502, -0.008948937058, -0.069193489850, 0.050741419196, 0.045033656061, -0.023532390594, 0.056108996272, -0.034589655697, 0.008797571063, 0.059576898813, -0.056966498494, -0.058260727674, 0.053081184626, -0.028266020119, -0.043379448354, 0.060681954026, -0.046927146614, 0.056229665875, 0.045179903507, -0.068326771259, -0.044995643198, 0.035089962184, -0.021536037326, -0.030595023185, -0.026273280382, 0.051636636257, -0.021619196981, 0.034891903400, 0.060567289591, -0.039763063192, -0.068731531501, 0.071633934975, 0.036133997142, 0.050786674023, -0.067221514881, -0.012668900192, -0.067660674453, -0.066388234496, -0.009301163256, 0.001069493592, 0.047416821122, -0.006488420069, 0.012731254101, -0.043085787445, -0.026589483023, 0.042206302285, 0.070536017418, 0.002084016800, -0.024920135736, 0.047058016062, 0.024466782808, -0.033784192055, 0.048657506704, -0.022565733641, 0.053390413523, -0.034201618284, -0.025479823351, -0.036912862211, 0.050096713006, -0.059211380780, -0.052766870707, 0.047684945166, -0.026547513902, -0.031925160438, -0.014551468194, -0.071131080389, 0.030892886221, 0.008241079748, -0.048761188984, 0.068333715200, -0.067942552269, 0.060829252005, 0.068262830377, -0.023676063865, 0.002298086882, -0.008226335049, 0.017548374832, -0.001669414341, 0.035109184682, 0.025804094970, 0.038399353623, -0.017396077514, -0.026573445648, -0.058273993433, -0.065498888493, 0.035483784974, 0.056775107980, -0.000947110355, -0.052659533918, -0.066760078073, -0.060403816402, 0.057277053595, 0.063025251031, 0.020374298096, 0.004637375474, 0.011985495687, -0.040929451585, 0.012833118439, 0.040907204151, 0.011168763041, -0.066001892090, 0.061203151941, 0.068128243089, 0.059849619865, -0.049119941890, -0.059961423278, 0.011049143970, 0.045768722892, 0.028958149254, 0.066842675209, -0.017441522330, 0.052934318781, 0.062957599759, 0.024313986301, 0.047831475735, -0.070463031530, 0.042501457036, -0.056433789432, 0.019328713417, -0.029472995549, 0.025132149458, -0.046599999070, 0.034983903170, -0.019403290004, 0.008420631289, -0.017035156488, 0.063931807876, 0.036311239004, -0.001968532801, 0.005760714412, 0.001194328070, 0.014808535576, 0.041456893086, -0.069537512958, 0.052023895085, -0.026123378426, -0.041833281517, 0.064195930958, 0.007966980338, 0.039452970028, 0.006462201476, -0.037619631737, -0.035010162741, -0.011228829622, -0.050141811371, -0.065102122724, -0.032550148666, 0.013780243695, -0.037296753377, 0.020862616599, 0.032784588635, -0.001162186265, -0.011669795960, -0.030757348984, -0.046201705933, -0.017028033733, 0.042215228081, 0.030459798872, -0.002375751734, -0.049513746053, -0.001990981400, 0.001362949610, -0.045416459441, -0.062800563872, 0.025267444551, -0.060038302094, -0.072010032833, 0.052856668830, -0.067402079701, -0.052939433604, 0.050300419331, -0.018235318363, -0.032464977354, -0.049738135189, -0.071583509445, 0.008077345788, 0.036219738424, 0.029346786439, 0.021282486618, -0.067656889558, 0.033670112491, 0.020143762231, 0.021742768586, 0.033311322331, -0.005916960537, 0.009613670409, -0.050637237728, 0.051150590181, -0.071341499686, -0.000976823270, -0.065859876573, -0.001742266119, -0.049696221948, -0.061199199408, 0.007312886417, -0.055320244282, 0.036199502647, -0.016284339130, -0.023776203394, 0.031757883728, -0.037961211056, 0.019376859069, 0.015512309968, 0.008083932102, -0.004757218063, -0.043192483485, -0.006217591465, -0.043217554688, 0.015087634325, -0.016882073134, -0.001978114247, 0.020623408258, 0.030500233173, -0.022445257753, -0.003420419991, -0.022756226361, 0.062872797251, -0.067537546158, -0.021681360900, 0.040602512658, 0.002599865198, -0.031257312745, 0.020889751613, -0.024889420718, -0.045030400157, 0.005946315825, -0.013878818601, 0.068993821740, 0.049379914999, 0.060043513775, 0.036926746368, 0.044698320329, -0.032655194402, -0.026257466525, 0.011312797666, 0.030651651323, 0.034622654319, -0.021321490407, 0.063703566790, -0.016535330564, -0.048684965819, 0.034147880971, 0.032228045166, -0.015885047615, -0.033004224300, -0.031812958419, 0.065153583884, -0.012060690671, 0.013218954206, 0.052691474557, -0.008443258703, -0.043371446431, -0.023691479117, 0.008413404226, 0.046158552170, -0.068762592971, 0.053367778659, 0.046957187355, -0.019841019064, 0.011319197714, 0.068567901850, 0.042741008103, 0.020754382014, -0.057779483497, -0.001776732504, -0.029771577567, 0.034369312227, -0.054793264717, 0.033848091960, 0.008455887437, -0.027846716344, 0.006218008697, 0.067451998591, -0.021076917648, 0.002470575273, -0.067105188966, -0.031016904861, -0.029658392072, -0.029550649226, -0.040417440236, -0.003715217113, 0.034495398402, -0.002022661269, -0.030165467411, 0.017267927527, 0.033684067428, 0.018647223711, 0.041885159910, 0.067448675632, -0.017161469907, -0.044799249619, 0.051613971591, -0.047814443707, -0.028553556651, -0.062591984868, 0.027041099966, -0.038227461278, 0.070080354810, 0.031587764621, 0.010806776583, -0.052480366081, 0.009942308068, -0.022269219160, 0.024195782840, -0.051639556885, -0.045102976263, 0.032444536686, -0.003485396504, -0.000466741621, 0.000416345894, 0.050078749657, 0.057088658214, 0.031926520169, 0.010688327253, 0.053642570972, -0.007901825011, -0.016908451915, 0.043020918965, -0.047815579921, -0.034181382507, -0.069968789816, 0.044266760349, 0.067248880863, -0.056692969054, -0.068210452795, -0.031419586390, -0.068901494145, -0.069874361157, 0.006810680032, -0.053994234651, -0.064514160156, 0.031635783613, 0.068380266428, -0.019344978034, -0.045411091298, 0.066678211093, -0.046750143170, -0.064106650651, 0.020908348262, 0.063303008676, 0.069128036499, -0.045918043703, -0.020466059446, -0.071137383580, 0.044987969100, -0.012081563473, -0.037749573588, -0.018727406859, -0.054154083133, -0.070713602006, -0.030635423958, -0.028835583478, 0.016548544168, -0.050757527351, -0.032521139830, 0.040569081903, -0.065493635833, 0.038562744856, -0.045591723174, 0.042999014258, 0.037354908884, 0.071666419506, 0.020211987197, -0.019851464778, -0.035869516432, 0.007191509008, -0.052596423775, 0.035194650292, 0.019808016717, 0.062778279185, -0.031486243010, 0.027797698975, -0.034820478410, -0.041497260332, 0.046759448946, -0.025652561337, -0.014731686562, 0.067126780748, 0.003866568208, -0.055306740105, 0.068577781320, -0.069034740329, 0.056838020682, 0.012405298650, -0.038366712630, 0.034345000982, 0.055869966745, -0.022821456194, 0.051818847656, 0.009793475270, -0.038995280862, 0.018640875816, -0.057936422527, 0.031489871442, 0.033739455044, -0.008084535599, 0.017393909395, -0.050609432161, -0.045405946672, -0.045210845768, 0.019147463143, 0.053555697203, 0.067097172141, -0.006895832717, -0.017963681370, 0.065616890788, -0.010345797986, 0.046576306224, 0.055739611387, -0.056660793722, 0.032845377922, 0.015419103205, 0.027074255049, 0.005738273263, 0.021875694394, 0.003569081426, -0.000385925174, -0.070518381894, -0.062863864005, -0.027792897075, 0.043029591441, 0.058197185397, -0.007656045258, 0.038256764412, 0.059645622969, -0.063080407679, -0.038075067103, 0.004030957818, -0.030091803521, -0.011741183698, 0.068920254707, 0.071898296475, 0.058273732662, -0.040095318109, 0.007436938584, 0.058564588428, -0.018241927028, -0.013741549104, -0.055229961872, 0.042933493853, 0.028765603900, 0.070445552468, -0.051056314260, 0.062674254179, -0.009341150522, 0.023316912353, -0.000543050468, -0.013787712902, 0.023959018290, -0.045031689107, -0.014716152102, -0.054592225701, 0.011771537364, 0.039809368551, -0.025644026697, 0.009485512972, -0.020038582385, 0.065199702978, 0.063462585211, -0.021017506719, 0.053870797157, 0.039610318840, -0.047970749438, -0.032337132841, 0.058459460735, 0.012382842600, -0.009856294841, -0.037309519947, 0.007501244545, 0.013690635562, 0.012880593538, -0.032729767263, 0.051478452981, -0.070510156453, 0.030344188213, 0.065474480391, 0.037399798632, -0.066838882864, 0.018295593560, 0.038275055587, -0.002345196903, -0.039803825319, -0.057666230947, 0.028708346188, 0.053486824036, 0.055445507169, -0.047818675637, 0.046480864286, -0.056285627186, 0.044309400022, -0.012847106904, -0.061802472919, -0.036779064685, -0.060293853283, 0.061428457499, -0.037513915449, -0.059671033174, -0.060009807348, -0.071221023798, 0.037901692092, -0.008160345256, -0.008569553494, 0.023599252105, 0.023873507977, -0.055308476090, 0.003270052373, -0.028720475733, -0.027135662735, 0.012246623635, -0.070042483509, -0.012970305979, -0.014929562807, -0.018450364470, 0.065241202712, 0.036580264568, -0.042325697839, 0.065296709538, 0.063284009695, 0.058865085244, -0.021673172712, -0.041373871267, -0.012534037232, -0.065984651446, 0.071465849876, -0.006082318723, 0.045416682959, -0.004547476768, 0.015655674040, 0.061435893178, -0.005091004074, 0.000549264252, 0.012623220682, -0.025956649333, 0.033715315163, -0.031405184418, -0.002240650356, -0.011484708637, 0.063868284225, 0.002444386482, 0.056148633361, -0.061992257833, 0.015520289540, 0.058139190078, -0.040309228003, -0.036392711103, -0.001739613712, -0.034157793969, 0.060398489237, -0.033709652722, -0.039824008942, 0.022004202008, -0.007935859263, 0.003329299390, -0.020622428507, -0.044324144721, 0.068072393537, 0.014092937112, 0.052480451763, 0.029536575079, -0.016953583807, 0.002629183233, 0.035022124648, 0.029853738844, -0.000035837293, -0.019491489977, -0.047659553587, -0.058211088181, -0.028269823641, 0.018370218575, -0.026336703449, -0.021764449775, -0.040204871446, 0.071995466948, 0.000368505716, 0.025261200964, 0.037096902728, 0.043170459569, 0.068493828177, -0.049666177481, 0.047061562538, 0.007182873785, -0.029624875635, -0.039404965937, -0.053829602897, -0.031753372401, -0.042018972337, -0.013905368745, 0.026040650904, 0.037627048790, 0.053287118673, -0.002436026931, -0.050681941211, 0.056114673615, 0.043659053743, 0.058856621385, -0.032289851457, 0.038178473711, 0.048650622368, 0.001379586756, -0.000153034925, 0.063292995095, -0.021471548826, 0.063311249018, -0.028284791857, -0.050503730774, -0.016692217439, 0.018171846867, 0.064858570695, -0.043743193150, -0.010718058795, 0.040647141635, 0.030262306333, 0.040076009929, -0.071314416826, 0.017585672438, -0.033241603523, 0.044069908559, -0.032811220735, 0.019601561129, -0.015701491386, -0.034404445440, -0.010876875371, 0.032812803984, 0.062822237611, 0.007769003510, 0.055547758937, 0.017399437726, -0.020329955965, 0.023246727884, 0.018875241280, -0.026559647173, -0.018063254654, -0.046992562711, -0.058400720358, -0.014575075358, -0.002907857299, 0.037277415395, -0.068967826664, 0.012229986489, -0.063911169767, 0.070993930101, 0.029743857682, 0.032559558749, 0.069881334901, -0.050827369094, -0.060584329069, 0.015747122467, -0.032428037375, 0.060958489776, -0.041543215513, 0.031676411629, 0.049933791161, -0.036060113460, 0.000562667847, 0.020640097558, -0.001979872584, 0.034988410771, -0.066022798419, 0.031239710748, -0.005266167223, 0.059038624167, -0.039039585739, 0.041651189327, 0.037346981466, -0.011596478522, 0.021631963551, 0.023483268917, -0.011987995356, 0.061654388905, 0.034012019634, 0.002908311784, -0.064666591585, 0.039495401084, -0.006835147738, 0.019788764417, 0.027564823627, 0.039228238165, -0.004262983799, 0.047892391682, -0.030352585018, -0.065062448382, -0.008038632572, 0.044017598033, 0.030943505466, -0.013718817383, 0.002178430557, 0.062228932977, 0.059007570148, -0.045959871262, 0.037651613355, 0.071930140257, -0.016214877367, 0.014957174659, 0.063403412700, 0.018129311502, 0.053253814578, -0.015517313033, -0.034738130867, 0.003702312708, 0.030467607081, -0.040595334023, -0.027161061764, 0.029361568391, -0.048501700163, 0.005292043090, -0.069498851895, 0.025881350040, -0.057676691562, -0.049895331264, -0.047792628407, 0.022971615195, 0.061720341444, 0.041362449527, 0.029873676598, 0.068239182234, 0.022407658398, -0.056397948414, -0.052807889879, -0.064699269831, 0.026743218303, 0.059957891703, -0.031157653779, -0.052426528186, 0.003550194204, 0.051477685571, 0.011282637715, 0.003622442484, 0.059949263930, 0.049137167633, 0.053964406252, 0.038850232959, 0.032660268247, -0.024664051831, -0.029163315892, -0.027668751776, -0.071173630655, 0.006910629570, -0.032046172768, -0.043116930872, 0.015125647187, 0.011770300567, -0.063646361232, 0.041096404195, 0.069211080670, -0.062001153827, 0.025472238660, 0.045206785202, 0.042594559491, 0.039134994149, -0.005655720830, 0.030937187374, 0.056645825505, -0.050128273666, -0.041566014290, -0.065034791827, -0.061887130141, 0.066117435694, 0.006474569440, -0.052786298096, 0.004786215723, -0.037192206830, 0.018695451319, 0.063614860177, 0.034794121981, 0.059723421931, 0.019211366773, -0.046694360673, -0.003488734365, -0.030278321356, -0.060356035829, 0.040542975068, 0.070418715477, -0.071475416422, -0.053371965885, 0.011649645865, -0.018498457968, 0.040548823774, -0.027539685369, 0.055275425315, -0.037513416260, -0.053417976946, 0.049337297678, -0.061359357089, 0.000540748239, 0.029589347541, -0.038895897567, 0.014689065516, 0.023510590196, -0.029931750149, 0.056315049529, -0.019057061523, -0.048991549760, 0.071395680308, 0.066439792514, 0.004779122770, -0.061731394380, -0.006794936955, 0.050233900547, -0.045440688729, -0.036048550159, 0.026097983122, 0.030166104436, 0.048573799431, -0.020680107176, -0.023968640715, 0.039203219116, 0.033363804221, 0.070386022329, -0.072139188647, -0.010206412524, 0.061509534717, -0.060922365636, 0.035612314939, -0.023798022419, -0.069524385035, 0.040492869914, -0.032484419644, -0.017380766571, 0.044276863337, -0.012824155390, -0.063773669302, 0.048301450908, -0.048262704164, 0.047647751868, 0.003440655768, 0.016574889421, 0.006570994854, 0.068076640368, 0.028563603759, -0.020294509828, 0.060220152140, -0.064524695277, -0.038867332041, 0.056780874729, -0.016349602491, 0.022088289261, -0.019375827163, -0.036973308772, 0.012398518622, 0.058223456144, -0.007854968309, -0.029481649399, -0.045172903687, -0.013798862696, -0.056942187250, -0.034104213119, 0.048247531056, 0.029203146696, 0.071525648236, 0.061020687222, 0.056742563844, -0.035282280296, 0.064001530409, -0.070799395442, 0.069866463542, 0.043052561581, 0.021689705551, 0.071223706007, -0.060153532773, -0.014716375619, 0.033618405461, -0.018552139401, 0.050440013409, -0.046451665461, -0.043571159244, -0.050096437335, -0.033878497779, -0.057906776667, -0.070501998067, -0.017202783376, -0.033409606665, 0.035097226501, -0.030957184732, -0.061503719538, 0.053482472897, 0.045669339597, -0.039724417031, -0.035110302269, 0.043688356876, 0.041800469160, 0.017413459718, -0.051022384316, 0.066784366965, 0.037026904523, -0.059065092355, 0.008418567479, -0.016880646348, 0.060749337077, 0.037490546703, -0.057652741671, 0.005029357970, 0.048914723098, 0.020974732935, -0.041785225272, -0.037389993668, 0.071802809834, 0.008985102177, 0.041112475097, 0.069032609463, 0.030265606940, 0.011880405247, -0.027660768479, -0.055278725922, -0.054545044899, 0.030084528029, -0.020374521613, 0.017421834171, 0.042697474360, 0.024544551969, -0.056748133153, -0.041040465236, -0.051443595439, 0.049309246242, -0.041024498641, -0.032757226378, 0.023071929812, -0.025372043252, 0.039803363383, -0.022602520883, 0.028514958918, -0.038584306836, 0.022363595665, -0.018345527351, 0.059963539243, 0.032605379820, -0.056451048702, 0.024272330105, 0.063062891364, 0.065886393189, -0.024700738490, 0.009092643857, 0.006112948060, 0.068086504936, -0.005782581866, 0.063380062580, -0.035882163793, -0.015520084649, 0.030269496143, 0.002219155431, 0.043521553278};
# 23 "firmware/parameters.h" 2
# 1 "firmware/weights/b11.h" 1
# 12 "firmware/weights/b11.h"
model_default_t b11[120] = {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000};
# 24 "firmware/parameters.h" 2
# 1 "firmware/weights/w14.h" 1
# 12 "firmware/weights/w14.h"
model_default_t w14[10080] = {-0.063552424312, 0.059472143650, 0.105213060975, -0.031369119883, 0.129596218467, -0.036332570016, -0.017292916775, 0.150266841054, -0.131198167801, 0.065371245146, 0.013258203864, 0.050058230758, 0.145473346114, 0.111572697759, 0.150346651673, -0.021492734551, 0.095381662250, -0.020437881351, 0.089372202754, -0.006014719605, 0.061832293868, -0.018749043345, -0.057131409645, -0.140459299088, -0.040598772466, -0.028308019042, 0.138751491904, 0.033077031374, -0.031459853053, 0.003068327904, 0.142407491803, 0.073839291930, 0.042432814837, -0.008429527283, 0.104489162564, -0.142498537898, 0.005475759506, -0.049110218883, -0.066961392760, -0.087745487690, 0.120786920190, 0.038736939430, -0.045303471386, 0.030058577657, 0.148342028260, -0.082061983645, -0.112055256963, -0.074055939913, 0.110647037625, 0.044455885887, -0.079849489033, 0.003466531634, -0.028960973024, 0.105632826686, 0.051606982946, -0.009127110243, -0.113482743502, -0.037875406444, -0.156342789531, -0.018557503819, 0.038058847189, -0.123435094953, -0.066320911050, 0.093522295356, -0.151367306709, -0.151721850038, 0.129129186273, 0.119324818254, -0.081163242459, -0.136335700750, -0.137907713652, 0.006522312760, -0.008286535740, 0.033354565501, -0.018203228712, -0.108425013721, 0.080882698298, 0.101933911443, -0.090694203973, 0.060218706727, -0.075153760612, 0.095257565379, 0.025542557240, -0.063421353698, 0.092996075749, -0.053205005825, 0.010663434863, -0.100674107671, -0.021321892738, 0.127871051431, -0.069765880704, 0.134275540709, -0.042880699039, -0.043616399169, -0.006028056145, 0.154214844108, -0.062776610255, -0.081194192171, 0.108528062701, 0.053666353226, 0.010849282146, 0.022667005658, 0.038207858801, 0.090337172151, 0.033543542027, -0.147538855672, -0.119414903224, -0.054752178490, 0.097608223557, -0.101290576160, -0.017906665802, 0.119327113032, -0.063261628151, -0.090687386692, -0.130680471659, -0.038027137518, -0.007601663470, -0.007111251354, -0.022965684533, 0.145660236478, 0.097963199019, 0.041106700897, -0.073066122830, -0.067209623754, -0.024151667953, -0.077160656452, -0.147308260202, -0.145574748516, 0.136864170432, -0.147911295295, -0.076867446303, 0.152732029557, 0.021747455001, 0.074813619256, 0.141355052590, 0.097900167108, -0.100377358496, -0.112478375435, 0.030081227422, -0.125637367368, -0.139878347516, -0.039920486510, 0.121703729033, 0.015078842640, 0.048498913646, 0.068092465401, -0.125627726316, -0.062414452434, 0.059925228357, -0.007457092404, -0.059322409332, -0.026176810265, 0.071878731251, 0.052379131317, -0.091394394636, -0.118076913059, 0.065202474594, 0.138356670737, 0.082543075085, -0.037848338485, 0.044901087880, 0.014068856835, 0.025349691510, -0.082673206925, 0.135590687394, 0.001282468438, -0.106867402792, 0.147320762277, -0.088071383536, -0.031847730279, -0.053883336484, 0.155246928334, -0.110684394836, 0.011316955090, -0.005583763123, 0.039116621017, 0.109574601054, 0.145352795720, -0.075835742056, 0.004353210330, -0.072692170739, -0.025789424777, -0.138427749276, -0.064706750214, 0.002075985074, 0.146983519197, -0.119223102927, 0.120719179511, -0.050181686878, -0.133863896132, -0.053057350218, 0.037129566073, 0.051961526275, -0.083545856178, 0.134657248855, 0.028109997511, -0.062609612942, 0.130006834865, 0.048518896103, 0.104991927743, 0.051424860954, 0.081081554294, 0.096905276179, 0.060782089829, -0.054230108857, -0.055394619703, -0.087400972843, -0.132457077503, 0.146501883864, -0.049214370549, 0.149939939380, -0.133714199066, 0.153610125184, -0.031889155507, -0.127654924989, -0.075750321150, 0.130050852895, -0.080679282546, 0.107762143016, 0.036707058549, -0.125454992056, 0.044007360935, -0.140224829316, -0.149297460914, -0.070068553090, 0.069467917085, 0.005510106683, -0.038955092430, 0.069376125932, -0.010437816381, 0.095424905419, -0.031541585922, 0.053822308779, 0.044229432940, -0.009504318237, 0.027011424303, -0.043978407979, 0.155603125691, -0.096002668142, 0.131803706288, 0.014005705714, 0.072971284389, -0.032227531075, -0.047264069319, -0.023366242647, -0.002071768045, 0.113289013505, -0.136772960424, -0.090139828622, -0.012551575899, -0.106872037053, 0.137192174792, 0.075702637434, 0.112637206912, -0.089568562806, 0.148195430636, -0.062516883016, -0.063295178115, 0.133068934083, -0.076008588076, -0.064465641975, -0.044456638396, 0.047689974308, -0.142754390836, -0.120252951980, -0.059900835156, 0.038533493876, -0.122142903507, 0.126033350825, -0.133752197027, -0.153688564897, 0.154106214643, 0.105622455478, -0.076352611184, -0.107752412558, -0.092994794250, -0.132734298706, 0.116542324424, -0.045006491244, -0.078266017139, -0.086730301380, 0.086933821440, 0.129881396890, 0.009373471141, 0.151198044419, -0.087359130383, 0.132385775447, 0.017155125737, -0.075284048915, -0.001611143351, -0.140121906996, 0.090146541595, -0.068459101021, 0.003592699766, 0.125458016992, -0.100026130676, 0.042523711920, -0.139877513051, 0.007038578391, 0.084209144115, 0.072007477283, 0.105645284057, 0.016754373908, -0.058088243008, -0.141611784697, -0.142063394189, -0.014673218131, 0.094360604882, 0.115442290902, -0.048930890858, -0.156633585691, -0.021238014102, -0.153105229139, -0.076986834407, 0.066864430904, -0.114825367928, -0.131943330169, -0.061753317714, -0.157716363668, 0.153304949403, -0.052896380424, -0.105603411794, 0.076353862882, -0.040279440582, 0.129091069102, 0.121879920363, 0.025116190314, -0.008903577924, 0.071257293224, -0.023319810629, 0.115049436688, 0.064519882202, -0.106335453689, 0.037734761834, 0.008258879185, 0.152064815164, 0.031041070819, -0.072957746685, 0.047564849257, 0.019667208195, 0.119297698140, -0.021290868521, -0.057042665780, -0.106323197484, 0.141369685531, 0.083832278848, -0.012358382344, 0.010138913989, -0.112509027123, 0.098311707377, 0.097832277417, 0.073041811585, 0.147784635425, 0.151388749480, -0.084008783102, -0.055056169629, 0.128957226872, -0.000344783068, 0.040530204773, 0.139050260186, -0.117254056036, -0.083281673491, -0.004296168685, -0.116827622056, 0.069509267807, 0.020904541016, -0.141263380647, -0.147852197289, -0.084314353764, 0.116948798299, -0.029548868537, -0.015415057540, 0.077125743032, -0.115205056965, 0.026296615601, 0.043236598372, 0.113958522677, 0.102975592017, 0.041908413172, -0.049171701074, -0.027290314436, 0.055128321052, 0.031628847122, -0.139097601175, -0.081705778837, -0.081966191530, -0.031300887465, 0.119997188449, 0.082313686609, -0.032433167100, 0.065811321139, -0.102177217603, 0.019416823983, 0.048403009772, -0.087138861418, 0.072397977114, 0.153782382607, -0.148538097739, -0.130269616842, 0.032893940806, -0.022556364536, 0.104245111346, -0.017456516623, -0.118184313178, 0.126350685954, 0.016654580832, 0.095429822803, 0.151676282287, 0.009890481830, -0.116106286645, 0.025041893125, -0.031650975347, 0.038990497589, 0.143697902560, -0.033564761281, 0.098159298301, 0.128938630223, -0.114615209401, -0.156306639314, 0.058713898063, 0.117173239589, -0.139256715775, 0.066170006990, -0.053695112467, 0.026016250253, -0.038402982056, 0.126570478082, 0.044774010777, 0.043854907155, 0.080106243491, -0.141234725714, 0.040381744504, 0.005487143993, -0.063661254942, 0.150518253446, 0.027885437012, 0.031480818987, -0.031504407525, -0.015953004360, 0.041921153665, 0.108616366982, -0.030830234289, 0.106216982007, -0.024254322052, -0.013694033027, 0.107647582889, 0.128986462951, 0.036246016622, -0.092344857752, 0.039998412132, -0.013272568583, 0.054363220930, 0.027171909809, 0.120513275266, 0.138269916177, 0.136323079467, 0.065902620554, -0.049553722143, -0.064454555511, -0.055246770382, 0.155584022403, 0.098348483443, 0.109461918473, -0.061769306660, -0.073707997799, 0.068553805351, 0.020461514592, 0.054167002439, 0.004002466798, 0.136236384511, 0.042967706919, -0.152765989304, 0.117560371757, -0.074230708182, -0.051215007901, 0.072800546885, 0.110064283013, -0.048261426389, -0.122673451900, 0.064212396741, 0.106756642461, -0.077554441988, 0.033778309822, 0.125400438905, -0.109337247908, 0.002904996276, 0.021235525608, -0.120638102293, 0.056198179722, 0.071296274662, 0.083478838205, -0.023579314351, 0.086019024253, 0.089847832918, 0.046329364181, 0.020250305533, 0.084807619452, 0.110819742084, 0.089828372002, 0.118960127234, 0.083592459559, 0.102406427264, -0.127938181162, -0.082667924464, -0.148187205195, 0.006097793579, 0.018148228526, -0.078106708825, 0.138717904687, 0.136766687036, 0.000686988235, -0.079703144729, 0.156765952706, 0.148917600513, 0.115953281522, 0.127687975764, 0.157147094607, 0.147144272923, -0.004477009177, 0.033666431904, -0.021947696805, 0.130605682731, -0.002411574125, 0.062892377377, 0.024969175458, -0.092073589563, -0.013709753752, -0.026831269264, 0.005451932549, -0.100993670523, 0.088283613324, 0.059842780232, 0.103383198380, 0.034301370382, -0.086615547538, 0.128995165229, 0.152350768447, -0.000855877995, -0.128072768450, 0.135351702571, -0.007797539234, -0.141897901893, -0.140284121037, -0.109625071287, 0.015246182680, 0.129745021462, 0.078355774283, -0.154577046633, -0.041669413447, 0.137962266803, -0.082287639380, -0.058162920177, 0.057767242193, 0.064359188080, 0.121987715364, 0.069008693099, 0.139134690166, -0.015564456582, -0.149228975177, 0.043653607368, -0.152155190706, 0.154317513108, -0.114257007837, -0.012347668409, 0.002217203379, 0.115172550082, 0.069122344255, -0.000894740224, -0.117598421872, 0.091661483049, 0.144298836589, 0.147960469127, -0.154741629958, 0.071208328009, 0.059122875333, 0.062365338206, -0.032110318542, 0.105682417750, -0.132854849100, 0.128860399127, 0.011196061969, 0.088663980365, 0.069069191813, -0.103055223823, -0.015625908971, -0.022939443588, -0.130496248603, 0.086210608482, 0.110848113894, -0.002869516611, 0.127795264125, 0.003539815545, 0.113442078233, 0.030899748206, -0.131339341402, 0.016655117273, -0.120418779552, 0.100071445107, 0.142446324229, -0.071217149496, -0.134852126241, -0.106837995350, -0.012859672308, -0.110640063882, -0.088916063309, -0.139864280820, -0.062615416944, 0.143732264638, 0.127069756389, 0.011130988598, 0.092639371753, -0.052157737315, 0.147595629096, -0.035581640899, -0.027009129524, -0.124335229397, 0.134186401963, 0.155434623361, -0.143499091268, 0.081781357527, 0.029106378555, -0.098699748516, 0.087812513113, -0.008935913444, 0.146331623197, 0.048593267798, 0.144457951188, -0.085103206336, 0.043332472444, 0.104511931539, -0.150595992804, 0.051897287369, 0.103408291936, -0.125106811523, -0.127060785890, -0.077897563577, 0.087490051985, 0.097702607512, -0.008138135076, -0.086996592581, 0.007864892483, 0.090732738376, 0.079076126218, 0.034378260374, 0.015508845448, -0.111667916179, 0.012618184090, 0.070844173431, -0.021003380418, -0.102019041777, 0.064123764634, 0.137935414910, 0.090840429068, 0.011610761285, 0.053400427103, -0.133683621883, -0.001331657171, 0.072357982397, -0.024259030819, 0.049420997500, 0.093085959554, 0.037033066154, -0.146088629961, -0.045392170548, 0.077801167965, -0.046803139150, 0.066720202565, 0.065392360091, 0.123042657971, 0.080968648195, 0.057990565896, 0.004227146506, 0.020388767123, -0.009163826704, 0.101421609521, 0.000219359994, 0.020609527826, 0.088223338127, -0.120831683278, 0.123905554414, -0.092713877559, 0.031867846847, -0.023447901011, -0.136834174395, 0.088522121310, -0.053448498249, 0.082437261939, 0.123246893287, -0.045337848365, -0.101275570691, 0.155037656426, -0.041417635977, -0.023064255714, -0.070741482079, -0.157386556268, -0.043296128511, -0.046522147954, -0.134017139673, 0.074794322252, 0.094997838140, 0.078962847590, 0.113826498389, 0.124061480165, -0.117338158190, 0.129796102643, 0.104344084859, -0.103162959218, -0.156092584133, 0.075985252857, 0.019903600216, 0.121272161603, 0.020405918360, 0.114177837968, -0.057066529989, 0.026557847857, 0.123079821467, -0.077550143003, 0.102454200387, 0.051270380616, -0.031023129821, 0.046380788088, 0.011429026723, -0.101671546698, -0.072464928031, -0.011165633798, 0.086736857891, 0.076146975160, -0.052106283605, 0.110744521022, -0.112653553486, -0.134854286909, 0.104638502002, -0.042396441102, -0.038227841258, 0.085275679827, 0.042281880975, 0.103826120496, 0.028579220176, -0.107185482979, 0.097223088145, 0.115501984954, 0.089010044932, -0.093978017569, 0.103982046247, -0.069554395974, -0.053172931075, 0.124672248960, -0.152981966734, 0.148797944188, 0.092377379537, -0.127002567053, 0.088833436370, 0.091907128692, -0.112596780062, 0.144433960319, -0.103887088597, 0.011960789561, 0.039879843593, -0.089890994132, 0.095660135150, -0.135871276259, -0.136008411646, -0.006885141134, 0.094647809863, -0.141929984093, -0.106554962695, -0.123472489417, 0.155887171626, -0.046028196812, 0.041344463825, -0.113466307521, 0.131710931659, -0.087996475399, 0.009561166167, 0.089802101254, -0.084489308298, -0.115236610174, -0.001625880599, -0.050285995007, 0.004004582763, 0.150501772761, 0.101057931781, 0.147799238563, 0.152251854539, 0.142533376813, 0.067630067468, -0.100521549582, 0.155691102147, 0.017395645380, -0.038649745286, 0.048205032945, 0.043111190200, 0.129585668445, -0.030602276325, 0.112955704331, -0.070655234158, -0.009444072843, -0.156817167997, -0.152814358473, 0.014982938766, -0.129312470555, -0.059267602861, 0.101944729686, -0.040711753070, 0.145647510886, -0.078783601522, 0.019627287984, 0.003269717097, -0.150154858828, 0.085104107857, -0.071346148849, 0.146834656596, 0.088843464851, -0.128761261702, 0.084351375699, -0.121787190437, 0.085274085402, -0.047848977149, -0.028326421976, 0.038272514939, -0.029696419835, 0.119616493583, -0.060145042837, 0.030739128590, -0.005934000015, -0.111957512796, 0.119787231088, -0.051181718707, -0.078123748302, 0.056684046984, -0.029371425509, 0.118927821517, 0.064684092999, -0.117308869958, -0.043281421065, 0.092792257667, 0.128062650561, -0.037546575069, -0.126448959112, -0.065553545952, 0.040641710162, -0.107058748603, -0.100422181189, 0.157188102603, 0.084562554955, -0.068722113967, -0.009291633964, 0.048265606165, 0.128868922591, -0.080320060253, 0.055287286639, -0.042407073081, 0.036538511515, -0.094940841198, -0.025124117732, -0.025420680642, 0.053678184748, -0.139986157417, -0.070381775498, -0.037161044776, 0.121056124568, 0.147501036525, 0.013027772307, 0.131619200110, -0.077817037702, 0.011298030615, 0.114291206002, -0.010941267014, -0.156350851059, 0.032746344805, 0.065818741918, -0.014133989811, 0.143491253257, 0.135826036334, 0.096511021256, -0.027458593249, 0.141942456365, 0.066252529621, -0.046265393496, 0.022116661072, -0.072281308472, -0.104988530278, -0.043035559356, -0.038785569370, -0.007491916418, 0.107607737184, 0.048779040575, 0.045758143067, 0.119177415967, -0.106084495783, -0.131704300642, 0.150931611657, -0.041539207101, 0.014594957232, 0.092816308141, -0.048609368503, 0.049857079983, -0.058730974793, -0.142577812076, 0.043218627572, 0.093173816800, -0.086641713977, 0.031555041671, 0.039935782552, 0.114873781800, 0.147371008992, 0.022853299975, 0.092824146152, 0.075226932764, -0.101079210639, -0.046496175230, 0.066031768918, -0.014397203922, -0.119315341115, 0.037489801645, -0.031217500567, -0.000104233623, 0.116737261415, 0.105566874146, 0.041404440999, -0.102236062288, -0.117261290550, 0.053034394979, 0.140701457858, 0.042098447680, 0.136991038918, -0.079631105065, -0.104034863412, -0.109546020627, -0.141606613994, 0.009101524949, -0.119328990579, -0.121104307473, 0.054637849331, 0.079606458545, 0.078944370151, -0.016372457147, -0.094812482595, 0.074644654989, -0.127306297421, 0.047645449638, 0.143489107490, -0.131675913930, -0.059569783509, -0.017962604761, -0.120385527611, 0.145098313689, -0.120680399239, 0.066315934062, -0.108121208847, 0.123027220368, 0.019522890449, 0.110304549336, -0.124702475965, 0.134085938334, 0.121007964015, 0.083478763700, 0.125386312604, -0.093964636326, -0.134701639414, -0.040191151202, 0.011221319437, 0.113125070930, 0.156220272183, 0.029987663031, 0.070971176028, 0.137976244092, 0.013385131955, -0.066168315709, 0.009191572666, 0.058475434780, 0.112660840154, -0.096893072128, 0.120959773660, -0.129594042897, -0.020912006497, 0.073006331921, -0.054687231779, 0.009270220995, 0.150131359696, -0.137606665492, -0.048480518162, 0.065093457699, -0.126467347145, -0.153961002827, 0.059741571546, 0.063884764910, -0.133201181889, 0.108668342233, -0.074450895190, 0.157211825252, -0.100165612996, -0.053983420134, -0.076550260186, 0.040058687329, 0.051021352410, 0.075398638844, 0.099183812737, -0.097541049123, -0.008773252368, -0.082766652107, 0.074026092887, 0.094694569707, -0.031815186143, 0.111150339246, 0.130311593413, 0.109596028924, -0.037392847240, -0.130621746182, 0.126741960645, 0.023402094841, -0.127075329423, -0.139668300748, 0.141062751412, 0.008043617010, -0.139114409685, 0.041178107262, 0.058740586042, -0.089557334781, 0.068837389350, 0.129953935742, -0.103703089058, 0.122542902827, 0.103465393186, 0.096354261041, -0.009419083595, -0.117467083037, -0.060627229512, 0.072999477386, -0.068991914392, -0.049395658076, -0.142511203885, -0.125685885549, -0.108531653881, -0.134387627244, 0.063377961516, 0.056451722980, 0.133022353053, 0.044913530350, 0.105931982398, -0.069816693664, -0.066095143557, 0.115631863475, -0.080483555794, 0.043817743659, -0.017943084240, 0.046352237463, -0.082712106407, 0.096633836627, 0.035298153758, 0.079375445843, -0.071297332644, -0.108451664448, 0.012694448233, -0.152847230434, -0.147575527430, 0.135751023889, 0.111880823970, 0.008057415485, 0.001205518842, 0.016194909811, -0.029680058360, -0.133397430182, 0.108208075166, -0.009197905660, -0.057648956776, -0.049606919289, -0.056817464530, -0.101643458009, -0.047429442406, 0.074752628803, -0.122245781124, 0.156052216887, 0.067366674542, -0.064356692135, 0.149419143796, -0.139362648129, 0.091701060534, -0.023552551866, -0.005581304431, 0.086243659258, 0.109927788377, -0.122260823846, -0.147793352604, 0.078741639853, -0.068284302950, 0.054622277617, -0.089873351157, 0.030091553926, 0.084858968854, -0.101034872234, -0.011816859245, -0.080695264041, -0.026388823986, -0.007835790515, -0.045039251447, -0.152305111289, 0.124367341399, 0.139751031995, 0.123884662986, 0.123217090964, -0.058685779572, -0.073373399675, -0.044262871146, 0.120710983872, 0.109774544835, -0.020396038890, 0.148674026132, -0.083337992430, 0.142095729709, -0.038478411734, 0.140639558434, -0.138353034854, 0.132034167647, 0.012078285217, 0.101323589683, -0.096383213997, -0.157441779971, -0.150850176811, -0.106013931334, -0.140432536602, -0.053701296449, -0.050979547203, 0.041585877538, -0.129121467471, 0.052417054772, -0.136185139418, -0.130492508411, -0.076184332371, -0.112535260618, 0.092836126685, 0.051681175828, -0.139213815331, 0.128125563264, -0.128868103027, 0.086423635483, 0.049516707659, 0.031395614147, 0.136537000537, 0.048997581005, 0.146423235536, -0.069745674729, 0.087735339999, 0.110427990556, 0.045759037137, -0.150489345193, 0.027245566249, -0.092526182532, -0.065809696913, -0.139195233583, 0.153675869107, -0.154229968786, 0.142076715827, 0.051607742906, 0.130045875907, 0.086275562644, 0.133837178349, 0.018710404634, 0.098886057734, -0.047813504934, 0.024196490645, 0.031586855650, 0.117246732116, 0.068369790912, 0.085014387965, 0.017913222313, 0.082987904549, 0.131042525172, -0.130094841123, 0.010461226106, 0.134097084403, 0.063395485282, -0.025817215443, 0.092133834958, -0.106173880398, 0.059370622039, -0.088705301285, 0.088818043470, 0.038623318076, 0.106334611773, -0.005819976330, 0.058030709624, -0.072178542614, -0.053389690816, -0.022516176105, 0.017602860928, 0.090768620372, 0.026775181293, -0.132067024708, -0.038509622216, -0.029308736324, -0.115588247776, 0.154542848468, 0.096619740129, -0.040737234056, 0.066441431642, -0.132909744978, -0.115723922849, -0.150056719780, 0.103712216020, -0.024990886450, -0.005190759897, 0.094861969352, -0.151311218739, 0.096450850368, -0.061779335141, -0.149978280067, 0.079433083534, 0.012011632323, -0.035903461277, 0.092141404748, -0.013307556510, -0.061937659979, 0.055496320128, -0.101974368095, -0.020042672753, -0.041030406952, -0.002880781889, 0.139870241284, 0.148475214839, 0.064166098833, 0.149270221591, 0.042520925403, 0.153489753604, -0.084871858358, 0.081925660372, -0.079073190689, 0.139778420329, 0.081502437592, -0.054326839745, -0.062833458185, -0.068294331431, 0.117048636079, -0.100498139858, 0.119339987636, 0.140017375350, 0.055707544088, 0.049909397960, 0.147725716233, 0.156491085887, -0.041446052492, 0.034345507622, -0.051808096468, 0.119532302022, -0.103648573160, 0.120187595487, -0.117734320462, -0.134103342891, 0.011727780104, -0.094817273319, -0.149922341108, 0.024643465877, -0.116541691124, -0.008072003722, 0.082067146897, -0.099459499121, -0.039555199444, -0.139656499028, -0.032899633050, 0.115425065160, -0.045377358794, 0.002651661634, 0.017326280475, 0.020525604486, -0.079634726048, 0.122554376721, -0.097485259175, 0.094592645764, -0.099812462926, 0.084208577871, -0.020531415939, 0.028748899698, 0.054271578789, 0.148535802960, 0.089564308524, 0.133070632815, 0.063343018293, 0.158067390323, -0.113816142082, -0.026225134730, -0.087250597775, -0.066181316972, 0.089930802584, 0.007141977549, 0.112505659461, 0.082740947604, -0.005244255066, -0.124385744333, 0.065180048347, -0.065216869116, -0.126180395484, -0.090289868414, 0.083519056439, -0.118419915438, -0.139432236552, 0.017234414816, 0.024049699306, -0.073058813810, -0.055943869054, -0.152493894100, -0.089062817395, -0.042474322021, -0.093640021980, -0.014126524329, 0.046101406217, -0.012996926904, -0.155562192202, 0.020413503051, -0.052026852965, 0.110186532140, -0.032873243093, 0.158041581511, 0.121157094836, -0.088050454855, 0.020414143801, -0.122657477856, -0.051694855094, 0.156151697040, -0.156313687563, -0.102232709527, -0.154791355133, -0.096132002771, -0.099305137992, -0.014770060778, 0.081765875220, 0.098206326365, -0.080234758556, 0.132565453649, -0.114555120468, -0.046442866325, -0.099393084645, -0.028450518847, 0.141495153308, -0.055456325412, 0.047114819288, 0.046443089843, -0.112292870879, 0.035709992051, -0.110164105892, 0.038494542241, 0.012669533491, -0.053676903248, 0.096520707011, 0.027955740690, -0.060960210860, 0.131580010056, 0.102607294917, 0.092140421271, 0.097501948476, 0.080204024911, 0.082533761859, -0.138509139419, -0.044502779841, 0.097793743014, -0.061347737908, -0.073006302118, -0.040567256510, 0.001594930887, 0.002177134156, -0.066226556897, 0.049324676394, 0.125248268247, 0.125711932778, -0.074986726046, -0.137152716517, 0.141721680760, -0.059033609927, 0.096635296941, 0.067090123892, 0.028402611613, -0.085705913603, 0.087019622326, -0.046570546925, -0.075840719044, 0.127528503537, 0.156151488423, 0.036872476339, -0.001468077302, 0.015169501305, -0.082852870226, 0.079002812505, -0.111448183656, -0.028792619705, 0.054552987218, -0.079671218991, 0.090038910508, -0.146784558892, 0.000152066350, 0.019747272134, -0.147916272283, 0.147571191192, -0.082062207162, 0.084686502814, -0.146315723658, -0.066121228039, -0.145013362169, -0.085625052452, -0.101862140000, -0.093185395002, 0.104144707322, 0.073809444904, -0.005443185568, 0.092695578933, -0.146508172154, -0.000518262386, 0.030103474855, 0.046645447612, 0.070171043277, -0.029393777251, -0.097980000079, 0.075636252761, -0.065981030464, 0.057592451572, 0.081375509501, -0.137797802687, 0.140697106719, -0.111353412271, 0.076037645340, 0.026901081204, -0.049030601978, -0.055815316737, -0.114446550608, 0.098007187247, -0.062937542796, -0.136326402426, -0.005216479301, -0.093845888972, -0.134508594871, 0.048454627395, 0.007308483124, 0.025119096041, -0.128130108118, -0.028650611639, 0.048504158854, -0.096278645098, 0.099505946040, 0.090597137809, -0.095098003745, 0.061228349805, -0.043966457248, 0.128041282296, 0.137781664729, 0.086270764470, 0.058136373758, -0.000112757087, -0.154815524817, 0.066191568971, 0.004724413157, 0.151908114552, -0.052823923528, 0.122103735805, -0.145744800568, -0.104394078255, -0.007897734642, 0.136355146766, -0.128024056554, -0.023892655969, -0.029231950641, 0.139922127128, 0.093398585916, -0.117213606834, 0.001116707921, 0.044933125377, -0.012185692787, -0.063204213977, -0.100374117494, 0.137521550059, 0.139437749982, -0.113573029637, -0.150142267346, -0.106449447572, 0.095967754722, 0.062119245529, -0.105747416615, 0.112685039639, 0.065750822425, -0.080386713147, 0.096539095044, 0.004892840981, -0.152679145336, -0.099955677986, 0.084171175957, -0.054788373411, 0.137063637376, -0.046637460589, 0.057110443711, -0.088053211570, 0.062224760652, 0.032303109765, 0.097232922912, -0.054735027254, -0.099523663521, -0.107955873013, -0.087039038539, 0.125329419971, -0.086717516184, 0.091128900647, -0.142405793071, -0.041204489768, 0.053782910109, -0.048802040517, 0.098771288991, 0.033288478851, -0.030804038048, 0.055679753423, 0.121929392219, -0.061298616230, 0.021691620350, -0.042056903243, 0.060306951404, -0.009805887938, 0.070774778724, -0.045973427594, 0.028979644179, -0.001811996102, -0.045328766108, -0.083592228591, 0.145936861634, -0.114461064339, 0.082483738661, -0.096754685044, 0.004849344492, -0.022267937660, 0.150298520923, 0.025681123137, 0.024884775281, -0.099349051714, -0.021285697818, -0.058318190277, 0.118929162621, -0.035171344876, 0.129468455911, -0.089778728783, 0.023039266467, -0.016331866384, -0.088712878525, -0.023958399892, -0.092757113278, 0.121816858649, -0.141647517681, -0.134989798069, 0.007619827986, -0.069127134979, 0.001631796360, 0.110532179475, 0.098520979285, -0.123313441873, 0.149196103215, 0.115673944354, 0.148902848363, -0.066912762821, 0.006924539804, 0.142036512494, -0.135197699070, -0.106294929981, 0.066194176674, -0.078739754856, -0.011799067259, 0.045069098473, 0.139197245240, -0.068453863263, -0.060286179185, -0.061522044241, 0.124727323651, 0.070923373103, 0.048888519406, -0.017052635550, 0.030783191323, 0.132225170732, -0.083304785192, 0.075937747955, -0.004522055387, 0.036079213023, -0.029199302197, -0.084369547665, 0.006367191672, -0.057504154742, -0.077792271972, -0.118136018515, -0.035767674446, -0.041767537594, 0.078429996967, 0.092469289899, 0.120924070477, -0.031307816505, -0.118005320430, -0.078970238566, 0.069274261594, -0.133331462741, 0.065273612738, 0.037765443325, 0.010569602251, 0.066243216395, -0.020655885339, -0.075697094202, 0.101535305381, -0.098061382771, -0.011044964194, 0.137628272176, -0.011385113001, 0.074853539467, -0.117127954960, -0.019993171096, -0.100636377931, 0.045429974794, -0.010891765356, -0.094152405858, 0.072899848223, 0.146329566836, 0.026329964399, 0.000559389591, 0.075267150998, 0.116059377789, -0.051963262260, -0.078402288258, -0.048090010881, -0.123383253813, -0.109585791826, -0.109687194228, -0.107903391123, -0.091960191727, 0.093591794372, 0.122292980552, 0.129796400666, 0.102903500199, -0.024507269263, -0.128670945764, -0.097231671214, -0.156107932329, 0.031423926353, 0.088598877192, -0.029515475035, -0.145348370075, -0.048166617751, -0.001840978861, -0.107045024633, -0.072784826159, 0.003428786993, -0.072269164026, 0.069620102644, -0.099835611880, 0.035962954164, -0.073366425931, 0.137202098966, -0.015952512622, 0.137592658401, 0.002486512065, -0.092840045691, 0.103912934661, -0.109205350280, 0.130632564425, 0.125039026141, 0.087770372629, -0.126589834690, 0.069330289960, -0.093333132565, 0.133672013879, -0.065324343741, 0.102269545197, -0.129918873310, -0.120602026582, -0.124271929264, -0.074083611369, 0.101195320487, 0.109179571271, 0.132311359048, -0.075584717095, 0.119330540299, -0.153654336929, -0.070566982031, 0.138939395547, -0.100182428956, -0.029534995556, 0.130112633109, 0.054658234119, 0.065867260098, -0.044931359589, 0.016134932637, -0.039897866547, -0.107618182898, 0.115642085671, -0.078022830188, 0.118907496333, 0.132223352790, 0.042102858424, 0.067353442311, -0.157419919968, -0.038927309215, 0.112051084638, 0.022118464112, 0.142865076661, 0.015616744757, -0.139448449016, 0.031375035644, -0.052708193660, -0.149188369513, 0.142689839005, -0.082568742335, -0.084880530834, -0.063524112105, 0.009819731116, 0.020867750049, -0.070008382201, -0.067718125880, 0.075280800462, 0.111342743039, -0.012311786413, -0.064080260694, 0.078606680036, -0.055256001651, -0.154513522983, 0.000412598252, 0.035260766745, -0.011578038335, 0.105410650373, -0.019240587950, -0.113501891494, 0.072340384126, 0.118563398719, 0.080722600222, -0.050984710455, -0.060982942581, 0.097439691424, -0.094126842916, 0.133965477347, 0.046856522560, -0.045095570385, 0.001945629716, 0.130204543471, -0.143320143223, -0.102816253901, -0.098391309381, 0.146925821900, -0.039648383856, 0.126220002770, 0.043413370848, -0.144188925624, 0.024935543537, -0.106171131134, -0.151142790914, 0.001217842102, 0.123986974359, -0.031656265259, -0.141250982881, -0.056252911687, -0.094583287835, 0.103964224458, -0.097251042724, 0.089534416795, -0.090911306441, 0.050499022007, -0.116769984365, 0.029904693365, -0.038156136870, -0.096118167043, -0.105500042439, 0.134326204658, -0.113904580474, -0.054879598320, -0.121838875115, -0.028044402599, 0.107890948653, -0.070741482079, 0.126885011792, 0.099176242948, -0.127610519528, -0.064306974411, 0.115516439080, 0.125127449632, -0.047599010170, 0.039303347468, 0.087302014232, 0.095719024539, -0.102624267340, -0.127332761884, 0.040628060699, -0.053397715092, -0.150265753269, -0.123382583261, -0.050635784864, -0.090179942548, -0.005569666624, -0.085896663368, -0.001895830035, -0.000128656626, -0.089852839708, 0.154712602496, 0.086765661836, -0.032332733274, 0.049714162946, -0.087436184287, 0.072792664170, -0.044038385153, -0.149356126785, -0.055682703853, 0.030897602439, 0.032659873366, -0.092440910637, 0.034570708871, 0.133758291602, 0.144849404693, -0.024496749043, -0.108642935753, 0.106675103307, 0.036192744970, 0.147748634219, 0.117308154702, -0.065439812839, 0.087399274111, 0.075203180313, -0.001445695758, 0.142360493541, 0.105763778090, 0.010891914368, -0.000897079706, 0.146029248834, -0.139514118433, 0.154508963227, 0.073514461517, 0.023723244667, -0.099045395851, -0.037083387375, -0.052648819983, 0.129116252065, 0.012253358960, -0.113483913243, -0.117364168167, 0.156746521592, -0.018974319100, -0.157532736659, 0.115079388022, -0.036257706583, -0.087395884097, -0.014047250152, 0.017627179623, 0.001791745424, -0.051556244493, 0.048756837845, -0.155718445778, 0.052759885788, -0.050543464720, -0.063444085419, -0.040474481881, 0.136229887605, -0.117651499808, 0.108181938529, 0.058713719249, -0.129106342793, 0.041493773460, -0.155761942267, -0.152100369334, -0.017806947231, -0.050738699734, -0.007731750607, 0.124666973948, -0.003862470388, 0.064464926720, 0.111778363585, -0.109098657966, 0.132224246860, 0.008085280657, 0.140796080232, 0.154867842793, 0.132294043899, 0.011801317334, 0.043407931924, -0.002863675356, 0.146801128983, 0.011007383466, -0.066163338721, -0.000939145684, 0.100199565291, 0.139586582780, 0.092223629355, -0.026677727699, 0.093138977885, 0.025586917996, 0.067882940173, 0.074654385448, 0.018851578236, 0.035670906305, 0.064415693283, 0.010731846094, 0.000478565693, 0.025007694960, -0.080647990108, 0.129077360034, -0.154011324048, -0.148422479630, 0.002031475306, 0.117886349559, -0.036282621324, 0.128363475204, -0.057634554803, 0.033834591508, 0.065511658788, -0.028254911304, -0.028102084994, 0.085857272148, 0.065752625465, -0.086707152426, -0.116616666317, -0.001690804958, -0.025905162096, -0.057929009199, 0.117626175284, -0.136388033628, -0.115269936621, -0.006417244673, -0.091950729489, -0.128828331828, 0.003301456571, -0.020410552621, 0.131746903062, -0.093608662486, 0.087288677692, 0.093621596694, -0.045632869005, 0.119300439954, -0.085669800639, 0.005560949445, 0.142465665936, 0.130405500531, 0.066297620535, 0.154342576861, -0.008020699024, -0.127620354295, -0.096434071660, -0.119488373399, -0.003994554281, -0.066482596099, 0.003638505936, -0.143842890859, -0.050226129591, 0.055499419570, 0.047162398696, -0.054017685354, -0.076442822814, -0.083189092577, -0.111316353083, -0.124891862273, -0.151568233967, 0.081858456135, 0.111662730575, -0.004272192717, -0.022335261106, 0.065981522202, -0.101980775595, 0.064586088061, -0.063268601894, 0.085806369781, 0.040018007159, -0.056126244366, -0.116402663291, 0.130162671208, 0.014011859894, 0.050858169794, -0.054402314126, -0.079139500856, -0.154253795743, 0.038160890341, 0.115290865302, 0.030905663967, 0.106507584453, -0.109867990017, 0.041843533516, -0.079691499472, 0.135954901576, 0.141341671348, -0.045792780817, -0.147389158607, -0.075102761388, -0.007013395429, 0.112908795476, 0.137989118695, 0.063265129924, -0.005514129996, 0.107135489583, -0.128960683942, -0.097682379186, 0.051770925522, -0.077747792006, 0.129475101829, -0.068793252110, 0.068285688758, 0.087786883116, 0.010619670153, -0.026149630547, -0.065560631454, 0.069529026747, -0.094140835106, 0.034330964088, 0.120158508420, 0.040971562266, 0.148115143180, -0.154061645269, 0.125674262643, -0.091586045921, 0.149284318089, -0.144898951054, -0.152023777366, 0.095872983336, -0.156465336680, 0.023210451007, 0.127251520753, 0.120832994580, 0.079913392663, -0.124389700592, -0.109399899840, -0.069240190089, 0.038887575269, -0.002228513360, 0.007229089737, 0.063641309738, -0.050362408161, -0.076057784259, 0.028879329562, 0.080707132816, 0.114117667079, 0.055760249496, 0.132668659091, 0.046750783920, -0.139226973057, -0.109264642000, 0.053693979979, 0.028646349907, -0.088520430028, -0.011743754148, -0.002135708928, -0.074231646955, 0.006143227220, 0.111217841506, 0.032593190670, 0.144855484366, -0.149696975946, -0.146532714367, 0.077234238386, -0.121007427573, -0.065227769315, -0.103059589863, 0.071474358439, -0.096557796001, 0.062240928411, 0.141474410892, 0.043771192431, 0.031810700893, 0.019699588418, -0.083157800138, 0.077705726027, -0.142706617713, -0.090565092862, 0.043286100030, 0.038488253951, 0.066232323647, 0.013400137424, 0.014185562730, -0.041641704738, 0.084515243769, 0.156992927194, 0.150450989604, -0.022164344788, -0.064075134695, -0.135907009244, -0.087204039097, -0.128413200378, 0.065898105502, 0.088856011629, 0.116984531283, -0.141376435757, -0.096471771598, -0.043484047055, -0.019311711192, 0.044827535748, 0.059852018952, -0.022779449821, -0.081638827920, 0.130854979157, 0.024746462703, -0.095579057932, -0.056479014456, -0.066710554063, 0.059760496020, -0.107825852931, -0.075972326100, -0.045998081565, -0.040233105421, -0.118598788977, -0.023816198111, -0.072903461754, -0.058173887432, 0.087391808629, 0.157718881965, -0.067042022943, 0.113435611129, 0.010989740491, 0.062669739127, -0.084673456848, 0.146113440394, 0.126631453633, -0.075045272708, 0.138847485185, 0.066766574979, -0.081203952432, 0.105474248528, -0.013212069869, 0.115065172315, -0.087060943246, -0.058242909610, 0.033268198371, 0.128986403346, 0.085498273373, -0.050949841738, -0.139133408666, 0.084819346666, 0.001367166638, -0.139988645911, 0.127003446221, 0.113100335002, -0.086222551763, 0.037136122584, -0.065073356032, 0.029660001397, -0.105593264103, -0.058259986341, -0.025525286794, -0.067643374205, -0.145759314299, -0.128927931190, 0.045156672597, 0.007083550096, 0.010616645217, -0.071229211986, -0.076186068356, -0.042646676302, -0.061492905021, -0.064894750714, -0.068870678544, -0.075831450522, -0.061261221766, -0.129889726639, -0.021637380123, -0.155669972301, 0.108239188790, 0.081475406885, 0.120289072394, -0.064024582505, 0.061639323831, -0.152863740921, -0.024103865027, 0.077438294888, 0.006605476141, 0.029651597142, -0.120361819863, -0.137586683035, 0.105297848582, -0.008358612657, 0.092596307397, -0.109532594681, -0.079331152141, 0.133355334401, -0.082103937864, -0.045128516853, -0.089139536023, -0.000826328993, 0.022550061345, -0.126832932234, -0.061696283519, -0.106016725302, 0.085352838039, -0.098443180323, 0.087238386273, -0.123129330575, -0.105726979673, -0.047287777066, -0.099752604961, -0.098079562187, 0.054112151265, 0.003542721272, -0.078432187438, 0.017687410116, -0.063654996455, -0.147070765495, -0.050730444491, -0.136857137084, 0.125394597650, -0.087359167635, -0.082921929657, -0.120549097657, 0.024363160133, -0.108326956630, -0.145547196269, 0.050498083234, 0.062780156732, -0.122158095241, -0.058228738606, -0.107843078673, -0.029253810644, -0.030318945646, -0.107516132295, -0.007401302457, -0.006804168224, 0.101340457797, -0.150533333421, -0.005047366023, 0.033255234361, 0.116020664573, -0.064168810844, 0.140826031566, 0.138578042388, -0.042575843632, -0.050609968603, 0.008250162005, -0.092480830848, 0.035415172577, 0.071251347661, -0.089363493025, -0.134758785367, -0.017335250974, -0.096848100424, 0.066550105810, 0.109192028642, 0.090614855289, 0.065999507904, 0.099283233285, -0.010550975800, -0.018164962530, -0.123621359468, -0.096701264381, 0.117941960692, -0.077711224556, -0.017358884215, 0.126385882497, 0.008546769619, -0.060444884002, 0.148067101836, -0.155196115375, 0.092354431748, 0.093182310462, -0.115329459310, -0.048642843962, 0.109690025449, 0.000341311097, -0.072319604456, -0.102512612939, -0.133563637733, 0.041487902403, -0.056730799377, -0.044766731560, -0.040906041861, -0.091662198305, 0.146944150329, 0.006003707647, 0.112019702792, 0.143137589097, 0.000557094812, 0.083584874868, -0.112533830106, 0.019998788834, -0.000161573291, -0.073408529162, 0.045723900199, 0.138401433825, 0.118519708514, -0.138237386942, 0.038618162274, 0.127518340945, -0.130128353834, -0.076942577958, -0.009046748281, -0.099653795362, 0.092375084758, 0.028344556689, 0.151413217187, 0.033559903502, -0.134220212698, -0.085198998451, -0.097040578723, -0.051962770522, -0.156665936112, 0.040384948254, 0.064356088638, 0.097750976682, -0.062526419759, -0.038297727704, -0.131027549505, -0.029610350728, 0.125604942441, -0.053256914020, -0.032754495740, 0.000960946083, -0.017208427191, 0.079120457172, 0.038315713406, -0.126044914126, 0.140255734324, -0.138133376837, -0.142227947712, 0.080331072211, 0.079582259059, -0.103471778333, 0.005808129907, 0.020088240504, 0.053705096245, -0.089101269841, -0.044155359268, -0.091316208243, -0.139081686735, -0.023603707552, -0.124609217048, -0.104348465800, -0.115071572363, -0.047534093261, 0.153574004769, -0.052081555128, 0.065423458815, -0.085483953357, -0.152218133211, 0.075264066458, 0.118658289313, -0.103449121118, -0.075536653399, -0.156931847334, -0.005160197616, 0.069592550397, 0.072370871902, 0.056562364101, -0.045784108341, 0.137364700437, 0.068782463670, 0.036382600665, 0.153143718839, 0.079238295555, 0.152819976211, -0.076770260930, 0.151360914111, 0.116426572204, 0.054701551795, -0.120131865144, -0.023505240679, 0.032578557730, 0.034354969859, 0.138899043202, 0.146258726716, 0.064806118608, -0.075843058527, 0.026400506496, -0.109606817365, -0.107996165752, 0.120415434241, -0.111155197024, -0.075068414211, -0.118062399328, -0.082079470158, -0.117669783533, -0.024815559387, -0.145290240645, 0.148668363690, -0.046777278185, 0.153911843896, 0.003552511334, 0.108508422971, -0.031929671764, 0.118982449174, -0.139559239149, -0.117247007787, 0.095185473561, -0.066850744188, -0.092928223312, 0.025073215365, 0.082409396768, 0.138037696481, -0.060665637255, 0.069920733571, 0.085399091244, -0.138854220510, -0.047400869429, -0.031519383192, -0.074180908501, -0.004467919469, -0.049700930715, 0.018465787172, -0.077116660774, -0.157927587628, -0.120911329985, -0.085355967283, 0.025932982564, 0.108385279775, -0.148905411363, 0.011723101139, 0.091104850173, 0.121014282107, 0.145024165511, 0.109922453761, -0.080530226231, 0.060380950570, 0.017634719610, 0.123737528920, 0.148945078254, -0.036066688597, 0.127298638225, 0.037700757384, 0.046929091215, 0.053635731339, -0.010520488024, -0.132373347878, 0.107417181134, -0.052682936192, 0.025690317154, -0.011271119118, -0.077880486846, -0.000546574593, 0.117440268397, 0.064349755645, 0.046040371060, 0.151230022311, 0.054401710629, 0.154339596629, -0.053113892674, -0.119422666728, 0.014726027846, 0.150672391057, 0.058525413275, -0.099644482136, -0.050189599395, 0.134731546044, -0.135544896126, -0.035525172949, 0.009151965380, 0.128444179893, 0.041376993060, -0.095641635358, 0.091480761766, -0.111611299217, -0.138775140047, -0.036225132644, 0.021502718329, 0.065516233444, -0.127825841308, 0.057802349329, -0.128894269466, -0.002801358700, 0.016290321946, 0.155812695622, 0.132443055511, 0.112461134791, -0.024390339851, -0.105581015348, 0.013144552708, -0.033110275865, 0.130817040801, -0.114368587732, -0.048144452274, 0.010541439056, -0.093272022903, 0.097683027387, 0.073487550020, 0.077877357602, 0.137101992965, 0.065063595772, -0.127847969532, 0.030650496483, -0.004159450531, 0.066876754165, -0.149823755026, -0.110127270222, -0.065295398235, -0.143477797508, 0.010293766856, -0.060857973993, 0.018974065781, 0.069589227438, -0.111410483718, -0.015188008547, -0.091595135629, 0.012878596783, 0.003890812397, 0.138454601169, 0.155049040914, -0.056184567511, -0.028634861112, 0.049483790994, -0.026084065437, 0.141004696488, 0.136734887958, 0.157151475549, 0.126524373889, 0.087342426181, 0.098013177514, 0.151171520352, -0.143842071295, 0.090565815568, 0.032819822431, -0.097679741681, -0.129223242402, -0.110395446420, -0.143762186170, 0.123162552714, -0.095962554216, -0.133066028357, -0.110291369259, -0.044214732945, 0.051831394434, 0.097665950656, 0.101793274283, -0.107075788081, -0.084376215935, 0.104223117232, -0.044501498342, -0.124848589301, 0.110565051436, -0.089449629188, -0.066393934190, -0.147528707981, 0.022508189082, 0.132130607963, 0.156786397099, -0.072061531246, -0.062387727201, 0.066674470901, 0.127664849162, -0.007572814822, -0.136397987604, -0.131389901042, 0.094277933240, -0.087831549346, 0.017988651991, -0.067029625177, -0.097413934767, -0.131089985371, 0.027442231774, -0.022241130471, 0.041305482388, -0.101449131966, -0.019776493311, -0.044820040464, -0.157219171524, -0.154248893261, -0.003076210618, -0.115241773427, 0.109766766429, 0.045214086771, -0.125327304006, 0.010435968637, -0.097307935357, -0.043429046869, 0.052610218525, -0.028312429786, -0.055396579206, 0.100327149034, 0.039575546980, -0.008053198457, 0.029443427920, 0.134526088834, 0.015531510115, 0.080576136708, -0.130555763841, -0.136554121971, -0.039544261992, 0.122250184417, 0.142182901502, -0.009514495730, -0.057541139424, -0.060164153576, 0.075760200620, -0.087900124490, 0.000421613455, -0.079046949744, -0.095839694142, 0.125352308154, -0.056597724557, -0.101790554821, -0.016469568014, 0.006099462509, 0.124186500907, 0.125878259540, -0.011323437095, 0.100467339158, 0.155065342784, -0.136262536049, -0.095445908606, 0.030461743474, -0.045182608068, 0.142141506076, -0.025610625744, -0.004736706614, 0.153772071004, 0.130020663142, 0.074078530073, 0.113473460078, -0.108631446958, 0.126168534160, 0.117706194520, -0.118937276304, 0.059625983238, 0.116872206330, -0.148690685630, 0.009978100657, 0.158014133573, 0.106928244233, -0.087079189718, 0.015972912312, -0.018760278821, -0.084112673998, -0.023357197642, -0.143585756421, -0.002608954906, -0.103933423758, 0.124396547675, -0.040517158806, 0.066325470805, -0.088239662349, 0.054968342185, 0.048427596688, 0.015611916780, 0.125037416816, 0.088065683842, -0.111610583961, 0.144109442830, -0.119552083313, -0.136238902807, 0.087886020541, 0.109911516309, 0.045098170638, -0.044496141374, 0.015247121453, 0.089123249054, 0.021483987570, 0.136779263616, 0.100988492370, 0.085783675313, -0.077831059694, -0.146525472403, -0.150044396520, 0.042753323913, -0.082770384848, -0.108055651188, -0.019813612103, -0.141233265400, 0.102858111262, 0.041449904442, 0.060103684664, 0.024536341429, 0.113914236426, -0.033973887563, 0.136382117867, -0.004728853703, -0.002355366945, 0.093127951026, 0.050168186426, 0.136863395572, -0.005883485079, -0.009509444237, 0.105749979615, -0.054359227419, 0.002614304423, 0.134409323335, 0.073721036315, -0.062596537173, 0.127848163247, 0.109828665853, 0.089393392205, 0.044532939792, 0.132005706429, 0.139416411519, -0.120687901974, 0.011435657740, 0.074460208416, 0.132509425282, -0.126961216331, 0.064070463181, -0.136737108231, -0.073690131307, 0.121507540345, -0.009342625737, -0.001632556319, -0.045155622065, 0.024955004454, -0.003090992570, 0.136823281646, -0.075029246509, 0.019979223609, 0.046230748296, -0.135836288333, -0.132538154721, -0.000688612461, -0.111130282283, -0.015675470233, -0.150639191270, 0.040543362498, -0.124894089997, 0.066225081682, -0.050007075071, -0.095129974186, 0.042531281710, -0.069271288812, 0.126326426864, -0.053761571646, 0.113910272717, 0.035953223705, -0.035847708583, -0.062869235873, -0.082566522062, -0.139806568623, 0.070094719529, 0.049494281411, -0.091825842857, -0.051452159882, 0.149830386043, -0.060962617397, -0.069535285234, 0.089089542627, -0.131316766143, -0.093962974846, -0.147861003876, -0.123511277139, -0.094633460045, -0.149666190147, -0.125865772367, -0.024244785309, 0.136928394437, 0.116481676698, 0.021505698562, 0.144310578704, 0.028382658958, 0.119433835149, 0.039440602064, -0.029390230775, 0.121676966548, 0.046170994639, -0.030779838562, -0.055542990565, -0.074018172920, -0.075253359973, -0.018379881978, -0.090235471725, -0.138969391584, 0.087241053581, 0.040720045567, 0.101441487670, -0.001514226198, 0.084568917751, 0.019684508443, 0.037167757750, -0.005069121718, 0.078169062734, -0.156355306506, 0.008318245411, 0.044252693653, -0.086631193757, -0.006878435612, 0.088568940759, -0.042990095913, -0.134536981583, -0.023150965571, 0.082598567009, -0.007863014936, -0.047840945423, -0.037520147860, 0.099448397756, -0.097150057554, 0.026124298573, 0.097657039762, 0.024099841714, -0.100648283958, 0.098079457879, 0.009081423283, -0.018523693085, -0.127109825611, -0.086130686104, 0.085382401943, 0.004541158676, -0.013784170151, -0.001985773444, -0.084713459015, -0.056015677750, -0.037451237440, 0.096305891871, 0.084126919508, -0.045186303556, 0.037584051490, 0.088685274124, -0.146760016680, 0.016122415662, 0.073116183281, -0.025801002979, 0.103584840894, -0.108587414026, 0.006785094738, 0.067806109786, 0.002143278718, 0.129654720426, 0.133245185018, -0.013264283538, 0.097580596805, -0.126604601741, -0.129078298807, 0.031903594732, -0.114635258913, 0.138524904847, -0.089178018272, 0.107603326440, -0.150935679674, 0.125378206372, 0.068734288216, 0.059802487493, 0.034297451377, 0.105101808906, -0.025127395988, -0.099185854197, 0.139615759254, -0.102278813720, 0.045874014497, 0.102886721492, -0.088143795729, -0.019308328629, 0.042011439800, -0.061275020242, -0.102663472295, -0.142671450973, 0.135203465819, 0.152604058385, 0.065134465694, -0.027005210519, -0.131183430552, -0.110629245639, 0.104824379086, -0.090409100056, -0.135996311903, -0.051414236426, -0.074107401073, 0.142072752118, -0.005636274815, 0.108891412616, -0.010789602995, 0.058728188276, -0.116876259446, -0.053068846464, -0.127193927765, -0.157883211970, 0.120704725385, 0.090147137642, 0.077232807875, 0.073247373104, 0.119944140315, -0.156531915069, -0.051959753036, 0.134546622634, -0.089779026806, 0.080707252026, -0.104112103581, -0.087372437119, -0.155329748988, -0.034627072513, -0.056279256940, 0.056155651808, 0.026191741228, -0.048135556281, 0.062347471714, -0.103927835822, -0.069743640721, -0.150768935680, -0.092706792057, -0.067649476230, 0.156503543258, 0.104953274131, -0.047570057213, -0.014428302646, -0.031494081020, -0.135985881090, 0.036132022738, -0.108192496002, -0.143050163984, -0.095560662448, -0.058101095259, -0.064523696899, 0.133189275861, -0.097135469317, -0.041895180941, 0.109745964408, 0.130474522710, 0.103545084596, 0.100122973323, 0.103922680020, 0.104456320405, -0.078143388033, 0.079907536507, 0.039951279759, 0.134308055043, -0.013527855277, -0.099590316415, 0.103895500302, 0.111362680793, 0.062782078981, 0.139553889632, -0.070110090077, 0.010473355651, -0.152305215597, -0.137259408832, 0.143474712968, -0.129499375820, 0.018546953797, 0.149046257138, 0.010364949703, 0.100608512759, 0.037426128983, 0.106958553195, -0.090955376625, 0.048250153661, 0.096553787589, 0.073863267899, 0.140649154782, 0.075891166925, -0.115745373070, -0.071196042001, -0.007915601134, 0.122615829110, -0.003566011786, -0.147736728191, -0.021988153458, -0.072734236717, 0.139226064086, -0.010850667953, 0.029990449548, 0.019215703011, 0.077081710100, -0.077427513897, -0.093075580895, 0.050512373447, 0.106787368655, -0.049732074142, 0.111882433295, -0.001653179526, -0.056926973164, -0.045943647623, -0.076332598925, -0.057734824717, -0.039730831981, -0.107474774122, -0.083959624171, 0.131758615375, -0.000762835145, -0.107855558395, 0.069920063019, 0.002028271556, -0.108629599214, 0.057231158018, -0.156598910689, 0.081305056810, 0.109799519181, -0.023183599114, 0.070177793503, 0.133024081588, -0.041249386966, -0.012267902493, -0.028621181846, 0.123790279031, -0.116384640336, 0.006071105599, -0.114435464144, 0.095133408904, -0.105716839433, 0.049149721861, -0.026370152831, -0.122020162642, 0.041766524315, 0.095254495740, 0.134950205684, 0.125856474042, -0.044648475945, -0.049847006798, 0.155889257789, 0.101080521941, 0.128124937415, -0.148959517479, 0.154450878501, 0.124073341489, 0.096643820405, 0.044349655509, 0.071469679475, -0.048531107605, -0.077283248305, 0.033733189106, -0.059723548591, -0.058250114322, -0.078123368323, -0.053585976362, -0.141945749521, 0.026443928480, 0.002928555012, 0.144528672099, 0.057239294052, -0.121081233025, -0.017374634743, -0.087256327271, -0.072705626488, -0.036675803363, 0.147519126534, 0.041310191154, -0.141005679965, -0.074500963092, 0.010994568467, 0.121927306056, 0.086857795715, 0.135620221496, 0.053101420403, -0.116028666496, -0.152933597565, 0.072772279382, -0.025113895535, 0.013179048896, -0.033658929169, 0.000329017639, -0.066403694451, 0.106593683362, -0.028151094913, -0.157415017486, -0.010515466332, 0.044995665550, 0.057705014944, 0.033578068018, -0.016899839044, -0.147038459778, 0.154451146722, -0.152274683118, 0.039106786251, -0.064929276705, -0.091985262930, -0.155286476016, -0.147160410881, 0.107851937413, -0.122019827366, -0.035385876894, -0.087239176035, -0.038050509989, 0.113940998912, -0.107362359762, -0.155998691916, -0.008127763867, 0.047966137528, -0.024590387940, -0.066031433642, 0.079249501228, -0.075311265886, 0.095116898417, 0.013179197907, 0.139648839831, 0.012616112828, -0.152761399746, 0.004710316658, 0.117649003863, -0.050003342330, -0.046512231231, -0.085064984858, 0.132931217551, 0.020664453506, -0.070236608386, -0.094659395516, -0.129153430462, -0.112941265106, 0.116639807820, -0.153531104326, 0.020860850811, -0.061205126345, -0.029810979962, 0.127667561173, -0.113787904382, -0.100044488907, -0.097144097090, -0.079945504665, -0.094209782779, -0.019820436835, 0.085978120565, 0.008055046201, 0.098708763719, 0.022916480899, 0.138867333531, -0.105013176799, 0.019313231111, -0.125182807446, 0.143186852336, 0.001445770264, -0.060024939477, 0.076787143946, 0.133380189538, -0.071708492935, 0.065591618419, -0.057757370174, 0.064610704780, -0.092619858682, -0.146850422025, 0.125448212028, 0.053355455399, 0.078487753868, 0.109945192933, 0.154522225261, 0.047078713775, 0.033209353685, 0.141467019916, 0.122471347451, -0.006427466869, -0.084055334330, 0.140909090638, -0.069491177797, 0.081261098385, -0.007927551866, 0.154365822673, 0.099139377475, -0.080967701972, -0.066760309041, 0.132201477885, 0.126998379827, -0.000408634543, 0.052788913250, 0.018762275577, -0.133312314749, 0.130035176873, 0.110236719251, 0.027373626828, -0.071090221405, 0.141079321504, 0.147060438991, 0.094282522798, 0.083375886083, -0.052424259484, -0.144245654345, 0.050733581185, 0.021545812488, -0.015802696347, 0.152208968997, -0.141102343798, -0.024208441377, 0.105619922280, 0.093704447150, 0.064265131950, 0.015971288085, -0.065159462392, -0.137182995677, -0.030511960387, 0.118464395404, 0.012661769986, 0.004212677479, 0.104286655784, 0.122736230493, 0.048642724752, -0.139060959220, 0.067289054394, -0.148171678185, 0.042880967259, 0.126069113612, -0.124176442623, 0.035942211747, -0.077209733427, -0.045859843493, 0.041023507714, 0.113275364041, -0.120792359114, -0.102981261909, 0.121619567275, 0.111762985587, 0.131195053458, -0.035303846002, 0.113849088550, 0.088774919510, 0.035547152162, 0.046610057354, 0.132982447743, 0.067739233375, -0.087697759271, 0.153626158834, 0.059720903635, 0.029113426805, 0.134141758084, -0.016338452697, 0.059416308999, 0.130250975490, -0.033967442811, -0.067961350083, -0.083295017481, 0.148863181472, -0.151235103607, -0.092763297260, -0.007849588990, -0.123628929257, 0.087620407343, -0.154208034277, 0.121650919318, -0.145479604602, -0.017612889409, -0.075519166887, -0.040999419987, 0.075547844172, 0.077222332358, 0.142860844731, -0.061103798449, -0.141615211964, 0.040527001023, 0.154450640082, 0.014456868172, -0.109380900860, -0.126134067774, 0.102189555764, 0.005039483309, 0.043285563588, 0.128037706017, -0.096442669630, -0.083417385817, -0.034410312772, 0.104076638818, -0.129652962089, -0.097797960043, 0.042116686702, -0.069014154375, 0.155370756984, -0.026780307293, -0.083555318415, 0.086661800742, 0.062828183174, -0.086580418050, -0.059294097126, -0.060484617949, -0.097662813962, -0.147932901978, 0.106943741441, 0.005464255810, -0.007848381996, -0.001639753580, 0.007923215628, 0.035007730126, -0.118157170713, 0.024263218045, -0.130060657859, -0.005940973759, 0.111022457480, 0.119678184390, 0.078918442130, 0.056429818273, -0.032153785229, -0.055792249739, -0.051417782903, 0.090961888433, 0.080085620284, 0.107979401946, 0.109356597066, 0.006192043424, 0.146619006991, 0.029187306762, -0.029254376888, -0.133822426200, -0.095435246825, 0.129531785846, 0.010335847735, 0.134098216891, -0.058050692081, 0.134479686618, -0.112259238958, -0.013021737337, 0.035399943590, 0.047731697559, -0.044498667121, 0.110540613532, -0.057649597526, -0.106411829591, 0.084625095129, -0.019609257579, -0.127315342426, 0.144473537803, -0.031022906303, -0.069579839706, -0.113430947065, 0.126230850816, 0.015667513013, 0.109133943915, -0.065144151449, -0.153442129493, -0.049237258732, -0.031066402793, 0.055700570345, 0.049484506249, 0.141514196992, 0.066364035010, 0.005034208298, -0.145699039102, -0.082320019603, 0.131610527635, 0.068770825863, -0.041807763278, 0.023460268974, -0.104170873761, 0.025620847940, 0.142904952168, 0.060129880905, -0.015410497785, 0.136261627078, -0.127814307809, -0.009552910924, -0.112255051732, 0.101238474250, 0.157770678401, -0.052420116961, -0.013495892286, -0.129335403442, -0.016098022461, -0.006282404065, -0.084792919457, -0.062201693654, -0.008697286248, 0.060217037797, -0.000699892640, -0.055088669062, -0.096915878356, 0.134063616395, -0.130877524614, 0.003554672003, 0.089560195804, -0.066749528050, 0.004958704114, 0.138016924262, -0.107278868556, 0.133677408099, -0.089281387627, -0.065724387765, -0.146269202232, 0.078209429979, -0.130542993546, 0.034317165613, -0.093674741685, 0.024045139551, -0.094326645136, 0.006905272603, 0.142716124654, 0.014239728451, -0.018653631210, 0.059346497059, 0.124303892255, 0.037479177117, 0.020608052611, 0.045943722129, 0.061455741525, -0.128919184208, -0.142032980919, 0.052534520626, -0.040545277297, -0.075228139758, -0.013927146792, -0.051939018071, -0.146882802248, -0.032112851739, -0.012370407581, 0.019309416413, 0.010491311550, -0.061916247010, 0.078748494387, -0.048770867288, 0.076804190874, -0.121439203620, -0.114585950971, -0.121085122228, -0.040905550122, -0.040223345160, 0.015457808971, 0.122156277299, 0.005813524127, 0.010592147708, -0.094641789794, -0.047653853893, 0.138824924827, -0.000016361475, 0.142900422215, -0.061489552259, 0.056894779205, 0.056074529886, 0.004238232970, 0.079997032881, 0.022836595774, -0.034381769598, 0.086498081684, 0.135337099433, 0.015339925885, 0.052097469568, 0.099757805467, -0.084049724042, 0.066638395190, 0.138031467795, 0.146073296666, 0.039976760745, 0.031684488058, -0.039662294090, -0.110638111830, 0.143861100078, -0.062520913780, 0.040097773075, -0.151426568627, 0.086658298969, -0.019751608372, -0.068382725120, 0.065338745713, -0.071781516075, -0.059248678386, -0.129256725311, -0.108799234033, -0.043878622353, -0.105592593551, -0.154092296958, -0.045260339975, 0.107885852456, 0.088919147849, 0.018429145217, -0.125427991152, -0.018752783537, 0.104186221957, 0.130750402808, -0.143329918385, -0.090957179666, 0.090070128441, -0.012690976262, -0.090085320175, -0.017286390066, -0.108282521367, -0.106571584940, 0.072191730142, -0.071089886129, -0.076674021780, -0.111581444740, 0.147683128715, 0.135351464152, 0.043265819550, -0.020661503077, 0.018550604582, -0.124125182629, -0.150615438819, -0.157970443368, 0.089352265000, -0.151509925723, -0.151276156306, -0.097938418388, 0.059322148561, 0.134070143104, -0.144044533372, -0.128544360399, -0.064692199230, -0.047328792512, -0.097175195813, -0.045938745141, 0.007105290890, 0.127923741937, -0.143055707216, 0.103362187743, 0.064832016826, 0.018217965961, -0.093787193298, 0.019927799702, 0.153388276696, 0.018552109599, 0.141304031014, -0.150190666318, -0.012489974499, -0.086890101433, 0.113747909665, -0.107340462506, 0.049429893494, 0.087264314294, 0.101718977094, 0.021908223629, 0.066927090287, -0.042823247612, -0.050149872899, 0.146674379706, -0.020821079612, -0.005718678236, -0.093882948160, 0.134438827634, -0.151339754462, -0.038094051182, -0.153513342142, 0.002333804965, 0.051327124238, 0.043514430523, -0.053771600127, -0.110750138760, -0.135161101818, -0.063725717366, -0.108051054180, 0.149697855115, 0.020259574056, 0.090964451432, 0.024941876531, -0.109285831451, -0.060688711703, -0.101389721036, 0.108654662967, -0.147402763367, 0.018449500203, 0.005063384771, -0.083155952394, -0.112735778093, 0.107074156404, 0.003093287349, 0.075385898352, -0.086861826479, 0.024563133717, 0.046259999275, -0.082543522120, 0.100633516908, 0.149009183049, -0.040317624807, 0.024308159947, 0.012441232800, 0.091751947999, -0.072571955621, -0.126969814301, 0.152838453650, -0.045437179506, -0.041183307767, 0.004386305809, 0.114314898849, 0.046700075269, 0.105680808425, 0.016747176647, -0.078258477151, 0.113232746720, 0.055201336741, 0.157187059522, 0.131694063544, 0.135749921203, -0.143490090966, 0.028814747930, 0.060486197472, 0.001768678427, 0.142843171954, -0.020820930600, 0.004392862320, 0.122430130839, 0.086178153753, 0.111669018865, -0.034690096974, 0.107034370303, 0.127337142825, 0.088155061007, 0.095249399543, 0.106145784259, 0.039463400841, 0.157327428460, -0.097281165421, -0.096630245447, 0.088508710265, -0.124807387590, 0.028516530991, 0.148968115449, -0.025178730488, 0.116716846824, 0.063721567392, 0.110434815288, -0.049468450248, 0.021036148071, -0.120750933886, -0.015583574772, -0.001976922154, 0.098959878087, -0.141036629677, -0.151503026485, 0.091210663319, 0.152051135898, -0.151042550802, 0.078098863363, -0.095745831728, -0.071738839149, 0.155685171485, -0.077191606164, -0.005205050111, 0.010190144181, -0.057365052402, -0.059249162674, 0.072574138641, 0.128022238612, 0.057032495737, -0.054027564824, 0.001065671444, 0.053715839982, -0.126816272736, -0.006931558251, -0.006700888276, -0.134736582637, 0.088778167963, 0.079207882285, -0.080689646304, -0.101093798876, -0.057513430715, 0.011139392853, -0.035234220326, 0.065817013383, -0.095670893788, -0.037185586989, 0.102766975760, 0.053311839700, 0.011775016785, -0.054262980819, -0.071416720748, -0.085340403020, 0.114630743861, 0.048675119877, 0.121407732368, 0.016999408603, 0.127796784043, -0.087043412030, 0.062639400363, 0.103977337480, -0.144877165556, 0.143603846431, -0.000507593155, -0.143617346883, 0.009122699499, -0.069263108075, 0.086841806769, 0.042663484812, -0.112853311002, -0.036839447916, 0.084394007921, 0.028991892934, 0.039057210088, 0.075940921903, 0.013630732894, -0.067905478179, -0.107316374779, -0.095968618989, 0.131884947419, -0.054063975811, 0.119843974710, 0.103847309947, 0.094989106059, -0.101602554321, 0.097644463181, -0.120442003012, -0.157193884254, -0.050005301833, 0.135301128030, -0.126521587372, -0.104875177145, -0.033053353429, -0.092241488397, -0.090942628682, -0.062882013619, -0.132238388062, -0.069480396807, 0.105234339833, -0.038827151060, 0.068305298686, 0.007526487112, 0.101349279284, 0.134725615382, 0.075448036194, 0.104398563504, 0.093669399619, 0.094165310264, -0.115476965904, 0.125756070018, -0.011999383569, -0.105048999190, 0.084647223353, -0.134083628654, -0.123353816569, -0.142039299011, 0.128473296762, -0.153576254845, 0.001437962055, 0.053629592061, -0.110031820834, 0.050390899181, 0.027833223343, -0.031680762768, -0.066763177514, -0.044460557401, 0.073439180851, 0.154671147466, -0.036097228527, 0.138962402940, -0.115772515535, -0.015606373549, -0.054065674543, 0.051339402795, -0.056979753077, -0.033880852163, -0.143019288778, -0.026711285114, 0.106465443969, -0.151655957103, -0.080530114472, -0.045161955059, 0.042299479246, -0.059300094843, 0.103565230966, 0.148268505931, 0.035198226571, -0.000868096948, -0.010560184717, 0.087049782276, 0.066780105233, -0.036574058235, 0.123206332326, -0.146602630615, -0.012610003352, 0.133805349469, 0.101456984878, 0.105392113328, -0.011626824737, -0.148548796773, -0.092496134341, 0.074748560786, -0.121596671641, 0.018022805452, -0.009778976440, 0.069403573871, -0.095056310296, 0.017596974969, 0.104903534055, -0.129094168544, 0.026672378182, -0.065966598690, 0.020168080926, -0.058036744595, -0.080071903765, 0.094492629170, 0.023124501109, 0.056414410472, -0.093224562705, 0.141554281116, -0.153312787414, -0.036219857633, -0.075365021825, -0.081255823374, -0.070557035506, 0.111409083009, 0.152233585715, -0.027038529515, 0.060440704226, 0.017562821507, 0.064077094197, 0.009723946452, -0.060289047658, 0.015824824572, 0.137423798442, -0.004810884595, -0.021760866046, -0.069133169949, 0.133943662047, 0.120088919997, -0.023857250810, 0.101300314069, -0.019983515143, 0.045850574970, -0.054631508887, 0.026347503066, -0.011624068022, 0.117184534669, -0.112096309662, -0.029154062271, -0.147008374333, -0.127548620105, -0.128162443638, -0.107950821519, -0.073094137013, -0.006988391280, -0.120765633881, -0.091999515891, -0.132866084576, -0.013857454062, 0.153158560395, -0.041978269815, -0.050719775259, -0.143046006560, -0.093286722898, -0.017429187894, 0.032012656331, -0.115612909198, 0.144926980138, -0.005499094725, -0.144437611103, 0.144638016820, -0.029766902328, -0.041917197406, -0.095033921301, 0.092632248998, -0.009993508458, 0.022738397121, 0.124005839229, 0.149982616305, -0.070069082081, 0.121482297778, 0.018982201815, 0.157175555825, -0.076537027955, -0.063508734107, 0.054754287004, -0.016692623496, -0.110092476010, 0.143097922206, -0.031308725476, 0.056933239102, -0.017321184278, -0.148371770978, -0.052013136446, -0.027365133166, 0.122947528958, 0.117904439569, -0.128347948194, 0.010293543339, -0.098660245538, -0.128296047449, 0.127933368087, -0.104326680303, 0.057700902224, -0.024793878198, -0.033837050200, 0.109770759940, 0.014191552997, 0.154476508498, -0.071341849864, -0.071951642632, -0.016250014305, 0.013023853302, 0.011222451925, -0.070619612932, -0.104583695531, -0.139044627547, 0.081800580025, 0.077296361327, 0.119175627828, -0.096571668983, -0.028802156448, -0.075471475720, -0.111957281828, 0.134433075786, 0.028062909842, -0.002709686756, -0.099334426224, 0.056782290339, -0.088982634246, 0.090401753783, -0.012410551310, -0.033980563283, -0.015933588147, 0.117972865701, 0.152970507741, 0.015744984150, 0.046264410019, 0.104634299874, -0.080551750958, 0.121673956513, 0.020606398582, -0.104280084372, -0.006054416299, -0.014858871698, -0.045521356165, -0.066563643515, -0.074632525444, -0.094943106174, -0.003845050931, 0.067998260260, -0.017388626933, -0.023627221584, 0.046057149768, -0.018066346645, -0.003195822239, 0.070276081562, 0.142585322261, 0.125176891685, -0.097978606820, -0.000379011035, 0.074546426535, 0.106358215213, 0.032658144832, -0.111386924982, -0.103899262846, 0.005477711558, -0.019850641489, 0.101027980447, 0.020676061511, -0.059941627085, -0.048287697136, -0.021933376789, 0.092753335834, 0.129201576114, -0.041218928993, -0.098398551345, -0.081442348659, 0.153591141105, -0.074627056718, -0.078394263983, -0.137075632811, -0.133606836200, 0.076035156846, 0.134670868516, -0.100688099861, -0.065558448434, -0.042451329529, -0.103045418859, 0.155127272010, 0.086476594210, 0.005795508623, -0.113353669643, -0.128371819854, 0.020785108209, -0.153474658728, -0.093970291317, 0.148736938834, 0.027468234301, -0.054519101977, 0.118475481868, 0.111125156283, 0.040255576372, -0.080020487309, -0.114257350564, -0.059862159193, 0.081564828753, -0.057952865958, -0.088283427060, 0.057176649570, -0.118367478251, 0.038464084268, -0.088984444737, 0.090549945831, 0.136767491698, 0.149617627263, 0.096528992057, -0.063860714436, -0.011970728636, 0.041723921895, 0.135586634278, -0.096123337746, 0.034656018019, 0.112484112382, 0.084823042154, 0.150229200721, 0.127029195428, -0.134472072124, -0.058206573129, 0.136318072677, 0.117756083608, 0.151034548879, -0.077131211758, -0.082506999373, -0.073508389294, -0.029831707478, -0.051040619612, 0.100321158767, 0.018311038613, -0.108771681786, -0.092673391104, 0.018279939890, -0.010613024235, 0.080831840634, -0.117697641253, 0.020883128047, 0.153405532241, 0.149448707700, 0.003035694361, -0.031076177955, 0.030874758959, -0.031913280487, -0.088042877614, -0.079111866653, -0.101239383221, 0.082271426916, -0.090440995991, 0.086481571198, 0.128263428807, -0.100748106837, 0.047660574317, 0.069953873754, -0.142551273108, -0.033754982054, -0.134356558323, -0.114395767450, -0.064311459661, 0.036890760064, 0.086773842573, -0.152168571949, -0.019545704126, -0.095691323280, 0.101677194238, 0.068155452609, 0.063189968467, -0.005237013102, -0.022327467799, 0.049740329385, 0.052667602897, 0.154551759362, -0.053624086082, -0.107368431985, 0.122835353017, -0.088288217783, 0.017700463533, 0.033660441637, -0.115175500512, -0.114073202014, -0.101793527603, 0.073328003287, 0.036077544093, 0.032225221395, 0.079192116857, 0.053823426366, 0.132471993566, -0.046431332827, -0.052385546267, 0.063358470798, -0.016047239304, 0.078107163310, -0.074938438833, -0.145222321153, -0.066282309592, -0.102707996964, -0.116418048739, 0.009769216180, -0.085966587067, -0.058229267597, 0.069409191608, 0.116163536906, 0.057280391455, 0.017875298858, 0.139666423202, -0.001674175262, -0.010621696711, -0.022000625730, 0.079587876797, -0.081536971033, 0.049508675933, 0.095519468188, 0.047445580363, -0.071524120867, -0.150683224201, -0.133774295449, 0.151936605573, -0.083251364529, -0.149211630225, -0.107628658414, -0.002687513828, -0.118477821350, -0.004260584712, -0.094823338091, 0.010233417153, -0.087048992515, -0.057563722134, -0.122603267431, 0.028671309352, 0.077515721321, -0.095938540995, -0.035501196980, -0.030999690294, 0.025019198656, 0.107389166951, 0.131803587079, 0.019999623299, 0.045324623585, 0.121362015605, 0.019356533885, 0.015861809254, -0.006644934416, -0.055390998721, -0.041497811675, -0.089699409902, 0.033907949924, 0.059474185109, 0.035590723157, -0.088815301657, -0.118355534971, -0.051943317056, 0.127870276570, -0.104430422187, -0.125800594687, -0.028743848205, -0.041539773345, 0.090003296733, -0.049290254712, 0.003716766834, -0.138439178467, 0.104089424014, -0.130626976490, 0.062326654792, 0.057198435068, 0.140058472753, 0.154480889440, 0.019257172942, 0.076049193740, -0.119656316936, 0.105237051845, -0.065314926207, 0.108663812280, -0.120890185237, 0.124489530921, 0.047116175294, 0.123149409890, 0.031628742814, 0.022620186210, 0.155859276652, -0.134445115924, -0.041691198945, -0.054212018847, 0.049653917551, 0.071644529700, -0.155434697866, 0.089609950781, -0.017662122846, 0.131382331252, 0.116844490170, -0.070999145508, -0.010189384222, -0.123587504029, 0.100802317262, 0.091742485762, 0.014149218798, -0.036489576101, -0.146520003676, -0.120913177729, 0.046875372529, 0.016040533781, 0.117237046361, -0.039162658155, -0.027418375015, 0.151694521308, -0.094076104462, 0.109448537230, 0.107344880700, 0.082580462098, -0.023815706372, 0.009950757027, -0.039934925735, 0.120762422681, -0.052209310234, -0.081775031984, 0.017969384789, -0.103634819388, 0.092311277986, -0.122210986912, -0.019758284092, 0.154443338513, 0.068582862616, -0.048368148506, 0.085589274764, 0.128566220403, -0.081668645144, 0.051021695137, 0.051545202732, -0.043844543397, 0.068989574909, -0.010136201978, -0.144713282585, 0.116590961814, 0.091108053923, -0.019161194563, -0.141488924623, -0.137786075473, 0.011267527938, 0.062770918012, 0.117371514440, -0.045512534678, -0.078173883259, 0.096176847816, -0.146284431219, -0.050204418600, -0.072456486523, -0.117680527270, -0.086466081440, -0.043356478214, 0.006272748113, 0.017079249024, 0.047590643167, 0.135655507445, -0.136777102947, -0.009965732694, 0.094270423055, -0.050477080047, -0.064511477947, -0.005940720439, -0.143647819757, -0.088003754616, -0.112897343934, 0.126179710031, 0.117486193776, -0.099512882531, -0.130121082067, 0.098315879703, 0.100872471929, -0.033027917147, -0.054341018200, -0.036474727094, -0.119415998459, 0.026887595654, -0.134885981679, 0.024556010962, 0.093895688653, 0.068269252777, 0.041116625071, 0.114552453160, 0.049545839429, -0.130407541990, 0.138963028789, 0.021945133805, 0.046787768602, -0.105213165283, -0.077649548650, -0.134604081511, -0.079535655677, 0.058430910110, -0.076123453677, 0.054304033518, -0.119004227221, -0.050113491714, 0.017464399338, 0.094205304980, 0.077284678817, 0.090478241444, -0.002371579409, -0.009771481156, -0.142420917749, -0.095020763576, 0.119129940867, -0.150109052658, -0.054617337883, -0.146389156580, 0.124129965901, 0.109154328704, 0.140003457665, -0.098022073507, -0.099763303995, 0.140181824565, 0.035464286804, -0.128849670291, 0.143773272634, 0.070984750986, 0.010027095675, -0.093954794109, 0.044827923179, -0.110460326076, -0.010397970676, 0.069091141224, 0.025552019477, 0.019387453794, 0.013054266572, -0.032929718494, -0.002389743924, -0.027118191123, 0.064630225301, -0.036266446114, 0.107589945197, 0.098683282733, 0.062117666006, -0.117079749703, -0.016195923090, 0.032616630197, 0.138991340995, 0.073881223798, 0.044871762395, -0.119723007083, -0.108146056533, -0.079861700535, 0.071201130748, 0.117871269584, 0.141490921378, -0.078308083117, -0.095869593322, 0.092321410775, -0.130830094218, 0.073816791177, 0.040352195501, -0.120773702860, 0.027496173978, -0.119639575481, 0.135993525386, -0.128224566579, -0.038774259388, 0.067024648190, -0.038944914937, -0.121319822967, -0.057767622173, 0.024943470955, 0.021475270391, 0.007862746716, 0.002436786890, -0.046673879027, -0.036698989570, -0.046657331288, 0.144192501903, -0.045569688082, 0.091979637742, 0.142352029681, 0.038004368544, -0.001405924559, -0.053746230900, 0.140934929252, 0.042027086020, -0.055873677135, 0.124405339360, 0.118712559342, 0.073062241077, 0.118729099631, 0.148555949330, 0.001376211643, -0.136584579945, 0.148235335946, -0.075297921896, -0.122459754348, 0.056320205331, 0.091473177075, -0.156199872494, -0.147261291742, 0.043607279658, 0.095114395022, 0.117383912206, -0.060246556997, -0.136192351580, -0.109255149961, -0.154302537441, -0.130639910698, -0.098352745175, -0.150165140629, 0.109806761146, -0.061483405530, -0.088136896491, -0.021604582667, 0.015480473638, 0.113832071424, 0.041048049927, -0.065629541874, 0.023677244782, -0.088472329080, 0.024916097522, -0.038685671985, 0.097937628627, -0.124347060919, 0.021081149578, 0.090297549963, -0.072885930538, -0.089738011360, 0.070523440838, -0.138746529818, -0.074809551239, -0.118443295360, 0.084436491132, 0.092153117061, 0.155779287219, -0.056746967137, -0.106716915965, -0.043569922447, -0.134792193770, -0.041781485081, 0.155883774161, -0.111191242933, -0.085341721773, -0.023754641414, 0.110580757260, 0.143190428615, 0.109215006232, 0.026785388589, 0.145834758878, 0.054577529430, -0.035035334527, -0.111720323563, 0.093662843108, -0.127729862928, 0.021379336715, -0.007060706615, -0.058936014771, -0.152385249734, 0.152370467782, 0.157998070121, -0.003041863441, 0.064879819751, 0.058422461152, 0.156841441989, -0.053295671940, -0.039906650782, 0.086939364672, 0.042632997036, 0.121843710542, -0.023608982563, -0.074339352548, 0.141277417541, 0.057301267982, 0.150690540671, -0.064659252763, -0.083132430911, 0.027223616838, 0.132395699620, 0.035093456507, 0.128360256553, 0.039890483022, -0.156907424331, -0.045578546822, -0.092919059098, 0.149446532130, -0.142129927874, -0.032574221492, -0.098740652204, 0.011067852378, 0.004081338644, -0.106607288122, -0.016944810748, -0.011197492480, -0.134353965521, -0.054780036211, -0.048698827624, 0.039050623775, 0.104194685817, 0.126499310136, -0.060236342251, 0.138887777925, 0.098345324397, 0.059743076563, -0.094473809004, 0.096107497811, -0.042342349887, 0.056259691715, 0.118595227599, 0.122754886746, 0.016785323620, 0.028829336166, -0.010434791446, 0.148448929191, -0.071256771684, -0.131788775325, 0.023431882262, 0.032028853893, -0.026823580265, 0.128395929933, -0.115961529315, 0.036134928465, 0.023265451193, 0.118733152747, 0.110890462995, -0.128271847963, -0.154007434845, -0.062962502241, 0.146141365170, -0.007657229900, 0.149169817567, -0.133477315307, -0.113420091569, -0.049906611443, 0.124213829637, -0.025828674436, 0.035725414753, -0.045650884509, 0.065793111920, 0.124166384339, -0.078450426459, -0.060334131122, 0.143646046519, -0.000984132290, -0.077366329730, -0.091572478414, -0.053064398468, -0.132313966751, 0.108305349946, 0.067123413086, -0.091968037188, 0.084978088737, -0.085513316095, 0.034129276872, 0.060257121921, -0.035037443042, -0.101663321257, 0.149356946349, 0.151037380099, -0.106882929802, 0.028808340430, -0.080070920289, 0.087453603745, -0.077044546604, 0.056634366512, 0.080042839050, 0.128318503499, 0.000919029117, 0.028214767575, 0.143001154065, -0.121955208480, -0.076376251876, -0.034027643502, 0.043274000287, 0.073309957981, -0.091091081500, -0.035047881305, -0.001191914082, 0.151413038373, -0.103319972754, -0.004421696067, -0.148122891784, 0.041376352310, 0.019298642874, 0.041451826692, -0.021376743913, 0.068983659148, 0.114759698510, 0.009640485048, 0.117152735591, -0.131059706211, -0.109368875623, -0.137089803815, 0.020773008466, 0.124447599053, 0.118123009801, 0.084033921361, -0.153367832303, 0.054848000407, -0.129575043917, -0.000819653273, -0.038723409176, 0.138425067067, 0.004161447287, -0.021705791354, 0.015136748552, 0.147627189755, 0.052858799696, 0.057182490826, 0.038199037313, 0.120881661773, 0.090149328113, 0.075363665819, 0.145497515798, -0.105411335826, -0.041380122304, 0.031501322985, -0.017756327987, 0.063021719456, 0.076958328485, -0.094696298242, 0.126930847764, 0.086289837956, 0.072256311774, -0.098767384887, -0.029918789864, -0.144942596555, -0.125327274203, 0.103322938085, 0.147693440318, -0.071230344474, 0.057585582137, 0.119124040008, 0.080360963941, 0.101231828332, -0.042389616370, -0.048742704093, 0.094181463122, 0.019644543529, -0.017781928182, 0.133161529899, 0.026319220662, -0.115265220404, -0.031377002597, 0.108631268144, -0.102352276444, -0.003739953041, 0.004429474473, -0.122078597546, -0.119420066476, 0.088973775506, -0.060971893370, -0.124524772167, 0.112064376473, -0.028876841068, 0.140618547797, 0.017865002155, 0.130692675710, -0.121229305863, -0.108615040779, 0.049969896674, 0.155562296510, -0.049022682011, 0.057804599404, -0.066925615072, -0.001464203000, 0.029851168394, -0.001983523369, 0.018510580063, -0.070790417492, -0.049240723252, 0.155498847365, 0.012177541852, -0.012673899531, 0.122592970729, -0.074337884784, 0.016510650516, 0.089776203036, -0.134584218264, 0.065748184919, -0.004895403981, -0.102138429880, 0.150820180774, 0.033898457885, 0.008321747184, 0.017172917724, -0.102272480726, 0.040221720934, 0.089110612869, -0.113493904471, -0.027908623219, -0.092639803886, 0.154219225049, 0.050883531570, 0.118404164910, -0.152613773942, -0.034336268902, 0.116286590695, 0.027815550566, -0.090111970901, 0.027923777699, 0.014747411013, -0.108466215432, -0.076604843140, 0.085557654500, -0.123599149287, -0.124403536320, -0.002358272672, 0.031236991286, -0.000061184168, -0.069116465747, -0.031222477555, -0.110377579927, 0.083888754249, 0.151891365647, 0.007185295224, -0.075687408447, -0.004925072193, 0.152486190200, 0.134311094880, 0.088408097625, -0.100989110768, 0.082365706563, -0.137410536408, -0.040830872953, 0.112364038825, 0.062047585845, 0.110265895724, -0.062904633582, -0.050774060190, -0.082155697048, 0.113816782832, -0.013170495629, 0.045946165919, 0.131584689021, -0.075009420514, -0.131779462099, -0.124294929206, -0.033041477203, 0.084327250719, 0.019641071558, -0.110314697027, 0.148388013244, -0.036189019680, 0.111490771174, 0.014219343662, -0.154488608241, 0.059033647180, 0.013489827514, 0.056629315019, 0.093656793237, 0.125104561448, -0.117812499404, -0.014518126845, -0.055462546647, -0.015650257468, 0.073165535927, 0.062328010798, -0.076383598149, 0.045137718320, 0.065747499466, 0.044975697994, -0.130105480552, -0.151219457388, 0.023474708200, -0.006561473012, -0.005093395710, -0.047921396792, -0.144848093390, -0.116215720773, -0.144556730986, -0.156743019819, 0.045690849423, 0.062777668238, 0.115999743342, -0.035982549191, 0.144563868642, -0.079899020493, 0.021850556135, -0.077782355249, 0.066568136215, 0.006671473384, -0.082472957671, -0.123697653413, 0.060968995094, -0.055845968425, 0.100992426276, -0.039247021079, 0.029940992594, 0.156764671206, 0.156680569053, -0.074522785842, 0.012295573950, 0.155920609832, 0.111743077636, -0.043329976499, 0.116057321429, 0.074104085565, -0.102701470256, -0.009343430400, -0.075885392725, -0.150845617056, -0.107925713062, 0.065115958452, -0.048800870776, -0.025486275554, -0.119239047170, -0.017818868160, 0.061721429229, -0.045871376991, 0.118032380939, -0.139793008566, -0.047205783427, 0.081183329225, 0.031196996570, 0.150285050273, 0.041033834219, 0.042556196451, 0.114657565951, -0.087242759764, -0.156101375818, 0.118033215404, -0.058893755078, -0.134700655937, 0.112024322152, -0.133997946978, 0.075580686331, 0.009613826871, -0.011020272970, 0.059116125107, 0.079040318727, -0.014054492116, 0.151045784354, 0.052165284753, 0.091760322452, 0.152072444558, 0.010481879115, 0.118080183864, -0.056798428297, 0.155709251761, -0.133807241917, 0.086925461888, -0.051002092659, 0.048937037587, 0.067014053464, 0.013037875295, 0.149356350303, 0.074152827263, 0.029800906777, 0.107643857598, -0.135371565819, 0.010793745518, -0.023258551955, 0.053398996592, 0.044106915593, -0.050717361271, -0.010649219155, -0.053433001041, -0.088667452335, 0.037653252482, -0.006230652332, 0.128114446998, -0.026084065437, -0.010762318969, 0.020444139838, 0.011855036020, -0.144120693207, -0.088593110442, -0.027696505189, -0.130224257708, -0.065996378660, -0.037778183818, 0.124423161149, -0.011264398694, 0.023683816195, -0.087998740375, -0.081300422549, -0.026201650500, 0.104818299413, -0.105144105852, -0.052311882377, -0.085384428501, -0.056534059346, -0.051824681461, 0.115027979016, -0.112549513578, -0.053815513849, -0.155634418130, 0.038452133536, 0.038802415133, -0.141508147120, 0.023084416986, 0.151632085443, -0.150739580393, -0.074767634273, 0.109412446618, -0.136779591441, 0.129083022475, -0.126583427191, -0.154623031616, 0.123828843236, -0.154991984367, 0.042226433754, 0.056746333838, -0.034307055175, 0.157839611173, -0.123857080936, 0.139006331563, -0.042525894940, -0.140502050519, 0.120367363095, -0.064588271081, 0.135671898723, -0.021271556616, 0.144674524665, -0.144900336862, -0.106563217938, -0.103686161339, -0.047744818032, -0.100040227175, 0.131947889924, 0.086965456605, 0.033598467708, -0.134115457535, -0.016301512718, -0.032338172197, -0.120168998837, 0.040822207928, -0.027395904064, -0.041942380369, 0.004590466619, 0.125940307975, 0.147502020001, 0.005942255259, -0.033803343773, 0.135604217649, -0.101029820740, 0.050196692348, -0.054498367012, 0.022991269827, -0.134886249900, -0.040697574615, 0.088825434446, 0.103014007211, 0.110146567225, 0.133216634393, -0.051500827074, 0.124016031623, 0.087414577603, -0.060242787004, -0.086884893477, -0.088930353522, -0.114126920700, 0.020486325026, -0.044031068683, 0.084812566638, -0.034522533417, -0.117601856589, 0.085761219263, -0.060651242733, -0.079314112663, -0.092348173261, 0.026529312134, -0.003962844610, -0.018002450466, -0.091497235000, 0.087554708123, -0.124732628465, 0.005555152893, 0.026007890701, 0.101777896285, -0.030803844333, -0.106630809605, 0.007548958063, -0.009694680572, -0.122669160366, -0.071390971541, 0.002073317766, 0.123050734401, -0.060103803873, -0.129390582442, -0.014271929860, -0.130833178759, -0.010636180639, -0.071978144348, -0.100157022476, -0.148951739073, 0.141664221883, 0.150070384145, -0.057302363217, 0.155242070556, -0.011029317975, -0.140362307429, 0.023492529988, 0.142483726144, -0.020760118961, -0.129629731178, -0.109473638237, 0.029186785221, 0.052929222584, 0.134174481034, -0.140911221504, -0.096014954150, -0.058534465730, -0.022462904453, 0.094798699021, 0.110661283135, -0.104504942894, -0.150648608804, -0.102186448872, 0.156612053514, -0.048620112240, -0.053458184004, 0.113249555230, -0.157459989190, 0.058028414845, -0.096664063632, -0.018689259887, -0.049290597439, 0.025812119246, -0.040775157511, -0.111354470253, -0.099343962967, -0.113274127245, 0.078176856041, 0.092853769660, 0.129608556628, -0.027016595006, 0.152917489409, 0.044667020440, 0.081921026111, -0.141815379262, -0.108128823340, -0.043063499033, -0.008631542325, 0.007569834590, -0.026645615697, -0.131815880537, 0.098857626319, -0.106666430831, 0.003841310740, -0.001796394587, 0.021367505193, 0.107887521386, 0.058103993535, 0.126790329814, 0.100013688207, 0.011643260717, -0.005389660597, -0.038407318294, 0.113986656070, -0.069469235837, -0.056112527847, 0.025833755732, -0.042679399252, 0.081947982311, 0.105905696750, -0.033243656158, 0.135941728950, -0.129038870335, -0.000464692712, 0.006899923086, 0.039687931538, 0.142700031400, -0.025892421603, 0.062281161547, 0.088193446398, 0.105301186442, 0.153718933463, 0.025636792183, 0.100600108504, -0.140050053596, -0.013095244765, 0.139416530728, 0.064504504204, -0.150383606553, -0.072140730917, 0.106610730290, -0.115487523377, -0.069280982018, -0.046156443655, 0.137980893254, 0.049817189574, -0.010663732886, -0.015155702829, 0.099225178361, -0.141072407365, 0.005316078663, 0.154139503837, -0.092807933688, -0.119356438518, 0.008823692799, 0.155189111829, 0.152691766620, -0.155824258924, 0.134261712432, -0.043451666832, -0.028402984142, 0.071635469794, -0.117804780602, 0.134957090020, -0.144963562489, -0.122679635882, 0.057792246342, -0.056476980448, 0.010934546590, -0.086702249944, 0.086186334491, -0.148573413491, 0.108360245824, -0.010495483875, -0.097016908228, -0.155801758170, -0.019961237907, -0.133465588093, 0.114566877484, -0.107556015253, 0.099001064897, 0.072673276067, 0.037341162562, 0.043397799134, -0.066429629922, 0.005860224366, -0.096211314201, 0.052739366889, -0.119983643293, 0.130803540349, -0.011013269424, 0.115562275052, 0.155789241195, 0.154039785266, -0.103640474379, 0.126523807645, 0.045767262578, -0.072808012366, -0.082174316049, -0.048307456076, 0.053019091487, -0.051223039627, 0.103055104613, -0.144278481603, -0.100571572781, -0.066019788384, -0.115824915469, -0.152912631631, 0.103536918759, -0.049620226026, -0.082452110946, 0.054714113474, 0.037673607469, 0.050154089928, 0.059847310185, 0.078946113586, 0.071291372180, -0.010018661618, -0.076866425574, 0.085805132985, -0.008150041103, -0.014841869473, 0.021757662296, -0.069293305278, -0.101455688477, 0.086941599846, 0.130188629031, -0.094178982079, -0.095219202340, 0.094534829259, 0.097986564040, -0.098485365510, -0.143882408738, 0.125491455197, 0.062623292208, -0.047883957624, -0.095918074250, -0.150537744164, -0.047395855188, -0.107339143753, 0.112083032727, 0.076382622123, -0.041983731091, 0.006432890892, -0.157616883516, -0.012469321489, 0.028911069036, -0.101521015167, -0.035909719765, 0.125829324126, -0.066452473402, 0.004063501954, -0.135694548488, -0.015612065792, 0.106730297208, -0.158080175519, 0.054613754153, -0.152091026306, 0.085808455944, -0.093838199973, -0.013375103474, 0.061628058553, 0.062492489815, -0.017216354609, 0.130795851350, -0.016944363713, -0.010955438018, -0.152688443661, -0.001816481352, -0.069725766778, 0.148361489177, 0.070342153311, -0.020923495293, -0.078632429242, 0.136945769191, 0.018645912409, 0.028002828360, -0.089375138283, -0.113230019808, 0.148443654180, 0.013175055385, -0.117738425732, -0.051001600921, 0.073913976550, -0.017769932747, -0.129945933819, 0.133433207870, -0.070524573326, -0.020417153835, 0.054697066545, 0.046246543527, -0.067332141101, -0.148080408573, 0.061392366886, -0.060209505260, -0.085910193622, 0.128911003470, 0.052665904164, -0.009781584144, -0.143890246749, -0.116052001715, -0.137773588300, -0.048118397593, -0.136894047260, -0.015568599105, -0.087680235505, -0.066446974874, 0.095723524690, -0.011894509196, 0.022275030613, 0.074237346649, -0.124030105770, -0.042007371783, -0.041621044278, 0.117511376739, 0.117125198245, 0.120223119855, -0.136351019144, -0.089503236115, 0.082216799259, 0.014093428850, -0.080966912210, 0.088187709451, 0.089833810925, -0.059967823327, -0.046954646707, 0.006618246436, 0.152044519782, 0.091930314898, 0.145968630910, 0.154706165195, -0.095837250352, 0.055290609598, 0.157264336944, -0.029825195670, 0.008010789752, 0.045460209250, -0.035618051887, -0.118309736252, 0.031286522746, 0.024844214320, -0.106811121106, 0.024799987674, -0.120723754168, 0.106982901692, -0.063291706145, -0.048393063247, 0.144949361682, 0.058680728078, -0.016983568668, -0.116820499301, -0.090190082788, -0.107758298516, -0.073575831950, 0.038040488958, 0.117708489299, -0.058496199548, -0.093872465193, 0.039772152901, 0.060747638345, 0.059763059020, 0.007550686598, -0.050467431545, -0.018201336265, 0.114135012031, -0.094533599913, 0.072001248598, 0.007631510496, -0.068103767931, -0.134107917547, 0.020563378930, 0.013624772429, -0.101036235690, -0.078926093876, 0.015824154019, 0.026644438505, -0.035041362047, 0.074044853449, 0.127195194364, 0.068497925997, 0.033363536000, -0.044570028782, 0.157239690423, 0.062553703785, -0.053104318678, 0.082854643464, 0.143864378333, -0.089072093368, 0.069921836257, -0.137726321816, -0.047926820815, -0.137817025185, -0.144972950220, 0.104437813163, -0.005730584264, 0.025600120425, 0.070410236716, -0.019415646791, -0.012363359332, 0.040225148201, 0.133121833205, 0.065292447805, -0.136992394924, 0.100648477674, 0.128910139203, -0.067366257310, 0.123606666923, 0.129667058587, 0.138583704829, -0.112479209900, 0.067380815744, -0.129170089960, 0.083605498075, -0.133885875344, -0.114783942699, 0.008393004537, 0.097684070468, -0.050690069795, 0.154931589961, -0.033355310559, 0.118905112147, 0.033695876598, 0.036789536476, -0.021739915013, -0.152752503753, -0.138315647840, -0.087167702615, 0.092883631587, -0.084850035608, 0.057778701186, -0.105992108583, 0.017076864839, 0.090297669172, -0.099005445838, -0.151094719768, -0.067920863628, 0.097058102489, -0.133563831449, 0.131160572171, -0.031623467803, -0.071756899357, -0.148271203041, 0.002598091960, -0.064085125923, -0.029789865017, 0.047328680754, -0.105024226010, 0.044501349330, 0.087918817997, -0.025614812970, 0.065132662654, 0.031313925982, 0.045452669263, 0.031174078584, 0.020434007049, -0.074214912951, -0.071092672646, 0.013525485992, 0.049128606915, -0.000136166811, 0.080674037337, -0.126388370991, -0.009309276938, -0.002090469003, 0.075426995754, 0.092743799090, -0.018123164773, -0.039850331843, -0.069146849215, 0.042276948690, 0.128803297877, 0.005855590105, 0.015177980065, 0.143866494298, 0.081165954471, 0.018917560577, -0.073600254953, 0.081984028220, 0.082595467567, -0.135463804007, 0.022220700979, 0.027294725180, -0.081225782633, -0.112765252590, -0.119329556823, -0.094464048743, -0.027130618691, -0.012399196625, 0.147863224149, 0.021387591958, 0.085396751761, -0.085607223213, 0.140610530972, -0.058087296784, -0.048606693745, -0.063392698765, 0.034516051412, -0.108588881791, 0.109909877181, -0.083021529019, 0.014746919274, 0.106203243136, 0.096241936088, 0.032149523497, -0.085710741580, 0.011726155877, -0.075780183077, -0.110223442316, -0.074292570353, -0.115023016930, 0.120483621955, 0.053145214915, 0.133162900805, 0.007182806730, 0.053701937199, -0.043153218925, -0.151592135429, 0.141553774476, 0.081380069256, -0.026073589921, -0.084685295820, -0.073845177889, 0.040940761566, -0.096891224384, 0.151035979390, 0.060067906976, -0.025185704231, -0.125792458653, 0.049914330244, -0.013010352850, 0.067374140024, 0.012349560857, 0.077746361494, -0.106059320271, 0.097707405686, -0.058384768665, -0.009542807937, 0.088828831911, -0.131248414516, 0.059898570180, 0.005499318242, 0.128628417850, -0.028755068779, -0.039617210627, -0.019985437393, 0.093647912145, -0.156341701746, 0.071659907699, 0.009978815913, -0.016551449895, 0.060261934996, -0.150021851063, 0.003111198545, -0.070956513286, -0.038424052298, -0.057945214212, 0.077256888151, 0.038851201534, -0.021657168865, -0.147004872561, -0.100565582514, 0.001836612821, -0.118265323341, 0.010626524687, 0.052205309272, -0.096934393048, 0.140504792333, -0.109388820827, 0.134661898017, -0.123103275895, -0.122616268694, -0.149445652962, -0.123682610691, -0.011657431722, 0.127670332789, 0.136272087693, 0.024400770664, -0.100207149982, 0.092431649566, 0.088817328215, -0.045034237206, 0.149741873145, -0.110159501433, -0.113914117217, -0.037858709693, 0.050761312246, 0.053850606084, -0.064034231007, -0.080032922328, 0.017860934138, 0.101685151458, 0.060688823462, -0.110463529825, 0.092450514436, 0.138856336474, 0.104616597295, 0.119483903050, 0.109558299184, -0.095114290714, -0.137096822262, 0.087032973766, 0.054560750723, -0.072246477008, 0.128587141633, -0.124249354005, -0.036554381251, -0.025635242462, 0.120174780488, -0.007743433118, 0.079302117229, -0.113430760801, -0.155457243323, -0.007839754224, -0.076001197100, 0.124965265393, -0.117736995220, 0.040615290403, 0.012283742428, -0.068739794195, 0.067229196429, 0.057009413838, -0.020380511880, 0.054812982678, -0.045070081949, -0.068734101951, -0.147868633270, -0.064789272845, -0.153692334890, -0.077945284545, 0.071793615818, -0.031003713608, -0.065637648106, 0.122616752982, 0.032206937671, -0.116264805198, -0.104968249798, 0.058851376176, -0.032174825668, 0.084631919861, 0.063442721963, -0.035479292274, 0.121453717351, 0.014722824097, -0.113188937306, -0.130907520652, -0.156729072332, 0.099545612931, -0.156493231654, -0.120889246464, -0.144285574555, -0.149890288711, -0.019467249513, -0.144594088197, -0.093728840351, -0.101542390883, 0.083276554942, -0.028604432940, -0.042874403298, 0.110876247287, 0.030617997050, -0.049989692867, 0.101163521409, -0.046747274697, -0.045711956918, -0.131142452359, -0.134516507387, -0.001768872142, 0.080699756742, -0.112154975533, -0.107013434172, 0.102587714791, 0.074996605515, -0.037116900086, -0.062731303275, -0.110500097275, 0.106913194060, -0.153706729412, 0.095537021756, 0.052793502808, -0.097074627876, -0.031878292561, -0.058963686228, -0.034565173090, -0.027286425233, 0.105408743024, 0.017902135849, 0.096046641469, 0.117221519351, -0.105044171214, 0.049755781889, 0.093622013927, -0.044687911868, 0.120467647910, -0.057348050177, -0.049821414053, -0.061685808003, -0.142346724868, -0.021327316761, -0.073857352138, -0.019700869918, -0.061447486281, 0.144686535001, 0.088013514876, 0.138809934258, 0.113364562392, 0.053910776973, 0.115859434009, 0.123400911689, 0.046416401863, -0.109975613654, -0.003238230944, -0.043200299144, 0.089156836271, 0.072586759925, -0.118065677583, 0.014678224921, -0.139792278409, 0.103788837790, 0.023153558373, 0.152422800660, -0.140721976757, -0.097642943263, -0.013774961233, 0.042140409350, -0.015685319901, 0.127100035548, -0.066809847951, 0.134395435452, 0.032099351287, 0.043161392212, 0.103460118175, -0.023111298680, -0.027461946011, -0.138909757137, -0.014824271202, 0.064131677151, 0.145320400596, -0.140441089869, -0.021030411124, -0.127547711134, -0.018578618765, 0.015301823616, -0.042171694338, -0.153945848346, 0.047672212124, -0.117251567543, -0.018719375134, -0.107494682074, -0.148150935769, 0.139243558049, 0.021029621363, -0.152933940291, 0.074173972011, -0.088621385396, 0.118294164538, -0.094354197383, -0.041491217911, -0.100171118975, 0.057029843330, -0.023325353861, -0.137259215117, -0.021606683731, 0.151805385947, -0.035851024091, 0.068196013570, 0.143347188830, 0.032709300518, 0.019804954529, 0.034114047885, -0.012397244573, 0.097555682063, -0.089099124074, 0.156069889665, -0.013519674540, -0.064309157431, 0.068957388401, -0.129464015365, 0.019628748298, 0.098178848624, 0.152134224772, 0.060258403420, 0.087460458279, 0.094314530492, 0.152573212981, 0.028276175261, 0.154092982411, 0.091665178537, -0.060220547020, -0.127711430192, 0.049697503448, -0.022431880236, 0.049932286143, 0.086692973971, 0.002769395709, 0.146472468972, 0.064194038510, 0.144218221307, 0.128930464387, -0.066205970943, 0.014138966799, -0.129406794906, 0.012753263116, -0.009458705783, 0.140074327588, -0.156989976764, -0.008692473173, -0.107687391341, 0.033262878656, 0.105546936393, 0.132343068719, -0.020863756537, -0.103449121118, 0.056320801377, 0.074124068022, 0.041189268231, -0.093048363924, -0.123419106007, 0.113577023149, 0.041026413441, -0.152238339186, -0.031233370304, 0.097560957074, -0.130053490400, 0.128080442548, -0.002901792526, 0.013136178255, -0.103616312146, 0.059908792377, 0.009504586458, 0.133600249887, 0.065484553576, 0.076551273465, 0.136374935508, -0.056779392064, 0.100683018565, -0.107983313501, 0.043177530169, -0.000770419836, 0.051983311772, 0.104497209191, -0.065898887813, 0.099561676383, 0.015984252095, -0.125503212214, -0.016088977456, 0.048716962337, 0.003564283252, -0.128759309649, -0.147542804480, 0.137954279780, -0.052949644625, -0.115651093423, 0.048231378198, -0.106607735157, -0.059541434050, 0.062530979514, 0.032178372145, -0.079530797899, 0.090918958187, 0.116785511374, -0.148313909769, 0.070788189769, -0.011073961854, 0.045729219913, 0.042755469680, 0.152631655335, 0.071944147348, 0.025550350547, -0.093806684017, -0.013150513172, 0.041949838400, -0.080385357141, -0.149046361446, 0.144761309028, -0.113570429385, 0.057006061077, -0.128551974893, -0.147297739983, 0.120712921023, -0.003382354975, 0.131825193763, 0.099122002721, 0.084294036031, -0.104267604649, -0.052442543209, 0.028512641788, -0.134622097015, -0.121252000332, 0.048277929425, -0.140183433890, 0.134003654122, 0.073301360011, 0.008719682693, 0.083075553179, 0.038118898869, -0.123914107680, 0.138314589858, 0.111167475581, -0.111623510718, -0.115926206112, 0.144106104970, -0.031908825040, 0.078895941377, -0.132147163153, -0.101113095880, 0.113836809993, -0.036549217999, -0.137725338340, -0.031865283847, -0.026685044169, -0.065047532320, -0.089447252452, 0.013003975153, 0.018244698644, -0.132584452629, -0.094813197851, -0.143190279603, 0.091419771314, 0.045680448413, 0.000714331865, -0.092420592904, -0.021497324109, -0.069688037038, -0.001267537475, -0.058348804712, -0.098611354828, 0.041710957885, 0.139184460044, -0.099484987557, -0.120642475784, -0.083398044109, 0.124463394284, -0.078209616244, -0.132401734591, 0.148462519050, -0.039828091860, 0.013615399599, 0.022798717022, 0.118768051267, -0.044443368912, 0.049988329411, 0.079429760575, 0.151434406638, 0.060104519129, 0.044930487871, -0.099176548421, -0.011458277702, -0.139731258154, -0.094390347600, 0.072068169713, 0.059759885073, -0.063244923949, -0.103681787848, 0.102477446198, -0.151146441698, -0.144280180335, -0.049861259758, -0.036428958178, 0.107544973493, -0.002775192261, -0.044454865158, -0.033338911831, -0.058810070157, 0.154822215438, 0.127340689301, -0.120079770684, 0.140029773116, 0.119537845254, -0.109773784876, 0.096181169152, -0.092667020857, -0.099459394813, 0.009695366025, 0.147427842021, 0.119421258569, 0.141105875373, 0.131790325046, -0.037145473063, -0.034901201725, -0.073296949267, 0.013508036733, 0.030009075999, -0.098160564899, 0.094326570630, -0.137534067035, -0.039184711874, 0.078898504376, 0.014955952764, -0.090308301151, 0.008275792003, 0.144782736897, 0.121912494302, 0.120841190219, 0.007035702467, -0.120861724019, 0.083697214723, -0.154166266322, 0.144120529294, -0.147082418203, 0.018811240792, 0.085692122579, -0.129358321428, 0.030996099114, 0.111269310117, 0.101345703006, -0.066307231784, 0.016462177038, 0.090896755457, 0.092942699790, 0.137783274055, 0.061576828361, 0.103940084577, -0.087091177702, -0.038431100547, -0.119436576962, -0.102869257331, 0.106829330325, 0.132975742221, -0.058204345405, -0.042569361627, -0.124317392707, -0.079164944589, -0.112146258354, 0.122421756387, 0.118563458323, -0.056384019554, 0.127606496215, 0.030098035932, -0.109382562339, -0.035574100912, 0.144213840365, -0.063234336674, -0.017159849405, 0.081294357777, 0.063119173050, -0.073562897742, 0.006220430136, -0.044358208776, -0.101231008768, 0.028081238270, 0.060610935092, 0.022044688463, -0.045720398426, -0.081526413560, 0.051480993629, 0.113094046712, 0.033396214247, -0.110647454858, 0.130644276738, 0.074946761131, 0.143736913800, 0.117844685912, -0.090776346624, 0.004515230656, 0.020325511694, -0.073845438659, 0.144821003079, -0.041650868952, -0.144488573074, -0.044981040061, -0.020503103733, 0.119943574071, -0.110194899142, 0.031869545579, -0.038152292371, -0.013634994626, 0.101849034429, -0.020033061504, 0.061598688364, 0.065596640110, -0.033029764891, 0.043649956584, -0.039022572339, -0.150941595435, 0.116583183408, -0.105951204896, 0.020672068000, 0.035094663501, -0.099968224764, -0.058395355940, 0.066407471895, -0.144981697202, -0.121232852340, -0.139420062304, -0.037870131433, 0.085523307323, 0.149942800403, 0.029701799154, -0.125890135765, -0.086553610861, 0.130475744605, -0.033226579428, 0.036501303315, 0.050349056721, 0.106601700187, -0.028991207480, -0.124283954501, 0.112133398652, 0.129462912679, 0.025005817413, -0.084559462965, -0.051526613533, 0.127587720752, 0.130535706878, 0.112729921937, 0.010297730565, 0.038893610239, 0.152388140559, -0.076602056623, -0.065632447600, -0.127912402153, -0.056626752019, 0.046976357698, 0.134594574571, 0.101246342063, -0.078431352973, -0.154384985566, 0.132037773728, -0.114781111479, -0.115907169878, -0.030848965049, -0.013614222407, -0.037805818021, 0.102494165301, 0.040118992329, -0.031264439225, -0.062648482621, 0.061537057161, -0.124308727682, 0.137140020728, -0.143903255463, -0.105588063598, -0.086383298039, -0.027244925499, -0.092502884567, -0.101168960333, 0.079044088721, 0.022734180093, 0.037213146687, 0.066388621926, -0.128155395389, -0.089877568185, -0.093875102699, 0.068324178457, 0.150598809123, 0.073921024799, -0.148426249623, -0.146315038204, 0.077075719833, -0.129691213369, 0.054462105036, -0.080514281988, -0.067227117717, 0.137494638562, -0.033104896545, 0.135191515088, -0.075998067856, 0.077427059412, -0.029778257012, 0.017020210624, 0.127740338445, -0.027697145939, 0.093376591802, 0.020969420671, -0.000668868423, 0.052194312215, -0.124670468271, -0.144411101937, 0.010721787810, 0.008020669222, -0.082608513534, 0.052685320377, -0.153790608048, 0.020028561354, -0.039489381015, 0.063376188278, -0.100194752216, -0.067356720567, -0.127889290452, -0.077794797719, -0.144773647189, 0.042312756181, -0.077288180590, 0.030567750335, 0.014794111252, -0.071685351431, -0.067539438605, 0.080571010709, 0.116930976510, 0.109093651175, -0.116933822632, 0.066417753696, 0.050392523408, -0.097933590412, 0.046127915382, -0.105122804642, -0.020975902677, 0.147109016776, 0.042136222124, -0.129057794809, -0.132735878229, -0.112590715289, -0.091554082930, -0.093944244087, 0.074882790446, -0.014869019389, 0.117322996259, 0.036106839776, -0.146244257689, 0.063170015812, 0.130398079753, 0.094095095992, 0.090299472213, 0.012472644448, -0.150888070464, 0.057987809181, 0.083013087511, -0.101286724210, 0.050996214151, 0.117694482207, -0.109395071864, -0.030445352197, -0.052089661360, 0.123954340816, -0.139828547835, -0.102453917265, -0.139168024063, -0.064912617207, 0.103957876563, 0.090144723654, 0.073286727071, 0.094795092940, -0.112902924418, 0.060468450189, 0.048485010862, 0.121667101979, 0.090606376529, 0.135965213180, 0.048382654786, 0.040728226304, -0.107292175293, -0.076905481517, 0.012940689921, 0.010032713413, 0.130424275994, -0.069753892720, 0.084327846766, 0.047324225307, 0.132502421737, 0.156750306487, -0.142789632082, 0.061774536967, -0.091766200960, -0.033524081111, 0.134945318103, 0.144389733672, -0.158022463322, 0.005618706346, -0.024389728904, 0.064567878842, -0.134347781539, 0.141972735524, -0.137029826641, 0.016532942653, 0.052254736423, -0.062210060656, -0.121317408979, -0.089008003473, -0.093611069024, 0.061300769448, 0.146066501737, 0.146796628833, -0.145193964243, -0.037161342800, 0.079592585564, 0.090555101633, 0.072269693017, 0.135191962123, 0.060810580850, 0.038815200329, 0.099594220519, 0.083206474781, -0.157041877508, -0.050363346934, 0.032514438033, -0.124191336334, 0.028994485736, -0.008975878358, 0.115716919303, -0.043933093548, -0.112919360399, -0.023684680462, 0.098334118724, 0.114030525088, 0.030676096678, 0.063445106149, 0.060620859265, 0.139196917415, -0.015602529049, -0.070259861648, 0.034869506955, -0.092424772680, 0.115882560611, 0.041674807668, 0.092427894473, -0.088234230876, 0.147216096520, 0.157264903188, -0.083331473172, -0.049812287092, 0.099065050483, -0.142379567027, 0.156844958663, 0.137525960803, -0.028620868921, -0.141435086727, -0.055490858853, 0.085328564048, -0.030214861035, 0.086338326335, -0.126822412014, -0.124037235975, -0.066290110350, -0.093889392912, -0.142386838794, -0.117287158966, 0.056524261832, 0.102050736547, 0.045345276594, -0.113497897983, -0.107807606459, 0.031277135015, -0.134961754084, 0.101095363498, 0.127719417214, -0.072315387428, 0.148927196860, 0.004197329283, -0.113004215062, 0.023433759809, 0.041165784001, 0.149743393064, -0.085751526058, -0.061737939715, -0.132219731808, 0.022451564670, 0.004189267755, 0.091924414039, -0.025652438402, -0.111825302243, 0.141969308257, 0.068334132433, -0.141383185983, -0.006090715528, 0.109414711595, 0.032225221395, 0.009653866291, -0.014936611056, -0.054892681539, -0.039043419063, 0.028503566980, -0.116319805384, 0.003366738558, -0.136928126216, -0.040464647114, 0.118597969413, -0.113842941821, -0.026945486665, -0.116385251284, 0.069653987885, -0.028013914824, -0.126413330436, 0.127024427056, 0.070757657290, -0.132395625114, -0.064275607467, -0.055213063955, -0.101741164923, 0.042506337166, 0.134533360600, 0.006387427449, 0.057744890451, -0.020563423634, 0.016997024417, 0.086023017764, -0.068428568542, -0.107770472765, -0.008308634162, -0.141406819224, -0.116037145257, -0.005706802011, -0.042527519166, 0.154891833663, 0.117248281837, -0.004337266088, -0.110856905580, 0.085680961609, -0.051827661693, -0.010413616896, 0.047615364194, 0.127976790071, -0.098383814096, 0.089694887400, -0.040853947401, -0.083307951689, 0.067136526108, 0.021508902311, 0.106920853257, -0.102553434670, -0.120882496238, 0.109883472323, 0.001655548811, -0.022884935141, 0.134940996766, 0.066285595298, -0.042507953942, 0.094730898738, -0.095240578055, -0.032118767500, -0.139612242579, -0.111721336842, -0.073570817709, -0.088459476829, -0.072666458786, -0.062802962959, 0.049634203315, -0.147370457649, 0.089263185859, -0.038625396788, 0.000655636191, 0.047771245241, -0.091399520636, 0.088002249599, 0.155755087733, 0.143125221133, -0.062355123460, 0.131959989667, -0.009792402387, 0.009202852845, 0.011156469584, 0.076723247766, 0.059854879975, 0.150601401925, -0.155815899372, 0.068623498082, -0.079161062837, -0.017789080739, -0.081723272800, 0.079329416156, 0.150737389922, 0.012374892831, 0.148669913411, 0.041825860739, 0.119992002845, -0.152163252234, 0.046618118882, 0.033997982740, -0.116427510977, -0.110416673124, 0.021259531379, 0.082384064794, -0.093073397875, -0.148563042283, 0.131243094802, -0.112637981772, 0.034082651138, 0.098177418113, 0.145564898849, 0.149426415563, -0.042280860245, 0.133892878890, 0.145917251706, 0.147468253970, 0.087551042438, 0.070255115628, 0.129185423255, 0.140251651406, 0.107544943690, 0.130164220929, -0.099662087858, 0.067545473576, 0.071424260736, 0.107997372746, 0.092425867915, -0.104015409946, 0.070637255907, -0.138554230332, 0.078369259834, -0.004367306828, 0.111797586083, 0.143138483167, -0.019254907966, 0.125898644328, 0.029034331441, -0.098996654153, -0.022431626916, 0.108015969396, 0.094060435891, -0.148975759745, 0.062504470348, 0.008083879948, -0.053930796683, 0.115739420056, -0.154239997268, -0.126295104623, -0.104798458517, -0.098772808909, -0.130850076675, 0.061832338572, 0.039245143533, 0.110817506909, -0.135436475277, -0.099028319120, -0.112175360322, -0.153316453099, -0.075487233698, 0.085493713617, 0.020466238260, -0.126032769680, 0.130968675017, 0.074402004480, -0.149630755186, 0.148074641824, 0.079521819949, -0.111364945769, -0.056628674269, 0.029005050659, 0.135193362832, 0.064963087440, -0.020433813334, -0.056326076388, 0.151043727994, 0.030958026648, -0.029985964298, -0.126797914505, -0.148663133383, 0.036961629987, 0.039382502437, -0.013146921992, -0.060943961143, -0.012364000082, 0.118540331721, 0.055253133178, -0.142032593489, -0.122426241636, -0.074473328888, -0.051346421242, 0.111909821630, -0.018882527947, -0.012806341052, 0.042251050472, -0.133328288794, 0.142433002591, 0.046351686120, 0.093682095408, -0.057020463049, 0.061933368444, 0.085741117597, -0.135951578617, -0.146594002843, -0.002646118402, 0.125723645091, -0.005854651332, 0.074765175581, 0.048508644104, -0.122267343104, -0.056108720601, 0.095633164048, -0.145532339811, -0.073539152741, -0.097962319851, 0.134202614427, 0.065263018012, -0.122981555760, -0.038468800485, -0.031980976462, -0.016459658742, -0.005548328161, -0.024230226874, 0.095290675759, -0.090548880398, 0.018807560205, -0.041364558041, 0.086948722601, -0.012424916029, -0.014594167471, 0.112804487348, -0.025923103094, 0.133260354400, -0.031474024057, 0.103836640716, -0.013430714607, 0.132523015141, -0.107624925673, 0.001152664423, 0.094933733344, -0.030660077929, 0.002524510026, 0.074229657650, -0.000312328339, 0.014533579350, 0.033853664994, 0.033194348216, 0.083054363728, -0.056870959699, -0.100924909115, 0.077704474330, -0.007444530725, 0.140315309167, 0.009909376502, -0.082473561168, -0.146870508790, -0.004036888480, 0.004631340504, -0.052067607641, 0.056483656168, -0.115641064942, -0.122066415846, 0.110276028514, -0.154122307897, 0.033104553819, -0.036160483956, -0.156547904015, -0.077232427895, -0.032320752740, 0.124919131398, 0.113906726241, 0.070806741714, 0.101633116603, 0.112780734897, -0.051782540977, -0.003897100687, -0.156689003110, -0.066205181181, -0.070372238755, -0.095692187548, 0.073433905840, 0.087709635496, 0.069606378675, 0.120480522513, -0.151849046350, 0.025454193354, 0.137086793780, -0.143762707710, 0.032823860645, -0.074017420411, 0.117911472917, -0.093157798052, -0.134915649891, 0.038041353226, -0.088732361794, -0.059319660068, 0.117208316922, 0.096460595727, 0.081094220281, 0.111191794276, 0.007121205330, -0.014100477099, 0.005681842566, 0.033242329955, 0.131020441651, 0.023104518652, 0.006710648537, -0.118144012988, 0.103925094008, 0.094301447272, 0.032559558749, 0.075221017003, 0.025163084269, 0.055886343122, 0.093150749803, 0.148528620601, -0.031001791358, 0.131216123700, 0.095547422767, 0.065916985273, -0.118174850941, -0.118532784283, 0.127765253186, -0.022770553827, 0.016904860735, 0.084865793586, -0.098710723221, -0.064010746777, 0.128613129258, 0.127892896533, 0.115510329604, -0.155006989837, 0.068846553564, 0.147252157331, -0.012873739004, 0.016602605581, -0.138614356518, 0.124201282859, -0.021920666099, -0.120711125433, 0.101566985250, 0.032132148743, -0.156421005726, 0.020269870758, 0.111236527562, -0.082024507225, 0.127743408084, 0.046271726489, 0.124217107892, -0.040004514158, -0.059765130281, 0.101243123412, 0.097228452563, -0.085988909006, 0.035271197557, 0.104186579585, 0.062297210097, 0.006997630000, 0.049828544259, -0.080885067582, 0.017756178975, 0.121572956443, 0.126664116979, -0.121113277972, -0.147599771619, -0.093719489872, 0.082788109779, -0.102140426636, 0.026556268334, -0.046101823449, -0.104144707322, -0.153686940670, 0.097201690078, 0.021310463548, -0.092744298279, 0.138788506389, -0.077268391848, -0.106354191899, -0.062245950103, -0.124762266874, -0.061805151403, 0.092395439744, -0.154004499316, -0.026655405760, -0.111978888512, 0.098141536117, -0.074535943568, 0.049344882369, 0.073045700788, -0.040399618447, -0.054533235729, 0.079966500401, 0.069231480360, -0.125294893980, -0.030348271132, -0.095838829875, -0.125546067953, -0.112768650055, 0.107461765409, 0.156975433230, 0.004793509841, -0.137717574835, 0.133113756776, -0.006122484803, -0.058393061161, -0.072067037225, -0.085086472332, 0.112915083766, -0.013149648905, -0.081783846021, -0.044605314732, 0.070846959949, -0.018387719989, -0.089415930212, -0.008005350828, -0.046037584543, -0.056985631585, 0.003796756268, 0.076861336827, 0.037331998348, 0.106839761138, -0.080600269139, 0.066603377461, 0.060132443905, 0.043371781707, 0.080999970436, 0.042660504580, -0.016667738557, 0.122856333852, -0.133791103959, 0.078855410218, 0.119795694947, 0.003136605024, -0.030291393399, -0.116173237562, -0.005458787084, 0.141653284431, -0.131096005440, -0.096906758845, -0.052607886493, -0.140241369605, -0.065470159054, 0.009800732136, -0.139591276646, -0.099034011364, 0.074419677258, 0.124443903565, -0.085385978222, -0.006568565965, -0.065241076052, -0.133066862822, 0.130049422383, -0.005891814828, -0.011466726661, 0.116083607078, 0.109741881490, 0.005738243461, -0.118714183569, -0.084124170244, -0.096791893244, -0.141787678003, -0.150330290198, 0.142659202218, -0.055932931602, 0.146498814225, -0.113010399044, -0.135581687093, -0.003282532096, 0.018449619412, -0.070051170886, 0.083752557635, -0.061257675290, -0.022211611271, -0.024725124240, 0.014392182231, 0.031109049916, -0.067979894578, 0.102777585387, 0.000201761723, -0.141010135412, 0.081952363253, 0.045437753201, 0.140727505088, -0.054660089314, 0.114863738418, 0.059331119061, -0.142717704177, -0.067347563803, 0.090153813362, -0.119406536222, 0.137071356177, 0.130672857165, -0.001552373171, 0.118403062224, -0.026187136769, -0.085353590548, -0.019660308957, -0.127923175693, 0.047473743558, 0.127919033170, 0.149168834090, 0.073121920228, 0.084903180599, -0.005830258131, -0.076828464866, -0.153354480863, 0.098211660981, -0.150770947337, -0.080615647137, 0.089338347316, -0.074305534363, 0.115341022611, 0.138105258346, -0.038735583425, 0.100230023265, -0.087167739868, 0.127323612571, -0.108372084796, -0.046181514859, -0.013554289937, 0.083254501224, -0.090748906136, 0.062979683280, -0.009329393506, 0.020672142506, 0.016441628337, -0.017183661461, 0.109726354480, 0.101522490382, 0.089135497808, 0.084495529532, 0.115130051970, -0.067061208189, 0.045606553555, -0.016892567277, 0.086293086410, -0.101748935878, 0.060085445642, -0.144110321999, 0.045676901937, -0.031086504459, -0.128796666861, -0.145916923881, -0.118877790868, 0.022953197360, 0.026546314359, -0.137875229120, 0.134650602937, -0.025881558657, -0.038562215865, 0.081244215369, -0.132820814848, 0.090277165174, 0.047267764807, 0.009994566441, 0.061456084251, 0.096709445119, -0.108645088971, 0.106184348464, 0.140353873372, -0.083732269704, -0.002438753843, 0.154145076871, 0.063867315650, -0.026802584529, -0.104950264096, -0.022466257215, -0.101362198591, -0.106027349830, -0.011985659599, -0.123270466924, -0.014217719436, -0.041638314724, 0.027247637510, 0.043501615524, 0.134953275323, 0.013956665993, 0.087978273630, -0.070522122085, -0.037646286190, 0.099824890494, 0.024596571922, -0.118178844452, 0.074961811304, -0.087735570967, 0.010158777237, 0.126677349210, -0.049552105367, -0.039270132780, 0.140303447843, 0.113426372409, 0.063895955682, 0.140523687005, 0.016637131572, -0.148790478706, -0.041728824377, -0.001488700509, 0.005073755980, -0.091162897646, 0.045384109020, 0.070503011346, -0.046808227897, -0.137093529105, -0.108268111944, 0.136062905192, -0.112431742251, -0.012089788914, -0.085361547768, 0.051409110427, 0.060489639640, -0.052958466113, 0.003450095654, 0.113996073604, 0.027329668403, 0.038631394506, -0.030288979411, -0.140820890665, -0.067323550582, -0.059905886650, 0.017595291138, 0.009450256824, 0.104523226619, -0.003196045756, -0.081049129367, 0.009755447507, 0.019483655691, -0.036834925413, -0.036612585187, 0.096675589681, -0.105905815959, 0.142196699977, -0.046099066734, -0.124507807195, 0.002291575074, -0.126786157489, 0.095579639077, 0.009902253747, -0.044852986932, 0.071592837572, -0.062391720712, 0.059988290071, -0.067359060049, 0.104159012437, -0.057408936322, 0.101298823953, 0.017339050770, 0.105667039752, 0.149716421962, 0.056630939245, 0.080559253693, 0.023344755173, 0.039448395371, -0.151346236467, 0.091597542167, -0.038628183305, 0.053869083524, 0.061307325959, 0.083873331547, 0.087283015251, 0.128414437175, 0.085597500205, -0.097162038088, 0.000803664327, -0.028254419565, 0.102355435491, 0.117198333144, -0.079726636410, -0.113296292722, 0.132987692952, -0.066724158823, -0.092113398015, 0.121117964387, 0.030651137233, 0.093408480287, 0.067488431931, 0.040868312120, -0.001055106521, -0.120668150485, -0.156704753637, 0.111007437110, 0.017811253667, -0.158010289073, -0.095950230956, 0.035836622119, -0.005626350641, 0.142238453031, 0.059243515134, 0.155749723315, 0.085975706577, 0.106317892671, -0.103780522943, 0.157646402717, 0.098550215364, -0.138246357441, 0.116574451327, -0.106891408563, 0.071152418852, -0.037525087595, 0.139022007585, 0.154481247067, 0.134292259812, 0.055544912815, -0.044881977141, 0.086424842477, 0.157693788409, 0.113625362515, 0.072934225202, 0.032165810466, -0.157902091742, 0.098048254848, -0.138242289424, -0.100406154990, -0.139743953943, 0.066557347775, 0.012609928846, 0.033148840070, -0.084758087993, 0.143561974168, 0.021331802011, -0.136017352343, -0.112174950540, 0.129036352038, -0.078340582550, -0.123750954866, -0.028257325292, -0.014785483479, 0.060588091612, 0.050970807672, 0.010422244668, -0.080270193517, 0.125040277839, -0.012896806002, -0.056674703956, 0.157912358642, -0.147261694074, 0.096653655171, 0.117556288838, 0.055767744780, -0.144839465618, -0.009032040834, -0.002746805549, -0.002114400268, -0.095064342022, -0.128744482994, 0.120958521962, -0.042596541345, -0.057706929743, 0.066369771957, -0.125136643648, -0.006714761257, -0.150778323412, 0.144592121243, -0.106257908046, -0.141611590981, -0.135321766138, -0.111448258162, 0.150127455592, 0.086700588465, 0.108864560723, -0.036659479141, 0.146267279983, 0.004259452224, -0.156339362264, -0.066427409649, 0.064825505018, 0.133419379592, -0.105495780706, -0.139329820871, -0.045713879168, -0.067662708461, -0.125474855304, -0.135123997927, 0.121237561107, -0.146906256676, -0.040039002895, 0.149014279246, -0.142095595598, -0.050414353609, 0.067581966519, -0.100241944194, 0.070159584284, 0.085288941860, -0.034484535456, 0.122542604804, 0.120326921344, 0.008401826024, -0.096617653966, 0.046346634626, -0.041077077389, 0.115333184600, -0.045371778309, -0.084843628109, -0.076607823372, -0.100044265389, 0.023896798491, 0.080110698938, -0.150096386671, 0.086864799261, -0.013819441199, -0.054605610669, 0.154270485044, 0.037296295166, 0.025115370750, -0.066484026611, -0.057606808841, 0.127892240882, 0.023542404175, -0.004169553518, 0.033924922347, 0.151092246175, 0.109154298902, 0.148273333907, -0.053871609271, -0.020445272326, -0.011387363076, 0.153785869479, -0.080183185637, -0.127107903361, -0.061238110065, 0.061465203762, -0.030376359820, -0.078758038580, -0.006843522191, 0.015748381615, 0.083523988724, -0.156020671129, 0.089482620358, 0.102229490876, -0.028896212578, -0.125227749348, 0.039585009217, -0.147191852331, 0.085721597075, 0.107552126050, -0.127857282758, 0.141104683280, -0.033653646708, 0.154015704989, 0.157598301768, -0.007127687335, 0.047122582793, -0.015731185675, -0.080191969872, -0.024976417422, -0.074484370649, -0.046624720097, -0.052896723151, 0.013575851917, 0.151633873582, -0.147361367941, 0.107225283980, -0.119694054127, 0.090433493257, 0.070463165641, 0.042778387666, 0.076139777899, 0.005771636963, -0.137690246105, 0.147567316890, -0.152888551354, -0.089768320322, 0.076151162386, 0.071131154895, -0.101241573691, 0.096882358193, 0.066037237644, -0.033363416791, -0.022790461779, -0.086804151535, 0.142118588090, 0.077211201191, -0.067885160446, -0.151346653700, -0.039501026273, -0.126602947712, 0.099499359727, -0.136747241020, -0.151708811522, -0.157508984208, 0.041030108929, -0.088618628681, 0.044754862785, -0.053398355842, 0.013812437654, -0.103163376451, 0.123836651444, -0.143711894751, -0.097300693393, -0.050537399948, 0.006452500820, 0.032488688827, -0.069464601576, 0.154570445418, 0.097331896424, 0.097118601203, -0.074562668800, -0.090245418251, -0.012198314071, -0.078371450305, 0.146927639842, -0.115172982216, -0.155431538820, 0.114164963365, -0.094076894224, -0.126338690519, -0.089415661991, 0.039757475257, 0.066972240806, 0.142993077636, -0.019297093153, -0.079204827547, -0.113243177533, -0.039243213832, 0.044338688254, -0.062426783144, 0.053488045931, 0.150212630630, 0.100502774119, 0.034330725670, -0.073816075921, 0.045579031110, -0.038947783411, -0.074825875461, -0.115698963404, 0.003022462130, 0.020727589726, 0.131507888436, 0.138334706426, 0.039636358619, -0.131679832935, -0.134597033262, 0.071475297213, -0.113011792302, -0.098339363933, 0.118128255010, -0.043960653245, -0.152063846588, -0.108523815870, 0.049922063947, -0.066172495484, -0.090084336698, 0.126026794314, -0.066304661334, 0.093694373965, 0.060644298792, -0.015194684267, 0.000046893954, -0.013860017061, 0.126527085900, 0.048551648855, -0.016437485814, 0.067178755999, 0.048144072294, 0.098625943065, 0.002178862691, -0.009536474943, -0.094047226012, 0.027219519019, -0.134238868952, -0.060875654221, 0.124731227756, 0.019743502140, -0.007934108377, -0.066189765930, 0.024949610233, -0.028028085828, -0.143089324236, 0.121285781264, -0.149241223931, 0.044646024704, -0.059343971312, -0.146237686276, 0.084695279598, 0.102239534259, -0.112296789885, 0.062126338482, 0.047346174717, -0.122842416167, 0.000479921699, -0.049586221576, -0.052209421992, -0.033447712660, -0.092741549015, 0.108697339892, 0.098399564624, 0.023109197617, -0.066735468805, 0.054398655891, 0.030586481094, 0.139121606946, 0.116198614240, -0.091592572629, 0.109871998429, -0.075485423207, 0.012154176831, -0.130547061563, -0.056383118033, -0.055923774838, 0.025825545192, -0.001374140382, 0.055288657546, -0.153801128268, 0.132984742522, 0.025037705898, 0.000358581543, -0.080615237355, -0.135151892900, -0.120706558228, 0.007289454341, 0.005813941360, -0.085001014173, 0.103609248996, -0.042125999928, 0.106511726975, 0.044943943620, 0.090933620930, -0.131416514516, 0.104043826461, -0.048203408718, 0.106489643455, -0.096998319030, 0.038843169808, -0.060730181634, -0.053487397730, 0.144764319062, -0.017601847649, -0.089946858585, 0.107152804732, 0.028705358505, -0.126459956169, 0.086454465985, -0.000732690096, -0.096667945385, 0.032118082047, -0.093833714724, -0.001290410757, -0.088324368000, -0.086773991585, -0.099599212408, -0.019183173776, 0.075410708785, -0.155080273747, -0.126945987344, -0.011651813984, -0.088543310761, 0.112697616220, -0.045946769416, 0.123102143407, 0.138933852315, -0.071631029248, -0.014205425978, -0.107041180134, -0.042401269078, 0.117303624749, 0.123595193028, 0.133962348104, 0.149735137820, 0.128120377660, -0.047496505082, 0.156870976090, 0.135671302676, 0.153165444732, 0.152275666595, -0.067907892168, -0.038122475147, 0.035126030445, -0.149966374040, 0.056623101234, 0.020527794957, -0.084325514734, 0.082749620080, 0.085608422756, 0.004947960377, -0.006787389517, 0.043185636401, -0.008414000273, -0.155867129564, 0.085734143853, -0.069788344204, -0.074814185500, 0.114397421479, 0.062677130103, -0.022632211447, -0.082312665880, 0.147526785731, -0.138574630022, 0.148480728269, 0.083135366440, 0.043751657009, 0.149515464902, 0.033601254225, -0.004223495722, 0.079506292939, 0.072953298688, -0.038477547467, -0.046989589930, 0.155827715993, -0.121416702867, -0.035882614553, 0.078357085586, -0.037398912013, 0.008783802390, 0.089029386640, 0.084016621113, 0.031663686037, 0.123413071036, -0.128749549389, -0.040221199393, 0.006967663765, 0.015372499824, 0.025683388114, 0.007098317146, -0.042559899390, -0.123335078359, -0.152120500803, -0.118243381381, -0.058702513576, 0.112428769469, 0.009066760540, -0.154018491507, -0.062382452190, 0.021785229445, 0.098109111190, 0.029402673244, 0.126173868775, -0.058786697686, 0.091797649860, -0.153765052557, -0.027966186404, 0.028710097075, -0.104255691171, -0.075333878398, 0.024505391717, 0.051964506507, 0.075443997979, -0.026121765375, -0.062536671758, 0.067217960954, 0.146267786622, 0.001923993230, -0.016183033586, 0.076740890741, 0.127406075597, 0.139902099967, -0.123741462827, 0.060158982873, 0.049413755536, -0.019814819098, 0.143398419023, 0.138676330447, 0.116784647107, -0.105695240200, 0.135552808642, 0.044832095504, 0.095182523131, -0.153152391315, -0.154676496983, -0.057524137199, 0.155302330852, -0.022716760635, 0.029190033674, -0.058536194265, -0.152808144689, -0.089418604970, -0.044172435999, 0.098371222615, -0.116002544761, -0.087203212082, -0.115097545087, 0.105564102530, 0.006982058287, -0.029393523932, 0.069579198956, -0.125220283866, 0.003324404359, 0.044872671366, -0.157971054316, 0.073175638914, 0.075981482863, -0.107610002160, 0.081414490938, -0.058323696256, -0.042091622949, 0.042207837105, 0.073429569602, -0.106038056314, -0.031082049012, 0.152230396867, -0.083036191761, -0.099595934153, 0.138683542609, 0.098121657968, -0.013951167464, 0.016742497683, 0.091167867184, -0.018801867962, -0.147641807795, -0.135573238134, -0.141339376569, -0.126288205385, -0.064538888633, -0.142299905419, 0.130878642201, 0.136497154832, 0.095963820815, -0.074323065579, 0.140070214868, -0.006348937750, 0.101199701428, -0.144853144884, -0.087867774069, 0.117269501090, 0.148341849446, 0.064926370978, -0.033763803542, 0.024380564690, 0.146027460694, -0.066934324801, -0.098352566361, 0.059851005673, 0.033566340804, 0.062701746821, 0.056975901127, 0.040900722146, -0.046848528087, 0.083454713225, -0.057651028037, -0.096461519599, 0.031777650118, 0.092782631516, -0.034769751132, -0.112618833780, -0.027895465493, -0.028500124812, -0.102873593569, 0.118752077222, -0.047336407006, 0.118789240718, -0.089597858489, 0.153959527612, 0.023447975516, 0.013166382909, -0.095338627696, 0.009936064482, -0.151220589876, 0.131064280868, 0.143209084868, 0.041192874312, -0.032735347748, 0.020240426064, -0.101224154234, 0.114069476724, 0.142760142684, 0.096323743463, 0.013479262590, 0.097972109914, -0.112470835447, -0.031391441822, -0.059301115572, 0.008891463280, -0.018776074052, 0.060818538070, -0.002488210797, 0.128858134151, -0.016833767295, 0.054646104574, -0.134995877743, 0.014025911689, -0.091315612197, -0.005305483937, -0.030098527670, 0.084931612015, 0.040411308408, 0.099334612489, -0.044443368912, 0.146021679044, -0.087019063532, 0.087156161666, -0.019636139274, 0.055862218142, 0.108861520886, -0.090013206005, 0.118256226182, 0.109389767051, -0.155019015074, 0.062237426639, -0.040124274790, -0.088845565915, 0.086247026920, -0.155223786831, 0.018310621381, -0.011147320271, 0.131272748113, 0.101004555821, 0.127523288131, 0.062072426081, -0.033823214471, -0.122713908553, -0.004390716553, -0.071685276926, -0.024490877986, -0.108971059322, -0.066884636879, 0.057972058654, 0.045619517565, 0.088619157672, 0.118103489280, -0.000438570976, 0.009835407138, 0.105293229222, 0.120933398604, -0.134698808193, -0.064470991492, -0.143850967288, -0.149461492896, 0.137672290206, -0.002108931541, -0.065353937447, 0.055076524615, -0.016377404332, -0.156454563141, -0.026608183980, -0.111276656389, -0.026903882623, 0.062559708953, 0.052961781621, 0.139072731137, 0.135878488421, 0.110267892480, 0.043601781130, 0.112421914935, -0.136925175786, -0.096752800047, 0.007990360260, 0.140325888991, -0.136554509401, -0.063630267978, -0.117512509227, 0.017163991928, -0.005767300725, -0.040625348687, 0.033946827054, 0.054432734847, -0.004992216825, -0.134042769670, 0.086624592543, 0.050398260355, 0.028417840600, 0.011104151607, 0.074519500136, -0.056975714862, 0.150026306510, -0.068065993488, -0.120759636164, 0.117020264268, -0.152989193797, 0.021561980247, 0.153363242745, 0.109817728400, -0.064409248531, 0.042359575629, 0.088386833668, -0.073600180447, 0.067329123616, 0.116002097726, 0.102180674672, 0.105438396335, -0.017491504550, -0.008531719446, 0.142670735717, -0.131999656558, 0.035886272788, -0.059804901481, -0.111790508032, 0.098548248410, 0.111824616790, 0.041519373655, 0.141168281436, 0.044714108109, -0.042003482580, 0.001948833466, 0.098687991500, -0.062690623105, -0.043328694999, -0.080385282636, -0.012950226665, 0.150224074721, 0.124827012420, -0.001899227500, -0.034969545901, -0.133999228477, 0.100927874446, 0.092759683728, -0.016976639628, 0.144693568349, -0.062563210726, 0.106685295701, 0.157938256860, -0.045096851885, -0.076633498073, 0.026374682784, -0.000656425953, 0.131302252412, -0.007482796907, -0.096046768129, -0.149515539408, -0.026938140392, 0.132358297706, -0.062746077776, 0.067626595497, 0.069981738925, 0.157684162259, -0.086838640273, 0.130109742284, 0.078860685229, 0.061424598098, -0.113848522305, -0.065082371235, -0.109681010246, -0.122608579695, 0.065586715937, 0.066746219993, -0.024144694209, 0.041169285774, -0.108406312764, 0.028184682131, -0.004349663854, 0.128239735961, 0.061764776707, 0.001916110516, 0.060302317142, 0.018573492765, -0.080070883036, 0.028639301658, 0.130834057927, -0.084952458739, 0.012310206890, 0.020162209868, 0.080886274576, -0.081718824804, -0.009683787823, 0.060303255916, -0.024311885238, -0.007334753871, 0.033518776298, -0.127201125026, -0.088120572269, -0.125027313828, -0.141040146351, 0.041335836053, 0.135402157903, 0.078150138259, -0.050739869475, -0.049176566303, 0.029198467731, 0.004111975431, -0.062830708921, -0.039072975516, -0.106092080474, 0.091998085380, -0.108347699046, -0.028920903802, 0.011232927442, -0.030061438680, 0.146466597915, -0.137046113610, -0.013664707541, 0.151350602508, 0.030298665166, -0.048431366682, -0.118189170957, -0.074687331915, -0.147740602493, -0.025059238076, -0.084680736065, -0.060146138072, -0.154485523701, 0.060136452317, 0.146202042699, -0.007223471999, -0.077502794564, 0.067199066281, 0.025183141232, -0.094270318747, 0.118772760034, -0.110387980938, 0.132960781455, 0.092206999660, -0.018198370934, -0.098274305463, 0.037634864450, 0.118680760264, -0.125321581960, 0.123569861054, -0.051501505077, -0.039381109178, -0.130707696080, -0.041176594794, 0.099004760385, -0.012446433306, 0.145455136895, -0.029988601804, 0.066997051239, 0.137882664800, 0.056943371892, -0.092400684953, -0.074890032411, -0.007124409080, 0.143586471677, 0.118704482913, 0.050324261189, -0.131003275514, 0.118973508477, 0.011001765728, -0.004652976990, 0.044934257865, 0.107691124082, -0.134714081883, 0.122693732381, 0.126440897584, -0.037808157504, -0.047898434103, -0.107858493924, -0.142317399383, 0.070893436670, 0.090579077601, -0.153531402349, -0.152559041977, 0.151531830430, 0.039277330041, 0.134580418468, -0.035292916000, -0.157127112150, -0.054697558284, 0.027526035905, -0.137478455901, -0.131874158978, 0.008105367422, 0.062260463834, -0.021687999368, 0.053230568767, -0.096413977444, 0.067904204130, 0.090562000871, 0.113715812564, 0.000704064965, -0.090822719038, 0.031659081578, -0.005036816001, 0.122414842248, -0.042115107179, 0.099066063762, -0.041258320212, -0.091059647501, 0.122205570340, 0.063264712691, -0.045118711889, -0.002172648907, -0.010071247816, 0.046376138926, -0.058898091316, 0.008702456951, -0.138989150524, -0.090849064291, 0.035712301731, -0.139589741826, 0.013218820095, -0.109080456197, -0.048636175692, -0.034037217498, 0.029433816671, 0.026258453727, 0.065173372626, -0.121294036508, 0.020989552140, -0.027640745044, 0.029758393764, -0.022943511605, -0.070999711752, -0.131233230233, 0.053211376071, -0.029279664159, 0.099509611726, -0.113341569901, -0.050111949444, -0.025926455855, 0.026209414005, 0.046504199505, -0.041351661086, -0.148491531610, -0.129033699632, -0.091853097081, 0.046505600214, -0.001825571060, 0.007633969188, 0.010113924742, 0.060405269265, -0.142530351877, 0.011419072747, -0.050363384187, -0.115017548203, -0.062693908811, 0.099864855409, -0.082464702427, 0.067498609424, -0.141557604074, 0.040667191148, 0.081370532513, -0.034931965172, -0.117014080286, -0.148823276162, -0.138426885009, 0.040063127875, 0.007419615984, 0.103607758880, 0.097716167569, -0.093673646450, 0.007580995560, 0.127096280456, 0.035741969943, 0.142831668258, -0.070683807135, 0.000940322876, 0.136368378997, -0.130485609174, -0.009459033608, -0.012666821480, 0.158050671220, 0.049222022295, 0.020476713777, 0.058782696724, 0.020499140024, 0.125526115298, 0.107691660523, -0.100290089846, 0.052247762680, -0.025828182697, 0.124685212970, 0.096385225654, 0.047577440739, 0.020426958799, -0.051923416555, -0.011188849807, 0.119738385081, -0.089233249426, 0.098742440343, -0.115589834750, -0.053621150553, 0.125138834119, 0.119439467788, -0.124810062349, -0.134296283126, -0.071613349020, 0.005492761731, -0.016165122390, 0.143864378333, -0.060892239213, 0.075676023960, 0.095968022943, 0.154566183686, 0.093047454953, 0.138533279300, 0.129407986999, -0.135690256953, -0.050804935396, -0.092038907111, -0.041694633663, 0.035463124514, 0.107824161649, -0.070370018482, -0.100076496601, -0.010806724429, 0.072182655334, -0.081208102405, 0.119447365403, 0.119116559625, -0.061522312462, 0.023140519857, -0.114365354180, 0.152283504605, 0.136176541448, 0.129567131400, 0.100494787097, -0.111334756017, 0.050299495459, -0.082399487495, -0.077566161752, -0.056200206280, -0.070434443653, 0.044083848596, -0.112035393715, 0.062953487039, 0.058792129159, -0.110170587897, 0.036325857043, 0.013292208314, -0.015304192901, 0.070029273629, -0.146773785353, 0.052712306380, -0.076415792108, -0.129474118352, -0.023933857679, 0.029520705342, -0.019512146711, -0.112226933241, 0.017913937569, -0.113064497709, -0.040151946247, 0.092893615365, 0.065489232540, -0.026395753026, -0.155798584223, -0.116891518235, 0.123270943761, 0.133787080646, 0.044919937849, 0.000199720263, -0.048651061952, 0.006527319551, -0.131931126118, 0.040153682232, 0.052426710725, 0.044579491019, -0.096458464861, 0.002659097314, -0.104838147759, -0.075176268816, -0.036095000803, -0.103226594627, -0.056396007538, 0.126512572169, 0.015104994178, 0.059802070260, -0.139507666230, 0.123565122485, 0.153831496835, -0.143088161945, -0.069626025856, -0.017738491297, 0.108570411801, 0.109793201089, 0.110628709197, -0.078891754150, 0.157670274377, -0.126484468579, 0.029332190752, -0.073037512600, -0.084934853017, -0.131941065192, -0.024812579155, 0.008475676179, 0.059073686600, 0.106402918696, 0.015625864267, 0.080231368542, 0.081670075655, 0.075480982661, 0.113089010119, 0.012575060129, 0.124118044972, -0.132700741291, -0.096087031066, 0.012055069208, -0.073635771871, -0.112580344081, -0.062258347869, -0.138055384159, 0.000168994069, -0.053978368640, -0.152452737093, -0.075694188476, 0.012138679624, 0.012308314443, -0.062645956874, -0.129024237394, -0.087823972106, 0.055881589651, -0.149309039116, 0.086242720485, 0.070247769356, 0.053640529513, -0.010911181569, -0.140507966280, -0.144282221794, 0.076487198472, 0.149725869298, 0.029841884971, 0.093146994710, -0.018748551607, -0.096246980131, 0.097377792001, 0.153530642390, 0.046613261104, 0.104622527957, 0.123928025365, -0.111504502594, 0.041899472475, 0.155421867967, -0.009018808603, 0.127368137240, -0.046332865953, 0.146771445870, 0.033370688558, 0.089141637087, 0.008677914739, 0.119525477290, -0.149713382125, 0.120317593217, 0.101665392518, 0.031569749117, -0.093717940152, 0.133054092526, -0.037496551871, -0.156757339835, -0.147133499384, -0.095044665039, -0.021732404828, 0.040124237537, -0.098337635398, 0.026745840907, 0.033105641603, 0.118430092931, -0.094270922244, 0.138763800263, 0.069209277630, -0.001297846437, 0.000881209970, -0.089238755405, 0.020999982953, -0.029208049178, 0.021296739578, 0.032054111362, -0.024285465479, 0.022788047791, -0.078961603343, 0.113802716136, 0.078691884875, 0.019605755806, -0.126048088074, -0.039213396609, 0.026854723692, 0.042040541768, -0.103246159852, -0.139784634113, 0.134355172515, -0.038717679679, -0.072674751282, -0.078119710088, -0.105993084610, 0.093911513686, -0.143844813108, 0.089658737183, 0.129705294967, -0.064498245716, -0.079827398062, 0.113690957427, -0.134903177619, 0.120784029365, -0.141085639596, -0.024698585272, 0.048097059131, -0.134338319302, 0.013603210449, 0.033490002155, -0.138230860233, 0.055095076561, 0.039896816015, 0.112714692950, -0.106579579413, 0.013703033328, 0.086560845375, -0.088894277811, 0.078348413110, -0.108249187469, -0.065550565720, 0.043288439512, -0.088044159114, -0.040520623326, -0.066492959857, 0.022916853428, 0.137212738395, 0.123439088464, -0.019092395902, -0.101547628641, -0.001496776938, -0.138950914145, -0.005533814430, -0.134001195431, 0.100828513503, 0.135070994496, -0.105055212975, 0.051784083247, 0.101331695914, -0.063594266772, -0.088288024068, 0.068637147546, 0.090167120099, -0.061109296978, 0.003933221102, 0.119549855590, 0.069459810853, -0.106304958463, 0.051120504737, 0.015381366014, 0.111402973533, -0.053156375885, -0.130079120398, -0.116024404764, 0.083966225386, 0.041651889682, 0.037929803133, 0.075277790427, -0.050599746406, 0.125603243709, -0.069403722882, -0.022323653102, 0.053742155433, 0.139116927981, 0.053418293595, -0.141484707594, 0.068754002452, 0.150341615081, -0.064007543027, -0.028785914183, 0.154544219375, 0.039976611733, 0.134739294648, 0.106274411082, -0.001679420471, 0.062426254153, -0.090125955641, 0.146119400859, -0.085887610912, -0.133466422558, -0.091576211154, 0.031265228987, -0.018209680915, 0.137624874711, -0.090626165271, -0.027289927006, -0.100569084287, -0.139015376568, 0.041070058942, -0.045898146927, 0.149448260665, -0.122089639306, 0.055972859263, -0.116080880165, -0.129470050335, 0.031995162368, 0.106381520629, -0.092602595687, 0.086929380894, -0.142546296120, 0.055643036962, 0.086660936475, 0.112409994006, 0.033044844866, -0.009079888463, -0.040123485029, -0.099142469466, -0.015518054366, -0.098886355758, 0.078727886081, -0.086129784584, 0.093699082732, -0.124535515904, -0.079124830663, 0.144739404321, 0.095167890191, 0.083765968680, -0.064445845783, 0.094268128276, 0.127109929919, 0.104226544499, -0.069023735821, -0.008506655693, 0.066984459758, -0.073020361364, -0.076940990984, 0.031594216824, 0.068741649389, -0.157555505633, -0.100509375334, -0.017590314150, 0.089531093836, 0.068906724453, 0.137534901500, 0.026960045099, -0.133705720305, -0.015230879188, -0.103353932500, -0.134172335267, 0.002100422978, -0.084226295352, 0.155855163932, -0.023259148002, -0.112562850118, 0.032989203930, 0.095579817891, 0.104975685477, -0.038412176073, -0.123235896230, 0.077758416533, -0.033170260489, 0.022568345070, -0.075659133494, -0.147063672543, 0.106887266040, 0.076661989093, -0.062986738980, 0.088382303715, 0.010278925300, -0.143218070269, 0.000631049275, -0.120146192610, 0.072730690241, 0.100246354938, -0.101561956108, 0.020055830479, -0.075652986765, -0.069373145700, 0.149846151471, 0.080638602376, 0.146394386888, 0.036983519793, -0.020209595561, -0.027029976249, -0.126461282372, 0.129934623837, 0.114193633199, -0.073417842388, -0.004587426782, 0.097268357873, -0.041012540460, -0.032373115420, 0.153063848615, -0.042260207236, -0.026342153549, 0.130942210555, -0.115630961955, -0.001661017537, 0.019765213132, -0.108837909997, -0.117528676987, -0.005519449711, -0.117360442877, 0.069418981671, 0.066940963268, 0.154464945197, -0.085208989680, -0.122757479548, -0.007492259145, -0.028202623129, 0.018308892846, 0.155037358403, -0.026162788272, 0.013309359550, 0.104289785028, -0.137647002935, 0.125402197242, 0.041646867990, -0.066344700754, 0.048849433661, 0.019227042794, 0.095823988318, 0.038740828633, -0.144281804562, -0.045839488506, -0.049149267375, -0.057972736657, 0.077686876059, 0.095429554582, -0.070418305695, 0.056570887566, -0.140540048480, -0.017891362309, -0.103709951043, 0.152332291007, -0.072883784771, 0.044171229005, 0.069438472390, 0.090895771980, -0.004643782973, -0.106359168887, 0.033503055573, -0.150970205665, -0.002900809050, 0.071953564882, 0.025674298406, -0.018029183149, 0.091984853148, -0.009508997202, -0.046723149717, 0.117739602923, -0.070224016905, 0.011545017362, -0.145719051361, -0.125153183937, -0.071072354913, -0.051425285637, 0.075447350740, 0.012329086661, 0.056483998895, -0.150004938245, 0.072124555707, 0.106956407428, 0.125858947635, -0.082878202200, -0.080487214029, -0.040141619742, 0.043255448341, -0.006435081363, 0.094174429774, -0.115719586611, -0.116396255791, 0.095141842961, -0.141040936112, 0.127205982804, 0.111745014787, 0.081130176783, -0.047647409141, 0.054705023766, -0.070824079216, -0.052429273725, -0.072632759809, -0.154945835471, 0.107047811151, -0.083191581070, -0.030495747924, -0.104999154806, 0.039710357785, -0.064860291779, 0.043049931526, 0.152248308063, 0.041679590940, 0.002055898309, -0.019232019782, 0.071355760098, -0.091415092349, -0.059877693653, 0.002031996846, -0.064982242882, 0.014821290970, -0.065136462450, 0.049996927381, 0.008943647146, 0.044817820191, 0.136613383889, -0.146298795938, -0.014851406217, 0.058325499296, 0.056448251009, 0.132592901587, 0.136923596263, 0.155467972159, -0.096247926354, -0.134637251496, 0.086337834597, 0.068103387952, -0.012696251273, -0.053294010460, -0.075424276292, -0.143129467964, 0.027883514762, -0.131126776338, -0.047408826649, 0.069151639938, -0.151624411345, 0.117066666484, 0.013142853975, 0.074977189302, -0.147560149431, 0.154736205935, 0.078135386109, 0.006884172559, -0.126227363944, -0.001184329391, 0.101992353797, -0.060937322676, -0.143156543374, -0.101204961538, 0.128362134099, 0.018493875861, -0.095288336277, 0.143029913306, 0.057194128633, -0.115865141153, 0.027539223433, -0.075983673334, -0.149682775140, -0.035330049694, -0.120394766331, 0.114920958877, 0.114261224866, -0.002198725939, -0.095423936844, 0.071873158216, -0.023695766926, -0.068494200706, -0.151696830988, 0.145106270909, 0.012876674533, -0.155952274799, -0.148073583841, -0.002638325095, 0.034591063857, -0.007728815079, 0.005519375205, -0.139945670962, -0.119654163718, -0.093281708658, -0.140042215586, 0.041289880872, -0.085583433509, 0.049930050969, 0.003242984414, 0.110095873475, 0.075006932020, 0.035362988710, -0.006875723600, -0.044998720288, -0.128757238388, 0.147363588214, -0.054711245000, -0.145673856139, 0.108406320214, -0.104984641075, -0.065054737031, 0.129338815808, -0.107877723873, -0.093100875616, 0.069753021002, -0.044171154499, -0.040980949998, -0.042584888637, -0.019124478102, 0.104424729943, -0.101090699434, 0.086434260011, 0.091918125749, 0.015024587512, 0.097364589572, -0.153718382120, -0.082933582366, -0.061522535980, 0.019954085350, 0.034565433860, -0.113142788410, -0.143540561199, -0.118829727173, -0.071979127824, 0.061936527491, -0.051457285881, 0.023512244225, -0.085975296795, 0.035831645131, -0.137781053782, -0.064797714353, 0.147372946143, -0.152837097645, -0.131110265851, 0.001928374171, 0.137543275952, -0.142626434565, -0.023385733366, -0.002355709672, -0.016246661544, 0.078763246536, -0.125455558300, -0.082677654922, -0.071125358343, -0.033637173474, 0.032369196415, 0.151314660907, 0.031927451491, 0.079213276505, -0.119334489107, -0.108250960708, 0.016841262579, 0.126361593604, 0.073165714741, -0.105664476752, -0.074395254254, -0.068354681134, 0.089363038540, 0.025050491095, 0.029674023390, -0.110859319568, 0.096090719104, -0.026320099831, -0.109295591712, 0.080935060978, -0.060335412621, 0.040362253785, 0.006575465202, 0.067014127970, 0.041433498263, 0.150858774781, 0.014686971903, 0.140755519271, -0.020335838199, -0.085813648999, 0.059088304639, 0.038170307875, -0.078862875700, -0.134149193764, -0.054135866463, -0.059816770256, -0.111377879977, 0.147222712636, -0.016784042120, 0.062185332179, -0.046449653804, 0.051457807422, -0.116236306727, -0.010090842843, -0.121373876929, -0.129052549601, 0.143907859921, 0.062770277262, 0.126529857516, 0.006222233176, 0.122266933322, 0.118999108672, -0.140522554517, 0.127535417676, -0.022004693747, 0.080762296915, -0.096081823111, -0.014029756188, 0.106058940291, -0.021028608084, -0.024919450283, 0.113403454423, 0.089912027121, 0.007093653083, 0.124762400985, -0.154317229986, 0.059717208147, 0.012457519770, -0.093301765621, -0.051975019276, 0.050789177418, 0.057900056243, -0.015702471137, -0.143536597490, 0.085710808635, 0.061975508928, -0.049534611404, 0.096357330680, 0.083470463753, -0.001330226660, -0.146250575781, 0.100468561053, -0.099950581789, 0.124610528350, 0.099521473050, -0.027534618974, 0.144340202212, 0.130355283618, 0.007694691420, 0.124692961574, 0.075764685869, 0.037569001317, -0.081543758512, 0.113521084189, -0.084038257599, 0.064868360758, 0.091192945838, -0.116088941693, -0.150182902813, 0.066727891564, -0.015262380242, -0.081652961671, -0.119297668338, 0.093340411782, 0.082390919328, -0.152329802513, -0.065238624811, 0.152567103505, 0.147914305329, -0.039396040142, -0.089566677809, -0.036361031234, -0.024797052145, -0.049811802804, 0.114270552993, -0.009558826685, -0.074099332094, 0.012914419174, -0.150906085968, 0.051526427269, 0.034478321671, -0.055580839515, 0.073356285691, -0.053053691983, -0.080158568919, 0.067156925797, 0.152656927705, 0.132539764047, -0.048882484436, -0.110905870795, 0.055438384414, 0.135129019618, 0.055004492402, 0.106928423047, -0.110506772995, 0.142755165696, 0.153667137027, 0.012110710144, 0.134151712060, 0.143192932010, -0.115905582905, 0.090506330132, -0.123059660196, 0.066998898983, 0.043010875583, -0.119324386120, 0.017799302936, -0.154683277011, 0.157130464911, -0.136827617884, -0.070105947554, -0.080448612571, 0.155662134290, 0.116743847728, 0.117702201009, -0.112200394273, 0.007530942559, 0.025585606694, 0.150370910764, -0.017815172672, -0.031716495752, -0.132851764560, 0.126174584031, -0.073834210634, 0.095212236047, -0.103884860873, 0.015312448144, 0.075495943427, 0.111806675792, -0.024503007531, 0.026263698936, -0.110176771879, -0.012243211269, 0.041022792459, 0.096382811666, 0.071595788002, -0.026796475053, -0.086473584175, -0.036633849144, -0.021056190133, 0.020006135106, 0.156575456262, -0.110065862536, -0.086901932955, 0.050283730030, 0.028896108270, 0.089127436280, 0.156922355294, 0.061808928847, -0.036990463734, 0.016054630280, -0.079896084964, -0.071311242878, -0.142019212246, 0.006389394403, 0.097564056516, -0.043471761048, 0.109284147620, 0.103895559907, 0.020394757390, 0.136835351586, -0.061917304993, 0.076333805919, -0.150431886315, -0.124339073896, 0.090034916997, -0.120846152306, 0.102932617068, -0.046759560704, -0.149794995785, -0.076102003455, -0.039155945182, -0.138699620962, -0.100753314793, 0.031568616629, -0.124554365873, 0.086475163698, -0.111983634531, 0.025346070528, -0.042216062546, 0.079447150230, 0.093545153737, 0.130679085851, 0.098572686315, 0.076741874218, 0.033862009645, 0.114680394530, -0.098064929247, -0.123599380255, -0.027986809611, -0.007650285959, -0.040472708642, -0.055572852492, 0.059656560421, -0.068333081901, 0.087151899934, -0.013393163681, 0.083821833134, 0.037994265556, 0.037021070719, 0.094381347299, 0.058787971735, -0.127664357424, 0.005633220077, 0.092034861445, -0.038271076977, -0.126525670290, -0.085079193115, -0.041480213404, -0.100939951837, -0.017874315381, -0.028676062822, -0.023544400930, 0.036823317409, 0.143361225724, 0.150165095925, 0.006984546781, 0.046182528138, -0.024761870503, -0.041980192065, 0.026823848486, 0.080036282539, 0.121389403939, 0.055201873183, 0.143887683749, -0.082084752619, 0.122516021132, 0.135329529643, -0.050185270607, -0.154025644064, 0.038995847106, -0.000360950828, 0.131395027041, 0.058257088065, 0.013540491462, -0.000369966030, 0.052766785026, -0.115278944373, 0.055974587798, 0.132095739245, -0.154319494963, 0.072699666023, 0.152712091804, 0.025011852384, 0.133088037372, -0.021128684282, 0.140593990684, 0.080937728286, -0.008426249027, -0.149293616414, 0.120191588998, -0.031864270568, 0.135284855962, 0.101056918502, 0.012767925858, 0.030991122127, 0.076458960772, 0.011779353023, -0.118525922298, -0.152331501245, -0.121439173818, 0.147464916110, 0.078221976757, -0.065096616745, 0.006996169686, 0.098066434264, 0.042788311839, 0.003794163465, 0.005785286427, 0.107157096267, 0.143270984292, -0.092231653631, -0.079611621797, -0.071822643280, -0.064690917730, -0.050735041499, 0.034397259355, -0.148603379726, -0.056189499795, -0.127991750836, -0.094641037285, 0.102500006557, -0.123280078173, 0.060228124261, 0.092038229108, -0.018712937832, 0.089018329978, -0.001857653260, 0.036873295903, -0.015421956778, -0.134461015463, 0.000126481056, -0.065488219261, 0.090915709734, -0.006315618753, 0.100197151303, -0.136310905218, -0.042439945042, -0.105757325888, 0.101175859571, 0.094444230199, -0.076745718718, 0.140721157193, 0.006981506944, 0.031419739127, 0.111833676696, -0.084809280932, -0.117476806045, -0.115055061877, -0.032324224710, 0.060517609119, -0.106047406793, -0.063553780317, 0.087877243757, -0.106218472123, 0.116717353463, -0.082787498832, -0.034681394696, 0.116875812411, 0.074998900294, -0.114764034748, -0.045919179916, 0.133727505803, -0.080581158400, 0.042635589838, 0.034396588802, -0.144879683852, 0.135608628392, -0.073906622827, -0.101730421185, 0.128069415689, -0.063364312053, -0.016424670815, -0.077337153256, 0.036469936371, 0.126632228494, -0.036420553923, -0.060291983187, -0.041514210403, -0.070868864655, 0.144720718265, 0.154299095273, 0.082468017936, 0.129682198167, 0.146941199899, -0.096102826297, 0.150849118829, 0.071807265282, -0.014327690005, 0.020057633519, 0.132969155908, -0.125557035208, 0.024002879858, -0.101652652025, -0.058195635676, -0.018743664026, 0.028894484043, 0.121981963515, 0.065310284495, 0.060805648565, 0.075274288654, -0.144271820784, -0.150157749653, -0.059121258557, -0.130898818374, 0.127972558141, 0.102466091514, -0.093824818730, -0.014720559120, -0.002291992307, -0.073592379689, 0.117664620280, 0.067656829953, -0.098931930959, -0.036873452365, 0.007295519114, -0.067800454795, -0.019984543324, 0.025231391191, 0.117599591613, 0.067619204521, 0.009070903063, -0.130276128650, 0.131979867816, 0.084784597158, 0.092407062650, -0.019327506423, -0.082420252264, 0.050635114312, 0.058903783560, 0.005535095930, 0.126306846738, -0.037311755121, 0.142642274499, -0.083817049861, -0.082833684981, 0.092829003930, -0.033990025520, 0.033102139831, -0.022150918841, 0.040790081024, 0.005350977182, 0.126431509852, -0.053224347532, -0.103316128254, 0.034179180861, 0.085027545691, 0.090856224298, -0.119760699570, -0.031311184168, -0.056282013655, 0.009451761842, 0.070905387402, -0.000235766172, 0.065435335040, 0.092204406857, -0.073385462165, -0.083574660122, -0.128005474806, -0.038540877402, 0.084926411510, 0.094873592257, 0.133838936687, -0.082140430808, 0.124478355050, -0.000922188163, -0.009470194578, 0.122691199183, 0.008641079068, -0.122384011745, -0.118267282844, -0.146382451057, -0.138312846422, 0.119874134660, -0.031756803393, -0.123223721981, 0.004306644201, -0.059426873922, 0.121258869767, -0.068725056946, 0.103144571185, -0.139386624098, -0.111497566104, 0.156054362655, -0.078383743763, 0.009599655867, 0.114796563983, -0.153694257140, 0.006434097886, 0.094078734517, -0.031460538507, 0.012862846255, 0.144517496228, -0.095909476280, -0.000511288643, -0.143276154995, -0.050183154643, -0.100656017661, -0.137778609991, 0.128655716777, 0.118010446429, -0.045686244965, 0.003717675805, 0.070366740227, 0.151216343045, -0.017862707376, -0.122095063329, 0.087694033980, -0.088776133955, -0.105919271708, -0.149196401238, 0.100609168410, 0.002963155508, -0.121569074690, 0.070721432567, 0.011424735188, -0.136862307787, 0.048550561070, 0.141065672040, -0.039423935115, 0.056901305914, 0.076765090227, 0.013958707452, -0.043807826936, 0.155401363969, 0.102234169841, 0.080060705543, 0.137511149049, 0.097704216838, 0.055007085204, -0.007373169065, 0.060478627682, -0.048959277570, -0.091318547726, -0.118967816234, -0.126109823585, 0.084505259991, -0.038609825075, 0.134363904595, 0.015903323889, -0.028750553727, -0.044914059341, -0.027303054929, -0.127241879702, 0.097474589944, -0.150261580944, 0.135019913316, -0.011461928487, 0.091066613793, 0.102771654725, 0.017182350159, 0.042480349541, -0.046588569880, -0.081028543413, -0.107067383826, 0.143976643682, -0.052194871008, -0.086118735373, 0.067875504494, 0.128594592214, 0.127892240882, -0.107052713633, -0.139977484941, -0.030234575272, -0.073557019234, 0.072309881449, 0.144890949130, 0.004171356559, -0.006857708097, -0.078296363354, -0.102884948254, -0.014131128788, 0.136335358024, 0.024827703834, -0.072688020766, 0.008833184838, 0.051467016339, -0.131809055805, 0.144446685910, -0.079195067286, -0.085152819753, -0.047447688878, -0.110492974520, -0.081638641655, 0.156024351716, -0.133062303066, 0.145103856921, 0.126442238688, 0.080581158400, 0.066243708134, -0.027078792453, -0.096377566457, -0.095284342766, -0.101628452539, -0.019939571619, -0.043843187392, -0.077784202993, -0.102722167969, -0.047306403518, -0.009228751063, 0.075575485826, -0.059460386634, 0.094124987721, -0.096898913383, 0.148262366652, -0.057031475008, 0.015546172857, 0.127655312419, 0.126186624169, -0.135399267077, -0.090688176453, 0.004648298025, -0.097461625934, 0.149695023894, 0.001725405455, -0.009331807494, 0.148411795497, -0.052486009896, 0.109030380845, 0.090328812599, 0.070808768272, 0.116697803140, 0.152033999562, 0.046548873186, 0.017167270184, 0.108034923673, -0.106842890382, 0.005875945091, 0.012067541480, -0.012286707759, -0.105820730329, -0.038163378835, -0.043957374990, -0.012457668781, 0.005078315735, -0.071081362665, 0.058422654867, 0.094135954976, 0.010489761829, -0.121336176991, 0.102732732892, -0.121864587069, -0.146528154612, 0.040736064315, 0.018437817693, 0.016469985247, 0.148876205087, 0.085169747472, 0.120361939073, -0.023317277431, 0.082545518875, -0.111681416631, 0.114511504769, -0.088429652154, -0.020965352654, 0.051390483975, 0.043946787715, -0.117868445814, 0.157713398337, -0.021627008915, 0.079832494259, 0.055383756757, -0.150415793061, 0.073172613978, -0.046010218561, -0.125206634402, -0.138054668903, -0.121359102428, 0.088560953736, 0.133891567588, 0.116929814219, 0.049211919308, -0.107503689826, 0.015935435891, -0.127447172999, -0.033190347254, -0.157337695360, 0.100201770663, 0.093868777156, 0.039024040103, -0.077972047031, -0.126501351595, 0.083363294601, 0.119210883975, 0.134255245328, -0.053014338017, 0.049603447318, -0.097501203418, -0.020951136947, 0.096651628613, 0.108966693282, -0.093699663877, 0.040662556887, -0.012334898114, 0.062812194228, -0.047872386873, -0.142513841391, 0.105005666614, 0.097520723939, 0.009518980980, 0.054080411792, -0.012595713139, 0.119834765792, -0.064265996218, -0.133977711201, 0.109516724944, -0.004719138145, 0.079672083259, -0.009752288461, -0.132161676884, 0.114635720849, 0.015987262130, -0.003892287612, 0.062602192163, -0.070740729570, -0.119180649519, 0.148108914495, 0.075507968664, 0.007952809334, 0.024479672313, -0.044681124389, 0.085681214929, -0.080145150423, 0.107251182199, -0.016802698374, -0.052656322718, 0.102366194129, -0.145604863763, 0.079388380051, -0.148692309856, -0.100951522589, -0.078033611178, -0.078273594379, -0.121023863554, -0.085243590176, 0.077012836933, 0.139572307467, 0.057160928845, -0.106724940240, 0.014346420765, -0.089578591287, 0.036952018738, -0.036809436977, -0.141390949488, -0.041934274137, -0.102913513780, -0.115301713347, -0.138492450118, -0.004332885146, -0.120231010020, 0.132767245173, 0.088484615088, -0.157918795943, 0.143749371171, 0.069188088179, 0.150376394391, 0.026062965393, 0.057511135936, -0.003870606422, -0.058824203908, 0.071139007807, 0.147513553500, -0.142770111561, 0.089527517557, 0.017608478665, 0.052792117000, 0.116575643420, 0.100317761302, 0.057001233101, 0.006017699838, 0.128323182464, -0.126819893718, 0.016530260444, -0.130565375090, 0.118835315108, 0.141366288066, 0.142310604453, -0.010731175542, -0.145240783691, 0.003312200308, 0.014934048057, -0.027130469680, 0.013742476702, -0.023622065783, -0.070491246879, 0.148494943976, 0.102911397815, 0.137157425284, 0.058256894350, 0.111938163638, 0.054578736424, -0.143330544233, 0.103410676122, -0.034655191004, 0.097998067737, -0.059938423336, 0.148959860206, 0.065022841096, 0.009659558535, 0.087073341012, 0.156683340669, 0.101799324155, 0.112382993102, 0.114580377936, -0.142909169197, 0.080753549933, -0.070468142629, 0.103227660060, 0.123568281531, 0.053505197167, 0.079040810466, -0.026553556323, -0.127381548285, -0.044588655233, 0.105880752206, -0.015929773450, 0.042885720730, 0.063975572586, -0.021688044071, 0.139778837562, -0.102966748178, 0.124906525016, -0.122525945306, 0.032387509942, -0.134284824133, 0.041745856404, -0.066042743623, -0.109053805470, 0.094208881259, 0.071182996035, -0.104479506612, -0.096914038062, 0.085528507829, -0.082476839423, -0.073870584369, 0.077924206853, 0.144154176116, 0.027505785227, 0.068237826228, -0.020511701703, 0.107072934508, -0.039131671190, 0.060671478510, -0.017889365554, 0.036006942391, 0.097761794925, -0.035216130316, -0.011899411678, -0.106998920441, -0.112021446228, -0.133150592446, -0.127524837852, -0.030968517065, -0.124768704176, 0.103523775935, -0.128598332405, -0.008291214705, 0.081286698580, -0.113512068987, 0.069495856762, 0.092527315021, -0.000302866101, 0.048976689577, 0.002460315824, -0.041969105601, 0.132943823934, -0.079105153680, -0.054611265659, -0.044346638024, 0.119623258710, 0.059198200703, -0.090139567852, 0.094859227538, -0.108110502362, 0.040026113391, 0.041863366961, 0.081765830517, 0.106212064624, 0.106153681874, 0.128928467631, -0.016287937760, 0.019133105874, 0.099941149354, 0.119744136930, -0.052179038525, -0.005993679166, -0.050456874073, 0.062947079539, 0.092024996877, -0.116560235620, -0.078288555145, 0.024496823549, -0.115635298193, 0.149134412408, -0.013924777508, -0.120774984360, -0.057987928391, -0.016159549356, 0.134319469333, 0.022943735123, -0.048283323646, 0.001165226102, -0.107301712036, 0.113991722465, 0.041526392102, -0.011302515864, 0.151752129197, 0.125583246350, 0.067005008459, -0.087333381176, -0.048528358340, 0.011931449175, 0.021789744496, -0.118350893259, -0.081161580980, 0.120075389743, 0.018748104572, 0.031351670623, 0.154506817460, -0.094424806535, 0.102487877011, 0.014049664140, -0.022935107350, 0.048391059041, 0.057665318251, 0.130751952529, -0.110899537802, 0.014149978757, -0.036195576191, 0.082527056336, 0.025742501020, -0.049834378064, 0.099244937301, -0.089422412217, -0.022616788745, -0.083464473486, -0.072923965752, -0.142051219940, 0.024972796440, 0.138734415174, -0.152308240533, 0.137450233102, 0.015960648656, 0.036694809794, 0.132896408439, -0.094173707068, -0.028273046017, 0.048639148474, 0.008272513747, 0.130825772882, 0.123459920287, -0.148720964789, -0.155242860317, -0.004058986902, -0.135754004121, -0.114867925644, -0.127179294825, -0.024483710527, -0.065738603473, -0.056748889387, 0.004312261939, -0.032186061144, 0.059419482946, -0.093585513532, 0.118562594056, 0.141813978553, 0.001237228513, 0.157484039664, -0.116739749908, 0.148813739419, 0.096467241645, -0.151985958219, 0.001338407397, -0.057124882936, 0.017417535186, 0.084018513560, 0.003889754415, 0.072627812624, -0.037778452039, 0.028427407146, 0.146455541253, -0.114170536399, -0.005032584071, 0.038208916783, -0.065601080656, 0.029763892293, 0.125629439950, -0.039531596005, -0.152917236090, 0.141197517514, -0.115796118975, -0.107491552830, 0.080859661102, 0.082505151629, 0.058117419481, -0.030754759908, -0.136079743505, 0.012844711542, -0.078815676272, -0.076047003269, 0.012338966131, 0.120454713702, 0.084551021457, -0.156376942992, -0.150559276342, -0.104944609106, -0.117729194462, 0.011071160436, -0.115715935826, -0.155318170786, 0.086060613394, -0.116391122341, -0.076230399311, 0.013673484325, -0.056554146111, 0.157087549567, -0.002553120255, -0.113301008940, -0.050884172320, 0.078250110149, 0.086893036962, 0.117478504777, 0.058488503098, 0.015199810266, -0.042951762676, 0.076155081391, -0.046513698995, 0.022145494819, -0.087358258665, 0.019037663937, -0.080081857741, 0.044310823083, 0.084762692451, 0.097933039069, -0.004687249660, -0.117223367095, 0.018973305821, -0.121232435107, -0.059465058148, 0.087845236063, 0.072919934988, -0.066090695560, -0.010184183717, -0.044611908495, 0.110031142831, 0.027413159609, -0.004765465856, 0.112778559327, 0.053938820958, 0.132939293981, -0.103881165385, -0.064712069929, -0.096728600562, -0.107339821756, 0.008683681488, 0.043741479516, -0.103737473488, -0.003859519958, 0.138207331300, 0.154847964644, 0.145682528615, -0.139954239130, 0.153540357947, 0.000595271587, 0.083237156272, -0.122465372086, -0.100584805012, -0.024973854423, -0.106708317995, -0.101199649274, 0.137280061841, 0.031728491187, 0.055750146508, -0.101227283478, -0.099103495479, 0.033333376050, -0.040747828782, 0.040454208851, -0.107586592436, 0.014021202922, 0.022024482489, -0.137879595160, 0.030003651977, 0.115718230605, 0.011762842536, -0.059545315802, 0.083790510893, -0.007856488228, -0.055698268116, -0.151369005442, -0.077938273549, -0.107063688338, 0.066844567657, -0.154983833432, -0.090606294572, 0.001569598913, -0.110057793558, -0.151748776436, 0.080513074994, 0.020784065127, 0.082846686244, 0.080182999372, -0.050944566727, 0.093228623271, -0.015810236335, -0.018538996577, 0.156906411052, 0.050283923745, 0.120884969831, -0.121335357428, 0.026869684458, 0.074057862163, 0.016154870391, 0.091677427292, -0.057255804539, 0.089839339256, 0.004090338945, -0.078151643276, -0.051310077310, -0.052414424717, 0.022083744407, -0.064243376255, -0.019830688834, 0.155137166381, 0.095787271857, 0.072301656008, -0.133198544383, 0.102539822459, 0.107449308038, -0.106778472662, 0.028564333916, 0.043677583337, -0.078707829118, 0.063342332840, 0.129336640239, 0.139688923955, 0.061106696725, -0.147730320692, -0.049267940223, -0.113907970488, -0.006588056684, 0.157188668847, 0.108519777656, -0.009572088718, 0.051273480058, 0.037192061543, 0.061244100332, -0.079216852784, -0.142548665404, 0.104287996888, -0.116603702307, 0.008590564132, -0.016108095646, 0.071627527475, -0.145308226347, -0.063087917864, 0.096504941583, -0.065527230501, 0.004370734096, -0.002449989319, -0.081940218806, 0.018220752478, 0.112707510591, -0.134126231074, -0.007226601243, 0.031956329942, -0.073037818074, 0.039904013276, -0.080961331725, 0.064797118306, -0.126067876816, -0.129108309746, -0.037761449814, -0.023608118296, 0.128982976079, -0.120457455516, -0.101950883865, 0.101919248700, 0.082795530558, -0.070268876851, -0.119518756866, -0.045185931027, 0.037981331348, 0.119204059243, -0.129744112492, -0.130963504314, 0.056990161538, 0.070911154151, 0.157709077001, -0.025731787086, -0.052543267608, 0.014718070626, -0.121195688844, -0.102880045772, -0.052581794560, 0.128969892859, 0.018312513828, 0.142786428332, 0.006126418710, 0.108709052205, -0.128214389086, -0.086154170334, 0.145931586623, -0.105742245913, 0.099030271173, 0.114728942513, -0.120353981853, -0.118078529835, 0.085258901119, -0.116831921041, -0.089043445885, 0.059580862522, -0.086005188525, 0.081922993064, -0.148987665772, 0.153425469995, 0.051713779569, -0.024845600128, -0.074803441763, 0.038177698851, 0.065728843212, -0.064626529813, 0.063171222806, 0.094797179103, 0.063199758530, 0.021604761481, 0.109408184886, 0.106719359756, -0.147055640817, 0.128256604075, 0.006513416767, -0.031618490815, 0.062965065241, 0.088312640786, -0.073669470847, 0.089440211654, -0.010070532560, 0.028524667025, 0.101726993918, -0.067296028137, -0.143927142024, -0.046817883849, -0.103943035007, -0.073059946299, 0.098563060164, -0.077565558255, 0.052671745420, 0.066774979234, -0.143701046705, -0.129585966468, -0.009807333350, 0.029930710793, 0.075715899467, -0.072742760181, -0.144992619753, 0.094757422805, -0.152497619390, -0.011113122106, -0.039962366223, -0.027689218521, -0.143292292953, 0.083416059613, 0.067344993353, -0.009405776858, -0.089447140694, 0.073302909732, 0.048108369112, -0.076630331576, 0.046159833670, -0.023512557149, 0.119339808822, 0.126079663634, 0.144781962037, 0.044343575835, 0.154821291566, -0.046083465219, -0.055904738605, 0.121412262321, -0.076592668891, -0.079655610025, 0.031597793102, 0.115938171744, 0.056066915393, -0.100886344910, -0.081305883825, 0.080127537251, -0.030326828361, 0.006864562631, 0.128255710006, -0.128384739161, 0.083291217685, 0.032936453819, -0.118278369308, 0.142928615212, -0.023837044835, -0.003356978297, 0.055657252669, 0.036320701241, 0.095622912049, 0.097955569625, -0.000995278358, -0.109187707305, -0.146534740925, 0.151698872447, 0.146112963557, 0.119291320443, -0.116633638740, -0.098337970674, -0.038401924074, 0.009929999709, 0.123915836215, -0.069592170417, -0.100277006626, -0.053037747741, -0.010867342353, -0.092298679054, 0.084533601999, 0.153218045831, -0.144221484661, 0.090811103582, -0.048569373786, 0.132210150361, 0.110598817468, -0.103656157851, -0.080471344292, 0.016684740782, -0.121870316565, -0.026466995478, 0.112666830420, 0.045314133167, 0.146661028266, -0.056500129402, 0.111631289124, 0.136349961162, 0.015884697437, 0.034042239189, 0.015671670437, 0.006774917245, -0.075669988990, -0.137252464890, 0.019258260727, 0.002706810832, -0.060994550586, 0.010814025998, -0.018321856856, -0.016385093331, 0.115624740720, 0.068196311593, -0.010493800044, 0.018781542778, 0.026458561420, -0.111276656389, -0.055799037218, 0.076007977128, 0.133600100875, -0.120711311698, -0.002649366856, 0.026754289865, -0.005940601230, 0.115274384618, -0.010467663407, 0.115017965436, 0.012160018086, -0.036559961736, -0.146723464131, 0.091389834881, -0.064459800720, 0.089934825897, 0.000776484609, -0.110815398395, -0.137377589941, 0.013742163777, -0.113572426140, -0.015510365367, -0.139108493924, 0.057448446751, -0.007243722677, -0.102812789381, -0.096395581961, -0.099885746837, -0.005728289485, -0.081602223217, 0.100566521287, -0.118492260575, -0.042161285877, -0.149381637573, 0.033796712756, -0.064466133714, -0.082468584180, 0.055518940091, 0.078561559319, 0.092624381185, 0.028376713395, 0.131105646491, 0.039111837745, 0.000728130341, -0.003501892090, -0.116268426180, 0.140307620168, 0.071293368936, -0.018283367157, 0.059533134103, 0.131429299712, -0.103427484632, 0.142367020249, 0.040952369571, 0.082237228751, 0.036418855190, 0.011860206723, 0.105517223477, -0.062856152654, 0.067831069231, -0.118487812579, -0.028089493513, -0.084935002029, -0.028909713030, -0.037743955851, 0.156338945031, 0.158017829061, 0.128985837102, 0.066475853324, 0.036858826876, 0.111441686749, -0.137086525559, 0.134568497539, -0.025711804628, 0.120204433799, 0.120787963271, 0.142348513007, -0.070233777165, -0.149207711220, -0.051820725203, 0.146435216069, -0.106552779675, 0.032748311758, -0.025089651346, 0.073120519519, 0.060257270932, 0.012117192149, -0.071821697056, -0.142748549581, 0.133579418063, 0.057888701558, 0.012990981340, -0.074047237635, -0.100583337247, -0.070517182350, 0.142919048667, 0.123621210456, -0.037085346878, 0.005851253867, 0.030065059662, -0.101167984307, 0.137941911817, -0.081784300506, 0.140710487962, 0.031646236777, 0.009387224913, -0.057997241616, 0.049096450210, -0.096393391490, 0.087417900562, -0.008058816195, 0.073774427176, 0.073852524161, 0.115825429559, -0.096679106355, -0.129313111305, 0.038344204426, -0.076051302254, -0.030278533697, 0.138880804181, -0.043734736741, -0.052838668227, -0.136222466826, 0.027096390724, 0.101910158992, -0.045987412333, 0.096017882228, -0.114303335547, 0.043021574616, 0.145805403590, -0.107331000268, 0.045471265912, 0.135655000806, -0.076740860939, -0.111126884818, -0.010030865669, 0.064580276608, -0.124126873910, 0.016623377800, -0.149473592639, -0.065899342299, 0.049128875136, -0.050990633667, -0.153557404876, 0.001373723149, 0.021743312478, 0.111969664693, 0.121988520026, -0.096160389483, 0.033518359065, 0.082719907165, -0.079768404365, 0.043204188347, 0.102061256766, -0.096210643649, -0.086774818599, 0.130187556148, -0.089347884059, 0.063149288297, -0.045242853463, 0.013043716550, -0.035066619515, -0.035610213876, 0.123001351953, 0.104496762156, -0.036454297602, -0.067997194827, -0.067928358912, -0.024178475142, 0.133811071515, -0.106782913208, 0.146221771836, 0.126503095031, 0.038403391838, 0.070087850094, -0.103727065027, 0.020469173789, 0.099235758185, -0.100440464914, 0.058915391564, 0.098205819726, 0.132841154933, -0.145897805691, 0.056919842958, -0.098790794611, 0.157830670476, 0.115204945207, -0.065382741392, 0.116370812058, -0.127853065729, 0.089582890272, 0.032030820847, 0.056602254510, 0.042018979788, -0.034346789122, 0.029316306114, -0.105379447341, -0.033205278218, 0.079997077584, -0.046721301973, 0.036582618952, -0.078691616654, -0.148654356599, -0.130391106009, 0.087788686156, -0.021370932460, -0.155720964074, 0.110977545381, 0.053535908461, -0.045753538609, -0.143839910626, 0.092875704169, 0.018411323428, -0.136965215206, 0.046057075262, 0.090308755636, -0.099449858069, 0.103074595332, 0.027876764536, 0.153173163533, -0.026848912239, 0.116364046931, 0.044557288289, -0.096752613783, -0.106193825603, 0.067808404565, -0.056364685297, 0.100925400853, 0.129378572106, -0.076667457819, -0.069696739316, -0.106890395284, -0.049025848508, -0.016012594104, 0.022553011775, -0.117945425212, 0.137515619397, 0.073057681322, -0.089138776064, 0.103819653392, -0.041587002575, 0.065223544836, -0.006647616625, 0.049910649657, -0.126988291740, -0.121119946241, 0.004192352295, -0.099979043007, 0.047686919570, 0.120997324586, -0.114099249244, 0.033863022923, 0.077900722623, -0.100207790732, -0.122370526195, 0.041748911142, -0.046110942960, -0.056147202849};
# 25 "firmware/parameters.h" 2
# 1 "firmware/weights/b14.h" 1
# 12 "firmware/weights/b14.h"
model_default_t b14[84] = {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000};
# 26 "firmware/parameters.h" 2
# 1 "firmware/weights/w17.h" 1
# 12 "firmware/weights/w17.h"
model_default_t w17[840] = {0.135526403785, 0.095061257482, 0.186024621129, 0.183544680476, 0.114104375243, 0.056075617671, 0.180733725429, -0.033394441009, -0.042355090380, 0.188135042787, -0.131119385362, -0.004457518458, -0.002144128084, -0.050581663847, -0.109753504395, 0.141735002398, 0.069444313645, 0.144207403064, -0.137101680040, -0.101472318172, 0.157411649823, 0.154803618789, -0.148379951715, -0.026996865869, -0.151965707541, 0.178893283010, 0.030246227980, -0.159700125456, 0.025531291962, -0.025879085064, 0.135275647044, -0.165412172675, 0.140413835645, -0.013726443052, 0.102358415723, -0.088616915047, -0.174756020308, -0.093595474958, -0.023869872093, 0.135412231088, -0.185553312302, -0.086993560195, -0.105483822525, 0.169077411294, -0.091773778200, 0.099702790380, -0.007429480553, -0.085804015398, -0.074006639421, -0.146329224110, -0.034763008356, 0.165023550391, 0.030958533287, 0.165488258004, 0.006014645100, -0.167085453868, 0.188741102815, 0.069845154881, -0.015665560961, -0.014850527048, -0.176584020257, 0.042363777757, -0.163484543562, 0.042134255171, -0.105019286275, -0.137177556753, -0.152824223042, -0.164378792048, -0.044369757175, 0.159155830741, -0.163310140371, -0.065018877387, 0.128430709243, 0.066781237721, 0.186330989003, 0.094487056136, 0.011290177703, -0.093146078289, 0.064211770892, -0.107865124941, -0.051669731736, 0.045733809471, -0.148613348603, -0.008680477738, -0.099067002535, 0.102780058980, -0.104385428131, -0.151827573776, -0.005732357502, 0.086520478129, 0.146009370685, 0.061171635985, -0.134141713381, 0.182544603944, -0.059455424547, 0.159886851907, -0.094364374876, -0.058046862483, -0.049749866128, -0.085971720517, 0.056929633021, -0.063081473112, -0.152389645576, -0.056684210896, -0.058475807309, 0.153193607926, 0.148627534509, 0.033470273018, 0.097296312451, 0.042743474245, 0.091078117490, 0.153489634395, -0.167340695858, -0.134912446141, 0.027019530535, -0.014160797000, 0.113839700818, 0.050713226199, 0.102218493819, 0.012713968754, 0.080879256129, -0.148626595736, -0.168767020106, 0.120046243072, -0.141010493040, -0.014683037996, -0.138091444969, -0.014949783683, 0.017437860370, -0.068458922207, 0.081584855914, -0.119330249727, -0.130171656609, -0.161686867476, 0.122216448188, 0.154818400741, 0.086082652211, -0.017348423600, 0.015729084611, 0.041460841894, 0.099652513862, -0.147508502007, -0.164779081941, -0.172452390194, 0.090689942241, -0.153876751661, -0.057267203927, -0.019600823522, 0.160873129964, 0.019363462925, 0.096218988299, 0.098187729716, -0.183967500925, 0.103371635079, -0.027464419603, -0.034702181816, -0.066659532487, 0.146150454879, -0.065035052598, -0.120646856725, 0.133207097650, 0.188179269433, -0.074614234269, 0.137136176229, 0.106404200196, -0.035107776523, -0.162248283625, 0.056902647018, 0.108914330602, 0.108288154006, -0.155680060387, 0.181550189853, 0.010619685054, -0.023631513119, 0.001534685493, 0.032787889242, 0.174446716905, -0.182459399104, 0.085548594594, -0.037011519074, -0.099986881018, -0.049478933215, -0.102924190462, 0.072756454349, -0.046710774302, 0.114939287305, -0.103310324252, -0.060803800821, -0.187055960298, -0.044047743082, -0.084973305464, -0.171396628022, -0.039093732834, 0.129664048553, 0.118618592620, 0.025002017617, -0.138915985823, 0.181762859225, 0.157777413726, -0.171846747398, -0.159242168069, -0.153022438288, -0.023937821388, -0.115550205112, -0.133266702294, 0.124020323157, -0.015708759427, -0.079063326120, 0.068079546094, 0.115172490478, 0.000003963709, 0.074166670442, 0.180896505713, -0.062064275146, 0.131239131093, -0.026031062007, -0.082694277167, -0.005523696542, 0.106188341975, 0.099473997951, 0.029133692384, 0.072540953755, 0.064524009824, -0.084404416382, 0.075468376279, 0.111218377948, 0.103074267507, -0.158550769091, -0.169319733977, 0.111967906356, 0.024273768067, 0.034118965268, -0.135858371854, -0.154353231192, -0.126114636660, 0.000455081463, -0.142867192626, 0.100195899606, -0.000044152141, -0.078446723521, -0.038374587893, -0.000491842628, -0.157614946365, -0.093414120376, -0.045987844467, -0.133719116449, -0.065903067589, -0.039174973965, -0.050167992711, 0.148048415780, -0.171612307429, 0.075166955590, 0.033626392484, 0.102896645665, -0.097073689103, -0.063927099109, -0.038096129894, 0.033408090472, -0.115515649319, 0.087404266000, 0.087542071939, 0.133548572659, 0.034998834133, 0.018961057067, 0.122140124440, 0.052267819643, 0.184622034431, 0.071295484900, 0.029842704535, -0.084530346096, -0.004538670182, -0.139508664608, 0.074828103185, 0.106617823243, 0.152166202664, 0.047486573458, -0.005474686623, 0.185432597995, -0.036281868815, -0.018472194672, 0.124698832631, -0.172983840108, 0.159314051270, -0.131058424711, 0.054909199476, 0.085436120629, -0.031110644341, -0.013562977314, 0.052668824792, -0.133326411247, 0.155011877418, 0.098523840308, -0.079112395644, 0.000737398863, 0.028766065836, -0.018303632736, 0.061696067452, -0.139992073178, -0.186974048615, -0.059863284230, 0.149387285113, 0.040977016091, 0.001998588443, 0.180951699615, -0.011924892664, 0.003885164857, -0.022994637489, 0.151181355119, 0.101951673627, 0.007672056556, -0.128370687366, -0.118904821575, -0.163821667433, 0.035968229175, 0.145839497447, 0.021590799093, -0.054385498166, 0.174392446876, -0.137920320034, 0.153960868716, 0.102897003293, -0.144028365612, -0.161819785833, 0.036132052541, -0.107975378633, -0.150637298822, -0.178057566285, 0.008641496301, 0.015327081084, -0.021862313151, -0.165711700916, -0.124363057315, 0.046747773886, -0.101432621479, 0.072586640716, 0.059507116675, -0.020390585065, 0.113346710801, -0.076557308435, 0.050396069884, -0.055452719331, 0.101072892547, 0.170050516725, -0.156061694026, 0.149592921138, 0.028361856937, -0.073317445815, -0.149516284466, 0.057255208492, -0.016090348363, 0.039376065135, -0.134150624275, 0.184233322740, 0.064971640706, 0.163266435266, -0.085222601891, -0.135810345411, -0.020291954279, -0.160290956497, -0.033926069736, -0.042303308845, -0.093071512878, -0.179607197642, 0.048487916589, 0.020892068744, 0.039025738835, -0.046965569258, 0.016922995448, -0.132900923491, 0.014906570315, -0.097669698298, 0.031347915530, 0.108438298106, 0.082577481866, -0.119525574148, 0.095250591636, -0.036778569221, -0.039047464728, 0.102467074990, 0.182801410556, 0.185583278537, -0.188625112176, -0.005020320415, 0.114031746984, 0.050356149673, -0.108794778585, -0.023974493146, 0.043939054012, 0.078356072307, 0.003275766969, 0.049182012677, -0.074875876307, 0.134217724204, 0.019369855523, -0.161247387528, -0.076068170369, 0.023603677750, 0.055552691221, -0.095778435469, 0.167668089271, 0.111162170768, -0.043764784932, -0.044517681003, 0.080031827092, -0.183313131332, 0.168765768409, -0.075091339648, 0.135747656226, 0.097867533565, -0.093023747206, -0.026799559593, -0.164102554321, 0.000620350242, -0.084955908358, -0.093346312642, 0.185008302331, 0.066440418363, -0.060939282179, -0.141558378935, 0.101610854268, -0.183792307973, -0.151892095804, -0.056771084666, -0.123943127692, -0.122130580246, 0.076998189092, -0.117550373077, 0.014255583286, -0.168429225683, -0.017975434661, -0.083881981671, 0.147256508470, -0.026500284672, 0.117023602128, 0.128810748458, 0.115302696824, 0.051686763763, -0.123952813447, 0.062764272094, 0.163712933660, 0.051339790225, 0.163742676377, 0.024941280484, 0.079983040690, -0.084916755557, -0.178605318069, -0.023637056351, 0.129235431552, 0.077670291066, -0.007601633668, -0.184763014317, -0.060998857021, 0.142410621047, -0.176839947701, -0.185918182135, 0.109618052840, -0.036143541336, 0.187377676368, 0.073773249984, 0.069831892848, 0.084004536271, 0.148874983191, 0.064418569207, -0.159866392612, -0.132474824786, 0.063673749566, -0.037189722061, 0.069336190820, 0.015569046140, -0.149378240108, -0.007837012410, 0.104628428817, 0.108080193400, -0.117045015097, -0.108296096325, -0.105641521513, 0.124542161822, 0.174700096250, -0.105733886361, -0.081897944212, -0.007557436824, -0.062522277236, 0.184824600816, 0.180984690785, 0.106164947152, -0.179080173373, -0.050626397133, -0.170145347714, 0.068179473281, 0.075429365039, -0.132172763348, 0.136489883065, -0.144091665745, -0.036275789142, -0.092701457441, -0.113299570978, 0.178790107369, -0.180143207312, 0.031573161483, -0.153041630983, -0.001960605383, -0.054505705833, 0.155066207051, 0.007618665695, 0.165247753263, 0.034506350756, -0.121781297028, 0.042742669582, 0.135546848178, -0.023167833686, -0.179032370448, -0.134419351816, 0.148968920112, 0.065226718783, -0.122433945537, -0.058029115200, 0.121931776404, -0.165029406548, 0.169838920236, -0.142758116126, -0.025462582707, -0.117472693324, -0.032826319337, -0.005903795362, 0.160828366876, -0.186039477587, 0.060723915696, 0.158611431718, 0.039603367448, 0.122314646840, 0.170026257634, 0.051375240088, -0.131007194519, -0.101877741516, 0.005440354347, -0.117735013366, 0.046759888530, 0.138617262244, 0.036030039191, -0.069460533559, 0.169659361243, -0.127434179187, 0.166948512197, 0.146433308721, -0.047781690955, -0.080901831388, -0.086713440716, 0.084817185998, -0.149936303496, -0.106426365674, -0.083992592990, -0.015177369118, -0.091962121427, -0.114255227149, -0.071638092399, -0.033621132374, 0.029683873057, 0.010382324457, 0.057853981853, -0.084923923016, 0.008097484708, 0.037429779768, 0.181575700641, -0.059802815318, -0.036834627390, -0.144822359085, 0.120891198516, -0.043157950044, 0.153825834394, 0.032255992293, 0.103268012404, -0.038397744298, -0.111431919038, -0.146460443735, 0.077710434794, 0.078394398093, 0.168414130807, 0.067778155208, -0.123766638339, 0.050161227584, 0.115433588624, -0.002404689789, 0.084954962134, 0.133267566562, 0.187114998698, -0.153221905231, 0.024242669344, -0.182196483016, 0.102243736386, 0.030854448676, 0.136919274926, -0.131318539381, 0.103398725390, 0.014041036367, 0.043992131948, 0.075663253665, -0.144380256534, -0.012011662126, -0.039594769478, -0.170066460967, 0.067270264030, -0.063391059637, -0.177959337831, 0.030888468027, 0.161016598344, 0.075989142060, -0.154312089086, -0.008546471596, -0.086798690259, -0.007474884391, -0.016139909625, 0.072588071227, 0.026723951101, 0.149494394660, -0.040899977088, 0.112520590425, -0.121146000922, 0.099399521947, -0.074096389115, 0.142508223653, -0.030701041222, 0.017855003476, -0.057866588235, 0.001841381192, -0.038992226124, 0.154894128442, -0.180531993508, 0.000799447298, -0.062589138746, -0.160065367818, -0.109144061804, 0.132630035281, 0.150554880500, 0.099867299199, 0.078032925725, 0.158265873790, -0.079273656011, -0.073594503105, -0.149614334106, 0.174441829324, -0.156247735023, 0.181220814586, -0.071723967791, 0.181745782495, 0.142464533448, 0.113165691495, -0.187264174223, 0.075966879725, -0.069106616080, -0.024009957910, -0.159162700176, 0.089384689927, -0.159591719508, -0.019998759031, -0.036239787936, 0.145278051496, -0.046838194132, -0.132762372494, -0.058412089944, 0.000136747956, -0.008645147085, -0.102909997106, -0.002371340990, -0.022438779473, 0.174273863435, -0.050307437778, -0.042987048626, -0.009533539414, 0.148254290223, 0.008482947946, 0.165757611394, -0.042394101620, -0.037397876382, 0.091477528214, -0.012427628040, 0.123854860663, 0.165509983897, -0.049130022526, -0.086672171950, 0.165869578719, 0.119782611728, 0.151593014598, 0.003604367375, -0.029269799590, -0.110310047865, -0.117247000337, -0.022863969207, 0.137629196048, -0.005446791649, 0.111142978072, 0.017546549439, 0.083570465446, 0.180498257279, 0.081332877278, -0.062150776386, 0.124514177442, -0.105990529060, -0.049749419093, -0.042111918330, -0.049626275897, -0.147512376308, 0.064111754298, 0.150150284171, -0.017514601350, 0.165607407689, -0.159101054072, 0.099335804582, -0.097413413227, -0.061562746763, -0.105210103095, 0.097515210509, 0.062166228890, 0.076198831201, -0.121910385787, -0.085694439709, -0.003881603479, -0.051362320781, 0.119538769126, 0.006844267249, 0.114592388272, 0.159537240863, 0.042356699705, 0.012271419168, 0.121353611350, -0.120731838048, -0.080570660532, -0.064894475043, -0.123378299177, -0.111677519977, 0.088242724538, -0.133130818605, 0.027668699622, 0.026938691735, 0.134500995278, -0.145281702280, -0.088288269937, 0.148588523269, 0.159906402230, 0.051200374961, 0.045527443290, 0.139762297273, 0.106927320361, 0.110759720206, 0.026319429278, -0.145761281252, 0.084860518575, -0.127302110195, -0.042521297932, 0.095641359687, 0.169788673520, 0.147235587239, 0.150122210383, 0.177138552070, 0.089648142457, 0.172968849540, -0.145917862654, 0.139026686549, -0.133151128888, -0.031901940703, -0.179442211986, -0.179163709283, -0.152509778738, 0.086346313357, 0.053868964314, 0.140412583947, -0.094085246325, -0.074387729168, 0.135150179267, 0.035022035241, 0.171143040061, 0.099718347192, 0.113257125020, -0.011236056685, 0.102028325200, -0.027484789491, -0.097202911973, 0.033046290278, 0.129658624530, -0.010537534952, 0.144982382655, 0.181027337909, -0.187772318721, 0.130958274007, 0.132112696767, -0.003832355142, 0.061860606074, -0.027992084622, 0.150565251708, 0.159438118339, 0.080272421241, 0.054674044251, 0.159543290734, -0.099117107689, 0.102282300591, 0.043514221907, 0.117200955749, 0.039180919528, -0.050765767694, -0.028479412198, -0.135516703129, -0.038568094373, 0.031997904181, -0.009989693761, 0.102606132627, -0.093550190330, 0.124157056212, 0.051706463099, -0.047820255160, 0.061720475554, -0.145137116313, 0.133250877261, -0.077174454927, -0.080494515598, -0.061222478747, -0.064186714590, 0.012921541929, -0.106621913612, -0.004869922996, 0.107780471444, -0.040095388889, 0.156915441155, 0.064383521676, -0.140714332461, -0.078543864191, -0.182932764292, 0.046756878495, -0.173442572355, 0.053861171007, -0.008596584201, -0.027602285147, -0.061415404081, 0.145404532552, -0.161135509610, -0.164306476712, 0.087467387319, -0.019104257226, -0.044415533543, -0.118597850204, -0.146561592817, 0.182196483016};
# 27 "firmware/parameters.h" 2
# 1 "firmware/weights/b17.h" 1
# 12 "firmware/weights/b17.h"
model_default_t b17[10] = {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000};
# 28 "firmware/parameters.h" 2


struct config3_mult : nnet::dense_config {
    static const unsigned n_in = 16;
    static const unsigned n_out = 8;
    static const unsigned reuse_factor = 64;
    typedef ap_fixed<14,2,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
};

struct config3 : nnet::conv2d_config {
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_height = 32;
    static const unsigned in_width = 32;
    static const unsigned n_chan = 1;
    static const unsigned filt_height = 4;
    static const unsigned filt_width = 4;
    static const unsigned n_filt = 8;
    static const unsigned stride_height = 1;
    static const unsigned stride_width = 1;
    static const unsigned out_height = 29;
    static const unsigned out_width = 29;
    static const unsigned reuse_factor = 64;
    static const unsigned n_zeros = 0;
    static const bool store_weights_in_bram = false;
    typedef ap_fixed<14,2,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef config3_mult mult_config;
};

struct relu_config5 : nnet::activ_config {
    static const unsigned n_in = 29*29*8;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 15000;
    typedef ap_fixed<18,8> table_t;
};

struct config6 : nnet::pooling2d_config {
    static const unsigned in_height = 29;
    static const unsigned in_width = 29;
    static const unsigned n_filt = 8;
    static const unsigned stride_height = 2;
    static const unsigned stride_width = 2;
    static const unsigned pool_height = 2;
    static const unsigned pool_width = 2;
    static const unsigned out_height = 14;
    static const unsigned out_width = 14;
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const nnet::Pool_Op pool_op = nnet::Max;
    static const unsigned reuse = 15000;
};

struct config7_mult : nnet::dense_config {
    static const unsigned n_in = 32;
    static const unsigned n_out = 16;
    static const unsigned reuse_factor = 256;
    typedef ap_fixed<14,2,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
};

struct config7 : nnet::conv2d_config {
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const unsigned in_height = 14;
    static const unsigned in_width = 14;
    static const unsigned n_chan = 8;
    static const unsigned filt_height = 2;
    static const unsigned filt_width = 2;
    static const unsigned n_filt = 16;
    static const unsigned stride_height = 1;
    static const unsigned stride_width = 1;
    static const unsigned out_height = 13;
    static const unsigned out_width = 13;
    static const unsigned reuse_factor = 256;
    static const unsigned n_zeros = 0;
    static const bool store_weights_in_bram = false;
    typedef ap_fixed<14,2,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef config7_mult mult_config;
};

struct relu_config9 : nnet::activ_config {
    static const unsigned n_in = 13*13*16;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 15000;
    typedef ap_fixed<18,8> table_t;
};

struct config10 : nnet::pooling2d_config {
    static const unsigned in_height = 13;
    static const unsigned in_width = 13;
    static const unsigned n_filt = 16;
    static const unsigned stride_height = 2;
    static const unsigned stride_width = 2;
    static const unsigned pool_height = 2;
    static const unsigned pool_width = 2;
    static const unsigned out_height = 6;
    static const unsigned out_width = 6;
    static const unsigned pad_top = 0;
    static const unsigned pad_bottom = 0;
    static const unsigned pad_left = 0;
    static const unsigned pad_right = 0;
    static const nnet::Pool_Op pool_op = nnet::Max;
    static const unsigned reuse = 15000;
};

struct config11 : nnet::dense_config {
    static const unsigned n_in = 6*6*16;
    static const unsigned n_out = 120;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 13824;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 69120;
    static const bool store_weights_in_bram = false;
    typedef ap_fixed<14,2,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef ap_uint<1> index_t;
};

struct relu_config13 : nnet::activ_config {
    static const unsigned n_in = 120;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 15000;
    typedef ap_fixed<18,8> table_t;
};

struct config14 : nnet::dense_config {
    static const unsigned n_in = 120;
    static const unsigned n_out = 84;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 5040;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 10080;
    static const bool store_weights_in_bram = false;
    typedef ap_fixed<14,2,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef ap_uint<1> index_t;
};

struct relu_config16 : nnet::activ_config {
    static const unsigned n_in = 84;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 15000;
    typedef ap_fixed<18,8> table_t;
};

struct config17 : nnet::dense_config {
    static const unsigned n_in = 84;
    static const unsigned n_out = 10;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 420;
    static const unsigned n_zeros = 0;
    static const unsigned n_nonzeros = 840;
    static const bool store_weights_in_bram = false;
    typedef ap_fixed<14,2,AP_RND,AP_SAT> accum_t;
    typedef model_default_t bias_t;
    typedef model_default_t weight_t;
    typedef ap_uint<1> index_t;
};

struct softmax_config19 : nnet::activ_config {
    static const unsigned n_in = 10;
    static const unsigned table_size = 1024;
    static const unsigned io_type = nnet::io_parallel;
    static const unsigned reuse_factor = 15000;
    typedef ap_fixed<18,8> exp_table_t;
    typedef ap_fixed<18,8> inv_table_t;
};
# 23 "firmware/myproject.cpp" 2

void myproject(
    input_t input1[32*32*1],
    result_t layer19_out[10],
    unsigned short &const_size_in_1,
    unsigned short &const_size_out_1
) {_ssdm_SpecArrayDimSize(input1, 1024);_ssdm_SpecArrayDimSize(layer19_out, 10);


#pragma HLS INTERFACE ap_vld port=&input1,&layer19_out
#pragma HLS DATAFLOW

 const_size_in_1 = 32*32*1;
    const_size_out_1 = 10;
# 62 "firmware/myproject.cpp"
    input2_t conv2d_0_m_input[32*32*1];

    layer3_t layer3_out[29*29*8];

    nnet::conv_2d_large_cl<input_t, layer3_t, config3>(input1, layer3_out, w3, b3);

    layer5_t layer5_out[29*29*8];

    nnet::relu<layer3_t, layer5_t, relu_config5>(layer3_out, layer5_out);

    layer6_t layer6_out[14*14*8];

    nnet::pooling2d_cl<layer5_t, config6>(layer5_out, layer6_out);

    layer7_t layer7_out[13*13*16];

    nnet::conv_2d_large_cl<layer6_t, layer7_t, config7>(layer6_out, layer7_out, w7, b7);

    layer9_t layer9_out[13*13*16];

    nnet::relu<layer7_t, layer9_t, relu_config9>(layer7_out, layer9_out);

    layer10_t layer10_out[6*6*16];

    nnet::pooling2d_cl<layer9_t, config10>(layer9_out, layer10_out);

    layer11_t layer11_out[120];

    nnet::dense_large<layer10_t, layer11_t, config11>(layer10_out, layer11_out, w11, b11);

    layer13_t layer13_out[120];

    nnet::relu<layer11_t, layer13_t, relu_config13>(layer11_out, layer13_out);

    layer14_t layer14_out[84];

    nnet::dense_large<layer13_t, layer14_t, config14>(layer13_out, layer14_out, w14, b14);

    layer16_t layer16_out[84];

    nnet::relu<layer14_t, layer16_t, relu_config16>(layer14_out, layer16_out);

    layer17_t layer17_out[10];

    nnet::dense_large<layer16_t, layer17_t, config17>(layer16_out, layer17_out, w17, b17);

    nnet::softmax<layer17_t, result_t, softmax_config19>(layer17_out, layer19_out);

}
