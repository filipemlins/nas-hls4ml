// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_large_rf_gt_ni_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] data_V_address0;
output   data_V_ce0;
input  [10:0] data_V_q0;
output  [6:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [11:0] res_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg res_V_ce0;
reg res_V_we0;

(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] b14_V_address0;
reg    b14_V_ce0;
wire   [1:0] b14_V_q0;
wire   [10:0] outidx4_address0;
reg    outidx4_ce0;
wire   [3:0] outidx4_q0;
wire   [10:0] w14_V_address0;
reg    w14_V_ce0;
wire   [76:0] w14_V_q0;
wire   [6:0] iacc_2_fu_286_p2;
reg   [6:0] iacc_2_reg_550;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_292_p1;
reg   [63:0] tmp_reg_555;
wire   [0:0] exitcond7_fu_280_p2;
wire   [13:0] w_index_cast_fu_302_p1;
reg   [13:0] w_index_cast_reg_565;
wire    ap_CS_fsm_state4;
wire   [10:0] ir_fu_312_p2;
reg   [10:0] ir_reg_573;
wire   [0:0] exitcond_fu_306_p2;
wire   [6:0] out_index_cast_fu_328_p1;
wire    ap_CS_fsm_state5;
wire   [11:0] extLd_fu_332_p1;
reg   [11:0] extLd_reg_593;
wire   [0:0] tmp_57_fu_336_p2;
reg   [0:0] tmp_57_reg_598;
wire    ap_CS_fsm_state6;
wire   [2:0] im_2_fu_342_p2;
reg   [2:0] im_2_reg_602;
wire   [29:0] mul_fu_541_p2;
reg   [29:0] mul_reg_607;
wire    ap_CS_fsm_state23;
wire   [11:0] tmp_65_fu_412_p1;
reg   [11:0] tmp_65_reg_617;
wire    ap_CS_fsm_state24;
wire   [11:0] grp_product_fu_274_ap_return;
reg  signed [11:0] p_Val2_14_reg_622;
wire    ap_CS_fsm_state26;
wire    grp_product_fu_274_ap_ready;
wire    grp_product_fu_274_ap_done;
reg   [6:0] acc_V_addr_4_reg_628;
wire   [0:0] overflow_fu_462_p2;
reg   [0:0] overflow_reg_633;
wire    ap_CS_fsm_state27;
wire   [0:0] underflow_fu_474_p2;
reg   [0:0] underflow_reg_637;
wire   [0:0] brmerge9_fu_480_p2;
reg   [0:0] brmerge9_reg_641;
wire   [13:0] w_index_2_fu_486_p2;
wire    ap_CS_fsm_state28;
wire   [6:0] out_index_2_fu_498_p2;
wire   [0:0] tmp_62_fu_492_p2;
wire   [31:0] p_s_fu_516_p3;
wire   [6:0] ires_2_fu_530_p2;
reg   [6:0] ires_2_reg_666;
wire    ap_CS_fsm_state29;
wire   [63:0] tmp_58_fu_536_p1;
reg   [63:0] tmp_58_reg_671;
wire   [0:0] tmp_56_fu_524_p2;
reg   [6:0] acc_V_address0;
reg    acc_V_ce0;
reg    acc_V_we0;
reg   [11:0] acc_V_d0;
wire   [11:0] acc_V_q0;
wire    grp_product_fu_274_ap_start;
wire    grp_product_fu_274_ap_idle;
reg   [6:0] iacc_reg_198;
wire    ap_CS_fsm_state3;
reg   [10:0] w_index_reg_209;
reg  signed [31:0] in_index_reg_220;
reg   [2:0] im_reg_232;
reg   [6:0] out_index7_reg_243;
reg   [13:0] w_index7_reg_253;
reg   [6:0] ires_reg_263;
wire    ap_CS_fsm_state30;
reg    grp_product_fu_274_ap_start_reg;
wire    ap_CS_fsm_state25;
wire   [63:0] tmp_s_fu_318_p1;
wire  signed [63:0] tmp_55_fu_323_p1;
wire   [63:0] tmp_32_fu_358_p1;
wire   [63:0] tmp_59_fu_416_p1;
wire  signed [11:0] b14_V_load_cast_fu_297_p1;
wire   [11:0] p_Val2_16_fu_442_p2;
wire   [11:0] grp_fu_348_p1;
wire   [13:0] grp_fu_348_p2;
wire   [2:0] tmp_6_fu_367_p4;
wire   [4:0] p_shl8_fu_384_p3;
wire   [6:0] p_shl_fu_376_p3;
wire   [6:0] p_shl8_cast_fu_392_p1;
wire   [6:0] tmp_34_fu_396_p2;
wire  signed [83:0] w14_V_load_cast_fu_363_p1;
wire   [83:0] tmp_60_fu_402_p1;
wire   [83:0] tmp_64_fu_406_p2;
wire  signed [11:0] lhs_V_fu_421_p0;
wire  signed [12:0] rhs_V_fu_425_p1;
wire  signed [12:0] lhs_V_fu_421_p1;
wire   [12:0] ret_V_fu_428_p2;
wire  signed [11:0] p_Val2_16_fu_442_p1;
wire   [0:0] p_Result_s_fu_434_p3;
wire   [0:0] p_Result_10_fu_448_p3;
wire   [0:0] tmp_21_fu_456_p2;
wire   [0:0] tmp_61_fu_468_p2;
wire   [31:0] in_index_2_fu_504_p2;
wire   [0:0] tmp_63_fu_510_p2;
wire   [15:0] mul_fu_541_p0;
wire   [13:0] mul_fu_541_p1;
reg    grp_fu_348_ap_start;
wire    grp_fu_348_ap_done;
reg   [29:0] ap_NS_fsm;
wire   [29:0] mul_fu_541_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 grp_product_fu_274_ap_start_reg = 1'b0;
end

dense_large_rf_gt_ni_3_b14_V #(
    .DataWidth( 2 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
b14_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b14_V_address0),
    .ce0(b14_V_ce0),
    .q0(b14_V_q0)
);

dense_large_rf_gt_ni_3_outidx4 #(
    .DataWidth( 4 ),
    .AddressRange( 1440 ),
    .AddressWidth( 11 ))
outidx4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(outidx4_address0),
    .ce0(outidx4_ce0),
    .q0(outidx4_q0)
);

dense_large_rf_gt_ni_3_w14_V #(
    .DataWidth( 77 ),
    .AddressRange( 1440 ),
    .AddressWidth( 11 ))
w14_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w14_V_address0),
    .ce0(w14_V_ce0),
    .q0(w14_V_q0)
);

dense_large_rf_gt_ni_3_acc_V #(
    .DataWidth( 12 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
acc_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_V_address0),
    .ce0(acc_V_ce0),
    .we0(acc_V_we0),
    .d0(acc_V_d0),
    .q0(acc_V_q0)
);

product grp_product_fu_274(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_product_fu_274_ap_start),
    .ap_done(grp_product_fu_274_ap_done),
    .ap_idle(grp_product_fu_274_ap_idle),
    .ap_ready(grp_product_fu_274_ap_ready),
    .a_V(extLd_reg_593),
    .w_V(tmp_65_reg_617),
    .ap_return(grp_product_fu_274_ap_return)
);

myproject_urem_14ns_12ns_14_18_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 14 ))
myproject_urem_14ns_12ns_14_18_seq_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_348_ap_start),
    .done(grp_fu_348_ap_done),
    .din0(w_index7_reg_253),
    .din1(grp_fu_348_p1),
    .ce(1'b1),
    .dout(grp_fu_348_p2)
);

myproject_mul_mul_16ns_14ns_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
myproject_mul_mul_16ns_14ns_30_1_1_U57(
    .din0(mul_fu_541_p0),
    .din1(mul_fu_541_p1),
    .dout(mul_fu_541_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_product_fu_274_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            grp_product_fu_274_ap_start_reg <= 1'b1;
        end else if ((grp_product_fu_274_ap_ready == 1'b1)) begin
            grp_product_fu_274_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iacc_reg_198 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        iacc_reg_198 <= iacc_2_reg_550;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_62_fu_492_p2 == 1'd0) & (tmp_57_reg_598 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        im_reg_232 <= im_2_reg_602;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        im_reg_232 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        in_index_reg_220 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state28) & ((tmp_62_fu_492_p2 == 1'd1) | (tmp_57_reg_598 == 1'd1)))) begin
        in_index_reg_220 <= p_s_fu_516_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_306_p2 == 1'd1))) begin
        ires_reg_263 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        ires_reg_263 <= ires_2_reg_666;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_62_fu_492_p2 == 1'd0) & (tmp_57_reg_598 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        out_index7_reg_243 <= out_index_2_fu_498_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_index7_reg_243 <= out_index_cast_fu_328_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_62_fu_492_p2 == 1'd0) & (tmp_57_reg_598 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        w_index7_reg_253 <= w_index_2_fu_486_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_index7_reg_253 <= w_index_cast_reg_565;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        w_index_reg_209 <= 11'd0;
    end else if (((1'b1 == ap_CS_fsm_state28) & ((tmp_62_fu_492_p2 == 1'd1) | (tmp_57_reg_598 == 1'd1)))) begin
        w_index_reg_209 <= ir_reg_573;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (grp_product_fu_274_ap_done == 1'b1))) begin
        acc_V_addr_4_reg_628 <= tmp_59_fu_416_p1;
        p_Val2_14_reg_622 <= grp_product_fu_274_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        brmerge9_reg_641 <= brmerge9_fu_480_p2;
        overflow_reg_633 <= overflow_fu_462_p2;
        underflow_reg_637 <= underflow_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        extLd_reg_593[10 : 0] <= extLd_fu_332_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        iacc_2_reg_550 <= iacc_2_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        im_2_reg_602 <= im_2_fu_342_p2;
        tmp_57_reg_598 <= tmp_57_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ir_reg_573 <= ir_fu_312_p2;
        w_index_cast_reg_565[10 : 0] <= w_index_cast_fu_302_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ires_2_reg_666 <= ires_2_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        mul_reg_607 <= mul_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_56_fu_524_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        tmp_58_reg_671[6 : 0] <= tmp_58_fu_536_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_65_reg_617 <= tmp_65_fu_412_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_555[6 : 0] <= tmp_fu_292_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        acc_V_address0 = tmp_58_fu_536_p1;
    end else if (((1'b1 == ap_CS_fsm_state27) | ((tmp_57_reg_598 == 1'd0) & (1'b1 == ap_CS_fsm_state28) & (brmerge9_reg_641 == 1'd1) & (overflow_reg_633 == 1'd1)) | ((overflow_reg_633 == 1'd0) & (tmp_57_reg_598 == 1'd0) & (1'b1 == ap_CS_fsm_state28) & (brmerge9_reg_641 == 1'd1) & (underflow_reg_637 == 1'd1)))) begin
        acc_V_address0 = acc_V_addr_4_reg_628;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        acc_V_address0 = tmp_59_fu_416_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        acc_V_address0 = tmp_reg_555;
    end else begin
        acc_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | ((tmp_57_reg_598 == 1'd0) & (1'b1 == ap_CS_fsm_state28) & (brmerge9_reg_641 == 1'd1) & (overflow_reg_633 == 1'd1)) | ((overflow_reg_633 == 1'd0) & (tmp_57_reg_598 == 1'd0) & (1'b1 == ap_CS_fsm_state28) & (brmerge9_reg_641 == 1'd1) & (underflow_reg_637 == 1'd1)) | ((1'b1 == ap_CS_fsm_state26) & (grp_product_fu_274_ap_done == 1'b1)))) begin
        acc_V_ce0 = 1'b1;
    end else begin
        acc_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_57_reg_598 == 1'd0) & (1'b1 == ap_CS_fsm_state28) & (brmerge9_reg_641 == 1'd1) & (overflow_reg_633 == 1'd1))) begin
        acc_V_d0 = 12'd2047;
    end else if (((overflow_reg_633 == 1'd0) & (tmp_57_reg_598 == 1'd0) & (1'b1 == ap_CS_fsm_state28) & (brmerge9_reg_641 == 1'd1) & (underflow_reg_637 == 1'd1))) begin
        acc_V_d0 = 12'd2048;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        acc_V_d0 = p_Val2_16_fu_442_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        acc_V_d0 = b14_V_load_cast_fu_297_p1;
    end else begin
        acc_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state27) | ((tmp_57_reg_598 == 1'd0) & (1'b1 == ap_CS_fsm_state28) & (brmerge9_reg_641 == 1'd1) & (overflow_reg_633 == 1'd1)) | ((overflow_reg_633 == 1'd0) & (tmp_57_reg_598 == 1'd0) & (1'b1 == ap_CS_fsm_state28) & (brmerge9_reg_641 == 1'd1) & (underflow_reg_637 == 1'd1)))) begin
        acc_V_we0 = 1'b1;
    end else begin
        acc_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state29) & (tmp_56_fu_524_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) & (tmp_56_fu_524_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b14_V_ce0 = 1'b1;
    end else begin
        b14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_57_fu_336_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_348_ap_start = 1'b1;
    end else begin
        grp_fu_348_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outidx4_ce0 = 1'b1;
    end else begin
        outidx4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        w14_V_ce0 = 1'b1;
    end else begin
        w14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond7_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_57_fu_336_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (grp_product_fu_274_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & ((tmp_62_fu_492_p2 == 1'd1) | (tmp_57_reg_598 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (tmp_56_fu_524_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign b14_V_address0 = tmp_fu_292_p1;

assign b14_V_load_cast_fu_297_p1 = $signed(b14_V_q0);

assign brmerge9_fu_480_p2 = (p_Result_s_fu_434_p3 ^ p_Result_10_fu_448_p3);

assign data_V_address0 = tmp_55_fu_323_p1;

assign exitcond7_fu_280_p2 = ((iacc_reg_198 == 7'd84) ? 1'b1 : 1'b0);

assign exitcond_fu_306_p2 = ((w_index_reg_209 == 11'd1440) ? 1'b1 : 1'b0);

assign extLd_fu_332_p1 = data_V_q0;

assign grp_fu_348_p1 = 14'd1440;

assign grp_product_fu_274_ap_start = grp_product_fu_274_ap_start_reg;

assign iacc_2_fu_286_p2 = (iacc_reg_198 + 7'd1);

assign im_2_fu_342_p2 = (im_reg_232 + 3'd1);

assign in_index_2_fu_504_p2 = ($signed(in_index_reg_220) + $signed(32'd1));

assign ir_fu_312_p2 = (w_index_reg_209 + 11'd1);

assign ires_2_fu_530_p2 = (ires_reg_263 + 7'd1);

assign lhs_V_fu_421_p0 = acc_V_q0;

assign lhs_V_fu_421_p1 = lhs_V_fu_421_p0;

assign mul_fu_541_p0 = 30'd23302;

assign mul_fu_541_p1 = mul_fu_541_p10;

assign mul_fu_541_p10 = w_index7_reg_253;

assign out_index_2_fu_498_p2 = (out_index7_reg_243 + 7'd12);

assign out_index_cast_fu_328_p1 = outidx4_q0;

assign outidx4_address0 = tmp_s_fu_318_p1;

assign overflow_fu_462_p2 = (tmp_21_fu_456_p2 & p_Result_10_fu_448_p3);

assign p_Result_10_fu_448_p3 = p_Val2_16_fu_442_p2[32'd11];

assign p_Result_s_fu_434_p3 = ret_V_fu_428_p2[32'd12];

assign p_Val2_16_fu_442_p1 = acc_V_q0;

assign p_Val2_16_fu_442_p2 = ($signed(p_Val2_14_reg_622) + $signed(p_Val2_16_fu_442_p1));

assign p_s_fu_516_p3 = ((tmp_63_fu_510_p2[0:0] === 1'b1) ? 32'd0 : in_index_2_fu_504_p2);

assign p_shl8_cast_fu_392_p1 = p_shl8_fu_384_p3;

assign p_shl8_fu_384_p3 = {{tmp_6_fu_367_p4}, {2'd0}};

assign p_shl_fu_376_p3 = {{tmp_6_fu_367_p4}, {4'd0}};

assign res_V_address0 = tmp_58_reg_671;

assign res_V_d0 = acc_V_q0;

assign ret_V_fu_428_p2 = ($signed(rhs_V_fu_425_p1) + $signed(lhs_V_fu_421_p1));

assign rhs_V_fu_425_p1 = p_Val2_14_reg_622;

assign tmp_21_fu_456_p2 = (p_Result_s_fu_434_p3 ^ 1'd1);

assign tmp_32_fu_358_p1 = grp_fu_348_p2;

assign tmp_34_fu_396_p2 = (p_shl_fu_376_p3 - p_shl8_cast_fu_392_p1);

assign tmp_55_fu_323_p1 = in_index_reg_220;

assign tmp_56_fu_524_p2 = ((ires_reg_263 == 7'd84) ? 1'b1 : 1'b0);

assign tmp_57_fu_336_p2 = ((im_reg_232 == 3'd7) ? 1'b1 : 1'b0);

assign tmp_58_fu_536_p1 = ires_reg_263;

assign tmp_59_fu_416_p1 = out_index7_reg_243;

assign tmp_60_fu_402_p1 = tmp_34_fu_396_p2;

assign tmp_61_fu_468_p2 = (p_Result_10_fu_448_p3 ^ 1'd1);

assign tmp_62_fu_492_p2 = ((w_index_2_fu_486_p2 > 14'd10079) ? 1'b1 : 1'b0);

assign tmp_63_fu_510_p2 = (($signed(in_index_2_fu_504_p2) > $signed(32'd119)) ? 1'b1 : 1'b0);

assign tmp_64_fu_406_p2 = w14_V_load_cast_fu_363_p1 >> tmp_60_fu_402_p1;

assign tmp_65_fu_412_p1 = tmp_64_fu_406_p2[11:0];

assign tmp_6_fu_367_p4 = {{mul_reg_607[27:25]}};

assign tmp_fu_292_p1 = iacc_reg_198;

assign tmp_s_fu_318_p1 = w_index_reg_209;

assign underflow_fu_474_p2 = (tmp_61_fu_468_p2 & p_Result_s_fu_434_p3);

assign w14_V_address0 = tmp_32_fu_358_p1;

assign w14_V_load_cast_fu_363_p1 = $signed(w14_V_q0);

assign w_index_2_fu_486_p2 = (w_index7_reg_253 + 14'd1440);

assign w_index_cast_fu_302_p1 = w_index_reg_209;

always @ (posedge ap_clk) begin
    tmp_reg_555[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    w_index_cast_reg_565[13:11] <= 3'b000;
    extLd_reg_593[11] <= 1'b0;
    tmp_58_reg_671[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense_large_rf_gt_ni_3
