// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_large_rf_gt_ni_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] data_V_address0;
output   data_V_ce0;
input  [11:0] data_V_q0;
output  [2:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [11:0] res_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg res_V_ce0;
reg res_V_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] b3_V_address0;
reg    b3_V_ce0;
wire   [1:0] b3_V_q0;
wire   [5:0] outidx7_address0;
reg    outidx7_ce0;
wire   [1:0] outidx7_q0;
wire   [5:0] w3_V_address0;
reg    w3_V_ce0;
wire   [16:0] w3_V_q0;
wire   [3:0] iacc_2_fu_284_p2;
reg   [3:0] iacc_2_reg_555;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_290_p1;
reg   [63:0] tmp_reg_560;
wire   [0:0] exitcond5_fu_278_p2;
wire   [7:0] w_index_cast_fu_300_p1;
reg   [7:0] w_index_cast_reg_570;
wire    ap_CS_fsm_state4;
wire   [6:0] ir_fu_310_p2;
reg   [6:0] ir_reg_578;
wire   [0:0] exitcond_fu_304_p2;
wire   [3:0] out_index_cast_fu_326_p1;
wire    ap_CS_fsm_state5;
reg   [11:0] data_V_load_reg_598;
wire   [0:0] tmp_82_fu_330_p3;
reg   [0:0] tmp_82_reg_603;
wire    ap_CS_fsm_state6;
wire   [1:0] im_2_fu_338_p2;
reg   [1:0] im_2_reg_607;
wire   [11:0] tmp_90_fu_411_p1;
reg   [11:0] tmp_90_reg_617;
wire    ap_CS_fsm_state7;
wire   [11:0] grp_product_fu_272_ap_return;
reg  signed [11:0] p_Val2_8_reg_622;
wire    ap_CS_fsm_state9;
wire    grp_product_fu_272_ap_ready;
wire    grp_product_fu_272_ap_done;
reg   [2:0] acc_V_addr_4_reg_628;
wire   [0:0] overflow_fu_461_p2;
reg   [0:0] overflow_reg_633;
wire    ap_CS_fsm_state10;
wire   [0:0] underflow_fu_473_p2;
reg   [0:0] underflow_reg_637;
wire   [0:0] brmerge7_fu_479_p2;
reg   [0:0] brmerge7_reg_641;
wire   [7:0] w_index_2_fu_485_p2;
wire    ap_CS_fsm_state11;
wire   [3:0] out_index_2_fu_499_p2;
wire   [0:0] tmp_93_fu_491_p3;
wire   [31:0] p_s_fu_527_p3;
wire   [3:0] ires_2_fu_541_p2;
reg   [3:0] ires_2_reg_666;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_73_fu_547_p1;
reg   [63:0] tmp_73_reg_671;
wire   [0:0] tmp_72_fu_535_p2;
reg   [2:0] acc_V_address0;
reg    acc_V_ce0;
reg    acc_V_we0;
reg   [11:0] acc_V_d0;
wire   [11:0] acc_V_q0;
wire    grp_product_fu_272_ap_start;
wire    grp_product_fu_272_ap_idle;
reg   [3:0] iacc_reg_196;
wire    ap_CS_fsm_state3;
reg   [6:0] w_index_reg_207;
reg  signed [31:0] in_index_reg_218;
reg   [1:0] im_reg_230;
reg   [3:0] out_index3_reg_241;
reg   [7:0] w_index3_reg_251;
reg   [3:0] ires_reg_261;
wire    ap_CS_fsm_state13;
reg    grp_product_fu_272_ap_start_reg;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_s_fu_316_p1;
wire  signed [63:0] tmp_71_fu_321_p1;
wire   [63:0] tmp_14_fu_348_p1;
wire   [63:0] tmp_74_fu_415_p1;
wire  signed [11:0] b3_V_load_cast_fu_295_p1;
wire   [11:0] p_Val2_21_fu_441_p2;
wire   [5:0] tmp_83_fu_344_p1;
wire   [1:0] tmp_11_fu_357_p4;
wire   [0:0] tmp_84_fu_367_p3;
wire   [3:0] p_shl8_fu_375_p3;
wire   [4:0] tmp_85_fu_383_p3;
wire   [4:0] tmp_86_fu_391_p1;
wire   [4:0] tmp_87_fu_395_p2;
wire  signed [23:0] w3_V_load_cast_fu_353_p1;
wire   [23:0] tmp_88_fu_401_p1;
wire   [23:0] tmp_89_fu_405_p2;
wire  signed [11:0] lhs_V_fu_420_p0;
wire  signed [12:0] lhs_V_fu_420_p1;
wire  signed [12:0] rhs_V_fu_424_p1;
wire   [12:0] ret_V_fu_427_p2;
wire  signed [11:0] p_Val2_21_fu_441_p0;
wire   [0:0] p_Result_s_fu_433_p3;
wire   [0:0] p_Result_12_fu_447_p3;
wire   [0:0] tmp_19_fu_455_p2;
wire   [0:0] tmp_75_fu_467_p2;
wire   [31:0] in_index_2_fu_505_p2;
wire   [27:0] tmp_94_fu_511_p4;
wire   [0:0] icmp_fu_521_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 grp_product_fu_272_ap_start_reg = 1'b0;
end

dense_large_rf_gt_ni_1_b3_V #(
    .DataWidth( 2 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
b3_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b3_V_address0),
    .ce0(b3_V_ce0),
    .q0(b3_V_q0)
);

dense_large_rf_gt_ni_1_outidx7 #(
    .DataWidth( 2 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
outidx7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(outidx7_address0),
    .ce0(outidx7_ce0),
    .q0(outidx7_q0)
);

dense_large_rf_gt_ni_1_w3_V #(
    .DataWidth( 17 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
w3_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w3_V_address0),
    .ce0(w3_V_ce0),
    .q0(w3_V_q0)
);

dense_large_rf_gt_ni_1_acc_V #(
    .DataWidth( 12 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
acc_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_V_address0),
    .ce0(acc_V_ce0),
    .we0(acc_V_we0),
    .d0(acc_V_d0),
    .q0(acc_V_q0)
);

product grp_product_fu_272(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_product_fu_272_ap_start),
    .ap_done(grp_product_fu_272_ap_done),
    .ap_idle(grp_product_fu_272_ap_idle),
    .ap_ready(grp_product_fu_272_ap_ready),
    .a_V(data_V_load_reg_598),
    .w_V(tmp_90_reg_617),
    .ap_return(grp_product_fu_272_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_product_fu_272_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_product_fu_272_ap_start_reg <= 1'b1;
        end else if ((grp_product_fu_272_ap_ready == 1'b1)) begin
            grp_product_fu_272_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        iacc_reg_196 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        iacc_reg_196 <= iacc_2_reg_555;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_93_fu_491_p3 == 1'd0) & (tmp_82_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        im_reg_230 <= im_2_reg_607;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        im_reg_230 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        in_index_reg_218 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & ((tmp_93_fu_491_p3 == 1'd1) | (tmp_82_reg_603 == 1'd1)))) begin
        in_index_reg_218 <= p_s_fu_527_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ires_reg_261 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ires_reg_261 <= ires_2_reg_666;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_93_fu_491_p3 == 1'd0) & (tmp_82_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        out_index3_reg_241 <= out_index_2_fu_499_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_index3_reg_241 <= out_index_cast_fu_326_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_93_fu_491_p3 == 1'd0) & (tmp_82_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        w_index3_reg_251 <= w_index_2_fu_485_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_index3_reg_251 <= w_index_cast_reg_570;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        w_index_reg_207 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & ((tmp_93_fu_491_p3 == 1'd1) | (tmp_82_reg_603 == 1'd1)))) begin
        w_index_reg_207 <= ir_reg_578;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (grp_product_fu_272_ap_done == 1'b1))) begin
        acc_V_addr_4_reg_628 <= tmp_74_fu_415_p1;
        p_Val2_8_reg_622 <= grp_product_fu_272_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge7_reg_641 <= brmerge7_fu_479_p2;
        overflow_reg_633 <= overflow_fu_461_p2;
        underflow_reg_637 <= underflow_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_V_load_reg_598 <= data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        iacc_2_reg_555 <= iacc_2_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        im_2_reg_607 <= im_2_fu_338_p2;
        tmp_82_reg_603 <= im_reg_230[32'd1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ir_reg_578 <= ir_fu_310_p2;
        w_index_cast_reg_570[6 : 0] <= w_index_cast_fu_300_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ires_2_reg_666 <= ires_2_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_72_fu_535_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_73_reg_671[3 : 0] <= tmp_73_fu_547_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_90_reg_617 <= tmp_90_fu_411_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_560[3 : 0] <= tmp_fu_290_p1[3 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        acc_V_address0 = tmp_73_fu_547_p1;
    end else if (((1'b1 == ap_CS_fsm_state10) | ((tmp_82_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (brmerge7_reg_641 == 1'd1) & (overflow_reg_633 == 1'd1)) | ((overflow_reg_633 == 1'd0) & (tmp_82_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (brmerge7_reg_641 == 1'd1) & (underflow_reg_637 == 1'd1)))) begin
        acc_V_address0 = acc_V_addr_4_reg_628;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        acc_V_address0 = tmp_74_fu_415_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        acc_V_address0 = tmp_reg_560;
    end else begin
        acc_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((tmp_82_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (brmerge7_reg_641 == 1'd1) & (overflow_reg_633 == 1'd1)) | ((overflow_reg_633 == 1'd0) & (tmp_82_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (brmerge7_reg_641 == 1'd1) & (underflow_reg_637 == 1'd1)) | ((1'b1 == ap_CS_fsm_state9) & (grp_product_fu_272_ap_done == 1'b1)))) begin
        acc_V_ce0 = 1'b1;
    end else begin
        acc_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_82_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (brmerge7_reg_641 == 1'd1) & (overflow_reg_633 == 1'd1))) begin
        acc_V_d0 = 12'd2047;
    end else if (((overflow_reg_633 == 1'd0) & (tmp_82_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (brmerge7_reg_641 == 1'd1) & (underflow_reg_637 == 1'd1))) begin
        acc_V_d0 = 12'd2048;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        acc_V_d0 = p_Val2_21_fu_441_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        acc_V_d0 = b3_V_load_cast_fu_295_p1;
    end else begin
        acc_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | ((tmp_82_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (brmerge7_reg_641 == 1'd1) & (overflow_reg_633 == 1'd1)) | ((overflow_reg_633 == 1'd0) & (tmp_82_reg_603 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (brmerge7_reg_641 == 1'd1) & (underflow_reg_637 == 1'd1)))) begin
        acc_V_we0 = 1'b1;
    end else begin
        acc_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state12) & (tmp_72_fu_535_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_72_fu_535_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b3_V_ce0 = 1'b1;
    end else begin
        b3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outidx7_ce0 = 1'b1;
    end else begin
        outidx7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        w3_V_ce0 = 1'b1;
    end else begin
        w3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond5_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_82_fu_330_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_product_fu_272_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & ((tmp_93_fu_491_p3 == 1'd1) | (tmp_82_reg_603 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (tmp_72_fu_535_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b3_V_address0 = tmp_fu_290_p1;

assign b3_V_load_cast_fu_295_p1 = $signed(b3_V_q0);

assign brmerge7_fu_479_p2 = (p_Result_s_fu_433_p3 ^ p_Result_12_fu_447_p3);

assign data_V_address0 = tmp_71_fu_321_p1;

assign exitcond5_fu_278_p2 = ((iacc_reg_196 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_304_p2 = ((w_index_reg_207 == 7'd64) ? 1'b1 : 1'b0);

assign grp_product_fu_272_ap_start = grp_product_fu_272_ap_start_reg;

assign iacc_2_fu_284_p2 = (iacc_reg_196 + 4'd1);

assign icmp_fu_521_p2 = (($signed(tmp_94_fu_511_p4) > $signed(28'd0)) ? 1'b1 : 1'b0);

assign im_2_fu_338_p2 = (im_reg_230 + 2'd1);

assign in_index_2_fu_505_p2 = ($signed(in_index_reg_218) + $signed(32'd1));

assign ir_fu_310_p2 = (w_index_reg_207 + 7'd1);

assign ires_2_fu_541_p2 = (ires_reg_261 + 4'd1);

assign lhs_V_fu_420_p0 = acc_V_q0;

assign lhs_V_fu_420_p1 = lhs_V_fu_420_p0;

assign out_index_2_fu_499_p2 = (out_index3_reg_241 + 4'd4);

assign out_index_cast_fu_326_p1 = outidx7_q0;

assign outidx7_address0 = tmp_s_fu_316_p1;

assign overflow_fu_461_p2 = (tmp_19_fu_455_p2 & p_Result_12_fu_447_p3);

assign p_Result_12_fu_447_p3 = p_Val2_21_fu_441_p2[32'd11];

assign p_Result_s_fu_433_p3 = ret_V_fu_427_p2[32'd12];

assign p_Val2_21_fu_441_p0 = acc_V_q0;

assign p_Val2_21_fu_441_p2 = ($signed(p_Val2_21_fu_441_p0) + $signed(p_Val2_8_reg_622));

assign p_s_fu_527_p3 = ((icmp_fu_521_p2[0:0] === 1'b1) ? 32'd0 : in_index_2_fu_505_p2);

assign p_shl8_fu_375_p3 = {{tmp_11_fu_357_p4}, {2'd0}};

assign res_V_address0 = tmp_73_reg_671;

assign res_V_d0 = acc_V_q0;

assign ret_V_fu_427_p2 = ($signed(lhs_V_fu_420_p1) + $signed(rhs_V_fu_424_p1));

assign rhs_V_fu_424_p1 = p_Val2_8_reg_622;

assign tmp_11_fu_357_p4 = {{w_index3_reg_251[7:6]}};

assign tmp_14_fu_348_p1 = tmp_83_fu_344_p1;

assign tmp_19_fu_455_p2 = (p_Result_s_fu_433_p3 ^ 1'd1);

assign tmp_71_fu_321_p1 = in_index_reg_218;

assign tmp_72_fu_535_p2 = ((ires_reg_261 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_73_fu_547_p1 = ires_reg_261;

assign tmp_74_fu_415_p1 = out_index3_reg_241;

assign tmp_75_fu_467_p2 = (p_Result_12_fu_447_p3 ^ 1'd1);

assign tmp_82_fu_330_p3 = im_reg_230[32'd1];

assign tmp_83_fu_344_p1 = w_index3_reg_251[5:0];

assign tmp_84_fu_367_p3 = w_index3_reg_251[32'd6];

assign tmp_85_fu_383_p3 = {{tmp_84_fu_367_p3}, {4'd0}};

assign tmp_86_fu_391_p1 = p_shl8_fu_375_p3;

assign tmp_87_fu_395_p2 = (tmp_85_fu_383_p3 - tmp_86_fu_391_p1);

assign tmp_88_fu_401_p1 = tmp_87_fu_395_p2;

assign tmp_89_fu_405_p2 = w3_V_load_cast_fu_353_p1 >> tmp_88_fu_401_p1;

assign tmp_90_fu_411_p1 = tmp_89_fu_405_p2[11:0];

assign tmp_93_fu_491_p3 = w_index_2_fu_485_p2[32'd7];

assign tmp_94_fu_511_p4 = {{in_index_2_fu_505_p2[31:4]}};

assign tmp_fu_290_p1 = iacc_reg_196;

assign tmp_s_fu_316_p1 = w_index_reg_207;

assign underflow_fu_473_p2 = (tmp_75_fu_467_p2 & p_Result_s_fu_433_p3);

assign w3_V_address0 = tmp_14_fu_348_p1;

assign w3_V_load_cast_fu_353_p1 = $signed(w3_V_q0);

assign w_index_2_fu_485_p2 = (w_index3_reg_251 + 8'd64);

assign w_index_cast_fu_300_p1 = w_index_reg_207;

always @ (posedge ap_clk) begin
    tmp_reg_560[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    w_index_cast_reg_570[7] <= 1'b0;
    tmp_73_reg_671[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense_large_rf_gt_ni_1
