// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reduce_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_0_V_read,
        x_1_V_read,
        x_2_V_read,
        x_3_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] x_0_V_read;
input  [17:0] x_1_V_read;
input  [17:0] x_2_V_read;
input  [17:0] x_3_V_read;
output  [17:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[17:0] ap_return;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_5_fu_120_p2;
wire    ap_CS_fsm_state2;
wire   [17:0] left_0_V_fu_142_p3;
wire   [0:0] exitcond2_fu_114_p2;
wire   [17:0] left_0_V_1_fu_150_p3;
wire   [1:0] i_6_fu_164_p2;
wire    ap_CS_fsm_state3;
wire   [17:0] right_0_V_fu_186_p3;
wire   [0:0] exitcond_fu_158_p2;
wire   [17:0] right_0_V_1_fu_194_p3;
reg   [17:0] p_Val2_9_reg_46;
reg   [17:0] p_Val2_s_reg_58;
reg   [1:0] i_reg_70;
reg   [17:0] p_Val2_10_reg_81;
reg   [17:0] p_Val2_1_reg_92;
reg   [1:0] i2_reg_103;
wire   [0:0] cond_fu_126_p2;
wire   [0:0] tmp_19_fu_138_p1;
wire   [17:0] left_1_V_fu_132_p3;
wire   [0:0] cond1_fu_170_p2;
wire   [0:0] tmp_20_fu_182_p1;
wire   [17:0] right_1_V_fu_176_p3;
wire   [17:0] tmp1_fu_208_p2;
wire   [17:0] tmp_fu_202_p2;
wire   [17:0] agg_result_i_fu_214_p2;
reg   [17:0] ap_return_preg;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_preg = 18'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 18'd0;
    end else begin
        if (((exitcond_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_return_preg <= agg_result_i_fu_214_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i2_reg_103 <= 2'd0;
    end else if (((exitcond_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i2_reg_103 <= i_6_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_70 <= i_5_fu_120_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_70 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Val2_10_reg_81 <= right_0_V_fu_186_p3;
        p_Val2_1_reg_92 <= right_0_V_1_fu_194_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_9_reg_46 <= left_0_V_fu_142_p3;
        p_Val2_s_reg_58 <= left_0_V_1_fu_150_p3;
    end
end

always @ (*) begin
    if ((((exitcond_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_return = agg_result_i_fu_214_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_i_fu_214_p2 = (tmp1_fu_208_p2 + tmp_fu_202_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign cond1_fu_170_p2 = ((i2_reg_103 == 2'd0) ? 1'b1 : 1'b0);

assign cond_fu_126_p2 = ((i_reg_70 == 2'd0) ? 1'b1 : 1'b0);

assign exitcond2_fu_114_p2 = ((i_reg_70 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_158_p2 = ((i2_reg_103 == 2'd2) ? 1'b1 : 1'b0);

assign i_5_fu_120_p2 = (i_reg_70 + 2'd1);

assign i_6_fu_164_p2 = (i2_reg_103 + 2'd1);

assign left_0_V_1_fu_150_p3 = ((tmp_19_fu_138_p1[0:0] === 1'b1) ? p_Val2_s_reg_58 : left_1_V_fu_132_p3);

assign left_0_V_fu_142_p3 = ((tmp_19_fu_138_p1[0:0] === 1'b1) ? left_1_V_fu_132_p3 : p_Val2_9_reg_46);

assign left_1_V_fu_132_p3 = ((cond_fu_126_p2[0:0] === 1'b1) ? x_0_V_read : x_1_V_read);

assign right_0_V_1_fu_194_p3 = ((tmp_20_fu_182_p1[0:0] === 1'b1) ? p_Val2_1_reg_92 : right_1_V_fu_176_p3);

assign right_0_V_fu_186_p3 = ((tmp_20_fu_182_p1[0:0] === 1'b1) ? right_1_V_fu_176_p3 : p_Val2_10_reg_81);

assign right_1_V_fu_176_p3 = ((cond1_fu_170_p2[0:0] === 1'b1) ? x_2_V_read : x_3_V_read);

assign tmp1_fu_208_p2 = (p_Val2_s_reg_58 + p_Val2_9_reg_46);

assign tmp_19_fu_138_p1 = i_reg_70[0:0];

assign tmp_20_fu_182_p1 = i2_reg_103[0:0];

assign tmp_fu_202_p2 = (p_Val2_10_reg_81 + p_Val2_1_reg_92);

endmodule //reduce_1
