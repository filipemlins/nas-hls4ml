// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] data_V_address0;
output   data_V_ce0;
input  [12:0] data_V_q0;
output  [3:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [12:0] res_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg res_V_ce0;
reg res_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] invert_table3_address0;
reg    invert_table3_ce0;
wire   [13:0] invert_table3_q0;
wire   [3:0] i_1_fu_172_p2;
reg   [3:0] i_1_reg_450;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_s_fu_178_p1;
reg   [63:0] tmp_s_reg_455;
wire   [0:0] tmp_fu_166_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
wire    grp_reduce_2_fu_161_ap_ready;
wire    grp_reduce_2_fu_161_ap_done;
wire  signed [31:0] tmp_22_cast_cast_fu_213_p1;
reg  signed [31:0] tmp_22_cast_cast_reg_475;
wire    ap_CS_fsm_state7;
wire   [3:0] i_2_fu_223_p2;
reg   [3:0] i_2_reg_483;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_4_fu_229_p1;
reg   [63:0] tmp_4_reg_488;
wire   [0:0] tmp_3_fu_217_p2;
wire   [17:0] exp_res_V_q0;
reg  signed [17:0] exp_res_V_load_reg_498;
wire    ap_CS_fsm_state9;
wire  signed [31:0] r_V_fu_438_p2;
reg  signed [31:0] r_V_reg_503;
wire    ap_CS_fsm_state10;
reg   [0:0] p_Result_s_reg_509;
reg   [0:0] p_Result_5_reg_515;
reg   [0:0] tmp_7_reg_521;
reg   [0:0] Range2_all_ones_reg_526;
reg   [9:0] exp_table_address0;
reg    exp_table_ce0;
reg    exp_table_we0;
wire   [17:0] exp_table_q0;
reg   [3:0] exp_res_V_address0;
reg    exp_res_V_ce0;
reg    exp_res_V_we0;
wire    grp_init_exp_table_fu_155_ap_start;
wire    grp_init_exp_table_fu_155_ap_done;
wire    grp_init_exp_table_fu_155_ap_idle;
wire    grp_init_exp_table_fu_155_ap_ready;
wire   [9:0] grp_init_exp_table_fu_155_table_out_V_address0;
wire    grp_init_exp_table_fu_155_table_out_V_ce0;
wire    grp_init_exp_table_fu_155_table_out_V_we0;
wire   [17:0] grp_init_exp_table_fu_155_table_out_V_d0;
wire    grp_reduce_2_fu_161_ap_start;
wire    grp_reduce_2_fu_161_ap_idle;
wire   [3:0] grp_reduce_2_fu_161_x_V_address0;
wire    grp_reduce_2_fu_161_x_V_ce0;
wire   [17:0] grp_reduce_2_fu_161_ap_return;
reg   [3:0] i_reg_133;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state2;
reg   [3:0] i3_reg_144;
wire    ap_CS_fsm_state11;
reg    grp_init_exp_table_fu_155_ap_start_reg;
reg    ap_block_state1_ignore_call2;
reg    grp_reduce_2_fu_161_ap_start_reg;
wire   [63:0] tmp_2_fu_193_p1;
wire   [63:0] tmp_1_fu_208_p1;
wire   [9:0] y_V_fu_183_p4;
wire   [9:0] y_V_2_fu_198_p4;
wire   [12:0] tmp_31_cast_fu_274_p1;
wire   [12:0] p_Val2_3_fu_265_p4;
wire   [12:0] p_Val2_4_fu_277_p2;
wire   [0:0] tmp_8_fu_283_p3;
wire   [0:0] rev_fu_291_p2;
wire   [0:0] tmp_12_fu_310_p3;
wire   [0:0] p_not1_fu_323_p2;
wire   [0:0] not_carry_1_fu_328_p2;
wire   [0:0] rev1_fu_317_p2;
wire   [0:0] p_s_fu_334_p2;
wire   [0:0] carry_1_fu_297_p2;
wire   [0:0] p_Result_6_fu_302_p3;
wire   [0:0] p_not_fu_350_p2;
wire   [0:0] brmerge_fu_355_p2;
wire   [0:0] tmp_9_fu_361_p2;
wire   [0:0] deleted_ones_fu_340_p2;
wire   [0:0] phitmp_demorgan_fu_345_p2;
wire   [0:0] brmerge192_demorgan_fu_372_p2;
wire   [0:0] tmp1_demorgan_fu_378_p2;
wire   [0:0] tmp1_fu_384_p2;
wire   [0:0] underflow_fu_390_p2;
wire   [0:0] overflow_fu_366_p2;
wire   [0:0] tmp2_fu_401_p2;
wire   [0:0] brmerge2_fu_395_p2;
wire   [0:0] p_197_not_fu_407_p2;
wire   [12:0] p_mux_fu_413_p3;
wire   [12:0] p_3_fu_421_p3;
wire  signed [13:0] r_V_fu_438_p0;
reg   [10:0] ap_NS_fsm;
reg    ap_block_state1;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
#0 grp_init_exp_table_fu_155_ap_start_reg = 1'b0;
#0 grp_reduce_2_fu_161_ap_start_reg = 1'b0;
end

softmax_invert_table3 #(
    .DataWidth( 14 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table3_address0),
    .ce0(invert_table3_ce0),
    .q0(invert_table3_q0)
);

softmax_exp_table #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table_address0),
    .ce0(exp_table_ce0),
    .we0(exp_table_we0),
    .d0(grp_init_exp_table_fu_155_table_out_V_d0),
    .q0(exp_table_q0)
);

softmax_exp_res_V #(
    .DataWidth( 18 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
exp_res_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_res_V_address0),
    .ce0(exp_res_V_ce0),
    .we0(exp_res_V_we0),
    .d0(exp_table_q0),
    .q0(exp_res_V_q0)
);

init_exp_table grp_init_exp_table_fu_155(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_init_exp_table_fu_155_ap_start),
    .ap_done(grp_init_exp_table_fu_155_ap_done),
    .ap_idle(grp_init_exp_table_fu_155_ap_idle),
    .ap_ready(grp_init_exp_table_fu_155_ap_ready),
    .table_out_V_address0(grp_init_exp_table_fu_155_table_out_V_address0),
    .table_out_V_ce0(grp_init_exp_table_fu_155_table_out_V_ce0),
    .table_out_V_we0(grp_init_exp_table_fu_155_table_out_V_we0),
    .table_out_V_d0(grp_init_exp_table_fu_155_table_out_V_d0)
);

reduce_2 grp_reduce_2_fu_161(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reduce_2_fu_161_ap_start),
    .ap_done(grp_reduce_2_fu_161_ap_done),
    .ap_idle(grp_reduce_2_fu_161_ap_idle),
    .ap_ready(grp_reduce_2_fu_161_ap_ready),
    .x_V_address0(grp_reduce_2_fu_161_x_V_address0),
    .x_V_ce0(grp_reduce_2_fu_161_x_V_ce0),
    .x_V_q0(exp_res_V_q0),
    .ap_return(grp_reduce_2_fu_161_ap_return)
);

myproject_mul_mul_14s_18s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 32 ))
myproject_mul_mul_14s_18s_32_1_1_U95(
    .din0(r_V_fu_438_p0),
    .din1(exp_res_V_load_reg_498),
    .dout(r_V_fu_438_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state8) & (tmp_3_fu_217_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_init_exp_table_fu_155_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_init_exp_table_fu_155_ap_start_reg <= 1'b1;
        end else if ((grp_init_exp_table_fu_155_ap_ready == 1'b1)) begin
            grp_init_exp_table_fu_155_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reduce_2_fu_161_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_reduce_2_fu_161_ap_start_reg <= 1'b1;
        end else if ((grp_reduce_2_fu_161_ap_ready == 1'b1)) begin
            grp_reduce_2_fu_161_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i3_reg_144 <= i_2_reg_483;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i3_reg_144 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_init_exp_table_fu_155_ap_done == 1'b1))) begin
        i_reg_133 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_133 <= i_1_reg_450;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        Range2_all_ones_reg_526 <= r_V_fu_438_p2[32'd31];
        p_Result_5_reg_515 <= r_V_fu_438_p2[32'd30];
        p_Result_s_reg_509 <= r_V_fu_438_p2[32'd30];
        r_V_reg_503 <= r_V_fu_438_p2;
        tmp_7_reg_521 <= r_V_fu_438_p2[32'd17];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        exp_res_V_load_reg_498 <= exp_res_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_450 <= i_1_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_2_reg_483 <= i_2_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_22_cast_cast_reg_475 <= tmp_22_cast_cast_fu_213_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_4_reg_488[3 : 0] <= tmp_4_fu_229_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_s_reg_455[3 : 0] <= tmp_s_fu_178_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_3_fu_217_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_3_fu_217_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        exp_res_V_address0 = tmp_4_fu_229_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        exp_res_V_address0 = tmp_s_reg_455;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        exp_res_V_address0 = grp_reduce_2_fu_161_x_V_address0;
    end else begin
        exp_res_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        exp_res_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        exp_res_V_ce0 = grp_reduce_2_fu_161_x_V_ce0;
    end else begin
        exp_res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        exp_res_V_we0 = 1'b1;
    end else begin
        exp_res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        exp_table_address0 = tmp_2_fu_193_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        exp_table_address0 = grp_init_exp_table_fu_155_table_out_V_address0;
    end else begin
        exp_table_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        exp_table_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        exp_table_ce0 = grp_init_exp_table_fu_155_table_out_V_ce0;
    end else begin
        exp_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        exp_table_we0 = grp_init_exp_table_fu_155_table_out_V_we0;
    end else begin
        exp_table_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_reduce_2_fu_161_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        invert_table3_ce0 = 1'b1;
    end else begin
        invert_table3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_init_exp_table_fu_155_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_reduce_2_fu_161_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (tmp_3_fu_217_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call2 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign brmerge192_demorgan_fu_372_p2 = (p_Result_6_fu_302_p3 & deleted_ones_fu_340_p2);

assign brmerge2_fu_395_p2 = (underflow_fu_390_p2 | overflow_fu_366_p2);

assign brmerge_fu_355_p2 = (p_not_fu_350_p2 | p_Result_6_fu_302_p3);

assign carry_1_fu_297_p2 = (rev_fu_291_p2 & p_Result_5_reg_515);

assign data_V_address0 = tmp_s_fu_178_p1;

assign deleted_ones_fu_340_p2 = (p_s_fu_334_p2 & Range2_all_ones_reg_526);

assign grp_init_exp_table_fu_155_ap_start = grp_init_exp_table_fu_155_ap_start_reg;

assign grp_reduce_2_fu_161_ap_start = grp_reduce_2_fu_161_ap_start_reg;

assign i_1_fu_172_p2 = (i_reg_133 + 4'd1);

assign i_2_fu_223_p2 = (i3_reg_144 + 4'd1);

assign invert_table3_address0 = tmp_1_fu_208_p1;

assign not_carry_1_fu_328_p2 = (tmp_8_fu_283_p3 | p_not1_fu_323_p2);

assign overflow_fu_366_p2 = (tmp_9_fu_361_p2 & brmerge_fu_355_p2);

assign p_197_not_fu_407_p2 = (tmp2_fu_401_p2 | phitmp_demorgan_fu_345_p2);

assign p_3_fu_421_p3 = ((underflow_fu_390_p2[0:0] === 1'b1) ? 13'd4096 : p_Val2_4_fu_277_p2);

assign p_Result_6_fu_302_p3 = p_Val2_4_fu_277_p2[32'd12];

assign p_Val2_3_fu_265_p4 = {{r_V_reg_503[30:18]}};

assign p_Val2_4_fu_277_p2 = (tmp_31_cast_fu_274_p1 + p_Val2_3_fu_265_p4);

assign p_mux_fu_413_p3 = ((brmerge2_fu_395_p2[0:0] === 1'b1) ? 13'd4095 : p_Val2_4_fu_277_p2);

assign p_not1_fu_323_p2 = (p_Result_5_reg_515 ^ 1'd1);

assign p_not_fu_350_p2 = (carry_1_fu_297_p2 ^ Range2_all_ones_reg_526);

assign p_s_fu_334_p2 = (rev1_fu_317_p2 | not_carry_1_fu_328_p2);

assign phitmp_demorgan_fu_345_p2 = (carry_1_fu_297_p2 & Range2_all_ones_reg_526);

assign r_V_fu_438_p0 = tmp_22_cast_cast_reg_475;

assign res_V_address0 = tmp_4_reg_488;

assign res_V_d0 = ((p_197_not_fu_407_p2[0:0] === 1'b1) ? p_mux_fu_413_p3 : p_3_fu_421_p3);

assign rev1_fu_317_p2 = (tmp_12_fu_310_p3 ^ 1'd1);

assign rev_fu_291_p2 = (tmp_8_fu_283_p3 ^ 1'd1);

assign tmp1_demorgan_fu_378_p2 = (phitmp_demorgan_fu_345_p2 | brmerge192_demorgan_fu_372_p2);

assign tmp1_fu_384_p2 = (tmp1_demorgan_fu_378_p2 ^ 1'd1);

assign tmp2_fu_401_p2 = (tmp_9_fu_361_p2 | brmerge192_demorgan_fu_372_p2);

assign tmp_12_fu_310_p3 = r_V_reg_503[32'd30];

assign tmp_1_fu_208_p1 = y_V_2_fu_198_p4;

assign tmp_22_cast_cast_fu_213_p1 = $signed(invert_table3_q0);

assign tmp_2_fu_193_p1 = y_V_fu_183_p4;

assign tmp_31_cast_fu_274_p1 = tmp_7_reg_521;

assign tmp_3_fu_217_p2 = ((i3_reg_144 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_4_fu_229_p1 = i3_reg_144;

assign tmp_8_fu_283_p3 = p_Val2_4_fu_277_p2[32'd12];

assign tmp_9_fu_361_p2 = (p_Result_s_reg_509 ^ 1'd1);

assign tmp_fu_166_p2 = ((i_reg_133 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_s_fu_178_p1 = i_reg_133;

assign underflow_fu_390_p2 = (tmp1_fu_384_p2 & p_Result_s_reg_509);

assign y_V_2_fu_198_p4 = {{grp_reduce_2_fu_161_ap_return[17:8]}};

assign y_V_fu_183_p4 = {{data_V_q0[12:3]}};

always @ (posedge ap_clk) begin
    tmp_s_reg_455[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_4_reg_488[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //softmax
