// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_large_rf_gt_ni_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] data_V_address0;
output   data_V_ce0;
input  [12:0] data_V_q0;
output  [6:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [12:0] res_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg res_V_ce0;
reg res_V_we0;

(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] outidx5_address0;
reg    outidx5_ce0;
wire   [1:0] outidx5_q0;
wire   [10:0] w11_V_address0;
reg    w11_V_ce0;
wire   [507:0] w11_V_q0;
wire   [6:0] iacc_1_fu_276_p2;
wire    ap_CS_fsm_state2;
wire   [16:0] w_index_cast_fu_287_p1;
reg   [16:0] w_index_cast_reg_570;
wire    ap_CS_fsm_state3;
wire   [10:0] ir_fu_297_p2;
reg   [10:0] ir_reg_578;
wire   [0:0] exitcond_fu_291_p2;
wire   [6:0] out_index_cast9_fu_313_p1;
wire    ap_CS_fsm_state4;
reg   [12:0] data_V_load_reg_598;
wire   [0:0] tmp_74_fu_317_p2;
reg   [0:0] tmp_74_reg_603;
wire    ap_CS_fsm_state5;
wire   [5:0] im_1_fu_323_p2;
reg   [5:0] im_1_reg_607;
wire   [35:0] mul_fu_556_p2;
reg   [35:0] mul_reg_612;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire   [10:0] tmp_72_fu_357_p2;
reg   [10:0] tmp_72_reg_622;
wire   [9:0] tmp_78_fu_363_p1;
reg   [9:0] tmp_78_reg_627;
wire   [9:0] tmp_83_fu_367_p1;
reg   [9:0] tmp_83_reg_632;
wire   [12:0] tmp_90_fu_429_p1;
reg   [12:0] tmp_90_reg_638;
wire    ap_CS_fsm_state26;
reg   [6:0] acc_V_addr_2_reg_643;
wire    ap_CS_fsm_state27;
wire   [12:0] grp_product_fu_264_ap_return;
reg  signed [12:0] p_Val2_14_reg_648;
wire    ap_CS_fsm_state28;
wire    grp_product_fu_264_ap_ready;
wire    grp_product_fu_264_ap_done;
wire   [12:0] acc_V_q0;
reg  signed [12:0] p_Val2_s_reg_654;
wire   [0:0] overflow_fu_477_p2;
reg   [0:0] overflow_reg_660;
wire    ap_CS_fsm_state29;
wire   [0:0] underflow_fu_489_p2;
reg   [0:0] underflow_reg_664;
wire   [0:0] brmerge1_fu_495_p2;
reg   [0:0] brmerge1_reg_668;
wire   [16:0] w_index_1_fu_501_p2;
wire    ap_CS_fsm_state30;
wire   [6:0] out_index_1_fu_513_p2;
wire   [0:0] tmp_81_fu_507_p2;
wire   [31:0] p_s_fu_531_p3;
wire   [6:0] ires_1_fu_545_p2;
reg   [6:0] ires_1_reg_693;
wire    ap_CS_fsm_state31;
wire   [63:0] tmp_75_fu_551_p1;
reg   [63:0] tmp_75_reg_698;
wire   [0:0] tmp_69_fu_539_p2;
reg   [6:0] acc_V_address0;
reg    acc_V_ce0;
reg    acc_V_we0;
reg   [12:0] acc_V_d0;
wire    grp_product_fu_264_ap_start;
wire    grp_product_fu_264_ap_idle;
reg   [6:0] iacc_reg_188;
wire   [0:0] exitcond8_fu_270_p2;
reg   [10:0] w_index_reg_199;
reg  signed [31:0] in_index_reg_210;
reg   [5:0] im_reg_222;
reg   [6:0] out_index9_reg_233;
reg   [16:0] w_index9_reg_243;
reg   [6:0] ires_reg_253;
wire    ap_CS_fsm_state32;
reg    grp_product_fu_264_ap_start_reg;
wire   [63:0] tmp_fu_282_p1;
wire   [63:0] tmp_s_fu_303_p1;
wire  signed [63:0] tmp_67_fu_308_p1;
wire   [63:0] tmp_70_fu_339_p1;
wire   [63:0] tmp_76_fu_433_p1;
wire   [12:0] p_Val2_16_fu_458_p2;
wire   [11:0] grp_fu_329_p1;
wire   [16:0] grp_fu_329_p2;
wire   [7:0] tmp_77_fu_344_p4;
wire  signed [7:0] tmp_72_fu_357_p1;
wire   [9:0] tmp_73_fu_375_p2;
wire   [10:0] tmp_73_cast_fu_380_p1;
wire  signed [519:0] w11_V_load_cast_fu_371_p1;
wire   [0:0] tmp_79_fu_384_p2;
reg   [519:0] tmp_84_fu_389_p4;
wire   [9:0] tmp_85_fu_399_p2;
wire   [9:0] tmp_87_fu_412_p3;
wire   [519:0] tmp_86_fu_404_p3;
wire   [519:0] tmp_88_fu_419_p1;
wire   [519:0] tmp_89_fu_423_p2;
wire  signed [13:0] lhs_V_fu_438_p1;
wire  signed [13:0] rhs_V_fu_441_p1;
wire   [13:0] ret_V_fu_444_p2;
wire   [0:0] p_Result_s_fu_450_p3;
wire   [0:0] p_Result_23_fu_463_p3;
wire   [0:0] tmp_16_fu_471_p2;
wire   [0:0] tmp_80_fu_483_p2;
wire   [31:0] in_index_1_fu_519_p2;
wire   [0:0] tmp_82_fu_525_p2;
wire   [18:0] mul_fu_556_p0;
wire   [16:0] mul_fu_556_p1;
reg    grp_fu_329_ap_start;
wire    grp_fu_329_ap_done;
reg   [31:0] ap_NS_fsm;
wire   [35:0] mul_fu_556_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
#0 grp_product_fu_264_ap_start_reg = 1'b0;
end

dense_large_rf_gt_ni_4_outidx5 #(
    .DataWidth( 2 ),
    .AddressRange( 1728 ),
    .AddressWidth( 11 ))
outidx5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(outidx5_address0),
    .ce0(outidx5_ce0),
    .q0(outidx5_q0)
);

dense_large_rf_gt_ni_4_w11_V #(
    .DataWidth( 508 ),
    .AddressRange( 1728 ),
    .AddressWidth( 11 ))
w11_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w11_V_address0),
    .ce0(w11_V_ce0),
    .q0(w11_V_q0)
);

dense_large_rf_gt_ni_4_acc_V #(
    .DataWidth( 13 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
acc_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_V_address0),
    .ce0(acc_V_ce0),
    .we0(acc_V_we0),
    .d0(acc_V_d0),
    .q0(acc_V_q0)
);

product grp_product_fu_264(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_product_fu_264_ap_start),
    .ap_done(grp_product_fu_264_ap_done),
    .ap_idle(grp_product_fu_264_ap_idle),
    .ap_ready(grp_product_fu_264_ap_ready),
    .a_V(data_V_load_reg_598),
    .w_V(tmp_90_reg_638),
    .ap_return(grp_product_fu_264_ap_return)
);

myproject_urem_17ns_12ns_17_21_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 17 ))
myproject_urem_17ns_12ns_17_21_seq_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_329_ap_start),
    .done(grp_fu_329_ap_done),
    .din0(w_index9_reg_243),
    .din1(grp_fu_329_p1),
    .ce(1'b1),
    .dout(grp_fu_329_p2)
);

myproject_mul_mul_19ns_17ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 36 ))
myproject_mul_mul_19ns_17ns_36_1_1_U41(
    .din0(mul_fu_556_p0),
    .din1(mul_fu_556_p1),
    .dout(mul_fu_556_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_product_fu_264_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            grp_product_fu_264_ap_start_reg <= 1'b1;
        end else if ((grp_product_fu_264_ap_ready == 1'b1)) begin
            grp_product_fu_264_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iacc_reg_188 <= 7'd0;
    end else if (((exitcond8_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        iacc_reg_188 <= iacc_1_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_81_fu_507_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30) & (tmp_74_reg_603 == 1'd1))) begin
        im_reg_222 <= im_1_reg_607;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        im_reg_222 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_270_p2 == 1'd1))) begin
        in_index_reg_210 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state30) & ((tmp_74_reg_603 == 1'd0) | (tmp_81_fu_507_p2 == 1'd1)))) begin
        in_index_reg_210 <= p_s_fu_531_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_291_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ires_reg_253 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        ires_reg_253 <= ires_1_reg_693;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_81_fu_507_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30) & (tmp_74_reg_603 == 1'd1))) begin
        out_index9_reg_233 <= out_index_1_fu_513_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_index9_reg_233 <= out_index_cast9_fu_313_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_81_fu_507_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30) & (tmp_74_reg_603 == 1'd1))) begin
        w_index9_reg_243 <= w_index_1_fu_501_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        w_index9_reg_243 <= w_index_cast_reg_570;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_270_p2 == 1'd1))) begin
        w_index_reg_199 <= 11'd0;
    end else if (((1'b1 == ap_CS_fsm_state30) & ((tmp_74_reg_603 == 1'd0) | (tmp_81_fu_507_p2 == 1'd1)))) begin
        w_index_reg_199 <= ir_reg_578;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        acc_V_addr_2_reg_643 <= tmp_76_fu_433_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        brmerge1_reg_668 <= brmerge1_fu_495_p2;
        overflow_reg_660 <= overflow_fu_477_p2;
        underflow_reg_664 <= underflow_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_V_load_reg_598 <= data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        im_1_reg_607 <= im_1_fu_323_p2;
        tmp_74_reg_603 <= tmp_74_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ir_reg_578 <= ir_fu_297_p2;
        w_index_cast_reg_570[10 : 0] <= w_index_cast_fu_287_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        ires_1_reg_693 <= ires_1_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_reg_612 <= mul_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (grp_product_fu_264_ap_done == 1'b1))) begin
        p_Val2_14_reg_648 <= grp_product_fu_264_ap_return;
        p_Val2_s_reg_654 <= acc_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_72_reg_622 <= tmp_72_fu_357_p2;
        tmp_78_reg_627 <= tmp_78_fu_363_p1;
        tmp_83_reg_632 <= tmp_83_fu_367_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_69_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        tmp_75_reg_698[6 : 0] <= tmp_75_fu_551_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_90_reg_638 <= tmp_90_fu_429_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        acc_V_address0 = tmp_75_fu_551_p1;
    end else if (((1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state30) & (brmerge1_reg_668 == 1'd1) & (overflow_reg_660 == 1'd1) & (tmp_74_reg_603 == 1'd1)) | ((overflow_reg_660 == 1'd0) & (1'b1 == ap_CS_fsm_state30) & (brmerge1_reg_668 == 1'd1) & (underflow_reg_664 == 1'd1) & (tmp_74_reg_603 == 1'd1)))) begin
        acc_V_address0 = acc_V_addr_2_reg_643;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        acc_V_address0 = tmp_76_fu_433_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_V_address0 = tmp_fu_282_p1;
    end else begin
        acc_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state30) & (brmerge1_reg_668 == 1'd1) & (overflow_reg_660 == 1'd1) & (tmp_74_reg_603 == 1'd1)) | ((overflow_reg_660 == 1'd0) & (1'b1 == ap_CS_fsm_state30) & (brmerge1_reg_668 == 1'd1) & (underflow_reg_664 == 1'd1) & (tmp_74_reg_603 == 1'd1)))) begin
        acc_V_ce0 = 1'b1;
    end else begin
        acc_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (brmerge1_reg_668 == 1'd1) & (overflow_reg_660 == 1'd1) & (tmp_74_reg_603 == 1'd1))) begin
        acc_V_d0 = 13'd4095;
    end else if (((overflow_reg_660 == 1'd0) & (1'b1 == ap_CS_fsm_state30) & (brmerge1_reg_668 == 1'd1) & (underflow_reg_664 == 1'd1) & (tmp_74_reg_603 == 1'd1))) begin
        acc_V_d0 = 13'd4096;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        acc_V_d0 = p_Val2_16_fu_458_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_V_d0 = 13'd0;
    end else begin
        acc_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((exitcond8_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state30) & (brmerge1_reg_668 == 1'd1) & (overflow_reg_660 == 1'd1) & (tmp_74_reg_603 == 1'd1)) | ((overflow_reg_660 == 1'd0) & (1'b1 == ap_CS_fsm_state30) & (brmerge1_reg_668 == 1'd1) & (underflow_reg_664 == 1'd1) & (tmp_74_reg_603 == 1'd1)))) begin
        acc_V_we0 = 1'b1;
    end else begin
        acc_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state31) & (tmp_69_fu_539_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) & (tmp_69_fu_539_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_74_fu_317_p2 == 1'd1))) begin
        grp_fu_329_ap_start = 1'b1;
    end else begin
        grp_fu_329_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        outidx5_ce0 = 1'b1;
    end else begin
        outidx5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        w11_V_ce0 = 1'b1;
    end else begin
        w11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_270_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_291_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_74_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (grp_product_fu_264_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & ((tmp_74_reg_603 == 1'd0) | (tmp_81_fu_507_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (tmp_69_fu_539_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign brmerge1_fu_495_p2 = (p_Result_s_fu_450_p3 ^ p_Result_23_fu_463_p3);

assign data_V_address0 = tmp_67_fu_308_p1;

assign exitcond8_fu_270_p2 = ((iacc_reg_188 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_fu_291_p2 = ((w_index_reg_199 == 11'd1728) ? 1'b1 : 1'b0);

assign grp_fu_329_p1 = 17'd1728;

assign grp_product_fu_264_ap_start = grp_product_fu_264_ap_start_reg;

assign iacc_1_fu_276_p2 = (iacc_reg_188 + 7'd1);

assign im_1_fu_323_p2 = (im_reg_222 + 6'd1);

assign in_index_1_fu_519_p2 = ($signed(in_index_reg_210) + $signed(32'd1));

assign ir_fu_297_p2 = (w_index_reg_199 + 11'd1);

assign ires_1_fu_545_p2 = (ires_reg_253 + 7'd1);

assign lhs_V_fu_438_p1 = p_Val2_s_reg_654;

assign mul_fu_556_p0 = 36'd155345;

assign mul_fu_556_p1 = mul_fu_556_p10;

assign mul_fu_556_p10 = w_index9_reg_243;

assign out_index_1_fu_513_p2 = (out_index9_reg_233 + 7'd3);

assign out_index_cast9_fu_313_p1 = outidx5_q0;

assign outidx5_address0 = tmp_s_fu_303_p1;

assign overflow_fu_477_p2 = (tmp_16_fu_471_p2 & p_Result_23_fu_463_p3);

assign p_Result_23_fu_463_p3 = p_Val2_16_fu_458_p2[32'd12];

assign p_Result_s_fu_450_p3 = ret_V_fu_444_p2[32'd13];

assign p_Val2_16_fu_458_p2 = ($signed(p_Val2_14_reg_648) + $signed(p_Val2_s_reg_654));

assign p_s_fu_531_p3 = ((tmp_82_fu_525_p2[0:0] === 1'b1) ? 32'd0 : in_index_1_fu_519_p2);

assign res_V_address0 = tmp_75_reg_698;

assign res_V_d0 = acc_V_q0;

assign ret_V_fu_444_p2 = ($signed(lhs_V_fu_438_p1) + $signed(rhs_V_fu_441_p1));

assign rhs_V_fu_441_p1 = p_Val2_14_reg_648;

assign tmp_16_fu_471_p2 = (p_Result_s_fu_450_p3 ^ 1'd1);

assign tmp_67_fu_308_p1 = in_index_reg_210;

assign tmp_69_fu_539_p2 = ((ires_reg_253 == 7'd120) ? 1'b1 : 1'b0);

assign tmp_70_fu_339_p1 = grp_fu_329_p2;

assign tmp_72_fu_357_p1 = tmp_77_fu_344_p4;

assign tmp_72_fu_357_p2 = ($signed({{1'b0}, {11'd13}}) * $signed(tmp_72_fu_357_p1));

assign tmp_73_cast_fu_380_p1 = tmp_73_fu_375_p2;

assign tmp_73_fu_375_p2 = (10'd12 + tmp_78_reg_627);

assign tmp_74_fu_317_p2 = ((im_reg_222 < 6'd40) ? 1'b1 : 1'b0);

assign tmp_75_fu_551_p1 = ires_reg_253;

assign tmp_76_fu_433_p1 = out_index9_reg_233;

assign tmp_77_fu_344_p4 = {{mul_reg_612[35:28]}};

assign tmp_78_fu_363_p1 = tmp_72_fu_357_p2[9:0];

assign tmp_79_fu_384_p2 = ((tmp_72_reg_622 > tmp_73_cast_fu_380_p1) ? 1'b1 : 1'b0);

assign tmp_80_fu_483_p2 = (p_Result_23_fu_463_p3 ^ 1'd1);

assign tmp_81_fu_507_p2 = ((w_index_1_fu_501_p2 > 17'd69119) ? 1'b1 : 1'b0);

assign tmp_82_fu_525_p2 = (($signed(in_index_1_fu_519_p2) > $signed(32'd575)) ? 1'b1 : 1'b0);

assign tmp_83_fu_367_p1 = tmp_72_fu_357_p2[9:0];

integer ap_tvar_int_0;

always @ (w11_V_load_cast_fu_371_p1) begin
    for (ap_tvar_int_0 = 520 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 519 - 0) begin
            tmp_84_fu_389_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_84_fu_389_p4[ap_tvar_int_0] = w11_V_load_cast_fu_371_p1[519 - ap_tvar_int_0];
        end
    end
end

assign tmp_85_fu_399_p2 = ($signed(10'd519) - $signed(tmp_83_reg_632));

assign tmp_86_fu_404_p3 = ((tmp_79_fu_384_p2[0:0] === 1'b1) ? tmp_84_fu_389_p4 : w11_V_load_cast_fu_371_p1);

assign tmp_87_fu_412_p3 = ((tmp_79_fu_384_p2[0:0] === 1'b1) ? tmp_85_fu_399_p2 : tmp_83_reg_632);

assign tmp_88_fu_419_p1 = tmp_87_fu_412_p3;

assign tmp_89_fu_423_p2 = tmp_86_fu_404_p3 >> tmp_88_fu_419_p1;

assign tmp_90_fu_429_p1 = tmp_89_fu_423_p2[12:0];

assign tmp_fu_282_p1 = iacc_reg_188;

assign tmp_s_fu_303_p1 = w_index_reg_199;

assign underflow_fu_489_p2 = (tmp_80_fu_483_p2 & p_Result_s_fu_450_p3);

assign w11_V_address0 = tmp_70_fu_339_p1;

assign w11_V_load_cast_fu_371_p1 = $signed(w11_V_q0);

assign w_index_1_fu_501_p2 = (w_index9_reg_243 + 17'd1728);

assign w_index_cast_fu_287_p1 = w_index_reg_199;

always @ (posedge ap_clk) begin
    w_index_cast_reg_570[16:11] <= 6'b000000;
    tmp_75_reg_698[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense_large_rf_gt_ni_4
